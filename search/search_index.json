{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"HomePage","text":"<p>Welcome to csrookie's website! This is the personal website of csrookie, dedicating to share info, resource and experience.</p> <p>I'm currently a student studying computer science in Shanghaitech University(\u4e0a\u6d77\u79d1\u6280\u5927\u5b66), Sophomore. I name my github repository 'csrookie' for, literally, I'm still a rookie in the field of cs. </p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p>Currently interested in computer vision(Point Cloud) and computer graphics(Neural Radiance Field). I am also a little bit interested into the interpretability in Deep Learning. </p> <p>I finished the internship in 4DVLab in September, 2024, proudly under the instruction and guidance of Prof.Yuexin Ma and senior Yiteng Xu. Currently, with great honor, I am working with Prof.Kewei Tu and Prof.Kan Ren.  </p> <p>For further resource and information, please refer to this link to my github homepage. If you want to contact me, feel free to email to: xiongzhzh2023@shanghaitech.edu.cn</p>"},{"location":"Blog/3DGS/note.html","title":"3DGS","text":"<p>3D Gaussian Splatting for Real-Time Radiance Field Rendering</p> <p>\u8bba\u6587\u94fe\u63a5</p>"},{"location":"Blog/3DGS/note.html#motivation","title":"Motivation","text":"<p>However, achieving high visual quality still requires neural networks that are costly to train and render, while recent faster methods inevitably trade off speed for quality.</p> <p>\u8f90\u5c04\u573a\u53d1\u5c55\u8fc5\u901f\uff0c\u4f46\u662f\u795e\u7ecf\u7f51\u7edc\u603b\u662f\u9762\u4e34\u7740quality(\u62df\u5408\u7a0b\u5ea6)\u4e0e\u65f6\u95f4\u7684trade-off\uff0c\u800c\u65f6\u95f4\u4e0efps\u53c8\u606f\u606f\u76f8\u5173\u3002\u4e8e\u662f\u80fd\u4e0d\u80fd\u5feb\u901f\u5730\u8fdb\u884c3D\u73af\u5883\u91cd\u5efa\u5462\uff1f\u8fd9\u7bc7\u5de5\u4f5c\u7684\u76ee\u6807\u4fbf\u662f\u5982\u6b64\uff1a</p> <p>We introduce three key elements that allow us to achieve state-of-the-art visual quality while maintaining competitive training times and importantly allow high-quality real-time (\u2265 30 fps) novel-view synthesis at 1080p resolution. </p> <p>\u4e09\u4e2akey elements\u5206\u522b\u662f\u4ec0\u4e48\u5462\uff1f</p> <ul> <li>Represent the scene with 3D Gaussians that preserve desirable properties of continuous volumetric radiance fields for scene optimization.</li> <li>Interleaved optimization/density control of the 3D Gaussians, notably optimizing anisotropic covariance to achieve an accurate representation of the scene.</li> <li>Develop a fast visibility-aware rendering algorithm that supports anisotropic splatting and both accelerates training and allows real-time rendering.</li> </ul>"},{"location":"Blog/3DGS/note.html#3d-gaussian-ellipsoid","title":"3D Gaussian Ellipsoid","text":"<p>\u5728CG geometry\u4e2d\u63d0\u5230\u8fc7Constructive Solid Geometry(CSG)\uff0c\u5c1d\u8bd5\u7528\u57fa\u672c\u51e0\u4f55\u5f62\u4f53\u4e4b\u95f4\u7684Boolean operations\u53bb\u5408\u6210\u590d\u6742\u7684\u51e0\u4f55\u4f53\uff0c\u4f46\u662f\u5982\u679c\u57fa\u672c\u51e0\u4f55\u5f62\u4f53\u592a\u591a\uff0c\u80af\u5b9a\u4e0d\u65b9\u4fbf\u7f51\u7edc\u548c\u4f18\u5316\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u4e00\u79cd\u9ad8\u5ea6\u53c2\u6570\u5316\u7684\u3001\u65b9\u4fbf\u4f18\u5316\u7684\u57fa\u672c\u51e0\u4f55\u5f62\u4f53\u5462\uff1f\u8bba\u6587\u4e2d\u521b\u65b0\u6027\u5730\u4f7f\u7528\u4e863D Gaussian Ellipsoid\u6765\u4f5c\u4e3a\u57fa\u672c\u51e0\u4f55\u5f62\u4f53\u3002\u4e2d\u5fc3\u70b9\u5b9a\u4e3a\u03bc (x, y, z)\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u534f\u65b9\u5dee\u77e9\u9635\uff08covariance matrix\uff09\u53bb\u5b9a\u4e49\u692d\u7403\u7684\u5927\u5c0f\u548c\u5f62\u72b6\u3002\u9ad8\u65af\u7528\u771f\u5b9e\u4e16\u754c\u5750\u6807\u7cfb\u4e0b\u7684\u534f\u65b9\u5dee\u77e9\u9635\u2211\u6765\u8fdb\u884c\u5b9a\u4e49\uff1a  </p> <p>\u4f46\u662f\u5728\u6e32\u67d3\u62102D\u7684\u65f6\u5019\uff0c\u8981\u4ee5\u6444\u50cf\u673a\u4e3a\u539f\u70b9\u7684\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u534f\u65b9\u5dee\u77e9\u9635\u8fdb\u884c\u53d8\u6362\uff0c\u4ece\u800c\u5f97\u5230\u6444\u50cf\u673a\u89c6\u89d2\u4e0b\u7684\u3001\u5c06\u8fdb\u884c\u5149\u6805\u5316\u76843D\u9ad8\u65af\u692d\u7403\uff1a\uff08\u53d8\u6362\u6709\u4e24\u70b9\uff1a\u4e00\u4e2a\u662ffrustum-&gt;cuboid\uff0ci.e.\uff0cprojective transformation\uff1b\u53e6\u4e00\u4e2a\u662ftranslation\uff0c\u5373viewing transformation\uff09</p> \\[ \\Sigma' = J W \\Sigma W^\\top J^\\top \\\\ where\\ W\\ is\\ the\\ viewing\\ transformation\\ and\\   J\\ is\\  Jacobian\\ \\\\ of\\ the\\ affine\\ approximation\\ of\\ projective\\ transformation \\] <p>\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u516c\u5f0f\u957f\u6210\u8fd9\u6837\uff0c\u8fd9\u662f\u56e0\u4e3a\u6d89\u53ca\u5230\u4fdd\u6301\u534f\u65b9\u5dee\u77e9\u9635\u7684\u534a\u6b63\u5b9a\u6027\u8d28\u3002\u8fd9\u5728\u534f\u65b9\u5dee\u77e9\u9635\u53d8\u6362\u7684\u4e0a\u4e0b\u6587\u4e2d\u975e\u5e38\u91cd\u8981\uff0c\u786e\u4fdd\u53d8\u6362\u540e\u7684\u77e9\u9635\u4f9d\u7136\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u534f\u65b9\u5dee\u77e9\u9635\u3002\u90a3\u4e48\u6b63\u5b9a\u77e9\u9635\u957f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u5047\u8bbe\u6709\u4e00\u4e2a\u5355\u4f4d\u7403\uff0c\u7136\u540e\u6211\u5728\u4e09\u4e2a\u5750\u6807\u8f74\u65b9\u5411\u653e\u7f29\uff0c\u7136\u540e\u8fdb\u884c\u65cb\u8f6c\uff0c\u90a3\u4e48\u4e00\u4e2a\u5927\u81f4\u7684\u692d\u7403\u5c31\u51fa\u6765\u4e86\uff0c\u867d\u7136\u4e0d\u662f\u9ad8\u65af\u5206\u5e03\u3002\u56e0\u6b64\uff1aGiven a scaling matrix \ud835\udc46 and rotation matrix \ud835\udc45, we can find the corresponding \u03a3:</p> \\[ \\Sigma = R S S^\\top R^\\top \\] <p>\u6ce8\u610f\u5230\u8fd9\u4e2a\u77e9\u9635\u4e5f\u662f\u534a\u6b63\u5b9a\u7684\u3002R S\u77e9\u9635\u5b9a\u4e49\u4e86\u65b9\u5411\uff0c\u548c\u692d\u7403\u7684\u4e09\u4e2a\u8f74\u5411\u7684\u957f\u5ea6\uff0c\u7136\u540e\u914d\u5408\u7b2c\u4e00\u4e2aG(x)\u516c\u5f0f\u5bf9\u8868\u9762\u8fdb\u884c\u9ad8\u65af\u5206\u5e03\u3002\u8bba\u6587\u4e2d\u7528\u4e00\u4e2a\u4e09\u7ef4\u5411\u91cfs\u6765\u8868\u793a\u653e\u7f29\uff08xyz\u8f74\u653e\u7f29\u7cfb\u6570\uff09\u548c\u4e00\u4e2a\u56db\u5143\u6570q\u6765\u8868\u793a\u65cb\u8f6c\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u9ad8\u65af\u692d\u7403\u6765\u8bf4\uff0c\u8fd9\u4e2a\u662fexplicit representation\uff0c\u4f46\u662f\u7528\u9ad8\u65af\u692d\u7403\u8868\u793ageometry\u53c8\u662fimplicit representation\u3002\u5728\u4e0a\u8ff0\u7684\u5b9a\u4e49\u4e4b\u540e\uff0c\u57fa\u672c\u51e0\u4f55\u4f53\u2014\u2014\u9ad8\u65af\u692d\u7403\u7ec8\u4e8e\u5b9a\u4e49\u5b8c\u6bd5\uff0c\u9ad8\u5ea6\u7684\u53c2\u6570\u5316\u4f7f\u5f97\u5b83\u5bb9\u6613\u88ab\u4f18\u5316\uff08optimized\uff09\uff0c\u4e14\u8868\u9762\u7684explicit representation\u516c\u5f0f\u53ef\u5fae\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u8fdb\u884c\u68af\u5ea6\u4e0b\u964d\u3002</p>"},{"location":"Blog/3DGS/note.html#spherical-harmonic-for-color","title":"Spherical Harmonic for Color","text":"<p>\u4e00\u4e2a\u9ad8\u65af\u692d\u7403\u5e94\u8be5\u6709\u54ea\u4e9bproperty\uff1f\u9664\u4e863D Position\uff0c\u534f\u65b9\u5dee\u77e9\u9635\uff0c\u8fd8\u5e94\u8be5\u6709\u4ec0\u4e48\uff1f\u9996\u5148\u60f3\u5230\u5e94\u8be5\u662f\u7c7b\u4f3c\u4e8eNeRF\u4e2d\u7684density\uff0c\u800c\u8bba\u6587\u4e2d\uff0c\u4e0d\u900f\u660e\u5ea6\u7528opacity \u03b1\u8868\u793a\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u57fa\u672c\u5355\u4f4d\u7684\u9ad8\u65af\u692d\u7403\uff0c\u53ea\u6709\u4e00\u4e2aopacity\u503c\u3002\u90a3\u4e48\u8fd8\u6709\u989c\u8272\u5462\uff1f\u8fd9\u5c31\u6709\u4e9b\u9ebb\u70e6\u4e86\uff0c\u56e0\u4e3a\u692d\u7403\u4e0a\u6709\u5f88\u591a\u7684\u70b9\uff0c\u4e0d\u50cfNeRF\u90a3\u6837\u7528\u5149\u7ebf\u65b9\u5411\u5411\u91cf\u5c31\u80fd\u77e5\u9053\u4e00\u4e2a\u70b9\u7684RGB\u503c\uff085D\u51fd\u6570\uff09\u3002\u90a3\u4e48\u5982\u4f55\u7ed9\u692d\u7403\u4e0a\u7684\u70b9\u6765\u4e00\u4e2a\"5D Function\"\u5462\uff1f\u8bba\u6587\u4e2d\u5c31\u4f7f\u7528\u4e86\u7403\u8c10\u51fd\u6570\u7684\u65b9\u6cd5\u62df\u5408\u989c\u8272\u3002</p> <p>\u7403\u8c10\u51fd\u6570\u53ef\u4ee5\u628a\u590d\u6742\u7684\u989c\u8272\u53d8\u5316\u7528\u4e00\u4e9b\u6570\u5b66\u51fd\u6570\u6765\u8868\u793a\uff0c\u5c31\u662f\u628a\u989c\u8272\u53d8\u5316\u5206\u89e3\u6210\u51e0\u4e2a\u7b80\u5355\u7684\u201c\u6ce2\u5f62\u201d\u3002\u7403\u8c10\u51fd\u6570\u7684\u9636\u6570 ll\u548c\u6b21\u6570 m\u51b3\u5b9a\u4e86\u63cf\u8ff0\u989c\u8272\u7684\u7ec6\u8282\u3002\u4f8b\u5982\uff0c\u4f4e\u9636\u7403\u8c10\u51fd\u6570\u53ef\u4ee5\u63cf\u8ff0\u5927\u7684\u989c\u8272\u53d8\u5316\uff08\u5982\u7403\u9762\u4e0a\u7684\u989c\u8272\u6e10\u53d8\uff09\uff0c\u800c\u9ad8\u9636\u7403\u8c10\u51fd\u6570\u53ef\u4ee5\u63cf\u8ff0\u5c0f\u7684\u3001\u7ec6\u5fae\u7684\u989c\u8272\u53d8\u5316\uff08\u5982\u9ad8\u5149\u6216\u53cd\u5c04\u7ec6\u8282\uff09\u3002\u901a\u8fc7\u4e00\u4e9b\u6570\u5b66\u516c\u5f0f\uff08\u901a\u5e38\u662f\u79ef\u5206\uff09\u6765\u8ba1\u7b97\u7403\u8c10\u7cfb\u6570 \\(c_l^m\\)\u3002\u8fd9\u4e9b\u7cfb\u6570\u544a\u8bc9\u6bcf\u4e2a\u7403\u8c10\u51fd\u6570\u5bf9\u989c\u8272\u7684\u8d21\u732e\u3002\u8fd9\u76f8\u5f53\u4e8e\u662f\u6cf0\u52d2\u5c55\u5f00\uff1a\u4e00\u4e2a\u692d\u7403\u4e0a\u7684\u989c\u8272\u53d8\u5316\u7528\u4e00\u4e2a\u51fd\u6570\u5f88\u96be\u5199\u51fa\u6765\uff0c\u6211\u5c31\u7528\u591a\u4e2a\u9891\u7387\u4e0d\u540c\u7684\u51fd\u6570\u53bb\u8868\u8fbe\uff0c\u7136\u540e\u8bb0\u5f55\u7684\u662f\u5404\u81ea\u51fd\u6570\u7684\u8868\u8fbe\u5f0f\u4e0e\u5404\u81ea\u51fd\u6570\u5bf9\u5e94\u7684\u6743\u91cd\u3002</p> <p>\u8ba1\u7b97\u7403\u8c10\u7cfb\u6570\u7684\u516c\u5f0f\uff1a\\(c_{l}^{m} = \\int_{0}^{2\\pi} \\int_{0}^{\\pi} C(\\theta, \\phi) \\, Y_{l}^{m*}(\\theta, \\phi) \\, \\sin \\theta \\, d\\theta \\, d\\phi\\)</p> <p>\u5176\u4e2d\uff0c\u7403\u8c10\u516c\u5f0f\\(Y_{l}^{m}(\\theta, \\phi)\\)\u7684\u5b9e\u6570\u5f62\u5f0f\uff1a  \u7528\u7403\u8c10\u7cfb\u6570\u8ba1\u7b97\u8868\u8fbe\u6700\u540e\u989c\u8272\uff1a\\(C(\\theta, \\phi) \\approx \\sum_{l=0}^{L} \\sum_{m=-l}^{l} c_{l}^{m} Y_{l}^{m}(\\theta, \\phi)\\)</p> <p>\u7528\\(C(\\theta, \\phi)\\)\u4e0a\u67e5\u9605xyz\u5750\u6807\u5c31\u80fd\u5f97\u5230RGB\u503c\uff0c\u56e0\u6b64\u8fd9\u79cd\u7c7b\u4f3c\u4e8e\u201c5D\u51fd\u6570\u201d\u7684\u4e1c\u897f\u7ec8\u4e8e\u8868\u8fbe\u51fa\u6765\u4e86\u3002\u8bba\u6587\u4e2d\uff0c\\(l=4\\)\uff0c\u56e0\u6b64\u4e00\u5171\u67091+3+5+7 = 16\u4e2a\u7403\u8c10\u57fa\u51fd\u6570\uff0c\u800cRGB\u6bcf\u4e00\u4e2a\u901a\u9053\u90fd\u6709\u4e00\u4e2a\\(C(\\theta, \\phi)\\)\uff0c\u56e0\u6b64\u5173\u4e8e\u989c\u8272\u7684\u8868\u8fbe\u5c06\u4f1a\u4f7f\u75283*16 = 48\u4e2a\u53c2\u6570\uff08\u5f53\u7136\u6240\u6709\u76843D\u9ad8\u65af\u692d\u7403\u5171\u7528\u4e00\u5957\u7403\u8c10\u57fa\u51fd\u6570\uff09</p>"},{"location":"Blog/3DGS/note.html#tile-rasterization-rendering","title":"Tile-Rasterization &amp; \u03b1-Rendering","text":"<p>\u6709\u4e86\u4e00\u5806\u7684\u9ad8\u65af\u692d\u7403\uff0c\u6211\u8fd8\u77e5\u9053\u4e00\u6761\u5149\u7ebf\u89c6\u89d2\u4e0b\u7a7f\u8fc7\u70b9\u7684opacity\u4e0eRGB\uff0c\u5982\u4f55\u7efc\u5408\u5b83\u4eec\u5f97\u5230\u4e00\u4e2a\u6700\u7ec8\u7684RGB\u503c\u5462\uff1f\u8bba\u6587\u4e2d\u6ca1\u6709\u4f7f\u7528NeRF\u7684density\u90a3\u4e00\u5957\u9010pixel\u7684\u516c\u5f0f\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u9010tile(\u74e6\u7247)\u7684Alpha Rendering\u3002</p> <p>\u6211\u4eec\u7684\u65b9\u6cd5\u9996\u5148\u5c06\u5c4f\u5e55\u5212\u5206\u4e3a 16\u00d716 \u7684\u74e6\u7247\uff0c\u7136\u540e\u5bf9 3D \u9ad8\u65af\u70b9\u8fdb\u884c\u89c6\u9525\u4f53\u548c\u6bcf\u4e2a\u74e6\u7247\u7684\u5254\u9664\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u4fdd\u7559\u90a3\u4e9b\u5728\u89c6\u9525\u4f53\u4e2d\u5177\u6709 99% \u7f6e\u4fe1\u533a\u95f4\u7684\u9ad8\u65af\u70b9\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u4fdd\u62a4\u5e26\u6765\u7b80\u5316\u5730\u5254\u9664\u90a3\u4e9b\u4f4d\u7f6e\u6781\u7aef\u7684\u9ad8\u65af\u70b9\uff08\u5373\u90a3\u4e9b\u5747\u503c\u63a5\u8fd1\u8fd1\u88c1\u526a\u9762\u5e76\u4e14\u8fdc\u79bb\u89c6\u9525\u4f53\u7684\u70b9\uff09\uff0c\u56e0\u4e3a\u8ba1\u7b97\u5b83\u4eec\u7684\u6295\u5f71 2D \u534f\u65b9\u5dee\u53ef\u80fd\u4f1a\u4e0d\u7a33\u5b9a\u3002\u7136\u540e\uff0c\u6211\u4eec\u6839\u636e\u6bcf\u4e2a\u9ad8\u65af\u70b9\u4e0e\u74e6\u7247\u7684\u91cd\u53e0\u6570\u91cf\u5b9e\u4f8b\u5316\u6bcf\u4e2a\u9ad8\u65af\u70b9\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u5206\u914d\u4e00\u4e2a\u7ed3\u5408\u4e86\u89c6\u7a7a\u95f4\u6df1\u5ea6\u548c\u74e6\u7247 ID \u7684\u952e\u3002\u63a5\u7740\uff0c\u6211\u4eec\u4f7f\u7528\u5feb\u901f\u7684 GPU \u57fa\u6570\u6392\u5e8f\uff08Radix Sort\uff09\u5bf9\u9ad8\u65af\u70b9\u8fdb\u884c\u6392\u5e8f\u3002\u6ce8\u610f\uff0c\u6ca1\u6709\u989d\u5916\u7684\u6bcf\u50cf\u7d20\u6392\u5e8f\uff0c\u800c\u662f\u6839\u636e\u8fd9\u79cd\u521d\u59cb\u6392\u5e8f\u8fdb\u884c\u6df7\u5408\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684 \u03b1-blending \u5728\u67d0\u4e9b\u914d\u7f6e\u4e0b\u53ef\u80fd\u662f\u8fd1\u4f3c\u7684\u3002\u7136\u800c\uff0c\u5f53\u9ad8\u65af\u70b9\u7684\u5c3a\u5bf8\u63a5\u8fd1\u5355\u4e2a\u50cf\u7d20\u65f6\uff0c\u8fd9\u4e9b\u8fd1\u4f3c\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u79cd\u9009\u62e9\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u8bad\u7ec3\u548c\u6e32\u67d3\u6027\u80fd\uff0c\u540c\u65f6\u5728\u6536\u655b\u573a\u666f\u4e2d\u6ca1\u6709\u4ea7\u751f\u660e\u663e\u7684\u4f2a\u5f71\u3002</p> <p>\u6392\u5e8f\u540e\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u74e6\u7247\u751f\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u901a\u8fc7\u786e\u5b9a\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u6309\u6df1\u5ea6\u6392\u5e8f\u7684\u6761\u76ee\uff0c\u8fd9\u4e9b\u6761\u76ee\u6295\u5f71\u5230\u7ed9\u5b9a\u7684\u74e6\u7247\u4e0a\u3002\u5bf9\u4e8e\u5149\u6805\u5316\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u74e6\u7247\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u5757\u3002\u6bcf\u4e2a\u5757\u9996\u5148\u534f\u4f5c\u5730\u5c06\u9ad8\u65af\u70b9\u5305\u52a0\u8f7d\u5230\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u50cf\u7d20\uff0c\u6309\u524d\u5230\u540e\u904d\u5386\u5217\u8868\uff0c\u7d2f\u79ef\u989c\u8272\u548c \u03b1 \u503c\uff0c\u4ece\u800c\u6700\u5927\u5316\u6570\u636e\u52a0\u8f7d/\u5171\u4eab\u548c\u5904\u7406\u7684\u5e76\u884c\u6027\u3002\u5f53\u50cf\u7d20\u7684 \u03b1 \u8fbe\u5230\u76ee\u6807\u9971\u548c\u5ea6\u65f6\uff0c\u76f8\u5e94\u7684\u7ebf\u7a0b\u505c\u6b62\u3002\u5b9a\u671f\u67e5\u8be2\u74e6\u7247\u4e2d\u7684\u7ebf\u7a0b\uff0c\u5f53\u6240\u6709\u50cf\u7d20\u7684 \u03b1 \u9971\u548c\uff08\u5373 \u03b1 \u8fbe\u5230 1\uff09\u65f6\uff0c\u6574\u4e2a\u74e6\u7247\u7684\u5904\u7406\u7ec8\u6b62\u3002</p> <p>\u5728\u5149\u6805\u5316\u8fc7\u7a0b\u4e2d\uff0c\u03b1 \u7684\u9971\u548c\u5ea6\u662f\u552f\u4e00\u7684\u505c\u6b62\u6807\u51c6\u3002\u4e0e\u4e4b\u524d\u7684\u5de5\u4f5c\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u9650\u5236\u63a5\u6536\u68af\u5ea6\u66f4\u65b0\u7684\u6df7\u5408\u539f\u8bed\u7684\u6570\u91cf\u3002\u6211\u4eec\u5f3a\u5236\u6267\u884c\u8fd9\u4e00\u5c5e\u6027\uff0c\u4ee5\u4fbf\u6211\u4eec\u7684\u65b9\u6cd5\u80fd\u591f\u5904\u7406\u5177\u6709\u4efb\u610f\u6df1\u5ea6\u590d\u6742\u6027\u7684\u573a\u666f\uff0c\u5e76\u51c6\u786e\u5b66\u4e60\u8fd9\u4e9b\u573a\u666f\uff0c\u800c\u65e0\u9700\u8fdb\u884c\u573a\u666f\u7279\u5b9a\u7684\u8d85\u53c2\u6570\u8c03\u4f18\u3002\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u6062\u590d\u524d\u5411\u4f20\u64ad\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u5b8c\u6574\u6df7\u5408\u70b9\u5e8f\u5217\u3002\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u4efb\u610f\u957f\u7684\u6df7\u5408\u70b9\u5217\u8868\u5b58\u50a8\u5728\u5168\u5c40\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u907f\u514d\u52a8\u6001\u5185\u5b58\u7ba1\u7406\u7684\u5f00\u9500\uff0c\u6211\u4eec\u9009\u62e9\u518d\u6b21\u904d\u5386\u6bcf\u4e2a\u74e6\u7247\u7684\u5217\u8868\uff1b\u6211\u4eec\u53ef\u4ee5\u91cd\u7528\u524d\u5411\u4f20\u64ad\u4e2d\u7684\u9ad8\u65af\u70b9\u6392\u5e8f\u6570\u7ec4\u548c\u74e6\u7247\u8303\u56f4\u3002\u4e3a\u4e86\u65b9\u4fbf\u68af\u5ea6\u8ba1\u7b97\uff0c\u6211\u4eec\u73b0\u5728\u4ece\u540e\u5411\u524d\u904d\u5386\u8fd9\u4e9b\u5217\u8868\u3002</p>"},{"location":"Blog/3DGS/note.html#pipeline","title":"Pipeline","text":"<p>\u89c1\u4e0a\u56fe\u3002\u7f51\u7edc\u8f93\u5165\u4e3a\u4e00\u5806\u7684\u7167\u7247\u4ee5\u53ca\u5bf9\u5e94\u7684\u76f8\u673a\u65b9\u5411\u4e0e\u4f4d\u7f6e\uff0c\u9996\u5148\u901a\u8fc7SfV(Structure from Motion)\u65b9\u6cd5\u62df\u5408\u51fa\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u7cfb\u5217\u70b9\uff0c\u7136\u540e\u5404\u81ea\u4e3a\u4e2d\u5fc3\u70b9\u521d\u59cb\u5316\u9ad8\u65af\u692d\u7403\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u7403\u8c10\u7cfb\u6570\uff0copacity\uff0c\u4ee5\u53cas\u5411\u91cf(\u8d1f\u8d23scale)\u4e0e\u56db\u5143\u6570q\uff08\u8d1f\u8d23\u65cb\u8f6c\uff09\u3002\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u4e09\u7ef4\u573a\u666f\u5728\u4e00\u4e2a\u6444\u50cf\u673a\u89c6\u89d2\u4e0b\u8fdb\u884c\u6295\u5f71\uff0c\u7136\u540e\u7528\u53ef\u5fae\u5206tile-rasterizer\u8fdb\u884c\u5149\u6805\u5316\u6210\u50cf\uff0c\u5f97\u5230image\uff0c\u7136\u540e\u4e0eground truth\u8fdb\u884c\u6bd4\u8f83\u7b97\u51faloss\uff0c\u7136\u540e\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0Rasterizer, Projection, 3D Gaussians\u53c2\u6570\u3002</p> <p>Loss\u4e3a\u4e24\u5f20\u56fe\u7247\u7684\\(L1\\ Loss\\) \u4e0e\\(D-SSIM\\ Loss\\)\uff08Structural Similarity Index Measure\uff09\u7684\u7ed3\u5408\uff1a  \u57fa\u4e8e\u68af\u5ea6\u81ea\u9002\u5e94\u6539\u53d8\u70b9\u4e91\u5206\u5e03\u65b9\u5f0f(Adaptive Density Control)\uff1a\u5728\u6bcf\u9694\u4e00\u5b9aepoch\u6570\u91cf\u4e4b\u540e\u8fdb\u884c\u4e00\u6b21\uff0c\u51b3\u5b9a\u662f\u5426\u66f4\u65b0\u70b9\u4e91\u7684\u5206\u5e03\u3002\u7b2c\u4e00\u79cd\u662fPruning\uff0c\u51cf\u5c11\u4f2a\u5f71\u7684\u51fa\u73b0\uff1a\u5176\u4e2d\u4e0d\u900f\u660e\u5e95\u4f4e\u4e8e\u9608\u503c\u7684\uff0c\u6216\u8005\u79bb\u76f8\u673a\u592a\u8fd1\u7684\u4f1a\u88ab\u5220\u6389\u3002</p> <p>\u7b2c\u4e8c\u79cd\u662fDensification\uff0c\u8fc7\u5ea6\u91cd\u6784\u6216\u6b20\u91c7\u6837\uff08\u8fd9\u4e00\u90e8\u5206\u5c31\u4f1a\u57fa\u4e8e\u68af\u5ea6\u6765\u8fdb\u884c\u5224\u65ad\uff09\u3002\u6709\u7684\u65f6\u5019\uff0c\u9ad8\u65af\u692d\u7403\u4f1a\u4e0d\u4f1a\u8fc7\u5c11\u6216\u8fc7\u591a\uff1f\u5f53\u7136\u6709\u53ef\u80fd\uff0c\u5982\u679c\u5b8c\u5168\u4f9d\u8d56\u521d\u59cb\u5316\u7684\u70b9\u4e91\uff0c\u90a3\u4e48\u5c31\u6709\u4e9b\u4e0d\u5408\u9002\u4e86\u3002\u5982\u4e0b\u56fe\uff1a\u4e24\u4e2a</p> <p></p> <p>\u5bf9\u4e8e\u4e0a\u4e0b\u4e24\u4e2a\u539f\u6765\u7684\u9ad8\u65af\u692d\u7403\u6765\u8bf4\uff0c\u5b83\u4eec\u7684\u68af\u5ea6\u65e0\u7591\u662f\u5f88\u5927\u7684\u3002\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u5224\u65ad\u8fd9\u4e2a\u9ad8\u65af\u692d\u7403\u7684\u65b9\u5dee\uff1a\u5982\u679c\u8fc7\u5c0f\uff0c\u5c31\u8bf4\u660e\u662f\u7b2c\u4e00\u884c\u7684\u60c5\u51b5\uff0c\u9700\u8981clone\u51fa\u53e6\u5916\u4e00\u4e2a\u9ad8\u65af\u692d\u7403\u5e2e\u5fd9\u8fdb\u884c\u62df\u5408\uff1b\u5982\u679c\u8fc7\u5c0f\uff0c\u8bf4\u660e\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u9700\u8981\u8fd9\u4e2a\u5927\u9ad8\u65af\u692d\u7403\u5206\u88c2\u6210\u4e24\u4e2a\u5c0f\u7684\uff0c\u4ece\u800c\u66f4\u597d\u5730\u62df\u5408\u3002</p> <p>\u90a3\u4e48\u4e0a\u8ff0\u5c31\u662f3D\u9ad8\u65af\u6cfc\u6e85\u7684\u5927\u81f4\u6d41\u7a0b\u4e86\u3002\u4e0b\u9762\u662f\u5173\u4e8e\u5b83\u7684\u4f2a\u4ee3\u7801\u56fe(source link)\uff1a</p> <p></p>"},{"location":"Blog/3DGS_reproduction/note.html","title":"3DGS_reproduction","text":""},{"location":"Blog/3DGS_reproduction/note.html#dateset-training","title":"dateset -&gt; training","text":"<p>\u7406\u8bba\u4e0a, <code>conda env create --file environment.yml</code>\u547d\u4ee4\u5373\u53ef\u5b9e\u73b0\u73af\u5883\u7684\u914d\u7f6e. \u7136\u540e\u6570\u636e\u96c6\u9009\u62e9\u7684\u662f<code>https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/</code>\u7684Scenes. \u5176\u4e2d, \u4e00\u4e2a\u6587\u4ef6\u5939\u542b\u6709\u4e24\u4e2a\u5b50\u6587\u4ef6\u5939: <code>images sparse</code>. </p> <p>\u73af\u5883\u914d\u7f6e\u6ca1\u9047\u5230\u4ec0\u4e48\u5927\u95ee\u9898, \u7136\u540e\u6709\u4e86\u73af\u5883\u548c\u6570\u636e\u96c6, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fd0\u884c\u8bd5\u9a8c\u4e86: </p> <p><code>python train.py -s data -m data/output - 1</code></p> <p>\u5176\u4e2d, <code>-r</code>\u4ee3\u8868\u5206\u8fa8\u7387\u4e58\u4ee5\\(\\frac{1}{s}\\), \u4e0d\u8f93\u5165\u7684\u8bdd\u9ed8\u8ba4\u662f1. \u5982\u679c\u8bad\u7ec3\u7684\u65f6\u5019\u9047\u5230\u4e86<code>CUDA_OUT_OF_MEMORY</code>(\u5982\u679c\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u800c\u4e14\u6570\u636e\u5f88\u5927; \u4e00\u822c\u5b98\u7f51\u63d0\u4f9b\u7684\u6570\u636e, 12GB\u663e\u5b58\u5c31\u53ef\u4ee5run), \u90a3\u4e48\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\u8fdb\u884c\u538b\u7f29. \u800c<code>-s</code>\u662f\u542b\u6709images\u548csparse\u5b50\u6587\u4ef6\u5939\u7684\u6587\u4ef6\u5939.</p> <p>\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b:</p> <p></p>"},{"location":"Blog/3DGS_reproduction/note.html#training_result-demo","title":"training_result-&gt;demo","text":"<p>\u4f7f\u7528SIBR\u8f6f\u4ef6\u53ef\u89c6\u5316\u8bad\u7ec3\u7684\u7ed3\u679c, \u8fd9\u91cc\u63a8\u8350\u5728WINDOWS\u4e0a\u9762\u4e0b\u8f7d: https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/binaries/viewers.zip</p> <p>\u628a\u8bad\u7ec3\u7ed3\u679c\u6587\u4ef6\u5939\u642c\u56de\u5230WINDOWS, \u7136\u540e\u8fd0\u884c\u547d\u4ee4(\u8981\u5148\u8fdb\u5165\u5de5\u4f5c\u76ee\u5f55): <code>.\\bin\\SIBR_gaussianViewer_app -m output</code></p> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u53ef\u89c6\u5316\u4e86!</p> <p></p>"},{"location":"Blog/3DGS_reproduction/note.html#raw-mp4-dataset","title":"raw mp4-&gt;dataset","text":"<p>\u5982\u679c\u8981\u628amp4\u5904\u7406\u6210\u4ee3\u7801\u80fd\u591f\u5229\u7528\u7684\u6570\u636e\u96c6, \u9700\u8981\u7ecf\u8fc7\u4e24\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65\u662fmp4\u622a\u53d6\u51fa\u4e00\u5e27\u5e27\u7167\u7247, \u7b2c\u4e8c\u6b65\u662f\u6839\u636e\u56fe\u7247\u751f\u6210\u70b9\u4e91.</p> <p>\u60f3\u8981\u628amp4\u622a\u53d6\u51fa\u56fe\u7247, \u9700\u8981\u4f7f\u7528ffmpeg\u547d\u4ee4. \u901a\u8fc7\u4ee5\u4e0b\u7684bash\u5c31\u53ef\u4ee5\u5728root\u7ba1\u7406\u6743\u9650\u4e0b\u5b89\u88c5\u4e86:</p> <pre><code>apt-get remove ffmpeg\napt-get purge ffmpeg\nconda remove ffmpeg # \u5982\u679cconda\u91cc\u9762\u5df2\u7ecf\u6709\u4e86\napt-get install ffmpeg\n</code></pre> <p>\u90a3\u4e48\u4e4b\u540e\u5982\u4f55\u8c03\u7528colmap\u5e93\u4ece\u800c\u751f\u6210\u70b9\u4e91\u662f\u6700\u9ebb\u70e6\u7684\u6b65\u9aa4: \u5b89\u88c5colmap. \u9996\u5148\u5b89\u88c5\u4e00\u4e0b\u7684dependencies:</p> <pre><code>apt-get install \\\n    git \\\n    cmake \\\n    build-essential \\\n    libboost-program-options-dev \\\n    libboost-filesystem-dev \\\n    libboost-graph-dev \\\n    libboost-system-dev \\\n    libboost-test-dev \\\n    libeigen3-dev \\\n    libsuitesparse-dev \\\n    libfreeimage-dev \\\n    libmetis-dev \\\n    libgoogle-glog-dev \\\n    libgflags-dev \\\n    libglew-dev \\\n    qtbase5-dev \\\n    libqt5opengl5-dev \\\n    libcgal-dev \\\n    libcgal-qt5-dev \\\n    libflann-dev \\\n    libsqlite3-dev \\\n    libatlas-base-dev\n</code></pre> <p>\u7136\u540e\u628acolmap\u7684repo\u4e0b\u5230\u670d\u52a1\u5668\u91cc\u9762. \u8fd9\u91cc\u6211\u9009\u7684\u662fcolmap:COLMAP - Structure-from-Motion and Multi-View Stereo - GitCode\u94fe\u63a5\u8fdb\u884c\u4e0b\u8f7d.</p> <p>\u4e4b\u540e\u662f\u5b89\u88c5Ceres\u4f18\u5316\u5e93: \u5177\u4f53\u6559\u7a0b\u94fe\u63a5: Installation \u2014 Ceres Solver (ceres-solver.org)  \u4ee5\u53ca\u5728\u8fd9\u4e2a\u5b98\u7f51\u91cc\u9762\u53ef\u4ee5\u4e0b\u8f7d\u538b\u7f29\u5305. \u6ce8\u610f\u8fd9\u4e2a<code>ceres-solver</code>\u5b89\u88c5\u5305\u8981\u653e\u5728<code>colmap</code>\u91cc\u9762. </p> <p>\u6216\u8005\u53c2\u8003\u8be5\u94fe\u63a5: \u4f9d\u8d56\u5e93\uff1aCeres-solver-2.0.0\u5b89\u88c5_ceres2.0.0-CSDN\u535a\u5ba2</p> <p>\u90a3\u4e48\u6e90\u7801\u7f16\u8bd1\u4e2d, \u9700\u8981\u5728<code>CMakeList</code>\u4e2d\u624b\u52a8\u52a0\u5165<code>CUDA_COMPILER</code>\u7684\u4fe1\u606f: <code>set(CMAKE_CUDA_COMPILER /usr/local/cuda-11.6/bin/nvcc)</code>(\u6ce8\u610f\u662f\u628anvcc\u6307\u5b9a\u8fdb\u53bb)</p> <p>\u90a3\u4e48<code>ceres</code>\u6e90\u7801\u7f16\u8bd1\u5b8c\u6210\u4e4b\u540e, \u5c31\u53ef\u4ee5\u6e90\u7801\u7f16\u8bd1<code>colmap</code>\u4e86. \u540c\u6837, \u9700\u8981\u5728<code>colmap</code>\u7684CMakeList\u4e2d\u52a0\u5165<code>CUDA_COMPILER</code>\u8def\u5f84\u7684\u6307\u5b9a. \u9664\u6b64\u4e4b\u5916, \u8fd8\u6709\u90e8\u5206\u7684\u5730\u65b9\u9700\u8981\u4fee\u6539:</p> <ol> <li><code>CMakeList</code>\u4e2d\u9700\u8981\u52a0\u5165: <code>set(CMAKE_CUDA_ARCHITECTURES \"native\")</code></li> <li><code>/usr/local/lib/cmake/Ceres/FindGlog.cmake</code>\u4e2d, <code>#add glog::glog target</code>\u90e8\u5206\u5168\u90e8\u6ce8\u91ca\u6389</li> <li><code>colmap/cmake/CMakeHelper.cmake</code>\u6587\u4ef6\u4e2d\uff0c\u9700\u8981\u5728<code>macro(COLMAP_ADD_LIBRARY)</code>\u4e00\u6bb5\u4e2d\uff0c \u5728<code>set(multiValueArgs NAME SRCS PRIVATE_LINK_LIBS PUBLIC_LINK_LIBS)</code>\u4e4b\u540e\u52a0\u5165<code>find_package(CUDAToolkit REQUIRED)</code>\u3002</li> </ol> <p>\u90a3\u4e48<code>colmap</code>\u7f16\u8bd1\u5b8c\u6210\u4e4b\u540e, \u94fa\u57ab\u5c31\u5b8c\u6210\u4e86. \u7b2c\u4e00\u6b65\u662fmp4\u5904\u7406\u6210\u56fe\u7247: </p> <p><code>ffmpeg -i input.mp4 -vf \"setpts=0.2*PTS\" input/input_%4d.jpg</code></p> <p>\u7136\u540e, \u8c03\u7528<code>convert.py</code>\u7a0b\u5e8f: <code>python convert.py -s data</code></p> <p>\u4e4b\u540e\u5c31\u80fd\u770b\u5230data\u6587\u4ef6\u5939\u91cc\u9762\u51fa\u73b0\u4e86<code>images sparse</code>\u4e24\u4e2a\u5b50\u6587\u4ef6\u5939. \u90a3\u4e48\u4e4b\u540e\u7684\u6b65\u9aa4\u540c\u4e0a.</p>"},{"location":"Blog/3DGS_reproduction/note.html#sample-result","title":"Sample Result","text":"<p>\u4e0a\u8bfe\u6478\u9c7c\u7684\u65f6\u5019\u5f55\u5236\u4e86\u4e00\u6bb5\u4e09\u5f97\u5229\u9ea6\u8336\u7684\u89c6\u9891\uff0c\u7136\u540e\u7ecf\u8fc7ffmpeg\u5206\u7167\u7247\u3001convert(colmap)\u51fa\u70b9\u4e91\uff0c\u6700\u540e\u7ecf\u8fc7\u8bad\u7ec3\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u53ef\u89c6\u5316\u51fa\u975e\u5e38\u597d\u7684\u7ed3\u679c\u5982\u4e0b\u56fe\u3002</p> <p></p> <p>\u53ef\u89c6\u5316\u7684\u6548\u679c\u975e\u5e38\u597d\uff0c\u751a\u81f3\u4e0a\u9762\u7684\u751f\u4ea7\u65e5\u671f\u7b49\u7ec6\u8282\u90fd\u8fd8\u539f\u7684\u975e\u5e38\u5230\u4f4d\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5f55\u5236\u7684\u65f6\u5019\uff1a</p> <ol> <li>\u53ef\u4ee5\u4e0d\u73af\u7ed5\u8fd9\u4e2a\u7269\u4f53\u6444\u50cf\uff0c\u53ef\u4ee5\u53ea\u62cd\u6444\u4e00\u534a\u89c6\u89d2\u7684\uff1b\u800c\u4e14\u4ef0\u89d2\u53ef\u4ee5\u4e30\u5bcc\u4e00\u70b9</li> <li>\u6444\u50cf\u79fb\u52a8\u7684\u901f\u5ea6\u4e0d\u8981\u592a\u5feb\uff0c\u5c3d\u53ef\u80fd\u5c06\u89c6\u9891\u7684\u65f6\u95f4\u63a7\u5236\u572845\u79d2-1\u5206\u949f\u5de6\u53f3\u6bd4\u8f83\u5408\u9002\u3002\u5982\u679c\u662f10-20\u79d2\uff0c\u5b9e\u6d4b\uff0c\u6700\u540e\u6311\u51fa\u7684\u6570\u636e\u96c6\u7684\u7167\u7247\u975e\u5e38\u5c11\uff0c\u5c31\u4f1a\u5bfc\u81f4\u8bad\u7ec3\u5c31\u662f\u4e00\u5768\u3002</li> <li>\u5982\u679c\u8981\u672c\u5730viewer\u8fd0\u884c\u670d\u52a1\u5668\u4e0a\u8bad\u7ec3\u7684\u7ed3\u679c\uff0c\u7535\u8111\u5e94\u8be5\u914d\u6709N\u5361\uff08\u5b9e\u6d4b\u6838\u663e\u4f1a\u62a5\u9519\uff09</li> </ol>"},{"location":"Blog/AAAI2025/log.html","title":"Log","text":"<p>\u4eca\u5929\u662f2024\u5e746\u670822\u65e5, \u4e3a\u4e86\u5b8c\u62108.15\u622a\u7a3f\u7684AAAI\u7684\u7ec4\u5185\u4efb\u52a1, \u6211\u51b3\u5b9a\u5199\u4e00\u4e2a\u65e5\u5fd7, \u8bb0\u5f55\u6211\u7684\u5de5\u4f5c:</p>"},{"location":"Blog/AAAI2025/log.html#622","title":"6.22","text":"<p>\u4e4b\u524dMotionGPT\u5b9e\u9a8c\u590d\u73b0\u7684iteration\u6570\u91cf\u4e0d\u591f, \u4e8e\u662f\u52a0\u5927\u4e86\u8bad\u7ec3\u91cf. \u4f46\u662f\u5728pretrain\u4e3a260\u8f6e, \u603b\u8fed\u4ee3\u5c06\u8fd1300K\u7684\u5b9e\u9a8c\u4e4b\u540e, \u4f9d\u7136, \u5728\u4e0dfinetune\u7684\u60c5\u51b5\u4e0b, R3\u51c6\u786e\u5ea6\u8fd8\u662f\u4e0d\u5c3d\u4eba\u610f. \u4e0d\u597d\u4e0d\u574f\u7684\u6d88\u606f\u662f, \u8fd9\u4e2a\u6570\u636e\u73b0\u5728\u662f0.57(t2m), \u548c\u4e4b\u524d\u7684finetune\u540e\u7684\u6a21\u578b\u6c34\u5e73\u5dee\u4e0d\u591a\u4e00\u6837; \u8fd8\u6709\u53e6\u4e00\u4e2a\u4e0d\u597d\u4e0d\u574f\u7684\u6d88\u606f, \u90a3\u5c31\u662fissue\u91cc\u9762\u4e24\u4e2a\u5e16\u5b50\u53cd\u9988\u4e86\u5b9e\u9a8c\u590d\u73b0\u6570\u636e\u548c\u8bba\u6587\u6570\u636e\u4e0d\u4e00\u6837\u7684\u95ee\u9898. </p> <p></p> <p></p> <p>\u6ca1\u6709finetune\u7684<code>epoch=260</code>\u7684\u6a21\u578b\u7684t2m\u7684\u6d4b\u8bd5\u7ed3\u679c: </p> <p></p> <p>\u800c\u4e14\u4ecehuggingface\u4e0b\u4e0b\u6765\u4e86\u6a21\u578b, test t2m\u7684\u7ed3\u679c\u4e5f\u662f0.66\u5de6\u53f3(\u8fd9\u4e00\u70b9\u5728\u4e0a\u9762\u7684issue\u91cc\u9762\u4e5f\u53cd\u6620\u8fc7), \u4e5f\u8fdc\u4f4e\u4e8e\u8bba\u6587\u91cc\u9762\u7684\u6570\u636e. \u6240\u4ee5\u8bf4\u4e0d\u6e05\u9664\u662f\u4ec0\u4e48\u539f\u56e0, \u53ef\u80fd\u662f\u670d\u52a1\u5668\u7684\u4e0d\u540c? </p> <p>\u540c\u65f6, test\u6570\u636e\u96c6\u7684corrupt\u95ee\u9898\u4e5f\u662f\u4e9f\u5f85\u89e3\u51b3\u7684. \u975e\u5e38\u5947\u5999\u7684\u662f, \u8bad\u7ec3\u7684\u65f6\u5019, config\u6587\u4ef6\u91cc\u9762\u9ed8\u8ba4\u7684eval\u9636\u6bb5\u7528\u7684\u662ftest split. \u800c\u4e14\u6d4b\u8bd5\u7684\u65f6\u5019\u4e5f\u662ftest. </p> <p>test\u6570\u636e\u96c6\u6709corruption\u7684\u95ee\u9898, \u4e5f\u662fissue\u91cc\u9762\u6709\u4eba\u53cd\u5e94\u7684. </p> <p></p> <p>\u73b0\u5728<code>epoch=260(300K iteration)</code>\u7684<code>pretrain model</code>\u5728\u8fdb\u884cfinetuning, \u4f46\u662f\u6211\u8ba4\u4e3a\u60c5\u51b5\u4ecd\u7136\u4e0d\u662f\u5f88\u4e50\u89c2. </p> <p>\u5173\u4e8em2t\u7684test, \u53d1\u73b0\u4e86\u5f88\u591a\u7a0b\u5e8f\u4e0a\u7684bug\u548c\u5de5\u4f5c. \u9996\u5148\u5c31\u662f\u4ecehugging face\u4e0a\u9762\u4e0b\u8f7d distilbert-base-uncased \u4ee5\u53ca roberta-large. \u7136\u540e\u5c31\u662fnlgmetricverse\u91cc\u9762load_metric(\"bleu\")\u7684\u65f6\u5019, _download_and_prepare\u662f\u4ece\u7f51\u4e0a\u4e0b\u8f7dbleu.py\u7684. \u4e8e\u662f\u6211\u624b\u52a8\u4e0b\u8f7d, \u7136\u540e\u4e0a\u4f20\u5230\u4e86\u670d\u52a1\u5668: \u5177\u4f53\u66f4\u6539\u5982\u4e0b:</p> <pre><code># \u539f\u6765: \ndef _download_and_prepare(self, dl_manager) -&gt; None:\n        nmt_source = \"https://raw.githubusercontent.com/tensorflow/nmt/0be864257a76c151eef20ea689755f08bc1faf4e/nmt/scripts/bleu.py\"\n        self.external_module_path = dl_manager.download(nmt_source)\n# \u540e\u6765: \ndef _download_and_prepare(self, dl_manager) -&gt; None:\n        nmt_source = \"https://raw.githubusercontent.com/tensorflow/nmt/0be864257a76c151eef20ea689755f08bc1faf4e/nmt/scripts/bleu.py\"\n        pre_source = \"/(......)/MotionGPT-main/mGPT/metrics/bleu/bleu.py\"\n        self.external_module_path = dl_manager.download(pre_source)\n</code></pre> <p>\u7136\u540e\u5c31\u662fnlg\u76f8\u5173\u7684\u8bc4\u4ef7metric(\u8fd9\u91cc\u771f\u7684\u662f\u5f88\u62bd\u8c61):</p> <pre><code># \u539f\u6765: \nfor k in range(1, self.bleu_k + 1):\n            metrics[f\"Bleu_{str(k)}\"] = torch.tensor(scores[f'bleu_{str(k)}'], \n                                                     device=self.device)\n# \u540e\u6765:\nfor k in range(1, self.bleu_k + 1):\n            metrics[f\"Bleu_{str(k)}\"] = torch.tensor(scores[f'bleu_{str(k)}'], dtype=torch.float32,\n                                                     device=self.device)\n# \u518d\u540e\u6765:\nmetrics[f\"Bleu_{str(1)}\"] = torch.tensor(scores[f'bleu_{str(1)}']['score'], dtype=torch.float32,\n                                                     device=self.device)\n        metrics[f\"Bleu_{str(4)}\"] = torch.tensor(scores[f'bleu_{str(4)}']['score'], dtype=torch.float32,\n                                                     device=self.device) \n</code></pre> <p>\u56e0\u4e3a\u8bba\u6587\u91cc\u9762\u53ea\u663e\u793a\u4e86bleu@1 4\u7684\u6570\u636e, \u56e0\u6b64\u5728\u4e0a\u9762\u7684\u4fee\u6539\u4e2d\u6211\u4e5f\u53ea\u5f55\u5165\u4e86\u8fd9\u4e24\u4e2a\u6570\u636e; \u6309\u7167\u539f\u6765\u7684\u4ee3\u7801, \u90a3\u4e48\u5c31\u5e94\u8be5\u5728m2t.py\u91cc\u9762\u7684\u5bf9\u5e94\u5185\u5bb9, \u5c06\u56db\u79cd\u6570\u636e\u90fd\u8fdb\u884c\u5f55\u5165(\u89c1\u4e0b):</p> <pre><code>if self.cfg.model.params.task == 'm2t':\n            from nlgmetricverse import NLGMetricverse, load_metric\n            metrics = [\n                load_metric(\"bleu\", resulting_name=\"bleu_1\", compute_kwargs={\"max_order\": 1}),\n                load_metric(\"bleu\", resulting_name=\"bleu_2\", compute_kwargs={\"max_order\": 2}),\n                load_metric(\"bleu\", resulting_name=\"bleu_3\", compute_kwargs={\"max_order\": 3}),\n                load_metric(\"bleu\", resulting_name=\"bleu_4\", compute_kwargs={\"max_order\": 4}),\n                load_metric(\"rouge\"),\n                load_metric(\"cider\"),\n            ]\n            self.nlg_evaluator = NLGMetricverse(metrics)\n</code></pre> <p>\u4fee\u597d\u4e86\u8fd9\u4e9bbug, \u6211\u6765\u6d4b\u8bd5\u4e00\u4e0b\u6ca1\u6709finetune\u7684<code>epoch=260</code>\u7684pretrain model. \u8fd9\u4e00\u6b21\u7ed3\u679c\u975e\u5e38\u63a5\u8fd1\u5b9e\u9a8c\u7ed3\u679c, \u4f46\u662f\u4ecd\u7136, bert@4score\u548ccider\u6570\u636e\u76f8\u6bd4\u4e8e\u8bba\u6587\u6570\u636e\u6709\u5dee\u8ddd: </p> <p></p> <p>\u4e0b\u9762\u662f\u8bba\u6587\u7684\u6570\u636e(\u5355\u4f4d\u8981\u6ce8\u610f\u4e00\u4e0b)</p> <p></p> <p>\u4f46\u662f\u540c\u6837, issue\u91cc\u9762\u6709\u4eba\u53cd\u6620\u8fc7: </p> <p></p> <p>\u540c\u6837\u7684, \u6211\u518d\u6d4b\u8bd5\u4e86\u4e00\u4e0bhugging face\u4e0a\u9762\u7ed9\u51fa\u7684\u6a21\u578b\u53c2\u6570(m2t), \u6570\u636e\u5982\u4e0b: </p> <p></p>"},{"location":"Blog/AAAI2025/log.html#624","title":"6.24","text":"<p>\u4eca\u5929\u5b9e\u73b0\u6570\u636e\u4eff\u771f. \u9700\u8981\u5c06\u4e00\u4e2asmpl\u6a21\u578b\u8f6c\u5316\u4e3a\u8eab\u4f53\u5168\u90e86890\u4e2a\u70b9\u8fd8\u539f\u51fa\u6765, \u7136\u540e\u6a21\u62df\u4e00\u4e2a\u6fc0\u5149\u96f7\u8fbe\u53bb\u626b\u8fd9\u4e2a\u4eba. \u5f97\u5230\u7684\u6570\u636e\u662f384\u4e2a\u70b9, \u800c\u4e14\u90fd\u662f\u96f7\u8fbe\u626b\u5230\u7684\u4e00\u9762\u7684\u70b9. \u4e00\u5f00\u59cb\u626b\u5230\u7684\u70b9\u5927\u7ea6\u662f300\u5de6\u53f3(\u6fc0\u5149\u96f7\u8fbe\u79bb\u4eba\u8ddd\u79bb\u8bbe\u4e3a\u4e868), \u7136\u540e\u7ecf\u8fc7FPS\u91c7\u6837\u9009\u51fa384\u4e2a\u70b9. \u8bf4\u5b9e\u8bdd, \u8fd9\u4e9b\u70b9\u6bd4\u8f83\u62bd\u8c61, \u6211\u90fd\u6709\u70b9\u96be\u901a\u8fc7\u4e00\u4e32\u8fd9\u6837\u7684\u70b9\u4e91\u731c\u6d4b\u8fd9\u4e2a\u4eba\u5728\u5e72\u4ec0\u4e48. </p> <p>\u5173\u4e8e\u4eff\u771f\u4ee3\u7801, \u611f\u8c22\u859b\u5b66\u957f\u7684\u5de5\u4f5c, \u5728\u4ed6\u7684\u4ee3\u7801\u57fa\u7840\u4e0a, \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u53bb\u6279\u91cf\u8f6c\u6362smpl\u7684npy\u6587\u4ef6(\u8fd9\u4e9b\u6587\u4ef6\u683c\u5f0f\u662f<code>(T, 22, 3)# T\u4e3a\u65f6\u95f4\u6b65\u957f</code>), \u8f6c\u5316\u4e3a\u70b9\u4e91\u7684npy\u6587\u4ef6(<code>(T, 384, 3)</code>). \u524d\u9762\u4ee3\u8868\u7684\u662f22\u4e2a\u5173\u8282\u70b9\u7684\u65cb\u8f6c\u77e9\u9635, \u540e\u9762\u662f384\u4e2a\u70b9\u7684\u4e09\u7ef4\u5750\u6807. </p> <p>\u6709\u5173joint\u7684\u7ec6\u8282, \u539f\u4ee3\u7801\u4e2d\u662f24\u4e2a\u5173\u8282, \u800chumanml3D\u7684\u662f22\u4e2a\u5173\u8282, \u5c11\u4e86\u624b\u8155\u7684\u65cb\u8f6c\u77e9\u9635(\u53ef\u80fd). \u6240\u4ee5\u8bf4\u4f1a\u572822\u7ef4\u7684\u57fa\u7840\u4e0a\u8fdb\u884cpadding, \u8865\u621024\u7ef4.</p> <p>\u7136\u540e\u5c31\u662f\u6570\u636e\u96c6\u672c\u8eab\u7684\u95ee\u9898\u4e86. 7975\u6587\u4ef6\u662fcorrupted, \u7136\u540e\u6ca1\u67099707\u4e0e11059\u6587\u4ef6(M\u5f00\u5934\u7684\u5bf9\u5e94\u6587\u4ef6\u4e5f\u6ca1\u6709). \u76ee\u524d\u4ee5\u6211\u6240\u4e86\u89e3, \u6211\u8d1f\u8d23\u7684\u7f51\u7edc\u4e2d, \u5c06\u4f1a\u662f: \u8f93\u5165\u63d0\u793a\u8bed, \u8fd9\u4e9b\u63d0\u53d6\u51fatoken; \u7136\u540e\u8f93\u5165\u70b9\u4e91, \u901a\u8fc7\u6211\u4eec\u7ec4\u8bbe\u8ba1\u7684\u7f51\u7edc\u63d0\u53d6384\u7ef4\u7684token, \u7136\u540e\u4e24\u4e2atoken concat, \u4e00\u540c\u8fdb\u5165MotionGPT\u5de5\u4f5c\u4e2d\u6240\u4f7f\u7528\u7684flan-t5-base\u7f51\u7edc, \u6700\u540e\u8f93\u51fatoken. \u5173\u4e8eloss, dataloader, optimizer\u7684\u4e8b\u60c5, \u7b49\u8003\u5b8c\u8bd5\u518d\u8bf4. </p>"},{"location":"Blog/AAAI2025/log.html#629","title":"6.29","text":"<p>\u6700\u8fd1double check\u4e86\u4e00\u4e0b\u6570\u636e\u4eff\u771f, \u7136\u540e\u53d1\u73b0\u6570\u636e\u4eff\u771f\u7ed3\u679c\u662f\u9519\u8bef\u7684. \u56e0\u4e3ahumanml3d\u6570\u636e\u96c6\u91cc\u9762\u7684new_joints\u6587\u4ef6\u5939\u91cc\u9762\u7684\u5f20\u91cf\u867d\u7136\u662f(timestep, 22, 3)\u4f46\u662f\u5e76\u4e0d\u662f\u8f74\u89d2\u8868\u793a, \u800c\u662f22\u4e2a\u5173\u8282\u70b9\u7684\u5750\u6807. \u6240\u4ee5\u8bf4\u4e4b\u524d\u7684\u6570\u636e\u4eff\u771f\u5931\u8d25\u4e86.</p> <p>\u6700\u8fd1\u4e00\u76f4\u5728\u5c1d\u8bd5. \u4e00\u5f00\u59cb\u60f3\u5229\u7528new_joint_vec\u91cc\u9762\u7684(timestep, 263)\u4e2d\u7684\u4e00\u90e8\u52066D rotation\u6570\u636e\u6765\u8fdb\u884c\u6362\u5143, \u4f46\u662f\u540e\u6765\u901a\u8fc7\u5b9e\u9a8c\u4e0egithub\u4e0a\u9762\u8ba8\u8bba\u7684\u5185\u5bb9\u8bc1\u660e, \u8fd9\u91cc\u7684rot_data\u662f\u7528\u4e0d\u4e86\u7684. \u6240\u4ee5\u8bf4\u73b0\u5728\u9677\u5165\u4e86\u4e00\u4e2a\u50f5\u5c40. \u867d\u7136\u90e8\u5206\u5de5\u4f5c, \u4f8b\u5982motion diffusion model, \u4ee5\u53camotiongpt\u4e2d\u5e26\u6709\u53ef\u89c6\u5316\u7684\u4ee3\u7801, \u4f46\u662f\u8fd9\u4e9b\u53ef\u89c6\u5316\u90fd\u662f\u901a\u8fc722\u4e2a\u5173\u8282\u7684\u5750\u6807\u70b9\u53bb\u62df\u5408smpl\u6587\u4ef6\u5f62\u5f0f, \u66f4\u5173\u952e\u7684\u662f, \u8017\u8d39\u7684\u65f6\u95f4\u76f8\u5f53\u957f. \u56e0\u6b64\u73b0\u5728, \u53ea\u80fd\u5c1d\u8bd5\u7528AMASS\u6570\u636e\u91cc\u9762\u7684\u6b63\u89c4smpl\u6587\u4ef6\u53bb\u53ef\u89c6\u5316\u4e86, \u56e0\u4e3aAMASS\u662fhumanml3d\u6570\u636e\u96c6\u7684\u6765\u6e90\u4e4b\u4e00. \u4f46\u662f\u5982\u4f55\u5c06AMASS\u4e2d\u7684\u6587\u4ef6\u548chumanml3d\u4e2d\u7684\u6587\u4ef6\u8fdb\u884c\u5bf9\u5e94\u5462? \u8fd9\u662f\u4e00\u4ef6\u9ebb\u70e6\u4e8b. </p>"},{"location":"Blog/AAAI2025/log.html#630","title":"6.30","text":"<p>\u7ec8\u4e8e\u662f\u67f3\u6697\u82b1\u660e\u53c8\u4e00\u6751. \u5982\u679chumanml3d\u6570\u636e\u96c6\u91cc\u9762\u7684\u6570\u636e\u662f\u5229\u7528\u4e0d\u4e86\u7684, \u90a3\u4e48\u80fd\u4e0d\u80fd\u4eceHumanml3d\u6570\u636e\u96c6\u7684\u6765\u6e90\u6570\u636e\u96c6\u4e0b\u624b: <code>AMASS</code>\u4ee5\u53ca<code>humanact12</code>. \u7ed3\u679c\u53d1\u73b0<code>humanact12</code>\u6570\u636e\u96c6\u4e5f\u662f\u51fa\u81eaProf.EricGuo\u4e4b\u624b, \u6570\u636e\u5168\u90fd\u662f22\u4e2a\u5173\u8282\u7684\u4e09\u7ef4\u5750\u6807. \u8fd8\u597d<code>humanact12</code>\u4ec5\u4ec5\u5360\u6570\u636e\u96c6\u76841/7, \u56e0\u6b64\u4e0d\u7528\u7ba1\u5b83\u4eec\u662f\u53ef\u4ee5\u7684. \u5982\u4f55\u5904\u7406amass\u6570\u636e\u96c6\u5462? amass\u7684axis-rotation\u5230\u5e95\u50a8\u5b58\u5728\u54ea\u91cc\u5462? \u622a\u53d6\u54ea\u4e9bframe\u5462? \u82b1\u4e86\u51e0\u5c0f\u65f6\u8bfb\u4e86humanml3d\u4e2d\u7684\u4ee3\u7801, \u7ec8\u4e8e\u7406\u89e3\u4e86\u7a76\u7adf\u5982\u4f55\u5904\u7406\u6570\u636e\u96c6\u4ee5\u83b7\u5f97text\u6240\u5bf9\u5e94\u7684motion\u70b9\u4e91. \u4e0b\u5348\u6572\u4e86\u5904\u7406\u7684\u4ee3\u7801, \u5728\u859b\u5b66\u957f\u7684mesh2lidar\u4ee3\u7801\u548chumanml3d\u4ee3\u7801\u4e2d\u63ed\u9732\u7684\u5904\u7406\u89c4\u5219\u7684\u57fa\u7840\u4e4b\u4e0a, \u5728\u8865\u5168\u4e86amass\u6570\u636e\u96c6\u4e4b\u540e, \u7ec8\u4e8e\u5f97\u5230\u4e86\u6570\u636e\u4eff\u771f\u540e\u7684Motion\u70b9\u4e91. \u4ee3\u7801\u548c\u5904\u7406\u540e\u7684\u6570\u636e\u96c6\u50a8\u5b58\u5728\u6211\u7684AI\u96c6\u7fa4\u8d26\u53f7\u91cc\u9762.</p> <p>\u4ee5\u4e0b\u662f\u6211\u7f16\u5199\u7684\u4ee3\u7801\u90e8\u5206:</p> <pre><code>if __name__ == \"__main__\" :\n    simulator = Simulator(128).cuda()\n    shape = torch.zeros(1, 10).float() # default shape \n    directory = \"???\"\n    cam_pose = torch.zeros(1, 3).float()\n    # index.csv: read in the npz file(npy in the file, but actually wanting npz)\n    index_file = pd.read_csv(\"/public/home/xiongzhzh2023/code-xue/index.csv\")\n    # how many files to deal with\n    total_amount = index_file.shape[0]\n    ex_fps = 20 # expected fps\n    for i in tqdm(range(total_amount)):\n        source_path = index_file.loc[i]['source_path'][:-4] + \".npz\"\n        new_name = index_file.loc[i]['new_name']\n        start_frame = index_file.loc[i]['start_frame']\n        end_frame = index_file.loc[i]['end_frame']\n\n\n        if 'humanact12' in source_path:\n            with open('no.txt', 'a') as file:\n              file.write(\"%s\\n\" % new_name.split('.')[0])\n            # Because the humanact12 format is the coordinates of key joints, we cannot use these file to operate\n            # What we want is axis-rotation information\n            # Record the file index that will be discarded\n            continue\n        if 'humanact12' not in source_path:\n            with open('yes.txt', 'a') as file:\n                file.write(\"%s\\n\" % new_name.split('.')[0])\n            # Record the file index that will be enrolled\n            data = np.load(source_path)\n            try:\n                fps = data['mocap_framerate']\n            except:\n                print(\"No mocap_framerate\")\n                assert 0\n            down_sample = int(fps / ex_fps)\n            # Downsampling, making it a np array containing axie-rot info\n            data = data['poses'][::down_sample,...]\n            '''\n            According to the code from https://github.com/EricGuo5513/HumanML3D, when dealing with the AMASS dataset,\n            the following segmentation is necessary: \n            '''\n            if 'Eyes_Japan_Dataset' in source_path:\n                data = data[3*20:]\n            if 'MPI_HDM05' in source_path:\n                data = data[3*20:]\n            if 'TotalCapture' in source_path:\n                data = data[1*20:]\n            if 'MPI_Limits' in source_path:\n                data = data[1*20:]\n            if 'Transitions_mocap' in source_path:\n                data = data[int(0.5*20):]\n\n            # Segment again, using the start and end frame information\n            data = data[start_frame:end_frame]\n\n            # Extract all the axis-rotation info  \n            data = data[:,:66].reshape(-1, 22, 3) \n            # np.array(T, 22, 3) where 3 stands for the axis-rot information\n            timestep = data.shape[0] # timestep\n\n            # For hands, no rot and using zeros to pad data into smpl format: (T, 24, 3)\n            pad = np.zeros((timestep, 2, 3))\n            pose = torch.from_numpy(np.concatenate((data, pad), axis = 1)).float()\n\n            # Using default betas/shape, we use the axis-rot info to generate smpl model\n            smpl_out = smpl(betas=shape, body_pose=pose[:, 1:], global_orient=pose[:, :1])\n\n            # smpl_put.vertices: torch.Size([T, 6890, 3]) where 3 stands for the xyz coordinate\n            # We will use this point cloud to simulate the scanned point cloud\n            pts, kps, new_pose = simulator.mesh2lidar(smpl_out.vertices.cuda(), smpl_out.joints.cuda(), cam_pose.cuda(), timestep)\n            # pts = smpl_out.vertices\n            if pts.is_cuda:\n                pts = pts.cpu() # To preserve the file, have to make sure that it's in the cpu\n            # pts: The scanned point cloud, [T, 384, 3] where 384 is the number of points and 3 is the xyz coordinates\n            savepath = os.path.join(\"???\", new_name)\n            np.save(savepath, pts.numpy())\n\n    print(\"mesh2lidar done!\")\n</code></pre> <p>## 7.5</p> <p>\u6700\u8fd1\u597d\u4e45\u6ca1\u6709\u62bd\u7a7a\u5199Log\u4e86. \u5728\u6570\u636e\u4eff\u771f\u7ed3\u675f\u4e4b\u540e, \u4e00\u5f00\u59cb\u53d1\u73b0\u6570\u636e\u91cc\u9762\u7684\u4eba\u662f\u6a2a\u8fc7\u6765\u7684, \u7136\u540e\u548c\u859b\u5b66\u957f\u6c9f\u901a\u4e4b\u540e, \u4e0d\u518d\u5bf9\u4eba\u4f53\u4eff\u771f\u7ed3\u679c\u8fdb\u884c\u65cb\u8f6c\u77e9\u9635\u7684\u4e58\u6cd5, \u6240\u4ee5\u6700\u540e\u7b2c\u4e8c\u7248\u7684\u6570\u636e\u662f\u771f\u6b63\u7684\u6570\u636e\u4eff\u771f\u6570\u636e, \u5e76\u4e14\u5df2\u7ecf\u672c\u5730\u8fdb\u884c\u4e86\u5907\u4efd.</p> <p>\u4e4b\u540e\u53d1\u73b0, MotionGPT\u7684\u8bad\u7ec3\u8303\u5f0f\u548c\u6211\u4eec\u7684\u7279\u5f81\u63d0\u53d6\u5668\u8c8c\u4f3c\u5e76\u4e0d\u662f\u5b8c\u5168\u5951\u5408. MotionGPT\u5728\u7684VQVAE\u7ec4\u4ef6\u7531encoder\u548cdecoder\u5171\u540c\u7ec4\u6210, \u7136\u540e\u5728\u7b2c\u4e00\u9636\u6bb5\u7684\u8bad\u7ec3\u4e2d, \u7528Motion\u6570\u636e\u8fdb\u884c\u81ea\u76d1\u7763\u8bad\u7ec3. \u8bad\u7ec3\u5b8c\u6210\u4e4b\u540e, \u4e4b\u540e\u7684\u8bad\u7ec3\u4e2d\u53ea\u4f7f\u7528encoder, \u5e76\u4e14\u91cc\u9762\u7684\u6743\u91cd\u662f\u56fa\u5b9a\u7684, \u7528\u6765\u5c06motion\u8f6c\u5316\u4e3a\u79bb\u6563(discrete)token. (\u7c7b\u4f3c\u4e8ecodebook). \u5982\u679c\u76f4\u63a5\u4e0a\u6211\u4eec\u7684\u7279\u5f81\u63d0\u53d6\u5668, \u90a3\u4e48\u65e0\u6cd5\u7528\u81ea\u76d1\u7763\u7684\u65b9\u6cd5\u8bad\u7ec3\u6211\u4eec\u7684encoder, \u5fc5\u987b\u8981\u5728\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u7684\u65f6\u5019\u628aencoder\u7684\u6743\u91cd\u548c\u8bed\u8a00\u6a21\u578b\u7684\u6743\u91cd\u4e00\u540c\u8bad\u7ec3\u51fa\u6765. \u6240\u4ee5\u8bf4\u8981\u6362\u4e00\u79cd\u65b9\u5f0f, \u4f7f\u6211\u4eec\u7684encoder\u517c\u5bb9\u8fdb\u6765. \u6240\u4ee5\u6839\u636e\u8bb8\u5b66\u957f\u7684\u60f3\u6cd5: \u7528Point-BERT\u8fc7\u6e21.</p> <p>Point-BERT\u4e2d\u4e5f\u6709\u4e00\u5957\u914d\u5bf9\u7684encoder decoder, \u800c\u4e14encoder\u8bad\u7ec3\u51fa\u6765\u7684token\u662fdiscrete\u7684. \u8fd9\u548cVQVAE\u5341\u5206\u63a5\u8fd1. \u4e8e\u662f\u5148\u5c1d\u8bd5\u5728Point-BERT\u4e0a\u9762\u8dd1\u901ahumanml3d\u7684\u4eff\u771f\u6570\u636e. </p> <p>\u8270\u96be\u7684\u662f, \u8f93\u5165\u7684data\u76f4\u63a5\u662f(npoints, 3), \u4f46\u662f\u6211\u4eec\u7684\u6570\u636e\u90fd\u662f(T, 384, 3), \u6240\u4ee5\u8981\u628aT\u65f6\u95f4\u6b65\u957f\u7ed9\u62c6\u5f00\u6765. \u8fd9\u5c31\u9700\u8981\u7a0b\u5e8f\u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u4e86: </p> <pre><code># handling_index.py\nimport numpy as np\nfrom tqdm import tqdm\n\nfile_path = \"\"\nfile1_path = \"\"\nfile2_path = \"\"\nwith open(file1_path, 'r') as file1, open(file2_path, 'a') as file2:\n    for line in tqdm(file1):\n        line = line.strip() \n        frame = np.load(file_path + line + '.npy').shape[0]\n        for i in range(frame):\n            index = str(i).zfill(3) \n            file2.write(line + \"_\" + index + \"\\n\") \n# handling_npy.py\nimport numpy as np\nfrom tqdm import tqdm\n\nfile_path = \"\"\nres_path = \"\"\nindex_path = \"\"\ncount = 0\nwith open(index_path, 'r') as file:\n    for line in tqdm(file, total = 13425):\n        index = line.strip()\n        data = np.load(file_path + index + \".npy\")\n        frame = data.shape[0]\n        for i in range(frame):\n            sub_data = data[i]\n            assert sub_data.ndim == 2\n            np.save(res_path + index + \"_\" + str(i).zfill(3) + \".npy\", sub_data)\nprint(\"npy operation done!\")\n</code></pre> <p>\u6700\u540e\u603b\u5171\u8f6c\u5316\u51fa\u6765\u4e86\u603b\u5171\u8fd1180\u4e07\u4efd\u6570\u636e, \u8017\u65f6\u5c06\u8fd1\u4e09\u4e2a\u534a\u5c0f\u65f6, \u5927\u5c0f\u5c06\u8fd1\u662fShapeNet55\u6570\u636e\u96c6\u768437\u500d! ShapeNet55\u6570\u636e\u96c6\u538b\u7f29\u5305\u5c31\u5c06\u8fd17\u4e2aG, \u8f6c\u5316\u51fa\u6765\u7684180\u4e07\u4efdnpy\u7684\u5927\u5c0f\u6211\u4e0d\u6562\u60f3\u8c61. \u6700\u540e\u4e3a\u4e86\u6743\u8861\u6a21\u578b\u8d70\u7684step\u6570\u91cf, \u539f\u6765\u7684300\u4e2aepoch\u53d8\u6210\u4e868\u4e2aepoch. \u4ee5\u53ca\u8fd8\u597d\u8fc7\u6e21\u9636\u6bb5\u8fdevalidation\u90fd\u4e0d\u662f\u5fc5\u8981\u7684, \u56e0\u4e3a\u4e00\u6b21validation\u90fd\u8981\u5c06\u8fd1\u4e00\u4e2a\u5c0f\u65f6, \u4ee5\u53ca\u6211\u4eec\u7684\u76ee\u7684\u662f\u8fc7\u6e21\u4ee3\u7801(\u867d\u7136\u6211\u4e5f\u4e0d\u7406\u89e3\u8fc7\u6e21\u7684\u610f\u4e49, \u4f46\u662f\u542c\u5b66\u957f\u7684). \u81f3\u4e8e\u4e3a\u4ec0\u4e48, \u53ef\u80fd\u548cval_bs\u6709\u5173, \u4f5c\u8005\u8bbe\u7f6e\u6210\u4e861, \u800c\u4e14\u5728issue\u91cc\u9762\u56de\u590d\u9053: \u5982\u679c\u6539\u4e861, \u90a3\u4e48\u53ef\u80fdchamferdist\u8ba1\u7b97\u4f1a\u51fa\u9519. \u800c\u4e14\u7b2c\u4e8c\u9636\u6bb5\u7684validation\u4f7f\u7528\u7684\u662fModelNet\u6570\u636e\u96c6, \u4e4b\u524d\u590d\u73b0\u5b9e\u9a8c\u7684\u65f6\u5019\u9047\u5230\u4e86\u8fd9\u4e2a\u6570\u636e\u96c6\u5c31\u5934\u75bc, \u603b\u662f\u5361\u4f4f\u4e0d\u52a8. \u6b63\u597d, \u4e0d\u7528validate\u4e86, \u65e2\u7701\u4e86\u65f6\u95f4\u53c8\u907f\u514d\u4e86bug. </p> <p>\u4e3a\u4e86\u80fd\u591f\u5728\u6211\u4eec\u7684\u6570\u636e\u96c6\u4e0a\u9762\u8dd1pointbert, dataloader, yaml(config)\u6587\u4ef6, runner.py(\u8fd0\u884c\u7a0b\u5e8f)\u90fd\u9700\u8981\u5bf9\u5e94\u7684\u4fee\u6539. \u8fd8\u597d\u662f\u4e24\u5e74\u524d\u7684\u4ee3\u7801, \u5e76\u4e0d\u662f\u7279\u522b\u590d\u6742, \u800c\u4e14\u548c\u81ea\u5df1\u5728github\u4e0a\u9762\u5b66\u7684\u6df1\u5ea6\u5b66\u4e60\u7a0b\u5e8f\u8303\u5f0f\u5341\u5206\u63a5\u8fd1. \u5df2\u7ecf\u5728AI\u96c6\u7fa4\u9a8c\u8bc1\u8fc7\u53ef\u4ee5\u8dd1\u901a\u4e86, \u5373\u5c06\u628a\u4ee3\u7801\u6570\u636e\u96c6\u642c\u5230\u53e6\u4e00\u4e2a\u670d\u52a1\u5668\u4e0a\u5e76\u8dd1\u901a. </p> <p>\u611f\u53f9\u9053: \u6709\u7684\u65f6\u5019, \u6362\u4e00\u53f0\u670d\u52a1\u5668\u53ef\u80fd\u5c31\u89e3\u51b3\u95ee\u9898\u4e86. \u4e4b\u524d\u5728\u4e00\u4e2a\u961f\u5217\u91cc\u9762\u8dd1\u4ee3\u7801, \u603b\u662f<code>packet_write_wait broken pipe</code> error, \u8fd8\u6709\u6982\u7387\u62a5\u5176\u4ed6\u7684\u9519. \u4f46\u662f\u6362\u4e00\u4e2a\u961f\u5217\u6211\u5c31\u80fd\u987a\u5229\u8dd1\u901a, \u800c\u4e14\u4e5f\u4e0d\u4f1a\u62a5broken pipe\u7684\u95ee\u9898\u4e86. </p>"},{"location":"Blog/AAAI2025/log.html#78","title":"7.8","text":"<p>\u6700\u8fd1\u5728pointbert\u4e0a\u9762\u8dd1\u901ahumanml3d-lidar\u7684\u6570\u636e\u96c6. 180\u4e07\u4efd\u6587\u4ef6\u5f53\u7136\u80fdwork, \u4f46\u662f\u540e\u6765\u53d1\u73b0, \u7531\u4e8e\u6587\u4ef6\u6570\u91cf\u8fc7\u591a, \u56e0\u6b64\u8bad\u7ec3\u7684\u901f\u5ea6\u5e76\u4e0d\u5982\u60f3\u8c61\u4e2d\u7684\u90a3\u4e48\u5feb. \u56e0\u6b64\u9700\u8981\u6570\u636e\u96c6\u8fd8\u9700\u8981\u518d\u9884\u5904\u7406. \u4e3a\u4e86\u51cf\u5c11\u6587\u4ef6\u6570\u91cf, \u6bcf32\u4e2a\u6587\u4ef6\u5408\u5e76\u6210\u4e3a\u4e00\u4e2a(32, 384, 3)\u7684npy(\u6253\u4e71\u987a\u5e8f\u7684), \u7136\u540ebs\u9664\u4ee532, \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a(1, 384, 3)\u7684\u70b9\u4e91\u90fd\u8fdb\u884c\u4e00\u8fb9\u539f\u6765pointbert\u4e2d\u505a\u7684\u5f52\u4e00\u5316\u548c\u6253\u4e71. </p> <pre><code># handling_random.py\nimport random\n\ndef shuffle_text_file(input_file_path, output_file_path):\n    with open(input_file_path, 'r', encoding='utf-8') as file:\n        lines = file.readlines()\n\n    random.shuffle(lines)\n\n    with open(output_file_path, 'w', encoding='utf-8') as file:\n        file.writelines(lines)\n\n\ninput_path = 'path_to_your_input_file.txt' \noutput_path = 'path_to_your_output_file.txt' \nshuffle_text_file(input_path, output_path)\n# handling_32.py\nimport numpy as np\nfrom tqdm import tqdm\n# read 32 lines at one time, and create a (32, 384, 3) npy file\n\ntrain_file_path = \"?\"\ntest_file_path = \"?\"\ntrain_file_res = \"?\"\ntest_file_res = \"?\"\nidx = 0\n\nwith open(train_file_path, 'r') as file, open(train_file_res, 'a') as result:\n    while True:\n        lines = [file.readline() for _ in range(32)]\n        if len(lines) &lt; 32:\n            break\n        paths = [\"?\" + line.strip() + \".npy\" for line in lines]\n        array_list = []\n        for path in paths:\n            array = np.load(path)\n            array_list.append(array)\n        merged_array = np.stack(array_list)\n        assert merged_array.shape == (32, 384, 3), \"not (32, 384, 3)\"\n        np.save(\"?\" + str(idx).zfill(7) + \".npy\", merged_array)\n        result.write(str(idx).zfill(7) + \".npy\" + \"\\n\")\n        if idx % 500 == 0:\n            print(\"Currently \" + str(idx).zfill(6) + \".npy\" + \" done\")\n        idx += 1\n</code></pre> <p>\u7136\u540edataloader\u7ed9\u51fa\u7684\u662f(32, 384, 3)\u7684\u5185\u5bb9. \u5728\u7f51\u7edc\u4e2d, enumerate\u8fd4\u56de\u7684\u662f(bs, 32, 384, 3), \u53ea\u9700\u8981reshape\u4e3a(32*bs, 384, 3)\u5c31\u5b8c\u7f8e\u89e3\u51b3\u95ee\u9898\u4e86. \u6700\u540e\u5b9e\u9a8c, \u56db\u53f03090\u7684\u901f\u5ea6\u662f\u56db\u53f02080ti\u76841.7\u500d\u5de6\u53f3. </p> <p>\u63a5\u4e0b\u6765\u5c31\u662f\u9700\u8981\u5c06\u4e24\u4e2a\u9636\u6bb5\u8bad\u7ec3\u51fa\u6765\u7684ckpt\u548cpointbert\u8fd0\u7528\u5230motiongpt\u4e2d, \u4e3a\u7684\u5c31\u662f\u4ee3\u66ffmotiongpt\u4e2d\u7684vqvae. \u66f4\u5177\u4f53\u7684, \u6211\u4eec\u8fd0\u7528\u5230\u7684\u53ef\u80fd\u53ea\u6709encoder\u7528\u6765\u5d4c\u5165t5\u8bed\u8a00\u6a21\u578b. </p>"},{"location":"Blog/AAAI2025/log.html#715","title":"7.15","text":"<p>\u6700\u8fd1\u5173\u4e8e\u8def\u5f84\u7684\u65b9\u6848\u4e00\u6539\u518d\u6539: \u4e00\u5f00\u59cb\u6ce8\u610f\u5230\u4e86\u8fde\u7eed\u8fd8\u662f\u79bb\u6563\u7684\u91cd\u8981\u533a\u522b, \u56e0\u4e3a\u6211\u4eec\u7684encoder\u8f93\u51fa\u7684\u662f\u8fde\u7eed\u7684\u7279\u5f81, \u4f46\u662fVQVAE\u8bad\u7ec3\u7684\u8303\u5f0f\u662fcodebook\u5f0f, \u5373\u79bb\u6563, \u56e0\u6b64MotionGPT\u4e2d\u5145\u65a5\u7740\u5904\u7406codebook\u7684\u5185\u5bb9. \u540e\u6765\u60f3, \u80fd\u4e0d\u80fdencoder\u548c\u8bed\u8a00\u6a21\u578b\u4e00\u8d77\u8bad\u7ec3, \u4f46\u662f\u6015\u6536\u655b\u6548\u679c\u4e0d\u4f73, \u800c\u4e14\u9700\u8981\u8017\u8d39\u5927\u91cf\u65f6\u95f4, \u56e0\u6b64\u8fd8\u662f\u9700\u8981\u4e8c\u6bb5\u5f0f\u7684\u8bad\u7ec3, \u5373\u5355\u72ec\u7528\u81ea\u76d1\u7763\u65b9\u5f0f\u8bad\u7ec3ours, \u518d\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b. \u4e8e\u662f\u6700\u7ec8\u51b3\u5b9a\u5728ULIP\u4e0a\u9762\u901a\u8fc7\u76d1\u7763\u8bad\u7ec3encoder, \u5f97\u5230\u5e26\u6709\u6743\u91cd\u7684\u6a21\u578b, \u7136\u540e\u518d\u7528\u8fd9\u4e2a\u6a21\u578b\u5904\u7406\u6240\u6709\u7684\u70b9\u4e91\u5e8f\u5217, \u5f97\u5230token, \u7136\u540e\u5355\u72ec\u4fdd\u5b58\u8d77\u6765. \u6700\u540e\u81ea\u5df1\u8bbe\u8ba1\u4e00\u4e2a\u7f51\u7edc, \u8f93\u5165\u8fd9\u4e9btoken, \u7ecf\u8fc7\u51e0\u4e2amapping\u5c42, \u8f6c\u5316\u5230t5\u8bad\u7ec3\u65f6\u8f93\u5165\u7684\u7279\u5f81\u7ef4\u5ea6, \u7136\u540e\u76d1\u7763\u4fe1\u606f\u5c31\u662ftext, \u8ba1\u7b97bleu@1~4\u5f97\u5206. </p> <p>\u6b64\u5916, \u8fd8\u7528\u59da\u5b66\u957f\u7684\u4ee3\u7801\u5904\u7406\u4e86\u6240\u6709\u7684\u70b9\u4e91\u6570\u636e, \u5f97\u5230\u4e86segmented\u7684\u6570\u636e, \u4f7f\u5176\u53ef\u4ee5\u8fdb\u5165ours. \u63a5\u4e0b\u6765\u7684\u8def\u7ebf\u5c31\u662f:\u8dd1\u901aULIP, \u6478\u6e05\u6570\u636e\u6d41; encoder\u6362ours, \u6570\u636e\u6362ours;  \u8bad\u7ec3\u597d\u4e86\u6743\u91cd, \u7528\u5b83\u5904\u7406\u6240\u6709\u7684\u70b9\u4e91\u6570\u636e\u5f97\u5230token; \u7528\u8fd9\u4e9btoken\u8fc7mapping + t5, \u8bad\u7ec3; test, \u5e76\u4e14\u53ef\u89c6\u5316. segmented\u540e\u7684\u6570\u636e\u603b\u91cf, \u4ece\u539f\u5148\u768413000\u5de6\u53f3, \u4e0b\u964d\u5230\u4e8610000.</p> <p>\u5173\u4e8e\u81ea\u5df1\u8bbe\u8ba1mapping + t5\u7684\u7f51\u7edc, \u53ea\u80fd\u8bf4\u8fd8\u597d\u6709Chat\u540c\u5b66\u7684\u5e2e\u52a9, \u81f3\u5c11\u4e0d\u662f\u4ece\u5934\u5f00\u59cb\u5b64\u519b\u594b\u6218~ </p>"},{"location":"Blog/AAAI2025/log.html#723","title":"7.23","text":"<p>\u65f6\u95f4\u5df2\u7ecf\u4e0d\u662f\u5f88\u5145\u88d5\u4e86. \u5728\u6b64, \u8865\u5145\u4e0b\u4e3a\u4ec0\u4e48\u653e\u5f03\u4e86pointbert\u548cmotiongpt:</p> <p>\u81f3\u4e8epointbert, \u7528\u6211\u4eec\u7684encoder\u66ff\u6362\u6389\u539f\u5de5\u4f5c\u7684transformer encoder, \u76f8\u5f53\u4e8e\u662f\u5229\u7528\u6211\u4eec\u7684\u7ec4\u4ef6\u5e2e\u52a9pointbert\u7684encoder\u8fdb\u884c\u9884\u8bad\u7ec3, \u6700\u540e\u5b9e\u8d28\u4e0a\u5229\u7528\u7684\u8fd8\u662fpointbert\u81ea\u5e26\u7684encoder\u8f93\u51fa\u79bb\u6563token, \u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u7ec4\u4ef6\u7684\u4f5c\u7528\u5e76\u4e0d\u91cd\u8981, \u6ca1\u6709\u4f53\u73b0\u6211\u4eec\u7ec4\u4ef6\u7684\u5f3a\u5927.</p> <p>\u81f3\u4e8emotiongpt, \u5b83\u63a5\u53d7\u79bb\u6563\u7684token, \u8fdb\u5165t5, \u5e76\u4e14\u4f1a\u6269\u5145vocab, \u6765\u771f\u6b63literally\u628aMotion\u5f53\u4f5c\u4e00\u79cdforeign language\u53bb\u8fdb\u884c\u5904\u7406. \u5982\u679c\u4ec5\u4ec5\u662f\u8fd9\u6837\u7684\u8bdd, \u90a3\u4e48\u8fd8\u6709\u673a\u4f1a\u4fee\u6539motiongpt, \u8ba9\u5b83\u63a5\u53d7\u8fde\u7eed\u7684\u7279\u5f81, \u5373\u4f7f\u7528input_embed\u53c2\u6570. \u4f46\u662f\u95ee\u9898\u5728\u4e8e, \u53ea\u6709train\u7684\u65f6\u5019\u662f\u8fd9\u8fd9\u6837\u64cd\u4f5c\u7684, \u800c\u5728val test\u7684\u65f6\u5019, \u5374\u5e76\u4e0d\u662f\u8fd9\u6837, \u62ff\u8fc7\u6765\u7684\u4f9d\u7136\u662f263\u7ef4\u4fe1\u606f, \u8fc7\u5b83\u7684motion encoder(vae), \u8fdb\u884c\u4e86\u4e00\u5927\u5806\u7684\u64cd\u4f5c. \u56e0\u6b64\u4fee\u6539\u8d77\u6765\u96be\u5ea6\u5947\u9ad8, \u4e00\u662f\u4ee3\u7801\u7528pytorch lightning\u5c01\u88c5, \u5c01\u88c5\u6027\u6781\u5f3a; \u4e8c\u662fmetric\u4e0a\u7684\u4fee\u6539\u975e\u5e38\u9ebb\u70e6; \u4e09\u662f\u7f51\u7edc\u548cdataloader\u4e5f\u9700\u8981\u6539\u52a8, debug\u6210\u672c\u975e\u5e38\u9ad8.</p> <p>\u6240\u4ee5\u5728chat\u59d3\u6c0f\u540c\u5b66\u7684\u5e2e\u52a9\u4e0b, \u8bbe\u8ba1\u4e86\u7b2c\u4e8c\u9636\u6bb5\u7684\u7f51\u7edc. \u7531\u4e8et5\u5c01\u88c5\u6027\u5f88\u9ad8, \u8c03\u5e93\u5f0f\u4f7f\u7528\u5f88\u65b9\u4fbf, \u56e0\u6b64\u8bbe\u8ba1\u96be\u5ea6\u4e0d\u9ad8. \u503c\u5f97\u6ce8\u610f\u7684\u662f, DP\u7684\u65f6\u5019, \u7f51\u7edc\u7684\u7ec4\u4ef6\u90fd\u5c01\u88c5\u5728\u4e86module\u91cc\u9762. \u81f3\u4e8e\u7f51\u7edc\u7684\u7ec6\u8282, \u53c2\u8003pointllm, \u9700\u8981\u5c06encoder\u8f93\u51fa\u7684\u7ef4\u5ea6\u4ece1024\u7ef4\u5ea6\u53d8\u5316\u5230768\u7ef4, \u5177\u4f53\u800c\u8a00\u662f: 1024-&gt;1024-&gt;768-&gt;768, \u5176\u4e2d\u53ea\u6709\u524d\u4e24\u4e2a\u7bad\u5934\u6709GeLU\u6fc0\u6d3b\u51fd\u6570. </p> <p>\u63a5\u4e0b\u6765\u4f1a\u8003\u8651\u52a0\u4e0a\u65ad\u70b9\u7eed\u4f20\u7684\u8bbe\u8ba1\u548c\u4e00\u4e9b\u8be6\u7ec6\u7684\u6ce8\u91ca, \u6216\u8005\u662fREADME. </p>"},{"location":"Blog/AAAI2025/log.html#820","title":"8.20","text":"<p>\u65f6\u5149\u98de\u901d, \u5df2\u7ecf\u4e00\u4e2a\u6708\u8fc7\u53bb\u4e86, \u800c\u4eca\u5929AAAI appendix\u6b63\u5f0f\u622a\u7a3f, \u6211\u4eec\u7684\u4efb\u52a1\u4e5f\u987a\u5229\u5b8c\u6210. \u8fd9\u4e48\u4e00\u8bf4\u8df3\u8dc3\u6027\u6709\u70b9\u5927, \u8fd8\u662f\u8ba9\u65f6\u95f4\u56de\u5230\u4e00\u4e2a\u6708\u4e4b\u524d. \u4e00\u4e2a\u6708\u4e4b\u524d, \u662f\u6211\u8981\u53c2\u52a0\u5b66\u6821\u5fc5\u4fee\u7684\u793e\u4f1a\u5b9e\u8df5\u7684\u65f6\u95f4, \u8981\u5916\u51fa\u8fdb\u4e24\u5468. \u5728\u548c\u5434\u5b66\u957f\u4ea4\u63a5\u4e86\u4e00\u4e0b\u540e\u7eed\u7684\u5b9e\u9a8c\u4e4b\u540e, \u6211\u5c31\u53c2\u4e0e\u4e0d\u4e86\u5de5\u4f5c\u4e86. \u5728\u90a3\u65f6, \u6211\u4eec\u53d1\u73b0\u4e86\u81ea\u5df1\u8bbe\u8ba1\u7684benchmark\u7684\u8bad\u7ec3\u9636\u6bb5\u4e2d\u7684\u4e00\u4e2a\u5927\u95ee\u9898: \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u603b\u662f\u4f1a\u8bad\u7740\u8bad\u7740\u5c31\u6700\u7ec8\u53d8\u6210\u8bf4\u540c\u4e00\u53e5\u8bdd\u4e86. \u8fd9\u4e2a\u95ee\u9898\u5c31\u5341\u5206\u96be\u529e\u4e86, \u56e0\u4e3a\u662f\u4e0d\u77e5\u9053ULIP\u5bf9\u9f50\u51fa\u4e86\u95ee\u9898, \u8fd8\u662ft5\u4f7f\u7528\u51fa\u73b0\u4e86\u95ee\u9898. \u4e8e\u662f\u5728\u51fa\u53d1\u7684\u524d\u4e00\u5929\u4e0b\u5348, \u6700\u7ec8\u8ba8\u8bba\u4e00\u4e0b\u540e\u7eed\u7684\u63aa\u65bd: description\u7ecf\u8fc7\u5206\u8bcd\u5668\u548c\u7b2c\u4e00\u5c42embedding layer\u7684\u7ed3\u679c\u548cULIP\u8f93\u51fa\u7684\u7ed3\u679cconcat\u8f93\u5165\u8fdb\u7f51\u7edc. \u5c31\u8fd9\u6837, \u6211\u8e0f\u4e0a\u4e86\u793e\u4f1a\u5b9e\u8df5\u4e4b\u65c5\u9014. </p> <p>\u5728\u524d\u5f80\u5efa\u6c34\u7684\u8fc7\u7a0b\u4e2d, \u6211\u5f88\u9057\u61be\u7684\u4ece\u5434\u5b66\u957f\u54ea\u91cc\u77e5\u9053\u4e86\u5b9e\u9a8c\u518d\u6b21\u5931\u8d25\u7684\u6d88\u606f: \u8f93\u51fa\u7684\u7adf\u7136\u53c8\u53d8\u6210\u4e86\u540c\u4e00\u53e5\u8bdd. \u518d\u6b21\u60c5\u5883\u4e4b\u4e0b, \u6211\u7684\u4e0b\u6e38\u4efb\u52a1\u88ab\u8feb\u653e\u5f03, \u5168\u7ec4all in Mesh Completion\u7684\u4e0b\u6e38\u4efb\u52a1. \u90a3\u4e00\u523b\u6211\u5185\u5fc3\u7684\u611f\u53d7\u662f\u590d\u6742\u7684, \u4f46\u662f\u603b\u4e4b, \u4ee5\u7ec4\u5185\u5b9e\u9a8c\u8fdb\u5ea6\u4e3a\u4e3b. \u4e4b\u540e\u5728\u793e\u4f1a\u5b9e\u8df5\u671f\u95f4, \u4e5f\u6536\u5230\u4e86\u505a\u53ef\u89c6\u5316\u548ctask &amp; experiment\u90e8\u5206\u7684\u64b0\u5199\u4efb\u52a1. \u56e0\u6b64\u793e\u4f1a\u5b9e\u8df5\u56de\u6765\u4e4b\u540e, \u6211\u9a6c\u4e0d\u505c\u8e44\u7684\u8d76\u5230\u5b9e\u9a8c\u5ba4\u5b8c\u6210\u6700\u540e\u51b2\u523a\u6536\u5c3e\u7684\u4efb\u52a1. \u8c22\u5929\u8c22\u5730, Mesh Completion\u4efb\u52a1\u987a\u5229\u5b8c\u6210(\u867d\u7136\u662f15\u53f7\u622a\u7a3f\u524d\u4e00\u5929\u624d\u60ca\u9669\u5730\u8dd1\u51fa\u7ed3\u679c). \u4e8e\u662f\u516b\u6708\u5341\u53f7\u8d76\u56de\u6765\u4e4b\u540e, \u4e3b\u8981\u5fd9\u4e8e\u53ef\u89c6\u5316\u548cbenchmark\u4ecb\u7ecd\u7684\u4efb\u52a1, \u4ee5\u53ca\u8dd1\u4e86\u4e24\u4e2a\u5bf9\u6bd4\u5b9e\u9a8c. \u5176\u4e2d, \u516b\u53c9\u6811\u7684\u5bf9\u6bd4\u8bd5\u9a8c\u662f\u771f\u7684\u96be\u8dd1, \u5149\u662f\u6478\u6e05\u695a\u7f51\u7edc\u7ec4\u4ef6\u548c\u6570\u636e\u6d41\u5c31\u82b1\u4e86\u8fd1\u5341\u4e2a\u5c0f\u65f6. \u4f46\u662f\u603b\u4e4b, \u5de5\u4f5c\u5706\u6ee1\u5b8c\u6210.</p> <p>\u73b0\u5728\u952e\u76d8\u4e0a\u6572\u4e0b\u8fd9\u6bb5\u6587\u5b57, \u5fc3\u91cc\u6709\u4e00\u79cd\u83ab\u540d\u7684\u611f\u52a8. \u4e5f\u8bb8\u8fd9\u4e5f\u7b97\u662f\u4e00\u79cd\u622a\u65ad\u53cd\u5e94? \u5728\u4e94\u4e2a\u6708\u7684\u5b66\u4e60\u548c\u5b9e\u4e60\u4e2d, \u6211\u8ba4\u8bc6\u4e86\u5f88\u591a\u4f18\u79c0\u7684\u5b66\u957f\u5b66\u59d0, \u4e5f\u79ef\u7d2f\u4e86\u4e00\u4e9b\u5de5\u7a0b\u80fd\u529b, \u4e5f\u5f88\u8363\u5e78\u80fd\u5411\u6559\u6388\u6c47\u62a5\u4e24\u6b21\u5de5\u4f5c. \u8fd9\u4e9b\u7ecf\u5386, \u6211\u6c38\u751f\u96be\u5fd8. \u867d\u7136\u6700\u540e\u6211\u7684\u4e0b\u6e38\u4efb\u52a1\u5931\u8d25\u4e86, \u4f46\u662f\u5f88\u611f\u6fc0\u5b66\u957f\u80fd\u591f\u7ed9\u6211\u76f8\u5f53\u5bbd\u5bb9\u7684\u7814\u7a76\u7a7a\u95f4. \u8fd9\u4e2abenchmark\u7edd\u975e\u6211\u4e4b\u524d\u6240\u8bf4\u7684\u90a3\u6837\u7b80\u5355, \u4e5f\u8bb8\u51e0\u5e74\u4ee5\u540e, \u54e6\u4e0d, \u751a\u81f3\u4e00\u5e74\u4e4b\u540e, \u5c31\u4f1a\u6709\u5de5\u4f5c\u5c1d\u8bd5\u53bb\u5b9e\u73b0\"motion sequence video -&gt; captioning\"\u7684benchmark. \u5982\u679c\u771f\u7684\u6709\u8fd9\u79cd\u5de5\u4f5c\u80fd\u591f\u6a2a\u7a7a\u51fa\u4e16, \u90a3\u6211\u4e00\u5b9a\u8981\u62dc\u8bfb\u90a3\u4efd\u8bba\u6587, \u770b\u4ed6\u7684\u7f51\u7edc\u662f\u600e\u4e48\u8bbe\u8ba1\u7684, \u54c8\u54c8~</p> <p>\u603b\u4e4b, \u65c5\u7a0b\u5728\u6b64\u7ec8\u7a76\u662f\u544a\u4e00\u6bb5\u843d\u4e86, \u800c\u8fd9\u5374\u53c8\u4ec5\u4ec5\u662f\u5f00\u59cb......</p>"},{"location":"Blog/AAAI2025/log.html#_1","title":"\u540e\u8bb0","text":"<p>\u867d\u7136\u5de5\u4f5c\u662f\u6682\u65f6\u544a\u4e00\u6bb5\u843d\u4e86, \u4f46\u662f\u6211\u8fd8\u662f\u6709\u5f88\u591a\u5173\u4e8emotion captioning\u8fd9\u4e2abenchmark\u7684\u601d\u8003. \u4e4b\u524d\u90fd\u662f\u4e00\u76f4\u542c\u5b66\u957f\u7684, \u4e8e\u662f\u5ffd\u7565\u4e86\u5f88\u591a\u7684\u5185\u5bb9. \u9996\u5148\u95ee\u9898\u5c31\u662f: \u6709\u6ca1\u6709related work? \u8fdb\u884c\u4e86\u641c\u7d22, \u53d1\u73b0\u53ea\u6709MotionGPT\u8bbe\u8ba1\u4e86\u5173\u4e8emotion captioning(m2t)\u7684benchmark, \u6838\u5fc3\u662f\u7528VQVAE\u4f5cmotion\u7684\u5206\u8bcd\u5668, \u5c06\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u90fd\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a, \u7136\u540e\u7528\u7279\u6b8a\u7684\u6807\u8bb0\u6269\u5145\u5230vocab\u91cc\u9762. \u8fd9\u79cd\u8303\u5f0f\u6211\u4eec\u5de5\u4f5c\u662f\u5229\u7528\u4e0d\u4e86\u4e86, \u4f46\u662f\u601d\u8def\u786e\u662f\u5f88straight forward. </p> <p>\u90a3\u6709\u6ca1\u6709encoder\u8303\u5f0f\u7684\u5462? \u800c\u4e0d\u662ftokenizer(VQVAE\u5c31\u662f\u4e00\u79cd\u53d8\u76f8\u7684\u52a8\u4f5c\u7684\u5206\u8bcd\u5668). To my knowledge, \u6ca1\u6709. \u90a3\u4e48\u9000\u800c\u6c42\u5176\u6b21, \u6709\u6ca1\u6709vider captioning\u5462? \u5f88\u60ca\u8bb6\u7684\u53d1\u73b0, \u76f8\u5173\u7684\u5de5\u4f5c\u6709\u5f88\u591a, \u6700\u65e9\u53ef\u4ee5\u8ffd\u8ff0\u52302015\u5e74. \u4ee5\u4e0b\u5185\u5bb9\u6458\u5f55\u81ea\u77e5\u4e4e: </p> <ul> <li>\u8fd9\u91cc\u53ea\u8bb0\u5f55\u4e86\u6700\u5e38\u89c4\u7684video captioning task, \u5373\uff0c\u4e00\u6761\u89c6\u9891\u751f\u6210\u4e00\u4e2a\u53e5\u5b50\u3002</li> <li>2015\uff1a \u6700\u6734\u7d20\u7684 encoder-decoder \u7684\u7ed3\u6784\uff1bdecoder \u5f15\u5165 attention\u673a\u5236</li> <li>2016\uff1a\u8003\u8651\u5bf9\u89c6\u9891\u7684\u65f6\u57df\u5efa\u6a21</li> <li>2017\uff1a\u5f15\u5165\u4e00\u4e9b\u5176\u4f59\u53ef\u7528\u7684\u4fe1\u606f: \u5c5e\u6027\uff0c\u97f3\u9891\uff0c\u5149\u6d41</li> <li>2018\uff1a\u8fd9\u4e00\u5e74\u9b54\u6539\u6bd4\u8f83\u591a\uff1areconstructor, multimodal memory</li> <li>2019: \u8fd9\u4e00\u5e74\u6587\u7ae0\u6570\u91cf\u5f88\u591a\u5440\uff1axinwang \u63d0\u51fa\u4e86VATEX\u6570\u636e\u96c6\uff1b\u5f15\u5165\u53e5\u6cd5\u4fe1\u606f\uff1b\u4f7f\u7528object information\uff1b\u4f7f\u7528motion feature\uff1bgrouned video captioning;</li> <li>2020: \u5229\u7528\u6784\u5efa\u7684scene-graph knowledge; \u4f7f\u7528 object information\uff1b\u4f7f\u7528\u53e5\u6cd5\u4fe1\u606f</li> <li>2021\uff1a\u6a21\u5757\u5316\uff1b\u975e\u81ea\u56de\u5f52\uff1bdense captioning \u6709\u597d\u591a\u7bc7\u6587\u7ae0\uff1bclip-based captioning; \u68c0\u7d22\u589e\u5f3a</li> <li>2022: swinbert e2e; zero-shot\uff1b \u9884\u8bad\u7ec3\u76f8\u5173\u7684 speific for video captioning\uff1b\u652f\u6301\u96c6\uff1b\u68c0\u7d22\u589e\u5f3a\uff1b</li> </ul> <p>\u6700\u65e9\u7684\u5de5\u4f5c\u662fS2VT, sequence to sequence - video to text: </p> <p></p> <p>\u8fd9\u91cc\u662f\u5bf9\u6bcf\u4e00\u5e27\u7684\u7167\u7247\u8fdb\u884cencode, \u7136\u540e\u8f93\u5165\u8fdbLSTM\u7f51\u7edc\u4e2d. \u8fd9\u4e2a\u601d\u8def\u5176\u5b9e\u5f88\u6734\u5b9e\u65e0\u534e, \u4f46\u662f\u63d0\u4f9b\u4e86\u975e\u5e38\u91cd\u8981\u7684\u601d\u8def: \u5c06continuos\u7684motion feature\u8f93\u5165\u8fdb\u8bed\u8a00\u6a21\u578b(\u4e0d\u8fc7embedding layer)\u53ef\u80fd\u5bf9\u4e8e\u6a21\u578b\u6765\u8bf4\u5c31\u662f\u5f88\u96be\u5b66\u4e60, \u800c\u8fd9\u79cd\u6734\u5b9e\u65e0\u534e\u7684\u65b9\u6cd5\u53ef\u80fd\u5c31\u4f1a\u5f88work. \u5f53\u7136, \u5728\u8fd9\u79cdpipeline\u4e0b, \u7528ULIP\u5bf9\u9f50feature\u548cmotion\u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u80fd\u662f\u53ef\u53d6\u7684(\u4e8c\u6bb5\u5f0f\u8bad\u7ec3). </p> <p>\u4f46\u662f\u8f6c\u5934\u4e00\u60f3: \u8fd9\u4e48\u76f4\u767d\u7684pipeline, \u4e3a\u4ec0\u4e48\u6ca1\u6709\u4eba\u5c1d\u8bd5\u5462? \u540e\u6765\u6211\u60f3\u4e86\u60f3, \u539f\u56e0\u6709\u4e8c: </p> <p>\u4e00: \u6570\u636e\u96c6\u95ee\u9898. video-text pair\u6570\u636e\u96c6\u5f88\u65b9\u4fbf\u5236\u4f5c, \u4f46\u662f4D-text pair\u6570\u636e\u96c6\u5374\u5341\u5206\u7a00\u7f3a. (4D: 3D(\u7a7a\u95f4\u70b9\u5750\u6807) + 1D(\u65f6\u5e8f\u4fe1\u606f)). \u6211\u4e4b\u524d\u4eff\u771f\u6570\u636e\u90fd\u975e\u5e38\u5730\u9ebb\u70e6, \u800c\u4e14\u4ec5\u4ec5\u662fhumen-centric\u7684dataset. </p> <p>\u4e8c: \u5de5\u4e1a\u754c\u8f6c\u5316\u95ee\u9898. \u5728\u73b0\u5b9e\u4e2d, \u6211\u4eec\u8c8c\u4f3c\u5bf9\u4e8e\u8fd9\u79cd4D\u89c6\u9891\u63a5\u89e6\u7684\u5341\u5206\u5c11(\u7edd\u5927\u90e8\u5206\u90fd\u662f\u89c6\u9891\u4e3a\u4e3b). \u800c\u4e14\u5373\u4f7fmotion captioning\u80fd\u591f\u5b9e\u73b0, \u8f6c\u5316\u4e3a\u5de5\u4e1a\u754c\u7684\u53ef\u80fd\u6027\u4e5f\u6709\u5f85\u5546\u69b7, \u7406\u8bba\u4e0a\u53ea\u6709\u4eba\u673a\u4ea4\u4e92, \u6216\u8005\u662f\u5177\u8eab\u667a\u80fd, \u624d\u9700\u8981\u8fd9\u65b9\u9762\u7684\u529f\u80fd. \u5f53\u7136, \u6211\u76ee\u524d\u5bf9\u5de5\u4e1a\u754c\u76f8\u5173\u9700\u6c42\u7684\u4e86\u89e3\u80af\u5b9a\u662f\u5f88\u5c11\u7684, \u56e0\u6b64\u6211\u7684\u60f3\u8c61\u529b\u53ef\u80fd\u4f1a\u88ab\u5c40\u9650\u4f4f. </p> <p>\u65e0\u8bba\u5982\u4f55, \u8fd9\u4e00\u6b21\u5b9d\u8d35\u7684\u7ecf\u5386, \u6211\u6c38\u751f\u96be\u5fd8. </p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html","title":"NeRF &amp; Instant NGP","text":""},{"location":"Blog/NeRF%26Instant_NGP/note.html#nerf","title":"NeRF","text":"<p>Representing Scenes as Neural Radiance Fields for View Synthesis</p> <p>\u8bba\u6587\u94fe\u63a5</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#motivation","title":"Motivation","text":"<p>\u8981\u771f\u6b63\u7406\u89e3\u5de5\u4f5c\u7a76\u7adf\u5e72\u4e86\u4ec0\u4e48\uff0c\u903b\u8f91\u4e0a\uff0c\u8981\u5148\u4e86\u89e3\u4e00\u4e2a3D\u7269\u4f53\u6a21\u578b\u6446\u5728\u90a3\u91cc\uff0c\u662f\u5982\u4f55\u6210\u50cf\u5230\u5c4f\u5e55\u4e0a\u7684\u3002\u4f20\u7edfCG\u4e0a\uff0c\u662f\u771f\u5b9e\u7269\u4f53\u7528frustum\u6846\u4f4f\uff0c\u7ecf\u8fc7\u900f\u89c6\u6295\u5f71\u52302D\uff0c\u7136\u540e\u901a\u8fc7\u5149\u6805\u5316\u8d4b\u4e88\u50cf\u7d20\u989c\u8272\uff0c\u901a\u8fc7Shading\u6253\u4e0a\u5149\uff0c\u901a\u8fc7\u7eb9\u7406\u8d4b\u4e88\u5176\u4ed6\u5c5e\u6027\uff0c\u7b49\u7b49\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u9ad8\u5ea6\u4e0d\u53ef\u53c2\u6570\u5316\uff0c\u800c\u4e14\u5de5\u4f5c\u91cf\u590d\u6742\uff0c\u56e0\u4e3a\u9700\u8981\u83b7\u53d6texture\uff0cgeometry\u7b49\u4fe1\u606f\u3002\u6709\u4ec0\u4e48\u597d\u7684\u65b9\u6cd5\u53bb represent a static scene\u5462\uff1f\u8bba\u6587\u4e2d\u63d0\u51fa\u4e86\u4e00\u79cdcontinuous 5D function\u6765\u8fdb\u884c\u8868\u793a\uff0c\u5e76\u914d\u5408\u4e86Volume Rendering\u8fdb\u884c2D\u6210\u50cf\u3002\u90a3\u4e48\u6709\u4e86\u5982\u6b64\u9ad8\u5ea6\u5316\u53c2\u6570\u5316\u7684\u8868\u8fbe\u5f62\u5f0f\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u7528\u6765\u5e72\u4e00\u4e9b\u521b\u65b0\u7684\u64cd\u4f5c\u5462\uff1f\u795e\u7ecf\u7f51\u7edc\u5c31\u5f88\u559c\u6b22\u53c2\u6570\uff0c\u5e76\u4e14\u559c\u6b22\u62df\u5408\u51fd\u6570\u8fdb\u884c\u201c\u731c\u6d4b\u201d\u3002\u56e0\u6b64\uff0c\u4f5c\u8005\u7528\u795e\u7ecf\u7f51\u7edc\u5f3a\u5927 \u7684\u201c\u731c\u6d4b\u201d\u80fd\u529b\uff0c\u89e3\u51b3\u4e86\u4e00\u4e2a\u5b9e\u9645\u5e94\u7528\u95ee\u9898\uff1a synthesizing novel views of complex scenes\u3002</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#technical-contribution","title":"Technical Contribution","text":"<ul> <li>An approach for representing continuous scenes with complex geometry and materials as 5D neural radiance fields, parameterized as basic MLP networks.</li> <li>A hierarchical sampling strategy to allocate the MLP\u2019s capacity towards space with visible scene content. \uff08\u8fd9\u4e00\u70b9\u540e\u9762\u4f1a\u8bf4\uff09</li> <li>A positional encoding to map each input 5D coordinate into a higher dimensional space, which enables us to successfully optimize neural radiance fields to represent high-frequency scene content.\uff08\u4e4b\u540e\u4e5f\u4f1a\u8bf4\uff09</li> </ul>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#5d-volume-rendering","title":"5D &amp; Volume Rendering","text":"<p>\u4ee5\u4e0b\u7684\u5185\u5bb9\uff0c\u8fd8\u6ca1\u6d89\u53ca\u5230down-streaming task\u76f8\u5173\u7684\u5185\u5bb9\u3002\u5728task-specific application\u7684\u65f6\u5019\uff0c\u903b\u8f91\u4f1a\u548c\u4e0b\u9762\u4ecb\u7ecd\u7684\u7565\u6709\u4e0d\u540c\u3002</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#detailed-definition-of-5d-function","title":"Detailed Definition of 5D Function","text":"<p>\u5728\u5b9a\u4e49\u51fd\u6570\u4e4b\u524d\uff0c\u5148\u8bf4\u660e\u4e00\u4e9b\u80cc\u666f\u3002\u5047\u8bbe\u4e00\u4e2a\u7269\u4f53\u5728\u539f\u70b9\uff0c\u7136\u540e\u8ddd\u79bb\u534a\u5f84\u4e3aR\u7684\u534a\u7403\u91cc\u9762\uff0c\u5206\u5e03\u4e86\u5f88\u591a\u7684camera\uff0c\u9762\u5411\u8fd9\u4e2a\u7269\u4f53\uff0c\u80fd\u591f\u62cd\u6444\u7167\u7247\uff0ci.e.\uff0c\u80fd\u591f\u53d1\u51fa\u5927\u91cf\u7684\u5149\u7ebf\u3002\u5149\u7ebf\u62e5\u6709\u5355\u4f4d\u65b9\u5411\u5411\u91cf\uff0c\u7528\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u4e0b\u7684\u6807\u51c6\u7403\u5750\u6807\u7cfb\u8fdb\u884c\u8868\u793a\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\\(\\theta\\) \\(\\phi\\)\u8fdb\u884c\u8868\u793a\u3002</p> <p>\u90a3\u4e48\u53ef\u4ee5\u6765\u770b\u8fd9\u4e2a5D\u51fd\u6570\u5230\u5e95\u5e72\u4ec0\u4e48\u4e86\uff1a\u8f93\u5165\u7684\u662f\u4e00\u4e2a\u70b9\u7684\u5750\u6807\\(\\textbf{x}\uff08x, y, z\uff09\\)\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7ecf\u8fc7\u8be5\u70b9\u7684\u5149\u7ebf\u7684\u5355\u4f4d\u65b9\u5411\u5411\u91cf\u7684\u7b1b\u5361\u5c14\u5355\u4f4d\u7403\u7684\u89d2\u5ea6\u8868\u793a(\\(\\theta\\),  \\(\\phi\\))\uff0c\u8f93\u51fa\u7684\u662f\u8fd9\u4e2a\u8f93\u5165\u4e0b\u8be5\u70b9\u7684RGB\u503c\\(\\textbf{c} = (r,g,b)\\)\u548c\u5bc6\u5ea6(density)\\(\\sigma\\)\u3002\u8fd9\u4e00\u53e5\u8bdd\u91cc\u9762\u6700\u96be\u7406\u89e3\u7684\u662f\u5bc6\u5ea6\\(\\sigma\\)\u4e86\uff0c\u5b83\u4ee3\u8868\u8be5\u70b9\u7684\u5bf9\u5149\u7684\u963b\u6321\u6548\u679c\uff0c\u5bc6\u5ea6\u8d8a\u9ad8\uff0c\u5149\u8d8a\u900f\u4e0d\u8fc7\u53bb\uff0c\u53cd\u4e4b\u5219\u5149\u5f88\u5bb9\u6613\u900f\u8fc7\u53bb\u3002\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u9633\u5149\u4e0b\u4e3e\u8d77\u4e00\u7247\u8584\u6811\u53f6\uff0c\u4f9d\u7136\u80fd\u591f\u770b\u5230\u6811\u53f6\u540e\u7684\u90e8\u5206\u666f\u8272\uff1b\u800c\u5982\u679c\u4e3e\u8d77\u4e00\u5757\u9e45\u5375\u77f3\uff0c\u6839\u672c\u770b\u4e0d\u89c1\u3002\u53e6\u5916\uff0c\u4e3a\u4ec0\u4e48RGB\u503c\u8fd8\u9700\u8981\u8f93\u51fa\uff0c\u4e00\u4e2a\u70b9\u7684RGB\u76f4\u89c9\u4e2d\u4e0d\u5e94\u8be5\u4e00\u6837\u5417\uff1f\u4f46\u662f\u5176\u5b9e\u7ec6\u60f3\u53d1\u73b0\u4e0d\u662f\u5982\u6b64\u3002\u4e00\u4e2a\u7269\u4f53\u5728\u4e0d\u540c\u89c6\u89d2\u4e0b\uff0c\u56e0\u4e3a\u5149\u7ebf\u7684\u4e0d\u540c\uff0c\u989c\u8272\u662f\u4f1a\u53d1\u751f\u7565\u5fae\u7684\u53d8\u5316\u7684\uff0c\u5373\u4f7f\u662f\u8fd9\u4e2a\u7269\u4f53\u4e0a\u7684\u540c\u4e00\u4e2a\u70b9\u3002</p> <p>\u8fd9\u4fbf\u662fTechnical Contribution\u7b2c\u4e00\u70b9\u3002</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#volume-rendering","title":"Volume Rendering","text":"<p>\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u9ad8\u5ea6\u53c2\u6570\u5316\u4e00\u4e2a\u6a21\u578b\u4e86\uff1a\u5728\u4e00\u4e2a\u89c6\u89d2\u4e0b\uff0c\u5373\u5728\u4e00\u5806\u6563\u53d1\u51fa\u6765\u7684\u5149\u7ebf\u4e0b\uff0c\u4f1a\u7ecf\u8fc7\u73b0\u5b9e\u6a21\u578b\u4e2d\u7684\u4e00\u7cfb\u5217\u70b9\uff0c\u7136\u540e\u90fd\u80fd\u901a\u8fc7\u51fd\u6570\u77e5\u9053\u5728\u8fd9\u6761\uff08\u4e9b\uff09\u5149\u7ebf\u7684\u89c6\u89d2\u4e0b\uff0c\u5b83\u4eec\u5404\u81ea\u7684density\u4e0eRGB\u662f\u591a\u5c11\u3002\u90a3\u4e48\u5982\u4f55\u6210\u50cf\u5462\uff1f\u6211\u603b\u4e0d\u80fd\u518d\u8d70\u4e00\u904dGraphics Pipeline\u4e86\uff0c\u8981\u5229\u7528\u4e0a\u8fd9\u4e9b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u6cbf\u7528\u4e86\u4f20\u7edf\u7684\u4f53\u6e32\u67d3\u6280\u672f\uff1ause classical volume rendering techniques to accumulate those colors and densities into a 2D image\uff08\u8bba\u6587\u539f\u6587\uff09\u3002\u5728\u8fd9\u6761\u5149\u7ebf\u4e0a\uff0c\u5047\u8bbe\u6211\u77e5\u9053\u7ecf\u8fc7\u4e86\u54ea\u4e9b\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u70b9\u7684xyz\u5750\u6807\u548c\u5149\u7ebf\u7684density\u548cRGB\u6211\u90fd\u77e5\u9053\u3002\u8fd9\u6761\u5149\u7ebf\u5c06\u4f1a\u4ee3\u8868\u7684\u989c\u8272\u662f\u4ec0\u4e48\u5462\uff1f\u4f53\u6e32\u67d3\u516c\u5f0f\u5982\u4e0b\uff1a</p> \\[ C(r) = \\int_{t_n}^{t_f} T(t) \\cdot \\sigma(r(t)) \\cdot c(r(t)) \\, dt ,\\ where: \\\\ T(t) = \\exp\\left(-\\int_{t_n}^{t} \\sigma(r(s)) \\, ds \\right) \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(C(r)\\)\u662f\u5149\u7ebf\\(r\\)\u7684\u6700\u7ec8\u989c\u8272\uff0c\u6709\u7ea2\u7eff\u84dd\u4e09\u4e2a\u989c\u8272\u7684\u5206\u91cf\u3002</li> <li>\\(t_n\\)\u548c\\(t_f\\)\u5206\u522b\u662f\u5149\u7ebf\u7684\u8fd1\u88c1\u526a\u9762\u548c\u8fdc\u88c1\u526a\u9762\u7684\u53c2\u6570\u3002</li> <li>\\(T(t)\\)\u662f\u4ece\u8d77\u70b9\u5230\u5f53\u524d\u70b9t\u7684\u900f\u660e\u5ea6\u79ef\u7d2f\uff08\u901a\u5e38\u4e3a \\(T(t) = \\exp\\left(-\\int_{t_n}^{t} \\sigma(r(s)) \\, ds \\right)\\)\uff09\u3002</li> <li>\\(\\sigma(r(t))\\) \u662f\u70b9 \\(r(t)\\)\u5904\u7684\u4f53\u79ef\u5bc6\u5ea6\u3002</li> <li>\\(c(r(t))\\)\u662f\u70b9 \\(r(t)\\)\u5904\u7684\u989c\u8272\u3002</li> </ul> <p>\u90a3\u4e48\u8fd9\u6837\u4e00\u4e2a\u5149\u7ebf\u6700\u540e\u5448\u73b0\u7684\u989c\u8272\u77e5\u9053\u4e86\uff0c\u4e00\u4e2a\u6444\u50cf\u5934\u5c31\u662f\u77e5\u9053\u4e86\u4e0d\u540c\u65b9\u5411\u7684\u5149\u7ebf\u7684\u989c\u8272\uff0c\u4e5f\u5c31\u77e5\u9053\u4e86\u6700\u540e\u5982\u4f55\u50cf\u7d20\u4e0a\u9762\u586b\u989c\u8272\u4e86\u3002</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#training-and-inferencing-for-task","title":"Training and Inferencing for Task","text":""},{"location":"Blog/NeRF%26Instant_NGP/note.html#pipeline","title":"Pipeline","text":"<p>\u90a3\u4e48\u63a5\u4e0b\u6765\u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u7f51\u7edc\u7684pipeline\u3002\u9996\u5148\u8f93\u5165\u8fdb\u7f51\u7edc\u7684\u662f\u4e00\u4e2a\u89c6\u89d2\u4e0b\u62cd\u6444\u7684\u7167\u7247\uff0c\u4ee5\u53ca\u6444\u50cf\u673a\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\u3002\u7f51\u7edc\u4e00\u5171\u6709\u4e24\u4e2a\uff1a\u7c97\u7f51\u7edc\u548c\u7ec6\u7f51\u7edc\u3002\u7c97\u7f51\u7edc\u4e0a\uff1a\u9996\u5148\uff0c\u4e00\u6761\u5149\u7ebf\u4e0a\uff0c\u4f1a\u901a\u8fc7\u7c97\u91c7\u6837\u5728\u8fd1\u70b9\u548c\u8fdc\u70b9\u4e4b\u95f4\u9009\u51fa\u4e00\u5806\u7a7a\u95f4\u4e2d\u7684\uff08\u4e0d\u662f\u7269\u4f53\u4e0a\u7684\uff01\uff09\u70b9\uff08\u6ca1\u9519\uff0c\u539f\u672c\u7269\u4f53\u76843D\u4fe1\u606f\u662f\u4e0d\u77e5\u9053\u7684\uff09\uff0c\u8f93\u5165\u8fdb5D\u51fd\u6570\uff08\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u4e00\u5806\u5168\u8fde\u63a5\u5c42\u53bb\u62df\u5408\u7684\uff09\uff08\u4e00\u5f00\u59cb\u4e0d\u77e5\u9053\uff0c\u4efb\u610f\u521d\u59cb\u5316\u7684\uff09\uff0c\u201c\u5f97\u5230\u201d\uff08\u201c\u5f97\u5230\u201d\u8fd9\u4e00\u5757\u7684\u7f51\u7edc\u4e5f\u4f1a\u7ec6\u8bb2\uff09\u8fd9\u4e9b\u70b9\u7684density and RGB\uff0c\u7136\u540e\uff1b\u7136\u540e\u5bf9\u4e8e\u76f8\u673a\u6765\u8bf4\uff0c\u7528\u8fd9\u4e9b\u5bc6\u5ea6\u548c\u989c\u8272\u4fe1\u606f\u8fdb\u884c\u4f53\u6e32\u67d3\uff0c\u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff0cpixel-wise\u5730\u548cground truth\u56fe\u7247\u8fdb\u884c\u989c\u8272\u4e0a\u7684\u6bd4\u8f83\uff0c\u8ba1\u7b97\u51faMSE Loss\u5e76\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u68af\u5ea6\u3002\u62ff\u5230\u4e86\u7c97\u7f51\u7edc\u63d0\u4f9b\u7684\u70b9\u7684\u5bc6\u5ea6\u4fe1\u606f\uff0c\u66f4\u65b0\u91c7\u6837\u7b56\u7565\uff0c\u8fdb\u884c\u7ec6\u91c7\u6837\uff0c\u5f97\u5230\u65b0\u7684\u4e00\u5806\u91c7\u6837\u70b9\uff0c\u548c\u7c97\u91c7\u6837\u51fa\u6765\u7684\u70b9\u96c6\u8fdb\u884c\u548c\u5e76\uff0c\u518d\u4e00\u6b21\u4e00\u8d77\u8f93\u5165\u8fdb5D\u51fd\u6570\uff0c\u201c\u5f97\u5230\u201d\u4e86\u4e00\u5806\u7684\u989c\u8272\u548c\u5bc6\u5ea6\u4fe1\u606f\uff0c\u8fdb\u884c\u4f53\u6e32\u67d3\uff0c\u5f97\u5230\u56fe\u7247\u5e76\u8ba1\u7b97MSE Loss\uff0c\u6700\u540e\u7528\u7c97\u7f51\u7edc\u7684loss\u548c\u7ec6\u7f51\u7edc\u81ea\u5df1\u521a\u521a\u7b97\u51fa\u6765\u7684loss\u76f8\u52a0\uff0c\u7528\u8fd9\u4e2a\u5408\u5e76\u540e\u7684Loss\u53bb\u53cd\u5411\u4f20\u64ad\u3002</p> <p>Loss\u516c\u5f0f\uff1a\\(L = \\sum_{r \\in R} \\left( \\left\\| \\hat{C}_c(r) - C(r) \\right\\|_2^2 + \\left\\| \\hat{C}_f(r) - C(r) \\right\\|_2^2 \\right)\\)</p> <p>\u4e0b\u56fe\u5f88\u597d\u5730\u5c55\u793a\u4e86\u4e0a\u8ff0\u7684\u6d41\u7a0b\uff1a</p> <p></p> <p>\u5f53\u7136\uff0c\u4e0a\u8ff0\u8fd8\u4e0d\u591f\u7ec6\u8282\uff0c\u7f51\u7edc\u6d41\u7a0b\u5982\u4e0b\u56fe\uff08\u56fe\u6765\u81ea\u539f\u8bba\u6587\uff09\u3002\u4e0a\u56fe\u4e2d\u7ea2\u7bad\u5934\u540e\u9762\u7684\u6d41\u7a0b\uff0c\u5c31\u5982\u4e0a\u8ff0\u6240\u8bf4\uff1b\u800c\u7ea2\u7bad\u5934\u4e4b\u524d\u7684\u90e8\u5206\uff0c\u5c31\u662f\u5728\u5c1d\u8bd5\u62df\u54085D\u51fd\u6570\uff0c\u4f46\u662f\u4ecd\u6709\u51e0\u4e2a\u7ec6\u8282\u9700\u8981\u8865\u5145\u3002</p> <p></p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#multi-view-consistent-representation","title":"Multi-view Consistent Representation","text":"<p>We encourage the representation to be multiview consistent by restricting the network to predict the volume density \u03c3 as a function of only the location x, while allowing the RGB color c to be predicted as a function of both location and viewing direction. (from NeRF)</p> <p>\u7b2c\u4e00\u70b9\uff1a\u4e3a\u4ec0\u4e48\u7ea2\u7bad\u5934\u540e\u9762\u5148\u5355\u72ec\u51fa\u5bc6\u5ea6\uff0c\u8f93\u51fa\u5b83\u4e4b\u540e\u624d\u518d\u7ed3\u5408\u5149\u7ebf\u65b9\u5411\u4fe1\u606f\uff0c\u7ecf\u8fc7MLP\u5f97\u5230\u989c\u8272\u503c\u5462\uff1f\u56e0\u4e3a\u76f4\u89c9\u4e0a\uff1a\u4e0d\u540c\u89d2\u5ea6\u89c2\u5bdf\u4e0b\u7684\u540c\u4e00\u4e2a\u70b9\uff0c\u867d\u7136\u8bf4\u5b83\u7684\u989c\u8272\u662f\u4e0d\u540c\u7684\uff0c\u4f46\u662fdensity\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff01\u56e0\u6b64\uff0c\u76f4\u5230\u8f93\u51fadensity\u4e4b\u524d\uff0c\u7f51\u7edc\u4e2d\u4e0d\u80fd\u77e5\u9053\u65b9\u5411\u4fe1\u606f\u7684\u5b58\u5728\u3002</p> <p>\u8c01\u5148\u8f93\u5165\uff0c\u8c01\u5148\u8f93\u51fa\uff0c\u8c01\u540e\u8f93\u5165\uff0c\u8c01\u540e\u8f93\u51fa\uff0c\u4e0b\u56fe\u6f14\u793a\u7684\u5f88\u6e05\u695a\uff1a</p> <p></p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#positional-encoding","title":"Positional Encoding","text":"<p>This is consistent with recent work by Rahaman et al. , which shows that deep networks are biased towards learning lower frequency function. (from NeRF)</p> <p>\u7b2c\u4e8c\u70b9\uff1a\\(\\gamma\\)\u662f\u4ec0\u4e48\u73a9\u610f\u513f\uff1f\u5176\u5b9e\u8fd9\u4ee3\u8868Positional Encoding\u5750\u6807\u548c\u65b9\u5411\u5411\u91cf\u4e4b\u540e\u7ed3\u679c\u3002\u4e3a\u4ec0\u4e48\u8981\u4f4d\u7f6e\u7f16\u7801\uff1f\u56e0\u4e3a\u5b9e\u9645\u4e2d\uff0c\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u53d8\u5316\u8f83\u77ed\uff0c\u4f46\u662f\u8574\u542b\u7684\u4fe1\u606f\u7684\u53d8\u5316\u53ef\u80fd\u201c\u8f83\u5feb\u201d\uff0c\u5373\uff0csampling\u9891\u7387\u4e0d\u591f\uff0c\u5bb9\u6613\u9020\u6210\u8f93\u51fa\u56fe\u50cf\u989c\u8272\u548c\u5bc6\u5ea6\u53d8\u5316\u8f83\u4e3a\u5e73\u7f13\u7684\u73b0\u8c61\u3002Positional Encoding\u516c\u5f0f\u5982\u4e0b\uff1a  \u8fd9\u6837\u901a\u8fc7\u53cc\u5c04\u5c06\u4f4e\u9891\u7684\u4fe1\u606f\u6295\u5c04\u5230\u9ad8\u9891\u7684\u4fe1\u606f\uff0c\u8ba9\u5b83\u80fd\u591f\u611f\u77e5\u9ad8\u9891\u7684\u53d8\u5316\uff0c\u4ece\u800c\u589e\u52a0\u9c81\u68d2\u6027\u3002\u5728\u672c\u7bc7\u5de5\u4f5c\u4e2d\uff0cxyz\u4fe1\u606f\u548cview\u4fe1\u606f\u90fd\u8fdb\u884c\u4e86\u4f4d\u7f6e\u7f16\u7801\u3002\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u5728transformer\u4e2d\u4e5f\u6709\u5e94\u7528\uff0c\u4f46\u662f\u8bba\u6587\u4e2d\u7740\u91cd\u63d0\u53ca\u4e86Transformer\u548cNeRF\u4e2d\u4e24\u8005\u4f5c\u7528\u4e0a\u7684\u533a\u522b\uff1a</p> <p>A similar mapping is used in the popular Transformer architecture, where it is referred to as a positional encoding. However, Transformers use it for a different goal of providing the discrete positions of tokens in a sequence as input to an architecture that does not contain any notion of order. In contrast, we use these functions to map continuous input coordinates into a higher dimensional space to enable our MLP to more easily approximate a higher frequency function.</p> <p>\u8fd9\u4fbf\u662ftechnical contribution\u7b2c\u4e8c\u70b9\u3002</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#hierarchical-volume-sampling","title":"Hierarchical Volume Sampling","text":"<p>Our rendering strategy of densely evaluating the neural radiance field network at N query points along each camera ray is inefficient: free space and occluded regions that do not contribute to the rendered image are still sampled repeatedly. (from NeRF)</p> <p>\u4e3a\u4ec0\u4e48\u8981\u8bbe\u8ba1Coarse and Fine Sampling\uff08\u7c97\u91c7\u6837\u548c\u7ec6\u91c7\u6837\uff09\uff1f\u539f\u56e0\u5728\u4e0a\u9762\u8fd9\u6bb5\u8bba\u6587\u4e2d\u7684\u539f\u8bdd\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\u3002\u5747\u5300\u91c7\u6837\u8fd9\u79cdcoarse\u7684\u91c7\u6837\u5f88\u5bb9\u6613\u628a\u6ce8\u610f\u529b\u5206\u585e\u5728\u90a3\u4e9bdensity\u5de8\u4f4e\u7684\u5730\u65b9\u3002\u56e0\u6b64\u5728\u7c97\u91c7\u6837\u540e\u5927\u6982\u77e5\u9053\u90a3\u4e00\u7247\u90e8\u5206\u5206\u5e03\u7684\u70b9\u591a\u4e4b\u540e\uff0c\u9700\u8981\u4e00\u79cd\u673a\u5236\u5728\u6709\u70b9\u7684\u5730\u65b9\u591a\u91c7\u6837\u3002\u5c31\u5982\u4e0b\u4e00\u5f20\u56fe\u6240\u793a\uff1a\u68c0\u6d4b\u5230\u7684\u5bc6\u5ea6\u503c\u968f\u8ddd\u79bb\u53d8\u5316\u7684\u51fd\u6570\uff0c\u53d1\u73b0\u6709\u5f88\u591a\u5730\u65b9\u7531\u4e8e\u6ca1\u6709\u70b9\uff0c\u800c\u5bc6\u5ea6\u975e\u5e38\u975e\u5e38\u4f4e\uff0c\u90a3\u4e48\u5747\u5300\u91c7\u6837\u5c31\u663e\u5f97\u4e0d\u662f\u90a3\u4e48\u5408\u9002\u4e86\u3002</p> <p>  \u4e0a\u9762\u7684\u4e24\u4e2a\u516c\u5f0f\uff1a\u7b2c\u4e00\u884c\u8868\u793a\u5728\u8303\u56f4 \\([tn,tf]\\)\u533a\u95f4\u4e2d\u5747\u5300\u91c7\u6837\uff0c\u7b2c\u4e8c\u884c\u8868\u793a\u6839\u636e\u5bc6\u5ea6\u4fe1\u606f\u7ec6\u91c7\u6837\u3002</p> <p>\u8fd9\u4fbf\u662ftechnical contribution\u7b2c\u4e09\u70b9\u3002</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#concatenation","title":"Concatenation","text":"<p>\u4e3a\u4ec0\u4e48xyz\u5750\u6807\u4fe1\u606f\u7ecf\u8fc7\u4f4d\u7f6e\u7f16\u7801\u4e4b\u540e\u53d8\u6210\u4e86256\u7684\u9ad8\u7ef4\u4fe1\u606f\u4e4b\u540e\uff0c\u4ecd\u7136\u9700\u8981\u548c\u539f\u6765\u7684\u4f4d\u7f6e\u7f16\u7801concate\u5462\uff1f\u539f\u8bba\u6587\u4e2d\u6ca1\u7ec6\u8bf4\uff0c\u4f46\u662f\u901a\u5e38\u8ba4\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u6709\u52a9\u4e8e\u63d0\u9ad8\u7f51\u7edc\u5bf9\u7ec6\u8282\u7684\u6355\u6349\u80fd\u529b\uff0c\u56e0\u4e3a\u7f51\u7edc\u80fd\u591f\u63a5\u6536\u5230\u66f4\u591a\u7684\u9891\u7387\u6210\u5206\uff0c\u8fd9\u5bf9\u4e8e\u8868\u793a\u590d\u6742\u7684\u573a\u666f\u548c\u7ec6\u8282\u975e\u5e38\u91cd\u8981\u3002</p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#conclusion","title":"Conclusion","text":"<p>5D\u51fd\u6570\u8868\u793a\uff0c\u4f4d\u7f6e\u7f16\u7801\uff0c\u7ee7\u627f\u5f0f\u91c7\u6837\uff08\u7ec6\u91c7\u6837\uff09\u975e\u5e38work\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\uff1a\u5982\u679c\u6ca1\u6709\u89c6\u89d2\u4fe1\u606f\uff085D\u7f3a\u5931\u65b9\u5411\u89d2\u5ea6\u76842D\uff09\u3001\u6ca1\u6709\u4f4d\u7f6e\u7f16\u7801\u7684\u6548\u679c\u662f\u8f83\u5dee\u7684\u3002\u76f4\u89c2\u770b\u51fa\uff1a\u6ca1\u6709\u89c6\u89d2\u4fe1\u606f\uff0c\u5f88\u96be\u4ea7\u751f\u9ad8\u5149\uff08specularity\uff09\u6548\u679c\uff1b\u6ca1\u6709\u4f4d\u7f6e\u7f16\u7801\uff0c\u6a21\u578b\u4e0drobust\uff0cinference\u7ed3\u679cpixel\u4e4b\u95f4\u7684\u989c\u8272\u53d8\u5316\u5f88\u4fdd\u5b88\u3002</p> <p></p> <p>\u4e8e\u662f\u4e4e\u5730\uff0c\u4e00\u7bc7\u4f1f\u5927\u7684\u5de5\u4f5c\u8bde\u751f\u4e86\uff1a</p> <p></p>"},{"location":"Blog/NeRF%26Instant_NGP/note.html#instant-ngp","title":"Instant NGP","text":"<p>Neural graphics primitives, parameterized by fully connected neural networks, can be costly to train and evaluate.</p> <p>\u8bba\u6587\u94fe\u63a5</p> <p>Instant-NPG\u548cNeRF\u6709\u5f88\u591a\u7684\u76f8\u4f3c\u4e4b\u5904\uff0c\u4f46\u662fNeRF\u539f\u6765\u7684MLP\u7f51\u7edc\u8bad\u7ec3\u65f6\u95f4\u5f88\u957f\u3002\u4e3a\u4e86\u80fd\u9ad8\u8d28\u91cf\u91cd\u5efa\u573a\u666f\uff0c\u5f80\u5f80\u9700\u8981\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u7f51\u7edc\uff0c\u6bcf\u4e2a\u91c7\u6837\u70b9\u8fc7\u4e00\u904d\u7f51\u7edc\u5c31\u4f1a\u8017\u8d39\u5927\u91cf\u65f6\u95f4\u3002\u56e0\u6b64\u8bba\u6587\u4e2d\u63d0\u51fa\u4e86\u4f7f\u7528grid\u6765\u89e3\u51b3\uff0c\u5373voxel\u3002\u628a\u6574\u4e2a\u7a7a\u95f4\u7528\u4e00\u4e2a\u4e2a\u7684\u7acb\u65b9\u4f53\uff0c\u6bcf\u4e00\u4e2a\u9876\u70b9\u90fd\u5bf9\u5e94\u4e00\u4e2a\u9ad8\u7ef4\u7279\u5f81\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u5305\u56f4\u5b83\u7684\u516b\u4e2a\u5b9a\u70b9\uff0c\u5229\u7528\u5b83\u4eec\u7684xyz\u5750\u6807\u7528\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u5f15\u7d22\u51fa\u516b\u4e2a\u9ad8\u7ef4\u7279\u5f81\uff0c\u7136\u540e\u901a\u8fc7Interpolation\u5c31\u53ef\u4ee5\u5b9e\u73b0\u70b9\u7684\u9ad8\u7ef4\u7279\u5f81\u7684\u8868\u8fbe\u4e86\u3002</p> <p>\u90a3\u4e48\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u80fd\u591f\u901a\u8fc7\u70b9\u7684\u5750\u6807\u4fe1\u606f\u5f15\u7d22\u503c\u5462\uff1f\u54c8\u5e0c\u8868\u5e94\u8fd0\u800c\u751f\u3002\u5c06xyz\u5750\u6807\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u5230\u6574\u6570\uff0c\u7136\u540e\u5728\u6570\u7ec4\u91cc\u9762\u5f15\u7d22\u51fa\u9ad8\u7ef4\u7279\u5f81\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u7acb\u65b9\u4f53\u7684\u5927\u5c0f\u5982\u679c\u662f\u56fa\u5b9a\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4e0d\u591frobust\uff0c\u56e0\u6b64\u9700\u8981\u4e0d\u540c\u5206\u8fa8\u7387\u4e0b\u7684\u7acb\u65b9\u4f53\u5212\u5206\u3002\u6765\u591a\u91cd\u8868\u8fbe\u8fd9\u4e2a\u9ad8\u7ef4\u5411\u91cf\u3002\u8bba\u6587\u4e2d\uff0c\u4e00\u5171\u67098\u79cd\u5206\u8fa8\u7387\uff0c\u7136\u540e\u6700\u540e\u4f1a\u5bf9\u516b\u4e2a\u5c5e\u6027\u7ed3\u679c\u518d\u4e00\u6b21\u8fdb\u884c\u63d2\u503c\u3002</p> <p>\u5728\u8bba\u6587\u4e2d\uff0c\u6570\u7ec4\u7684\u5bb9\u91cf\u6709\u9650\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u4ea7\u751f\u54c8\u5e0c\u51b2\u7a81\uff0c\u5373\u4e0d\u540c\u7684\u7acb\u65b9\u4f53\u9876\u70b9\u7d22\u5f15\u5230\u7684\u9ad8\u7ef4\u5411\u91cf\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002\u4f46\u662f\u8bba\u6587\u4e2d\u8ba4\u4e3a\uff0c\u8fd9\u5e76\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u6709\u516b\u4e2a\u5206\u8fa8\u7387\u7684\u7ed3\u679c\uff0c\u8db3\u4ee5\u514b\u670d\u8fd9\u79cd\u5c0f\u6270\u52a8\u3002</p> <p></p> <p>\u56e0\u6b64Instant NGP\u7684pipeline\u5982\u4e0a\uff0c\u548cNeRF\u975e\u5e38\u76f8\u4f3c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5728\u4e00\u4e2a\u5206\u8fa8\u7387\u4e0b\uff0c\u627e\u5230\u7acb\u65b9\u4f53\u7684\u516b\u4e2a\u9876\u70b9\uff0c\u8fd9\u516b\u4e2a\u9876\u70b9xyz\u5750\u6807\u5404\u81ea\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u5f97\u5230\u5f15\u7d22\uff0c\u4ece\u54c8\u5e0c\u8868\u4e2d\u4ee5\\(O(1)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f97\u5230\u5404\u81ea\u7684\u9ad8\u7ef4\u7279\u5f81\u5411\u91cf\uff0c\u7136\u540e\u8fdb\u884c\u63d2\u503c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u91cd\u590d\u516b\u6b21\uff08\u56e0\u4e3a\u6709\u516b\u4e2a\u5206\u8fa8\u7387\uff09\u3002\u5f97\u5230\u4e86\u516b\u4e2a\u9ad8\u7ef4\u5411\u91cf\u4e4b\u540e\uff0c\u518d\u6b21\u63d2\u503c\u5f97\u5230\u5411\u91cf\uff0c\u8f93\u5165MLP\uff08\u8fd9\u91cc\u4f7f\u7528\u7684\u4e0d\u662fNeRF\u7684MLP\uff0c\u800c\u662f\u5f88\u5c0f\u7684MLP\uff0c\u56e0\u4e3a\u8f93\u5165\u5411\u91cf\u7684\u53c2\u6570\u6570\u91cf\u4e0d\u591a\uff09\uff1b\u800c\u4e4b\u540e\u7684\u4e00\u5207\u548cNeRF\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u5173\u4e8e\\(point\\rightarrow vector_{input}\\)\u7684\u751f\u52a8\u5316\u8fc7\u7a0b\u5982\u4e0b\uff08\u6765\u81ea\u539f\u8bba\u6587\uff1b\u75282D\u7684\u6f14\u793a\u56fe\u6765\u6f14\u793a3D\u4e2d\u7684\u5b9e\u9645\u64cd\u4f5c\uff09</p> <p></p>"},{"location":"Blog/PointMAE/analysis.html","title":"Analysis of PointMAE","text":""},{"location":"Blog/PointMAE/analysis.html#introduction","title":"Introduction","text":"<p>\u63a9\u7801\u81ea\u7f16\u7801\u4f5c\u4e3a\u4e00\u79cd\u5f88\u6709\u524d\u9014\u7684\u81ea\u76d1\u7763\u5b66\u4e60\u65b9\u6848\uff0c\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u548c\u8ba1\u7b97\u673a\u89c6\u89c9\u65b9\u9762\u5177\u6709\u663e\u8457\u7684\u8fdb\u6b65\u3002\u53d7\u6b64\u542f\u53d1\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u7528\u4e8e\u70b9\u4e91\u81ea\u76d1\u7763\u5b66\u4e60\u7684\u63a9\u853d\u81ea\u52a8\u7f16\u7801\u5668\u7684\u7b80\u6d01\u65b9\u6848\uff0c\u4ee5\u89e3\u51b3\u70b9\u4e91\u7279\u6027\u5e26\u6765\u7684\u6311\u6218\uff0c\u5305\u62ec\u4f4d\u7f6e\u4fe1\u606f\u6cc4\u6f0f\u548c\u4fe1\u606f\u5bc6\u5ea6\u4e0d\u5747\u5300\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5c06\u8f93\u5165\u70b9\u4e91\u5212\u5206\u4e3a\u4e0d\u89c4\u5219\u7684\u70b9\u6591\u5757\uff0c\u5e76\u4ee5\u9ad8\u6bd4\u4f8b\u968f\u673a\u5c4f\u853d\u5b83\u4eec\u3002\u7136\u540e\uff0c\u4e00\u4e2a\u57fa\u4e8e Transformer \u7684\u6807\u51c6\u81ea\u52a8\u7f16\u7801\u5668\uff0c\u5177\u6709\u975e\u5bf9\u79f0\u8bbe\u8ba1\u548c\u79fb\u52a8\u63a9\u7801\u6807\u8bb0\u64cd\u4f5c\uff0c\u4ece\u672a\u5c4f\u853d\u7684\u70b9\u8865\u4e01\u4e2d\u5b66\u4e60\u9ad8\u7ea7\u6f5c\u5728\u7279\u5f81\uff0c\u65e8\u5728\u91cd\u5efa\u5c4f\u853d\u7684\u70b9\u8865\u4e01\u3002\u5927\u91cf\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u6211\u4eec\u7684\u65b9\u6cd5\u5728\u9884\u8bad\u7ec3\u671f\u95f4\u662f\u6709\u6548\u7684\uff0c\u5e76\u4e14\u5728\u5404\u79cd\u4e0b\u6e38\u4efb\u52a1\u4e2d\u53ef\u4ee5\u5f88\u597d\u5730\u63a8\u5e7f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5728 ScanObjectNN \u4e0a\u5b9e\u73b0\u4e86 85.18% \u7684\u51c6\u786e\u7387\uff0c\u5728 ModelNet40 \u4e0a\u5b9e\u73b0\u4e86 94.04% \u7684\u51c6\u786e\u7387\uff0c\u4f18\u4e8e\u6240\u6709\u5176\u4ed6\u81ea\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\u3002\u6211\u4eec\u901a\u8fc7\u6211\u4eec\u7684\u65b9\u6848\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u5168\u57fa\u4e8e\u6807\u51c6 Transformer \u7684\u7b80\u5355\u67b6\u6784\u53ef\u4ee5\u8d85\u8d8a\u76d1\u7763\u5b66\u4e60\u7684\u4e13\u7528 Transformer \u6a21\u578b\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u8fd8\u5c06\u5c0f\u955c\u5934\u7269\u4f53\u5206\u7c7b\u4e2d\u6700\u5148\u8fdb\u7684\u7cbe\u5ea6\u63d0\u9ad8\u4e86 1.5%-2.3%\u3002\u6b64\u5916\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u542f\u53d1\u4e86\u5c06\u8bed\u8a00\u548c\u56fe\u50cf\u7684\u7edf\u4e00\u67b6\u6784\u5e94\u7528\u4e8e\u70b9\u4e91\u7684\u53ef\u884c\u6027\u3002</p> <p>Transformer\u6700\u521d\u7528\u4e8e\u6587\u672c\u751f\u6210\u3002\u7ed9\u51fa\u6570\u4e2a\u5355\u8bcd\uff0c\u7136\u540e\u6839\u636e\u6a21\u578b\u9884\u6d4b\u51fa\u53ef\u80fd\u7684\u4e0b\u4e00\u4e2a\u5355\u8bcd(\u5b9e\u9645\u4e0a\u662f\u8bb8\u591a\u53ef\u80fd\u53ca\u5176\u5bf9\u5e94\u7684\u53ef\u80fd\u6027)\uff0c\u7136\u540e\u4e0d\u65ad\u91cd\u590d\u8fd9\u6837\u7684\u64cd\u4f5c\u5c31\u80fd\u521b\u9020\u6587\u672c\u3002\u5728\u8bba\u6587\u7684\u573a\u666f\u4e2d\uff0c\u5c06\u4e00\u4e2a\u70b9\u4e91\u8fdb\u884c\u90e8\u5206\uff08\u5e76\u4e14\u662f\u9ad8\u6bd4\u4f8b\uff09\u7684\u906e\u63a9\uff0c\u7136\u540e\u5c1d\u8bd5\u5229\u7528Transformer\u7684\u65b9\u6cd5\u6765\u5b66\u4e60\u672a\u88ab\u906e\u63a9\u7684\u90e8\u5206\u7684\u7279\u5f81\uff0c\u4ece\u800c\u590d\u539f\u539f\u6765\u7684\u70b9\u4e91\u6a21\u578b\u3002\u8fd9\u79cd\u60f3\u6cd5\u662f\u81ea\u7136\u7684\uff0c\u56e0\u4e3atransformer\u5df2\u7ecf\u7528\u4e8e\u4e86\u6587\u672c\u3001\u97f3\u9891\u548c\u56fe\u7247\u7684\u201c\u906e\u6321+\u5b66\u4e60+\u590d\u539f\u201d\u7684\u4efb\u52a1\u4e86\u3002</p> <p>\u81ea\u76d1\u7763\u5b66\u4e60\u4ece\u672a\u6807\u8bb0\u7684\u6570\u636e\u4e2d\u5b66\u4e60\u6f5c\u5728\u7279\u5f81\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u4eba\u7c7b\u5b9a\u4e49\u7684\u6ce8\u91ca\u6784\u5efa\u8868\u793a\u3002\u5b83\u901a\u5e38\u662f\u901a\u8fc7\u8bbe\u8ba1\u4e00\u4e2apretext\u4efb\u52a1\u6765\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u7136\u540e\u5bf9\u4e0b\u6e38\u4efb\u52a1\u8fdb\u884c\u5fae\u8c03\u6765\u5b8c\u6210\u7684\u3002\u81ea\u76d1\u7763\u5b66\u4e60\u5bf9\u6807\u8bb0\u6570\u636e\u7684\u4f9d\u8d56\u8f83\u5c11\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09[11,4,32,33]\u548c\u8ba1\u7b97\u673a\u89c6\u89c9[28,3,8,18,7,2,17,49]\u3002\u5176\u4e2d\uff0c\u56fe1\u6240\u793a\u7684\u63a9\u7801\u81ea\u52a8\u7f16\u7801[17,49,2]\u662f\u4e00\u79cd\u5f88\u6709\u524d\u9014\u7684\u8bed\u8a00\u548c\u56fe\u50cf\u65b9\u6848\u3002\u5b83\u968f\u673a\u5c4f\u853d\u4e86\u4e00\u90e8\u5206\u8f93\u5165\u6570\u636e\uff0c\u5e76\u91c7\u7528\u81ea\u52a8\u7f16\u7801\u5668\u6765\u91cd\u5efa\u4e0e\u539f\u59cb\u5c4f\u853d\u5185\u5bb9\u76f8\u5bf9\u5e94\u7684\u663e\u5f0f\u7279\u5f81\uff08\u4f8b\u5982\u50cf\u7d20\uff09\u6216\u9690\u5f0f\u7279\u5f81\uff08\u4f8b\u5982\u79bb\u6563\u6807\u8bb0\uff09\u3002\u7531\u4e8e\u5c4f\u853d\u90e8\u4ef6\u4e0d\u63d0\u4f9b\u6570\u636e\u4fe1\u606f\uff0c\u56e0\u6b64\u6b64\u91cd\u5efa\u4efb\u52a1\u4f7f\u81ea\u52a8\u7f16\u7801\u5668\u80fd\u591f\u4ece\u672a\u5c4f\u853d\u90e8\u4ef6\u4e2d\u5b66\u4e60\u9ad8\u7ea7\u6f5c\u5728\u7279\u5f81\u3002\u6b64\u5916\uff0c\u5c4f\u853d\u81ea\u52a8\u7f16\u7801\u7684\u5f3a\u5927\u529f\u80fd\u5f52\u529f\u4e8e\u5176\u81ea\u52a8\u7f16\u7801\u5668\u7684\u9aa8\u5e72\u7f51\uff0c\u8be5\u4e3b\u5e72\u91c7\u7528Transformers[40]\u67b6\u6784\u3002\u4f8b\u5982\uff0cNLP \u4e2d\u7684 BERT [11] \u548c\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684 MAE [17] \u90fd\u5e94\u7528\u4e86\u5c4f\u853d\u81ea\u52a8\u7f16\u7801\uff0c\u5e76\u91c7\u7528\u6807\u51c6 Transformer \u67b6\u6784\u4f5c\u4e3a\u81ea\u52a8\u7f16\u7801\u5668\u7684\u9aa8\u5e72\uff0c\u4ee5\u5b9e\u73b0\u6700\u5148\u8fdb\u7684\u6027\u80fd\u3002</p> <p>\u5c4f\u853d\u81ea\u52a8\u7f16\u7801\u7684\u601d\u60f3\u4e5f\u9002\u7528\u4e8e\u70b9\u4e91\u81ea\u76d1\u7763\u5b66\u4e60\uff0c\u56e0\u4e3a\u70b9\u4e91\u672c\u8d28\u4e0a\u4e0e\u8bed\u8a00\u548c\u56fe\u50cf\u5171\u4eab\u4e00\u4e2a\u5171\u540c\u7684\u5c5e\u6027\uff08\u89c1\u56fe1\uff09\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u627f\u8f7d\u4fe1\u606f\u7684\u57fa\u672c\u5143\u7d20(token?)\uff08\u5373\u70b9\u3001\u8bcd\u6c47\u8868\u548c\u50cf\u7d20\uff09\u4e0d\u662f\u72ec\u7acb\u7684\u3002\u76f8\u53cd\uff0c\u76f8\u90bb\u5143\u7d20\u5f62\u6210\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u5b50\u96c6\u6765\u5448\u73b0\u5c40\u90e8\u7279\u5f81\u3002\u4e0e\u5c40\u90e8\u8981\u7d20\u4e00\u8d77\uff0c\u5b8c\u6574\u7684\u5143\u7d20\u96c6\u6784\u6210\u4e86\u5168\u5c40\u8981\u7d20\u3002\u56e0\u6b64\uff0c\u5728\u5c06\u70b9\u5b50\u96c6\u5d4c\u5165\u5230token\u4e2d\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bed\u8a00\u548c\u56fe\u50cf\u8fdb\u884c\u7c7b\u4f3c\u7684\u5904\u7406\u3002\u6b64\u5916\uff0c\u8003\u8651\u5230\u70b9\u4e91\u7684\u6570\u636e\u96c6\u76f8\u5bf9\u8f83\u5c0f\uff0c\u5c4f\u853d\u81ea\u7f16\u7801\u4f5c\u4e3a\u4e00\u79cd\u81ea\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u7136\u5730\u6ee1\u8db3\u4f5c\u4e3a\u81ea\u7f16\u7801\u5668\u4e3b\u5e72\u7684 Transformers \u67b6\u6784\u7684\u5927\u6570\u636e\u9700\u6c42\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6700\u8fd1\u7684\u4e00\u9879\u5de5\u4f5cPoint-BERT [54]\u5c1d\u8bd5\u4e86\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u63a9\u7801\u81ea\u52a8\u7f16\u7801\u7684\u65b9\u6848\u3002\u8be5\u6587\u63d0\u51fa\u4e00\u79cdBERT\u5f0f\u7684\u9884\u8bad\u7ec3\u7b56\u7565\uff0c\u5373\u5c4f\u853d\u70b9\u4e91\u7684\u8f93\u5165token\uff0c\u7136\u540e\u91c7\u7528Transformer\u67b6\u6784\u9884\u6d4b\u63a9\u7801token\u7684\u79bb\u6563token\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u76f8\u5bf9\u590d\u6742\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u9884\u8bad\u7ec3\u4e4b\u524d\u8bad\u7ec3\u57fa\u4e8eDGCNN [44]\u7684\u79bb\u6563\u53d8\u5206\u81ea\u52a8\u7f16\u7801\u5668\uff08dVAE\uff09[35]\uff0c\u5e76\u4e14\u5728\u9884\u8bad\u7ec3\u671f\u95f4\u4e25\u91cd\u4f9d\u8d56\u5bf9\u6bd4\u5b66\u4e60\u548c\u6570\u636e\u589e\u5f3a\u3002\u6b64\u5916\uff0c\u5728\u9884\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6765\u81ea\u5176\u8f93\u5165\u7684\u5c4f\u853d\u4ee4\u724c\u4f1a\u4eceTransformers\u7684\u8f93\u5165\u8fdb\u884c\u5904\u7406\uff0c\u5bfc\u81f4\u4f4d\u7f6e\u4fe1\u606f\u8fc7\u65e9\u6cc4\u9732\uff0c\u8ba1\u7b97\u8d44\u6e90\u6d88\u8017\u9ad8\u3002\u4e0e\u4ed6\u4eec\u7684\u65b9\u6cd5\u4e0d\u540c\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4e3a\u4e86\u5c06\u63a9\u7801\u81ea\u7f16\u7801\u5f15\u5165\u70b9\u4e91\uff0c\u6211\u4eec\u65e8\u5728\u8bbe\u8ba1\u4e00\u79cd\u7b80\u6d01\u9ad8\u6548\u7684\u63a9\u7801\u81ea\u7f16\u7801\u5668\u65b9\u6848\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9996\u5148\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u5206\u6790\u4e86\u70b9\u4e91\u5f15\u5165\u63a9\u7801\u81ea\u7f16\u7801\u7684\u4e3b\u8981\u6311\u6218\uff1a</p> <p>\uff08i\uff09 \u7f3a\u4e4f\u7edf\u4e00\u7684\u53d8\u538b\u5668\u67b6\u6784\u3002\u4e0eNLP\u4e2d\u7684Transformers[40]\u548c\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684Vision Transformer\uff08ViT\uff09[12]\u76f8\u6bd4\uff0cTransformer\u7684\u70b9\u4e91\u67b6\u6784\u7814\u7a76\u8f83\u5c11\uff0c\u800c\u4e14\u76f8\u5bf9\u591a\u6837\u5316\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5c0f\u6570\u636e\u96c6\u65e0\u6cd5\u6ee1\u8db3Transformer\u7684\u5927\u6570\u636e\u9700\u6c42\u3002\u4e0e\u4e4b\u524d\u4f7f\u7528\u4e13\u7528 Transformer \u6216\u91c7\u7528\u989d\u5916\u7684\u975e Transformer \u6a21\u578b\u6765\u8f85\u52a9\u7684\u65b9\u6cd5\u4e0d\u540c\uff08\u4f8b\u5982 Point-BERT [54] \u4f7f\u7528\u989d\u5916\u7684 DGCNN [44]\uff09\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5b8c\u5168\u57fa\u4e8e\u6807\u51c6 Transformer \u6784\u5efa\u81ea\u52a8\u7f16\u7801\u5668\u7684\u9aa8\u5e72\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u70b9\u4e91\u7684\u6f5c\u5728\u7edf\u4e00\u67b6\u6784\u3002</p> <p>\uff08ii\uff09 \u63a9\u7801token\u7684\u4f4d\u7f6e\u5d4c\u5165\u5bfc\u81f4\u4f4d\u7f6e\u4fe1\u606f\u6cc4\u9732\u3002\u5728\u5c4f\u853d\u7684\u81ea\u52a8\u7f16\u7801\u5668\u4e2d\uff0c\u6bcf\u4e2a\u5c4f\u853d\u7684\u90e8\u5206\u90fd\u7531\u4e00\u4e2a\u5171\u4eab\u52a0\u6743\u7684\u53ef\u5b66\u4e60\u63a9\u7801\u6807\u8bb0\u66ff\u6362\u3002\u6240\u6709\u63a9\u7801token\u90fd\u9700\u8981\u901a\u8fc7\u4f4d\u7f6e\u5d4c\u5165\u5728\u8f93\u5165\u6570\u636e\u4e2d\u63d0\u4f9b\u5176\u4f4d\u7f6e\u4fe1\u606f\u3002\u7136\u540e\u7ecf\u8fc7\u81ea\u52a8\u7f16\u7801\u5668\u5904\u7406\u540e\uff0c\u4f7f\u7528\u6bcf\u4e2a\u63a9\u7801\u6807\u8bb0\u6765\u91cd\u6784\u76f8\u5e94\u7684\u63a9\u7801\u90e8\u5206\u3002\u5bf9\u4e8e\u8bed\u8a00\u548c\u56fe\u50cf\u6765\u8bf4\uff0c\u63d0\u4f9b\u4f4d\u7f6e\u4fe1\u606f\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u5305\u542b\u4f4d\u7f6e\u4fe1\u606f\u3002\u867d\u7136\u70b9\u4e91\u5728\u6570\u636e\u4e2d\u81ea\u7136\u5177\u6709\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4f46\u4f4d\u7f6e\u4fe1\u606f\u6cc4\u9732\u4ee5\u63a9\u76d6token\u4f7f\u91cd\u5efa\u4efb\u52a1\u53d8\u5f97\u4e0d\u90a3\u4e48\u5177\u6709\u6311\u6218\u6027\uff0c\u8fd9\u5bf9\u81ea\u52a8\u7f16\u7801\u5668\u5b66\u4e60\u6f5c\u5728\u7279\u5f81\u662f\u6709\u5bb3\u7684\u3002\u6211\u4eec\u901a\u8fc7\u5c06\u63a9\u7801\u6807\u8bb0\u4ece\u81ea\u52a8\u7f16\u7801\u5668\u7f16\u7801\u5668\u7684\u8f93\u5165\u8f6c\u79fb\u5230\u81ea\u52a8\u7f16\u7801\u5668\u89e3\u7801\u5668\u7684\u8f93\u5165\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002\u8fd9\u5ef6\u8fdf\u4e86\u4f4d\u7f6e\u4fe1\u606f\u7684\u6cc4\u6f0f\uff0c\u5e76\u4f7f\u7f16\u7801\u5668\u80fd\u591f\u4e13\u6ce8\u4e8e\u4ece\u672a\u5c4f\u853d\u7684\u96f6\u4ef6\u4e2d\u5b66\u4e60\u7279\u5f81\u3002</p> <p>\uff08iii\uff09 \u4e0e\u8bed\u8a00\u548c\u56fe\u50cf\u76f8\u6bd4\uff0c\u70b9\u4e91\u4ee5\u4e0d\u540c\u7684\u5bc6\u5ea6\u643a\u5e26\u4fe1\u606f\u3002\u8bed\u8a00\u5305\u542b\u9ad8\u5bc6\u5ea6\u4fe1\u606f\uff0c\u800c\u56fe\u50cf\u5305\u542b\u5927\u91cf\u5197\u4f59\u4fe1\u606f[17]\u3002\u5728\u70b9\u4e91\u4e2d\uff0c\u4fe1\u606f\u5bc6\u5ea6\u5206\u5e03\u76f8\u5bf9\u4e0d\u5747\u5300\u3002\u6784\u6210\u5173\u952e\u5c40\u90e8\u8981\u7d20\u7684\u70b9\uff08\u4f8b\u5982\uff0c\u5c16\u89d2\u548c\u8fb9\u7f18\uff09\u5305\u542b\u7684\u4fe1\u606f\u5bc6\u5ea6\u6bd4\u6784\u6210\u4e0d\u592a\u91cd\u8981\u7684\u5c40\u90e8\u8981\u7d20\uff08\u4f8b\u5982\uff0c\u5e73\u9762\uff09\u7684\u70b9\u9ad8\u5f97\u591a\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u88ab\u5c4f\u853d\uff0c\u5728\u91cd\u5efa\u4efb\u52a1\u4e2d\uff0c\u5305\u542b\u9ad8\u5bc6\u5ea6\u4fe1\u606f\u7684\u70b9\u66f4\u96be\u6062\u590d\u3002\u8fd9\u53ef\u4ee5\u5728\u91cd\u5efa\u793a\u4f8b\u4e2d\u76f4\u63a5\u89c2\u5bdf\u5230\uff0c\u5982\u56fe 2 \u6240\u793a\u3002\u4ee5\u56fe2\u7684\u6700\u540e\u4e00\u884c\u4e3a\u4f8b\uff0cmasked\u7684\u684c\u9762\uff08\u5de6\uff09\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6062\u590d\uff0c\u800cmasked\u6469\u6258\u8f66\u7684\u8f66\u8f6e\uff08\u53f3\uff09\u7684\u91cd\u5efa\u8981\u5dee\u5f97\u591a.</p> <p>\u5c3d\u7ba1\u70b9\u4e91\u5305\u542b\u7684\u4fe1\u606f\u5bc6\u5ea6\u4e0d\u5747\u5300\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u9ad8\u6bd4\u4f8b\uff0860%-80%\uff09\u7684\u968f\u673a\u63a9\u853d\u6548\u679c\u5f88\u597d\uff0c\u8fd9\u4e0e\u56fe\u50cf\u60ca\u4eba\u5730\u76f8\u540c\u3002\u8fd9\u8868\u660e\u70b9\u4e91\u5728\u4fe1\u606f\u5bc6\u5ea6\u65b9\u9762\u7c7b\u4f3c\u4e8e\u56fe\u50cf\u800c\u4e0d\u662f\u8bed\u8a00\u3002\u5728\u5206\u6790\u7684\u9a71\u52a8\u4e0b\uff0c\u6211\u4eec\u901a\u8fc7\u8bbe\u8ba1\u4e00\u79cd\u7b80\u6d01\u9ad8\u6548\u7684\u63a9\u853d\u81ea\u52a8\u7f16\u7801\u5668\u65b9\u6848\uff08Point-MAE\uff09\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u578b\u7684\u70b9\u4e91\u81ea\u76d1\u7763\u5b66\u4e60\u6846\u67b6\u3002\u5982\u56fe 3 \u6240\u793a\uff0c\u6211\u4eec\u7684 Point-MAE \u4e3b\u8981\u7531\u70b9\u4e91\u906e\u853d\u548c\u5d4c\u5165\u6a21\u5757\u4ee5\u53ca\u81ea\u7f16\u7801\u5668\u7ec4\u6210\u3002\u5c06\u8f93\u5165\u70b9\u4e91\u5212\u5206\u4e3a\u4e0d\u89c4\u5219\u7684\u70b9\u6591\u5757\uff0c\u4ee5\u9ad8\u6bd4\u4f8b\u968f\u673a\u5c4f\u853d\uff0c\u4ee5\u51cf\u5c11\u6570\u636e\u5197\u4f59\u3002\u7136\u540e\uff0c\u81ea\u7f16\u7801\u5668\u4ece\u672a\u5c4f\u853d\u7684\u70b9\u9762\u7247\u4e2d\u5b66\u4e60\u9ad8\u7ea7\u6f5c\u5728\u7279\u5f81\uff0c\u65e8\u5728\u91cd\u5efa\u5750\u6807\u7a7a\u95f4\u4e2d\u7684\u5c4f\u853d\u70b9\u9762\u7247\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7684\u81ea\u52a8\u7f16\u7801\u5668\u7684\u4e3b\u5e72\u5b8c\u5168\u7531\u6807\u51c6Transformer\u6a21\u5757\u6784\u5efa\uff0c\u5e76\u91c7\u7528\u975e\u5bf9\u79f0\u7f16\u7801\u5668-\u89e3\u7801\u5668\u7ed3\u6784[17]\u3002\u7f16\u7801\u5668\u4ec5\u5904\u7406\u672a\u5c4f\u853d\u7684\u70b9\u9762\u5757\u3002\u7136\u540e\uff0c\u5c06\u7f16\u7801\u7684\u6807\u8bb0\u548c\u63a9\u7801\u6807\u8bb0\u4f5c\u4e3a\u8f93\u5165\uff0c\u5177\u6709\u7b80\u5355\u9884\u6d4b\u5934\u7684\u8f7b\u91cf\u7ea7\u89e3\u7801\u5668\u91cd\u5efa\u63a9\u7801\u70b9\u8865\u4e01\u3002\u4e0e\u4ece\u7f16\u7801\u5668\u8f93\u5165\u5904\u7406\u63a9\u7801\u4ee4\u724c\u76f8\u6bd4\uff0c\u5c06\u63a9\u7801\u4ee4\u724c\u8f6c\u79fb\u5230\u8f7b\u91cf\u7ea7\u89e3\u7801\u5668\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u8ba1\u7b97\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u907f\u514d\u4e86\u4f4d\u7f6e\u4fe1\u606f\u7684\u65e9\u671f\u6cc4\u9732\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u662f\u6709\u6548\u7684\uff0c\u9884\u8bad\u7ec3\u7684\u6a21\u578b\u5728\u5404\u79cd\u4e0b\u6e38\u4efb\u52a1\u4e0a\u90fd\u5f88\u597d\u5730\u6cdb\u5316\u4e86\u3002\u5728\u5bf9\u8c61\u5206\u7c7b\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u7684Point-MAE\u5728\u771f\u5b9e\u6570\u636e\u96c6ScanObjectNN\u7684\u6700\u96be\u8bbe\u7f6e\u4e0b\u5b9e\u73b0\u4e8685.18%\u7684\u51c6\u786e\u7387\uff0c\u5728\u5e72\u51c0\u7684\u5bf9\u8c61\u6570\u636e\u96c6ModelNet40\u4e0a\u5b9e\u73b0\u4e8694.04%\u7684\u51c6\u786e\u7387\uff0c\u4f18\u4e8e\u6240\u6709\u5176\u4ed6\u81ea\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\u3002\u540c\u65f6\uff0cPoint-MAE\u8d85\u8d8a\u4e86\u6240\u6709\u6765\u81ea\u76d1\u7763\u5b66\u4e60\u7684\u4e13\u7528Transformers\u6a21\u578b\u3002</p>"},{"location":"Blog/PointMAE/analysis.html#pointmae","title":"PointMAE","text":"<p>\u8f93\u5165\u524d\u7684\u5904\u7406\u6b65\u9aa4\uff1a</p> <ol> <li>ShapeNet\u91cc\u7684\u70b9\u4e91\u5148\u7528FPS\uff08Farthest Point Sampling\uff09\u91c7\u68371024\u4e2a\u70b9</li> <li>\u518d\u91c7\u7528FPS\uff0c\u91c7\u6837\u5f97\u523064\u4e2apoint patches\u7684\u4e2d\u5fc3\u70b9</li> <li>\u91c7\u7528KNN\u7b97\u6cd5\uff0c\u5f97\u5230\u6bcf\u4e2a\u4e2d\u5fc3\u70b9\u768432\u4e2a\u90bb\u8fd1\u70b9\uff0c\u6784\u6210point patches</li> <li>\u901a\u8fc764\u4e2apoint patches\u4e2d\u5fc3\u70b9\u901a\u8fc7\u4e00\u4e2aMLP\u5f97\u5230positional embedding</li> <li>random mask 60%\u7684point patch\u4e2d\u5fc3\u70b9</li> <li>\u88abmask\u7684point patch\u7528\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684mask token\u4ee3\u66ff\uff0c\u53e6\u5916\u7684visible point patches\u901a\u8fc7\u4e00\u4e2amini-PointNet\u5f97\u5230\u5176embedding</li> </ol> <p></p> <p>PointMAE\u7684\u5904\u7406\u6b65\u9aa4\uff1a</p> <ol> <li>visible tokens + \u5176\u5bf9\u5e94\u7684positional embedding\uff0c\u8f93\u5165\u8fdbEncoder\uff08\u6ce8\u610f\uff1a\u6bcf\u4e2aEncoder\u7684Transformer Block\u90fd\u8981\u8f93\u5165\u8fd9\u4e2apositional embedding\uff09\uff0c\u5f97\u5230embedded tokens</li> <li>embedded tokens\u548cmask tokens\u8fdb\u884cconcatenation\uff0c\u5e76\u52a0\u4e0a\u5bf9\u5e94\u7684positional embedding\uff0c\u8fdb\u5165\u89e3\u7801\u5668\uff08\u540c\u7406\uff0c\u8fd9\u91ccpositional embedding\u4e5f\u8981\u8f93\u5165\u8fdb\u6bcf\u4e00\u4e2aTransformer Block\uff09</li> <li>\u4ec5mask tokens\u5f97\u5230\u7684embedding\uff0c\u8981\u901a\u8fc7\u4e00\u5c42MLP\uff08prediction Head\uff09\uff0c\u8fdb\u884creconstruction loss\u7684\u8ba1\u7b97</li> </ol> <p>\u6700\u540e\u91cd\u5efa\u7684\u7b26\u5408\u6bd4\u7387\u7528Chamfer Distance \u6765\u8861\u91cf\uff1a</p> <p></p>"},{"location":"Blog/PointMAE/analysis.html#_1","title":"\u4ee3\u7801\u90e8\u5206","text":"<p>\u6838\u5fc3\u662fPoint_MAE.py, \u5b9a\u4e49\u4e86model, \u8fd9\u4e2amodel\u4f1a\u7528\u5728\u914d\u7f6e\u6587\u4ef6yaml\u91cc\u9762\u3002</p> <p>\u4f8b\u5982<code>pretrain.yaml</code></p> <pre><code>optimizer : {\n  type: AdamW, # AdamW\u4f18\u5316\u5668\n  kwargs: {\n  lr : 0.001, # \u5b66\u4e60\u7387\n  weight_decay : 0.05 # \u5b66\u4e60\u7387\u8870\u51cf\n}}\n\nscheduler: {\n  type: CosLR, # \u8c03\u8282\u5668\n  kwargs: {\n    epochs: 300,\n    initial_epochs : 10\n}}\n\ndataset : { # \u4f7f\u7528ShapeNet\u8fdb\u884ctrain val and test \n  train : { _base_: cfgs/dataset_configs/ShapeNet-55.yaml,\n            others: {subset: 'train', npoints: 1024}},\n  val : { _base_: cfgs/dataset_configs/ShapeNet-55.yaml,\n            others: {subset: 'test', npoints: 1024}},\n  test : { _base_: cfgs/dataset_configs/ShapeNet-55.yaml,\n            others: {subset: 'test', npoints: 1024}}}\n\nmodel : {\n  NAME: Point_MAE, # \u4f7f\u7528\u7684\u6a21\u578b\n  group_size: 32,\n  num_group: 64,\n  loss: cdl2, # \u635f\u5931\u51fd\u6570\u7c7b\u578b\n  transformer_config: {\n    mask_ratio: 0.6, # \u63a9\u7801\u6bd4\u4f8b\uff0c\u8bbe\u7f6e\u4e3a0.6\uff0c\u8868\u793a\u5728\u81ea\u76d1\u7763\u5b66\u4e60\u4e2d\u5c06\u63a9\u7801\u638960%\u7684\u8f93\u5165\n    mask_type: 'rand', # \u968f\u673a\u63a9\u7801\n    trans_dim: 384,\n    encoder_dims: 384, # \u7f16\u7801\u5668\u7ef4\u5ea6\uff01\n    depth: 12, # Transformer\u7f16\u7801\u5668\u7684\u6df1\u5ea6\n    drop_path_rate: 0.1, # Dropout\u8def\u5f84\u7387\uff0c\u8bbe\u7f6e\u4e3a0.1\uff0c\u7528\u4e8e\u6b63\u5219\u5316\n    num_heads: 6, # \u6ce8\u610f\u529b\u673a\u5236\u4e2d\u7684\u5934\u6570\uff0c\u8bbe\u7f6e\u4e3a6\n    decoder_depth: 4,\n    decoder_num_heads: 6,\n  },\n  }\nnpoints: 1024\ntotal_bs : 512\nstep_per_update : 1\nmax_epoch : 300\n</code></pre>"},{"location":"Blog/PointMAE/analysis.html#encoder","title":"Encoder","text":"<p><code>Encoder</code>\u7c7b\u901a\u8fc7\u4e24\u4e2a\u987a\u5e8f\u7684\u5377\u79ef\u5c42\uff08<code>self.first_conv</code>\u548c<code>self.second_conv</code>\uff09\u6765\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002</p> <pre><code>    self.first_conv = nn.Sequential(\n            nn.Conv1d(3, 128, 1), # \u5c06\u8f93\u5165\u76843\u7ef4\u7279\u5f81\uff08\u70b9\u4e91\u4e2d\u7684x, y, z\u5750\u6807\uff09\u8f6c\u6362\u6210128\u7ef4\u7684\u7279\u5f81\uff0c\u4f7f\u75281\u7ef4\u5377\u79ef\n            nn.BatchNorm1d(128), # \u6279\u91cf\u5f52\u4e00\u5316\u5c42\uff0c\u7528\u4e8e\u89c4\u8303\u5316\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\n            nn.ReLU(inplace=True), # \u53c2\u6570inplace=True\u610f\u5473\u7740ReLU\u7684\u8ba1\u7b97\u5c06\u5728\u8f93\u5165\u6570\u636e\u7684\u5185\u5b58\u4f4d\u7f6e\u4e0a\u76f4\u63a5\u8fdb\u884c\n            nn.Conv1d(128, 256, 1) # \u5c06128\u7ef4\u7684\u7279\u5f81\u8fdb\u4e00\u6b65\u8f6c\u6362\u6210256\u7ef4\n        )\n    self.second_conv = nn.Sequential(\n            nn.Conv1d(512, 512, 1), # 512 = 256(first_conv\u5f97\u5230) +(concat) 256(maxpooling)\n            nn.BatchNorm1d(512),\n            nn.ReLU(inplace=True),\n            nn.Conv1d(512, self.encoder_channel, 1) # \u5c06512\u7ef4\u7684\u7279\u5f81\u8f6c\u6362\u6210encoder_channel\u7ef4\uff0c\u8fd9\u4e2a\u7ef4\u5ea6\u662f\u6a21\u578b\u914d\u7f6e\u4e2d\u6307\u5b9a\u7684\n        )\n\ndef forward(self, point_groups):\n        # \u524d\u5411\u4f20\u64ad\u51fd\u6570\uff0c\u5904\u7406\u8f93\u5165\u7684\u70b9\u4e91\u6570\u636e\u5e76\u751f\u6210\u7279\u5f81\u8868\u793a\n        '''\n            point_groups : B G N 3\n            \u5176\u4e2dB\u662f\u6279\u6b21\u5927\u5c0f,G\u662f\u6bcf\u4e2a\u6279\u6b21\u4e2d\u7684\u7ec4\u6570,N\u662f\u6bcf\u4e2a\u7ec4\u4e2d\u7684\u70b9\u6570,3\u662f\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\u662f\u4e09\u7ef4\u7684\n            -----------------\n            feature_global : B G C\n        '''\n        bs, g, n , _ = point_groups.shape\n        point_groups = point_groups.reshape(bs * g, n, 3) # \u5c06\u6240\u6709\u7684\u70b9\u4e91\u7ec4\u5c55\u5e73\u4e3a\u4e00\u4e2a\u957f\u5e8f\u5217\n        # encoder\n        feature = self.first_conv(point_groups.transpose(2,1))  # BG 256 n\n        # \u5c06\u7ef4\u5ea6\u4ece(bs * g, n, 3)\u8f6c\u6362\u4e3a(bs * g, 3, n)\uff0c\u8fd9\u662f\u56e0\u4e3ann.Conv1d\u671f\u671b\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662f\u901a\u9053\u6570\n        feature_global = torch.max(feature,dim=2,keepdim=True)[0]  # BG 256 maxpooling\n        # [0]\u5f15\u7d22\u80fd\u591f\u53bb\u6389\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\n        feature = torch.cat([feature_global.expand(-1,-1,n), feature], dim=1)# BG 512 n\n        feature = self.second_conv(feature) # BG 1024 n\n        feature_global = torch.max(feature, dim=2, keepdim=False)[0] # BG 1024\n        return feature_global.reshape(bs, g, self.encoder_channel)\n</code></pre> <p>\u8fc7\u7a0b\u662f\uff1a 3\u7ef4\u2014\u2014128\u7ef4\uff08\u4f7f\u75281\u00d71\u5377\u79ef\uff09\u2014\u2014 \uff08\u5f52\u4e00\u5316\uff09\u2014\u2014\uff08ReLU\uff09\u2014\u2014256\u7ef4\uff08\u4f7f\u75281\u00d71\u5377\u79ef\uff09\u2014\u2014maxpooling\u2014\u2014512\u7ef4\uff08concat\uff09\u2014\u20141024\u7ef4\uff081\u00d71\u5377\u79ef\uff09</p> <p>\u8fd9\u6837\u5c31\u662f\u5b9e\u73b0\u4e86\u5c06\u70b9\u4e91\u6570\u636e\u901a\u8fc7\u4e00\u4e2a\u5d4c\u5165\u6a21\u5757\u6765\u83b7\u53d6\u7279\u5f81\u8868\u793a</p>"},{"location":"Blog/PointMAE/analysis.html#fpsknn","title":"FPS+KNN","text":"<pre><code>batch_size, num_points, _ = xyz.shape\n# fps the centers out\ncenter = misc.fps(xyz, self.num_group) # B G 3  G\u662fself.num_group\n# knn to get the neighborhood\n_, idx = self.knn(xyz, center) # B G M \u53ea\u5173\u5fc3\u7d22\u5f15\uff0c\u4e0d\u5173\u5fc3\u5b9e\u9645\u7684\u8ddd\u79bb\n</code></pre> <p>\u9996\u5148\u4f7f\u7528FPS\u627e\u5230\u4e2d\u5fc3\u70b9\uff0c\u7136\u540e\u4f7f\u7528KNN\u627e\u5230\u90bb\u57df\u70b9.</p>"},{"location":"Blog/PointMAE/analysis.html#transformer","title":"Transformer","text":"<p>\u6bcf\u4e2aTransformer\u5757\u5305\u542b\u81ea\u6ce8\u610f\u529b\u673a\u5236\u548c\u591a\u5c42\u611f\u77e5\u673a\u3002<code>Block</code>\u7c7b\u5c06<code>Attention</code>\u548c<code>Mlp</code>\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u6dfb\u52a0\u4e86DropPath\u6b63\u5219\u5316\u3002</p> <p><code>Mlp</code>\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6807\u51c6\u7684MLP\uff0c\u5305\u62ec\u4e24\u4e2a\u7ebf\u6027\u5c42\u548c\u4e00\u4e2a\u6fc0\u6d3b\u51fd\u6570\uff1b\u800c<code>Attention</code>\u7c7b\u5b9e\u73b0\u4e86\u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\uff0c\u5305\u62ec\u67e5\u8be2\uff08Q\uff09\u3001\u952e\uff08K\uff09\u3001\u503c\uff08V\uff09\u7684\u751f\u6210\u548c\u6ce8\u610f\u529b\u5206\u6570\u7684\u8ba1\u7b97\u3002</p> <p>Encoder\u5b9e\u73b0\u4e86embedding, \u9012\u4ea4\u7ed9\u4e86transformer\u7684encoder\u3002\u8054\u60f3\u81ea\u5b66\u7684transformer\u3002</p> <p>\u53e6\u5916\uff0cPoint_MAE.py\u91cc\u9762\u4e5f\u5b9a\u4e49\u4e86TransformerEncoder and Decoder</p>"},{"location":"Blog/PointMAE/analysis.html#point_mae","title":"Point_MAE","text":"<p><code>Point_MAE</code>\u662f\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u81ea\u76d1\u7763\u5b66\u4e60\u6a21\u578b\uff0c\u7ed3\u5408\u4e86<code>MaskTransformer</code>\u3001<code>Group</code>\u3001<code>TransformerDecoder</code>\u548c\u635f\u5931\u51fd\u6570\u6765\u5b9e\u73b0\u81ea\u76d1\u7763\u5b66\u4e60\u3002</p> <p><code>@MODELS.register_module()</code>\u8868\u793a\u6b63\u5728\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a <code>MODELS</code> \u7684\u6ce8\u518c\u8868\u6765\u7ba1\u7406\u6a21\u578b\u7c7b\u3002\u5f53\u5b9a\u4e49\u4e00\u4e2a\u6a21\u578b\u7c7b\u5e76\u4f7f\u7528 <code>@MODELS.register_module()</code> \u88c5\u9970\u5b83\u65f6\uff0c\u8fd9\u4e2a\u6a21\u578b\u7c7b\u5c31\u4f1a\u88ab\u6ce8\u518c\u5230 <code>MODELS</code> \u4e2d\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u901a\u8fc7\u540d\u79f0\u6765\u68c0\u7d22\u548c\u4f7f\u7528\u5b83\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7 <code>MODELS.get('Point_MAE')</code> \u6765\u83b7\u53d6\u8fd9\u4e2a\u6a21\u578b\u7c7b\u7684\u5b9e\u4f8b\u3002</p>"},{"location":"Blog/PointMAE/analysis.html#pointtransformer","title":"PointTransformer\u6a21\u578b\uff08\u5fae\u8c03\u6a21\u578b\uff09","text":"<p><code>PointTransformer</code>\u7c7b\u4f7f\u7528\u4e86\u4e0e<code>Point_MAE</code>\u7c7b\u4f3c\u7684\u7ed3\u6784\uff0c\u4f46\u4e13\u6ce8\u4e8e\u5206\u7c7b\u4efb\u52a1\uff0c\u5e76\u5305\u542b\u4e86\u4ece\u9884\u8bad\u7ec3\u6a21\u578b\u52a0\u8f7d\u6743\u91cd\u7684\u903b\u8f91\u3002</p>"},{"location":"Blog/PointMAE/analysis.html#loss-function","title":"Loss Function","text":"<p>\u5728<code>Point_MAE</code>\u7c7b\u7684<code>__init__</code>\u65b9\u6cd5\u4e2d\uff0c\u901a\u8fc7<code>build_loss_func</code>\u51fd\u6570\u6784\u5efa\u4e86\u635f\u5931\u51fd\u6570\u3002</p> <pre><code>def build_loss_func(self, loss_type):\n    if loss_type == \"cdl1\":\n        self.loss_func = ChamferDistanceL1().cuda()\n    elif loss_type =='cdl2':\n        self.loss_func = ChamferDistanceL2().cuda()\n    else:\n        raise NotImplementedError\n        # self.loss_func = emd().cuda()\n</code></pre> <p>\u6700\u540e\u5927\u90e8\u5206\u7684\u6ce8\u91ca\u8fc7\u7684\u4ee3\u7801\u653e\u5728\u4e86code\u6587\u4ef6\u91cc\u9762\uff08\u91cd\u8981\u7684\u6211\u90fd\u5c1d\u8bd5\u53bb\u7406\u89e3\u4ee3\u7801\u662f\u5728\u5e72\u4ec0\u4e48\u4e86\uff09</p>"},{"location":"Blog/PointMAE/analysis.html#point_maepy","title":"\u8be6\u7ec6\u8bfbPoint_MAE.py","text":""},{"location":"Blog/PointMAE/analysis.html#class-group","title":"class Group","text":"<p>\u8fd9\u4e00\u90e8\u5206\u65e8\u5728\u7ed9\u70b9\u5206\u7ec4, \u5148FPS\u9009\u4e2d\u5fc3\u70b9, \u7136\u540e\u6bcf\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u6839\u636eKNN\u53bb\u9009\u76f8\u8fd1\u7684\u70b9.</p> <pre><code>class Group(nn.Module):  # FPS + KNN \u5982\u4f55\u8fdb\u884c\u5206\u7ec4\n    def __init__(self, num_group, group_size):\n        super().__init__()\n        self.num_group = num_group # \u5b58\u50a8\u8981\u91c7\u6837\u7684\u4e2d\u5fc3\u70b9\u7684\u6570\u91cf\uff0c\u5373\u7ec4\u6570\n        self.group_size = group_size # \u6bcf\u4e2a\u7ec4\u5185\u7684\u70b9\u6570\n        self.knn = KNN(k=self.group_size, transpose_mode=True) # \u521b\u5efa\u4e00\u4e2aKNN\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7528\u4e8e\u6267\u884ck\u6700\u8fd1\u90bb\u641c\u7d22\n</code></pre> <p>\u521d\u59cb\u5316\u4e2d, \u89c4\u5b9a\u4e86\u8981\u5206\u591a\u5c11\u7ec4, \u6bcf\u4e00\u4e2a\u7ec4\u91cc\u9762\u591a\u5c11\u4e2a\u70b9(\u8fd9\u91cc\u662f32\u7ec4, \u6bcf\u7ec464\u4e2a\u70b9), \u5e76\u4e14\u521d\u59cb\u5316\u4e86\u4e00\u4e2aKNN\u5b9e\u4f8b, \u7528\u4e8e\u9009\u70b9</p> <pre><code>    def forward(self, xyz):\n        '''\n            input: B N 3\n            \u8f93\u5165xyz\u7684\u7ef4\u5ea6\u662fB N 3,\u5176\u4e2dB\u662f\u6279\u6b21\u5927\u5c0f,N\u662f\u70b9\u4e91\u4e2d\u7684\u70b9\u6570,3\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u4e09\u7ef4\u5750\u6807\n            ---------------------------\n            output: B G M 3\n            center : B G 3\n        '''\n        batch_size, num_points, _ = xyz.shape\n        # fps the centers out\n        center = misc.fps(xyz, self.num_group) # B G 3  G\u662fself.num_group\n        # center\u5c31\u662f\u9009\u4e2d\u7684num_group\u4e2a\u4e2d\u5fc3\u70b9 \n        # knn to get the neighborhood\n        _, idx = self.knn(xyz, center) # B G M \u53ea\u5173\u5fc3\u7d22\u5f15\uff0c\u4e0d\u5173\u5fc3\u5b9e\u9645\u7684\u8ddd\u79bb\n        # idx\u662f   tensor.Size([batch_size, num_group, group_size])\n        assert idx.size(1) == self.num_group\n        assert idx.size(2) == self.group_size\n        idx_base = torch.arange(0, batch_size, device=xyz.device).view(-1, 1, 1) * num_points\n        '''\n        KNN\u641c\u7d22\u8fd4\u56de\u7684\u7d22\u5f15\u662f\u76f8\u5bf9\u4e8e\u6bcf\u4e2a\u4e2d\u5fc3\u70b9\u7684\u5c40\u90e8\u7d22\u5f15.\n        torch.arange(0, batch_size, device=xyz.device):\u521b\u5efa\u4e00\u4e2a\u4ece0\u5230batch_size(\u4e0d\u5305\u62ecbatch_size)\u7684\u6574\u6570\u5e8f\u5217\u3002\n        batch_size\u662f\u8f93\u5165\u70b9\u4e91\u6570\u636e\u7684\u6279\u6b21\u5927\u5c0f\u3002device=xyz.device\u786e\u4fdd\u8fd9\u4e2a\u5e8f\u5217\u5728\u4e0e\u70b9\u4e91\u6570\u636e\u76f8\u540c\u7684\u8bbe\u5907\u4e0a\n        view(-1, 1, 1)\uff1a\u5c06\u4e0a\u8ff0\u521b\u5efa\u7684\u4e00\u7ef4\u6574\u6570\u5e8f\u5217\u91cd\u5851\u4e3a\u4e00\u4e2a\u4e09\u7ef4\u5f20\u91cf\uff0c\u5176\u5f62\u72b6\u4e3a(batch_size, 1, 1)\u3002\n        \u8fd9\u91cc\u7684-1\u662f\u8ba9PyTorch\u81ea\u52a8\u8ba1\u7b97\u8be5\u7ef4\u5ea6\u7684\u5927\u5c0f,\u4ee5\u4fbf\u4fdd\u6301\u5143\u7d20\u603b\u6570\u4e0d\u53d8\u3002\n        * num_points:\u5c06\u6bcf\u4e2a\u5143\u7d20\u5728\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u4e0a\u4e58\u4ee5num_points(\u6bcf\u4e00\u6279\u6b21\u70b9\u7684\u6570\u91cf)\n        \u6700\u7ec8,idx_base\u662f\u4e00\u4e2a\u5f20\u91cf,\u5176\u4f5c\u7528\u662f\u4e3a\u6bcf\u4e2a\u6279\u6b21\u4e2d\u7684\u6bcf\u4e2a\u70b9\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u7684\u504f\u79fb\u91cf\u7d22\u5f15\u3002\n        \u8fd9\u4e2a\u504f\u79fb\u91cf\u7d22\u5f15\u968f\u540e\u7528\u4e8e\u5c06\u5c40\u90e8\u90bb\u57df\u7d22\u5f15(idx)\u8f6c\u6362\u4e3a\u539f\u59cb\u70b9\u4e91\u4e2d\u7684\u5168\u5c40\u7d22\u5f15\u3002\n        \u539f\u6765idx\u91cc\u9762\u5168\u90fd\u662f\u76f8\u5bf9\u4e8e\u4e00\u4e2abatch\u4e0b\u7684\u5f15\u7d22,\u4ece0\u5230num_points-1;xyz\u91cc\u9762\u5f15\u7d22\u662f\u5168\u5c40\u7684\n        '''\n        idx = idx + idx_base # \u5f97\u5230\u70b9\u4e91\u4e2d\u7684\u5168\u5c40\u7d22\u5f15\n        idx = idx.view(-1) #  \u5c06 idx \u5f20\u91cf\u91cd\u5851\u4e3a\u4e00\u4e2a\u4e00\u7ef4\u5f20\u91cf \n        '''\n        \u4e3a\u4ec0\u4e48\u9700\u8981\u5c06\u7d22\u5f15\u5c55\u5e73\u4e3a\u4e00\u7ef4\uff1f\u5728\u5904\u7406\u70b9\u4e91\u6570\u636e\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u6839\u636e\u8fd9\u4e9b\u7d22\u5f15\u4ece\u539f\u59cb\u70b9\u4e91\u4e2d\u63d0\u53d6\u7279\u5b9a\u7684\u70b9\u3002\n        \u901a\u8fc7\u5c06\u7d22\u5f15\u5c55\u5e73\u4e3a\u4e00\u7ef4\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u4f7f\u7528\u8fd9\u4e9b\u7d22\u5f15\u6765\u7d22\u5f15\u539f\u59cb\u70b9\u4e91\u5f20\u91cf\n        '''\n        neighborhood = xyz.view(batch_size * num_points, -1)[idx, :]\n        '''\n        .view()\u6539\u53d8\u5f20\u91cf\u7684\u5f62\u72b6\u800c\u4e0d\u6539\u53d8\u5176\u6570\u636e\u7c7b\u578b\n        [idx, :]::\u8868\u793a\u9009\u53d6\u6bcf\u4e2a\u7d22\u5f15\u884c\u4e2d\u7684\u6240\u6709\u5217\uff08\u5373\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u4e09\u7ef4\u5750\u6807\uff09\n        neighborhood\u5f20\u91cf\u5305\u542b\u4e86\u6839\u636eidx\u7d22\u5f15\u4ecexyz\u4e2d\u63d0\u53d6\u7684\u90bb\u57df\u70b9\u3002\u5176\u5f62\u72b6\u662f(B * G * M, 3)\uff0c\u5176\u4e2d\u6bcf\u4e2a\u70b9\u7684\u4e09\u7ef4\u5750\u6807\u662f\u8fde\u7eed\u6392\u5217\u7684\u3002\n        '''\n        neighborhood = neighborhood.view(batch_size, self.num_group, self.group_size, 3).contiguous()\n        # normalize\n        neighborhood = neighborhood - center.unsqueeze(2) # \u5c06\u90bb\u57df\u70b9\u76f8\u5bf9\u4e8e\u4e2d\u5fc3\u70b9\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u5373\u4ece\u6bcf\u4e2a\u90bb\u57df\u70b9\u4e2d\u51cf\u53bb\u5bf9\u5e94\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\n        return neighborhood, center\n\n</code></pre> <p>\u9996\u5148<code>center = misc.fps(xyz, self.num_group) # B G 3</code>\u5f88\u8f7b\u677e\u5730\u83b7\u53d6\u4e86\u4e2d\u5fc3\u70b9\u7684\u4fe1\u606f, \u7136\u540e\u914d\u4e0aKNN, \u83b7\u5f97\u4e86\u4e00\u4e2aidx tensor, \u5b83\u7684\u5c3a\u5bf8\u662ftensor.Size([batch_size, num_group, group_size]), \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u91cc\u9762\u5305\u542b\u7684\u6570\u636e\u5168\u662f\u5f15\u7d22. </p> <p>\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898: KNN\u641c\u7d22\u8fd4\u56de\u7684\u7d22\u5f15\u662f\u76f8\u5bf9\u4e8e\u6bcf\u4e2a\u4e2d\u5fc3\u70b9\u7684\u5c40\u90e8\u7d22\u5f15. \u4f46\u662f\u76f4\u89c9\u4e0a, \u6211\u60f3\u8981\u7edd\u5bf9\u5f15\u7d22, \u90a3\u4e48\u5c31\u9700\u8981\u628a\u70b9\u7684\u5c40\u90e8\u5f15\u7d22\u8f6c\u5316\u4e3a\u7edd\u5bf9\u5f15\u7d22. \u8fd9\u4e2a\u5c40\u90e8\u5f15\u7d22\u662f\u76f8\u5bf9\u4e8e\u8c01\u662f\u5c40\u90e8\u5f15\u7d22? \u662f\u76f8\u5bf9\u4e8ebatch! \u90a3\u4e48\u5c31\u76f4\u63a5\u7ed9\u6bcf\u4e2a\u6570\u636e\u52a0\u4e0a\u6240\u5728batch * N\u5c31\u53ef\u4ee5\u6784\u5efa\u5168\u5c40\u5f15\u7d22\u4e86! <code>idx_base = torch.arange(0, batch_size, device=xyz.device).view(-1, 1, 1) * num_points</code>\u5c31\u662f\u5728\u521b\u9020\"\u52a0\u4e0a\u7684\u6570\u5b57\", \u6700\u540eidx\u52a0\u5b83\u5c31\u662f\u5168\u5c40\u5f15\u7d22\u4e86.</p> <p>\u7136\u540eidx\u91cc\u9762\u7684\u6240\u6709\u5f15\u7d22\u5c55\u4e3a1\u7ef4, \u6765\u53bb\u4ecexyz\u4e2d\u63d0\u53d6\u70b9\u653e\u8fdbneighborhood, \u5b83reshape\u540e\u518d\u8fde\u7eed\u50a8\u5b58\u4e00\u4e0b(\u56e0\u4e3a\u539f\u6765\u662f\u53d6\u51fa\u7684\u5207\u7247).\u6700\u540e, \u76f8\u5bf9\u4e8e\u4e2d\u5fc3\u70b9\u5f52\u4e00\u5316, \u5373\u4ece\u6bcf\u4e2a\u90bb\u57df\u70b9\u4e2d\u51cf\u53bb\u5bf9\u5e94\u7684\u4e2d\u5fc3\u70b9\u5750\u6807, \u5206\u7ec4\u5c31\u5206\u5b8c\u4e86, \u6ce8\u610f\u8fd4\u56de\u7684\u5c3a\u5ea6: <code>output: B G M 3</code></p>"},{"location":"Blog/PointMAE/analysis.html#class-encoder","title":"class Encoder","text":"<p>\u5206\u597d\u7ec4\u4e86\u4e4b\u540e, \u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u5d4c\u5165\u8fdb\u6f5c\u7a7a\u95f4\u4e86. </p> <pre><code>class Encoder(nn.Module):   ## Embedding module\n    def __init__(self, encoder_channel):\n        super().__init__()\n        self.encoder_channel = encoder_channel\n        self.first_conv = nn.Sequential(\n            nn.Conv1d(3, 128, 1), # \u5c06\u8f93\u5165\u76843\u7ef4\u7279\u5f81\uff08\u70b9\u4e91\u4e2d\u7684x, y, z\u5750\u6807\uff09\u8f6c\u6362\u6210128\u7ef4\u7684\u7279\u5f81\uff0c\u4f7f\u75281\u7ef4\u5377\u79ef\n            nn.BatchNorm1d(128), # \u6279\u91cf\u5f52\u4e00\u5316\u5c42\uff0c\u7528\u4e8e\u89c4\u8303\u5316\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\n            nn.ReLU(inplace=True), # \u53c2\u6570inplace=True\u610f\u5473\u7740ReLU\u7684\u8ba1\u7b97\u5c06\u5728\u8f93\u5165\u6570\u636e\u7684\u5185\u5b58\u4f4d\u7f6e\u4e0a\u76f4\u63a5\u8fdb\u884c\n            nn.Conv1d(128, 256, 1) # \u5c06128\u7ef4\u7684\u7279\u5f81\u8fdb\u4e00\u6b65\u8f6c\u6362\u6210256\u7ef4\n        )\n        self.second_conv = nn.Sequential(\n            nn.Conv1d(512, 512, 1), # 512 = 256(first_conv\u5f97\u5230) +(concat) 256(maxpooling)\n            nn.BatchNorm1d(512),\n            nn.ReLU(inplace=True),\n            nn.Conv1d(512, self.encoder_channel, 1) # \u5c06512\u7ef4\u7684\u7279\u5f81\u8f6c\u6362\u6210encoder_channel\u7ef4\uff0c\u8fd9\u4e2a\u7ef4\u5ea6\u662f\u6a21\u578b\u914d\u7f6e\u4e2d\u6307\u5b9a\u7684\n        )\n        '''\n        nn.Conv1d(in_channels, out_channels, kernel_size):\n        \u8f93\u5165\u6570\u636e\u7684\u901a\u9053\u6570;\u8f93\u51fa\u6570\u636e\u7684\u901a\u9053\u6570;\u5377\u79ef\u6838\uff08\u6216\u6ee4\u6ce2\u5668\uff09\u7684\u5927\u5c0f\n        '''\n</code></pre> <p>\u5728\u521d\u59cb\u5316\u4e2d ,encoder_channel\u662f\u5d4c\u5165\u7684\u6f5c\u7a7a\u95f4\u7684\u7ef4\u5ea6, \u5176\u5b9e\u6700\u540e\u5bf9\u5e94\u7684\u662fyaml\u6587\u4ef6\u4e2d\u7684encoder_dim; \u7136\u540e\u5b9a\u4e49\u4e86\u4e24\u4e2a\u5377\u79ef\u5c42, \u8bb2\u8ff0\u4e86\u4e00\u4e2a\u4e09\u7ef4\u7684\u6570\u636e\u662f\u5982\u4f55\u5d4c\u5165\u5230384\u7ef4\u7684\u6f5c\u7a7a\u95f4\u7684. \u5177\u4f53\u7684\u5b9e\u73b0\u89c1\u4e0b\u9762\u7684forward\u65b9\u6cd5:</p> <pre><code>def forward(self, point_groups):\n        # \u524d\u5411\u4f20\u64ad\u51fd\u6570\uff0c\u5904\u7406\u8f93\u5165\u7684\u70b9\u4e91\u6570\u636e\u5e76\u751f\u6210\u7279\u5f81\u8868\u793a\n        '''\n            point_groups : B G N 3\n            \u5176\u4e2dB\u662f\u6279\u6b21\u5927\u5c0f,G\u662f\u6bcf\u4e2a\u6279\u6b21\u4e2d\u7684\u7ec4\u6570,N\u662f\u6bcf\u4e2a\u7ec4\u4e2d\u7684\u70b9\u6570,3\u662f\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\u662f\u4e09\u7ef4\u7684\n            \u4e3a\u4ec0\u4e48\u6709\"\u7ec4\"?\u4e0b\u9762\u7684class Group\u5c31\u662f\u5728\u5206\u7ec4!\n            -----------------\n            feature_global : B G C\n        '''\n        bs, g, n , _ = point_groups.shape # batch_size, \u4e00\u4e2abatch\u91cc\u9762\u70b9\u7ec4\u6570,\u4e00\u7ec4\u91cc\u9762\u70b9\u7684\u6570\u91cf,\u4e00\u4e2a\u70b9\u7684\u4e09\u7ef4\u4fe1\u606f\n        point_groups = point_groups.reshape(bs * g, n, 3) \n        # encoder\n        feature = self.first_conv(point_groups.transpose(2,1))  # BG 256 n\n        # \u5c06\u7ef4\u5ea6\u4ece(bs * g, n, 3)\u8f6c\u6362\u4e3a(bs * g, 3, n)\uff0c\u8fd9\u662f\u56e0\u4e3ann.Conv1d\u671f\u671b\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662f\u901a\u9053\u6570;\u5339\u914d\u8f93\u5165\u683c\u5f0f\n        # nn.Conv1d \u671f\u671b\u8f93\u5165\u5f20\u91cf\u9075\u5faa\u4e00\u5b9a\u7684\u683c\u5f0f\uff0c\u8fd9\u4e2a\u683c\u5f0f\u901a\u5e38\u8868\u793a\u4e3a (batch_size, channels, length)\n        feature_global = torch.max(feature,dim=2,keepdim=True)[0]  # BG 256 maxpooling\n        # torch.max\u8fd4\u56de\u7684\u662f\u5143\u7ec4,\u53ea\u53d6\u7b2c\u4e00\u4e2a(\u8981\u503c\u800c\u4e0d\u662f\u5f15\u7d22);torch.Size([batch_size, channels, 1])\n        # \"1\"\u7684\u5b58\u5728\u662f\u56e0\u4e3akeepdim = True\n        feature = torch.cat([feature_global.expand(-1,-1,n), feature], dim=1)# BG 512 n\n        # feature_global.expand(-1, -1, n) \u5c06 feature_global \u5f20\u91cf\u6cbf length \u7ef4\u5ea6\u6269\u5c55 n \u6b21\uff0c\u800c\u4e0d\u6539\u53d8\u5176\u4ed6\u7ef4\u5ea6\u3002-1 \u8868\u793a\u8be5\u7ef4\u5ea6\u4fdd\u6301\u539f\u6709\u5927\u5c0f\u3002\n        # dim = 1\u4ee3\u8868\u6cbf\u7740\u62fc\u63a5\u7684\u7ef4\u5ea6\n        feature = self.second_conv(feature) # BG encoder_channel n\n        feature_global = torch.max(feature, dim=2, keepdim=False)[0]\n        return feature_global.reshape(bs, g, self.encoder_channel)\n</code></pre> <p>\u9996\u5148\u8981\u660e\u786e\u8f93\u5165\u8fdb\u6765\u7684\u6570\u636e\"\u5c3a\u5bf8\": \u5f20\u91cf\u91cc\u9762\u7b2c\u4e00\u4e2a\u4e00\u5b9a\u662fbatch_size, \u4e00\u4e2abatch\u91cc\u9762\u6709\u5f88\u591agroup, \u4e00\u4e2agroup\u91cc\u9762\u5f88\u591a\u70b9,\u6700\u540e\u4e00\u4e2a\u70b9\u6709\u4e09\u4e2a\u6570\u636e(\u4e09\u7ef4\u5750\u6807)(\u56e0\u4e3a\u662f\u5df2\u7ecf\u5206\u5b8c\u7ec4\u4e86). \u56e0\u6b64\u5c3a\u5bf8\u5982\u6ce8\u91ca\u6240\u8bf4\u662f: B G N 3. \u8f93\u5165\u4e4b\u540e\u8981\u4e3a\u4e86\u80fd\u591f\u653e\u5165nn.Conv1d, \u9700\u8981\u8fdb\u884c\u5c3a\u5bf8\u4e0a\u7684\u6539\u53d8. \u8f93\u5165\u7684\u4e00\u5b9a\u662f\u4ee5\u4e00\u5806\u70b9\u7684\u5f62\u5f0f\u8f93\u5165\u7684, \u56e0\u6b64B G \u8981\u5408\u5e76, \u800c\u4e14\u901a\u9053\u65703\u5e94\u8be5\u653e\u5728\u7b2c\u4e8c\u4f4d(transpose). \u7136\u540e\u5c31\u8fdb\u5165\u4e86\u7b2c\u4e00\u5c42\u5377\u79ef,\u7136\u540e\u8fdb\u884cmax pooling. \u6ce8\u610f, torch.max()\u8fd4\u56de\u7684\u662f\u5143\u7ec4, \u7b2c\u4e00\u4e2a\u5143\u7ec4\u5143\u7d20\u5f20\u91cf\u5305\u542b\u7684\u662f\u5404\u81ea\u9009\u4e2d\u7684\u503c, \u800c\u7b2c\u4e8c\u4e2a\u5143\u7ec4\u5143\u7d20\u5f20\u91cf\u5305\u542b\u7684\u662f\u5404\u81ea\u9009\u4e2d\u7684\u5728\u539f\u5f20\u91cf\u91cc\u9762\u7684\u5f15\u7d22. </p> <p><code>\u6ce8\u610fkeepdim=True</code>\u7684\u4f7f\u7528, \u56e0\u4e3a\u9009\u51fa\u6765\u540e, \u4e00\u4e2a\u7279\u5f81\u53ea\u5e26\u4e0a\u4e86\u4e00\u4e2a\u6700\u5927\u503c, \u5982\u679c\u4e0d\u52a0\u4e0a\u8fd9\u53e5\u8bdd, \u8fd9\u4e2a\u7ef4\u5ea6\u7684\"1\"\u5c31\u4f1a\u88ab\u7701\u7565\u6389, \u5c3a\u5bf8\u5c31\u5bf9\u4e0d\u4e0a\u4e86(torch.Size([batch_size, channels, 1])). \u7136\u540e\u5c31\u662fconcatenation, \u6ce8\u610f\u5bf9\u5e94\u7ef4\u5ea6\u7684\u5ef6\u957f. \u8fd9\u4e00\u6c60\u5316\u7136\u540e\u548c\u539f\u7279\u5f81\u62fc\u63a5\u7684\u601d\u60f3, \u5e94\u8be5\u662f\u6765\u6e90\u4e8ePointNet. </p> <p>\u8fd9\u91cc\u7684\u6c60\u5316\u5e94\u8be5\u662fn\u4e2a256\u7ef4\u7684\u7279\u5f81\u91cc\u9762, \u6bcf\u4e00\u4e2a\u7ef4\u5ea6\u90fd\u4f1a\u5728n\u4e2a\u7279\u5f81\u91cc\u9762\u627e\u6700\u5927, \u6700\u540e\u5f97\u5230\u4e00\u4e2a256\u7ef4\u7684max pooling feature. \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e2afeature\u8981repeat n\u904d\u7136\u540e\u53bb\u62fc\u63a5\u4e86</p> <p>\u6700\u540e\u7ecf\u8fc7\u7b2c\u4e8c\u5c42\u5377\u79ef\u5c42, \u7136\u540e\u6700\u5927\u6c60\u5316(\u8fd9\u91cc<code>keepdim = False</code>), \u5f97\u5230\u4e86\u4e00\u4e2a384\u7ef4\u7684\u7279\u5f81, \u6709\u8fd9\u4e2a\u7279\u5f81\u5c31\u8ba4\u4e3a\u662fembedding\u5b8c\u6210\u4e86.reshape()\u56de\u539f\u6765\u7684\u7ed3\u6784, \u53ea\u4e0d\u8fc7\u662f\u7ef4\u5ea6\u4e0d\u518d\u662f3, \u8fd9\u4e2aEncoder\u5c31\u5b8c\u6210\u4e86.</p>"},{"location":"Blog/PointMAE/analysis.html#transformer_1","title":"Transformer\u7ec4\u4ef6","text":""},{"location":"Blog/PointMAE/analysis.html#class-mlpmulti-layer-processing","title":"\u7ec4\u4ef6\u4e00: class Mlp(Multi-Layer Processing)","text":"<pre><code>class Mlp(nn.Module):\n    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):\n        # GELU\uff08Gaussian Error Linear Unit\uff09\n        super().__init__()\n        out_features = out_features or in_features\n        hidden_features = hidden_features or in_features\n        # \u5982\u679c\u662fNone,\u5c31\u7528\u540e\u9762\u7684\u503c\n        self.fc1 = nn.Linear(in_features, hidden_features)\n        self.act = act_layer() # \u6fc0\u6d3b\u5c42\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3ann.GELU\uff08\u9ad8\u65af\u8bef\u5dee\u7ebf\u6027\u5355\u5143\uff09\n        self.fc2 = nn.Linear(hidden_features, out_features)\n        self.drop = nn.Dropout(drop) # \u9632\u6b62\u8fc7\u62df\u5408\n\n    def forward(self, x):\n        '''\n        \u5728forward\u65b9\u6cd5\u4e2d,\u8f93\u5165x\u9996\u5148\u901a\u8fc7\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42fc1,\u7136\u540e\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570act,\u63a5\u7740\u901a\u8fc7Dropout\u5c42drop\u8fdb\u884c\u6b63\u5219\u5316\u3002\n        \u8fd9\u4e00\u8fc7\u7a0b\u91cd\u590d\u4e00\u6b21,\u9996\u5148\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42fc2,\u518d\u6b21\u5e94\u7528\u6fc0\u6d3b\u51fd\u6570\u548cDropout\u3002\u6700\u7ec8,\u5904\u7406\u540e\u7684\u5f20\u91cfx\u88ab\u8fd4\u56de\n        \u591a\u5c42\u611f\u77e5\u673a\u662fTransformer\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206,\u5b83\u5728\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e4b\u540e\u5e94\u7528,\u7528\u4e8e\u8fdb\u4e00\u6b65\u5904\u7406\u548c\u63d0\u53d6\u7279\u5f81\n        '''\n        x = self.fc1(x)\n        x = self.act(x)\n        x = self.drop(x)\n        x = self.fc2(x)\n        x = self.drop(x)\n        return x\n</code></pre> <p>\u5b83\u7684\u6784\u5efa\u5f88\u5bb9\u6613\u770b\u61c2, \u591a\u5c42\u611f\u77e5\u673a\u662fTransformer\u6a21\u578b\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206,\u5b83\u5728\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e4b\u540e\u5e94\u7528,\u7528\u4e8e\u8fdb\u4e00\u6b65\u5904\u7406\u548c\u63d0\u53d6\u7279\u5f81.</p>"},{"location":"Blog/PointMAE/analysis.html#class-attention","title":"\u7ec4\u4ef6\u4e8c: class Attention(\u81ea\u6ce8\u610f\u529b)","text":"<pre><code>class Attention(nn.Module):\n    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):\n        super().__init__()\n        self.num_heads = num_heads\n        head_dim = dim // num_heads\n        self.scale = qk_scale or head_dim ** -0.5\n        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)\n        self.attn_drop = nn.Dropout(attn_drop)\n        self.proj = nn.Linear(dim, dim)\n        self.proj_drop = nn.Dropout(proj_drop)\n'''\n    self.num_heads:\u8bbe\u7f6e\u6ce8\u610f\u529b\u673a\u5236\u7684\u5934\u6570\u3002\n    head_dim:\u8ba1\u7b97\u6bcf\u4e2a\u5934\u7684\u7279\u5f81\u7ef4\u5ea6,\u8fd9\u662f\u901a\u8fc7\u5c06\u8f93\u5165\u7ef4\u5ea6dim\u9664\u4ee5\u5934\u6570num_heads\u5f97\u5230\u7684\u3002\n    self.scale:\u8bbe\u7f6e\u6ce8\u610f\u529b\u5206\u6570\u7684\u7f29\u653e\u56e0\u5b50,\u901a\u5e38\u4f7f\u7528head_dim\u7684\u8d1f0.5\u6b21\u65b9\uff0c\u8fd9\u662f\u4e3a\u4e86\u5728\u8ba1\u7b97\u6ce8\u610f\u529b\u5206\u6570\u65f6\u8fdb\u884c\u7f29\u653e\uff0c\u4ee5\u4fdd\u6301\u68af\u5ea6\u7684\u7a33\u5b9a\u6027\u3002\n    self.qkv:\u5b9a\u4e49\u4e00\u4e2a\u7ebf\u6027\u5c42,\u7528\u4e8e\u751f\u6210\u67e5\u8be2(Query, Q)\u3001\u952e(Key, K)\u548c\u503c(Value, V)\u7684\u8868\u793a\u3002\u5b83\u5c06\u8f93\u5165\u7279\u5f81\u7ef4\u5ea6\u6269\u5c55\u4e3adim * 3,\u56e0\u4e3a\u6bcf\u4e2a\u8f93\u5165\u9700\u8981\u751f\u6210Q\u3001K\u3001V\u4e09\u4e2a\u8f93\u51fa\u3002\n    self.attn_drop:\u5b9a\u4e49\u4e00\u4e2aDropout\u5c42,\u7528\u4e8e\u5728\u6ce8\u610f\u529b\u5206\u6570\u4e0a\u5e94\u7528Dropout,\u4ee5\u8fdb\u884c\u6b63\u5219\u5316\u3002\n    self.proj:\u5b9a\u4e49\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u7528\u4e8e\u5728\u6ce8\u610f\u529b\u673a\u5236\u7684\u8f93\u51fa\u4e0a\u8fdb\u884c\u53d8\u6362\u3002\n    self.proj_drop:\u5b9a\u4e49\u53e6\u4e00\u4e2aDropout\u5c42,\u7528\u4e8e\u5728\u53d8\u6362\u540e\u7684\u8f93\u51fa\u4e0a\u5e94\u7528Dropout\u3002\n    '''\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cc\u8fd8\u5206\u4e86\u591a\u5934, \u5176\u5b9e\u5c31\u662f\u5206\u7ec4\u4e86\u4e00\u4e0b, \u5404\u7ec4\u53bb\u64cd\u4f5c, \u4e4b\u540ereshape\u5408\u5e76. \u6ce8\u610f\u5230\u8fd9\u91cc\u8bbe\u7f6e\u4e86\u4e24\u4e2adropout\u5c42(if needed)\u4ee5\u9632\u6b62\u8fc7\u62df\u5408, \u4e5f\u8bbe\u7f6e\u4e86scale. \u8fd9\u91cc\u7684scale\u662f\u4e3a\u4e86\u516c\u5f0f: </p> <p></p> <p>\u6ce8\u610f\u5230\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u7684\u7ef4\u5ea6\u662f3*dim, \u8fd9\u662f\u4e3a\u4e86\u5206\u51faqkv. \u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e2dq k v\u662f\u540c\u6e90\u7684, \u4f46\u662f\u4ecd\u7136\u662f\u8981\u901a\u8fc7\u4e00\u4e2a\u6743\u91cd\u77e9\u9635\u4e58\u6cd5\u5f97\u5230\u7684. \u8fd9\u91cc\u6ca1\u6709\u8bbe\u7f6e\u504f\u7f6e\u9879\u7684\u5b66\u4e60</p> <pre><code>    def forward(self, x):\n        B, N, C = x.shape\n        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)\n        # reshape\u548cpermute\u64cd\u4f5c\u5c06Q\u3001K\u3001V\u7684\u8868\u793a\u91cd\u6392\u5e76\u5206\u5272\u6210\u591a\u4e2a\u5934\uff0c\u4ee5\u5b9e\u73b0\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u3002\n        '''\n        permutate\u7684\u542b\u4e49:\n        2:\u539f\u6765\u8868\u793aQ\u3001K\u3001V\u7684\u7ef4\u5ea6,\u73b0\u5728\u653e\u5728\u7b2c\u4e00\u4f4d,\u8fd9\u6837\u6bcf\u4e2a\u5934\u7684Q\u3001K\u3001V\u53ef\u4ee5\u8fde\u7eed\u5b58\u50a8\u3002\n        0:\u539f\u6765\u7684\u6279\u6b21\u5927\u5c0f\u7ef4\u5ea6\uff0c\u73b0\u5728\u653e\u5728\u7b2c\u4e8c\u4f4d\u3002\n        3:\u5934\u6570\u7ef4\u5ea6\uff0c\u73b0\u5728\u653e\u5728\u7b2c\u4e09\u4f4d\u3002\n        1:\u539f\u6765\u7684\u5e8f\u5217\u957f\u5ea6\u7ef4\u5ea6\uff0c\u73b0\u5728\u653e\u5728\u7b2c\u56db\u4f4d\u3002\n        4:\u6bcf\u4e2a\u5934\u7684\u7279\u5f81\u7ef4\u5ea6\uff0c\u73b0\u5728\u653e\u5728\u6700\u540e\u4e00\u4f4d\u3002\n        '''\n        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)\n\n        attn = (q @ k.transpose(-2, -1)) * self.scale # @\u662f\u963f\u8fbe\u739b\u79ef\n        # \u8ba1\u7b97\u67e5\u8be2\u548c\u952e\u7684\u70b9\u79ef\uff0c\u7136\u540e\u4e58\u4ee5\u7f29\u653e\u56e0\u5b50\u3002\n        attn = attn.softmax(dim=-1) # \u5bf9\u6ce8\u610f\u529b\u5206\u6570\u8fdb\u884csoftmax\u5f52\u4e00\u5316\uff0c\u5f97\u5230\u6ce8\u610f\u529b\u6743\u91cd\n        attn = self.attn_drop(attn)\n\n        x = (attn @ v).transpose(1, 2).reshape(B, N, C) # \u4f7f\u7528\u6ce8\u610f\u529b\u6743\u91cd\u548c\u503c\uff08V\uff09\u8ba1\u7b97\u52a0\u6743\u548c \n        x = self.proj(x) # \u4f7f\u7528\u6ce8\u610f\u529b\u6743\u91cd\u548c\u503c\uff08V\uff09\u8ba1\u7b97\u52a0\u6743\u548c\n        x = self.proj_drop(x) # \u5728\u53d8\u6362\u540e\u7684\u8f93\u51fa\u4e0a\u5e94\u7528Dropout\n        return x\n</code></pre> <p>\u8fd9\u91cc\u524d\u51e0\u6b65\u90fd\u662f\u4e3a\u4e86\u63d0\u53d6\u51faq k v\u7684\u76f8\u5173\u4fe1\u606f, \u7136\u540e\u540e\u9762\u5c31\u662f\u6309\u7167\u81ea\u6ce8\u610f\u529b\u673a\u5236\u7684\u6d41\u7a0b\u64cd\u4f5c. \u6ce8\u610f\u5373\u4f7f\u662f\u963f\u8fbe\u739b\u79ef, \u77e9\u9635\u4e5f\u9700\u8981\u8f6c\u7f6e. \u7136\u540e\u5f97\u5230\u7684\u77e9\u9635\u4e58\u4ee5\u6743\u91cd\u4e4b\u540esoftmax\u5f97\u5230\u6743\u91cd\u77e9\u9635, \u548cv\u76f8\u4e58\u4e4b\u540etranspose + reshape\u518dnn.Linear + dropout</p> <p>\u5728\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u4e2d\uff0c<code>attn</code>\u548c<code>v</code>\u7684\u5f62\u72b6\u901a\u5e38\u662f\u8fd9\u6837\u7684\uff1a</p> <ul> <li><code>attn</code> \u7684\u5f62\u72b6\uff1a<code>[B, num_heads, N, N]</code>\uff0c\u5176\u4e2d\uff1a</li> <li><code>B</code> \u662f\u6279\u6b21\u5927\u5c0f\uff08batch size\uff09\u3002</li> <li><code>num_heads</code> \u662f\u6ce8\u610f\u529b\u5934\u7684\u6570\u91cf\u3002</li> <li><code>N</code> \u662f\u5e8f\u5217\u957f\u5ea6\uff08sequence length\uff09\uff0c\u5373\u6bcf\u4e2a\u5934\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002</li> <li>\u6ce8\u610f\u529b\u6743\u91cd\u662f\u901a\u8fc7 <code>q</code> \u548c <code>k</code> \u7684\u70b9\u79ef\u5e76\u4e14\u5e94\u7528\u4e86softmax\u5f97\u5230\u7684\u3002</li> <li><code>v</code> \u7684\u5f62\u72b6\uff1a<code>[B, num_heads, N, C // num_heads]</code>\uff0c\u5176\u4e2d <code>C</code> \u662f\u8f93\u5165\u7279\u5f81\u7684\u7ef4\u5ea6\uff0c\u5e76\u4e14\u88ab\u5e73\u5747\u5206\u914d\u5230\u6bcf\u4e2a\u5934\u4e0a\u3002</li> </ul> <p>\u5f53\u6211\u4eec\u6267\u884c <code>attn @ v</code> \u65f6\uff0c\u77e9\u9635\u4e58\u6cd5\u6cbf\u7740\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u8fdb\u884c\uff0c\u5373\uff1a</p> <ul> <li><code>attn</code> \u7684\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6 <code>N</code> \u4e0e <code>v</code> \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6 <code>N</code> \u5bf9\u9f50\u5e76\u76f8\u4e58\u3002</li> <li><code>attn</code> \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6 <code>num_heads</code> \u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u4e3a\u8fd9\u662f\u52a0\u6743\u548c\u64cd\u4f5c\u7684\u4e00\u4e2a\u6269\u5c55\u7ef4\u5ea6\u3002</li> </ul> <p>\u56e0\u6b64\uff0c<code>attn @ v</code> \u64cd\u4f5c\u5f97\u5230\u7684\u5f20\u91cf\u5f62\u72b6\u5c06\u662f <code>[B, num_heads, N, C // num_heads]</code>\u3002\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u8981transpose.</p>"},{"location":"Blog/PointMAE/analysis.html#12-class-block","title":"\u62fc\u63a5\u7ec4\u4ef61&amp;2: class Block","text":"<pre><code>class Block(nn.Module):\n    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,\n                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):\n        super().__init__()\n        self.norm1 = norm_layer(dim)\n\n        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here\n        # \u7136\u540e\u8f93\u51fa\u901a\u8fc7\u7b2c\u4e8c\u5c42\u5f52\u4e00\u5316self.norm2,\u8fdb\u5165MLPself.mlp,\u518d\u901a\u8fc7DropPath\u6b63\u5219\u5316\u3002\n        self.drop_path = DropPath(drop_path) if drop_path &gt; 0. else nn.Identity()\n        self.norm2 = norm_layer(dim)\n        mlp_hidden_dim = int(dim * mlp_ratio)\n        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)\n\n        self.attn = Attention(\n            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)\n\n    def forward(self, x):\n        x = x + self.drop_path(self.attn(self.norm1(x)))\n        x = x + self.drop_path(self.mlp(self.norm2(x)))\n        return x\n</code></pre> <p>drop_path\u662f\u968f\u673a\u4e22\u5f03\u8def\u5f84, \u662f\u4e00\u79cd\u7528\u4e8e\u8bad\u7ec3\u6df1\u5ea6\u7f51\u7edc\u7684\u6b63\u5219\u5316\u6280\u672f\uff0c\u7279\u522b\u662f\u5728\u5177\u6709\u5927\u91cf\u53c2\u6570\u7684\u7f51\u7edc\u4e2d\u3002DropPath \u662f\u4e00\u79cd\u8def\u5f84\u4e22\u5f03\uff08path dropout\uff09\u7684\u5f62\u5f0f\uff0c\u5b83\u5728\u8bad\u7ec3\u671f\u95f4\u968f\u673a\u4e22\u5f03\u7f51\u7edc\u4e2d\u7684\u6574\u6761\u8def\u5f84\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u7684\u795e\u7ecf\u5143\u6216\u8fde\u63a5\u3002</p> <p>\u663e\u800c\u6613\u89c1, \u4e00\u4e2a\u6a21\u5757\u91cc\u9762\u662f\u5148\u81ea\u6ce8\u610f\u529b, \u7136\u540e\u518d\u8ddf\u4e0a\u591a\u5c42\u611f\u5e94. </p>"},{"location":"Blog/PointMAE/analysis.html#block-class-transformerencoder","title":"\u4f7f\u7528Block: class TransformerEncoder(\u7f16\u7801\u5668)","text":"<pre><code>class TransformerEncoder(nn.Module):\n    def __init__(self, embed_dim=768, depth=4, num_heads=12, mlp_ratio=4., qkv_bias=False, qk_scale=None,\n                 drop_rate=0., attn_drop_rate=0., drop_path_rate=0.):\n        super().__init__()\n\n        self.blocks = nn.ModuleList([\n            Block(\n                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,\n                drop=drop_rate, attn_drop=attn_drop_rate, \n                drop_path = drop_path_rate[i] if isinstance(drop_path_rate, list) else drop_path_rate\n                )\n            for i in range(depth)])\n    '''\n    embed_dim:\u8f93\u5165\u7279\u5f81\u7684\u7ef4\u5ea6\u3002\n    depth:Transformer\u7f16\u7801\u5668\u5757\u7684\u6570\u91cf\u3002\n    num_heads:\u6bcf\u4e2a\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u7684\u5934\u6570\u3002\n    mlp_ratio:\u591a\u5c42\u611f\u77e5\u673a(MLP)\u9690\u85cf\u5c42\u7ef4\u5ea6\u4e0e\u8f93\u5165\u7ef4\u5ea6\u7684\u6bd4\u4f8b\u3002\n    qkv_bias:\u662f\u5426\u5728\u7ebf\u6027\u5c42\u4e2d\u6dfb\u52a0\u504f\u7f6e\u3002\n    qk_scale:\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u7684\u7f29\u653e\u56e0\u5b50\u3002\n    drop_rate:MLP\u4e2dDropout\u7684\u6bd4\u7387\u3002\n    attn_drop_rate:\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e2dDropout\u7684\u6bd4\u7387\u3002\n    drop_path_rate:DropPath\u6b63\u5219\u5316\u7684\u6bd4\u7387,\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u8868\u6216\u5355\u4e2a\u503c\n    '''\n    def forward(self, x, pos):\n        for _, block in enumerate(self.blocks):\n            x = block(x + pos)\n        return x\n    '''\n    \u4f7f\u7528\u4e00\u4e2afor\u5faa\u73af\u904d\u5386self.blocks\u4e2d\u7684\u6bcf\u4e2aBlock\u5b9e\u4f8b\u3002\n    \u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d,\u5c06\u5f53\u524d\u5757\u5e94\u7528\u4e8e\u8f93\u5165x,\u540c\u65f6\u5c06x\u4e0e\u4f4d\u7f6e\u7f16\u7801pos\u76f8\u52a0,\u4ee5\u5c06\u4f4d\u7f6e\u4fe1\u606f\u878d\u5165\u6a21\u578b\u7684\u8f93\u5165\u4e2d\u3002\u8fd9\u79cd\u4f4d\u7f6e\u7f16\u7801\u901a\u5e38\u662f\u5fc5\u8981\u7684,\n    \u56e0\u4e3aTransformer\u6a21\u578b\u672c\u8eab\u4e0d\u5177\u5907\u6355\u6349\u5e8f\u5217\u4e2d\u4f4d\u7f6e\u5173\u7cfb\u7684\u80fd\u529b\u3002\u6bcf\u4e2a\u5757\u7684\u8f93\u51fa\u4f1a\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u5757\u7684\u8f93\u5165\u3002\n    \u6700\u540e,\u5faa\u73af\u7ed3\u675f\u540e\u7684x\u4f5c\u4e3a\u6574\u4e2a\u7f16\u7801\u5668\u7684\u8f93\u51fa\u8fd4\u56de\n    '''\n</code></pre> <p>\u4e00\u4e2a\u7f16\u7801\u5668\u91cc\u9762\u53ef\u80fd\u6709\u5f88\u591a\u7684block, \u591a\u5c11\u4e2ablock\u4ee3\u8868\u6df1\u5ea6\u6709\u591a\u6df1(depth), yaml\u6587\u4ef6\u4e2d\u5b9a\u4e49\u662f4</p> <p>\u6ce8\u610f\u7684\u662f, \u6254\u8fdbTransformerEncoder\u7684\u8fd8\u5e94\u8be5\u6709position embedding, \u4e3a\u4e86\u5b66\u4e60\u5230\u4f4d\u7f6e\u4fe1\u606f. </p> <p>\u503c\u5f97\u4e00\u63d0\u7684\u662f, enumerate\u51fd\u6570\u5f88\u4e0d\u9519, \u5faa\u73af\u7684\u540c\u65f6\u80fd\u7ed9\u4e00\u4e2a\u8fed\u4ee3\u5668\u65b9\u4fbf\u4f7f\u7528(\u5f53\u7136\u8fd9\u91cc\u7528\u4e0d\u5230\u8fed\u4ee3\u5668\u6570\u5b57)</p>"},{"location":"Blog/PointMAE/analysis.html#transformerencoder-masktransformer","title":"\u4f7f\u7528TransformerEncoder \u7ec4\u4ef6\u4e09: MaskTransformer","text":"<p>\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5e26\u6709\u63a9\u7801\u64cd\u4f5c\u7684Transformer\u7f16\u7801\u5668\uff0c\u8fd9\u5728\u81ea\u76d1\u7763\u5b66\u4e60\u4e2d\u5e38\u7528\u4e8e\u6570\u636e\u589e\u5f3a\u548c\u7279\u5f81\u63d0\u53d6</p> <pre><code>class MaskTransformer(nn.Module):\n    # \u5b9e\u73b0\u4e86\u4e00\u4e2a\u5e26\u6709\u63a9\u7801\u64cd\u4f5c\u7684Transformer\u7f16\u7801\u5668\uff0c\u8fd9\u5728\u81ea\u76d1\u7763\u5b66\u4e60\u4e2d\u5e38\u7528\u4e8e\u6570\u636e\u589e\u5f3a\u548c\u7279\u5f81\u63d0\u53d6\n    def __init__(self, config, **kwargs):\n        super().__init__()\n        self.config = config\n        # define the transformer argparse\n        self.mask_ratio = config.transformer_config.mask_ratio \n        self.trans_dim = config.transformer_config.trans_dim\n        self.depth = config.transformer_config.depth \n        self.drop_path_rate = config.transformer_config.drop_path_rate\n        self.num_heads = config.transformer_config.num_heads \n        print_log(f'[args] {config.transformer_config}', logger = 'Transformer')\n        # embedding\n        self.encoder_dims =  config.transformer_config.encoder_dims\n        self.encoder = Encoder(encoder_channel = self.encoder_dims)\n\n        self.mask_type = config.transformer_config.mask_type\n\n        self.pos_embed = nn.Sequential(\n            nn.Linear(3, 128),\n            nn.GELU(),\n            nn.Linear(128, self.trans_dim),\n        )\n\n        dpr = [x.item() for x in torch.linspace(0, self.drop_path_rate, self.depth)]\n        self.blocks = TransformerEncoder(\n            embed_dim = self.trans_dim,\n            depth = self.depth,\n            drop_path_rate = dpr,\n            num_heads = self.num_heads,\n        )\n\n        self.norm = nn.LayerNorm(self.trans_dim)\n        self.apply(self._init_weights)\n</code></pre> <p>\u5b9a\u4e49\u4e86\u63a9\u7801\u6bd4\u7387, trans_dim(\u5728 Transformer \u67b6\u6784\u4e2d\uff0c\u8f93\u5165\u6570\u636e\u901a\u5e38\u4f1a\u7ecf\u5386\u4e00\u4e2a\u5347\u7ef4\u7684\u8fc7\u7a0b)(\u4f46\u662fyaml\u4e2d\u8ba4\u4e3a, trans_dim = encoder_dims), \u6df1\u5ea6, \u591a\u6ce8\u610f\u529b\u673a\u5236\u7684\u5934\u6570, drop_path\u6bd4\u7387. \u521b\u5efa\u4e86encoder\u5b9e\u4f8b, \u786e\u5b9a\u4e86\u63a9\u7801\u65b9\u5f0f, \u786e\u5b9a\u4e86positional embedding\u6a21\u5757, \u521b\u5efa\u4e86TransformerEncoder\u5b9e\u4f8b, \u5e76\u4e14\u521b\u9020\u4e86\u5f52\u4e00\u5316\u5b9e\u4f8b</p> <p><code>nn.LayerNorm</code> \u662f PyTorch \u4e2d\u7684\u4e00\u4e2a\u5c42\u5f52\u4e00\u5316\uff08Layer Normalization\uff09\u6a21\u5757\uff0c\u7528\u4e8e\u5bf9\u8f93\u5165\u5f20\u91cf\u7684\u6bcf\u4e2a\u6837\u672c\uff08batch\uff09\u7684\u7279\u5f81\u901a\u9053\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\u3002\u5c42\u5f52\u4e00\u5316\u662f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4e00\u79cd\u5e38\u7528\u7684\u6280\u672f\uff0c\u65e8\u5728\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6\u3001\u7a33\u5b9a\u6027\u548c\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002</p> <p><code>self.apply(self._init_weights)</code> \u662f\u4e00\u79cd\u5728\u6a21\u578b\u521d\u59cb\u5316\u65f6\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u4e3a\u6a21\u5757\u5185\u7684\u6240\u6709\u5b50\u6a21\u5757\u5e94\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u6743\u91cd\u521d\u59cb\u5316\u51fd\u6570\u3002\u521d\u59cb\u5316\u65b9\u5f0f, \u5373<code>self._init_weights</code>\u5b9a\u4e49\u5982\u4e0b: </p> <pre><code>def _init_weights(self, m):\n        if isinstance(m, nn.Linear):\n            trunc_normal_(m.weight, std=.02)\n            if isinstance(m, nn.Linear) and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n        elif isinstance(m, nn.LayerNorm):\n            nn.init.constant_(m.bias, 0)\n            nn.init.constant_(m.weight, 1.0)\n        elif isinstance(m, nn.Conv1d):\n            trunc_normal_(m.weight, std=.02)\n            if m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n</code></pre> <p>\u63a9\u7801\u65b9\u5f0f\u5b9a\u4e49\u5982\u4e0b: </p> <pre><code>def _mask_center_block(self, center, noaug=False):\n        # \u751f\u6210\u57fa\u4e8e\u70b9\u4e91\u4e2d\u5fc3\u7684\u5757\u72b6\u63a9\u7801\n        '''\n            center : B G 3\n            --------------\n            mask : B G (bool)\n        '''\n        # skip the mask\n        if noaug or self.mask_ratio == 0:\n            return torch.zeros(center.shape[:2]).bool()\n        # mask a continuous part\n        mask_idx = []\n        for points in center:\n            # G 3\n            points = points.unsqueeze(0)  # 1 G 3\n            index = random.randint(0, points.size(1) - 1)\n            distance_matrix = torch.norm(points[:, index].reshape(1, 1, 3) - points, p=2,\n                                         dim=-1)  # 1 1 3 - 1 G 3 -&gt; 1 G\n\n            idx = torch.argsort(distance_matrix, dim=-1, descending=False)[0]  # G\n            ratio = self.mask_ratio\n            mask_num = int(ratio * len(idx))\n            mask = torch.zeros(len(idx))\n            mask[idx[:mask_num]] = 1\n            mask_idx.append(mask.bool())\n\n        bool_masked_pos = torch.stack(mask_idx).to(center.device)  # B G\n\n        return bool_masked_pos\n\n    def _mask_center_rand(self, center, noaug = False):\n        # \u751f\u6210\u57fa\u4e8e\u968f\u673a\u9009\u62e9\u7684\u63a9\u7801\n        '''\n            center : B G 3\n            --------------\n            mask : B G (bool)\n        '''\n        B, G, _ = center.shape\n        # skip the mask\n        if noaug or self.mask_ratio == 0:\n            return torch.zeros(center.shape[:2]).bool()\n\n        self.num_mask = int(self.mask_ratio * G)\n\n        overall_mask = np.zeros([B, G])\n        for i in range(B):\n            mask = np.hstack([\n                np.zeros(G-self.num_mask),\n                np.ones(self.num_mask),\n            ])\n            np.random.shuffle(mask)\n            overall_mask[i, :] = mask\n        overall_mask = torch.from_numpy(overall_mask).to(torch.bool)\n\n        return overall_mask.to(center.device) # B G  \u8fd9\u662f\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u5f20\u91cf\n</code></pre> <p>\u8bba\u6587\u4e2d\u63a8\u8350\u7684\u662f\u968f\u673a\u63a9\u7801, \u90a3\u4e48\u8fd9\u4e2a\u968f\u673a\u63a9\u7801\u4e2d\u5fc3\u70b9\u5982\u4f55\u5b9e\u73b0\u7684\u5462? kimi\u8bb2\u7684\u6bd4\u6211\u601d\u8003\u7684\u8be6\u7ec6, \u6545\u5f15\u7528kimi\u7684\u8bb2\u89e3:</p> <p>\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c<code>_mask_center_rand</code> \u51fd\u6570\u7684\u4f5c\u7528\u662f\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u63a9\u7801\uff08mask\uff09\uff0c\u7528\u4e8e\u6570\u636e\u589e\u5f3a\u6216\u81ea\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u7279\u5f81\u63d0\u53d6\u3002\u63a9\u7801\u662f\u4e00\u79cd\u6307\u793a\u54ea\u4e9b\u6570\u636e\u70b9\u5e94\u8be5\u88ab\u4fdd\u7559\uff0c\u54ea\u4e9b\u5e94\u8be5\u88ab\u5ffd\u7565\u7684\u673a\u5236\u3002\u5728\u81ea\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u63a9\u7801\u53ef\u4ee5\u5e2e\u52a9\u6a21\u578b\u5b66\u4e60\u5230\u66f4\u52a0\u9c81\u68d2\u7684\u7279\u5f81\u8868\u793a\u3002</p> <p>\u51fd\u6570\u7684\u53c2\u6570\u548c\u6b65\u9aa4\u8bf4\u660e\u5982\u4e0b\uff1a</p> <ol> <li>\u53c2\u6570\uff1a</li> <li><code>center</code>\uff1a\u4e00\u4e2a\u5f62\u72b6\u4e3a <code>[B, G, 3]</code> \u7684\u5f20\u91cf\uff0c\u8868\u793a\u4e2d\u5fc3\u70b9\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002\u5176\u4e2d <code>B</code> \u662f\u6279\u6b21\u5927\u5c0f\uff0c<code>G</code> \u662f\u6bcf\u4e2a\u6279\u6b21\u4e2d\u7684\u70b9\u7684\u6570\u91cf\uff0c<code>3</code> \u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5750\u6807\u3002</li> <li><code>noaug</code>\uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3a <code>False</code>\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a <code>True</code>\uff0c\u5219\u8df3\u8fc7\u63a9\u7801\u64cd\u4f5c\u3002</li> <li>\u63a9\u7801\u751f\u6210\u8fc7\u7a0b\uff1a</li> <li>\u9996\u5148\uff0c\u68c0\u67e5 <code>noaug</code> \u53c2\u6570\u6216 <code>self.mask_ratio</code> \u662f\u5426\u4e3a0\u3002\u5982\u679c\u662f\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u63a9\u7801\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u5168\u4e3a0\u7684\u5e03\u5c14\u5f20\u91cf\uff0c\u8868\u793a\u4e0d\u63a9\u7801\u4efb\u4f55\u70b9\u3002</li> <li>\u5982\u679c\u9700\u8981\u63a9\u7801\uff0c\u8ba1\u7b97\u9700\u8981\u63a9\u7801\u7684\u6570\u91cf <code>self.num_mask</code>\uff0c\u5b83\u662f\u901a\u8fc7\u5c06 <code>mask_ratio</code> \u4e0e <code>G</code>\uff08\u6bcf\u4e2a\u6279\u6b21\u4e2d\u7684\u70b9\u7684\u6570\u91cf\uff09\u76f8\u4e58\u5f97\u5230\u7684\u3002</li> <li>\u4f7f\u7528 <code>np.zeros</code> \u521b\u5efa\u4e00\u4e2a\u5f62\u72b6\u4e3a <code>[B, G]</code> \u7684 NumPy \u6570\u7ec4 <code>overall_mask</code>\uff0c\u521d\u59cb\u5316\u6240\u6709\u503c\u4e3a0\u3002</li> <li>\u904d\u5386\u6bcf\u4e2a\u6279\u6b21 <code>i</code>\uff1a<ul> <li>\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>G</code> \u7684 NumPy \u6570\u7ec4 <code>mask</code>\uff0c\u5176\u4e2d <code>num_mask</code> \u4e2a\u503c\u4e3a1\uff08\u8868\u793a\u63a9\u7801\uff09\uff0c\u5176\u4f59 <code>G - num_mask</code> \u4e2a\u503c\u4e3a0\uff08\u8868\u793a\u4e0d\u63a9\u7801\uff09\u3002</li> <li>\u4f7f\u7528 <code>np.random.shuffle(mask)</code> \u968f\u673a\u6253\u4e71 <code>mask</code> \u6570\u7ec4\u4e2d\u7684\u503c\uff0c\u4ee5\u786e\u4fdd\u63a9\u7801\u662f\u968f\u673a\u7684\u3002</li> <li>\u5c06\u6253\u4e71\u540e\u7684 <code>mask</code> \u6570\u7ec4\u8d4b\u503c\u7ed9 <code>overall_mask</code> \u5bf9\u5e94\u7684\u6279\u6b21\u3002</li> </ul> </li> <li>\u5c06 NumPy \u6570\u7ec4 <code>overall_mask</code> \u8f6c\u6362\u4e3a PyTorch \u5f20\u91cf\uff0c\u5e76\u786e\u4fdd\u5176\u6570\u636e\u7c7b\u578b\u4e3a\u5e03\u5c14\u578b\uff08<code>torch.bool</code>\uff09\u3002</li> <li>\u4f7f\u7528 <code>to(center.device)</code> \u786e\u4fdd\u63a9\u7801\u5f20\u91cf\u548c\u8f93\u5165\u7684 <code>center</code> \u5f20\u91cf\u4f4d\u4e8e\u540c\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff08CPU \u6216 GPU\uff09\u3002</li> <li>\u8fd4\u56de\u503c\uff1a</li> <li>\u8fd4\u56de\u7684 <code>overall_mask</code> \u662f\u4e00\u4e2a\u5e03\u5c14\u5f20\u91cf\uff0c\u5f62\u72b6\u4e3a <code>[B, G]</code>\uff0c\u5176\u4e2d\u7684 <code>True</code> \u8868\u793a\u5bf9\u5e94\u7684\u70b9\u88ab\u63a9\u7801\uff08\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u5c06\u88ab\u5ffd\u7565\uff09\uff0c<code>False</code> \u8868\u793a\u5bf9\u5e94\u7684\u70b9\u6ca1\u6709\u88ab\u63a9\u7801\uff08\u5c06\u88ab\u4fdd\u7559\uff09\u3002</li> </ol> <p>\u90a3\u4e48forward\u65b9\u6cd5\u5982\u4e0b: </p> <pre><code>def forward(self, neighborhood, center, noaug = False):\n        # generate mask\n        if self.mask_type == 'rand':\n            bool_masked_pos = self._mask_center_rand(center, noaug = noaug) # B G\n        else:\n            bool_masked_pos = self._mask_center_block(center, noaug = noaug)\n\n        group_input_tokens = self.encoder(neighborhood)  #  B G C\n\n        batch_size, seq_len, C = group_input_tokens.size()\n\n        x_vis = group_input_tokens[~bool_masked_pos].reshape(batch_size, -1, C)\n        # \u4ece group_input_tokens \u4e2d\u9009\u53d6\u90a3\u4e9b\u672a\u88ab\u63a9\u7801\u7684\u70b9\uff0c\u5373\u4fdd\u7559 bool_masked_pos \u4e3a False \u7684\u4f4d\u7f6e\u5bf9\u5e94\u7684\u70b9\u3002\n        # add pos embedding\n        # mask pos center\n        masked_center = center[~bool_masked_pos].reshape(batch_size, -1, 3)\n        pos = self.pos_embed(masked_center)\n\n        # transformer\n        x_vis = self.blocks(x_vis, pos)\n        x_vis = self.norm(x_vis)\n\n        return x_vis, bool_masked_pos\n</code></pre> <p>\u9996\u5148\u5148\u521b\u9020\u63a9\u7801\u5e03\u5c14\u5f20\u91cf, \u7136\u540e\u6839\u636e\u5b83\u5728embedding\u5b8c\u6210\u540e\u7684\u70b9\u91cc\u9762\u9009\u51fa\u53ef\u89c1\u7684\u4e2d\u5fc3\u70b9,  \u800c\u6839\u636e\u8bba\u6587, \u63a9\u7801\u4e4b\u540e\u7684\u4e2d\u5fc3\u70b9(\u672a\u8fdb\u884cembedding)\u4f1a\u8fdb\u884cpositional embedding; \u53ef\u89c1\u7684\u4e2d\u5fc3\u70b9\u548c\u4e0d\u53ef\u89c1\u7684\u70b9\u7684positional embdding \u4f1a\u4e00\u540c\u8fdb\u5165transformer</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u4e00\u6b65\u91cc\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6f5c\u7a7a\u95f4\u7684embedding\u4e86</p>"},{"location":"Blog/PointMAE/analysis.html#class-transformerdecoder","title":"\u7ec4\u4ef6\u56db: class TransformerDecoder","text":"<pre><code>class TransformerDecoder(nn.Module):\n    # Transformer\u89e3\u7801\u5668\u9010\u6b65\u5904\u7406\u8f93\u5165\u6570\u636e\u7684\u7279\u5f81\u8868\u793a\uff0c\u5e76\u5c06\u89e3\u7801\u5668\u7684\u8f93\u51fa\u7528\u4e8e\u751f\u6210\u6216\u9884\u6d4b\u4efb\u52a1\n    def __init__(self, embed_dim=384, depth=4, num_heads=6, mlp_ratio=4., qkv_bias=False, qk_scale=None,\n                 drop_rate=0., attn_drop_rate=0., drop_path_rate=0.1, norm_layer=nn.LayerNorm):\n        super().__init__()\n        self.blocks = nn.ModuleList([\n            Block(\n                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,\n                drop=drop_rate, attn_drop=attn_drop_rate,\n                drop_path=drop_path_rate[i] if isinstance(drop_path_rate, list) else drop_path_rate\n            )\n            for i in range(depth)])\n        self.norm = norm_layer(embed_dim) # \u4e00\u4e2a\u5c42\u5f52\u4e00\u5316\u5c42\uff0c\u7528\u4e8e\u89c4\u8303\u5316\u89e3\u7801\u5668\u7684\u8f93\u51fa\n        self.head = nn.Identity()\n\n        self.apply(self._init_weights) # \u4f7f\u7528_init_weights\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6743\u91cd\u8fdb\u884c\u521d\u59cb\u5316\n    '''\n    embed_dim:\u8f93\u5165\u7279\u5f81\u7684\u7ef4\u5ea6\u3002\n    depth:Transformer\u89e3\u7801\u5668\u5757\u7684\u6570\u91cf\u3002\n    num_heads:\u6bcf\u4e2a\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u7684\u5934\u6570\u3002\n    mlp_ratio:\u591a\u5c42\u611f\u77e5\u673a(MLP)\u9690\u85cf\u5c42\u7ef4\u5ea6\u4e0e\u8f93\u5165\u7ef4\u5ea6\u7684\u6bd4\u4f8b\u3002\n    qkv_bias:\u662f\u5426\u5728\u7ebf\u6027\u5c42\u4e2d\u6dfb\u52a0\u504f\u7f6e\u3002\n    qk_scale:\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u7684\u7f29\u653e\u56e0\u5b50\u3002\n    drop_rate:MLP\u4e2dDropout\u7684\u6bd4\u7387\u3002\n    attn_drop_rate:\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e2dDropout\u7684\u6bd4\u7387\u3002\n    drop_path_rate:DropPath\u6b63\u5219\u5316\u7684\u6bd4\u7387,\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u8868\u6216\u5355\u4e2a\u503c\u3002\n    norm_layer:\u5f52\u4e00\u5316\u5c42\u7684\u7c7b\u578b,\u9ed8\u8ba4\u4e3ann.LayerNorm\u3002\n    '''\n    def _init_weights(self, m):\n        if isinstance(m, nn.Linear):\n            nn.init.xavier_uniform_(m.weight) # \u5bf9\u4e8e\u7ebf\u6027\u5c42\uff08nn.Linear\uff09\uff0c\u4f7f\u7528Xavier\u5747\u5300\u5206\u5e03\u521d\u59cb\u5316\u6743\u91cd\uff0c\u5e76\u521d\u59cb\u5316\u504f\u7f6e\u4e3a0\n            if isinstance(m, nn.Linear) and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n        elif isinstance(m, nn.LayerNorm):\n            nn.init.constant_(m.bias, 0)\n            nn.init.constant_(m.weight, 1.0)\n\n    def forward(self, x, pos, return_token_num):\n        for _, block in enumerate(self.blocks):\n            x = block(x + pos)\n\n        x = self.head(self.norm(x[:, -return_token_num:]))  # only return the mask tokens predict pixel\n        # \u53ea\u53d6x\u7684\u6700\u540e\u4e00\u90e8\u5206\uff08\u7531return_token_num\u6307\u5b9a\u7684\u5143\u7d20\u6570\u91cf\uff09\uff0c\u7ecf\u8fc7\u5c42\u5f52\u4e00\u5316\u548c\u6052\u7b49\u6620\u5c04\u5904\u7406\u540e\u4f5c\u4e3a\u8f93\u51fa\n        return x\n    '''\n    \u4f7f\u7528\u4e00\u4e2afor\u5faa\u73af\u904d\u5386self.blocks\u4e2d\u7684\u6bcf\u4e2aBlock\u5b9e\u4f8b\u3002\n    \u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d,\u5c06\u5f53\u524d\u5757\u5e94\u7528\u4e8e\u8f93\u5165x,\u540c\u65f6\u5c06x\u4e0e\u4f4d\u7f6e\u7f16\u7801pos\u76f8\u52a0,\u4ee5\u878d\u5165\u4f4d\u7f6e\u4fe1\u606f\u3002\n    \u5faa\u73af\u7ed3\u675f\u540e,\u901a\u8fc7\u5c42\u5f52\u4e00\u5316self.norm\u548c\u6052\u7b49\u6620\u5c04self.head\u5904\u7406x\u7684\u6700\u540ereturn_token_num\u4e2a\u5143\u7d20,\n    \u901a\u5e38\u8fd9\u4e9b\u5143\u7d20\u4ee3\u8868\u89e3\u7801\u5668\u7684\u8f93\u51fa,\u5982\u9884\u6d4b\u7684\u50cf\u7d20\u6216\u6807\u8bb0\u3002\n    '''\n</code></pre> <p><code>nn.Identity</code>\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u8fd4\u56de\u8f93\u5165\u7684\u526f\u672c\u800c\u4e0d\u8fdb\u884c\u4efb\u4f55\u6539\u53d8\u3002\u7b80\u5355\u6765\u8bf4\uff0c<code>nn.Identity</code>\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u4e2a\u201c\u76f4\u901a\u201d\u5c42\uff0c\u5b83\u4e0d\u6539\u53d8\u6570\u636e\u7684\u4efb\u4f55\u5c5e\u6027\uff0c\u53ea\u662f\u5c06\u8f93\u5165\u539f\u6837\u4f20\u9012\u5230\u8f93\u51fa\u3002</p> <p>\u6ce8\u610f\u8fd9\u91cc\u9762\u6ca1\u6709\u628anorm\u5b8c\u6210\u540e\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u70b9\u4e91\u4e09\u7ef4\u7684\u6b63\u5e38\u6570\u636e, \u8fd9\u4e00\u6b65\u4e4b\u540e\u4f1a\u5b9e\u73b0</p> <p><code>nn.LayerNorm</code>\uff08\u5c42\u5f52\u4e00\u5316\uff09\u662f\u4e00\u79cd\u5728\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u4e2d\u5e38\u7528\u7684\u6280\u672f, \u5bf9\u8f93\u5165\u6570\u636e\u7684\u6bcf\u4e2a\u6837\u672c\u7684\u6bcf\u4e2a\u7279\u5f81\u7ef4\u5ea6\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\uff0c\u4f7f\u5176\u5177\u6709\u5747\u503c\u4e3a0\u548c\u65b9\u5dee\u4e3a1\u7684\u5206\u5e03\u3002\u5c42\u5f52\u4e00\u5316\u7684\u4e3b\u8981\u76ee\u7684\u662f\u7a33\u5b9a\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u52a0\u5feb\u6536\u655b\u901f\u5ea6\uff0c\u5e76\u6709\u52a9\u4e8e\u51cf\u5c11\u5185\u90e8\u534f\u53d8\u91cf\u504f\u79fb\uff08Internal Covariate Shift\uff09\uff0c\u5373\u786e\u4fdd\u7f51\u7edc\u5c42\u8f93\u5165\u7684\u5206\u5e03\u4e0d\u4f1a\u56e0\u4e3a\u7f51\u7edc\u5c42\u53c2\u6570\u7684\u53d8\u5316\u800c\u53d1\u751f\u5927\u7684\u53d8\u5316\u3002</p> <p><code>x[:, -return_token_num:]</code>\u662f\u4e3a\u4e86\u53ea\u5173\u6ce8\u88ab\u63a9\u7801\u7684\u90e8\u5206\u548c\u539f\u6765\u63a9\u7801\u7684\u90e8\u5206\u7684\u76f8\u4f3c\u5ea6. \u4e00\u5f00\u59cb\u8fd8\u597d\u5947, \u4e3a\u4ec0\u4e48\u5012\u7740\u53d6return_token_num\u4e2a\u5c31\u80fd\u591f\u662f\u53d6\u51fa\u65b0\u751f\u6210\u7684\u5185\u5bb9? \u540e\u6765\u60f3\u60f3, \u5176\u5b9e\u662f\u673a\u5668\u4e0d\u65ad\u5b66\u4e60, \u4f7f\u5f97\u6700\u540e\u8f93\u51fa\u7684\u5012\u6570\u8fd9\u4e48\u591a\u4e2a\u5185\u5bb9\u662f\u5c3d\u53ef\u80fd\u63a5\u8fd1\u88ab\u63a9\u7801\u7684\u90e8\u5206(\u4e0d\u77e5\u9053\u8fd9\u6837\u7684\u7406\u89e3\u662f\u4e0d\u662f\u6b63\u786e\u7684)</p> <p>\u5f53\u7136, \u4e5f\u662f\u56e0\u4e3a\u4e8b\u5b9e\u4e0a, \u8f93\u5165\u7684\u65f6\u5019,\u4e0d\u8bba\u662f\u6f5c\u7a7a\u95f4\u6570\u636e\u8fd8\u662f\u4f4d\u7f6e\u7f16\u7801\u6570\u636e, \u6700\u540eN\u4e2a\u7684\u6570\u636e\u5168\u90fd\u662f\u5c5e\u4e8e\u88ab\u63a9\u7801\u7684\u6570\u636e, \u7136\u540e\u7528\u4e00\u58060\u6765\u4ee3\u66ff\u8fd9N\u4e2a\u6f5c\u7a7a\u95f4\u6570\u636e(\u7a7a\u95f4), \u5e0c\u671b\u6700\u540e\u4ea7\u51fa\u7684\u8fd9N\u4e2a\u90fd\u662f\u5341\u5206\u8d34\u8fd1\u539f\u6765\u88ab\u63a9\u7801\u7684\u90e8\u5206. </p> <p><code>x_full = torch.cat([x_vis, mask_token], dim=1)</code> (from class Point_MAE, mask_token\u662f\u4ec0\u4e48\u5c31\u5728\u4e0b\u9762\u6709\u8bf4\u660e) </p>"},{"location":"Blog/PointMAE/analysis.html#class-point_mae","title":"class Point_MAE\u2014\u2014\u62fc\u63a5\u6240\u6709\u7ec4\u4ef6","text":"<pre><code>class Point_MAE(nn.Module):\n    '''\n    super().__init__():\u8c03\u7528\u57fa\u7c7bnn.Module\u7684\u6784\u9020\u51fd\u6570\u3002\n    self.config:\u5b58\u50a8\u6a21\u578b\u7684\u914d\u7f6e\u4fe1\u606f\u3002\n    self.MAE_encoder:\u521b\u5efa\u4e00\u4e2aMaskTransformer\u5b9e\u4f8b,\u7528\u4e8e\u7f16\u7801\u5668\u90e8\u5206\u3002\n    self.group_size\u548cself.num_group:\u5b9a\u4e49\u70b9\u4e91\u5206\u7ec4\u7684\u5927\u5c0f\u548c\u6570\u91cf\u3002\n    self.mask_token:\u5b9a\u4e49\u4e00\u4e2a\u63a9\u7801\u6807\u8bb0\uff0c\u7528\u4e8e\u5728\u89e3\u7801\u5668\u4e2d\u8868\u793a\u63a9\u7801\u4f4d\u7f6e\u3002\n    self.decoder_pos_embed:\u5b9a\u4e49\u4e00\u4e2a\u4f4d\u7f6e\u5d4c\u5165\u7f51\u7edc\uff0c\u7528\u4e8e\u5c06\u70b9\u7684\u4f4d\u7f6e\u4fe1\u606f\u7f16\u7801\u6210\u7279\u5f81\u3002\n    self.MAE_decoder:\u521b\u5efa\u4e00\u4e2aTransformerDecoder\u5b9e\u4f8b,\u7528\u4e8e\u89e3\u7801\u5668\u90e8\u5206\u3002\n    self.group_divider:\u521b\u5efa\u4e00\u4e2aGroup\u5b9e\u4f8b,\u7528\u4e8e\u5c06\u70b9\u4e91\u5206\u5272\u6210\u591a\u4e2a\u5c40\u90e8\u7ec4\u3002\n    self.increase_dim:\u5b9a\u4e49\u4e00\u4e2a\u7f51\u7edc\uff0c\u7528\u4e8e\u5c06\u89e3\u7801\u5668\u7684\u8f93\u51fa\u589e\u52a0\u5230\u6240\u9700\u7684\u7ef4\u5ea6\u3002\n    self.build_loss_func(self.loss):\u6839\u636e\u914d\u7f6e\u4e2d\u7684\u635f\u5931\u51fd\u6570\u7c7b\u578b,\u6784\u5efa\u635f\u5931\u51fd\u6570\u3002\n    '''\n    def __init__(self, config):\n        super().__init__()\n        print_log(f'[Point_MAE] ', logger ='Point_MAE')\n        self.config = config\n        self.trans_dim = config.transformer_config.trans_dim\n        self.MAE_encoder = MaskTransformer(config)\n        self.group_size = config.group_size\n        self.num_group = config.num_group\n        self.drop_path_rate = config.transformer_config.drop_path_rate\n        self.mask_token = nn.Parameter(torch.zeros(1, 1, self.trans_dim))\n        self.decoder_pos_embed = nn.Sequential(\n            nn.Linear(3, 128),\n            nn.GELU(),\n            nn.Linear(128, self.trans_dim)\n        )\n\n        self.decoder_depth = config.transformer_config.decoder_depth\n        self.decoder_num_heads = config.transformer_config.decoder_num_heads\n        dpr = [x.item() for x in torch.linspace(0, self.drop_path_rate, self.decoder_depth)]\n        self.MAE_decoder = TransformerDecoder(\n            embed_dim=self.trans_dim,\n            depth=self.decoder_depth,\n            drop_path_rate=dpr,\n            num_heads=self.decoder_num_heads,\n        )\n\n        print_log(f'[Point_MAE] divide point cloud into G{self.num_group} x S{self.group_size} points ...', logger ='Point_MAE')\n        self.group_divider = Group(num_group = self.num_group, group_size = self.group_size)\n\n        # prediction head\n        self.increase_dim = nn.Sequential(\n            # nn.Conv1d(self.trans_dim, 1024, 1),\n            # nn.BatchNorm1d(1024),\n            # nn.LeakyReLU(negative_slope=0.2),\n            nn.Conv1d(self.trans_dim, 3*self.group_size, 1)\n        )\n\n        trunc_normal_(self.mask_token, std=.02)\n        self.loss = config.loss\n        # loss\n        self.build_loss_func(self.loss)\n</code></pre> <p>\u521d\u59cb\u5316\u7684\u65f6\u5019, \u521b\u5efa\u4e86: MaskTransformer, decoder_pos_embed(\u4f4d\u7f6e\u5d4c\u5165), TransformerDecoder, increase_dim(\u6700\u540e\u89e3\u7801\u5668\u8f93\u51fa\u5185\u5bb9\u8f6c\u5316\u4e3aembedding\u524d\u7684\u5f62\u5f0f), Group\u5b9e\u4f8b</p> <p>\u8fd9\u6837\u4e00\u6765, \u5206\u7ec4+embedding+encoder+decoder+decoder-&gt;\u6b63\u5e38\u6570\u636e\u7ed3\u6784+center\u7684positional embedding\u5168\u90e8\u51c6\u5907\u597d\u4e86</p> <p>\u8fd9\u91cc\u7684loss function \u91c7\u7528\u7684\u662fchamferdist2(\u8bba\u6587\u4e2d\u7684)</p> <pre><code>    def build_loss_func(self, loss_type):\n        if loss_type == \"cdl1\":\n            self.loss_func = ChamferDistanceL1().cuda()\n        elif loss_type =='cdl2':\n            self.loss_func = ChamferDistanceL2().cuda()\n        else:\n            raise NotImplementedError\n</code></pre> <pre><code>    def forward(self, pts, vis = False, **kwargs):\n        '''\n        \u4f7f\u7528self.group_divider\u5c06\u70b9\u4e91\u5206\u5272\u6210\u591a\u4e2a\u5c40\u90e8\u7ec4\u3002\n        \u4f7f\u7528self.MAE_encoder\u5bf9\u70b9\u4e91\u8fdb\u884c\u7f16\u7801,\u5f97\u5230\u53ef\u89c1\u90e8\u5206\u7684\u7279\u5f81\u548c\u63a9\u7801\u3002\n        \u5bf9\u4e2d\u5fc3\u70b9\u5e94\u7528\u4f4d\u7f6e\u5d4c\u5165\uff0c\u751f\u6210\u53ef\u89c1\u70b9\u548c\u63a9\u7801\u70b9\u7684\u4f4d\u7f6e\u5d4c\u5165\u3002\n        \u5c06\u53ef\u89c1\u7279\u5f81\u3001\u63a9\u7801\u6807\u8bb0\u548c\u4f4d\u7f6e\u5d4c\u5165\u7ec4\u5408m\u8f93\u5165\u5230self.MAE_decoder\u8fdb\u884c\u89e3\u7801\u3002\n        \u4f7f\u7528self.increase_dim\u5c06\u89e3\u7801\u5668\u7684\u8f93\u51fa\u8f6c\u6362\u4e3a\u70b9\u4e91\u7684\u9884\u6d4b\u3002\n        \u8ba1\u7b97\u91cd\u5efa\u7684\u70b9\u4e91\u548c\u539f\u59cb\u70b9\u4e91\u4e4b\u95f4\u7684\u635f\u5931\u3002\n        \u5982\u679cvis\u6807\u5fd7\u4e3a\u771fm\u751f\u6210\u53ef\u89c6\u5316\u6240\u9700\u7684\u6570\u636e\u5e76\u8fd4\u56de:\u5426\u5219m\u53ea\u8fd4\u56de\u635f\u5931\u3002\n        '''\n        neighborhood, center = self.group_divider(pts)\n\n        x_vis, mask = self.MAE_encoder(neighborhood, center)\n        B,_,C = x_vis.shape # B VIS C\n\n        pos_emd_vis = self.decoder_pos_embed(center[~mask]).reshape(B, -1, C)\n\n        pos_emd_mask = self.decoder_pos_embed(center[mask]).reshape(B, -1, C)\n\n        _,N,_ = pos_emd_mask.shape\n        mask_token = self.mask_token.expand(B, N, -1)\n        x_full = torch.cat([x_vis, mask_token], dim=1)\n        pos_full = torch.cat([pos_emd_vis, pos_emd_mask], dim=1)\n\n        x_rec = self.MAE_decoder(x_full, pos_full, N)\n\n        B, M, C = x_rec.shape\n        rebuild_points = self.increase_dim(x_rec.transpose(1, 2)).transpose(1, 2).reshape(B * M, -1, 3)  # B M 1024\n\n        gt_points = neighborhood[mask].reshape(B*M,-1,3)\n        loss1 = self.loss_func(rebuild_points, gt_points)\n</code></pre> <p>forward\u65b9\u6cd5\u4e2d,  \u9996\u5148\u62ff\u5230\u4e2d\u5fc3\u70b9\u4ee5\u53ca\u5bf9\u5e94\u7684neighborhoods, \u7136\u540e\u653e\u8fdb\u5e26\u6709\u63a9\u7801\u529f\u80fd\u7684embedding+encoder, \u5f97\u5230\u6f5c\u7a7a\u95f4\u5f62\u5f0f\u7684\u4e14\u53ef\u89c1\u7684\u7f16\u7801\u5668\u4ea7\u51fa\u7684tokens(\u539f\u8bba\u6587\u56fe\u7247\u4e2d\u7684\u7eff\u8272\u65b9\u5757, <code>x_vis</code>), \u4ee5\u53ca\u62ff\u5230\u63a9\u7801\u7684\u70b9\u7684\u5168\u5c40\u5f15\u7d22:</p> <pre><code>neighborhood, center = self.group_divider(pts)\nx_vis, mask = self.MAE_encoder(neighborhood, center)\nB,_,C = x_vis.shape # B VIS C\n</code></pre> <p>\u7136\u540e\u6309\u7167\u8bba\u6587, \u5c06center\u4e2d\u88ab\u63a9\u7801\u7684\u548c\u4e0d\u88ab\u63a9\u7801\u7684\u4e2d\u5fc3\u70b9\u90fd\u8fdb\u884cpositional embedding, \u5e76\u7528N\u5b57\u6bcd\u4ee3\u8868\u88ab\u63a9\u7801\u7684\u4e2d\u5fc3\u70b9\u7684\u6570\u91cf:</p> <pre><code>pos_emd_vis = self.decoder_pos_embed(center[~mask]).reshape(B, -1, C)\npos_emd_mask = self.decoder_pos_embed(center[mask]).reshape(B, -1, C)\n_,N,_ = pos_emd_mask.shape\n</code></pre> <p>\u4e3a\u4e86\u5c06\u90a3\u4e9b\u88ab\u63a9\u7801\u7684\u90e8\u5206\u987a\u5229\u6254\u8fdbdecoder, \u7528\u4e0b\u9762\u8fd9\u4e2a\u5f0f\u5b50\u521b\u9020\u51fa\u4e00\u5806\u76840, \u7136\u540e\u8fdb\u884cexpand\u548ccat\u5b9e\u73b0decoder\u7684\u603b\u8f93\u5165:</p> <p><code>self.mask_token = nn.Parameter(torch.zeros(1, 1, self.trans_dim))</code></p> <p>\u5e76\u4e14\u6700\u540e\u4e5f\u662f\u5c06x_vis(\u7eff\u8272\u90e8\u5206)l\u548c\u672a\u89c1\u7684\u4f4d\u7f6e\u63a9\u7801\u62fc\u63a5;<code>x_full, pos_full</code>\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u9700\u8981\u8fdb\u5165transformer\u91cc\u9762\u7684; \u6700\u540e\u8fd9\u4e24\u4e2a\u90fd\u6254\u8fdbMAE_decoder</p> <p>\u6ce8\u610f: \u4e0b\u56fe\u4e2d\u6240\u6709\u7684token\u5176\u5b9e\u90fd\u5305\u542b\u4e24\u5c42\u4fe1\u606f: \u6f5c\u7a7a\u95f4\u5f62\u5f0f\u7684\u6570\u636e\u4ee5\u53ca\u4f4d\u7f6e\u5d4c\u5165\u4fe1\u606f; \u5176\u4e2dmasked\u5176\u5b9e\u662f\u6f5c\u7a7a\u95f4\u6570\u636e\u5168\u90fd\u662f0, \u4f46\u662f\u4f4d\u7f6e\u7f16\u7801\u90fd\u8fd8\u5728! </p> <pre><code>mask_token = self.mask_token.expand(B, N, -1)\nx_full = torch.cat([x_vis, mask_token], dim=1)\npos_full = torch.cat([pos_emd_vis, pos_emd_mask], dim=1)\nx_rec = self.MAE_decoder(x_full, pos_full, N)\n</code></pre> <p>\u6700\u540e, \u6570\u636e\u4ece\u6f5c\u7a7a\u95f4\u53d8\u4e3a\u6b63\u5e38\u4e09\u7ef4\u5f62\u5f0f, \u7136\u540e\u548cground_truth\u8fdb\u884c\u635f\u5931\u51fd\u6570(chamfer distance2)\u7684\u8ba1\u7b97, \u6700\u540e\u8fd4\u56de\u635f\u5931.</p> <pre><code>B, M, C = x_rec.shape\nrebuild_points = self.increase_dim(x_rec.transpose(1, 2)).transpose(1, 2).reshape(B * M, -1, 3)  \ngt_points = neighborhood[mask].reshape(B*M,-1,3)\nloss1 = self.loss_func(rebuild_points, gt_points)\nreturn loss1\n</code></pre> <p></p>"},{"location":"Blog/PointMAE/analysis.html#runner_pretrainpy","title":"\u8be6\u7ec6\u89e3\u8bfbrunner_pretrain.py","text":"<p>\u5b8c\u6574\u7684\u4ee3\u7801\u5728tools/runner_pretrain.py </p>"},{"location":"Blog/PointMAE/analysis.html#_2","title":"\u51c6\u5907\u5de5\u4f5c","text":"<p>\u9996\u5148, \u6570\u636etransform\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5904\u7406\u6570\u636e\u4ee5\u83b7\u5f97\u66f4\u591a\u53ef\u7528\u6570\u636e\u7684\u65b9\u5f0f, \u4e5f\u53ef\u4ee5\u63d0\u9ad8\u9c81\u68d2\u6027, \u4f7f\u7528\u7684\u65b9\u5f0f\u662f<code>transforms.Compose([])</code></p> <pre><code>train_transforms = transforms.Compose(\n    [\n        # data_transforms.PointcloudScale(),\n        # data_transforms.PointcloudRotate(),\n        # data_transforms.PointcloudRotatePerturbation(),\n        # data_transforms.PointcloudTranslate(),\n        # data_transforms.PointcloudJitter(),\n        # data_transforms.PointcloudRandomInputDropout(),\n        data_transforms.PointcloudScaleAndTranslate(),\n    ]\n)\n</code></pre> <p>\u7136\u540e\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51c6\u786e\u5ea6\u5ea6\u91cf\u7c7b: </p> <pre><code>class Acc_Metric: # \u5b9a\u4e49\u51c6\u786e\u5ea6\u5ea6\u91cf\u7c7b\n    def __init__(self, acc = 0.):\n        if type(acc).__name__ == 'dict':\n            self.acc = acc['acc']\n        else:\n            self.acc = acc\n\n    def better_than(self, other):\n        if self.acc &gt; other.acc: # \u5982\u679c\u5f53\u524d\u5b9e\u4f8b\u7684acc\u9ad8\u4e8e\u4f20\u5165\u5b9e\u4f8b\u7684acc\n            return True\n        else:\n            return False\n\n    def state_dict(self): # \u83b7\u53d6\u5f53\u524d\u5b9e\u4f8b\u7684\u72b6\u6001\u5b57\u5178\n        _dict = dict()\n        _dict['acc'] = self.acc # \u5c06acc\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d \n        return _dict\n</code></pre> <p>\u7136\u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8bc4\u4f30\u51fd\u6570: </p> <pre><code>def evaluate_svm(train_features, train_labels, test_features, test_labels):\n    # \u4f7f\u7528SVM\u8fdb\u884c\u8bc4\u4f30\u7684\u51fd\u6570\n    clf = LinearSVC() # \u521b\u5efaLinearSVC\u5206\u7c7b\u5668\n    clf.fit(train_features, train_labels) # \u7528\u8bad\u7ec3\u7279\u5f81\u548c\u6807\u7b7e\u62df\u5408\u5206\u7c7b\u5668\n    pred = clf.predict(test_features) # \u4f7f\u7528\u6d4b\u8bd5\u7279\u5f81\u8fdb\u884c\u9884\u6d4b\n    # pred \u662f\u4e00\u4e2a\u5305\u542b\u6d4b\u8bd5\u96c6\u6bcf\u4e2a\u6837\u672c\u9884\u6d4b\u7ed3\u679c\u7684 numpy \u6570\u7ec4\u3002\n    return np.sum(test_labels == pred) * 1. / pred.shape[0]\n    # pred.shape[0] \u662f pred \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\uff0c\u5373\u9884\u6d4b\u7ed3\u679c\u7684\u6837\u672c\u6570\u91cf\n</code></pre>"},{"location":"Blog/PointMAE/analysis.html#def-run_net","title":"def run_net","text":"<p>\u9996\u5148\u662f\u51c6\u5907\u597ddataset and dataloader, \u5e76\u4e14\u521b\u5efapointmae\u7f51\u7edc\u5b9e\u4f8b; \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u6a21\u578b\u5b9e\u4f8b\u7684\u521b\u5efa\u4e5f\u9700\u8981\u6307\u660e\u662f\u5728GPU\u4e0a\u9762:</p> <pre><code>def run_net(args, config, train_writer=None, val_writer=None):\n    logger = get_logger(args.log_name)\n    # \u6784\u5efa\u6570\u636e\u96c6\n    (train_sampler, train_dataloader), (_, test_dataloader),= builder.dataset_builder(args, config.dataset.train), \\\n                                                            builder.dataset_builder(args, config.dataset.val)\n    (_, extra_train_dataloader)  = builder.dataset_builder(args, config.dataset.extra_train) if config.dataset.get('extra_train') else (None, None)\n    # build model\n    base_model = builder.model_builder(config.model)\n    if args.use_gpu:\n        base_model.to(args.local_rank) # \u5c06\u6a21\u578b\u53d1\u9001\u5230\u6307\u5b9a\u7684GPU\n</code></pre> <p>\u7136\u540e\u5b9a\u4e49\u4e00\u4e9b\u53c2\u6570: epoch\u6570\u91cf, \u51c6\u786e\u5ea6\u5ea6\u91cf\u5b9e\u4f8b(\u4e00\u4e2a\u8be6\u7ec6\u8bb0\u5f55, \u4e00\u4e2a\u8bb0\u5f55\u6700\u4f73)</p> <pre><code>start_epoch = 0 # \u4ece\u7b2c0\u4e2aepoch\u5f00\u59cb\n    best_metrics = Acc_Metric(0.) # \u521d\u59cb\u5316\u6700\u4f73\u51c6\u786e\u5ea6\u5ea6\u91cf\u4e3a0\n    metrics = Acc_Metric(0.) # \u521d\u59cb\u5316\u5f53\u524d\u51c6\u786e\u5ea6\u5ea6\u91cf\u4e3a0\n</code></pre> <p>\u5173\u4e8e\u4ece\u68c0\u67e5\u70b9\u7ee7\u7eed\u5f00\u59cb\u8bad\u7ec3, \u5982\u679c\u8bad\u7ec3\u4e00\u90e8\u5206\u4e2d\u65ad\u7136\u540e\u5c31\u8bad\u7ec3, \u90a3\u4e48epoch, metric\u90fd\u9700\u8981\u83b7\u53d6\u5230\u4e4b\u524d\u7684\u6570\u636e, \u5e76\u4e14\u6a21\u578b\u7684parameters\u90fd\u8981\u83b7\u53d6\u5230\u4e4b\u524d\u72b6\u6001\u7684\u6570\u636e; \u800c\u8bad\u7ec3\u4ece0\u5f00\u59cb, \u90a3\u4e48\u5c31\u628a\u521d\u59cbckpts\u76f8\u5173\u6570\u636e\u8d4b\u7ed9\u6a21\u578b:</p> <pre><code>if args.resume: # \u5982\u679c\u6709\u6062\u590d\u53c2\u6570\n        start_epoch, best_metric = builder.resume_model(base_model, args, logger = logger) # \u6062\u590d\u6a21\u578b\u548c\u6700\u4f73\u51c6\u786e\u5ea6\n        best_metrics = Acc_Metric(best_metric) # \u66f4\u65b0\u6700\u4f73\u51c6\u786e\u5ea6\u5ea6\u91cf\n    elif args.start_ckpts is not None: # \u5982\u679c\u6709\u5f00\u59cb\u68c0\u67e5\u70b9\u53c2\u6570\n        builder.load_model(base_model, args.start_ckpts, logger = logger)\n</code></pre> <p>\u63a5\u4e0b\u6765\u5b9e\u73b0\u4e86GPU(\u5206\u5e03)\u5e76\u884c\u8ba1\u7b97, \u4e3b\u8981\u662f\u5c06\u6a21\u578b\u7684\u7c7b\u578b\u8fdb\u884c\u8f6c\u6362; \u6ce8\u610f\u5230\u5f52\u4e00\u5316\u7c7b\u522b\u7684\u8bbe\u5b9a(\u662f\u5426\u662f\u540c\u6b65\u6279\u91cf\u5f52\u4e00\u5316)</p> <p>\u540c\u6b65\u6279\u91cf\u5f52\u4e00\u5316\uff08Synchronized Batch Normalization\uff0cSyncBN\uff09\u662f\u6279\u91cf\u5f52\u4e00\u5316\uff08Batch Normalization\uff0cBN\uff09\u7684\u4e00\u79cd\u53d8\u4f53\uff0c\u5b83\u5728\u591aGPU\u8bad\u7ec3\u6216\u5206\u5e03\u5f0f\u8bad\u7ec3\u73af\u5883\u4e2d\u4f7f\u7528\uff0c\u76ee\u7684\u662f\u4fdd\u6301\u4e0d\u540cGPU\u4e4b\u95f4\u7684\u5f52\u4e00\u5316\u53c2\u6570\uff08\u5747\u503c\u548c\u65b9\u5dee\uff09\u540c\u6b65\u3002</p> <pre><code>if args.distributed:\n        # \u540c\u6b65\u6279\u91cf\u5f52\u4e00\u5316\n        if args.sync_bn:\n            base_model = torch.nn.SyncBatchNorm.convert_sync_batchnorm(base_model) # \u8f6c\u6362\u4e3a\u540c\u6b65\u6279\u91cf\u5f52\u4e00\u5316\u6a21\u578b\n            print_log('Using Synchronized BatchNorm ...', logger = logger)\n        base_model = nn.parallel.DistributedDataParallel(base_model, device_ids=[args.local_rank % torch.cuda.device_count()], find_unused_parameters=True)\n        print_log('Using Distributed Data parallel ...' , logger = logger)\n    else:\n        print_log('Using Data parallel ...' , logger = logger)\n        base_model = nn.DataParallel(base_model).cuda()\n</code></pre> <p>\u90a3\u4e48\u6a21\u578b\u76f8\u5173\u90fd\u8bbe\u5b9a\u597d\u4e86, \u4f18\u5316\u5668\u548c\u8c03\u5ea6\u5668\u7d27\u8ddf\u4e0a:</p> <pre><code>optimizer, scheduler = builder.build_opti_sche(base_model, config)\n\n    if args.resume: # \u5982\u679c\u6062\u590d\u8bad\u7ec3\n        builder.resume_optimizer(optimizer, args, logger = logger)\n</code></pre> <p>\u56e0\u4e3a\u8003\u8651\u5230\u53ef\u80fd\u68af\u5ea6\u4f1a\u7ee7\u627f\u4e4b\u524d\u8bad\u7ec3\u7684\u68af\u5ea6\u4ece\u800c\u7ee7\u7eed\u8bad\u7ec3, \u9996\u5148\u5c31\u662f\u8981\u6e05\u7a7a\u68af\u5ea6; \u4e8b\u5b9e\u4e0a, \u5c31\u7b97\u4e0d\u8003\u8651\u7ee7\u7eed\u8bad\u7ec3\u7684\u95ee\u9898, \u6e05\u7a7a\u68af\u5ea6\u4e5f\u662f\u597d\u4e60\u60ef: </p> <p><code>base_model.zero_grad() # \u6e05\u7a7a\u68af\u5ea6</code></p> <p>\u63a5\u4e0b\u6765, \u5f00\u59cb\u5b9a\u4e49\u4e00\u4e2a\u5faa\u73af\u91cc\u9762\u5e72\u4ec0\u4e48:</p> <p>\u9996\u5148\u662f\u5173\u4e8e\u6570\u636e\u662f\u5426\u5206\u5e03\u7684\u95ee\u9898, \u5982\u679c\u662f\u5206\u5e03\u5f0f, \u90a3\u4e48\u6570\u636e\u80af\u5b9a\u662f\u4f1a\u5747\u5206\u7684, \u8fd9\u65b9\u9762\u8981\u8bbe\u7f6e\u4e00\u4e0b; \u7136\u540e\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u6a21\u5f0f, \u521d\u59cb\u5316\u5faa\u73af\u5f00\u59cb\u65f6\u95f4\u6233(epoch and batch), \u5e76\u4e14\u4e5f\u4f7f\u7528\u5ea6\u91cf\u7c7b\u6765\u8bb0\u5f55\u65f6\u95f4, \u7136\u540e\u5c31\u662f\u521d\u59cb\u5316loss\u5ea6\u91cf\u7c7b\u5e76\u4e14\u521d\u59cb\u5316\u8fed\u4ee3\u6b21\u6570(\u8bb0\u5f55\u5904\u7406\u4e86\u591a\u5c11batch), \u5e76\u4e14\u8981\u83b7\u77e5\u8981\u5904\u7406\u591a\u5c11\u6279\u6b21: </p> <pre><code>for epoch in range(start_epoch, config.max_epoch + 1):\n        if args.distributed:\n            train_sampler.set_epoch(epoch) # \u8bbe\u7f6eepoch\uff0c\u7528\u4e8e\u6570\u636e\u91c7\u6837\n        base_model.train() # \u8bbe\u7f6e\u6a21\u578b\u4e3a\u8bad\u7ec3\u6a21\u5f0f\n\n        epoch_start_time = time.time() # \u8bb0\u5f55epoch\u5f00\u59cb\u65f6\u95f4\n        batch_start_time = time.time() # \u8bb0\u5f55batch\u5f00\u59cb\u65f6\u95f4\n        batch_time = AverageMeter() # \u521d\u59cb\u5316batch\u65f6\u95f4\u5ea6\u91cf\u5668\n        data_time = AverageMeter() # \u521d\u59cb\u5316\u6570\u636e\u52a0\u8f7d\u65f6\u95f4\u5ea6\u91cf\u5668\n        losses = AverageMeter(['Loss']) # \u521d\u59cb\u5316\u635f\u5931\u5ea6\u91cf\u5668\n\n        num_iter = 0 # \u521d\u59cb\u5316\u8fed\u4ee3\u6b21\u6570\n\n        base_model.train()  # set model to training mode\n        n_batches = len(train_dataloader) # \u83b7\u53d6\u8bad\u7ec3\u6570\u636e\u6279\u6b21\u6570\u91cf\n</code></pre> <p>\u90a3\u4e48\u4e0b\u9762\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2abatch\u91cc\u9762\u8981\u5e72\u4e9b\u4ec0\u4e48: </p> <p>\u9996\u5148\u662f\u83b7\u5f97\u8fd0\u884c\u5230\u8fd9\u91cc\u7684\u65f6\u5019\u7684\u65f6\u95f4\u6233, \u4ece\u800c\u914d\u5408\u4e4b\u524d\u7684\u65f6\u95f4\u6233\u8ba1\u7b97\u52a0\u8f7d\u6570\u636e\u7684\u65f6\u95f4;\u7136\u540e\u5c31\u662f\u83b7\u53d6\u5230\u70b9\u6570\u91cf, \u6570\u636e\u96c6\u540d\u5b57, \u7b49\u7b49\u53c2\u6570; \u786e\u5b9a\u4e86\u5904\u7406\u7684\u6570\u636e\u96c6\u7c7b\u578b, \u5728\u6838\u5b9e\u4e86\u786e\u5b9e\u4e00\u6279\u6b21\u5904\u7406\u70b9\u6570\u662f\u6b63\u786e\u7684\u4e4b\u540e, \u5bf9\u70b9\u8fdb\u884c\u4e4b\u524d\u5b9a\u4e49\u8fc7\u7684transforms\u64cd\u4f5c. \u83b7\u5f97\u5230\u4e86\u5c06\u8981\u5904\u7406\u7684\u70b9\u4e4b\u540e, \u4e22\u8fdb\u6a21\u578b\u91cc\u9762, \u5c31\u80fd\u8fdb\u884cbackward()\u53cd\u5411\u4f20\u64ad(\u6ce8\u610f\u5982\u679c\u662f\u5206\u5e03\u5f0f, \u90a3\u4e48\u5404\u4e2aLoss\u53d6\u5e73\u5747\u800c\u4e0d\u662f\u76f8\u52a0), \u5728\u786e\u5b9a\u5904\u7406\u5b8c\u8981\u6c42\u89c4\u5b9a\u7684\u6279\u6b21\u6570\u91cf\u7684\u6570\u636e\u4e4b\u540e, \u914d\u5957\u4e0a\u4f18\u5316\u5668\u7684\u66f4\u65b0(\u4ece\u800c\u66f4\u65b0model\u6570\u636e), \u6e05\u7a7a\u68af\u5ea6. \u4e4b\u540e, \u5982\u679c\u662f\u5206\u5e03\u8ba1\u7b97, \u90a3\u4e48\u8981\u6536\u96c6\u6bcf\u4e2a\u8282\u70b9\u7684\u635f\u5931\u503c\u5e76\u8fdb\u884c\u7d2f\u52a0\u6216\u5e73\u5747\u7b49\u64cd\u4f5c, \u786e\u4fdd\u6240\u6709\u8282\u70b9\u90fd\u6709\u76f8\u540c\u7684\u603b\u635f\u5931\u503c, \u7136\u540e\u8bb0\u5f55\u8fdbMetric; \u5982\u679c\u4e0d\u662f, \u76f4\u63a5\u7ed3\u679c\u8bb0\u5f55\u8fdbMetric. \u6700\u540e\u5224\u65ad\u5206\u5e03\u5f0f\u540c\u6b65\u662f\u5426\u5b8c\u6210, \u5e76\u4e14\u5c06\u76f8\u5173\u6570\u636e\u8bb0\u5f55\u4e0b\u6765. \u6700\u540e\u7684\u6700\u540e, \u83b7\u5f97\u65f6\u95f4\u6233, \u8ba1\u7b97\u51fa\u6765\u4e00\u4e2abatch\u6240\u9700\u8981\u7684\u65f6\u95f4, \u5e76\u4e14\u65f6\u95f4\u6233\u8981\u91cd\u7f6e.  </p> <p>\u5f53\u7136\u8fd9\u91cc\u4e5f\u8bbe\u7f6e: 20\u4e2a\u6279\u6b21\u6253\u5370\u4e00\u6b21\u8fdb\u5ea6, \u5305\u62ec\u5f53\u524depoch\u3001\u6279\u6b21\u6570\u3001\u6279\u6b21\u65f6\u95f4\u3001\u6570\u636e\u52a0\u8f7d\u65f6\u95f4\u3001\u635f\u5931\u503c\u548c\u5f53\u524d\u5b66\u4e60\u7387\u3002</p> <pre><code>for epoch in range(start_epoch, config.max_epoch + 1):\n        if args.distributed:\n            train_sampler.set_epoch(epoch) # \u8bbe\u7f6eepoch\uff0c\u7528\u4e8e\u6570\u636e\u91c7\u6837\n        base_model.train() # \u8bbe\u7f6e\u6a21\u578b\u4e3a\u8bad\u7ec3\u6a21\u5f0f\n\n        epoch_start_time = time.time() # \u8bb0\u5f55epoch\u5f00\u59cb\u65f6\u95f4\n        batch_start_time = time.time() # \u8bb0\u5f55batch\u5f00\u59cb\u65f6\u95f4\n        batch_time = AverageMeter() # \u521d\u59cb\u5316batch\u65f6\u95f4\u5ea6\u91cf\u5668\n        data_time = AverageMeter() # \u521d\u59cb\u5316\u6570\u636e\u52a0\u8f7d\u65f6\u95f4\u5ea6\u91cf\u5668\n        losses = AverageMeter(['Loss']) # \u521d\u59cb\u5316\u635f\u5931\u5ea6\u91cf\u5668\n\n        num_iter = 0 # \u521d\u59cb\u5316\u8fed\u4ee3\u6b21\u6570\n\n        base_model.train()  # set model to training mode\n        n_batches = len(train_dataloader) # \u83b7\u53d6\u8bad\u7ec3\u6570\u636e\u6279\u6b21\u6570\u91cf\n        for idx, (taxonomy_ids, model_ids, data) in enumerate(train_dataloader):\n            num_iter += 1\n            n_itr = epoch * n_batches + idx # \u8ba1\u7b97\u5f53\u524d\u8fed\u4ee3\u7684\u7f16\u53f7\n\n            data_time.update(time.time() - batch_start_time) # \u66f4\u65b0\u6570\u636e\u52a0\u8f7d\u65f6\u95f4\n            npoints = config.dataset.train.others.npoints # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6bcf\u6279\u6b21\u7684\u70b9\u6570\n            dataset_name = config.dataset.train._base_.NAME # \u83b7\u53d6\u6570\u636e\u96c6\u540d\u79f0\n            if dataset_name == 'ShapeNet':\n                points = data.cuda() # \u5c06\u6570\u636e\u53d1\u9001\u5230GPU\n            elif dataset_name == 'ModelNet':\n                points = data[0].cuda() # \u83b7\u53d6\u70b9\u4e91\u6570\u636e\u5e76\u53d1\u9001\u5230GPU\n                points = misc.fps(points, npoints) # \u4f7f\u7528Farthest Point Sampling\u91c7\u6837 \n            else:\n                raise NotImplementedError(f'Train phase do not support {dataset_name}')\n\n            assert points.size(1) == npoints # \u786e\u4fdd\u70b9\u6570\u5339\u914d\n            points = train_transforms(points) # \u5bf9\u70b9\u4e91\u8fdb\u884c\u53d8\u6362\n            loss = base_model(points) # \u8ba1\u7b97\u635f\u5931\n            try:\n                loss.backward()\n                # print(\"Using one GPU\")\n            except:\n                loss = loss.mean()\n                loss.backward()\n                # print(\"Using multi GPUs\")\n\n            # forward\n            if num_iter == config.step_per_update:\n            # \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5b8c\u6210\u4e86\u4e00\u6b21\u53c2\u6570\u66f4\u65b0\u6240\u9700\u7684\u6240\u6709\u6279\u6b21\u7684\u5904\u7406\u3002\n            # num_iter\u662f\u5f53\u524d\u7684\u8bad\u7ec3\u8fed\u4ee3\u6b21\u6570\uff0c\u800cconfig.step_per_update\u662f\u4ece\u914d\u7f6e\u4e2d\u83b7\u53d6\u7684\u6b65\u957f\n                num_iter = 0 # \u91cd\u7f6e\u8fed\u4ee3\u6b21\u6570\n                optimizer.step() # \u66f4\u65b0\u4f18\u5316\u5668\n                base_model.zero_grad() # \u6e05\u7a7a\u68af\u5ea6\n\n            if args.distributed:\n                # \u5c06\u6240\u6709\u8282\u70b9\u8ba1\u7b97\u7684\u635f\u5931\u6c47\u603b\uff08reduce\uff09\u6210\u4e00\u4e2a\u603b\u635f\u5931\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u6d89\u53ca\u5230\u8de8\u8282\u70b9\u901a\u4fe1\uff0c\n                # \u4ee5\u6536\u96c6\u6bcf\u4e2a\u8282\u70b9\u7684\u635f\u5931\u503c\u5e76\u8fdb\u884c\u7d2f\u52a0\u6216\u5e73\u5747\u7b49\u64cd\u4f5c\uff0c\u786e\u4fdd\u6240\u6709\u8282\u70b9\u90fd\u6709\u76f8\u540c\u7684\u603b\u635f\u5931\u503c\u3002\n                loss = dist_utils.reduce_tensor(loss, args)\n                # \u4ece\u635f\u5931\u5f20\u91cf\uff08Tensor\uff09\u4e2d\u63d0\u53d6\u51faPython\u6570\u503c\u3002\n                # \u5728PyTorch\u4e2d\uff0c\u5f20\u91cf\uff08Tensor\uff09\u662f\u591a\u7ef4\u7684\u6570\u636e\u6570\u7ec4\uff0c\u800c.item()\u65b9\u6cd5\u5c06\u8fd9\u4e2a\u5f20\u91cf\u7f29\u51cf\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u6807\u91cf\u503c\u3002\n                losses.update([loss.item()*1000])\n                # \u635f\u5931\u503c\u901a\u5e38\u5f88\u5c0f\uff0c\u4e58\u4ee51000\u53ef\u4ee5\u907f\u514d\u5c0f\u6570\u70b9\u540e\u5f88\u591a\u4f4d\u7684\u663e\u793a\u3002\n            else:\n                losses.update([loss.item()*1000])\n\n\n            if args.distributed:\n                torch.cuda.synchronize()\n                # \u786e\u4fdd\u6240\u6709GPU\u7684\u64cd\u4f5c\u5728\u7ee7\u7eed\u4e4b\u524d\u90fd\u5df2\u5b8c\u6210\uff0c\u4ee5\u907f\u514d\u6f5c\u5728\u7684\u540c\u6b65\u95ee\u9898\u3002\n\n\n            if train_writer is not None:\n                # \u8bb0\u5f55\u5f53\u524d\u6279\u6b21\u7684\u635f\u5931\u548c\u5f53\u524d\u7684\u5b66\u4e60\u7387\u3002\n                train_writer.add_scalar('Loss/Batch/Loss', loss.item(), n_itr)\n                train_writer.add_scalar('Loss/Batch/LR', optimizer.param_groups[0]['lr'], n_itr)\n            batch_time.update(time.time() - batch_start_time)\n            batch_start_time = time.time()\n\n            if idx % 20 == 0:\n                print_log('[Epoch %d/%d][Batch %d/%d] BatchTime = %.3f (s) DataTime = %.3f (s)                  Losses = %s lr = %.6f' % (epoch, config.max_epoch, idx + 1, n_batches,                          batch_time.val(), data_time.val(),\n                ['%.4f' % l for l in losses.val()], optimizer.param_groups[0]['lr']), logger = logger)\n</code></pre> <p>\u4e00\u4e2aepoch\u7ed3\u675f\u4e86\u4e4b\u540e: \u9996\u5148\u662f\u8c03\u5ea6\u5668\u8c03\u6574\u5b66\u4e60\u7387, \u6ce8\u610f\u5982\u679c\u662f\u5206\u5e03\u5f0f, \u90a3\u4e48\u8c03\u5ea6\u5668\u91cc\u9762\u5b58\u50a8\u5b66\u4e60\u7387\u7684\u5f62\u5f0f\u662f\u5217\u8868; \u7136\u540e\u83b7\u5f97\u65f6\u95f4\u6233, \u8ba1\u7b97\u4e00\u4e2aepoch\u6240\u9700\u8981\u7684\u65f6\u95f4; \u6700\u540e\u5c31\u662f\u4e00\u4e9b\u8bb0\u5f55, \u4fdd\u5b58\u6a21\u578b\u53c2\u6570, \u5bfc\u51fa\u6a21\u578b\u53c2\u6570\u4e4b\u7c7b\u7684: </p> <pre><code>if isinstance(scheduler, list):\n            for item in scheduler:\n                item.step(epoch)\n        else:\n            scheduler.step(epoch) \n        epoch_end_time = time.time() # \u8bb0\u5f55\u6bcf\u4e2aepoch\u7ed3\u675f\u7684\u65f6\u95f4\u3002\n\n        if train_writer is not None: # \u5982\u679c\u63d0\u4f9b\u4e86TensorBoard\u7684\u5199\u5165\u5668\uff0c\u8bb0\u5f55\u6574\u4e2aepoch\u7684\u5e73\u5747\u635f\u5931\u3002\n            train_writer.add_scalar('Loss/Epoch/Loss_1', losses.avg(0), epoch)\n        # \u6253\u5370\u6bcf\u4e2aepoch\u7684\u8bad\u7ec3\u603b\u7ed3\uff0c\u5305\u62ecepoch\u7f16\u53f7\u3001epoch\u6240\u9700\u65f6\u95f4\u3001\u5e73\u5747\u635f\u5931\u548c\u5f53\u524d\u5b66\u4e60\u7387\u3002\n        print_log('[Training] EPOCH: %d EpochTime = %.3f (s) Losses = %s lr = %.6f' %\n            (epoch,  epoch_end_time - epoch_start_time, ['%.4f' % l for l in losses.avg()],\n             optimizer.param_groups[0]['lr']), logger = logger)\n\n        # if epoch % args.val_freq == 0 and epoch != 0:\n        #     # Validate the current model\n        #     metrics = validate(base_model, extra_train_dataloader, test_dataloader, epoch, val_writer, args, config, logger=logger)\n        #\n        #     # Save ckeckpoints\n        #     if metrics.better_than(best_metrics):\n        #         best_metrics = metrics\n        #         builder.save_checkpoint(base_model, optimizer, epoch, metrics, best_metrics, 'ckpt-best', args, logger = logger)\n\n        # \u4fdd\u5b58\u5f53\u524depoch\u7684\u6a21\u578b\u68c0\u67e5\u70b9\u3002\u8fd9\u4e2a\u68c0\u67e5\u70b9\u4f1a\u4e0d\u65ad\u66f4\u65b0\n        builder.save_checkpoint(base_model, optimizer, epoch, metrics, best_metrics, 'ckpt-last', args, logger = logger)\n        if epoch % 25 ==0 and epoch &gt;=250: # \u5982\u679c\u5f53\u524depoch\u662f25\u7684\u500d\u6570\u5e76\u4e14\u5927\u4e8e\u7b49\u4e8e250\uff0c\u4fdd\u5b58\u4e00\u4e2a\u989d\u5916\u7684\u68c0\u67e5\u70b9\u3002\n            builder.save_checkpoint(base_model, optimizer, epoch, metrics, best_metrics, f'ckpt-epoch-{epoch:03d}', args, logger=logger)\n        # if (config.max_epoch - epoch) &lt; 10:\n        #     builder.save_checkpoint(base_model, optimizer, epoch, metrics, best_metrics, f'ckpt-epoch-{epoch:03d}', args, logger = logger)\n    # \u5173\u95edTensorBoard\u7684\u5199\u5165\u5668\u3002\n    if train_writer is not None:\n        train_writer.close()\n    if val_writer is not None:\n        val_writer.close()\n</code></pre>"},{"location":"Blog/PointMAE/analysis.html#def-validate","title":"def validate","text":"<p>\u8fdb\u5165\u9a8c\u8bc1\u96c6\u9636\u6bb5, \u90a3\u4e48\u9996\u5148\u5148\u521d\u59cb\u5316\u4e00\u5806\u50a8\u5b58\u6570\u636e\u7684\u5217\u8868, \u7136\u540e\u6307\u5b9a\u7528\u4e8e\u9a8c\u8bc1\u7684\u70b9: </p> <pre><code>def validate(base_model, extra_train_dataloader, test_dataloader, epoch, val_writer, args, config, logger = None):\n    # validate\u51fd\u6570\u7528\u4e8e\u5728\u6bcf\u4e2aepoch\u540e\u8bc4\u4f30\u6a21\u578b\u7684\u6027\u80fd\n    print_log(f\"[VALIDATION] Start validating epoch {epoch}\", logger = logger)\n    base_model.eval()  # set model to eval mode\n    # \u6536\u96c6\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u7279\u5f81\u548c\u6807\u7b7e\uff0c\u7528\u4e8e\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u5206\u7c7b\u5668\u7684\u8bad\u7ec3\u548c\u6d4b\u8bd5\uff1a\n    test_features = []\n    test_label = []\n\n    train_features = []\n    train_label = []\n    npoints = config.dataset.train.others.npoints\n</code></pre> <p>\u7136\u540e\u5c31\u662f<code>with torch.no_grad():</code>\u8d77\u624b(\u9a8c\u8bc1\u7ecf\u5178\u64cd\u4f5c)\u4ee5\u7981\u6b62\u68af\u5ea6\u7684\u8ba1\u7b97(\u56e0\u4e3a\u4ec5\u4ec5\u662f\u7528\u6a21\u578b\u8f93\u51fa\u7684\u9884\u6d4b\u53bb\u9a8c\u8bc1, \u800c\u4e0d\u662f\u8981\u7b97Loss)</p> <p>\u7136\u540e\u4e3a\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684evaluate_svm(\u4f7f\u7528\u7ebf\u6027\u652f\u6301\u5411\u91cf\u673a\uff08LinearSVC\uff09\u6765\u8bc4\u4f30\u7279\u5f81\u7684\u5206\u7c7b\u6027\u80fd\uff1a), \u8981\u83b7\u5f97\u76f8\u5173\u7684feature and labels from train and test. </p> <p>\u6ce8\u610f, \u9a8c\u8bc1\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fShapeNet55\u6570\u636e\u96c6, \u5b83\u662f3D\u6570\u636e\u96c6, \u56e0\u6b64\u8981\u5148fps\u9009\u51fa1024(npoints)\u4e2a\u70b9, \u7136\u540e\u6254\u8fdb\u6a21\u578b</p> <p><code>.detach()</code> \u51fd\u6570\u7528\u4e8e\u4ece\u5f53\u524d\u7684\u8ba1\u7b97\u56fe\u4e2d\u5206\u79bb\u51fa\u5f20\u91cf\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f20\u91cf\uff0c\u8be5\u5f20\u91cf\u4e0d\u4f1a\u53c2\u4e0e\u68af\u5ea6\u8ba1\u7b97\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u521b\u5efa\u4e86\u539f\u5f20\u91cf\u7684\u526f\u672c\uff0c\u4f46\u8fd9\u4e2a\u526f\u672c\u4e0d\u4f1a\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\u8ddf\u8e2a\u68af\u5ea6\u3002\u5728\u6a21\u578b\u8bc4\u4f30\uff08\u5373\u6a21\u578b\u63a8\u65ad\uff09\u9636\u6bb5\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8ba1\u7b97\u68af\u5ea6\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528 <code>.detach()</code> \u6765\u51cf\u5c11\u5185\u5b58\u6d88\u8017\u3002</p> <pre><code>with torch.no_grad():\n    # no_grad()\u662fPyTorch\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\n    # \u7528\u4e8e\u5728\u4ee3\u7801\u5757\u5185\u90e8\u5173\u95ed\u68af\u5ea6\u8ba1\u7b97\uff0c\u8fd9\u6709\u52a9\u4e8e\u51cf\u5c11\u5185\u5b58\u6d88\u8017\u5e76\u52a0\u5feb\u8ba1\u7b97\u901f\u5ea6\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u8ba1\u7b97\u7528\u4e8e\u53cd\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u3002\n        for idx, (taxonomy_ids, model_ids, data) in enumerate(extra_train_dataloader):\n            # \u6570\u636e\u79fb\u52a8\u5230GPU\u4e0a\u9762\n            points = data[0].cuda()\n            label = data[1].cuda()\n\n            points = misc.fps(points, npoints)\n\n            assert points.size(1) == npoints\n            # \u8c03\u7528\u6a21\u578b\u4ee5\u83b7\u53d6\u8f93\u5165\u70b9\u4e91\u7684\u7279\u5f81\u8868\u793a\uff0c\u5176\u4e2dnoaug=True\u6307\u793a\u6a21\u578b\u5728\u751f\u6210\u7279\u5f81\u65f6\u4e0d\u5e94\u7528\u4efb\u4f55\u6570\u636e\u589e\u5f3a\u3002\n            feature = base_model(points, noaug=True)\n            target = label.view(-1)\n\n            train_features.append(feature.detach())\n            train_label.append(target.detach())\n\n        for idx, (taxonomy_ids, model_ids, data) in enumerate(test_dataloader):\n            points = data[0].cuda()\n            label = data[1].cuda()\n\n            points = misc.fps(points, npoints)\n            assert points.size(1) == npoints\n            feature = base_model(points, noaug=True)\n            # -1\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u53c2\u6570\uff0c\u5b83\u544a\u8bc9PyTorch\u4f60\u5e0c\u671b\u8be5\u7ef4\u5ea6\u7684\u5927\u5c0f\u7531\u5176\u4ed6\u7ef4\u5ea6\u7684\u5927\u5c0f\u6765\u81ea\u52a8\u63a8\u65ad\u3002\n            target = label.view(-1)\n            # \u5b58\u50a8\u7279\u5f81\u548c\u6807\u7b7e\n            test_features.append(feature.detach())\n            test_label.append(target.detach())\n</code></pre> <p>\u6536\u96c6\u5b8c\u4e4b\u540e, \u4f7f\u7528cat\u5408\u5e76\u4e3a\u5355\u5f20\u5f20\u91cf, \u5e76\u4e14\u8981\u8003\u8651\u5e76\u884c\u591a\u8282\u70b9\u7684\u60c5\u51b5, \u6700\u540e\u7528\u7ebf\u6027\u652f\u6301\u5411\u91cf\u673a\u8bc4\u4f30\u6027\u80fd+\u8bb0\u5f55, \u5e76\u6ce8\u610f\u540c\u6b65\u5316.</p> <pre><code> # \u4f7f\u7528\u7ebf\u6027\u652f\u6301\u5411\u91cf\u673a\uff08LinearSVC\uff09\u6765\u8bc4\u4f30\u7279\u5f81\u7684\u5206\u7c7b\u6027\u80fd\uff1a\n        svm_acc = evaluate_svm(train_features.data.cpu().numpy(), train_label.data.cpu().numpy(), test_features.data.cpu().numpy(), test_label.data.cpu().numpy())\n\n        print_log('[Validation] EPOCH: %d  acc = %.4f' % (epoch,svm_acc), logger=logger)\n\n        if args.distributed:\n            torch.cuda.synchronize()\n# Add testing results to TensorBoard\n    # \u51fd\u6570\u8fd4\u56de\u4e00\u4e2aAcc_Metric\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u5f53\u524depoch\u7684\u51c6\u786e\u5ea6\u5ea6\u91cf\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad\u662f\u5426\u4fdd\u5b58\u6a21\u578b\u7684\u68c0\u67e5\u70b9\uff1a\n    if val_writer is not None:\n        val_writer.add_scalar('Metric/ACC', svm_acc, epoch)\n\n    return Acc_Metric(svm_acc)\n</code></pre>"},{"location":"Blog/PointMAE/analysis.html#_3","title":"\u7ed3\u8bed","text":"<p>\u81f3\u6b64, Point-MAE\u6a21\u578b\u7684\u6784\u5efa\u5b8c\u5168\u7ed3\u675f, register to module (<code>@MODELS.register_module()</code>)</p> <p>\u5728\u8bad\u7ec3\u7684\u65f6\u5019, optimizer\u9009\u62e9\u4e86AdamW\u4f18\u5316\u5668, Scheduler\u9009\u62e9\u4e86CosLR\u6765\u8870\u51cf\u5b66\u4e60\u7387</p> <p>\u4e00\u5f00\u59cb\u8bfb\u4ee3\u7801, \u5341\u5206\u75db\u82e6, \u4f46\u662f\u8d8a\u8bfb\u6536\u83b7\u8d8a\u591a,\u76f4\u81f3\u7ec8\u4e8e\u7406\u89e3\u516b\u4e5d\u4e0d\u79bb\u5341. </p> <p>\u6700\u91cd\u8981\u7684\u8f6c\u6298\u70b9\u8fd8\u662f\u6211\u5076\u7136\u5728\u5206\u6790\u5b8cgithub\u4e0a\u9762\u4e00\u4efd\u5173\u4e8epytorch\u5b9e\u6218\u8bb2\u89e3\u7684\u4e00\u4efd\u4ee3\u7801: </p> <pre><code>import torch\nimport torch.nn as nn\nimport torchvision\nimport torchvision.transforms as transforms\n\n\n# Device configuration\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n# \u8fd9\u884c\u4ee3\u7801\u68c0\u67e5\u662f\u5426\u6709\u53ef\u7528\u7684CUDA\uff08GPU\uff09\uff0c\u5982\u679c\u6709\u5219\u4f7f\u7528GPU\u8fdb\u884c\u8bad\u7ec3\uff0c\u5426\u5219\u4f7f\u7528CPU\u3002\n# Hyper-parameters \ninput_size = 784 \n'''\nMNIST \u6570\u636e\u96c6\u4e2d\u7684\u624b\u5199\u6570\u5b57\u56fe\u50cf\u662f 28x28 \u50cf\u7d20\u7684\u3002\n\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u5168\u8fde\u63a5(fully connected)\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6bcf\u4e2a\u56fe\u50cf\u5c55\u5e73\u6210\u4e00\u4e2a\u4e00\u7ef4\u7684\u5411\u91cf\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u7f51\u7edc\u7684\u8f93\u5165\u3002\n'''\nhidden_size = 500\nnum_classes = 10\nnum_epochs = 5\nbatch_size = 100\nlearning_rate = 0.001\n\n# MNIST dataset \ntrain_dataset = torchvision.datasets.MNIST(root='../../data', \n                                           train=True, \n                                           transform=transforms.ToTensor(),  \n                                           download=False)\n\ntest_dataset = torchvision.datasets.MNIST(root='../../data', \n                                          train=False, \n                                          transform=transforms.ToTensor())\n'''\ndownload\u53c2\u6570\u9ed8\u8ba4\u662fFalse;\u5982\u679c\u662fTrue,\u4e14\u6ca1\u6709\u5728root\u91cc\u9762\u627e\u5230\u6570\u636e\u96c6,\u90a3\u4e48\u5c31\u4f1a\u81ea\u52a8\u4e0b\u8f7d \ntransform=transforms.ToTensor()\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u4e86\u5f20\u91cf\ntrain: \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u662f\u5426\u52a0\u8f7d\u8bad\u7ec3\u96c6\u3002\u7b2c\u4e00\u4e2a\u8c03\u7528\u4e2d\u8bbe\u7f6e\u4e3a True \u6765\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e\uff0c\u7b2c\u4e8c\u4e2a\u8c03\u7528\u4e2d\u8bbe\u7f6e\u4e3a False \u6765\u52a0\u8f7d\u6d4b\u8bd5\u6570\u636e\u3002\n'''\n# Data loader\ntrain_loader = torch.utils.data.DataLoader(dataset=train_dataset, \n                                           batch_size=batch_size, \n                                           shuffle=True)\n# \u6d4b\u8bd5\u9636\u6bb5\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u9700\u8981\u6253\u4e71\u6570\u636e\ntest_loader = torch.utils.data.DataLoader(dataset=test_dataset, \n                                          batch_size=batch_size, \n                                          shuffle=False)\n\n# Fully connected neural network with one hidden layer\nclass NeuralNet(nn.Module):\n    def __init__(self, input_size, hidden_size, num_classes):\n        super(NeuralNet, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size) \n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, num_classes)  \n\n    def forward(self, x):\n        out = self.fc1(x)\n        out = self.relu(out)\n        out = self.fc2(out)\n        return out\n\nmodel = NeuralNet(input_size, hidden_size, num_classes).to(device)\n\n# Loss and optimizer\ncriterion = nn.CrossEntropyLoss()\n# \u7ec4\u5408\u635f\u5931\u51fd\u6570,\u5c06 nn.LogSoftmax \u903b\u8f91softmax\u5c42\u548c\u8d1f\u5bf9\u6570\u4f3c\u7136\u635f\u5931\uff08negative log likelihood loss\uff09\u7ec4\u5408\u5728\u4e00\u8d77\u3002\n# \u8fd9\u4e2a\u635f\u5931\u51fd\u6570\u901a\u5e38\u7528\u4e8e\u591a\u5206\u7c7b\u95ee\u9898\u3002\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)  \n# .parameters\u65b9\u6cd5\u6765\u81eann.Module; \u5305\u62ec\u6743\u91cd\uff08weights\uff09\u548c\u504f\u7f6e\uff08biases\uff09\n# \u8fd9\u4e9b\u53c2\u6570\u5728\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u4f18\u5316\u7b97\u6cd5\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u3002\n# \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6743\u91cd\u662f\u968f\u673a\u751f\u6210\u7684\uff0c\u800c\u504f\u7f6e\u9ed8\u8ba4\u4e3a0\u6216\u8005\u4e5f\u662f\u968f\u673a\u503c\n# \u4e14\u6709requires_grad\u6210\u5458\u5c5e\u6027,\u4ee3\u8868\u7740\u662f\u5426\u53c2\u4e0e\u68af\u5ea6\u8ba1\u7b97\n# Train the model\ntotal_step = len(train_loader)\nfor epoch in range(num_epochs):\n    for i, (images, labels) in enumerate(train_loader):  \n        '''\n        enumerate \u8fd4\u56de\u4e00\u4e2a\u7531\u5143\u7ec4\u7ec4\u6210\u7684\u8fed\u4ee3\u5668\uff0c\u6bcf\u4e2a\u5143\u7ec4\u5305\u542b\u4e00\u5bf9\u5143\u7d20\uff1a\u7d22\u5f15\u548c\u88ab enumerate \u4f5c\u7528\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u5bf9\u5e94\u7684\u5143\u7d20\u3002\n        \u6bcf\u4e2a\u5143\u7d20\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6279\u6b21\u7684\u6570\u636e\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5f20\u91cf(tensor)\u7684\u5143\u7ec4\uff1a(images, labels)\n        '''\n        # Move tensors to the configured device\n        images = images.reshape(-1, 28*28).to(device)\n        # torch.Size([100, 784]),\u4e3a\u4e86\u80fd\u591f\u653e\u8fdbnn.Linear\n        labels = labels.to(device)\n        # torch.Size([100])\n        # Forward pass\n        outputs = model(images)\n        # torch.Size([100, 10])\n        '''\n        \u5f53\u4f60\u6267\u884c model(images):\n        PyTorch \u67e5\u770b model \u5bf9\u8c61\uff0c\u53d1\u73b0\u5b83\u662f\u4e00\u4e2a nn.Module \u7684\u5b50\u7c7b\u5b9e\u4f8b\u3002\n        PyTorch \u91cd\u8f7d\u4e86 nn.Module \u7684 __call__ \u65b9\u6cd5\uff0c\u6240\u4ee5\u5f53\u4f60\u5c1d\u8bd5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8c03\u7528 model \u65f6\uff0c\u5b83\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86\u6a21\u578b\u7684 __call__ \u65b9\u6cd5\u3002\n        \u5728 nn.Module \u7684 __call__ \u5b9e\u73b0\u4e2d\uff0c\u5f53\u89e6\u53d1\u4e00\u4e2a\u6a21\u578b\u5bf9\u8c61\u7684\u8c03\u7528\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5bfb\u627e\u5e76\u6267\u884c\u6a21\u578b\u7c7b\u7684 forward \u65b9\u6cd5\u3002\n        forward \u65b9\u6cd5\u662f\u6a21\u578b\u7684\u524d\u5411\u4f20\u64ad\u903b\u8f91\u6240\u5728\uff0c\u5b83\u63a5\u6536\u8f93\u5165\u6570\u636e images,\u901a\u8fc7\u6a21\u578b\u5185\u90e8\u5b9a\u4e49\u7684\u5c42\u8fdb\u884c\u4e00\u7cfb\u5217\u8ba1\u7b97,\u7136\u540e\u8fd4\u56de\u8ba1\u7b97\u5f97\u5230\u7684\u8f93\u51fa outputs\u3002\n        '''\n        loss = criterion(outputs, labels)\n\n        # Backward and optimize\n        optimizer.zero_grad() # \u9632\u6b62\u68af\u5ea6\u7d2f\u52a0\n        loss.backward() # \u53cd\u5411\u4f20\u64ad\n        optimizer.step() # \u66f4\u65b0\u53c2\u6570\n\n        if (i+1) % 100 == 0:\n            print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}' \n                   .format(epoch+1, num_epochs, i+1, total_step, loss.item()))\n\n# Test the model\n# In test phase, we don't need to compute gradients (for memory efficiency)\n# \u7528\u4e8e\u4e34\u65f6\u7981\u7528\u5728\u4ee3\u7801\u5757\u5185\u90e8\u7684\u6240\u6709\u8ba1\u7b97\u56fe\u548c\u68af\u5ea6\u8ba1\u7b97\u3002\u8fd9\u901a\u5e38\u7528\u4e8e\u6a21\u578b\u7684\u8bc4\u4f30\u9636\u6bb5\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in test_loader:\n        images = images.reshape(-1, 28*28).to(device)\n        labels = labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs, 1)\n        # torch.max(outputs, 1) \u8fd4\u56de\u4e86\u4e24\u4e2a\u5f20\u91cf\uff1a\u6bcf\u4e2a\u6837\u672c\u6700\u5927\u5f97\u5206\u7684\u5f20\u91cf\u548c\u6700\u5927\u5f97\u5206\u7d22\u5f15\u7684\u5f20\u91cf\n        total += labels.size(0) # \u8fd9\u91cc\u662f100,batch_size\n        correct += (predicted == labels).sum().item()\n        '''\n        \u53d1\u751f\u4e86\u4ee5\u4e0b\u51e0\u6b65\u64cd\u4f5c\uff1a\n        predicted == labels: \u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u64cd\u4f5c,predicted \u662f\u6a21\u578b\u9884\u6d4b\u7684\u7c7b\u522b\u7d22\u5f15\uff0c\u800c labels \u662f\u6570\u636e\u96c6\u4e2d\u7684\u771f\u5b9e\u7c7b\u522b\u7d22\u5f15\u3002\n        \u8fd9\u4e2a\u64cd\u4f5c\u4f1a\u751f\u6210\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u5f20\u91cf\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f True \u6216 False,\u53d6\u51b3\u4e8e\u9884\u6d4b\u7684\u7c7b\u522b\u7d22\u5f15\u662f\u5426\u4e0e\u771f\u5b9e\u6807\u7b7e\u76f8\u5339\u914d\u3002\n        .sum(): \u8fd9\u4e2a\u51fd\u6570\u4f1a\u5bf9\u5e03\u5c14\u5f20\u91cf\u8fdb\u884c\u6c42\u548c\uff0c\u5176\u4e2d True \u88ab\u5f53\u4f5c 1,False \u88ab\u5f53\u4f5c 0\u3002\u6c42\u548c\u64cd\u4f5c\u4f1a\u8ba1\u7b97\u51fa\u5728\u5f53\u524d\u6279\u6b21\u4e2d\u6a21\u578b\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u91cf\u3002\n        .item(): \u8fd9\u4e2a\u51fd\u6570\u5c06\u6c42\u548c\u5f97\u5230\u7684\u6807\u91cf\u5f20\u91cf\u8f6c\u6362\u4e3a\u4e00\u4e2a\u666e\u901a\u7684Python\u6570\u5b57(int \u6216 float)\u3002\n        \u7531\u4e8e .sum() \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5f20\u91cf\uff0c\u4f7f\u7528 .item() \u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5f20\u91cf\u4e2d\u7684\u5355\u4e2a\u503c\u63d0\u53d6\u51fa\u6765,\u4ee5\u4fbf\u53ef\u4ee5\u8fdb\u884c\u540e\u7eed\u7684Python\u7b97\u672f\u64cd\u4f5c\u3002\n        '''\n\n    print('Accuracy of the network on the 10000 test images: {} %'.format(100 * correct / total))\n\n# Save the model checkpoint\ntorch.save(model.state_dict(), 'model.ckpt')\n'''\n\u603b\u7ed3\u6d41\u7a0b:\n\u9996\u5148\u662f\u5229\u7528torchvision.datasets.MNIST()(\u8fd9\u91cc\u662fMNIST)\u6765\u751f\u6210train and test dataset\n\u7136\u540e\u5229\u7528\u4e0a\u9762\u7684datasets,\u901a\u8fc7torch.utils.data.DataLoader()\u65b9\u6cd5\u751f\u6210train and test dataloader,\u6ce8\u610fbatch_size and shuffle\n\u4e4b\u540e\u521b\u9020\u6a21\u578b\u7c7b,\u7ee7\u627fnn.Module(\u6ce8\u610fsuper(NeuralNet, self).__init__());\u7136\u540e\u5728\u81ea\u5df1\u7684__init__\u5b9a\u4e49fc,\u6fc0\u6d3b\u51fd\u6570\u7b49\n\u7136\u540e\u5b9a\u4e49\u7c7b\u7684forward\u65b9\u6cd5,\u5373\u7f51\u7edc\u7ec4\u6210;\u540c\u65f6\u6ce8\u610f\u4ece\u8fd9\u91cc\u5f00\u59cb,.to(device)\u8981\u7eb3\u5165\u8003\u91cf\n\u5b9a\u4e49\u5b8c\u4e86\u7c7b,\u521b\u9020\u4e00\u4e2amodel\u5b9e\u4f8b;\u7d27\u63a5\u7740\u914d\u5957\u4e0aloss\u51fd\u6570\u548c\u4f18\u5316\u5668(\u6ce8\u610fmodel.parameters()\u6765\u83b7\u5f97w b)\n\u5f00\u59cb\u8bad\u7ec3,\u4e00\u4e2aepoch\u904d\u5386\u5b8c\u5168\u90e8\u7684\u6570\u636e\u4e00\u6b21;\u6ce8\u610ffor i, (images, labels) in enumerate(train_loader)\n\u7136\u540e\u83b7\u53d6images and labels,\u6ce8\u610freshape\u548c.to(device);model(images)\u8bad\u7ec3\u4e00\u6279\u6b21\n\u4e00\u6279\u6b21\u8bad\u7ec3\u7ed3\u675f\u4e4b\u540e,\u4f18\u5316\u5668\u68af\u5ea6\u6e05\u7a7a,\u53cd\u5411\u4f20\u64ad,\u4f18\u5316\u5668\u66f4\u65b0\u6a21\u578b\u53c2\u6570\n\u6700\u540e\u8bc4\u4f30,\u6ce8\u610ftorch.max()\u65b9\u6cd5\u548ccorrect += (predicted == labels).sum().item()\n\u4ee5\u53ca\u975e\u5e38\u91cd\u8981\u7684with torch.no_grad():,\u8ba9\u68af\u5ea6\u4e0d\u518d\u7eb3\u5165\u8ba1\u7b97\u7684\u8003\u91cf\u4e4b\u4e2d\n'''\n</code></pre> <p>\u6ce8\u91ca\u5168\u90fd\u662f\u6211\u81ea\u5df1\u5199\u7684, \u8fd9\u4efd\u4ee3\u7801\u8ba9\u6211\u610f\u8bc6\u5230\u4e00\u4e2a\u6df1\u5ea6\u5b66\u4e60\u5de5\u7a0b\u7684\u6838\u5fc3\u5173\u952e: </p> <ul> <li> <p>Dateset Dateloader model optimizer scheduler \u7684\u5173\u7cfb\u662f\u4ec0\u4e48? </p> </li> <li> <p>\u6570\u636e\u7684\u5f20\u91cf\u5f62\u72b6\u975e\u5e38\u91cd\u8981!</p> </li> <li>model\u6700\u540e\u8fd4\u56deloss, \u7c7b\u4f3c\u4e8e<code>loss</code>\u8fd9\u6837\u7684\u53c2\u6570\u5176\u5b9e\u5c31\u662f\u5728\u4ee3\u8868\u6a21\u578b\u7684\u5b9e\u4f8b</li> <li>loss.backward()\u662f\u53cd\u5411\u4f20\u64ad; optimizer.step()\u662f\u5728\u66f4\u65b0\u53c2\u6570, optimizer.zero_grad() \u662f\u9632\u6b62\u68af\u5ea6\u7d2f\u52a0</li> <li>\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u65b9\u6cd5\u80fd\u591f\u81ea\u52a8\u8fdb\u884c\u5f88\u591a\u64cd\u4f5c? \u8fd9\u4e9b\u90fd\u662fnn.Module\u7b49\u529f\u80fd\u5728\u64cd\u4f5c, \u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1asuper\u7ee7\u627f</li> <li>.reshape()  .permutate()   torch.max()   .view()   .expand()   torch.cat()   torch.arrange()\u7b49\u65b9\u6cd5\u7684\u7528\u9014</li> </ul> <p>\u7406\u89e3\u4e86\u4e4b\u540e, \u5c31\u80fd\u77e5\u9053\u6bcf\u4e00\u90e8\u5206\u7a76\u7adf\u5728\u5e72\u4ec0\u4e48. \u90a3\u4e48\u4e8b\u5b9e\u4e0a, \u6b64\u6b21\u5206\u6790\u7684\u4ee3\u7801, \u5c31\u662f\u5728\u6784\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684Point-MAE model.</p> <p>\u771f\u7684\u4e0d\u5bb9\u6613, \u4f46\u662f\u7ec8\u7a76\u662f\"\u7b97\u662f\u62ff\u4e0b\u4e86\u5427\"~</p>"},{"location":"Blog/PointNet/analysis.html","title":"PointNet","text":"<p>\u4e4b\u524d\u5904\u74063D\u6570\u636e, \u90fd\u662f\u662f\u5229\u7528: voxel grid \u6216\u8005\u662f\u4e8c\u7ef4\u5448\u73b0. </p> <p></p> <p>\u4e8c\u7ef4\u5448\u73b0, \u662f\u4e3a\u4e86\u5c06convolutional network\u8fd0\u7528\u518d\u56fe\u50cf\u4e0a\u9762</p> <p>\u90a3\u4e48Point net\u7f51\u7edc, \u8f93\u5165\u7684\u6570\u636e\u5f62\u5f0f\u662f\u70b9\u4e91. \u5173\u4e8e\u70b9\u4e91\u6570\u636e, \u8bba\u6587\u7279\u522b\u63d0\u5230: </p> <p>Point clouds are simple and unified structures that avoid the combinatorial irregularities and complexities of meshes......still has to respect the fact that a point cloud is just a set of points and therefore invariant to permutations. </p> <p>\u4e3a\u4e86\u7ed3\u5c40\u7ec4\u5408\u4e0d\u654f\u611f(\u56e0\u4e3a\u70b9\u6362\u4e86\u4f4d\u7f6e, \u4f9d\u7136\u6574\u4f53\u4fe1\u606f\u662f\u4e0d\u53d8\u7684), \u8bba\u6587\u4f7f\u7528\u4e86\u4e00\u79cd\u7ecf\u5178\u7684\u5bf9\u79f0\u51fd\u6570, \u6700\u5927\u6c60\u5316</p> <p>\u8fd9\u4e2a\u6a21\u578b\u6700\u540e\u5b9e\u73b0\u7684\u662f: \u5728\u5206\u7c7b\u4efb\u52a1\u4e0a, \u8f93\u5165\u70b9\u4e91, \u8f93\u51fa\u6807\u7b7e; \u5728\u573a\u666f\u5206\u5272\u4e0a, \u7ed9\u6bcf\u4e2a\u70b9\u6253\u4e0a\u6807\u7b7e(\u4f8b\u5982, \u8fd9\u4e2a\u70b9\u662f\u5c5e\u4e8e\u6905\u5b50? \u8fd8\u662f\u684c\u5b50?)</p>"},{"location":"Blog/PointNet/analysis.html#model","title":"model","text":"<p>\u9644: pipeline\uff0c\u4e2d\u6587\u610f\u4e3a\u7ba1\u7ebf\uff0c\u610f\u4e49\u7b49\u540c\u4e8e\u6d41\u6c34\u7ebf\u3002baseline\u610f\u601d\u662f\u57fa\u7ebf\uff0c\u8fd9\u4e2a\u6982\u5ff5\u662f\u4f5c\u4e3a\u7b97\u6cd5\u63d0\u5347\u7684\u53c2\u7167\u7269\u800c\u5b58\u5728\u7684\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u57fa\u7840\u6a21\u578b\uff0c\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u57fa\u51c6\u6765\u6bd4\u8f83\u5bf9\u6a21\u578b\u7684\u6539\u8fdb\u662f\u5426\u6709\u6548\u3002</p> <p></p> <p>\u9996\u5148\u8981\u4e86\u89e3\u70b9\u4e91\u6570\u636e\u7684\u7279\u6027, \u8bba\u6587\u8bba\u8ff0\u4e86\u4e09\u4e2a\u7279\u70b9:</p> <ul> <li>Unordered. \u6bcf\u4e00\u4e2a\u70b9\u53ea\u6709\u4e09\u4e2a\u5750\u6807, \u4f46\u662f\u5e76\u6ca1\u6709\u5f15\u7d22! </li> <li>Interaction among points. \u70b9\u4e0e\u70b9\u5e76\u4e0d\u662f\u5b64\u7acb\u7684, \u800c\u662f\u50cf\u56fe\u50cf\u4e00\u6837, pixel and pixel\u4e4b\u95f4\u6709\u5173\u7cfb, \u8574\u542b\u7740\u4fe1\u606f</li> <li>Invariance under transformation. \u8fd9\u4e2a\u6a21\u578b\u5728\u7a7a\u95f4\u4e2d\u8fdb\u884c\u7ebf\u6027\u53d8\u6362, \u4f8b\u5982\u65cb\u8f6c, \u5bf9\u79f0\u7b49, \u5e94\u8be5\u8574\u542b\u7684\u4fe1\u606f\u662f\u4e0d\u4f1a\u6539\u53d8\u7684</li> </ul> <p>\u8bba\u6587\u4e2d\u8ba4\u4e3a, \u6a21\u578b\u4e2d\u4e09\u4e2a\u7ec4\u4ef6\u975e\u5e38\u7684\u5173\u952e: </p> <ul> <li>Symmetric function to aggregate information</li> </ul> <p>\u8fd9\u662f\u4e3a\u4e86Unordered Input. \u8bba\u6587\u4e2d\u63d0\u5230:  For example, + and \u2217 operators are symmetric binary functions. \u56e0\u4e3a\u81ea\u53d8\u91cf\u4ea4\u6362\u4f4d\u7f6e, \u7ed3\u679c\u4e0d\u53d8. \u8bba\u6587\u4e2d\u4e5f\u63d0\u5230\u8fc7, \u66fe\u7ecf\u5c1d\u8bd5\u4f7f\u7528\u8fc7\u8bad\u7ec3\u4e00\u4e2a\u5c0f\u6a21\u578b\u53bb\u7ed9\u5b83\u4eec\u7b80\u6d01\u5730\u6392\u5217, \u4f46\u662f\u8868\u73b0\u975e\u5e38\u5dee, \u4f46\u662f\u4f9d\u7136\u8868\u73b0\u597d\u8fc7\u6ca1\u6709\u6392\u5e8f. </p> <p>\u6240\u4ee5\u8bf4\u8bba\u6587\u60f3\u627e\u5230\u4e00\u79cd\u51fd\u6570, \u6ee1\u8db3: </p> <p></p> <p>\u6700\u540e, \u9009\u62e9\u4e86maxpooling\u4f5c\u4e3ag\u51fd\u6570</p> <ul> <li>Local and Global Information Aggregation</li> </ul> <p>\u5728\u6a21\u578b\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230, \u540e\u9762\u5c06\u6700\u5927\u6c60\u5316\u63d0\u53d6\u51fa\u6765\u7684\u5168\u5c40\u7279\u5f81\u4e0e\u6700\u5927\u6c60\u5316\u4e4b\u524d\u7684\u5c40\u90e8\u7279\u5f81\u8fdb\u884c\u62fc\u63a5. </p> <p><code>Then we extract new per point features based on the combined point features - this time the per point feature is aware of both the local and global information.(from the paper)</code></p> <ul> <li>Joint Alignment Network</li> </ul> <p><code>The semantic labeling of a point cloud has to be invariant if the point cloud undergoes certain geometric transformations</code></p> <p>\u4e3a\u4e86\u628a\u4e00\u4e2a\u7a7a\u95f4\u53d8\u6362\u8fc7\u7684\u70b9\u4e91\"\u6446\u6b63\u6765\", \u8bba\u6587\u63d0\u5230\u4e86:</p> <p><code>Jaderberg et al. [9] introduces the idea of spatial transformer to align 2D images through sampling and interpolation</code></p> <p><code>We predict an affine transformation matrix by a mini-network (T-net in Fig) and directly apply this transformation to the coordinates of input points</code></p> <p>\u5f53\u7136, \u8fd9\u4e2a\u8bad\u7ec3\u51fa\u6765\u7684\u7a7a\u95f4\u53d8\u6362\u7684\u77e9\u9635\u5e94\u8be5\u957f\u4ec0\u4e48\u6837\u5b50? \u8bba\u6587\u4e2d\u63d0\u5230, \u5e0c\u671b\u6700\u540e\u8bad\u7ec3\u51fa\u6765\u7684\u77e9\u9635\u5e94\u8be5\u975e\u5e38\u63a5\u8fd1\u6b63\u4ea4\u77e9\u9635. \u56e0\u4e3a\u6b63\u4ea4\u77e9\u9635\u7528\u4f5c\u7a7a\u95f4\u53d8\u6362\u7684\u6700\u5927\u7279\u5f81\u5c31\u662f: \u957f\u5ea6\u548c\u89d2\u5ea6\u4e0d\u53d8. </p> <p></p> <p>\u56e0\u6b64\u4f7f\u7528\u4e86\u8fd9\u4e2a\u4f5c\u4e3a\u635f\u5931\u51fd\u6570. \u8fd9\u79cd\u635f\u5931\u51fd\u6570\u7684\u8bbe\u7f6e\u5176\u5b9e\u80fd\u5e26\u6765\u5f88\u591a\u542f\u53d1. </p> <p>\u6700\u7ec8, \u8bba\u6587\u63d0\u5230: <code>Intuitively, our network learns to summarize a shape by a sparse set of key points</code></p>"},{"location":"Blog/PointNet/analysis.html#_1","title":"\u4ee3\u7801","text":"<p>\u9996\u5148\u662f\u63d0\u5230\u7684\u7a7a\u95f4\u53d8\u6362\u77e9\u9635\u7684\u8bad\u7ec3: \u5bf9\u5e94\u7684\u662f<code>input transform</code></p> <pre><code>class STN3d(nn.Module):\n    def __init__(self):\n        super(STN3d, self).__init__()\n        self.conv1 = torch.nn.Conv1d(3, 64, 1)\n        self.conv2 = torch.nn.Conv1d(64, 128, 1)\n        self.conv3 = torch.nn.Conv1d(128, 1024, 1)\n        self.fc1 = nn.Linear(1024, 512)\n        self.fc2 = nn.Linear(512, 256)\n        self.fc3 = nn.Linear(256, 9)\n        self.relu = nn.ReLU()\n\n        self.bn1 = nn.BatchNorm1d(64)\n        self.bn2 = nn.BatchNorm1d(128)\n        self.bn3 = nn.BatchNorm1d(1024)\n        self.bn4 = nn.BatchNorm1d(512)\n        self.bn5 = nn.BatchNorm1d(256)\n\n\n    def forward(self, x):\n        batchsize = x.size()[0]\n        x = F.relu(self.bn1(self.conv1(x)))\n        x = F.relu(self.bn2(self.conv2(x)))\n        x = F.relu(self.bn3(self.conv3(x)))\n        # 1024\u4e2a\u7279\u5f81\u91cc\u9762\u6700\u5927\u6c60\u5316, reshape\u4e4b\u540e\u8f93\u5165\u5168\u8fde\u63a5\u5c42\n        x = torch.max(x, 2, keepdim=True)[0]\n        x = x.view(-1, 1024)\n\n        x = F.relu(self.bn4(self.fc1(x)))\n        x = F.relu(self.bn5(self.fc2(x)))\n        x = self.fc3(x)\n\n        iden = Variable(torch.from_numpy(np.array([1,0,0,0,1,0,0,0,1]).astype(np.float32))).view(1,9).repeat(batchsize,1)\n\n        # \u521b\u5efaidentity matrix\n        if x.is_cuda:\n            iden = iden.cuda()\n        x = x + iden # \u53ef\u80fd\u662f\u4e3a\u4e86\u4fdd\u6301\u6570\u503c\u7a33\u5b9a, \u9632\u6b62\u68af\u5ea6\u7206\u70b8\n        x = x.view(-1, 3, 3) # \u7528\u8f93\u5165\u8fdb\u7684\u70b9\u4e91\u6570\u636e\u8bad\u7ec33*3\u77e9\u9635\n        return x\n</code></pre> <p>\u90a3\u4e48\u8fd9\u91cc\u662f\u7279\u5f81\u957f\u5ea6\u4e3a3\u7684\u60c5\u51b5, \u90a3\u4e48\u540e\u9762<code>feature transform</code>\u5c31\u51e0\u4e4e\u662f\u4e00\u6a21\u4e00\u6837\u4e86</p> <pre><code>class STNkd(nn.Module):\n    def __init__(self, k=64):\n        super(STNkd, self).__init__()\n        self.conv1 = torch.nn.Conv1d(k, 64, 1)\n        self.conv2 = torch.nn.Conv1d(64, 128, 1)\n        self.conv3 = torch.nn.Conv1d(128, 1024, 1)\n        self.fc1 = nn.Linear(1024, 512)\n        self.fc2 = nn.Linear(512, 256)\n        self.fc3 = nn.Linear(256, k*k)\n        self.relu = nn.ReLU()\n\n        self.bn1 = nn.BatchNorm1d(64)\n        self.bn2 = nn.BatchNorm1d(128)\n        self.bn3 = nn.BatchNorm1d(1024)\n        self.bn4 = nn.BatchNorm1d(512)\n        self.bn5 = nn.BatchNorm1d(256)\n\n        self.k = k\n\n    def forward(self, x):\n        batchsize = x.size()[0]\n        x = F.relu(self.bn1(self.conv1(x)))\n        x = F.relu(self.bn2(self.conv2(x)))\n        x = F.relu(self.bn3(self.conv3(x)))\n        x = torch.max(x, 2, keepdim=True)[0]\n        x = x.view(-1, 1024)\n\n        x = F.relu(self.bn4(self.fc1(x)))\n        x = F.relu(self.bn5(self.fc2(x)))\n        x = self.fc3(x)\n\n        iden = Variable(torch.from_numpy(np.eye(self.k).flatten().astype(np.float32))).view(1,self.k*self.k).repeat(batchsize,1)\n        '''\n        np.eye(self.k):\n        \u8fd9\u4f7f\u7528 NumPy \u521b\u5efa\u4e86\u4e00\u4e2a k x k \u7684\u5355\u4f4d\u77e9\u9635\u3002\u5355\u4f4d\u77e9\u9635\u662f\u4e00\u4e2a\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u5168\u662f1,\u5176\u4f59\u4f4d\u7f6e\u5168\u662f0\u7684\u65b9\u9635\u3002self.k \u5b9a\u4e49\u4e86\u77e9\u9635\u7684\u7ef4\u5ea6\u3002\n        .flatten():\n        \u8fd9\u4e2a\u65b9\u6cd5\u5c06 k x k \u7684\u5355\u4f4d\u77e9\u9635\u5c55\u5e73\u6210\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5c06\u4e8c\u7ef4\u77e9\u9635\u8f6c\u6362\u6210\u53ea\u6709\u4e00\u884c\u7684\u4e00\u7ef4\u5411\u91cf\u3002\n        .astype(np.float32):\n        \u8fd9\u5c06\u5c55\u5e73\u540e\u7684\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a float32\u3002\u8fd9\u662f\u56e0\u4e3a PyTorch \u5f20\u91cf\u9700\u8981\u6307\u5b9a\u6570\u636e\u7c7b\u578b\uff0c\u800c NumPy \u9ed8\u8ba4\u7684\u6d6e\u70b9\u7c7b\u578b\u53ef\u80fd\u662f float64\u3002\n        torch.from_numpy():\n        \u8fd9\u4e2a\u65b9\u6cd5\u5c06 NumPy \u6570\u7ec4\u8f6c\u6362\u4e3a PyTorch \u5f20\u91cf\u3002\u8fd9\u6837,NumPy \u6570\u7ec4\u5c31\u53ef\u4ee5\u5728 PyTorch \u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u3002\n        Variable():\n        \u5728\u65e9\u671f\u7248\u672c\u7684 PyTorch,Variable \u7528\u4e8e\u5c06\u5f20\u91cf\u8f6c\u6362\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u88ab\u4f18\u5316\u5668\u5904\u7406\u7684\u53d8\u91cf\u3002\u5728 PyTorch 1.0 \u4ee5\u540e\u7684\u7248\u672c\u4e2d\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u73b0\u5728\u6240\u6709\u7684\u5f20\u91cf\u90fd\u662f\u53d8\u91cf\u3002\n        view(1,self.k*self.k):\n        view \u65b9\u6cd5\u7528\u4e8e\u6539\u53d8\u5f20\u91cf\u7684\u5f62\u72b6\u800c\u4e0d\u6539\u53d8\u5176\u6570\u636e\u3002\u8fd9\u91cc\uff0c\u5c06\u4e00\u7ef4\u5411\u91cf\u91cd\u65b0\u5851\u5f62\u4e3a\u4e00\u4e2a\u5927\u5c0f\u4e3a 1 x (k*k) \u7684\u4e8c\u7ef4\u5f20\u91cf\u3002\n        .repeat(batchsize,1):\n        repeat \u65b9\u6cd5\u7528\u4e8e\u6cbf\u6307\u5b9a\u7684\u7ef4\u5ea6\u91cd\u590d\u5f20\u91cf\u7684\u5143\u7d20\u3002\u8fd9\u91cc\uff0c\u5b83\u5728\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff08\u6279\u6b21\u7ef4\u5ea6\uff09\u91cd\u590d batchsize \u6b21\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u4fdd\u6301\u4e0d\u53d8\u3002\n        \u7ed3\u679c\u662f\u4e00\u4e2a (batchsize, k*k) \u5f62\u72b6\u7684\u5f20\u91cf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u539f\u59cb k x k \u5355\u4f4d\u77e9\u9635\u7684\u5c55\u5e73\u5f62\u5f0f\u3002\n        '''\n        if x.is_cuda:\n            iden = iden.cuda()\n        x = x + iden\n        x = x.view(-1, self.k, self.k)\n        return x\n</code></pre> <p>\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u5229\u7528\u8fd9\u4e24\u4e2amodel\u53bb\u8bbe\u8ba1\u4e00\u6761baseline, \u4e00\u76f4\u5230\u5408\u6210\u5168\u5c40\u7279\u5f81, \u7136\u540e\u51b3\u5b9a\u662f\u5426\u548c\u5c40\u90e8\u7279\u5f81\u7ed3\u5408: </p> <pre><code>class PointNetfeat(nn.Module):\n    def __init__(self, global_feat = True, feature_transform = False):\n        super(PointNetfeat, self).__init__()\n        self.stn = STN3d()\n        self.conv1 = torch.nn.Conv1d(3, 64, 1)\n        self.conv2 = torch.nn.Conv1d(64, 128, 1)\n        self.conv3 = torch.nn.Conv1d(128, 1024, 1)\n        self.bn1 = nn.BatchNorm1d(64)\n        self.bn2 = nn.BatchNorm1d(128)\n        self.bn3 = nn.BatchNorm1d(1024)\n        self.global_feat = global_feat\n        self.feature_transform = feature_transform\n        if self.feature_transform:\n            self.fstn = STNkd(k=64)\n\n    def forward(self, x):\n        n_pts = x.size()[2]\n        trans = self.stn(x)\n        x = x.transpose(2, 1) # \u4e3a\u4e86\u4e58\u6cd5, \u4ea4\u6362\u77e9\u9635\u957f\u5bbd\n        x = torch.bmm(x, trans) # \u6279\u91cf\u77e9\u9635\u4e58\u6cd5\n        x = x.transpose(2, 1)\n        x = F.relu(self.bn1(self.conv1(x))) # mlp(64, 64)\n\n        if self.feature_transform:\n            trans_feat = self.fstn(x)\n            x = x.transpose(2,1)\n            x = torch.bmm(x, trans_feat)\n            x = x.transpose(2,1)\n        else:\n            trans_feat = None\n\n        pointfeat = x # \u4fdd\u7559\u4e00\u4efd\u5168\u5c40\u7279\u5f81\n        x = F.relu(self.bn2(self.conv2(x)))\n        x = self.bn3(self.conv3(x))\n        x = torch.max(x, 2, keepdim=True)[0] # \u6700\u5927\u6c60\u5316\n        x = x.view(-1, 1024)\n        if self.global_feat: # \u5982\u679c\u53ea\u8981\u5168\u5c40\u53d8\u91cf\n            return x, trans, trans_feat\n        else:\n            x = x.view(-1, 1024, 1).repeat(1, 1, n_pts) # repeat\u662f\u4e3a\u4e86\u548cn x 1024\u53bbconcat\n            # \u8fd4\u56de\u5168\u5c40\u548c\u5c40\u90e8\u7ed3\u5408\u7684\u7279\u5f81\n            return torch.cat([x, pointfeat], 1), trans, trans_feat\n</code></pre> <p>\u9996\u5148\u662f\u84dd\u8272\u7684\u5206\u7c7b\u4efb\u52a1, \u53ea\u9700\u8981\u5168\u5c40\u7279\u5f81\u5c31\u80fd\u8fdb\u884c\u5206\u7c7b\u4e86:</p> <pre><code>class PointNetCls(nn.Module):\n    def __init__(self, k=2, feature_transform=False):\n        super(PointNetCls, self).__init__()\n        self.feature_transform = feature_transform\n        self.feat = PointNetfeat(global_feat=True, feature_transform=feature_transform)\n        # \u6ce8\u610fglobal_feat=True, \u8bf4\u660e\u662f\u53ea\u8981\u5168\u5c40\u7279\u5f81, \u7528\u4e8eclassification, \u6240\u4ee5\u662f\u84dd\u8272\u6a21\u5757\n        self.fc1 = nn.Linear(1024, 512)\n        self.fc2 = nn.Linear(512, 256)\n        self.fc3 = nn.Linear(256, k)\n        self.dropout = nn.Dropout(p=0.3)\n        self.bn1 = nn.BatchNorm1d(512)\n        self.bn2 = nn.BatchNorm1d(256)\n        self.relu = nn.ReLU()\n\n    def forward(self, x):\n        x, trans, trans_feat = self.feat(x)\n        x = F.relu(self.bn1(self.fc1(x)))\n        x = F.relu(self.bn2(self.dropout(self.fc2(x))))\n        x = self.fc3(x)\n        return F.log_softmax(x, dim=1), trans, trans_feat\n</code></pre> <p>\u5176\u6b21\u5c31\u662f\u60c5\u666f\u5206\u5272\u4efb\u52a1. \u60c5\u666f\u5206\u5272\u7684\u5b9e\u8d28\u662f\u4ec0\u4e48? \u5176\u5b9e\u662f: \u6bcf\u4e00\u4e2a\u70b9\u90fd\u8574\u542bk(\u7c7b\u522b\u6570\u91cf)\u4e2a\u6982\u7387\u503c, \u4ee3\u8868\u8fd9\u4e2a\u70b9\u6700\u6709\u53ef\u80fd\u662f\u5728\u54ea\u4e00\u4e2a\u7c7b\u522b\u91cc\u9762</p> <pre><code>class PointNetDenseCls(nn.Module):\n    def __init__(self, k = 2, feature_transform=False):\n        super(PointNetDenseCls, self).__init__()\n        self.k = k # k \u662f\u4f60\u60f3\u8981\u533a\u5206\u7684\u7c7b\u522b\u603b\u6570\n        self.feature_transform=feature_transform\n        self.feat = PointNetfeat(global_feat=False, feature_transform=feature_transform)\n        # \u6ce8\u610fglobal_feat=False, \u8bf4\u660e\u5168\u5c40\u548c\u5c40\u90e8\u7279\u5f81\u90fd\u8981, \u6240\u4ee5\u662f\u9ec4\u8272\u6a21\u5757\n        self.conv1 = torch.nn.Conv1d(1088, 512, 1)\n        self.conv2 = torch.nn.Conv1d(512, 256, 1)\n        self.conv3 = torch.nn.Conv1d(256, 128, 1)\n        self.conv4 = torch.nn.Conv1d(128, self.k, 1)\n        self.bn1 = nn.BatchNorm1d(512)\n        self.bn2 = nn.BatchNorm1d(256)\n        self.bn3 = nn.BatchNorm1d(128)\n\n    def forward(self, x):\n        batchsize = x.size()[0]\n        n_pts = x.size()[2]\n        x, trans, trans_feat = self.feat(x)\n        x = F.relu(self.bn1(self.conv1(x)))\n        x = F.relu(self.bn2(self.conv2(x)))\n        x = F.relu(self.bn3(self.conv3(x)))\n        x = self.conv4(x)\n        # \u8f93\u51fa\u5f62\u72b6: (batch_size, out_channels, length_out)\n        # \u9700\u8981\u628a\u70b9\u6570\u7ef4\u5ea6\u653e\u5728\u7b2c\u4e8c\u4f4d, \u56e0\u4e3a\u7b2c\u4e09\u4e2a\u7ef4\u5ea6\u5c06\u4f1a\u5b58\u653e\u6982\u7387\u503c, \u66f4\u65b9\u4fbf\n        x = x.transpose(2,1).contiguous()\n        x = F.log_softmax(x.view(-1,self.k), dim=-1)\n        x = x.view(batchsize, n_pts, self.k)\n        # \u8fd9\u4e2a\u5f20\u91cf\u5305\u542b\u4e86\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u6bcf\u4e2a\u7c7b\u522b\u7684\u5bf9\u6570\u51e0\u7387\u503c\n        return x, trans, trans_feat\n</code></pre> <p>\u8bad\u7ec3\u7a7a\u95f4\u53d8\u6362\u77e9\u9635\u7684\u65f6\u5019, \u5e0c\u671b\u8bad\u7ec3\u51fa\u6765\u7684\u5c3d\u53ef\u80fd\u4f7f\u6052\u7b49\u77e9\u9635; \u8fd9\u9700\u8981\u601d\u8003, \u56e0\u4e3a\u5176\u5b9e\u6211\u4eec\u5e0c\u671b\u673a\u5668\u4e0d\u600e\u4e48\u79fb\u52a8\u70b9\u4e91\u5c31\u80fd\u77e5\u9053\u4fe1\u606f\u4e86, \u5982\u679c\u6bcf\u4e00\u6b21\u90fd\u662f\u9700\u8981\u5927\u52a8\u5e72\u6208\u624d\u80fd\u5f97\u5230\u4fe1\u606f, \u90a3\u4e48\u9a8c\u8bc1\u7684\u65f6\u5019\u5c31\u4f1a\u5c42\u6b21\u4e0d\u9f50. \u5f53\u7136\u4ee5\u4e0a\u662f\u6211\u4e2a\u4eba\u89c2\u70b9</p> <pre><code>def feature_transform_regularizer(trans):\n    d = trans.size()[1]\n    batchsize = trans.size()[0]\n    I = torch.eye(d)[None, :, :]\n    if trans.is_cuda:\n        I = I.cuda()\n    loss = torch.mean(torch.norm(torch.bmm(trans, trans.transpose(2,1)) - I, dim=(1,2)))\n    #  \u8ba1\u7b97\u6bcf\u4e2a d x d \u77e9\u9635\u4e0e\u5355\u4f4d\u77e9\u9635 I \u4e4b\u95f4\u7684 Frobenius \u8303\u6570\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u7528\u7684\u77e9\u9635\u8303\u6570\uff0c\u7528\u4e8e\u8861\u91cf\u77e9\u9635\u5143\u7d20\u7684\u201c\u5927\u5c0f\u201d\u3002\n    return loss # \u6b63\u5219\u5316\u635f\u5931\uff0c\u8fd9\u4e2a\u503c\u53ef\u4ee5\u52a0\u5230\u6a21\u578b\u7684\u603b\u635f\u5931\u4e2d\uff0c\u4f5c\u4e3a\u6b63\u5219\u5316\u9879\u3002\n    # \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u5c06\u8fd9\u4e2a\u6b63\u5219\u5316\u635f\u5931\u6dfb\u52a0\u5230\u603b\u635f\u5931\u4e2d\uff0c\u53ef\u4ee5\u9f13\u52b1\u7f51\u7edc\u5b66\u4e60\u5230\u7684\u53d8\u6362\u77e9\u9635\u5c3d\u53ef\u80fd\u5730\u63a5\u8fd1\u6052\u7b49\u77e9\u9635\u3002\n    # \u8fd9\u6709\u52a9\u4e8e\u6a21\u578b\u5b66\u4e60\u5230\u66f4\u52a0\u5e73\u6ed1\u548c\u5408\u7406\u7684\u53d8\u6362\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u907f\u514d\u8fc7\u62df\u5408\u3002\n</code></pre> <p>\u6700\u540e\u6784\u5efapipeline:</p> <pre><code>if __name__ == '__main__':\n    sim_data = Variable(torch.rand(32,3,2500))\n    trans = STN3d()\n    out = trans(sim_data)\n    print('stn', out.size())\n    print('loss', feature_transform_regularizer(out))\n\n    sim_data_64d = Variable(torch.rand(32, 64, 2500))\n    trans = STNkd(k=64)\n    out = trans(sim_data_64d)\n    print('stn64d', out.size())\n    print('loss', feature_transform_regularizer(out))\n\n    pointfeat = PointNetfeat(global_feat=True)\n    out, _, _ = pointfeat(sim_data)\n    print('global feat', out.size())\n\n    pointfeat = PointNetfeat(global_feat=False)\n    out, _, _ = pointfeat(sim_data)\n    print('point feat', out.size())\n\n    cls = PointNetCls(k = 5)\n    out, _, _ = cls(sim_data)\n    print('class', out.size())\n\n    seg = PointNetDenseCls(k = 3)\n    out, _, _ = seg(sim_data)\n    print('seg', out.size())\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html","title":"C++\u81ea\u5b66\u2014\u2014\u57fa\u7840\u90e8\u5206","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#c_1","title":"\u7b2c\u4e00\u4e2aC++\u7a0b\u5e8f","text":"<pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"C++ program\" &lt;&lt; endl; \n    printf(\"hello world!\");\n    return 0;\n}\n</code></pre> <p>\u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u770b\u8d77\u6765\u5341\u5206\u7684\u7b80\u5355, \u4f46\u662f\u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168</p> <p>\u9996\u5148\u6765\u8c08\u8c08main()\u51fd\u6570: </p> <p>\u7b2c\u4e00\u884c\u7684int main()\u53eb\u505a\u51fd\u6570\u5934, \u82b1\u62ec\u53f7\u4e2d\u95f4\u5305\u542b\u7684\u90e8\u5206\u53eb\u505a\u51fd\u6570\u4f53, \u800c\u5728C++\u4e2d\u6bcf\u6761\u5b8c\u6574\u7684\u6307\u4ee4\u79f0\u4e3a\u8bed\u53e5</p> <p>main()\u4e2d\u6700\u540e\u4e00\u884c\u8bed\u53e5\u53eb\u505a\u8fd4\u56de\u8bed\u53e5, \u8fd9\u8fd8\u662f\u592a\u7e41\u7410\u4e86, \u4e8e\u662f\u7cfb\u7edf\u4e2d, \u5982\u679cmain()\u8fd0\u884c\u5230\u6700\u540e\u6ca1\u6709\u9047\u5230\u8fd4\u56de\u8bed\u53e5, \u5219\u9ed8\u8ba4\u6700\u540e\u4ee5return 0\u7ed3\u5c3e, \u4f46\u662f\u8fd9\u79cd\u9ed8\u8ba4\u53ea\u5728main()\u51fd\u6570\u91cc\u9762\u6709.</p> <p>\u90a3\u4e48\u524d\u9762\u7684int\u662f\u4ec0\u4e48? \u51fd\u6570\u5934\u63cf\u8ff0\u4e86\u51fd\u6570\u4e0e\u8c03\u7528\u5b83\u7684\u51fd\u6570\u4e4b\u95f4\u7684\u63a5\u53e3, \u800c\u51fd\u6570\u662f\u6709\u8fd4\u56de\u503c\u7684; \u56e0\u6b64, \u5982\u679c\u662fint main(), \u90a3\u4e48\u5c31\u4ee3\u8868: main()\u51fd\u6570\u53ef\u4ee5\u7ed9\u8c03\u7528\u4ed6\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u62ec\u53f7\u53c8\u662f\u4ec0\u4e48\u4e1c\u897f? \u62ec\u53f7\u90e8\u5206\u53eb\u505a\u5f62\u53c2\u5217\u8868, \u63cf\u8ff0\u7684\u662f\u4ece\u8c03\u7528\u51fd\u6570\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u51fd\u6570\u7684\u4fe1\u606f. \u4f46\u662f\u5728main()\u8fd9\u4e2a\u51fd\u6570\u4e2d, \u4e00\u822c\u6765\u8bf4\u662f\u7a7a\u62ec\u53f7, \u56e0\u4e3amain()\u4e00\u822c\u7528\u4f5c\u7a0b\u5e8f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u7684\u6865\u6881. \u6362\u800c\u8a00\u4e4b, main()\u51fd\u6570\u5934\u63cf\u8ff0\u7684\u662fmain()\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u7684\u63a5\u53e3.</p> <p>\u7a7a\u62ec\u53f7\u5c31\u662f\u4ee3\u8868\u4e0d\u63a5\u53d7\u4eba\u5458\u4efb\u4f55\u4fe1\u606f, \u6216\u8005\u8bf4\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570. \u503c\u5f97\u4e00\u63d0\u7684\u662f, \u5728C++\u4e2d, \u5982\u679c\u62ec\u53f7\u91cc\u9762\u52a0\u4e0avoid, \u90a3\u4e48\u8fd9\u5c31\u76f8\u5f53\u4e8e\u7a7a\u62ec\u53f7, \u4ee3\u8868\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u53c2\u6570. \u4f46\u662f\u5728C\u4e2d, \u8fd9\u79cd\u4e24\u79cd\u505a\u6cd5\u5176\u5b9e\u662f\u6709\u533a\u522b\u7684, C\u4e2d\u7684\u7a7a\u62ec\u53f7\u4ee3\u8868\u5bf9\u662f\u5426\u63a5\u53d7\u53c2\u6570\u4fdd\u6301\u6c89\u9ed8.</p> <p>\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\u6765\u8bf4, \u4ed6\u7684\u540d\u5b57\u53ef\u4ee5\u6362\u5417? \u7b54\u6848\u662f\u4e0d\u884c, \u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u540d\u4e3amain()\u7684\u51fd\u6570, \u800c\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019, \u4e00\u822c\u4ecemain()\u5f00\u59cb\u8fd0\u884c. </p> <p>\u90a3\u4e48\u63a5\u4e0b\u6765, \u6211\u4eec\u6765\u770b# include  <p>\u8fd9\u4ee3\u8868\u4ec0\u4e48\u4e1c\u897f? \u9996\u5148\u6211\u4eec\u8981\u4e86\u89e3, \u4e00\u4e2aC/C++\u7a0b\u5e8f\u662f\u9700\u8981\u4e00\u4e2a\u9884\u5904\u7406\u5668\u7684, \u6539\u7a0b\u5e8f\u8fdb\u884c\u4e3b\u7f16\u8bd1\u4e4b\u524d\u5bf9\u6e90\u6587\u4ef6\u7684\u5904\u7406. \u800c# include \u5c31\u662f\u76f8\u5f53\u4e8e\u628aiostream\u6587\u4ef6\u6dfb\u52a0\u5230\u7a0b\u5e8f\u4e4b\u4e2d, \u6216\u8005\u8bf4, iostream\u6587\u4ef6\u7684\u5185\u5bb9\u4ee3\u66ff\u4e86\u8fd9\u4e00\u884c. \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u79cd\u53d6\u4ee3\u5e76\u4e0d\u662f\"\u4e00\u6b21\u6027\u7684\", \u6216\u8005\u8bf4\"\u53d6\u4ee3\"\u4e00\u6b21\u5176\u5b9e\u5e76\u4e0d\u5408\u9002, \u800c\u662f\u5728\u539f\u6709\u6587\u4ef6\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b, \u4ea7\u51fa\u4e00\u4efd\u6e90\u4ee3\u7801\u6587\u4ef6\u548ciostream\u7ec4\u5408\u6210\u7684\u4e00\u4e2a\u590d\u5408\u6587\u4ef6 <p>io\u4ee3\u8868input output, \u56e0\u6b64, \u4f7f\u7528\u4e86cin\u548ccout\u7684\u7a0b\u5e8f\u5fc5\u987b\u90fd\u5305\u542biostream</p> <p>\u8fd9\u79cd\u6587\u4ef6\u79f0\u4e3a\u5305\u542b\u6587\u4ef6(include file)\u6216\u8005\u8bf4\u5934\u6587\u4ef6(heading file). C/C++\u5404\u81ea\u7684\u5934\u6587\u4ef6\u540d\u662f\u6709\u4e9b\u4e0d\u4e00\u6837\u7684</p> <ol> <li>C++ \u65e7\u98ce\u683c:   .h\u7ed3\u5c3e   \u4f8b\u5982iostream.h    C++\u53ef\u4ee5\u4f7f\u7528</li> <li>C\u65e7\u98ce\u683c:  .h\u7ed3\u5c3e, \u4f8b\u5982math.h, C/C++\u90fd\u53ef\u4ee5\u4f7f\u7528</li> <li>C++\u65b0\u98ce\u683c:  \u6ca1\u6709\u6269\u5c55\u540d, \u4f8b\u5982iostream    C++\u53ef\u4ee5\u4f7f\u7528, \u4f46\u662f\u8981\u52a0\u4e0anamespace std</li> <li>C \u8f6c\u6362\u540e\u7684\u98ce\u683c:  \u524d\u7f00\u52a0\u4e0ac, \u6ca1\u6709\u6269\u5c55\u540d    \u4f8b\u5982cmath   C++ \u53ef\u4ee5\u4f7f\u7528, \u4f46\u662f\u4e0d\u662fC\u7684\u7279\u6027</li> </ol> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770b, \u4ec0\u4e48\u662fusing namespace std</p> <p>\u5982\u679c\u4f7f\u7528\u7684\u662fiostream\u800c\u4e0d\u662fiostream.h, \u5219\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u7684\u540d\u79f0\u7a7a\u95f4\u7f16\u8bd1\u6307\u4ee4\u6765\u4f7fiostream\u4e2d\u7684\u5b9a\u4e49\u5bf9\u7a0b\u5e8f\u53ef\u7528</p> <p>\u540d\u79f0\u7a7a\u95f4\u652f\u6301\u662fC++\u7684\u4e00\u4e2a\u7279\u6027. \u4e24\u4e2a\u6587\u4ef6\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u76f8\u540c\u540d\u79f0\u7684\u51fd\u6570, \u90a3\u4e48\u7f16\u8bd1\u5668\u8fd0\u884c\u7684\u65f6\u5019\u9047\u4e0a\u4e86\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570, \u5b83\u600e\u4e48\u662f\u77e5\u9053\u8c03\u7528\u7684\u662f\u8c01\u7684\u51fd\u6570? \u4f8b\u5982\u6709\u4e00\u4e2a\u51fd\u6570\u53eb\u505adamn(), \u800cFranklin \u548c Van\u90fd\u6709\u8fd9\u4e2a\u51fd\u6570.</p> <p>\u8981\u8c03\u7528\u8c01\u7684\u5462? \u4e8e\u662f\u4f1a\u7528Franklin::damn(); Van::damn(), \u4ee5\u505a\u533a\u5206</p> <p>\u7c7b, \u51fd\u6570, \u53d8\u91cf\u662fC++\u7f16\u8bd1\u5668\u7684\u6807\u51c6\u7ec4\u4ef6, \u5b83\u4eec\u90fd\u653e\u7f6e\u5728\u540d\u79f0\u7a7a\u95f4std\u4e2d, \u56e0\u6b64\u4e8b\u5b9e\u4e0a, iostream\u4e2d\u7528\u4e8e\u8f93\u51fa\u7684cout\u5176\u5b9e\u662fstd::out. \u90a3\u4e48\u8fd9\u91cc\u7684using namespace std\u5c31\u4ee3\u8868\u7740: std\u540d\u79f0\u7a7a\u95f4\u7684\u6240\u6709\u540d\u79f0\u90fd\u53ef\u7528, \u662f\u4e00\u79cd\u5077\u61d2\u7684\u505a\u6cd5. \u66f4\u597d\u7684\u65b9\u6cd5\u5176\u5b9e\u662f: (\u5047\u5982\u8bf4, \u6211\u53ea\u7528\u5230\u4e86cout \u548c cin) using std::cout;</p> <p>using std::cin; </p> <p>\u6700\u540e\u770b\u770bcout &lt;&lt; endl;</p> <p>endl\u662fC++\u4e2d\u7279\u6b8a\u7684\u7b26\u53f7, \u8868\u793a\u4e00\u4e2a\u4e3a\u91cd\u8981\u7684\u6982\u5ff5: \u91cd\u542f\u4e00\u884c. \u4e00\u4e2aendl\u4f1a\u4f7f\u5f97\u5149\u6807\u79fb\u5230\u4e0b\u4e00\u884c</p> <p>endl\u5bf9\u4e8ecout\u6765\u8bf4\u5177\u6709\u7279\u6b8a\u7684\u610f\u4e49, \u56e0\u6b64\u5b83\u88ab\u79f0\u4e3a\u63a7\u5236\u7b26</p> <p>\u5f53\u7136, \u6362\u884c\u8fd8\u6709\u4e00\u79cd\u65e7\u65b9\u6cd5: \\n; \u56e0\u6b64, \u5982\u679c\u60f3\u8981\u4e00\u884c\u7a7a\u7740, \u6709\u4e24\u79cd\u65b9\u6cd5:</p> <p>cout &lt;&lt; \"\\n\" ;</p> <p>cout &lt;&lt; endl;</p> <p>\u90a3\u4e48\u6d89\u53ca\u5230\u8f93\u5165\u8f93\u51fa\u6d41, \u90a3\u4e48\u6709\u4e2a\u4e0d\u5f97\u4e0d\u63d0\u7684\u90a3\u4fbf\u662f: \u7f13\u51b2\u533a(buffer). \u7f13\u51b2\u533a\u662f\u4e00\u4e2a\u5b58\u50a8\u533a\u57df, \u7528\u4e8e\u4fdd\u5b58\u6570\u636e, IO\u8bbe\u65bd\u901a\u5e38\u5c06\u8f93\u5165\u6216\u8f93\u51fa\u4fdd\u5b58\u5728\u4e00\u4e2a\u7f13\u51b2\u533a\u4e2d, \u8bfb\u5199\u7f13\u51b2\u533a\u7684\u52a8\u4f5c\u4e0e\u7a0b\u5e8f\u4e2d\u7684\u52a8\u4f5c\u65e0\u5173. \u6211\u4eec\u53ef\u4ee5\u663e\u5f0f\u5730\u5237\u65b0\u8f93\u51fa\u7f13\u51b2, \u4ee5\u4fbf\u4e8e\u5f3a\u5236\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u5199\u5165\u8f93\u51fa\u8bbe\u5907</p> <p>\u5f53\u7136, \u8f93\u51fa\u8fd8\u80fd\u6709\u53e6\u4e00\u5957\u65b9\u6cd5:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nint main() {\n    // Complete the code.\n    int a;\n    long b;\n    char c;\n    float f;\n    double d;\n    scanf(\"%d %ld %c %f %lf\", &amp;a, &amp;b, &amp;c, &amp;f, &amp;d); // \u4e00\u6b21\u6027\u8bfb\u53d6\u4e94\u4e2a\u53c2\u6570\n    // \u628a\u8f93\u5165\u7684\u5f53\u505a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32, \u6bcf\u4e2a\u5143\u7d20\u662f\u4e0d\u540c\u6570\u636e\u7c7b\u578b\n    printf(\"%d\\n%ld\\n%c\\n%.3f\\n%.9lf\\n\",a, b, c, f, d);\n    // \\n\u4ee3\u8868\u6362\u884c, \u7136\u540e.3\u548c.9\u4ee3\u8868\u4fdd\u7559\u7684\u5c0f\u6570\u70b9\u4f4d\u6570\n    return 0;\n}\n// \u8fd9\u91cc\u662fC++\u7684\u4e00\u9053\u9898\u76ee, \u4f46\u662f\u53ef\u4ee5\u6539\u8fc7\u6765\n</code></pre> <p>\u6ce8\u610f\u5230, \u8fd9\u91cc\u8c03\u7528\u7684\u662f, \u8bf4\u660e\u662f\u7684\u8f6c\u6362\u540e\u7684\u98ce\u683c!"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#c_2","title":"C++\u6e90\u4ee3\u7801\u98ce\u683c","text":"<ol> <li>\u6bcf\u6761\u8bed\u53e5\u5360\u4e00\u884c</li> <li>\u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u5f00\u59cb\u7684\u82b1\u62ec\u53f7\u548c\u4e00\u4e2a\u7ed3\u675f\u7684\u82b1\u62ec\u53f7, \u4e24\u4e2a\u82b1\u62ec\u53f7\u5404\u5360\u4e00\u884c</li> <li>\u51fd\u6570\u4e2d\u7684\u8bed\u53e5\u90fd\u76f8\u5bf9\u4e8e\u82b1\u62ec\u53f7\u8fdb\u884c\u7f29\u8fdb</li> <li>\u4e0e\u51fd\u6570\u540d\u79f0\u76f8\u5173\u7684\u5706\u62ec\u53f7\u5468\u56f4\u6ca1\u6709\u7a7a\u767d</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_1","title":"\u6ce8\u91ca","text":"<p>\u4e24\u79cd\u6ce8\u91ca\u683c\u5f0f:</p> <p>\u5355\u884c\u6ce8\u91ca: //     \u591a\u884c\u6ce8\u91ca:  / /(\u6ce8\u610f, \u8fd9\u79cd\u591a\u884c\u6ce8\u91ca\u7684\u8bed\u6cd5\u5728C\u4e2d\u4e5f\u53ef\u4ee5\u7528)</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\n/*\nmain\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u5165\u53e3, \u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u5fc5\u987b\u6709\u8fd9\u4e48\u4e00\u4e2a\u51fd\u6570\n\u800c\u4e14\u4e00\u4e2a\u540d\u5b57\u6709\u4e14\u53ea\u80fd\u6709\u4e00\u4e2a\n*/\nint main()\n{\n    cout &lt;&lt; \"C++ program\" &lt;&lt; endl; // \u8f93\u51fa\u5b57\u7b26\u4e32\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_2","title":"\u53d8\u91cf","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_3","title":"\u53d8\u91cf\u7684\u521b\u5efa","text":"<p>\u53d8\u91cf\u5b58\u5728\u7684\u610f\u4e49: \u65b9\u4fbf\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u7a7a\u95f4</p> <p>\u53d8\u91cf\u521b\u5efa\u7684\u8bed\u6cd5: \u6570\u636e\u7c7b\u578b \u53d8\u91cf\u540d = \u53d8\u91cf\u521d\u59cb\u503c</p> <p>\u4f8b\u5982: <code>int a = 10;</code>, \u521b\u5efa\u53d8\u91cfa\u7684\u540c\u65f6, \u8d4b\u4e88\u5176\u4e00\u4e2a\u521d\u59cb\u503c, \u8fd9\u79f0\u4e4b\u4e3a\u521d\u59cb\u5316</p> <p>\u4f46\u662f\u6ce8\u610f! \u521d\u59cb\u5316\u4e0d\u7b49\u4e8e\u8d4b\u503c! \u540e\u8005\u662f\u628a\u5bf9\u8c61\u5f53\u524d\u7684\u503c\u64e6\u9664, \u800c\u4ee5\u4e00\u4e2a\u65b0\u503c\u6765\u4ee3\u66ff</p> <p>\u5f53\u7136\u540c\u65f6\u4e5f\u53ef\u4ee5\u7ed9\u591a\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u8fdb\u884c\u521b\u5efa:</p> <p><code>int a = 10, b, c, d = 154;</code></p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 10;\n    cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;\n    return 0;\n}\n// output:  a = 10\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u53d8\u91cf\u5fc5\u987b\u58f0\u660e? \u4e3a\u4e86\u9632\u6b62\u56e0\u4e3a\u53d8\u91cf\u540d\u79f0\u62fc\u5199\u9519\u8bef\u800c\u5bfc\u81f4\u7684\u9519\u8bef</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_4","title":"\u5e38\u91cf","text":"<p>\u7528\u4e8e\u8bb0\u5f55\u7a0b\u5e8f\u4e2d\u4e0d\u53ef\u66f4\u6539\u7684\u6570\u636e</p> <pre><code>/*\nC++\u5b9a\u4e49\u5e38\u91cf\u4e24\u79cd\u65b9\u5f0f:\n#define \u5e38\u91cf\u540d \u5e38\u91cf\u503c, \u8fd9\u901a\u5e38\u5728\u6587\u4ef6\u4e0a\u65b9\u8fdb\u884c\u5b9a\u4e49\nconst \u6570\u636e\u7c7b\u578b \u5e38\u91cf\u540d = \u5e38\u91cf\u503c\n*/\n</code></pre> <p>\u6ce8\u610f: \u4e00\u822c\u6765\u8bf4, \u4e0d\u540c\u6587\u4ef6\u4e4b\u95f4\u53ef\u80fd\u6709const\u5b9a\u4e49\u7684\u76f8\u540c\u540d\u5b57\u7684\u53d8\u91cf, \u4f46\u662f\u9ed8\u8ba4\u5c31\u662fconst\u5bf9\u8c61\u4ec5\u5728\u5404\u81ea\u6587\u4ef6\u5185\u6709\u6548. \u5047\u5982\u8bf4\u6587\u4ef61\u548c2\u90fd\u6709const int a, \u4f46\u662f\u5176\u5b9e\u4e24\u4e2a\u6587\u4ef6\u4e2d\u7684\u4e24\u4e2aa\u662f\u72ec\u7acb\u7684</p> <p>\u5982\u679c\u60f3\u8981\u4e00\u4e2aconst\u7684\u5e38\u91cf\u88ab\u591a\u4e2a\u6587\u4ef6\u5171\u4eab, \u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\u90fd\u6dfb\u52a0extern\u5173\u952e\u8bcd</p> <p>\u9644: const\u7684\u5b9e\u8d28:</p> <pre><code>double dval = 3.14;\nconst int &amp;ri = dval;\n// \u5b9e\u9645\u4e0a\u53d1\u751f\u4e86\u4ec0\u4e48\u5462?\nconst int temp = dval;\nconst int &amp;ri = temp;\n// \u8fd9\u79cd\u60c5\u51b5\u4e0b, ri\u7ed1\u5b9a\u5728\u4e86\u4e00\u4e2a\u4e34\u65f6\u91cf\u5bf9\u8c61\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_5","title":"\u5173\u952e\u5b57","text":"<p>C++\u4e2d\u9884\u5148\u4fdd\u7559\u7684\u5355\u8bcd(\u6807\u8bc6\u7b26)</p> <p>\u5728\u7ed9\u53d8\u91cf\u6216\u8005\u5e38\u91cf\u8d77\u540d\u79f0\u7684\u65f6\u5019, \u4e0d\u80fd\u591f\u4f7f\u7528\u5173\u952e\u8bcd, \u5426\u5219\u4f1a\u4ea7\u751f\u6b67\u4e49</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_6","title":"\u6807\u8bc6\u7b26\u547d\u540d\u89c4\u5219:","text":"<p>\u7ed9\u6807\u8bc6\u7b26(\u53d8\u91cf \u5e38\u91cf)\u547d\u540d\u7684\u65f6\u5019, \u6709\u4e00\u5957\u81ea\u5df1\u7684\u89c4\u5219</p> <ol> <li>\u6807\u8bc6\u7b26\u4e0d\u80fd\u662f\u5173\u952e\u5b57</li> <li>\u6807\u8bc6\u7b26\u53ea\u80fd\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u6784\u6210\uff08\u6ca1\u9519\uff0c\u7a7a\u683c\u4e0d\u53ef\u4ee5\uff09 </li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5fc5\u987b\u662f\u5b57\u6bcd\u6216\u8005\u662f\u4e0b\u5212\u7ebf(\u4e0d\u53ef\u4ee5\u662f\u6570\u5b57)</li> <li>\u6807\u8bc6\u7b26\u4e2d\u662f\u533a\u5206\u5927\u5c0f\u5199\u7684</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_7","title":"\u521d\u59cb\u5316","text":"<p>\u4e00\u822c\u6765\u8bf4: int a = 5;  \u8fd9\u79cd\u521d\u59cb\u5316\u8bed\u53e5\u662f\u6765\u81ea\u4e8eC\u8bed\u8a00. \u800cC++\u4e5f\u6709C\u4e2d\u6ca1\u6709\u7684\u521d\u59cb\u5316\u8bed\u53e5:</p> <p>\u4f8b\u5982: int a(5); // alternative C++ syntax</p> <p>\u8fd8\u6709\u4e00\u79cd\u521d\u59cb\u5316\u65b9\u5f0f, \u8fd9\u79cd\u65b9\u5f0f\u7528\u4e8e\u6570\u7ec4\u548c\u7ed3\u6784, \u4f46\u662f\u5728C++98\u4e2d, \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5355\u503c\u53d8\u91cf:</p> <p>int a = {5};   \u800c\u8fd9\u79cd\u60c5\u51b5\u5728C++11\u4e2d\u66f4\u4e3a\u5e38\u89c1, \u800c\u4e14\u767b\u53f7\u53ef\u4ee5\u4e0d\u4f7f\u7528: int a{5};</p> <p>\u8fd9\u6709\u52a9\u4e8e\u9632\u8303\u7c7b\u578b\u8f6c\u6362\u7684\u9519\u8bef!!  C++11\u4f7f\u5f97\u5927\u62ec\u53f7\u521d\u59cb\u5316\u5668\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b!!</p> <p>\u6b64\u5916, \u53ef\u4ee5\u4f7f\u7528undesigned\u8bed\u6cd5\u6765\u6269\u5927\u50a8\u5b58\u8303\u56f4: \u4f8b\u5982int\u539f\u672c\u7684\u8303\u56f4\u662f-32768 \u5230 32767, \u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e86:</p> <p>undesigned int ...; \u90a3\u4e48\u8fd9\u4e2a\u50a8\u5b58\u7684\u8303\u56f4\u53ef\u4ee5\u53d8\u62100-65535;  \u5f53\u7136, \u524d\u63d0\u662f\u8fd9\u4e2a\u53d8\u91cf\u5c06\u4e0d\u80fd\u53d8\u6210\u8d1f\u6570</p> <p>\u90a3\u4e48\u987a\u5634\u63d0\u5230\u4e86\u50a8\u5b58\u7684\u4e0a\u9650, \u90a3\u4e48\u5047\u5982\u8bf4int a = 32767; \u90a3\u4e48 a+1 = ?</p> <p>\u4e8b\u5b9e\u4e0a, \u8fd9\u4e2a\u6570\u636e\u5c06\u4f1a\u6ea2\u51fa, \u800c\u53cd\u8fc7\u6765\u53d6\u4e2d\u533a\u95f4\u53e6\u4e00\u7aef\u7684\u503c, \u5373\u4e3a-32768</p> <p>\u540c\u7406\u53ef\u5f97, \u5982\u679c\u662fundesigned int a = 65535, then a+1 = 0; undesigned int a = 0;  a-1 = 65535</p> <p>\u90a3\u4e48, \u5047\u5982\u8bf4\u6211\u53ea\u60f3\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf(declaration), \u4f46\u662f\u5e76\u4e0d\u60f3\u521d\u59cb\u5316\u5b83, \u90a3\u4e48\u5c31\u52a0\u4e0a\u5173\u952e\u8bcdextern.</p> <p><code>extern int a;</code></p> <p>\u6ce8\u610f: \u53d8\u91cf\u80fd\u4e14\u4ec5\u80fd\u88ab\u5b9a\u4e49\u4e00\u6b21, \u4f46\u662f\u53ef\u4ee5\u88ab\u591a\u6b21\u58f0\u660e</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_8","title":"\u6570\u636e\u7c7b\u578b","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_9","title":"\u6574\u578b","text":"<p>C++\u89c4\u5b9a\u5728\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019, \u5fc5\u987b\u4e4b\u5904\u5b83\u7684\u6570\u636e\u7c7b\u578b, \u5426\u5219\u4e0d\u80fd\u5206\u914d\u5185\u5b58</p> <p>\u800c\u6570\u636e\u7c7b\u578b\u7684\u5b58\u5728\u610f\u4e49: \u7ed9\u53d8\u91cf\u5206\u914d\u5408\u9002\u7684\u5185\u5b58\u7a7a\u95f4</p> <p>\u6574\u578b\u7684\u7c7b\u578b\u4e5f\u7528\u5f88\u591a: \u533a\u522b\u5728\u4e8e\u6240\u5360\u5185\u5b58\u7684\u7a7a\u95f4\u4e0d\u540c</p> <p>\u8bb0\u4f4f\u6307\u6570\u7684\u65b9\u5f0f:15 * 2 + 1 = 31    31 * 2 + 1 = 32</p> <p>\u6ce8\u610f: short\u8303\u56f4: -32768 ~ 32767</p> <p>\u8bf7\u6ce8\u610f: short\u5360\u7528\u5185\u5b58\u6bd4int\u5c11, \u4f46\u662f\u4e24\u8005\u7684\u957f\u5ea6\u662f\u4e00\u6837\u7684! \u56e0\u6b64\u5982\u679c\u8282\u7701\u5185\u5b58\u5f88\u91cd\u8981, \u90a3\u4e48\u4e00\u5b9a\u8981\u662f\u7528short\u800c\u4e0d\u662fint!**</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_10","title":"\u6574\u578b\u5b57\u9762\u503c","text":"<p>C++\u4f7f\u7528\u524d\u4e00\u4e24\u4f4d\u6765\u6807\u8bc6\u6570\u5b57\u5e38\u91cf\u7684\u57fa\u6570(\u8fdb\u5236), \u5982\u679c\u5f00\u5934\u662f1-9, \u90a3\u4e48\u57fa\u6570\u5c31\u662f10</p> <p>\u5982\u679c\u7b2c\u4e00\u4f4d\u662f0, \u7b2c\u4e8c\u4f4d\u662f1-7, \u90a3\u4e48\u5c31\u662f\u516b\u8fdb\u5236</p> <p>\u5982\u679c\u524d\u4e24\u4f4d\u662f0x\u6216\u80050X, \u90a3\u4e48\u5c31\u662f\u5341\u516d\u8fdb\u5236: a-f\u6216\u8005A-F\u4ee3\u8868\u4e8610-15</p> <p>\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b, cout\u90fd\u662f\u4ee5\u5341\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u6574\u6570; \u4f46\u662f\u63d0\u4f9b\u4e86\u5207\u6362\u8f93\u51fa\u683c\u5f0f\u7684\u63a7\u5236\u7b26: dec(\u5341\u8fdb\u5236) hex(\u5341\u516d\u8fdb\u5236) oct(\u516b\u8fdb\u5236)</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    short a = 114;\n    short b = 156;\n    cout &lt;&lt; hex;\n    cout &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;// \u4e24\u4e2aendl\u4ee3\u8868\u989d\u5916\u7a7a\u51fa\u4e00\u884c!\n    cout &lt;&lt; b &lt;&lt; endl &lt;&lt; endl;\n    cout &lt;&lt; dec;\n    cout &lt;&lt; a &lt;&lt; endl;\n    return 0; \n}\n/*\u8f93\u51fa\n72   (114\u7684\u5341\u516d\u8fdb\u5236)\n\n9c   (156\u7684\u5341\u516d\u8fdb\u5236)\n\n114\n*/\n</code></pre> <p>\u6ce8\u610f: \u5355\u72ec\u4e00\u4e2acout &lt;&lt; hex; \u5e76\u4e0d\u4f1a\u663e\u793a\u4efb\u4f55\u4e1c\u897f, \u6216\u8005\u662f\u6362\u884c, \u4f46\u662f\u4f1a\u5c06\u8f93\u51fa\u683c\u5f0f\u53d8\u4e3a\u5341\u516d\u8fdb\u5236, \u800c\u4e14\u76f4\u5230\u4e0b\u4e00\u6b21\u4fee\u6539, \u8f93\u51fa\u4e00\u76f4\u662f\u5341\u516d\u8fdb\u5236!!</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#sizeof","title":"sizeof \u5173\u952e\u5b57","text":"<p>\u5229\u7528sizeof\u53ef\u4ee5\u7edf\u8ba1\u6570\u636e\u7c7b\u578b\u6240\u5360\u5185\u5b58\u5927\u5c0f</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    short a = 32765;\n    int b = 114514;\n    long long c = 1919810;\n    cout &lt;&lt; \"The size of \" &lt;&lt; \"a\" &lt;&lt; \" is \" &lt;&lt; sizeof(a) &lt;&lt; endl;\n    cout &lt;&lt; \"The size of \" &lt;&lt; \"b\" &lt;&lt; \" is \" &lt;&lt; sizeof(b) &lt;&lt; endl;\n    cout &lt;&lt; \"The size of \" &lt;&lt; \"c\" &lt;&lt; \" is \" &lt;&lt; sizeof(c) &lt;&lt; endl;\n    return 0;  // \u6ce8\u610f\u5b57\u7b26\u4e32\u5fc5\u987b\u4f7f\u7528\u53cc\u5f15\u53f7, \u800c\u4e0d\u80fd\u662f\u7684\u5355\u5f15\u53f7\n}\n/*\nThe size of a is 2\nThe size of b is 4\nThe size of c is 8\n*/\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_11","title":"\u5b9e\u578b(\u6d6e\u70b9\u578b)","text":"<p>\u7528\u4e8e\u8868\u793a\u5c0f\u6570</p> <p>\u6d6e\u70b9\u578b\u53d8\u91cf\u5206\u4e3a\u4e24\u79cd: \u5355\u7cbe\u5ea6 float    \u53cc\u7cbe\u5ea6  double</p> <p>\u6ce8\u610f: \u8fd9\u91cc\u8bf4\u7684\u662f\u6709\u6548\u6570\u5b57! 3.14\u6709\u6548\u6570\u5b57\u662f3\u4f4d!</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_12","title":"\u5b57\u7b26\u578b","text":"<p>char  \u53d8\u91cf\u540d = '   ';   \u5b57\u7b26\u4e32\u53d8\u91cf\u7528\u4e8e\u663e\u793a\u5355\u4e2a\u5b57\u7b26</p> <p>\u5b57\u7b26\u4e32\u53d8\u91cf\u53ea\u5360\u7528\u4e00\u4e2a\u5b57\u8282!  \u5b57\u7b26\u578b\u53d8\u91cf\u5e76\u4e0d\u662f\u628a\u5b57\u7b26\u672c\u8eab\u653e\u5728\u5185\u5b58\u4e4b\u4e2d, \u800c\u662f\u628a\u5bf9\u5e94\u7684ASCII\u7801\u653e\u5230\u5b58\u50a8\u5355\u5143\u4e4b\u4e2d</p> <p>\u800c\u4e14\u6ce8\u610f! \u8fd9\u4e2a\u65f6\u5019, \u53ea\u80fd\u4f7f\u7528\u5355\u5f15\u53f7!!!!</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528(int)\u53d8\u91cf\u540d \u6765\u67e5\u770b\u8fd9\u4e2a\u53d8\u91cf\u540d\u6240\u5bf9\u5e94\u7684\u5355\u5b57\u7b26\u7684ASCII\u7801</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    char ch1 = 'a';\n    char ch2 = 'A';\n    cout &lt;&lt; \"The size of ch1 is \" &lt;&lt; sizeof(ch1) &lt;&lt; endl;\n    cout &lt;&lt; \"The ASCII of ch1 is \" &lt;&lt; (int)ch1 &lt;&lt; endl;\n    cout &lt;&lt; \"The ASCII of ch2 is \" &lt;&lt; (int)ch2 &lt;&lt; endl;\n    return 0;\n}\n/*\nThe size of ch1 is 1\nThe ASCII of ch1 is 97\nThe ASCII of ch2 is 65\n*/\n</code></pre> <p>\u6ce8\u610f: \u5982\u679ccin &gt;&gt; ch1, \u5982\u679c\u8f93\u5165\u7684\u662fA, \u90a3\u4e48\u5176\u5b9e\u50a8\u5b58\u7684\u662f\u5b83\u7684ASCII\u7801! \u90a3\u4e48\u4e3a\u4ec0\u4e48\u8f93\u5165\u7684\u662fA, \u8f93\u51fa\u7684\u4e5f\u662fA, \u4f46\u662f\u50a8\u5b58\u7684\u5374\u662f\u5176ASCII\u7801? \u90a3\u662f\u56e0\u4e3acin\u548ccout\u5e2e\u5fd9\u5b8c\u6210\u4e86\u8f6c\u5316, \u8fd9\u4e24\u4e2a\u7684\u884c\u4e3a\u90fd\u662f\u7531\u53d8\u91cf\u7c7b\u578b\u5f15\u5bfc\u7684!!!</p> <p>\u53e6\u5916, \u989d\u5916\u4ecb\u7ecd\u4e00\u4e2a\u51fd\u6570: cout.put(), \u8fd9\u4e2a\u53ef\u4ee5\u663e\u793a\u4e00\u4e2a\u5b57\u7b26.  \u8fd9\u4e2a\u51fd\u6570\u957f\u5f97\u548cpython\u7684\u98ce\u683c\u5f88\u50cf, \u6ca1\u9519, \u5b83\u4e0eOOP\u79bb\u4e0d\u5f00\u5173\u7cfb</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_13","title":"\u5b57\u7b26\u4e32\u578b","text":"<p>C++\u4e2d, \u6709\u4e24\u79cd\u98ce\u683c:</p> <p>\u6cbf\u7528C\u7684:  char \u53d8\u91cf\u540d[] = \"\u5b57\u7b26\u4e32\"</p> <p>C++\u98ce\u683c:   string \u53d8\u91cf\u540d = \"\u5b57\u7b26\u4e32\"</p> <p>\u6ce8\u610f, \u5b57\u7b26\u4e32\u7684\u8bdd, \u4e00\u5b9a\u8981\u7528\u53cc\u5f15\u53f7; \u5355\u5b57\u7b26\u578b\u7684\u624d\u7528\u5355\u5f15\u53f7</p> <p>\u4f46\u662f\u6ce8\u610f!!!!!</p> <p>\u5982\u679c\u662f\u4f7f\u7528string\u7684\u8bdd, \u4e00\u5b9a\u8981\u5728\u7a0b\u5e8f\u7684\u6700\u524d\u9762\u52a0\u4e0a:</p> <pre><code># include &lt;string&gt;\n</code></pre> <p>\u8fd9\u4e2a\u662f\u5934\u6587\u4ef6, \u4e00\u5b9a\u8981\u52a0\u4e0a\u8fd9\u53e5\u8bdd\u624d\u80fd\u7528string\u8bed\u6cd5</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_14","title":"\u5e03\u5c14\u7c7b\u578b","text":"<p>bool\u7c7b\u578b\u53ea\u6709\u4e24\u4e2a\u503c: true = 1     flase = 0</p> <p>\u8bed\u6cd5: bool \u53d8\u91cf\u540d = true/flase</p> <p>\u5b83\u4eec\u5360\u7528\u7684\u7c7b\u578b\u53ea\u6709\u4e00\u4e2a\u5b57\u8282</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_15","title":"\u5982\u4f55\u9009\u62e9\u7c7b\u578b","text":"<ol> <li>\u5982\u679c\u660e\u786e\u77e5\u9053\u4e0d\u53ef\u80fd\u662f\u8d1f\u6570, \u4f7f\u7528unsigned</li> <li>\u4f7f\u7528int\u6267\u884c\u6574\u6570\u8fd0\u7b97! (\u540e\u9762\u597d\u50cf\u7406\u89e3\u9519\u4e86, \u8bf4short\u66f4\u597d, \u4f46\u662f\u5176\u5b9eint\u66f4\u597d), short\u5e38\u5e38\u663e\u5f97\u592a\u5c0f\u800clong\u4e00\u822c\u548cint\u6709\u4e00\u6837\u7684\u5c3a\u5bf8, \u5982\u679c\u8d85\u8fc7\u4e86int, \u9009\u7528long long</li> <li>\u6267\u884c\u6d6e\u70b9\u6570\u8fd0\u7b97\u7528double, \u56e0\u4e3afloat\u7ecf\u5e38\u7cbe\u5ea6\u4e0d\u591f, \u800c\u4e14\u4e24\u8005\u8ba1\u7b97\u4ee3\u4ef7\u76f8\u5dee\u65e0\u51e0. \u4e8b\u5b9e\u4e0a, \u67d0\u4e9b\u673a\u5668\u4e0a, double\u8fd0\u884c\u66f4\u5feb; long double\u63d0\u4f9b\u7684\u7cbe\u5ea6\u662f\u6ca1\u6709\u5fc5\u8981\u7684, \u800c\u4e14\u6d88\u8017\u5f88\u5927</li> </ol> <p><code>int</code> is the most optimal integer type for the platform.</p> <ul> <li>Use <code>int</code> for integer arithmetic by default.</li> <li>Use <code>long long</code> if the range of <code>int</code> is not large enough.</li> <li>Use smaller types (<code>short</code>, or even <code>unsigned char</code>) for memory-saving or other special purposes.</li> <li>Use <code>unsigned</code> types for special purposes. We will see some in later lectures.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_16","title":"\u7c7b\u578b\u8f6c\u6362","text":"<ul> <li>\u5f53\u6211\u4eec\u628a\u4e00\u4e2a\u975e\u5e03\u5c14\u7c7b\u578b\u7684\u7b97\u6570\u503c\u8d4b\u4e3a\u5e03\u5c14\u7c7b\u578b, 1\u5c31\u662ftrue, 0\u5c31\u662ffalse</li> <li>\u628a\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u8d4b\u7ed9\u975e\u5e03\u5c14\u7c7b\u578b, true\u5c31\u662f1, false\u5c31\u662f0</li> <li>\u628a\u4e00\u4e2a\u6d6e\u70b9\u6570\u8d4b\u7ed9\u6574\u6570\u7c7b\u578b, \u505a\u8fd1\u4f3c\u5904\u7406, \u53ea\u4fdd\u7559\u5c0f\u6570\u70b9\u4e4b\u524d\u7684\u90e8\u5206</li> <li>\u628a\u4e00\u4e2a\u6574\u6570\u503c\u8d4b\u7ed9\u6d6e\u70b9\u6570\u7c7b\u578b, \u5c0f\u6570\u90e8\u5206\u8bb0\u4e3a0</li> <li>\u7ed9undesigned\u7c7b\u578b\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u503c, \u7ed3\u679c\u662f\u521d\u59cb\u503c\u5bf9\u65e0\u7b26\u53f7\u7c7b\u578b\u8868\u793a\u503c\u6570\u503c\u53d6\u6a21\u540e\u7684\u4f59\u6570. \u4f8b\u59828\u5b57\u8282\u5927\u5c0f\u7684undesigned char\u8303\u56f4\u662f0-255, \u8868\u793a\u603b\u6570\u4e3a256, \u56e0\u6b64undesigned char i = -1, \u4ee3\u8868\u7684\u5c31\u662f255</li> <li>\u5982\u679c\u662f\u8d4b\u7ed9signed\u7c7b\u578b\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u503c, \u90a3\u4e48\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684(undefined), \u53ef\u80fd\u4ea7\u751f\u5783\u573e\u6570\u636e</li> </ul> <p>\u8fd8\u6709\u4e00\u4e9b\u60c5\u51b5\u4f1a\u53d1\u751f\u7c7b\u578b\u7684\u8f6c\u6362\uff1a</p> <ol> <li>Binary <code>+</code>, <code>-</code> and <code>*</code>, <code>/</code>  If any one operand is of floating-point type and the other is an integer, the integer will be implicitly converted to that floating-point type.</li> </ol> <p><code>c++    double pi = 3.14;    int diameter = 20;    // WhatType c = pi * diameter;  ??    double c = pi * diameter; // 62.8</code></p> <p>\u4e8c\u5143\u8ba1\u7b97\u4e2d\u6709\u6d6e\u70b9\u6570\uff0c \u90a3\u4e48\u7ed3\u679c\u4e00\u5b9a\u662f\u6d6e\u70b9\u6570</p> <ol> <li>\u9664\u6cd5\uff1aa/b</li> </ol> <p>Assume <code>a</code> and <code>b</code> are of the same type <code>T</code> (after conversions as mentioned above).</p> <ul> <li>Then, the result type is also <code>T</code>.</li> </ul> <p>Two cases:</p> <ul> <li>If <code>T</code> is a floating-point type, this is a floating-point division.</li> </ul> <p>\u56e0\u6b64\u5982\u679c\u5e0c\u671b\u4e24\u4e2a\u6574\u6570\u76f8\u9664\u5f97\u5230double, \u53ef\u4ee5\u524d\u9762\u4e58\u4ee5\u4e00\u4e2a1.0\u51fa\u53d1\u9690\u5f62\u8f6c\u6362</p> <ul> <li>If <code>T</code> is an integer type, this is an integer division\uff0c \u7ed3\u679c\u4fdd\u7559\u6574\u6570</li> </ul> <p>3/-2 = -1\uff08truncated towards zero\uff09 a/2: int   a/2.0: double</p> <ol> <li>signed integer overflow: \u6570\u636e\u6ea2\u51fa</li> </ol> <pre><code>int ival = 100000; long long llval = ival;\nint result1 = ival * ival;               // (1) overflow\nlong long result2 = ival * ival;         // (2) overflow\nlong long result3 = llval * ival;        // (3) not overflow\nlong long result4 = llval * ival * ival; // (4) not overflow\n// RHS \u6709long long, \u90a3\u4e48\u7ed3\u679c\u7c7b\u578b\u4f1a\u201c\u81e3\u670d\u4e8e\u201dlong long\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_17","title":"\u590d\u5408\u7c7b\u578b","text":"<p>compound type\u662f\u6307\u57fa\u4e8e\u5176\u4ed6\u7c7b\u578b\u5b9a\u4e49\u7684\u7c7b\u578b, \u6709\u51e0\u79cd\u590d\u5408\u7c7b\u578b, \u6211\u4eec\u73b0\u5728\u4ecb\u7ecd\u4e24\u79cd: \u5f15\u7528\u548c\u6307\u9488</p> <p>\u5f15\u7528: \u51fd\u6570\u4e2d\u4f20\u53c2, \u4e00\u822c\u662f\u53f3\u503c\u5f15\u7528(rvalue reference) , \u56e0\u6b64\u5bf9\u8fd9\u4e2a\u53c2\u6570\u770b\u4f3c\u505a\u4e86\u5f88\u591a, \u4e00\u70b9\u7528\u4e5f\u6ca1\u6709:</p> <pre><code>int a = 10; // \u5168\u5c40\u53d8\u91cf\nvoid plusone(int a) // \u5b9e\u8d28: \u4e34\u65f6\u518d\u521b\u5efa\u4e00\u4e2a\u540d\u5b57\u662fa\u7684\u53d8\u91cf, \u628a\u539f\u6765a\u7684\u503c\u8d4b\u7ed9\u4e86\u5b83\n{\n    a += 1; // \u4e00\u70b9\u7528\u4e5f\u6ca1\u6709!\n    return;\n} // \u8fd9\u4e2a\u51fd\u6570\u4e00\u65e6\u8c03\u7528\u7ed3\u675f, \u4e34\u65f6\u521b\u5efa\u7684a\u76f4\u63a5\u91ca\u653e\n</code></pre> <p>\u56e0\u6b64\u5982\u679c\u4f7f\u7528\u4e86&amp;\u5173\u952e\u5b57\u7b26, \u6765\u5de6\u503c\u5f15\u7528(lvalue reference), \u8fd9\u6837\u7684\u8bdd\u5c31\u4f1a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u5b9e\u8d28\u6027\u53d8\u5316</p> <pre><code>int a = 10; // \u5168\u5c40\u53d8\u91cf\nvoid plusone(int &amp;a)\n{\n    a += 1; // \u6709\u7528!\n    return;\n}\n</code></pre> <p>\u6ce8\u610f: \u5f15\u7528\u5e76\u975e\u5bf9\u8c61, \u56e0\u6b64\u4e0d\u80fd\u7ed9\u5f15\u7528\"\u5f15\u7528\"; \u5f15\u7528\u5c31\u662f\u7ed9\u5b58\u5728\u7684\u5bf9\u8c61\u5176\u522b\u540d, \u907f\u514d\u6df7\u4e71</p> <p>\u6307\u9488: \u4e0e\u5f15\u7528\u7c7b\u4f3c, \u6307\u9488\u4e5f\u5b9e\u73b0\u4e86\u5bf9\u5176\u4ed6\u5bf9\u8c61\u7684\u95f4\u63a5\u8bbf\u95ee, \u4f46\u662f\u4e24\u8005\u53c8\u6709\u4e0d\u540c\u7684\u5730\u65b9:</p> <ol> <li>\u6307\u9488\u672c\u8eab\u662f\u4e2a\u5bf9\u8c61(\u56e0\u6b64\u6709\u6307\u5411\u6307\u9488\u7684\u6307\u9488, \u60f3\u8981\u8bbf\u95ee\u6570\u636e, **\u4e24\u6b21\u89e3\u5f15\u7528; \u4e5f\u6709\u6307\u9488\u7684\u5f15\u7528(\u89c1\u4e0b))</li> </ol> <pre><code>int i = 42, *p;\nint *&amp;r = p; // r\u662f\u4e00\u4e2a\u5bf9p\u7684\u5f15\u7528, \u5de6\u8fb9\u6709\u4e2a*\u662f\u56e0\u4e3ap\u6307\u9488\u6570\u636e\u7c7b\u578b\u89c6\u4e3aint *\nr = &amp;i; // \u901a\u8fc7r\u64cd\u63a7p\u6307\u5411i\n*p = 0; // \u901a\u8fc7p\u4fee\u6539\u5185\u5b58\u6570\u636e\u4e3a0\n</code></pre> <ol> <li>\u6307\u9488\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u65e0\u9700\u8d4b\u503c(NULL)</li> </ol> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint a = 10;\nvoid plusone(int *p)\n{\n    *p += 1; // \u89e3\u5f15\u7528, \u76f4\u63a5\u83b7\u53d6\u5230\u4e86\u5bf9\u5e94\u5185\u5b58\u7684\u6570\u636e\n}\nint main()\n{\n    int * p = nullptr; // \u521b\u5efa\u4e00\u4e2a\u7a7a\u6307\u9488, \u6ce8\u610f\u556b\u55b1\u7684\u6b63\u786e\u8bed\u6cd5\n    p = &amp;a; // \u83b7\u53d6\u5b83\u7684\u5730\u5740, \u6307\u5411\u5b83\n    plusone(p);\n    p = nullptr; // \u7f6e\u4e3a\u7a7a\u6307\u9488\n    cout &lt;&lt; a &lt;&lt; endl; // 11\n    return 0;\n}\n</code></pre> <p>\u5efa\u8bae: \u521d\u59cb\u5316\u6240\u6709\u6307\u9488(nullptr), \u5e76\u4e14\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b, \u5c3d\u91cf\u7b49\u5b9a\u4e49\u4e86\u5bf9\u8c61\u4e4b\u540e\u518d\u5b9a\u4e49\u6307\u5411\u5b83\u7684\u6307\u9488. \u5982\u679c\u5b9e\u5728\u662f\u4e0d\u77e5\u9053\u6307\u9488\u6307\u5411\u4e86\u54ea\u91cc, \u90a3\u4e48\u521d\u59cb\u5316\u4e3anullptr\u6216\u8005NULL</p> <p>tips: <code>int i = 1024; *p = &amp;i; &amp;r = i;</code>\u5b8c\u5168\u5408\u6cd5! \u57fa\u672c\u6570\u636e\u7c7b\u578b\u548c\u7c7b\u578b\u4fee\u9970\u7b26\u7684\u5173\u7cfb: \u540e\u8005\u4e0d\u8fc7\u662f\u58f0\u660e\u7b26\u7684\u4e00\u90e8\u5206\u7f62\u4e86. \u6ce8\u610f, *\u662f\u4fee\u9970p\u7684, \u800c\u4e0d\u662fint * \u662f\u4e00\u4e2a\u6574\u4f53:</p> <p><code>int *p1, p2;  // p1\u662fint\u7c7b\u578b\u6307\u9488, p2\u662f\u6ca1\u6709\u521d\u59cb\u5316\u7684int\u53d8\u91cf</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#auto","title":"auto\u58f0\u660e","text":"<p>\u53ef\u4ee5\u4f7f\u7528auto\u5173\u952e\u8bcd, \u6765\u5c06\u53d8\u91cf\u7684\u7c7b\u578b\u8bbe\u7f6e\u6210\u4e0e\u521d\u59cb\u503c\u76f8\u540c. \u8fd9\u770b\u4f3c\u5f88\u65b9\u4fbf, \u4f46\u662f\u6709\u7684\u65f6\u5019\u4e5f\u4f1a\u5e26\u6765\u9ebb\u70e6</p> <p>\u4f8b\u5982:   auto a = 0;   \u4f46\u662f\u6211\u60f3\u628aa\u7684\u7c7b\u578b\u8bbe\u7f6e\u6210double\u5462? \u5bf9\u4e0d\u8d77, \u8fd9\u53e5\u8bdd\u53ea\u80fd\u628aa\u7684\u7c7b\u578b\u8bbe\u7f6e\u4e3aint</p> <p>\u4f7f\u7528auto\u4e5f\u80fd\u5728\u4e00\u6761\u8bed\u53e5\u4e2d\u58f0\u660e\u591a\u4e2a\u53d8\u91cf, \u56e0\u4e3a\u4e00\u6761\u58f0\u660e\u8bed\u53e5\u53ea\u80fd\u6709\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u7c7b\u578b, \u6240\u4ee5\u8bed\u53e5\u6240\u6709\u53d8\u91cf\u7684 \u521d\u59cb\u57fa\u672c\u6570\u636e\u7c7b\u578b\u90fd\u5fc5\u987b\u4e00\u6837:</p> <pre><code>auto i = 0, *p = i; // \u5408\u6cd5, i\u662f\u6574\u578b, p\u662f\u6574\u578b\u6307\u9488\nauto sz = 0, pi - 3.14 // \u4e0d\u5408\u6cd5\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_18","title":"\u6570\u636e\u7684\u8f93\u5165","text":"<p>\u8bed\u6cd5: cin &gt;&gt; \u53d8\u91cf</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nint main()\n{\n    string a = \"\";\n    cout &lt;&lt; \"Do you like what you see?\" &lt;&lt; endl;\n    cin &gt;&gt; a;\n    cout &lt;&lt; \"Your answer is: \" &lt;&lt; a &lt;&lt; endl;\n    int b = 0;\n    cout &lt;&lt; \"How old are you\" &lt;&lt; endl;\n    cin &gt;&gt; b;\n    cout &lt;&lt; \"You are \" &lt;&lt; b &lt;&lt; \" years old\" &lt;&lt; endl;\n    return 0;\n}\n/*\nDo you like what you see?\nYes\nYour answer is: Yes\nHow old are you\n18\nYou are 18 years old\n*/\n</code></pre> <p>\u6ce8\u610f: \u751a\u81f3\u53ef\u4ee5\u7ed9\u5e03\u5c14\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u8f93\u5165\u8d4b\u503c</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_19","title":"\u6570\u636e\u7684\u8f93\u51fa","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nint main() {\n    // Complete the code.\n    int a;\n    long b;\n    char c;\n    float f;\n    double d;\n    scanf(\"%d %ld %c %f %lf\", &amp;a, &amp;b, &amp;c, &amp;f, &amp;d);\n    printf(\"%d\\n%ld\\n%c\\n%.3f\\n%.9lf\\n\",a, b, c, f, d);\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#static-variables-const","title":"Static variables &amp; Const","text":"<pre><code>void start_game(Player *p1, Player *p2, int difficulty, GameWorld *world) {\n  bool called = false; // Note that we can use a shorter name,\n                       // because it is local to this function.\n  if (called)\n    report_an_error(\"You cannot start the game twice!\");\n  called = true;\n  // ...\n}// not gonna work\n</code></pre> <pre><code>void start_game(Player *p1, Player *p2, int difficulty, GameWorld *world) {\n  static bool called = false;\n  if (called)\n    report_an_error(\"You cannot start the game twice!\");\n  called = true;\n  // ...\n} // gonna work\n</code></pre> <p>\u60f3\u5c1d\u8bd5\u8bbe\u8ba1\u4e00\u79cd\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u7684\u51fd\u6570</p> <p>\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff1a</p> <ul> <li>Every time <code>start_game</code> is called, <code>called</code> is created and initialized to zero.</li> <li>Every time <code>start_game</code> returns, <code>called</code> is destroyed.</li> <li>We need a \"local\" variable whose lifetime is longer!</li> </ul> <p>\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\uff1a</p> <p>The lifetime of a local <code>static</code> variable is as long as that of a global variable. (They both have static storage duration.)</p> <ul> <li>A local <code>static</code> variable is initialized during program startup, and is destroyed on program termination.</li> </ul> <p>It behaves just like a global variable, but its name is inside a function, which does not pollute the global name space.</p> <p>\u603b\u800c\u8a00\u4e4b\uff0cstatic\u5145\u5f53\u4e86global\u7684\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u7684\u521d\u59cb\u5316\u53c8\u6ca1\u6709\u6c61\u67d3\u5168\u5c40\u53d8\u91cf\u7a7a\u95f4\u3002</p> <p>Const:</p> <p>A <code>const</code> variable cannot be modified after initialization.</p> <p>Therefore, an uninitialized <code>const</code> local non-<code>static</code> variable is almost a non-stop ticket to undefined behavior.</p> <pre><code>// in some function\nconst int n; // `n` has indeterminate values\nn = 42; // Error: cannot modify a const variable.\nscanf(\"%d\", &amp;n); // Error: cannot modify a const variable.\n</code></pre> <p>In C++, <code>const</code> variables of built-in types must be initialized.</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_20","title":"\u8bfb\u5165\u6574\u6570","text":"<p>\u4f7f\u7528\u58f0\u660e\u5728\u6807\u51c6\u5e93\u5934\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\uff1a<code>&lt;ctype.h&gt;</code></p> <pre><code>// isupper(c) \u5224\u65ad c \u662f\u4e0d\u662f\u5927\u5199\u5b57\u6bcd\n// islower(c) \u5224\u65ad c \u662f\u4e0d\u662f\u5c0f\u5199\u5b57\u6bcd\n// isdigit(c) \u5224\u65ad c \u662f\u4e0d\u662f\u6570\u5b57\u5b57\u7b26\n// isspace(c) \u5224\u65ad c \u662f\u4e0d\u662f\u7a7a\u767d\u5b57\u7b26\n</code></pre> <pre><code>int read(void) {\nint x = 0;\nchar c = getchar();\nwhile (isspace(c)) // \u8df3\u8fc7\u7a7a\u767d\nc = getchar();\nwhile (isdigit(c)) {\nx = x * 10 + c - '0';\nc = getchar();\n}\nreturn x;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_21","title":"\u4f5c\u7528\u57df","text":"<p>\u4e0d\u8bba\u5728\u7a0b\u5e8f\u7684\u4ec0\u4e48\u4f4d\u7f6e, \u4f7f\u7528\u7684\u6bcf\u4e00\u4e2a\u540d\u5b57\u90fd\u4f1a\u6307\u5411\u4e00\u4e2a\u7279\u5b9a\u7684\u5b9e\u4f53: \u53d8\u91cf, \u51fd\u6570, \u7c7b\u578b\u7b49. \u7136\u800c, \u540c\u4e00\u4e2a\u540d\u5b57\u5982\u679c\u51fa\u73b0\u5728\u7a0b\u5e8f\u7684\u4e0d\u540c\u4f4d\u7f6e, \u4e5f\u53ef\u80fd\u6307\u5411\u7684\u662f\u4e0d\u540c\u7684\u5b9e\u4f53</p> <p>\u4f5c\u7528\u57df\u662f\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206, \u5728\u5176\u4e2d\u540d\u5b57\u6709\u5176\u7279\u5b9a\u7684\u542b\u4e49, C++\u4e2d\u5927\u591a\u4f5c\u7528\u4e8e\u4ee5\u82b1\u62ec\u53f7\u5206\u9694</p> <p>\u540c\u4e00\u4e2a\u540d\u5b57\u5728\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u4e2d\u53ef\u80fd\u6307\u5411\u4e0d\u540c\u7684\u5b9e\u4f53, \u540d\u5b57\u7684\u6709\u6548\u533a\u57df\u59cb\u4e8e\u540d\u5b57\u7684\u58f0\u660e\u8bed\u53e5, \u4ee5\u58f0\u660e\u8bed\u53e5\u6240\u5728\u7684\u4f5c\u7528\u57df\u672b\u7aef\u4e3a\u7ed3\u675f; \u5982\u679c\u5b9a\u4e49\u5728main\u548c\u51fd\u6570\u4f53\u4e4b\u5916, \u5c31\u62e5\u6709\u5168\u5c40\u4f5c\u7528\u57df(global scope)</p> <pre><code>int i = 42;\nint main()\n{\n    int i = 0;\n    cout &lt;&lt; i &lt;&lt; endl; // 0\n    cout &lt;&lt; ::i &lt;&lt; endl; // 42\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_22","title":"\u8f6c\u4e49\u5b57\u7b26","text":"<p>\u4f5c\u7528: \u7528\u4e8e\u663e\u793a\u4e00\u4e9b\u4e0d\u80fd\u663e\u793a\u51fa\u6765\u7684ASCII</p> <p>\\n   \u6362\u884c, \u5c06\u5f53\u524d\u4f4d\u7f6e\u6362\u5230\u4e0b\u4e00\u884c\u5f00\u5934</p> <p>\\\\   \u4ee3\u8868\u4e00\u4e2a\u53cd\u659c\u7ebf\u5b57\u7b26</p> <p>\\t   \u6c34\u5e73\u5236\u8868, \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2atab\u7684\u4f4d\u7f6e</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"Hello world\";\n    cout &lt;&lt; \"kiss my ass\";\n    return 0;\n}\n// \u8f93\u51fa: Hello worldkiss my ass\n# include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"Hello world/n\";\n    cout &lt;&lt; \"kiss my ass\";\n    return 0;\n}\n//\u8f93\u51fa: Hello world\n//kiss my ass\n# include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"Hello world\\n\" &lt;&lt; endl;\n    cout &lt;&lt; \"kiss my ass\";\n    return 0;\n}\n/*\nHello world\n\nkiss my ass\n*/\n</code></pre> <p>\u53ef\u89c1, cout\u4ee3\u8868\u4f60\u5c06\u5f00\u59cb\u8f93\u51fa(\u800c\u4e14\u6bcf\u4e00\u884c\u90fd\u8981\u6709), \u4f46\u662f\u4f60\u8981\u8f93\u51fa\u7684\u8fd9\u4e00\u884c\u4e3a\u662f\u968f\u7740endl\u8fdb\u884c\u7684, \u5e76\u4e14\u6bcf\u4e00\u6b21\u7ec8\u6b62\u4e86\u8f93\u51fa\u884c\u52a8, \u81ea\u52a8\u6362\u884c; \u800c\\n\u8fdb\u884c\u6362\u884c, \u5982\u4f55\u5982\u7b2c\u4e09\u4e2a\u4f8b\u5b50\u4e2d\u7684\u4ee3\u7801, \u8fd8\u5b8c\u884c\u4e4b\u540eendl\u8fdb\u884c\u7ed3\u675f, \u90a3\u4e48\u518d\u6362\u5230\u4e0b\u4e00\u884c, \u63a5\u7740\u8fdb\u884c\u8f93\u51fa\u5185\u5bb9</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; \"aaaa\\tHello World\" &lt;&lt; endl;\n    cout &lt;&lt; \"aa\\tHello World\" &lt;&lt; endl;\n    cout &lt;&lt; \"aaaaaa\\tHello World\\\\\" &lt;&lt; endl;\n    return 0;\n}\n/*\naaaa    Hello World\naa      Hello World\naaaaaa  Hello World\\\n*/\n</code></pre> <p>\u53ef\u89c1, \u4e00\u4e2atab\u662f8\u4e2aspace, \u8fd9\u6837\u7684\u8bdd\u53ef\u4ee5\u81ea\u52a8\u8fdb\u884c\u5bf9\u9f50</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_23","title":"\u8fd0\u7b97\u7b26","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_24","title":"\u7b97\u6570\u8fd0\u7b97\u7b26","text":"<p>\u6ce8\u610f, \u4e24\u4e2a\u6574\u6570\u76f8\u9664, \u4f9d\u7136\u662f\u6574\u6570, \u53ea\u4e0d\u8fc7\u662f\u5c06\u5c0f\u6570\u70b9\u53bb\u9664\u6389</p> <p>\u5f53\u7136, \u4e24\u4e2a\u5c0f\u6570\u4e5f\u662f\u53ef\u4ee5\u76f8\u9664\u7684; \u4e24\u4e2a\u5c0f\u6570\u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u53d6\u6a21\u8fd0\u7b97\u7684</p> <p>++a  &amp;  a++  \u5747\u7b49\u6548\u4e8e a+1</p> <p>\u90a3\u4e48\u524d\u7f6e\u548c\u540e\u7f6e\u7684\u533a\u522b\u662f\u4ec0\u4e48\u5462?</p> <p>\u524d\u7f6e, \u5148\u8ba9\u53d8\u91cf+1, \u7136\u540e\u8fdb\u884c\u8868\u8fbe\u5f0f\u8fd0\u7b97; \u540e\u7f6e\u5c31\u662f\u5148\u8fdb\u884c\u8fd0\u7b97, \u7136\u540e\u53d8\u91cf+1</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_25","title":"\u903b\u8f91\u8fd0\u7b97\u7b26","text":"<p>\u8981\u8bb0\u5fc6\u8fd0\u7b97\u7b26\u6240\u5bf9\u5e94\u7684\u672f\u8bed!</p> <p>\u7279\u6b8a\uff1a\u9017\u53f7\u8fd0\u7b97\u7b26\uff0c\u662f\u8fd0\u7b97\u4f18\u5148\u7ea7\u6700\u4f4e\u4e4b\u4e00\u7684\u4e00\u79cd\u8fd0\u7b97\u7b26,  \u6700\u540e\u4e00\u4e2a\u9017\u53f7\u540e\u9762\u7684\u503c\u4f5c\u4e3a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff1a</p> <pre><code>int a=3, b=5, c;\nc = a&gt;b, a+b; // c = 0, \u56e0\u4e3a\u4f18\u5148\u8fd0\u7b97a&gt;b\u662ffalse(0)\nc = (a&gt;b, a+b) // c = 8\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_26","title":"\u7a0b\u5e8f\u6d41\u7a0b\u7ed3\u6784","text":"<p>\u652f\u6301\u4e09\u79cd\u8fd0\u884c\u7ed3\u6784:</p> <p>\u987a\u5e8f\u7ed3\u6784  \u9009\u62e9\u7ed3\u6784  \u5faa\u73af\u7ed3\u6784</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_27","title":"\u4f18\u5148\u7ea7\uff0c\u7ed3\u5408\u6027\u548c\u6c42\u503c\u987a\u5e8f","text":"<p>\u4ee5\u4e0b\u7684\u5185\u5bb9\u5341\u5206\u91cd\u8981\uff01\uff01\uff01</p> <pre><code>\u4f18\u5148\u7ea7\uff1a f() + g() * h() \u88ab\u89e3\u6790\u4e3a f() + (g() * h()) \u800c\u975e (f() + g()) * h()\n\u7ed3\u5408\u6027\uff1a f() - g() + h() \u88ab\u89e3\u6790\u4e3a (f() - g()) + h() \u800c\u975e f() - (g() + h())\n\u4f46\u662f f() , g() , h() \u4e09\u8005\u7684\u8c03\u7528\u987a\u5e8f\u662f unspecified \u7684\uff01\n\u7c7b\u4f3c\u7684\u8fd8\u6709\uff1a func(f(), g(), h()) \u8fd9\u91cc\u7684 f() , g() , h() \u4e09\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f\u662f\nunspecified \u7684\u3002\n\u5982\u679c\u4e24\u4e2a\u8868\u8fbe\u5f0f A \u548c B \u7684\u6c42\u503c\u987a\u5e8f\u662f unspecified \u7684\uff0c\u800c\u5b83\u4eec\n\u90fd\u4fee\u6539\u4e86\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u6216\u8005\u4e00\u4e2a\u4fee\u6539\u4e86\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u8bfb\u53d6\u4e86\u90a3\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\n\u90a3\u4e48\u8fd9\u5c31\u662f undefined behavior\u3002\n\u4f8b\uff1a i = i++ + 2 \u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f\n\u4e00\u65e6\u4f60\u5f00\u59cb\u5206\u6790\u5b83\u662f +1 \u8fd8\u662f +2 \uff0c\u4f60\u5c31\u6389\u8fdb\u4e86 undefined behavior \u7684\u9677\u9631\u91cc\u3002\n++ \u5bf9 i \u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u8d4b\u503c\u4e5f\u5bf9 i \u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4e24\u4e2a\u4fee\u6539\u7684\u987a\u5e8f unspecified\uff0c\u6240\n\u4ee5\u5c31\u662f undefined behavior\u3002\n\n\u6c42\u503c\u987a\u5e8f\u786e\u5b9a\u7684\u8fd0\u7b97\u7b26\uff1a\n\u5e38\u89c1\u7684\u8fd0\u7b97\u7b26\u4e2d\uff0c\u5176\u8fd0\u7b97\u5bf9\u8c61\u7684\u6c42\u503c\u987a\u5e8f\u786e\u5b9a\u7684\u53ea\u6709\u56db\u4e2a\uff1a &amp;&amp; , || , ?: , ,\n&amp;&amp; \u548c || \uff1a\u77ed\u8def\u6c42\u503c\uff0c\u5148\u6c42\u5de6\u8fb9\uff0c\u975e\u5fc5\u8981\u4e0d\u6c42\u53f3\u8fb9\u3002\ncond ? t : f \uff1a\u5148\u6c42 cond \uff0c\u6839\u636e\u5b83\u7684\u771f\u5047\u6027\u9009\u62e9\u6c42 t \u8fd8\u662f\u6c42 f \u3002\n, \uff1a\u4e00\u79cd\u5b58\u5728\u611f\u6781\u4f4e\u7684\u8fd0\u7b97\u7b26\u3002\n\n\u4f4d\u8fd0\u7b97\u7b26\n~a \uff1a\u8fd4\u56de a \u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u90fd\u53d6\u53cd\u540e\u7684\u7ed3\u679c\u3002\na &amp; b \u7684\u7b2ci\u4f4d\u662f 1 \u5f53\u4e14\u4ec5\u5f53 a \u548c b \u7684\u7b2ci\u4f4d\u90fd\u662f 1 \u3002\na | b \u7684\u7b2ci\u4f4d\u662f 1 \u5f53\u4e14\u4ec5\u5f53 a \u548c b \u7684\u7b2ci\u4f4d\u81f3\u5c11\u6709\u4e00\u4e2a\u662f 1 \u3002\na ^ b \u7684\u7b2ci\u4f4d\u662f 1 \u5f53\u4e14\u4ec5\u5f53 a \u548c b \u7684\u7b2ci\u4f4d\u4e0d\u540c\u3002\n\u5047\u8bbe a \u662f\u65e0\u7b26\u53f7\u6574\u6570\u3002\na &lt;&lt; i \u8fd4\u56de\u5c06 a \u7684\u4e8c\u8fdb\u5236\u4f4d\u96c6\u4f53\u5de6\u79fb i \u4f4d\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c a &lt;&lt; 1 \u5c31\u662f a * 2 \uff0c a &lt;&lt; i \u5c31\u662f a \u4e58\u4ee5 2\u7684i\u6b21\u65b9 \u3002\n\u5de6\u8fb9\u8d85\u51fa\u7684\u90e8\u5206\u4e22\u5f03\u3002\na &gt;&gt; i \u8fd4\u56de\u5c06 a \u7684\u4e8c\u8fdb\u5236\u4f4d\u96c6\u4f53\u53f3\u79fb i \u4f4d\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c a &gt;&gt; 1 \u5c31\u662f a / 2 \u3002\u53f3\u8fb9\u8d85\u51fa\u7684\u90e8\u5206\u88ab\u4e22\u5f03\u3002\n\n\u5982\u4f55\u83b7\u5f97\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570 x \u7684\u7b2c i \u4f4d\uff1f\n\u6211\u4eec\u7ea6\u5b9a\u7b2c 0 \u4f4d\u662f\u6700\u53f3\u8fb9\u7684\u4f4d\n(least significant bit)\u3002\nunsigned test_bit(unsigned x, unsigned i) {\nreturn (x &gt;&gt; i) &amp; 1u; // u\u4ee3\u8868unsigned (int)\n}\n\u6216\u8005\uff1a\nunsigned test_bit(unsigned x, unsigned i) {\nreturn (x &amp; (1u &lt;&lt; i)) &gt;&gt; i;\n}\n\n\u5982\u4f55\u7ffb\u8f6c\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570 x \u7684\u7b2c i \u4f4d\uff1f\nunsigned bit_flip(unsigned x, unsigned i) {\nreturn x ^ (1u &lt;&lt; i);\n}\n\n\u5982\u4f55\u622a\u53d6\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570 x \u7684\u7b2ci\u4f4d\uff1f\nunsigned bit_slice(unsigned x, unsigned low, unsigned high) {\nreturn (x &gt;&gt; low) &amp; ((1u &lt;&lt; (high - low)) - 1);\n}\n\u6216\u8005\nunsigned bit_slice(unsigned x, unsigned low, unsigned high) {\nreturn (x &amp; ((1u &lt;&lt; high) - 1)) &gt;&gt; low;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#if","title":"if\u8bed\u53e5","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_28","title":"\u5355\u884c","text":"<pre><code>int main()\n{\n    if ( ... )\n    {\n        ...;\n    }\n}\n</code></pre> <p>\u6ce8\u610f, \u8fd9\u4e2aif\u540e\u9762\u53cd\u800c\u6ca1\u6709\u5206\u53f7</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_29","title":"\u591a\u884c","text":"<pre><code>int main()\n{\n    if (...)\n    {\n        ...;\n    }\n    else\n    {\n        ...;\n    }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_30","title":"\u591a\u6761\u4ef6","text":"<pre><code>int main()\n{\n    if (...)\n    {\n        ...;\n    }\n    else if ()\n    {\n        ...;\n    }\n    else\n    {\n        ...;\n    }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#if_1","title":"\u5d4c\u5957If","text":"<p>\u5728\u4e00\u4e2aif\u6216\u8005else if \u6216\u8005else\u91cc\u9762\u7684\u8bed\u53e5\u4e2d\u518d\u52a0\u5165if\u6a21\u5757</p> <p>\u6ce8\u610f\u9996\u884c\u7f29\u8fdb!</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_31","title":"\u4e09\u76ee\u8fd0\u7b97\u7b26","text":"<p>\u8868\u8fbe\u5f0f1 ? \u8868\u8fbe\u5f0f2 : \u8868\u8fbe\u5f0f3</p> <p>\u5982\u679c1\u662f\u771f, \u90a3\u4e48\u6267\u884c2, \u5e76\u4e14\u8fd4\u56de2\u7684\u7ed3\u679c</p> <p>\u5982\u679c1\u662f\u5047, \u90a3\u4e48\u6267\u884c3, \u5e76\u4e14\u8fd4\u56de3\u7684\u7ed3\u679c</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nint main()\n{\n    int a = 10;\n    int b = 20;\n    int c = 0;\n    c = ( a &gt; b ? a:b);  // \u5c06a\u548cb\u8fdb\u884c\u6bd4\u8f83, \u5c06\u53d8\u91cf\u5927\u7684\u503c\u8d4b\u503c\u7ed9\u53d8\u91cfc\n    (a &lt; b ? a:b) = 114514; //\u4e09\u76ee\u8fd0\u7b97\u7b26\u8fd4\u56de\u7684\u662f\u53d8\u91cf, \u53ef\u4ee5\u7ee7\u7eed\u8d4b\u503c\n    cout &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; c &lt;&lt; endl;\n    return 0; \n}\n/*\n114514\n20\n*/\n</code></pre> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nint main()\n{\n    int a = 10;\n    int b = 20;\n    string c = \"That's good\";\n    ( a &gt; b ? cout&lt;&lt;\"damn!\"&lt;&lt;endl:cout&lt;&lt;c&lt;&lt;endl);// \u4e09\u76ee\u8fd0\u7b97\u7b26\u8fd8\u53ef\u4ee5\u6267\u884c\u8868\u8fbe\u5f0f\n    return 0; \n}\n// \u8fd4\u56de\u503c: That's good!\n</code></pre> <p>\u4e09\u76ee\u8fd0\u7b97\u7b26\u80fd\u591f\u5f88\u597d\u7b80\u5316\u8bed\u6cd5\uff1a</p> <pre><code>int abs_int(int x) {\n  if (x &lt; 0)\n    return -x;\n  else if (x == 0)\n    return 0;\n  else if (x &gt; 0)\n    return x;\n}\n</code></pre> <pre><code>int abs_int(int x) {\n  return x &lt; 0 ? -x : x;\n}333333333333333333333333333333333333333333333333333333333333333333333\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#switch","title":"switch","text":"<p>\u8bed\u6cd5: (\u6ce8\u610f: case\u540e\u9762\u6709\u5192\u53f7!!!)</p> <pre><code>switch(\u8868\u8fbe\u5f0f)\n{\n    case \u7ed3\u679c1: \n        \u6267\u884c\u8bed\u53e5;\n        break;\n    case \u7ed3\u679c2:\n        \u6267\u884c\u8bed\u53e5;\n        break;\n    ...\n    default:\n        \u6267\u884c\u8bed\u53e5;   \n        break;\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nint main()\n{\n    int a = 0;\n    cin &gt;&gt; a;\n    switch(a)\n    {\n        case 0: \n            cout &lt;&lt; \"good\" &lt;&lt; endl; \n            break;\n        default:\n            cout &lt;&lt; \"bad\" &lt;&lt; endl; \n            break;\n    }\n    return 0; \n}\n</code></pre> <p>swtich\u4e5f\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u95ee\u9898\uff1a</p> <pre><code>switch (expr) {\ncase 1: { // \u7528 {} \u5c06 `x` \u9650\u5b9a\u5728\u5185\u5c42\u4f5c\u7528\u57df\u4e2d\u3002\nint x = 42;\ndo_something(x, expr);\n}\ncase 2:\nprintf(\"%d\\n\", x); // Error: `x` was not declared in this scope.\n}\n/*\n\u5982\u679c expr == 2 \uff0c\u63a7\u5236\u6d41\u6839\u672c\u5c31\u6ca1\u6709\u7ecf\u8fc7 int x = 42; \u8fd9\u6761\u8bed\u53e5\uff0c\u4f46\u662f\u6839\u636e\u540d\u5b57\u67e5\u627e\u7684\n\u89c4\u5219\u5374\u80fd\u627e\u5230 x \u3002\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u5728\u67d0\u4e2a case \u5185\u90e8\u58f0\u660e\u4e86\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5fc5\u987b\u5b58\u5728\u4e8e\u4e00\u4e2a\u5185\u5c42\n\u4f5c\u7528\u57df\u4e2d\u3002\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u8981\u52a0 {} */\n</code></pre> <p>switch\u7684\u7f3a\u70b9: \u5224\u65ad\u7684\u65f6\u5019\u53ea\u80fd\u662f\u6574\u578b\u6216\u8005\u5b57\u7b26\u578b, \u4e0d\u53ef\u4ee5\u662f\u4e00\u4e2a\u533a\u95f4</p> <p>switch\u7684\u4f18\u70b9: \u7ed3\u6784\u6e05\u6670, \u6267\u884c\u6548\u7387\u9ad8</p> <p>\u6ce8\u610f, case\u91cc\u9762\u7684break\u4e00\u5b9a\u662f\u8981\u52a0\u4e0a\u53bb\u7684! \u4e0d\u7136\u7684\u8bdd\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u6267\u884c\u4e0b\u53bb!</p> <ul> <li>Starting from the selected label, all subsequent statements are executed until a <code>break;</code> or the end of the <code>switch</code> statement is reached.</li> <li>Note that <code>break;</code> here has a special meaning.</li> <li>If no <code>case</code> label is selected and <code>default:</code> is present, the control goes to the <code>default:</code> label.</li> <li><code>default:</code> is optional, and often appears in the end, though not necessarily.</li> <li><code>break;</code> is often needed. Modern compilers often warn against a missing <code>break;</code></li> <li>The expression in a <code>case</code> label must be an integer constant expression, whose value is known at compile-time</li> </ul> <pre><code>int n; scanf(\"%d\", &amp;n);\nint x = 42;\nswitch (value) {\n  case 3.14: // Error: It must have an integer type.\n    printf(\"It is pi.\\n\");\n  case n:    // Error: It must be a constant expression (known at compile-time)\n    printf(\"It is equal to n.\\n\");\n  case 42:   // OK.\n    printf(\"It is equal to 42.\\n\");\n  case x:    // Error: `x` is a variable, not treated as \"constant expression\".\n    printf(\"It is equal to x.\\n\");\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_32","title":"\u6848\u4f8b","text":"<p>\u7edf\u8ba1\u8f93\u5165\u4e2d\u6bcf\u4e2a\u503c\u8fde\u7eed\u51fa\u73b0\u4e86\u591a\u5c11\u6b21</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int currval = 0, val = 0;\n    if (cin &gt;&gt; currval)\n    {\n        int cnt = 1; // \u4fdd\u5b58\u6211\u4eec\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u503c\u7684\u4e2a\u6570\n        while(cin &gt;&gt; val)\n        {\n            if (val == currval)\n            {\n                cnt ++;\n            }\n            else\n            {\n                cout &lt;&lt; currval &lt;&lt; \" occurs\" &lt;&lt; cnt &lt;&lt; \" times\" &lt;&lt; endl;\n                currval = val;\n                cnt = 1;\n            }\n        }\n        // \u8bb0\u5f97\u6253\u5370\u6587\u4ef6\u4e2d\u6700\u540e\u4e00\u4e2a\u503c\u7684\u4e2a\u6570\n        cout &lt;&lt; currval &lt;&lt; \" occurs \" &lt;&lt; cnt &lt;&lt; \" times\" &lt;&lt; endl; \n    }\n    return 0;\n}\n</code></pre> <p>\u4e24\u4e2a\u4eae\u70b9:</p> <ol> <li>\u8f93\u5165\u6d41\u7684\u7075\u6d3b\u4f7f\u7528: \u8f93\u5165\u4e00\u6b21cin, \u7136\u540e\u5224\u65ad\u53ea\u4f1a\u7528\u4e00\u4e2a\u6570\u636e, \u7136\u540ewhile\u4f1a\u7075\u6d3b\u8bfb\u53d6\u540e\u9762\u7684\u6570\u636e</li> <li>\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u53ea\u51fa\u73b0\u4e00\u6b21, \u8fd9\u79cd\u60c5\u51b5\u5982\u4f55\u7075\u6d3b\u5904\u7406</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#while","title":"while\u5faa\u73af","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#while_1","title":"\u57fa\u672cwhile","text":"<pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int num = 1;\n    while (num &lt; 10)\n    {\n        cout &lt;&lt; num &lt;&lt; endl;\n        num++;\n    }\n    // print numbers 1 - 9\n    return 0;\n}\n</code></pre> <p>\u5c0f\u4f8b\u5b50: \u5047\u5982\u8bf4\u6211\u60f3\u8bfb\u53d6\u6570\u91cf\u4e0d\u5b9a\u7684\u8f93\u5165\u6570\u636e\u5462?</p> <p><code>while(cin &gt;&gt; )</code>\u8fd9\u4e2a\u7528\u6cd5\u53ef\u4ee5\u5e2e\u5fd9\u8bfb\u53d6\u6570\u91cf\u4e0d\u5b9a\u7684\u6570\u636e</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int sum = 0, value = 0;\n    while (cin &gt;&gt; value)\n    {\n        sum += value;\n    }\n    cout &lt;&lt; \"The sum is: \" &lt;&lt; sum &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u5047\u5982\u8bf4\u8f93\u5165\u4e86  1  2  3  4, \u90a3\u4e48\u8fd9\u4f1a\u662f\u6b63\u786e\u7684, \u56e0\u4e3a\u6211\u8f93\u5165\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\"\u6d41\", \u6d41\u91cc\u9762\u7684\u7a7a\u683c\u4e0d\u662f\u9519\u8bef\u7684</p> <p>\u5982\u679c\u8bf4\u8f93\u51651 2a3 4, \u90a3\u4e48\u7acb\u523b\u8f93\u51fa3, \u56e0\u4e3a\u9047\u5230\u4e86\u65e0\u6548\u5b57\u7b26</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_33","title":"\u6848\u4f8b: \u731c\u6570\u5b57","text":"<p>\u6848\u4f8b\u7efc\u5408\u7ec3\u4e60:</p> <p>\u7cfb\u7edf\u968f\u673a\u751f\u6210\u4e00\u4e2a1-100\u7684\u6570\u5b57, \u73a9\u5bb6\u8fdb\u884c\u731c\u6d4b, \u5982\u679c\u731c\u9519\u7684\u8bdd, \u63d0\u9192\u73a9\u5bb6\u6570\u5b57\u8fc7\u5927\u6216\u8005\u662f\u8fc7\u5c0f, \u5982\u679c\u731c\u5bf9\u7684\u8bdd\u73a9\u5bb6\u80dc\u5229, \u5e76\u4e14\u9000\u51fa\u6e38\u620f</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int num = rand()%100+1;  //rand()%100\u751f\u6210\u7684\u8303\u56f4\u662f0-99, \u5f88\u50cfpython\n    int guess = 0;\n    int times = 0;\n    while (guess != num)\n    {\n        times++;\n        cout &lt;&lt; \"Please input a number\" &lt;&lt; endl;\n        cin &gt;&gt; guess;\n        if (guess &gt; num)\n        {\n            cout &lt;&lt; \"Your number is too big! Try again!\" &lt;&lt; endl;\n        }\n        else if (guess &lt; num)\n        {\n            cout &lt;&lt; \"Your number is too small! Try again!\" &lt;&lt; endl;\n        }\n        else\n        {\n            cout &lt;&lt; \"Your number is correct! Congrats!\" &lt;&lt; endl;\n        }\n    }\n    cout &lt;&lt; \"The game is over, you used \" &lt;&lt; times &lt;&lt;\" rounds to finish the game\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#do-while","title":"do while","text":"<p>do{\u5faa\u73af\u8bed\u53e5}while(\u5224\u65ad\u6761\u4ef6);</p> <p>\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f, \u6700\u540ewhile\u62ec\u53f7\u540e\u9762\u662f\u6709\u5206\u53f7\u7684! </p> <p>\u5176\u6b21, \u8fd9\u4e2a\u8bed\u6cd5\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e: \u5148\u6267\u884c\u4e00\u6b21\u5faa\u73af\u8bed\u53e5, \u518d\u8fdb\u884c\u5224\u65ad; \u5224\u65adTRUE\u5219\u5faa\u73af\u6267\u884c</p> <p>do while \u4e5f\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\uff01</p> <pre><code>do - while \u7684\u5faa\u73af\u4f53\u662f\u4e00\u4e2a\u5185\u5c42\u7684\u4f5c\u7528\u57df\uff0c\u5b83\u4ee5 { \u5f00\u59cb\u3001 } \u7ed3\u675f\uff0c\u4e0d\u5305\u542b while\n(cond) \u7684\u90e8\u5206\u3002\n\u5728 do - while \u5faa\u73af\u4f53\u5185\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u65e0\u6cd5\u5728 cond \u90e8\u5206\u4f7f\u7528\u3002\ndo {\nint x;\nscanf(\"%d\", &amp;x);\ndo_something(x);\n} while (x != 0); // Error: `x` undeclared.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_34","title":"\u6848\u4f8b: \u6c34\u4ed9\u82b1\u6570","text":"<p>\u6c34\u4ed9\u82b1\u6570\u662f\u6307\u4e00\u4e2a\u4e09\u4f4d\u6570, \u5b83\u7684\u6bcf\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\u7684\u4e09\u6b21\u5e42\u4e4b\u548c\u7b49\u4e8e\u672c\u8eab</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int num = 99;\n    int num1 = 0;\n    int num2 = 0;\n    int num3 = 0;\n    do\n    {\n        num++;\n        num1 = num / 100;\n        num2 = num / 10 % 10;\n        num3 = num % 10;\n        if (num1*num1*num1 + num2*num2*num2 + num3*num3*num3 == num)\n        {\n            cout &lt;&lt; num &lt;&lt; \" is a number wanted\" &lt;&lt; endl;\n        }\n    }\n    while (num &lt; 999);\n    return 0;\n} // \u627e\u5230 153 370 371 407\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#for","title":"for\u5faa\u73af\u8bed\u53e5","text":"<p>for(\u542f\u793a\u8868\u8fbe\u5f0f; \u6761\u4ef6\u8868\u8fbe\u5f0f; \u672b\u5c3e\u5faa\u73af\u4f53){\u5faa\u73af\u8bed\u53e5}</p> <p>\u672b\u5c3e\u5faa\u73af\u4f53: \u5faa\u73af\u8bed\u53e5\u7ed3\u675f\u4e00\u6b21\u4e4b\u540e\u8fd0\u884c\u7684\u8868\u8fbe\u5f0f</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    for (int i = 0; i &lt; 10; i++)\n    {\n        cout &lt;&lt; i &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u5f53\u7136, \u4e0a\u9762\u8fd9\u4e2a\u4ee3\u7801\u5b8c\u5168\u7b49\u6548\u4e8e:</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int i = 0;\n    for (;;)\n    {\n        if (i &gt;= 10)\n        {\n            break; // like python, \u7528\u4e8e\u9000\u51fafor\u5faa\u73af\n        }\n        cout &lt;&lt; i &lt;&lt; endl;\n        i++;\n    }\n    return 0;\n}\n</code></pre> <p>\u5f53\u7136, \u8981\u907f\u514d\u6b7b\u5faa\u73af, \u4f8b\u5982:</p> <p><code>for(undesigned u = 10; u &gt;= 0; u--)</code>,\u8fd9\u4e2a\u5faa\u73af\u6c38\u8fdc\u6210\u7acb, \u56e0\u4e3aundesigned\u4e0d\u53ef\u80fd\u662f\u975e\u6b63\u6570</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_35","title":"\u6848\u4f8b: \u6572\u684c\u5b50","text":"<pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    for (int i = 0; i &lt; 100 ; i++)\n    {\n        if (i%7 == 0 || i%10 == 7 || i/10 == 7)\n        {\n            cout &lt;&lt; \"Knock the table\" &lt;&lt; endl;\n        }\n        else\n        {\n            cout &lt;&lt; i &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_36","title":"\u5d4c\u5957\u5faa\u73af  \u6848\u4f8b: \u4e58\u6cd5\u53e3\u8bc0\u8868\u7684\u6253\u5370","text":"<pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    for (int i = 1; i &lt; 10 ; i++)\n    {\n        for (int j = 1; j &lt;= i; j++)\n        {\n            cout &lt;&lt; i &lt;&lt; \" * \" &lt;&lt; j &lt;&lt; \" = \" &lt;&lt; i*j &lt;&lt;  endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_37","title":"\u8df3\u8f6c\u8bed\u53e5","text":"<p>break\u4f7f\u7528\u7684\u65f6\u673a: </p> <ol> <li>\u51fa\u73b0\u5728switch\u6761\u4ef6\u8bed\u53e5\u4e2d, \u4f5c\u7528\u662f\u7ec8\u6b62case\u5e76\u4e14\u8df3\u51faswitch</li> <li>\u51fa\u73b0\u5728\u5faa\u73af\u8bed\u53e5\u4e2d, \u4f5c\u7528\u662f\u8df3\u51fa\u5f53\u524d\u7684\u5faa\u73af\u8bed\u53e5</li> <li>\u51fa\u73b0\u5728\u5d4c\u5957\u5faa\u73af\u4e2d, \u8df3\u51fa\u6700\u8fd1\u7684\u5185\u5c42\u5faa\u73af\u8bed\u53e5</li> </ol> <p>continue:</p> <p>\u8df3\u8fc7\u672c\u6b21\u5faa\u73af\u4e2d\u4f59\u4e0b\u7684\u672a\u6267\u884c\u7684\u8bed\u53e5, \u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6b21\u5faa\u73af</p> <p>goto\u8bed\u53e5:</p> <p>\u8bed\u6cd5: goto\u6807\u8bb0(\u6ce8\u610f\u5192\u53f7\u7684\u4f7f\u7528)</p> <p>\u5982\u679c\u6807\u8bb0\u7684\u540d\u79f0\u5b58\u5728, \u6267\u884c\u5230goto\u8bed\u53e5\u65f6, \u4f1a\u8df3\u8f6c\u5230\u6807\u8bb0\u7684\u4f4d\u7f6e</p> <pre><code>goto flag:\n...\nflag:\n...\n</code></pre> <p>\u4f46\u662f\u7a0b\u5e8f\u4e2d\u4e0d\u5efa\u8bae\u4f7f\u7528goto, \u907f\u514d\u9020\u6210\u6df7\u4e71.</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_38","title":"\u6570\u7ec4","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_39","title":"\u6982\u8ff0","text":"<p>\u6240\u8c13\u6570\u7ec4, \u5c31\u662f\u4e00\u4e2a\u96c6\u5408, \u6dcb\u9762\u653e\u4e86\u76f8\u540c\u7c7b\u578b\u7684\u6570\u636e\u5143\u7d20</p> <p>\u7279\u70b91: \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u76f8\u540c\u7684\u6570\u636e\u7c7b\u578b</p> <p>\u7279\u70b92: \u6570\u7ec4\u662f\u7531\u8fde\u7eed\u7684\u5185\u5b58\u4f4d\u7f6e\u7ec4\u6210\u7684</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_40","title":"\u4e00\u7ef4\u6570\u7ec4","text":"<p>\u4e00\u7ef4\u6570\u7ec4\u5b9a\u4e49\u7684\u4e09\u79cd\u65b9\u5f0f:</p> <p>\u6570\u636e\u7c7b\u578b \u6570\u7ec4\u540d[\u6570\u7ec4\u957f\u5ea6];</p> <p>\u6570\u636e\u7c7b\u578b \u6570\u7ec4\u540d[\u6570\u7ec4\u957f\u5ea6] = { \u503c1, \u503c2...... };</p> <p>\u6570\u636e\u7c7b\u578b \u6570\u7ec4\u540d[ ] = { \u503c1, \u503c2 };(\u53ef\u4ee5\u4e0d\u7528\u8bf4\u957f\u5ea6)</p> <pre><code>int main()\n{\n    int arr[5];\n    arr[0] = 10;//\u7ed9\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u8d4b\u503c\n    cout &lt;&lt; arr[0] &lt;&lt; endl;//\u8bbf\u95ee\u6570\u636e\u7c7b\u578b\n    //\u6ce8\u610f: \u5982\u679c\u8bbf\u95ee\u6ca1\u6709\u8d4b\u503c\u7684\u6570\u636e, \u4f1a\u81ea\u52a8\u8f93\u51fa0\n}\n</code></pre> <p>\u4e00\u7ef4\u6570\u7ec4\u6570\u7ec4\u540d\u7684\u7528\u9014:</p> <p>\u53ef\u4ee5\u7edf\u8ba1\u6574\u4e2a\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u7684\u957f\u5ea6; \u53ef\u4ee5\u83b7\u53d6\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u7684\u9996\u5730\u5740</p> <p>\u90a3\u4e48\u5982\u4f55\u83b7\u5f97\u8fd9\u4e24\u4e2a\u6570\u636e\u5462?</p> <p>\u7b2c\u4e00\u4e2a\u662fsizeof(arr); \u7b2c\u4e8c\u4e2a\u662fcout &lt;&lt; (int)arr &lt;&lt; endl;</p> <p>\u53e6\u5916, sizeof(ar/r)/sizeof(arr[0])\u5c31\u53ef\u4ee5\u83b7\u5f97\u6570\u7ec4\u6570\u636e\u7684\u4e2a\u6570</p> <p>\u53e6\u5916, \u60f3\u770b\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740: cout &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;</p> <p>\u53e6\u5916: \u6570\u7ec4\u540d\u662f\u5e38\u91cf, \u4e0d\u53ef\u4ee5\u8fdb\u884c\u590d\u5236\u64cd\u4f5c </p> <p>\u6ce8\u610f\uff1a\u521b\u5efa\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6570\u7ec4\u6210\u5458\u6570\u91cf\u4e0d\u80fd\u901a\u8fc7\u4f20\u5165\u53d8\u91cf\u6765\u786e\u5b9a\uff01</p> <pre><code>int n = 5;\nint arr[n] = {1,2,3,4,5};\n// \u4e0d\u53ef\u4ee5\uff0c\u4e0d\u80fd\u7528\u53d8\u91cf\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_41","title":"\u4e00\u4f4d\u6570\u7ec4\u6848\u4f8b","text":"<pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int arr[5] = {300, 350, 200, 400, 250};\n    int max = 0;\n    for(int i = 0; i &lt; 5; i++)\n    {\n        if (arr[i] &gt; max)\n        {\n            max = arr[i];\n        }\n        else // \u8fd9\u4e00\u90e8\u5206\u5176\u5b9e\u53ef\u4ee5\u4e0d\u8981\n        {\n            continue;\n        }\n    }\n    cout &lt;&lt; max &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int arr[5] = {1,3,2,5,4};\n    int start = 0;\n    int end = 0;\n    int temp = 0;\n    for(; start &lt; sizeof(arr)/2+1; start++)\n    {\n        end = sizeof(arr)/sizeof(arr[0])-1;\n        temp = arr[end];\n        arr[end] = arr[start];\n        arr[start] = temp;       \n    }\n    for(int i = 0; i&lt;sizeof(arr); i++)\n    {\n        cout &lt;&lt; arr[i] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e2a\u4ee3\u7801\u6709\u70b9\u5c0f\u95ee\u9898, \u800c\u4e14\u975e\u5e38\u4e0d\u65b9\u4fbf</p> <p>start &amp; end\u4e24\u4e2a\u6307\u9488\u505c\u6b62\u4e0b\u6765\u7684\u5224\u65ad\u80fd\u4e0d\u80fd\u7b80\u5355\u4e00\u4e9b?</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int arr[5] = {1,3,2,5,4};\n    int start = 0;\n    int end = sizeof(arr)/sizeof(arr[0]) - 1;\n    while (start &lt; end)\n    {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n    for(int i=0; i&lt;sizeof(arr)/sizeof(arr[0]); i++)\n    {\n        cout &lt;&lt; arr[i] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_42","title":"\u4e00\u7ef4\u6570\u7ec4\u7684\u5192\u6ce1\u6392\u5e8f","text":"<p>\u4f5c\u7528: \u6700\u5e38\u89c1\u7684\u6392\u5e8f\u7b97\u6cd5, \u5bf9\u6570\u7ec4\u5185\u5143\u7d20\u8fdb\u884c\u6392\u5e8f</p> <ol> <li> <p>\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20, \u5982\u679c\u7b2c\u4e00\u4e2a\u6bd4\u7b2c\u4e8c\u4e2a\u5927, \u90a3\u4e48\u5c31\u8fdb\u884c\u4ea4\u6362</p> </li> <li> <p>\u5bf9\u6bcf\u4e00\u5bf9\u76f8\u90bb\u7684\u5143\u7d20\u505a\u540c\u6837\u7684\u5de5\u4f5c, \u6267\u884c\u5b8c\u6bd5\u4e4b\u540e, \u627e\u5230\u7b2c\u4e00\u4e2a\u6700\u5927\u503c</p> </li> <li>\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c, \u6bcf\u6b21\u6bd4\u8f83\u6b21\u6570\u51cf\u4e00, \u76f4\u5230\u4e0d\u9700\u8981\u6bd4\u8f83</li> </ol> <p>\u5b9e\u4f8b: \u5c06\u6570\u7ec4{4,2,8,0,5,7,1,3,9}\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int arr[9] = {4,2,8,0,5,7,1,3,9};\n    for (int i=8; i&gt;0; i--)\n    {\n        for(int j=0; j&lt;i; j++)\n        {\n            if (arr[j] &gt; arr[j+1])\n            {\n                int temp = arr[j+1];\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (int k = 0; k&lt;9; k++)\n    {\n        cout &lt;&lt; arr[k] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_43","title":"\u4e8c\u7ef4\u6570\u7ec4","text":"<p>\u4e8c\u7ef4\u6570\u7ec4\u7684\u5b9a\u4e49\u65b9\u5f0f</p> <pre><code>/*\n1. \u6570\u636e\u7c7b\u578b \u6570\u7ec4\u540d[\u884c\u6570][\u5217\u6570];\n2. \u6570\u636e\u7c7b\u578b \u6570\u7ec4\u540d[\u884c\u6570][\u5217\u6570] = \n{\n    {1,2}\n    {3,4}\n};\n3. \u6570\u636e\u7c7b\u578b \u6570\u7ec4\u540d[\u884c\u6570][\u5217\u6570] = {1,2,3,4};\n(\u82b1\u62ec\u53f7\u91cc\u9762\u7684\u6570\u636e\u4e2a\u6570\u5e94\u8be5\u6b63\u597d\u662f\u884c\u6570\u4e58\u4ee5\u5217\u6570)\n4. \u6570\u636e\u7c7b\u578b \u6570\u7ec4\u540d[ ][\u5217\u6570] = {1,2,3,4};\n(\u4e3a\u4ec0\u4e48\u884c\u6570\u4e0d\u7528\u5199? \u56e0\u4e3a\u7a0b\u5e8f\u4f1a\u81ea\u5df1\u7b97!)\n*/\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_44","title":"\u4e8c\u7ef4\u6570\u7ec4\u7ec4\u540d","text":"<ol> <li> <p>\u67e5\u770b\u4e8c\u7ef4\u6570\u7ec4\u6240\u5360\u5185\u5b58    cout &lt;&lt; sizeof(arr) &lt;&lt;endl;      cout &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;(\u7b2c\u4e00\u884c\u6240\u5360\u5185\u5b58)</p> </li> <li> <p>\u83b7\u53d6\u4e8c\u7ef4\u6570\u7ec4\u9996\u5730\u5740       cout &lt;&lt; (int)arr &lt;&lt; endl;  (\u7b2c\u51e0\u884c\u7684\u5730\u5740, \u54ea\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u90fd\u53ef\u4ee5\u770b)</p> </li> </ol> <p>\u5229\u7528\u5185\u5b58, \u53ef\u4ee5\u8ba1\u7b97\u884c\u6570\u548c\u5217\u6570</p> <p>\u4f8b\u5982: sizeof(arr) / sizeof(arr[0])</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_45","title":"\u4e8c\u7ef4\u6570\u7ec4\u6307\u9488","text":"<p>\u5728C\u8bed\u8a00\u4e2d\uff0c<code>int **arr</code> \u8868\u793a\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff0c\u901a\u5e38\u7528\u4e8e\u8868\u793a\u6307\u5411\u4e8c\u7ef4\u6570\u7ec4\u7684\u6307\u9488\u3002</p> <p>\u8003\u8651\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 <code>int arr[3][4]</code>\uff0c\u6211\u4eec\u77e5\u9053\u6570\u7ec4\u540d <code>arr</code> \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u88ab\u89e3\u91ca\u4e3a\u6307\u5411\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\uff0c\u5373 <code>int (*arr)[4]</code>\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>int (*p)[4] = arr;</code> \u8fd9\u6837\u7684\u65b9\u5f0f\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u6765\u7ba1\u7406\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u3002<code>int **arr</code> \u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u6307\u5411\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6307\u9488\u6307\u5411\u4e00\u7ef4\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20</p> <p><code>int **(array+1)</code> \u5b9e\u9645\u4e0a\u662f\u5c06\u6307\u9488 <code>array</code> \u5411\u540e\u79fb\u52a8\u4e86\u4e00\u4e2a\u5355\u4f4d\uff08<code>sizeof(int*)</code>\uff09\uff0c\u7136\u540e\u53d6\u5f97\u8be5\u4f4d\u7f6e\u7684\u6307\u9488\u7684\u5730\u5740\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c<code>array</code> \u662f\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff0c\u6bd4\u5982 <code>int **array</code>\uff0c\u90a3\u4e48 <code>array+1</code> \u5c31\u662f\u6307\u5411 <code>array</code> \u4e0b\u4e00\u4e2a\u6307\u9488\u7684\u4f4d\u7f6e\u3002</p> <p>\u5982\u679c <code>array</code> \u662f\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u6570\u7ec4\u7684\u8bdd\uff0c<code>int **(array+1)</code> \u5c31\u6307\u5411\u4e86\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6307\u9488\uff0c\u5373 <code>array[1]</code>\u3002\u8fd9\u79cd\u64cd\u4f5c\u901a\u5e38\u7528\u4e8e\u904d\u5386\u6307\u9488\u6570\u7ec4\u6216\u8005\u4e8c\u7ef4\u6570\u7ec4\u7684\u884c\u3002</p> <p>The following declarations are equivalent: The parameter is of type <code>int (*)[N]</code>, which is a pointer to <code>int[N]</code>.</p> <pre><code>void fun(int (*a)[N]);\nvoid fun(int a[][N]);\nvoid fun(int a[2][N]);\nvoid fun(int a[10][N]);\n</code></pre> <p>We can pass an array of type <code>int[K][N]</code> to <code>fun</code>, where <code>K</code> is arbitrary.</p> <ul> <li>The size for the second dimension must be N</li> <li><code>T[10]</code> and <code>T[20]</code> are different types, so the pointer types <code>T(*)[10]</code> and <code>T(*)[20]</code> are not compatible.</li> </ul> <p>In each of the following declarations, what is the type of <code>a</code>? Does it accept an argument of type <code>int[N][M]</code>?</p> <ol> <li><code>void fun(int a[N][M])</code>: A pointer to <code>int[M]</code>. Yes.</li> <li><code>void fun(int (*a)[M])</code>: Same as 1.</li> <li><code>void fun(int (*a)[N])</code>: A pointer to <code>int[N]</code>. Yes iff <code>N == M</code>.</li> <li><code>void fun(int **a)</code>: A pointer to <code>int *</code>. No.</li> <li><code>void fun(int *a[])</code>: Same as 4.</li> <li><code>void fun(int *a[N])</code>: Same as 4.</li> <li><code>void fun(int a[100][M])</code>: Same as 1.</li> <li><code>void fun(int a[N][100])</code>: A pointer to <code>int[100]</code>. Yes iff <code>M == 100</code>.</li> </ol> <pre><code>void print(int (*a)[5], int n) {\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; 5; ++j)\n      printf(\"%d \", a[i][j]);\n    printf(\"\\n\");\n  }\n}\nint main(void) {\n  int a[2][5] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}};\n  int b[3][5] = {0};\n  print(a, 2); // OK\n  print(b, 3); // OK\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_46","title":"\u6570\u7ec4\u4e0e\u6307\u9488","text":"<p>A pointer to an array of <code>N</code> <code>int</code>s:</p> <pre><code>int (*parr)[N];\n</code></pre> <p>An array of <code>N</code> pointers (pointing to <code>int</code>):</p> <pre><code>int *arrp[N];\n</code></pre> <p>Too confusing! How can I remember them?</p> <ul> <li><code>int (*parr)[N]</code></li> </ul> <p>has a pair of parentheses around * and parr, so</p> <ul> <li><code>parr</code> is a pointer (<code>*</code>), and</li> <li> <p>points to something of type <code>int[N]</code>.</p> </li> <li> <p>Then the other one is different:</p> </li> <li> <p><code>arrp</code> is an array, and</p> </li> <li>stores <code>N</code> pointers, with pointee type <code>int</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_47","title":"\u51fd\u6570","text":"<p>\u4f5c\u7528: \u8bb2\u4e00\u6bb5\u7ecf\u5e38\u4f7f\u7528\u7684\u4ee3\u7801\u5c01\u88c5\u8d77\u6765, \u51cf\u5c11\u91cd\u590d\u4ee3\u7801</p> <p>\u4e00\u4e2a\u8f83\u5927\u7684\u7a0b\u5e8f, \u4e00\u822c\u5206\u4e3a\u82e5\u5e72\u4e2a\u7a0b\u5e8f\u5757, \u6bcf\u4e2a\u6a21\u5757\u5b9e\u73b0\u7279\u5b9a\u7684\u529f\u80fd</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_48","title":"\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528","text":"<p>\u4e00\u822c\u6709\u4e94\u4e2a\u6b65\u9aa4</p> <ol> <li>\u8fd4\u56de\u503c\u7c7b\u578b</li> <li>\u51fd\u6570\u540d</li> <li>\u53c2\u6570\u5217\u8868</li> <li>\u51fd\u6570\u4f53\u8bed\u53e5</li> <li>return \u8868\u8fbe\u5f0f</li> </ol> <pre><code>\u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u6570\u5217\u8868)\n{\n    \u51fd\u6570\u4f53\u8bed\u53e5\n    return \u8868\u8fbe\u5f0f\n}\n</code></pre> <p>\u4f8b\u5982: \u5b9e\u73b0\u4e00\u4e2a\u52a0\u6cd5\u51fd\u6570, \u4f20\u5165\u4e24\u4e2a\u6574\u578b\u6570\u636e, \u8ba1\u7b97\u76f8\u52a0\u7684\u6570\u636e\u7ed3\u679c, \u5e76\u4e14\u8fd4\u56de\u5b83</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint add(short num1, short num2) // \u5efa\u8bae\u591a\u7528short, \u66f4\u4f55\u51b5short\u548cint\u662f\u7b49\u6548\u7684, \u4f46\u662fshort\u66f4\u80fd\u8282\u7701\u5185\u5b58\n{  // \u62ec\u53f7\u91cc\u9762\u7684\u662f\u5f62\u5f0f\u53c2\u6570\n    int sum = num1 + num2;\n    return sum;\n}\nint main()\n{\n    short a = 5;\n    short b = 10;\n    cout &lt;&lt; add(a, b) &lt;&lt;endl;    // \u8fd9\u91cc\u7684a, b\u662f\u5b9e\u53c2(\u5b9e\u9645\u53c2\u6570)\n    return 0;\n}\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d, add(a ,b)\u5c31\u662f\u5b9e\u73b0\u4e86\u51fd\u6570\u7684\u8c03\u7528</p> <p>\u6ce8\u610f: \u5982\u679c\u51fd\u6570\u4e0d\u9700\u8981\u8fd4\u56de\u503c\u7684\u8bdd, \u90a3\u4e48\u58f0\u660e\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u5730\u65b9\u53ef\u4ee5\u5199\u4e00\u4e2avoid, \u800creturn\u540e\u9762\u76f4\u63a5\u52a0\u5206\u53f7</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid tell_add(short num1, short num2)\n{  \n    int sum = num1 + num2;\n    cout &lt;&lt; \"The sum of these two numbers is \" &lt;&lt; sum &lt;&lt;endl;\n    return;\n}\nint main()\n{\n    short a = 5;\n    short b = 10;\n    tell_add(a, b);\n    return 0;\n}\n</code></pre> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f: \u5f53\u6211\u4eec\u505a\u503c\u4f20\u9012\u7684\u65f6\u5019, \u51fd\u6570\u7684\u5f62\u53c2\u4f1a\u53d1\u751f\u6539\u53d8, \u4f46\u662f\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u53c2!!</p> <p>\u6ce8\u610f\uff1a\u7f16\u8bd1\u5668\u6ca1\u6709\u90a3\u4e48\u806a\u660e\uff0c\u4e0d\u80fd\u201d\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u624d\u8fd4\u56de\u503c\u201c\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u603b\u4f1a\u8ba4\u4e3a\u201d\u6709\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019\u201c</p> <pre><code>int abs_int(int x) {\n  if (x &lt; 0)\n    return -x;\n  else if (x == 0)\n    return 0;\n  else if (x &gt; 0)\n    return x;\n}\n</code></pre> <pre><code>a.c: In function abs_int:\na.c:8:1: warning: control reaches end of non-void function [-Wreturn-type]\n    8 | }\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_49","title":"\u51fd\u6570\u7684\u5e38\u89c1\u6837\u5f0f","text":"<p>\u5e38\u89c1\u7684\u51fd\u6570\u6837\u5f0f\u6709\u56db\u79cd:</p> <p>\u65e0\u53c2\u65e0\u8fd4  \u6709\u53c2\u65e0\u8fd4  \u65e0\u53c2\u6709\u53cd  \u6709\u53c2\u6709\u8fd4</p> <p>\u65e0\u8fd4\u56de\u503c\u5c31\u662f\u8fd4\u56de\u503c\u7c7b\u578b\u6539\u6210void\u5e76\u4e14return \u76f4\u63a5\u52a0\u4e0a\u5206\u53f7</p> <p>\u65e0\u53c2\u6570\u5c31\u662f\u62ec\u53f7\u91cc\u9762\u4ec0\u4e48\u4e5f\u4e0d\u52a0</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_50","title":"\u51fd\u6570\u7684\u58f0\u660e","text":"<p>\u4f5c\u7528: \u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u540d\u79f0\u53ca\u5982\u4f55\u8c03\u7528\u51fd\u6570, \u51fd\u6570\u7684\u5b9e\u9645\u4e3b\u9898\u53ef\u4ee5\u5355\u72ec\u5b9a\u4e49</p> <p>\u51fd\u6570\u7684\u58f0\u660e\u53ef\u4ee5\u6709\u591a\u6b21, \u4f46\u662f\u51fd\u6570\u7684\u5b9a\u4e49\u53ea\u80fd\u6709\u4e00\u6b21!</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\n// \u63a5\u4e0b\u6765\u51fd\u6570\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\nint max(short a, short b)\n{\n    return (a &gt; b ? a : b);\n} // \u6ce8\u610f\u7075\u6d3b\u4f7f\u7528\u4e09\u76ee\u8fd0\u7b97\u7b26\nint main()\n{\n    cout &lt;&lt; max(15, 16) &lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u58f0\u660e. \u800c\u4e14\u6ce8\u610f\u5230, \u6211\u4eec\u603b\u662f\u628a\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u5199\u5728main\u51fd\u6570\u524d\u9762</p> <p>\u90a3\u4e48\u5982\u679cmax\u51fd\u6570\u5b9a\u4e49\u5728main\u7684\u540e\u9762\u5462? \u8fd9\u5c06\u662f\u4e0d\u5408\u6cd5\u7684. \u4e3a\u4ec0\u4e48\u5462? \u7f16\u8bd1\u5668\u4f1a\u76f4\u63a5\u544a\u8bc9\u4f60: \u6211\u4e0d\u77e5\u9053max\u662f\u4ec0\u4e48, \u56e0\u4e3a\u4ee3\u7801\u662f\u4e00\u884c\u4e00\u884c\u6267\u884c\u7684!</p> <p>\u4f46\u662f\u6709\u4e86\u58f0\u660e, \u5c31\u53ef\u4ee5\u63d0\u524d\u544a\u8bc9\u7a0b\u5e8f\u51fd\u6570\u7684\u5b58\u5728</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\n// \u63a5\u4e0b\u6765\u51fd\u6570\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\nint max(short a, short b);// \u6ce8\u610f\u5206\u53f7\nint main()\n{\n    cout &lt;&lt; max(15, 16) &lt;&lt;endl;\n    return 0;\n}\nint max(short a, short b)\n{\n    return (a &gt; b ? a : b);\n} // \u6ce8\u610f\u7075\u6d3b\u4f7f\u7528\u4e09\u76ee\u8fd0\u7b97\u7b26\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e2a\u7a0b\u5e8f\u4e4b\u4e2d, max\u7684\u51fd\u6570\u5b9a\u4e49\u5728\u4e86\u540e\u9762. \u5f53\u7136, \u5982\u679cmax\u4f9d\u7136\u662f\u5728\u524d\u9762\u8fdb\u884c\u4e86\u5b9a\u4e49, \u6709\u4e86\u58f0\u660e\u4e5f\u662f\u6ca1\u5173\u7cfb\u7684</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_51","title":"\u51fd\u6570\u7684\u5206\u6587\u4ef6\u7f16\u5199","text":"<p>\u4f5c\u7528: \u8ba9\u4ee3\u7801\u66f4\u52a0\u6e05\u6670</p> <p>\u51fd\u6570\u5206\u6587\u4ef6\u7f16\u5199\u4e00\u822c\u6709\u56db\u4e2a\u6b65\u9aa4</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u540e\u7f00\u540d\u4e3a.h\u7684\u5934\u6587\u4ef6</li> <li>\u521b\u5efa\u540e\u7f00\u540d\u4e3a.cpp\u7684\u6e90\u6587\u4ef6</li> <li>\u5728\u5934\u6587\u4ef6\u4e2d\u5199\u51fd\u6570\u7684\u58f0\u660e</li> <li>\u5728\u6e90\u6587\u4ef6\u4e2d\u5199\u51fd\u6570\u7684\u5b9a\u4e49</li> </ol> <pre><code># include &lt;iostream&gt;\n# include \"test_func.h\"\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; max(15, 16) &lt;&lt;endl;\n    return 0;\n}  // main_program.cpp\n</code></pre> <pre><code>// test_func.h\n# include &lt;iostream&gt;\nusing namespace std;\nint max(short a, short b);// \u6ce8\u610f\u5206\u53f7, \u8fd9\u91cc\u662f\u51fd\u6570\u58f0\u660e\n</code></pre> <pre><code>// test_func.cpp\n# include \"test_func.h\"\nint max(short a, short b)\n{\n    return (a &gt; b ? a : b);\n} // \u6ce8\u610f\u7075\u6d3b\u4f7f\u7528\u4e09\u76ee\u8fd0\u7b97\u7b26\n</code></pre> <p>\u6ce8\u610f\u6bcf\u4e2a\u6587\u4ef6\u914d\u5957\u7684\u4e1c\u897f!</p> <p>\u5934\u6587\u4ef6\u7edf\u9886\u5bf9\u5e94\u7684cpp\u6587\u4ef6, \u56e0\u6b64\u5934\u6587\u4ef6\u91cc\u9762\u8981\u6709, using namespace std\u7b49\u7b49\u914d\u5957\u4e1c\u897f <p>\u800c\u5bf9\u5e94\u7684cpp\u6587\u4ef6, include \"\u5934\u6587\u4ef6\u540d\"\u5373\u53ef</p> <p>\u800c\u5728\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u4e3b\u6587\u4ef6\u4e2d, \u8981include\u5934\u6587\u4ef6; \u6ce8\u610f\u4f7f\u7528\u7684\u662f\u53cc\u5f15\u53f7, \u56e0\u4e3a\u8fd9\u4e2a\u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u5934\u6587\u4ef6</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_52","title":"\u6307\u9488","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_53","title":"\u6307\u9488\u57fa\u672c\u6982\u5ff5\u4e0e\u4f7f\u7528","text":"<p>\u6307\u9488\u7684\u4f5c\u7528: \u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u95f4\u63a5\u8bbf\u95ee\u5185\u5b58</p> <ol> <li>\u5185\u5b58\u7f16\u53f7\u662f\u4ece0\u5f00\u59cb\u8bb0\u5f55\u7684, \u4e00\u822c\u752816\u8fdb\u5236\u8868\u793a</li> <li>\u53ef\u4ee5\u5229\u7528\u6307\u9488\u53d8\u91cf\u4fdd\u5b58\u5730\u5740</li> </ol> <p>\u5047\u8bbe int a = 10, \u7f16\u53f7\u4e3a0x0000\u7684\u5185\u5b58\u8bb0\u5f55\u4e8610\u8fd9\u4e2a\u6570\u636e</p> <p>\u90a3\u4e48\u53ef\u4e0d\u53ef\u4ee5\u518d\u5f00\u4e00\u4e2a\u53d8\u91cf\u6765\u4fdd\u5b58\u8fd9\u4e2a\u5730\u5740\u5462? \u5f53\u7136\u662f\u53ef\u4ee5\u7684, \u800c\u8fd9\u4e2a\u53d8\u91cf\u5c31\u53eb\u505a\u6307\u9488\u53d8\u91cf; \u6362\u800c\u8a00\u4e4b, \u6307\u9488\u5c31\u662f\u4e00\u4e2a\u5730\u5740, \u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u4fdd\u5b58\u4e00\u4e2a\u5730\u5740</p> <p>\u90a3\u4e48\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528\u5462?</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 10;\n    int * p; // \u8bed\u6cd5: \u6570\u636e\u7c7b\u578b * \u6307\u9488\u53d8\u91cf\u540d\n    p = &amp;a; // \u5efa\u7acb\u8054\u7cfb, \u8ba9\u6307\u9488\u8bb0\u5f55a\u7684\u5730\u5740\n    cout &lt;&lt; \"The address of a is: \" &lt;&lt; p &lt;&lt; endl;\n    *p = 1000;// \u8fd9\u4e2a\u79f0\u4e3a\u89e3\u5f15\u7528, *p\u5c06\u4ee3\u8868a\n    cout &lt;&lt; a &lt;&lt; endl; // \u5c06\u4f1a\u8f93\u51fa1000\n    return 0;\n}\n</code></pre> <p>\u4e00\u5b9a\u8981\u6ce8\u610f\u7684\u662f: \u6307\u9488\u7c7b\u578b\u5fc5\u987b\u4e0e\u6240\u6307\u5bf9\u8c61\u7684\u7c7b\u578b\u4e00\u81f4!!</p> <pre><code>const double pi = 3.14;\ndouble *ptr = &amp;pi; // \u9519\u8bef, ptr\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6307\u9488, \u7c7b\u578b\u4e0d\u4e00\u81f4\nconst double *cptr = &amp;pi; // \u6b63\u786e, const\u4f7f\u5f97\u7c7b\u578b\u4e00\u81f4\n*cptr = 42; // \u9519\u8bef, \u4e0d\u80fd\u8d4b\u503c\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_54","title":"\u6307\u9488\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4","text":"<p>\u6307\u9488\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b, \u90a3\u4e48\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u5360\u7528\u591a\u5c11\u5185\u5b58\u7a7a\u95f4? \u572832\u4f4d\u7cfb\u7edf\u4e2d, \u5730\u5740\u53ea\u5360\u75284\u4e2a\u5b57\u8282; \u572864\u4f4d\u4e0b, \u53608\u4e2a\u5b57\u8282. \u6240\u4ee5\u5360\u7528\u5185\u5b58\u5927\u5c0f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u6709\u5173, \u800c\u4e0d\u4e0e\u6570\u636e\u7c7b\u578b\u6709\u5173</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_55","title":"\u7a7a\u6307\u9488","text":"<p>\u7a7a\u6307\u9488\u5b9a\u4e49: \u6307\u9488\u53d8\u91cf\u6307\u5411\u5185\u5b58\u4e2d\u7f16\u53f7\u4e3a0\u7684\u7a7a\u95f4</p> <p>\u7528\u9014: \u521d\u59cb\u5316\u6307\u9488\u53d8\u91cf</p> <p>\u6ce8\u610f: \u7a7a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u662f\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u7684</p> <p>(\u56e0\u4e3a0-255\u7684\u5185\u5b58\u662f\u7cfb\u7edf\u5360\u7528\u7684, \u8bbf\u95ee\u7684\u8bdd\u4f1a\u51fa\u9519)</p> <pre><code>int main(){\n    int * p = NULL;\n    *p = 100;//\u76f4\u63a5\u62a5\u9519\n    cout &lt;&lt; *p &lt;&lt; endl; //\u76f4\u63a5\u62a5\u9519\n}\n</code></pre> <pre><code>int *ptr = NULL;\nprintf(\"%d\\n\", *ptr); // undefined behavior\n*ptr = 42; // undefined behavior\n</code></pre> <p>\u90a3\u4e48\u6709\u7684\u65f6\u5019\u6211\u4e5f\u4e0d\u786e\u5b9a\u8fd9\u4e2a\u6307\u9488\u5230\u5e95\u662f\u4e0d\u662f\u7a7a\u6307\u9488\uff0c\u4f46\u662f\u6211\u53c8\u60f3\u8bbf\u95ee\u8bd5\u4e00\u8bd5\u770b\u770b\u662f\u4e0d\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5e94\u8be5\u8ba9\u5982\u4f55\u5b9e\u73b0\u5462\uff1f</p> <pre><code>if (ptr != NULL &amp;&amp; *ptr == 42){}\n// \u8fd9\u6837\u7684\u8bdd\u5c31\u4f1a\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\u6307\u9488\uff1b\u5982\u679c\u662f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5224\u65ad\u76f4\u63a5\u5c31\u662fFalse\uff0c\u4e0d\u4f1a\u89e6\u53d1\u540e\u9762\u7684\u89e3\u5f15\u7528\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_56","title":"\u91ce\u6307\u9488","text":"<p>\u91ce\u6307\u9488: \u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u662f\u975e\u6cd5\u7684\u5185\u5b58\u7a7a\u95f4 \uff08\u4e0d\u6307\u5411\u4efb\u4f55\u76ee\u6807\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u7a7a\u6307\u9488\uff09</p> <p>\u4e0d\u662f\u8bf4\u4ec0\u4e48\u5185\u5b58\u7a7a\u95f4\u6211\u90fd\u80fd\u76f4\u63a5\u6307\u9488\u6307\u5411!!!</p> <p>\u603b\u7ed3: \u7a7a\u6307\u9488\u548c\u91ce\u6307\u9488\u90fd\u4e0d\u662f\u6211\u4eec\u7533\u8bf7\u7684\u7a7a\u95f4, \u56e0\u6b64\u4e0d\u80fd\u8bbf\u95ee</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#const","title":"const\u4fee\u9970\u6307\u9488","text":"<p>const\u4fee\u9970\u6307\u9488\u6709\u4e09\u79cd\u60c5\u51b5:</p> <ol> <li>const\u4fee\u9970\u6307\u9488 --- \u5e38\u91cf\u6307\u9488</li> <li>const\u4fee\u9970\u5e38\u91cf --- \u6307\u9488\u5e38\u91cf</li> <li>const\u5373\u4fee\u9970\u6307\u9488, \u53c8\u4fee\u9970\u5e38\u91cf</li> </ol> <p>\u7b2c\u4e00\u79cd\u60c5\u51b5: const\u4fee\u9970\u6307\u9488 --- \u5e38\u91cf\u6307\u9488</p> <pre><code>int a = 10;\nshort b = 10;\nconst int * p = &amp;a;   //\u8fd9\u5c31\u662f\u5e38\u91cf\u6307\u9488\n//\u7279\u70b9: \u6307\u9488\u6307\u5411\u53ef\u4ee5\u4fee\u6539, \u4f46\u662f\u6307\u9488\u6307\u5411\u7684\u503c\u4e0d\u53ef\u4ee5\u6539\n*p = 20; // \u975e\u6cd5\np = &amp;b;  // \u5408\u6cd5\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u60c5\u51b5: const\u4fee\u9970\u5e38\u91cf --- \u6307\u9488\u5e38\u91cf</p> <pre><code>int a = 10;\nshort b = 10;\nint * const p = &amp;a;   //\u8fd9\u5c31\u662f\u5e38\u91cf\u6307\u9488\n//\u7279\u70b9: \u6307\u9488\u6307\u5411\u4e0d\u53ef\u4ee5\u4fee\u6539, \u4f46\u662f\u6307\u9488\u6307\u5411\u7684\u503c\u53ef\u4ee5\u6539\n*p = 20; // \u5408\u6cd5\np = &amp;b;  // \u975e\u6cd5\n</code></pre> <p>\u7b2c\u4e09\u79cd\u60c5\u51b5: \u4fee\u9970\u6307\u9488\u4e0e\u5e38\u91cf</p> <pre><code>int a = 10;\nshort b = 10;\nconst int * const p = &amp;a;   //\u8fd9\u5c31\u662f\u5e38\u91cf\u6307\u9488\n//\u7279\u70b9: \u6307\u9488\u6307\u5411\u4e0d\u53ef\u4ee5\u4fee\u6539, \u6307\u9488\u6307\u5411\u7684\u503c\u4e0d\u53ef\u4ee5\u6539\n*p = 20; // \u975e\u6cd5\np = &amp;b;  // \u975e\u6cd5\n</code></pre> <p>\u4e5f\u79f0: \u9876\u5c42const\u8868\u793a\u6307\u9488\u672c\u8eab\u662f\u4e2a\u5e38\u91cf, \u5e95\u5c42const\u8868\u793a\u6307\u9488\u6240\u6307\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u5e38\u91cf</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_57","title":"\u6307\u9488\u4e0e\u6570\u7ec4","text":"<p>\u4f5c\u7528: \u5229\u7528\u6307\u9488\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u5143\u7d20</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main(){\n    int arr[10] = {0,1,2,3,4,5,6,7,8,9};\n    cout &lt;&lt; \"The first element is \" &lt;&lt; arr[0] &lt;&lt; endl;\n    int * p = arr; // \u6570\u7ec4\u9996\u5730\u5740\n    cout &lt;&lt; \"The first element is \" &lt;&lt; *p &lt;&lt; endl;\n    for(int i = 0; i&lt;10; i++)\n    {\n        cout &lt;&lt; *p &lt;&lt; endl;\n        p++;// \u56e0\u4e3ap\u662fint\u7c7b\u578b, \u56e0\u6b64\u662f\u56db\u4e2a\u5b57\u8282\n        // ++\u5c31\u81ea\u52a8\u4ee3\u8868\u5185\u5b58\u5730\u5740\u5f80\u540e\u9762\u79fb\u52a8\u56db\u4e2a\u5b57\u8282, \u800carr\u4e2d\u6bcf\u4e2a\u6574\u578b\u6570\u636e\u90fd\u6b63\u597d\u662f\u56db\u4e2a\u5b57\u8282\n    }    \n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_58","title":"\u6307\u9488\u4e0e\u51fd\u6570","text":"<p>\u4f5c\u7528: \u5229\u7528\u6307\u9488\u4f5c\u51fd\u6570\u53c2\u6570, \u53ef\u4ee5\u4fee\u6539\u5b9e\u53c2\u7684\u503c</p> <p>\u4e4b\u524d\u6211\u4eec\u63d0\u5230: \u51fd\u6570\u5e76\u4e0d\u80fd\u5bf9\u5b9e\u53c2\u8fdb\u884c\u6539\u53d8, \u4f46\u662f\u5982\u679c\u8f93\u5165\u7684\u53c2\u6570\u662f\u6307\u9488, \u90a3\u4e48\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5730\u5740\u7684\u4e00\u7cfb\u5217\u53c2\u6570, \u4ece\u800c\u64cd\u63a7\u53c2\u6570\u80cc\u540e\u6240\u5bf9\u5e94\u7684\u6570\u636e, \u4ece\u800c\u5b9e\u73b0\u5bf9\u5b9e\u53c2\u7684\u6539\u53d8</p> <pre><code>//\u5b9e\u73b0\u4e24\u4e2a\u6570\u503c\u7684\u4ea4\u6362\n# include &lt;iostream&gt;\nusing namespace std;\nvoid swap(int * p1,int * p2) //\u5730\u5740\u4f5c\u4e3a\u4f20\u53c2\n{\n    int temp = *p1;\n    *p1 = *p2;\n    *p2 = temp;\n    return;\n}\nvoid swap(int * p1,int * p2);//\u58f0\u660e\nint main()\n{\n    int a = 10;\n    int b = 20;\n    swap(a, b);\n    cout &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; b &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u603b\u800c\u8a00\u4e4b, \u53ea\u8981\u5f62\u53c2\u7684\u6570\u636e\u7c7b\u578b\u989d\u5916\u58f0\u79f0int *,\u90a3\u4e48\u4f20\u53c2\u5c31\u53ef\u4ee5\u6539\u53d8, \u56e0\u4e3a\u8bbe\u7f6e\u4e86\u4f1a\u5bf9\u5185\u5b58\u8fdb\u884c\u6539\u52a8, \u800c\u4e14\u51fd\u6570\u91cc\u9762\u7167\u5e38\u50cf\u4f60\u4e0d\u77e5\u9053\u6307\u9488\u4e00\u6837\u8fdb\u884c\u7f16\u5199\u5373\u53ef</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_59","title":"\u7efc\u5408\u6848\u4f8b: \u6307\u9488 \u6570\u7ec4 \u51fd\u6570","text":"<p>\u6848\u4f8b\u63cf\u8ff0: \u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570, \u5229\u7528\u5192\u6ce1\u6392\u5e8f, \u5b9e\u73b0\u5bf9\u6574\u6570\u578b\u6570\u7ec4\u7684\u5347\u5e8f\u6392\u5e8f</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid bubblesort(int * arr, int len)\n{ // \u8bbe\u7f6e: \u53ef\u4ee5\u5bf9\u4f20\u53c2\u8fdb\u884c\u6539\u53d8\n    for (int i = 0; i &lt; len; i++)\n    {\n        for (int j = 0; j &lt; len-i-1; j++)\n        {\n            if (arr[j] &gt; arr[j+1])\n            {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            } \n        }\n    }\n} // int * arr\u53d1\u751f\u4e86\u6307\u9488\u9000\u5316\uff0c\u76f4\u63a5\u5c31\u4f20\u5165\u4e86\u4e00\u4e2a\u53ef\u4ee5\u6539\u53d8\u7684\u6570\u7ec4\nvoid printArray(int * arr, int len)\n{\n    for(int i = 0; i&lt;len; i++)\n    {\n        cout &lt;&lt; arr[i] &lt;&lt; endl;\n    }\n}\nint main()\n{\n    int arr[10] = {4,3,9,6,1,2,10,8,7,5};\n    int len = sizeof(arr) / sizeof(arr[0]);\n    bubblesort(arr, len);\n    printArray(arr, len);\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#malloc-and-free-and-calloc","title":"MALLOC AND FREE AND CALLOC","text":"<p>Declared in <code>&lt;stdlib.h&gt;</code>.</p> <pre><code>void *malloc(size_t size);\n</code></pre> <p>Allocates <code>size</code> bytes of uninitialized storage on heap.</p> <p>If allocation succeeds, returns the starting address of the allocated memory block.</p> <p>If allocation fails, a null pointer is returned.</p> <ul> <li><code>size_t</code></li> </ul> <p>: A type that can hold the size (number of bytes) of any object. It is</p> <ul> <li>declared in <code>&lt;stddef.h&gt;</code>, and</li> <li>is an unsigned integer type,</li> <li>whose size is implementation-defined. For example, it may be 64-bit on a 64-bit machine, and 32-bit on a 32-bit machine.</li> </ul> <pre><code>T *ptr = malloc(sizeof(T) * n); // sizeof(T) * n bytes\nfor (int i = 0; i != n; ++i)\n  ptr[i] = /* ... */\n// Now you can use `ptr` as if it points to an array of `n` objects of type `T`\n// ...\nfree(ptr);\n</code></pre> <p>To avoid memory leaks, the starting address of that block memory must be passed to <code>free</code> when the memory is not used anymore.</p> <p>Declared in <code>&lt;stdlib.h&gt;</code>.</p> <pre><code>void free(void *ptr);\n</code></pre> <p>Deallocates the space previously allocated by an allocation function (such as <code>malloc</code>).</p> <p>If <code>ptr</code> is a null pointer, this function does nothing.</p> <ul> <li>There is no need to do a null check before calling <code>free</code>!</li> </ul> <p>The behavior is undefined if <code>ptr</code> is not equal to an address previously returned by an allocation function.</p> <ul> <li>In other words, \"double <code>free</code>\" is undefined behavior (and often causes severe runtime errors).</li> </ul> <p>After <code>free(ptr)</code>, <code>ptr</code> no longer points to an existing object, so it is no longer dereferenceable.</p> <ul> <li>Often called a \"dangling pointer\".</li> </ul> <p>We can also create one single object dynamically (on heap):</p> <pre><code>int *ptr = malloc(sizeof(int));\n*ptr = 42;\nprintf(\"%d\\n\", *ptr);\n// ...\nfree(ptr);\n</code></pre> <p>But why? Why not just create one normal variable like <code>int ival = 42;</code>\u8fd9\u5c31\u548c\u5185\u5b58\u56db\u533a\u6709\u5173\u4e86</p> <p>\u8fd9\u79cd\u65b9\u6cd5\u80fd\u591f\u628a\u6570\u636e\u653e\u5728\u5806\u533a\uff0c\u7136\u540e\u624b\u52a8\u91ca\u653e\uff1a</p> <p>Benefit: The lifetime of a dynamically allocated object goes beyond a local scope.</p> <p>It is not destroyed until we <code>free</code> it.</p> <pre><code>int *create_array(void) {\n  int a[N];\n  return a; // Returns the address of the local object `a`.\n            // When the function returns, `a` will be destroyed, so that\n            // the returned address becomes invalid.\n            // Dereferencing the returned address is undefined behavior.\n}\nint *create_dynamic_array(int n) {\n  return malloc(sizeof(int) * n); // OK. The allocated memory is valid until\n                                  // we free it.\n}\n</code></pre> <p>Create a \"2-d array\" on heap?</p> <pre><code>int **p = malloc(sizeof(int *) * n);\nfor (int i = 0; i &lt; n; ++i)\n  p[i] = malloc(sizeof(int) * m);\nfor (int i = 0; i &lt; n; ++i)\n  for (int j = 0; j &lt; m; ++j)\n    p[i][j] = /* ... */\n// ...\nfor (int i = 0; i &lt; n; ++i)\n  free(p[i]);\nfree(p);\n</code></pre> <p>Create a \"2-d array\" on heap? - Another way: Create a 1-d array of length <code>n * m</code>.</p> <pre><code>int *p = malloc(sizeof(int) * n * m);\nfor (int i = 0; i &lt; n; ++i)\n  for (int j = 0; j &lt; m; ++j)\n    p[i * m + j] = /* ... */ // This is the (i, j)-th entry.\n// ...\nfree(p);\n</code></pre> <p>calloc:</p> <p>Declared in <code>&lt;stdlib.h&gt;</code></p> <pre><code>void *calloc(size_t num, size_t each_size)\n</code></pre> <p>Allocates memory for an array of <code>num</code> objects (each of size <code>each_size</code>), and initializes all bytes in the allocated storage to zero 1.</p> <p>Similar as <code>malloc(num * each_size)</code>. 2 Returns a null pointer on failure.</p> <p>The behaviors of <code>malloc(0)</code>, <code>calloc(0, N)</code> and <code>calloc(N, 0)</code> are implementation-defined:</p> <ul> <li>They may or may not allocate memory.</li> <li>If no memory is allocated, a null pointer is returned.</li> <li>They may allocate some memory, for some reasons. In that case, the address of the allocated memory is returned.</li> <li>You cannot dereference the returned pointer.</li> <li>It still constitutes memory leak if such memory is not <code>free</code>d.</li> </ul> <p>Arrays vs <code>malloc</code></p> <ul> <li> <p>An array has limited lifetime (unless it is global or <code>static</code>). It is destroyed when control reaches the end of its scope.</p> </li> <li> <p>Objects allocated by <code>malloc</code> are not destroyed until their address is passed to <code>free</code>.</p> </li> <li> <p>The program crashes if the size of an array is too large (running out of stack memory). There is no way of recovery.</p> </li> <li> <p>Attempt to <code>malloc</code> a block of memory that is too large results in a null pointer. We can know if there is no enough heap memory by doing a null check.</p> </li> </ul> <p><code>int *ptr = malloc(1ull &lt;&lt; 60); // unrealistic size   if (!ptr)     report_an_error(\"Out of memory.\");</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_60","title":"\u7ed3\u6784\u4f53","text":"<p>\u57fa\u672c\u6982\u5ff5: \u5c5e\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b, \u5141\u8bb8\u7528\u6237\u50a8\u5b58\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_61","title":"\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4e0e\u4f7f\u7528","text":"<p>struct \u7ed3\u6784\u4f53\u540d {\u7ed3\u6784\u4f53\u6210\u5458\u5217\u8868}</p> <p>\u901a\u8fc7\u7ed3\u6784\u4f53\u521b\u5efa\u53d8\u91cf\u4e00\u822c\u6709\u4e09\u79cd:</p> <ol> <li>struct \u7ed3\u6784\u4f53\u540d \u53d8\u91cf\u540d</li> <li>struct \u7ed3\u6784\u4f53\u540d \u53d8\u91cf\u540d = {\u6210\u54581, \u6210\u54582,......}</li> <li>\u5b9a\u4e49\u7ed3\u6784\u4f53\u65f6\u987a\u4fbf\u521b\u5efa\u53d8\u91cf</li> </ol> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\n// \u521b\u5efa\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\nstruct Student\n{\n    string name;\n    int age;\n    int score;\n}; // \u6ce8\u610f\u5206\u53f7\nint main()\n{\n    struct Student s1;\n    s1.name = \"Bear\";\n    s1.age = 18;\n    s1.score = 100;\n    cout &lt;&lt; \"name: \" &lt;&lt; s1.name &lt;&lt; endl;\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\n// \u521b\u5efa\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\nstruct Student\n{\n    string name;\n    int age;\n    int score;\n}; // \u6ce8\u610f\u5206\u53f7\nint main()\n{\n    struct Student s2 = {\"Bear\", 18, 100}\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\n// \u521b\u5efa\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\nstruct Student\n{\n    string name;\n    int age;\n    int score;\n}s3; // \u987a\u4fbf\u521b\u5efa, \u540e\u9762\u53ef\u4ee5\u50cf\u7b2c\u4e00\u79cd\u65b9\u6cd5\u4e00\u6837\u7ed9\u5b83\u8d4b\u503c\n</code></pre> <p>\u6ce8\u610f: C++\u4e2d, \u5b9a\u4e49\u7ed3\u6784\u4f53\u5fc5\u987b\u8981\u6709struct, \u4f46\u662f\u5728\u521b\u5efa\u4e00\u4e2a\u5b9e\u9645\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u65f6\u5019, \u53ef\u4ee5\u7701\u7565</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_62","title":"\u7ed3\u6784\u4f53\u6570\u7ec4","text":"<p>\u4f5c\u7528: \u5c06\u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u653e\u5165\u5230\u6570\u7ec4\u4e2d\u65b9\u4fbf\u7ef4\u62a4</p> <p>\u8bed\u6cd5: struct \u7ed3\u6784\u4f53\u540d \u6570\u7ec4\u540d[\u5143\u7d20\u4e2a\u6570] = {{},{},.......}</p> <pre><code>struct student\n{\n    string name;\n    int age;\n    long score;\n};\nint main()\n{\n    struct student stuArray[3] = \n    {\n    {\"Van\", 20, 114514}\n    {\"Bear\", 18, 100}\n    {\"Dark\", 20, 1919810}\n    }\n}\n</code></pre> <p>\u8bf4\u660e\u767d\u4e86, \u5c31\u662f\u4e00\u4e2a\u6570\u7ec4, \u91cc\u9762\u5b58\u653e\u4e86\u51e0\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_63","title":"\u7ed3\u6784\u4f53\u6307\u9488","text":"<p>\u4f5c\u7528: \u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458</p> <p>\u5229\u7528\u64cd\u4f5c\u7b26-&gt;\u53ef\u4ee5\u901a\u8fc7\u7ed3\u6784\u4f53\u6307\u9488\u8bbf\u95ee\u7ed3\u6784\u4f53\u5c5e\u6027</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nstruct student\n{\n    string name;\n    int age;\n    int score;\n};\nint main()\n{\n    struct student s = {\"Bear\", 18, 100};\n    //\u901a\u8fc7\u6307\u9488\u6307\u5411\u7ed3\u6784\u4f53\u53d8\u91cf\n    //int * p = &amp;s;  \u8fd9\u4f1a\u76f4\u63a5\u62a5\u9519!!\u4e0d\u517c\u5bb9\n    struct student * p = &amp;s; \n    // \u4e0a\u8ff0\u4e24\u4e2astruct\u53ef\u4ee5\u7701\u7565\n    cout &lt;&lt; p-&gt;name &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_64","title":"\u7ed3\u6784\u4f53\u5d4c\u5957\u7ed3\u6784\u4f53","text":"<p>\u4f5c\u7528: \u7ed3\u6784\u4f53\u7684\u6210\u5458\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53</p> <p>\u4f8b\u5982: \u6bcf\u4e2a\u8001\u5e08\u798f\u5c9b\u4e00\u4e2a\u5b66\u5458, \u4e00\u4e2a\u8001\u5e08\u7684\u7ed3\u6784\u4f53\u91cd, \u8fd8\u6709\u5b66\u751f\u7684\u7ed3\u6784\u4f53</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nstruct student\n{\n    string name;\n    int age;\n    int score;\n};\nstruct teacher\n{\n    int id;\n    string name;\n    int age;\n    struct student stu;\n};\n\nint main()\n{\n    student s =  {\"Bear\", 18, 100};\n    struct teacher tea = {123, \"Lily\", 25, s};\n    cout &lt;&lt; tea.stu.score&lt;&lt; endl;\n    return 0;\n}\n\n</code></pre> <p>\u6ce8\u610f:  </p> <ol> <li>\u4e0d\u80fd\u76f4\u63a5cout   tea.stu, \u56e0\u4e3a\u4e0d\u80fd\u8f93\u51fa\u7ed3\u6784\u4f53</li> <li>\u6ce8\u610f: struct student\u4e00\u5b9a\u8981\u5728struct teacher\u4e4b\u524d</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_65","title":"\u7ed3\u6784\u4f53\u505a\u51fd\u6570\u53c2\u6570","text":"<p>\u4f5c\u7528: \u5c06\u7ed3\u6784\u4f53\u4f5c\u4e3a\u53c2\u6570\u5411\u51fd\u6570\u4e2d\u4f20\u9012</p> <p>\u4f20\u9012\u7684\u65b9\u5f0f\u6709\u4e24\u79cd: \u503c\u4f20\u9012, \u548c\u5730\u5740\u4f20\u9012</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nstruct student\n{\n    string name;\n    int age;\n    int score;\n};\nvoid printinfo(student s)\n{\n    cout &lt;&lt; \"The name of the student: \";\n    cout &lt;&lt; s.name &lt;&lt; endl;\n    cout &lt;&lt; \"The age of the student: \";\n    cout &lt;&lt; s.age &lt;&lt; endl;\n    cout &lt;&lt; \"The score of the student: \" ;\n    cout &lt;&lt; s.score &lt;&lt; endl;\n    return;\n}\nint main()\n{\n    struct student s = {\"Bear\", 18, 100};\n    printinfo(s);\n    return 0;\n}\n</code></pre> <p>\u4e0a\u8ff0\u4e3a\u503c\u4f20\u9012</p> <p>\u5f53\u7136, \u5982\u679c\u60f3\u6539\u52a8\u4f20\u5165\u7684\u7ed3\u6784\u4f53\u4e2d\u7684\u53c2\u6570\u7684\u8bdd, \u53ef\u4ee5\u4f7f\u7528\u5730\u5740\u4f20\u9012</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nstruct student\n{\n    string name;\n    int age;\n    int score;\n};\nvoid printinfo(struct student * s)\n{\n    cout &lt;&lt; \"The name of the student: \";\n    cout &lt;&lt; s-&gt;name &lt;&lt; endl;\n    cout &lt;&lt; \"The age of the student: \";\n    cout &lt;&lt; s-&gt;age &lt;&lt; endl;\n    cout &lt;&lt; \"The score of the student: \" ;\n    cout &lt;&lt; s-&gt;score &lt;&lt; endl;\n    return;\n}\nvoid lao_ren(struct student * s)\n{\n    s-&gt;score += 20;\n    return;\n}\nint main()\n{\n    struct student s = {\"Bear\", 18, 100};\n    struct student * p = &amp;s; // \u521b\u5efa\u5730\u5740\n    printinfo(p);//\u6216\u8005\u76f4\u63a5\u4f20\u5165&amp;s\n    lao_ren(p);\n    printinfo(p);\n    return 0;\n}\n/*\nThe name of the student: Bear\nThe age of the student: 18\nThe score of the student: 100\nThe name of the student: Bear\nThe age of the student: 18\nThe score of the student: 120\n*/\n</code></pre> <p>\u6ce8\u610f\u6307\u9488\u6765\u8bbf\u95ee\u6570\u636e, \u9700\u8981-&gt;</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#const_1","title":"\u7ed3\u6784\u4f53\u4e2dconst\u4f7f\u7528\u573a\u666f","text":"<p>\u4f5c\u7528: \u5229\u7528const\u9632\u6b62\u8bef\u64cd\u4f5c</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nstruct student\n{\n    string name;\n    int age;\n    int score;\n};\nvoid printinfo(student s)\n{\n    cout &lt;&lt; \"The name of the student: \";\n    cout &lt;&lt; s.name &lt;&lt; endl;\n    cout &lt;&lt; \"The age of the student: \";\n    cout &lt;&lt; s.age &lt;&lt; endl;\n    cout &lt;&lt; \"The score of the student: \" ;\n    cout &lt;&lt; s.score &lt;&lt; endl;\n    return;\n}\nint main()\n{\n    student s = {\"Bear\", 18, 100};\n\n}\n</code></pre> <p>\u4e0a\u9762\u662f\u4e00\u4e2a\u503c\u4f20\u9012, \u53ef\u4ee5\u6253\u5370\u5b66\u751f\u4fe1\u606f, \u800c\u4e14\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u4fee\u6539. \u8fd9\u662f\u4e00\u4ef6\u633a\u597d\u7684\u4e8b\u60c5, \u4f46\u662f\u95ee\u9898\u5728\u4e8e: \u4f20\u5165\u7684\u548c\u6240\u4f7f\u7528\u7684\u7684\u662f\u540c\u4e00\u4efd\u6570\u636e\u5417? \u53ef\u60f3\u800c\u77e5, \u5e76\u4e0d\u662f. \u56e0\u6b64\u5982\u679c\u6210\u5343\u4e0a\u4e07\u4e2a\u5b66\u751f\u7684\u4fe1\u606f\u90fd\u6253\u5370\u4e00\u904d, \u590d\u5236\u51fa\u6765\u7684\u5185\u5bb9\u6240\u5360\u7684\u7a7a\u95f4\u8d8a\u591a! \u4f46\u662f\u5982\u679c\u4f20\u5165\u7684\u662f\u6307\u9488, \u53ea\u4f1a\u5360\u7528\u56db\u4e2a\u5185\u5b58! \u4f60\u628a\u5730\u5740\u4f20\u7ed9\u6211, \u6211\u5c31\u80fd\u8fdb\u884c\u64cd\u4f5c! \u4f46\u662f\u5982\u679c\u6211\u5199\u4ee3\u7801\u6709\u95ee\u9898, \u5982\u679c\u4f20\u5165\u7684\u662f\u53c2\u6570, \u4f1a\u8bef\u64cd\u4f5c\u6570\u636e, \u600e\u4e48\u529e?</p> <p>\u76f4\u63a5: <code>void printinfo(const student *s)// \u5730\u5740\u4f20\u5165, \u800c\u4e14\u662f\u5e38\u91cf\u6307\u9488</code></p> <p>\u4e00\u65e6\u52a0\u5165\u4e86const, \u5982\u679c\u6211\u53ef\u80fd\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u4fee\u6539, \u5c31\u4f1a\u7acb\u9a6c\u62a5\u9519!!!</p> <p>\u4e3a\u4ec0\u4e48\u662f\u5728\u524d\u9762\u52a0\u4e0aconst\u5462?\u56e0\u4e3a\u8fd9\u6837\u4f7f\u5f97\u6307\u9488\u53d8\u6210\u4e86\u5e38\u91cf\u6307\u9488, \u6307\u9488\u6240\u6307\u5411\u7684\u53ef\u4ee5\u6539\u53d8, \u4f46\u662f\u6307\u9488\u6240\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u80fd\u6539\u53d8!</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_66","title":"\u7efc\u5408\u6848\u4f8b:","text":"<p>\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53, \u7136\u540e\u60f3\u8981\u5229\u7528\u5192\u6ce1\u6392\u5e8f, \u6309\u7167\u5e74\u9f84\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f, \u6700\u540e\u6253\u5370\u6392\u5e8f\u4e4b\u540e\u7684\u7ed3\u679c, \u8981\u6c42\u5229\u7528\u7ed3\u6784\u4f53\u6570\u7ec4</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nstruct student \n{\n    string name;\n    int age;\n    string sex;\n};\nvoid printinfo(struct student array[]);\nvoid bubblesort_printinfo(struct student stuarray[])\n{\n    for(int i = 0; i &lt; 5; i++)\n    {\n        for(int j = 0; j &lt; 5-i-1; j++)\n        {\n            if (stuarray[j].age &gt; stuarray[j+1].age)\n            {\n                struct student temp = stuarray[j+1];\n                stuarray[j+1] = stuarray[j];\n                stuarray[j] = temp;\n            }\n        }\n    }\n    printinfo(stuarray);\n    return;\n}\nvoid printinfo(struct student array[])\n{\n    for(int i = 0; i &lt; 4; i++)\n    {\n        cout &lt;&lt; \"The name of the student: \" &lt;&lt; array[i].name &lt;&lt; endl;\n        cout &lt;&lt; \"The age of the student: \" &lt;&lt; array[i].age &lt;&lt; endl;\n        cout &lt;&lt; \"The sex of the student: \" &lt;&lt; array[i].sex &lt;&lt; endl;\n    }\n    return;\n}\nint main()\n{\n    struct student stuarray[5] = {\n        {\n            \"Lily\", 23, \"girl\"\n        },\n        {\n            \"Jack\", 21, \"boy\"\n        },\n        {\n            \"John\", 20, \"boy\"\n        },\n        {\n            \"Van\", 21, \"boy\"\n        },\n        {\n            \"Lucy\", 19, \"girl\"\n        }\n    }; \n    bubblesort_printinfo(stuarray);\n    printinfo(stuarray);\n    return 0;\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nstruct student \n{\n    string name;\n    int age;\n    string sex;\n};\nvoid printinfo(struct student array[]); // \u58f0\u660e\nvoid bubblesort(struct student stuarray[]) // \u6ce8\u610f\u8fd9\u4e2a\u8bed\u6cd5, \u5176\u5b9e\u5b9e\u8d28\u4e0a\u5c31\u662f\u5730\u5740\u4f20\u9012! \n{\n    for(int i = 0; i &lt; 5; i++)\n    {\n        for(int j = 0; j &lt; 5-i-1; j++)\n        {\n            if (stuarray[j].age &gt; stuarray[j+1].age)\n            {\n                struct student temp = stuarray[j+1];\n                stuarray[j+1] = stuarray[j];\n                stuarray[j] = temp;\n            }\n        }\n    }\n    return;\n}\nvoid printinfo(struct student array[]) // \u6ce8\u610f\u8fd9\u4e2a\u8bed\u6cd5, \u5176\u5b9e\u5b9e\u8d28\u4e0a\u5c31\u662f\u5730\u5740\u4f20\u9012! \n{\n    for(int i = 0; i &lt; 5; i++)\n    {\n        cout &lt;&lt; \"The name of the student: \" &lt;&lt; array[i].name &lt;&lt; endl;\n        cout &lt;&lt; \"The age of the student: \" &lt;&lt; array[i].age &lt;&lt; endl;\n        cout &lt;&lt; \"The sex of the student: \" &lt;&lt; array[i].sex &lt;&lt; endl;\n    }\n    return;\n}\nint main()\n{\n    struct student stuarray[5] = {\n        {\n            \"Lily\", 23, \"girl\"\n        },\n        {\n            \"Jack\", 21, \"boy\"\n        },\n        {\n            \"John\", 20, \"boy\"\n        },\n        {\n            \"Van\", 22, \"boy\"\n        },\n        {\n            \"Lucy\", 19, \"girl\"\n        }\n    }; \n    bubblesort(stuarray);\n    printinfo(stuarray);\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\u70b9:</p> <ol> <li> <p>\u4f20\u5165array\u7684\u65f6\u5019, \u540e\u9762\u52a0\u5165[], \u4ee3\u8868\u4f60\u4f20\u5165\u7684\u662fstudent stuarray\u7684\u5730\u5740</p> </li> <li> <p>\u5b9e\u9645\u4e0a\uff0c\u5728 C++ \u4e2d\uff0c\u5f53\u4f60\u5c06\u6570\u7ec4\u4f20\u9012\u7ed9\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7684\u662f\u6570\u7ec4\u7684\u5730\u5740\u3002\u8fd9\u662f\u56e0\u4e3a\u6570\u7ec4\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f1a\u9000\u5316\u4e3a\u6307\u9488\u3002</p> </li> </ol> <p>\u5f53\u4f60\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u5f62\u5982 <code>void myFunction(int myArray[])</code> \u6216 <code>void myFunction(int* myArray)</code>\uff0c\u8fd9\u4e24\u79cd\u5f62\u5f0f\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u662f\u7b49\u4ef7\u7684\uff0c\u90fd\u662f\u4f20\u9012\u4e86\u6570\u7ec4\u7684\u5730\u5740\uff08\u6307\u9488\uff09\u3002</p> <p>\u6240\u4ee5\uff0c\u6ca1\u6709\u4e13\u95e8\u5b9a\u4e49\u6570\u7ec4\u5730\u5740\u4f20\u9012\u7684\u8bed\u6cd5\uff0c\u800c\u662f\u4f7f\u7528\u6570\u7ec4\u540d\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u4f20\u9012\u7684\u662f\u6570\u7ec4\u7684\u5730\u5740\u3002</p> <ol> <li>\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48bubblesort\u662f\"\u503c\u4f20\u9012\", \u4f46\u662f\u6700\u540e\u5374\u6539\u53d8\u4e86\u7ed3\u6784\u4f53\u6570\u7ec4. \u4e3a\u4ec0\u4e48? \u56e0\u4e3a\u4e8b\u5b9e\u4e0a, \u5728C++\u4e2d, \u628a\u6570\u7ec4\u540d\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5b9e\u8d28\u5c31\u662f\u628a\u6570\u7ec4\u5730\u5740\u4f20\u7ed9\u4e86\u51fd\u6570, \u56e0\u6b64\u51fd\u6570\u7684\u76f8\u5173\u5b9a\u4e49\u5c31\u662f\"\u5730\u5740\u4f20\u9012\", \u56e0\u6b64\u672c\u6765\u5c31\u662f\u53ef\u4ee5\u6539\u53d8\u6570\u7ec4\u7684</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#c_3","title":"C++\u81ea\u5b66\u2014\u2014\u6838\u5fc3\u7f16\u7a0b","text":"<p>\u672c\u9636\u6bb5, \u4e3b\u8981\u9488\u5bf9C++\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6280\u672f\u505a\u8be6\u7ec6\u8bb2\u89e3, \u63a2\u8ba8C++\u4e2d\u7684\u6838\u5fc3\u548c\u7cbe\u9ad3</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_67","title":"\u5185\u5b58\u56db\u533a","text":"<p>C++\u7a0b\u5e8f\u5728\u6267\u884c\u7684\u65f6\u5019, \u5c06\u5185\u5b58\u5927\u65b9\u5411\u5206\u4e3a\u56db\u4e2a\u533a\u57df:</p> <ol> <li>\u4ee3\u7801\u533a: \u5b58\u653e\u51fd\u6570\u4f53\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801, \u7531\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u7ba1\u7406</li> <li>\u5168\u5c40\u533a: \u5b58\u653e\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u4ee5\u53ca\u5e38\u91cf</li> <li>\u6808\u533a: \u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5206\u914d\u91ca\u653e, \u5b58\u653e\u51fd\u6570\u7684\u53c2\u6570\u503c, \u5c40\u90e8\u53d8\u91cf\u7b49</li> <li>\u5806\u533a:\u7531\u7a0b\u5e8f\u5458\u5206\u914d\u548c\u91ca\u653e, \u82e5\u7a0b\u5e8f\u5458\u4e0d\u91ca\u653e, \u7a0b\u5e8f\u7ed3\u675f\u7684\u65f6\u5019\u7531\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536</li> </ol> <p>\u5b58\u5728\u7684\u610f\u4e49: \u4e0d\u540c\u533a\u57df\u5b58\u653e\u7684\u6570\u636e, \u8d4b\u4e88\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f, \u7ed9\u6211\u4eec\u66f4\u5927\u7684\u7075\u6d3b\u7f16\u7a0b</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_68","title":"\u7a0b\u5e8f\u8fd0\u884c\u524d","text":"<p>\u7a0b\u5e8f\u7f16\u8bd1\u4e4b\u540e, \u751f\u6210\u4e86exe\u53ef\u6267\u884c\u7a0b\u5e8f, \u672a\u6267\u884c\u8be5\u7a0b\u5e8f\u524d\u5206\u4e3a\u4e24\u4e2a\u533a\u57df:</p> <p>\u4ee3\u7801\u533a:</p> <p>\u200b   \u5b58\u653eCPU\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4</p> <p>\u200b   \u4ee3\u7801\u533a\u662f\u5171\u4eab\u7684, \u5171\u4eab\u7684\u76ee\u7684\u662f\u5bf9\u4e8e\u9891\u7e41\u88ab\u6267\u884c\u7684\u7a0b\u5e8f, \u53ea\u9700\u8981\u5728\u5185\u5b58\u4e2d\u6709\u4e00\u4efd\u5373\u53ef</p> <p>\u200b   \u4ee3\u7801\u533a\u662f\u53ea\u8bfb\u7684, \u4f7f\u5176\u53ea\u8bfb\u7684\u539f\u56e0\u662f\u9632\u6b62\u7a0b\u5e8f\u610f\u5916\u5730\u4fee\u6539\u4e86\u5b83\u7684\u6307\u4ee4</p> <p>\u5168\u5c40\u533a: </p> <p>\u200b   \u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u5b58\u653e\u5728\u6b64</p> <p>\u200b   \u5168\u5c40\u533a\u8fd8\u5305\u62ec\u4e86\u5e38\u91cf\u533a, \u5b57\u7b26\u4e32\u5e38\u91cf\u548c\u5176\u4ed6\u5e38\u91cf(const\u4fee\u9970\u7684\u53d8\u91cf)</p> <p>\u200b   \u8be5\u533a\u57df\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u7ed3\u675f\u540e\u7531\u64cd\u4f5c\u7cfb\u7edf\u91ca\u653e</p> <p>\u9644: \u5199\u5728\u51fd\u6570\u4f53\u4e2d\u7684\u53d8\u91cf\u90fd\u662f\u5c40\u90e8\u53d8\u91cf; \u5728\u51fd\u6570\u4f53\u5916\u9762\u7684, \u662f\u5168\u5c40\u53d8\u91cf</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\n// \u521b\u5efa\u5168\u5c40\u53d8\u91cf,g stands for global\nint g_a = 10;\n// const\u4fee\u9970\u7684\u5168\u5c40\u53d8\u91cf\nconst int c_g_a = 10;\nint main()\n{\n    // \u521b\u5efa\u666e\u901a\u5c40\u90e8\u53d8\u91cf\n    int a = 10;\n    // \u521b\u5efa\u9759\u6001\u53d8\u91cf, s stands for static\n    static int s_a = 10;\n    cout &lt;&lt; \"The address of a is: \" &lt;&lt; (long long)&amp;a &lt;&lt; endl;\n    cout &lt;&lt; \"The address of g_a is: \" &lt;&lt; (long long)&amp;g_a &lt;&lt; endl;\n    cout &lt;&lt; \"The address of a is: \" &lt;&lt; (long long)&amp;s_a &lt;&lt; endl;\n    // \u5b57\u7b26\u4e32\u5e38\u91cf\n    cout &lt;&lt; \"The address of the string is: \" &lt;&lt; (long long)&amp;\"Hello World\" &lt;&lt; endl;\n    // const\u4fee\u9970\u7684\u53d8\u91cf\n    cout &lt;&lt; \"The address of c_g_a is: \" &lt;&lt; (long long)&amp;c_g_a &lt;&lt; endl;\n    // const\u4fee\u9970\u7684\u5c40\u90e8\u53d8\u91cf\n    const int c_l_a = 10; // c: const    l: local\n    cout &lt;&lt; \"The address of c_l_a is: \" &lt;&lt; (long long)&amp;c_l_a &lt;&lt; endl;\n    return 0;\n}\n//The address of a is: 6487580\n//The address of g_a is: 4206608\n//The address of s_a is: 4206612\n//The address of the string is: 4210799\n//The address of c_g_a is: 4210692\n//The address of c_l_a is: 6487576\n</code></pre> <p>\u6ce8\u610f: \u4e0a\u9762\u6211\u4f7f\u7528\u4e86long long, \u56e0\u4e3a\u6211\u7684\u7cfb\u7edf\u662f64\u4f4d\u7684, \u6307\u9488\u5360\u7528\u4e86\u516b\u4e2a\u5b57\u8282, \u800cint\u5360\u7528\u56db\u4e2a\u5b57\u8282, \u6240\u4ee5\u4f1alose precision</p> <p>\u53ef\u89c1: \u5728\u5168\u5c40\u533a\u7684\u6709: \u5168\u5c40\u53d8\u91cf, \u9759\u6001\u53d8\u91cf, \u5b57\u7b26\u4e32\u5e38\u91cf, const\u4fee\u9970\u7684\u5168\u5c40\u5e38\u91cf</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_69","title":"\u7a0b\u5e8f\u8fd0\u884c\u4e4b\u540e","text":"<p>\u6808\u533a:</p> <p>\u200b   \u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5206\u914d\u548c\u91ca\u653e, \u5b58\u653e\u51fd\u6570\u7684\u53c2\u6570\u503c, \u5c40\u90e8\u53d8\u91cf\u7b49</p> <p>\u200b   \u6ce8\u610f\u4e8b\u9879: \u4e0d\u8981\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u5740, \u6808\u533a\u5f00\u8f9f\u7684\u6570\u636e\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u91ca\u653e</p> <p>\u8fd9\u53e5\u8bdd\u662f\u4ec0\u4e48\u610f\u601d\u5462? </p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint * func() // \u6ce8\u610f: \u4f20\u5165\u7684\u5f62\u53c2\u4e5f\u4f1a\u653e\u5728\u6808\u533a\u91cc\u9762, \u8fd4\u56de\u5b83\u7684\u5730\u5740\u662f\u4e0d\u5408\u7406\u7684\n{\n    int a = 10; // \u5c40\u90e8\u53d8\u91cf, \u5b58\u653e\u5728\u6808\u533a, \u6808\u533a\u7684\u6570\u636e\u5728\u51fd\u6570\u6267\u884c\u5b8c\u540e\u81ea\u52a8\u91ca\u653e\n    return &amp;a;// \u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u5730\u5740\n}\nint main()\n{\n    int * p = func();\n    cout &lt;&lt; *p &lt;&lt; endl; // \u7b2c\u4e00\u6b21\u8fd8\u53ef\u80fd\u6253\u5370\u8fd9\u4e2a\u6570\u5b57(\u53ef\u80fdIDE\u76f4\u63a5\u7ed9\u51fa\u8b66\u544a), \u56e0\u4e3a\u7f16\u8bd1\u5668\u505a\u4e86\u4fdd\u7559\n    cout &lt;&lt; *p &lt;&lt; endl; // \u7b2c\u4e8c\u6b21\u8fd9\u4e2a\u6570\u636e\u4e0d\u4f1a\u518d\u4fdd\u7559\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f: \u51fd\u6570\u4eba\u4e3a\u8fd4\u56de\u7684\u662fint* , \u4e3a\u4ec0\u4e48\u4e0d\u7528long long \u4e86?</p> <p>\u56e0\u4e3a\u90a3\u4e2along long\u4e8b\u5b9e\u4e0a\u662f\u5f3a\u884c\u628aint * \u8f6c\u5316\u4e3a\u4e86long long *, \u4e00\u5f00\u59cb\u8fd9\u4e2a&amp;a\u786e\u5b9e\u662fint *</p> <p>\u53ea\u6709\u8981\u6253\u5370\u5730\u5740\u7684\u65f6\u5019, \u624d\u4f1a\u9700\u8981(long long)\u5f3a\u884c\u8f6c\u5316</p> <p>\u5806\u533a:</p> <p>\u200b   \u7531\u7a0b\u5e8f\u5458\u5206\u914d\u91ca\u653e, \u82e5\u7a0b\u5e8f\u5458\u4e0d\u91ca\u653e, \u7a0b\u5e8f\u7ed3\u675f\u7684\u65f6\u5019\u7531\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536</p> <p>\u200b   \u5728C++\u4e2d\u4e3b\u8981\u5229\u7528new\u5728\u5806\u533a\u5f00\u8f9f\u4e00\u5757\u5185\u5b58</p> <p>\u5229\u7528new\u521b\u5efa\u7684\u6570\u636e, \u4f1a\u8fd4\u56de\u8be5\u6570\u636e\u5bf9\u5e94\u7684\u7c7b\u578b\u7684\u6307\u9488</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint * func()\n{\n    // \u5229\u7528new\u5173\u952e\u8bcd, \u53ef\u4ee5\u5c06\u6570\u636e\u5f00\u8f9f\u5230\u5806\u533a\n    int * p = new int(10);\n    // \u6307\u9488\u672c\u8d28\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf, \u653e\u5728\u6808\u4e0a, \u6307\u9488\u4fdd\u5b58\u7684\u662f\u5806\u533a\u7684\u6570\u636e\n    // \u6ce8\u610f: new int(10)\u8fd9\u4e2a\u8bed\u53e5\u662f\u6709\u8fd4\u56de\u503c\u7684, \u6211\u4eec\u53ef\u4ee5\u7528\u6307\u9488\u6765\u63a5\u53d7\u5b83\n    return p;\n}\nint main()\n{\n    //\u5728\u5806\u533a\u5f00\u8f9f\u5185\u5b58\n    int * p = func(); // \u7528\u6307\u9488\u63a5\u53d7\u8fd4\u56de\u503c\n    cout &lt;&lt; (long long)p &lt;&lt; endl; // \u6ce8\u610flong long \u5f3a\u884c\u8f6c\u5316, \u800c\u4e14\u4e0d\u540c\u6b21\u8fd0\u884c\u7a0b\u5e8f, \u8fd9\u4e2a\u5730\u5740\u90fd\u662f\u4e0d\u4e00\u6837\u7684\n    cout &lt;&lt; *p &lt;&lt; endl; // \u89e3\u5f15\u7528\n    cout &lt;&lt; *p &lt;&lt; endl; // \u7b2c\u4e8c\u6b21\u4f9d\u7136\u80fd\u6b63\u5e38\u663e\u793a\n    return 0;\n}\n</code></pre> <p>\u5b9e\u8d28: \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6808\u533a\u7684\u6570\u636e, \u8fd9\u4e2a\u6570\u636e\u4f1a\u5728\u51fd\u6570\u8c03\u7528\u5b8c\u6210\u4e4b\u540e\u9500\u6bc1\u6389; \u4f46\u662f\u5982\u679c\u6211\u8ba9\u8fd9\u4e2a\u8fd4\u56de\u7684\u6808\u533a\u7684\u6570\u636e\u662f\u4e00\u4e2a\u5730\u5740, \u5730\u5740\u6307\u5411\u7684\u5730\u65b9\u662f\u6570\u636e\u4e0d\u4f1a\u5728\u51fd\u6570\u7ed3\u675f\u6389\u7528\u540e\u88ab\u91ca\u653e\u7684\u5730\u65b9, \u90a3\u4e48\u5728main\u51fd\u6570\u91cc\u9762\u7528\u6307\u9488\u63a5\u53d7\u8fd9\u4e2a\u5730\u5740, \u968f\u5373\u8fd9\u4e2a\u5b58\u653e\u5728\u6808\u533a\u7684\u3001\u8bb0\u5f55\u4e86\u4e00\u4e2a\u5806\u533a\u5730\u5740\u7684\u6570\u636e\u88ab\u9500\u6bc1, \u4f46\u662f\u8fd9\u4e2a\u6570\u636e\u88abmain\u91cc\u9762\u7684\u6307\u9488\u63a5\u53d7, \u5b58\u653e\u5728\u6808\u533a\u7684\u5185\u5b58\u91cc\u9762(\u5c40\u90e8\u53d8\u91cf\u653e\u5728\u8fd9\u91cc\u9762), \u800c\u4e14\u8fd9\u4e2a\u6570\u636e\u5728func()\u8c03\u7528\u7ed3\u675f\u540e\u4e0d\u4f1a\u91ca\u653e(func()\u91cc\u9762\u7684\u5c40\u90e8\u53d8\u91cf\u4f1a\u5728func()\u8c03\u7528\u5b8c\u6210\u4e4b\u540e\u91ca\u653e)</p> <p>\u90a3\u4e48\u6709\u7528new\u5173\u952e\u8bcd\u5f00\u8f9f, \u90a3\u4e48\u5c31\u6709\u4eba\u5de5\u91ca\u653e, \u90a3\u4e48\u5173\u952e\u8bcd\u5c31\u662fdelete</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint * func()\n{\n    int * p = new int(10);\n    return p;\n}\nvoid test_01()\n{\n    int * p = func();\n    cout &lt;&lt; *p &lt;&lt; endl;\n    cout &lt;&lt; *p &lt;&lt; endl;\n    delete p;\n    cout &lt;&lt; *p &lt;&lt; endl; //\u5230\u8fd9\u91cc\u76f4\u63a5\u4f1a\u62a5\u9519, \u5185\u5b58\u5df2\u7ecf\u88ab\u91ca\u653e, \u518d\u6b21\u8bbf\u95ee\u5c31\u662f\u975e\u6cd5\u64cd\u4f5c\n    return;\n}\n// \u63a5\u4e0b\u6765, \u5c1d\u8bd5\u7528new\u5728\u5806\u533a\u5f00\u8f9f\u4e00\u4e2a\u6570\u7ec4\nint * test_02()\n{\n    // \u521b\u5efa\u4e00\u4e2a10\u6574\u578b\u6570\u636e\u7684\u6570\u7ec4\n    int * arr = new int[10]; //\u6ce8\u610f, \u8fd9\u91cc\u7684arr\u662f\u5730\u5740, \u540c\u65f6\u4e5f\u80fd\u62c5\u5f53\u6570\u7ec4\u672c\u8eab, \u8fd9\u4e2a\u95ee\u9898\u4ee5\u524d\u53d1\u73b0\u8fc7\n    for(int i = 0; i &lt; 10; i++)\n    {\n        arr[i] = i+100;\n    }\n    return arr;\n}\nint main()\n{\n    // test_01();\n    int * arr = test_02();\n    for (int i = 0; i &lt; 10; i++)\n    {\n        cout &lt;&lt; arr[i] &lt;&lt; endl; // \u518d\u6b21\u5f3a\u8c03, arr\u65e2\u662f\u5730\u5740, \u4e5f\u62c5\u5f53\u6570\u7ec4\u672c\u8eab\n    }\n    delete [] arr; // \u91ca\u653e\u6570\u7ec4, \u6ce8\u610f\u8981\u52a0\u4e0a\u4e00\u4e2a\u4e2d\u62ec\u53f7, \u544a\u8bc9\u7f16\u8bd1\u5668\u6211\u8981\u91ca\u653e\u7684\u662f\u6574\u4e2a\u6570\u7ec4\n    // \u56e0\u4e3a\u8fd9\u4e2a\u6570\u7ec4\u7684\u5730\u5740\u5176\u5b9e\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740, \u5982\u679c\u4e0d\u544a\u8bc9\u7684\u8bdd, \u90a3\u4e48\u53ea\u4f1a\u91ca\u653e\u7b2c\u4e00\u4e2a\u5143\u7d20\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f:</p> <ol> <li>arr\u65e2\u80fd\u5145\u5f53\u5730\u5740, \u4e5f\u80fd\u5145\u5f53\u6570\u7ec4\u672c\u8eab</li> <li>delete\u91ca\u653e\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u52a0\u4e2d\u62ec\u53f7, \u544a\u8bc9\u7f16\u8bd1\u5668\u91ca\u653e\u7684\u662f\u6574\u4e2a\u6570\u7ec4</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_70","title":"\u5f15\u7528","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_71","title":"\u5f15\u7528\u7684\u57fa\u672c\u4f7f\u7528","text":"<p>\u4f5c\u7528: \u7ed9\u53d8\u91cf\u8d77\u522b\u540d, \u8fd9\u6837\u7684\u8bdd, \u64cd\u7eb5\u4e00\u5757\u5185\u5b58\u7684\u65b9\u5f0f\u5c31\u4f1a\u591a\u4e00\u79cd(\u901a\u8fc7\u64cd\u4f5c\u8fd9\u4e2a\u65b0\u540d\u5b57) \u8bed\u6cd5: <code>\u6570\u636e\u7c7b\u578b &amp;\u522b\u540d = \u539f\u540d</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_72","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u5f15\u7528\u5fc5\u987b\u521d\u59cb\u5316</li> <li>\u5f15\u7528\u5728\u521d\u59cb\u5316\u540e, \u4e0d\u53ef\u4ee5\u6539\u53d8</li> </ol> <pre><code>int a = 1;\nint c = 11;\nint &amp;b; // \u975e\u6cd5! \u5fc5\u987b\u76f4\u63a5\u544a\u8bc9\u662f\u8c01\u7684\u522b\u540d, i.e., \u5fc5\u987b\u76f4\u63a5\u521d\u59cb\u5316\nint &amp;b = a;\nint &amp;b = c; // \u975e\u6cd5! \u5df2\u7ecf\u8bf4\u660e\u662fa\u7684\u522b\u540d\u4e86, \u5c31\u4e0d\u80fd\u518d\u8bf4\u662fc\u7684\u522b\u540d\u4e86\n\nint &amp;b = a;\nb = c; // \u5408\u6cd5! \u8fd9\u4e00\u6b65\u662f\u628ac\u7684\u503c\u4ed8\u7ed9\u4e86b(\u4e5f\u5c31\u662fa), \u590d\u5236\u64cd\u4f5c\u662f\u53ef\u4ee5\u7684, \u5e76\u4e0d\u662f\u66f4\u6539\u5f15\u7528\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_73","title":"\u5f15\u7528\u505a\u51fd\u6570\u53c2\u6570","text":"<p>\u4f5c\u7528: \u51fd\u6570\u4f20\u53c2\u7684\u65f6\u5019, \u53ef\u4ee5\u5229\u7528\u5f15\u7528\u7684\u6280\u672f\u8ba9\u5f62\u53c2\u4fee\u6539\u5b9e\u53c2</p> <p>\u4f18\u70b9: \u53ef\u4ee5\u7b80\u5316\u6307\u9488\u4fee\u6539\u5b9e\u53c2</p> <p>\u4e00\u822c\u6765\u8bf4, \u51fd\u6570\u4f20\u53c2\u6709\u503c\u4f20\u9012\u548c\u5730\u5740\u4f20\u9012, \u4f46\u662f\u503c\u4f20\u9012\u662f\u4e0d\u80fd\u4fee\u6539\u5b9e\u53c2\u7684; \u4ee5\u524d\u4e3a\u4e86\u4fee\u6539\u5b9e\u53c2, \u6211\u4eec\u4f7f\u7528\u4e86\u5730\u5740\u4f20\u9012, \u975e\u5e38\u7684\u9ebb\u70e6, \u4f46\u662f\u5982\u679c\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\u7684\u8bdd, \u8fd9\u4f1a\u7b80\u5355\u5f88\u591a</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid swap(int a, int b)\n{\n    int temp = a;\n    a = b;\n    b = temp;\n    return;\n} // \u8fd9\u4e2a\u51fd\u6570\u5e76\u4e0d\u80fd\u771f\u6b63\u4ea4\u6362\u5b9e\u53c2\nvoid swap_address(int*a, int*b) // \u5730\u5740\u4f20\u53c2\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n    return;\n}\nvoid swap_reference(int &amp;a, int &amp;b) // \u7ed9\u4f20\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u8d77\u522b\u540d\n{\n    int temp = a;\n    a = b;\n    b = temp;\n    return;\n}\nint main()\n{\n    int a = 10;\n    int b = 20;\n    swap_address(&amp;a, &amp;b); // \u6ce8\u610f: \u53ef\u4ee5\u539f\u540d\"\u7b49\u4e8e\"\u522b\u540d\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl; // 20 10\n    swap_reference(a,b);\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl; // 10 20\n    return 0;\n}\n</code></pre> <p>\u5b9e\u8d28: \u5730\u5740\u4f20\u9012\u548c\u5f15\u7528\u4f20\u9012\u5b9e\u8d28\u4e0a\u90fd\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f4\u63a5\u64cd\u63a7\u5230\u5185\u5b58\u6570\u636e\u7684\u65b9\u5f0f</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_74","title":"\u5f15\u7528\u505a\u51fd\u6570\u8fd4\u56de\u503c","text":"<p>\u4f5c\u7528: \u5f15\u7528\u662f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5b58\u5728\u7684</p> <p>\u6ce8\u610f: \u4e0d\u8981\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u5f15\u7528</p> <p>\u7528\u6cd5: \u51fd\u6570\u8c03\u7528\u4f5c\u4e3a\u5de6\u503c</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint&amp; test_1() // \u8fd9\u4e2a\u8bed\u6cd5: \u4ee5\u5f15\u7528\u7684\u65b9\u5f0f\u8fd4\u56de\u503c\n{\n    int a = 10; // \u5b58\u653e\u5728\u6808\u533a\n    return a; // IDE\u76f4\u63a5\u8b66\u544a\n}\nint&amp; test_2()\n{\n    static int a = 18; // \u521b\u5efa\u4e00\u4e2a\u9759\u6001\u53d8\u91cf, \u8fd9\u5c06\u4f1a\u653e\u5728\u5168\u5c40\u533a\n    return a;\n}\nint main()\n{\n    int %ref = test_1();\n    cout &lt;&lt; ref &lt;&lt; endl; // \u5982\u679cIDE\u4e0d\u8b66\u544a, \u8fd9\u4e00\u53e5\u8bdd\u8fd8\u53ef\u80fd\u8fd4\u56de\u6b63\u5e38\u768410\n    cout &lt;&lt; ref &lt;&lt; endl; // \u76f4\u63a5\u4e71\u7801, \u6ca1\u6709\u610f\u4e49\n    int &amp;refer = test_2();\n    cout &lt;&lt; refer &lt;&lt; endl; //\u8fd9\u53e5\u5c06\u4f1a\u6b63\u5e38\u8f93\u51fa18, \u56e0\u4e3astatic\u610f\u5473\u7740\u9759\u6001\u53d8\u91cf, \u5c06\u4f1a\u653e\u5728\u5168\u5c40\u533a\n    cout &lt;&lt; a &lt;&lt; endl; // \u8fd9\u53e5\u8bdd\u975e\u6cd5, \u6211\u4eec\u5728main\u91cc\u9762\u4e0d\u77e5\u9053\u51fd\u6570\u91cc\u9762\u7684\u9759\u6001\u53d8\u91cf\u662f\u4ec0\u4e48, \u53ea\u77e5\u9053\u5b83\u6709\u4e00\u4e2a\u522b\u540d\n    test_2() = 1000; // \u51fd\u6570\u8fd4\u56de\u7684\u662f\u5f15\u7528, \u56e0\u6b64\u5de6\u5f0f\u4e5f\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u64cd\u63a7a\u6240\u5bf9\u5e94\u5185\u5b58\u6570\u636e\u7684\u65b9\u5f0f\n    cout &lt;&lt; refer &lt;&lt; endl; // \u8fd9\u91cc\u5c06\u4f1a\u8f93\u51fa1000, \u56e0\u4e3aa\u6240\u5bf9\u5e94\u7684\u5185\u5b58\u6570\u636e\u901a\u8fc7test_2()\u6539\u53d8\u4e86\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_75","title":"\u5f15\u7528\u7684\u5b9e\u8d28:","text":"<p>\u5f15\u7528\u7684\u672c\u8d28\u5728C++\u5185\u90e8\u5b9e\u73b0\u662f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf, \u610f\u5473\u7740: \u6307\u5411\u53ea\u80fd\u6709\u4e00\u4e2a, \u4f46\u662f\u53ef\u4ee5\u6539\u53d8\u5185\u5b58\u6570\u636e</p> <p>\u7ed3\u8bba: C ++\u63a8\u8350\u5f15\u7528\u6280\u672f, \u56e0\u4e3a\u8bed\u6cd5\u7b80\u5355, \u5f15\u7528\u672c\u8d28\u662f\u6307\u9488\u5e38\u91cf, \u4f46\u662f\u6240\u6709\u7684\u6307\u9488\u64cd\u4f5c\u7f16\u8bd1\u90fd\u662f\u7f16\u8bd1\u5668\u5e2e\u6211\u4eec\u505a\u4e86</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_76","title":"\u5e38\u91cf\u5f15\u7528","text":"<p>\u4f5c\u7528: \u5e38\u91cf\u5f15\u7528\u4e3b\u8981\u4fee\u9970\u5f62\u53c2, \u9632\u6b62\u8bef\u64cd\u4f5c</p> <p>\u5728\u51fd\u6570\u5f62\u53c2\u5217\u8868\u4e2d, \u53ef\u4ee5\u52a0\u4e0aconst\u4fee\u9970\u5f62\u53c2, \u9632\u6b62\u5f62\u53c2\u4fee\u6539\u5b9e\u53c2</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid test(const int &amp; a)\n{\n    a += 10; // \u7acb\u9a6c\u62a5\u9519\n    cout &lt;&lt; a &lt;&lt; endl;\n}\nint main()\n{\n    int a = 10;\n    const int &amp; ref = a;\n    ref = 114514; //error: assignment of read-only reference 'ref'\n    return 0;\n}\n</code></pre> <p>\u5b9e\u8d28: \u8fd9\u4e2a<code>const int &amp; ref</code> \u76f8\u5f53\u4e8e\u662f\u5e38\u91cf\u6307\u9488\u5e38\u91cf, \u6307\u5411\u548c\u5bf9\u5e94\u7684\u503c\u662f\u4e0d\u53d8\u7684(\u4e0d\u53ef\u4ee5\u901a\u8fc7\u5b83\u4fee\u6539\u503c)</p> <p>\u4e00\u822c\u5730: \u53ef\u4ee5\u5427\u5f15\u7528\u7ed1\u5b9a\u5230const\u5bf9\u8c61\u4e0a, \u6211\u4eec\u79f0\u4e4b\u4e3a\u5bf9\u5e38\u91cf\u7684\u5f15\u7528. \u4e0e\u666e\u901a\u5f15\u7528\u4e0d\u540c\u7684\u662f, \u5bf9\u5e38\u91cf\u7684\u5f15\u7528\u4e0d\u80fd\u88ab\u7528\u4f5c\u4fee\u6539\u5b83\u6240\u7ed1\u5b9a\u7684\u5bf9\u8c61. </p> <p>\u540c\u65f6\u6ce8\u610f: \u5f15\u7528\u7684\u7c7b\u578b\u5fc5\u987b\u4e0e\u5176\u5f15\u7528\u7684\u5bf9\u8c61\u7c7b\u578b\u4e00\u81f4! \u4f46\u662f\u6709\u4e24\u4e2a\u4f8b\u5916: \u5176\u4e2d\u4e00\u4e2a\u5c31\u662f\u521d\u59cb\u5316\u5e38\u91cf\u5f15\u7528\u65f6\u5141\u8bb8\u7528\u4efb\u610f\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u521d\u59cb\u503c, \u53ea\u8981\u8868\u8fbe\u5f0f\u7ed3\u679c\u80fd\u8f6c\u6362\u6210\u5f15\u7528\u7684\u7c7b\u578b:</p> <pre><code>int i = 42;\nconst int &amp;r1 = i; // \u6b63\u786e\nconst int &amp;r2 = 42; // \u6b63\u786e, r2\u662f\u4e00\u4e2a\u5e38\u91cf\u5f15\u7528\nconst int &amp;r3 = r1*2; // \u6b63\u786e, r3\u662f\u4e00\u4e2a\u5e38\u91cf\u5f15\u7528\nint &amp;r4 = r1*2; // \u9519\u8bef, \u56e0\u4e3ar4\u662f\u4e00\u4e2a\u666e\u901a\u7684\u975e\u5e38\u91cf\u5f15\u7528\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837? \u56e0\u4e3a\u53ea\u6709const\u5f15\u7528\u4f1a\u628a\u53f3\u8fb9\u7684\u5f0f\u5b50\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u91cf\u5bf9\u8c61, \u7136\u540e\u5f15\u7528\u518d\u7ed1\u5b9a\u8fd9\u5bf9\u8c61.</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_77","title":"\u51fd\u6570\u9ad8\u7ea7","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_78","title":"\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570","text":"<p>\u5728C++\u4e2d, \u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\u4e2d\u7684\u5f62\u53c2\u662f\u53ef\u4ee5\u6709\u9ed8\u8ba4\u503c\u7684</p> <p><code>\u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d (\u53c2\u6570 = \u9ed8\u8ba4\u503c){}</code> \u8fd9\u4e00\u70b9\u548cpython\u5341\u5206\u76f8\u4f3c</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nint add(int a = 0, int b = 5, int c = 0)\n{\n    return a+b+c;\n}\nint func(int a = 0, int b = 0);\nint main()\n{\n    cout &lt;&lt; add(1,2) &lt;&lt;endl; // \u6b63\u5e38\u8f93\u51fa3\n    cout &lt;&lt; add(3) &lt;&lt; endl; // \u6b63\u5e38\u8f93\u51fa8\n    return 0;\n}\nint func(int a = 0, int b = 0) // \u6ca1\u9519, \u5373\u4f7f\u662f\u8fd9\u6837, \u7f16\u8bd1\u5668\u76f4\u63a5\u62a5\u9519, \u56e0\u4e3a\u6b67\u4e49\n{\n    return a + b;\n}\n</code></pre> <p>\u6ce8\u610f\u4e8b\u9879: </p> <ol> <li>\u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\u5df2\u7ecf\u6709\u4e86\u9ed8\u8ba4\u53c2\u6570, \u90a3\u4e48\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5f80\u540e, \u4ece\u5de6\u5230\u53f3\u90fd\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c, \u4e0d\u5199\u76f4\u63a5\u62a5\u9519</li> <li>\u5982\u679c\u51fd\u6570\u58f0\u660e\u6709\u4e86\u9ed8\u8ba4\u53c2\u6570, \u90a3\u4e48\u51fd\u6570\u5b9e\u73b0(\u5b9a\u4e49)\u5c31\u4e0d\u80fd\u6709\u9ed8\u8ba4\u53c2\u6570\u4e86, i.e, \u58f0\u660e\u548c\u5b9e\u73b0\u53ea\u80fd\u6709\u4e00\u4e2a\u9ed8\u8ba4\u53c2\u6570</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_79","title":"\u51fd\u6570\u5360\u4f4d\u53c2\u6570","text":"<p>C++\u4e2d\u7ed9\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\u91cc\u9762\u53ef\u4ee5\u6709\u5360\u4f4d\u53c2\u6570, \u7528\u6765\u505a\u5360\u4f4d, \u8c03\u7528\u51fd\u6570\u65f6\u5fc5\u987b\u586b\u8865\u8be5\u4f4d\u7f6e (\u8fd9\u4e00\u70b9\u8981\u5341\u5206\u6ce8\u610f!!)</p> <p>\u8bed\u6cd5:   <code>\u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d (\u6570\u636e\u7c7b\u578b){}</code></p> <p>\u5728\u73b0\u9636\u6bb5\u51fd\u6570\u7684\u5360\u4f4d\u51fd\u6570\u5b58\u5728\u610f\u4e49\u4e0d\u5927, \u4f46\u662f\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u4f1a\u7528\u5230\u8be5\u6280\u672f</p> <p>\u5f53\u7136\u503c\u5f97\u4e00\u63d0\u7684\u662f, \u5360\u4f4d\u53c2\u6570\u8fd8\u53ef\u4ee5\u540c\u65f6\u662f\u9ed8\u8ba4\u53c2\u6570, \u90a3\u4e48\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b, \u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u96c0\u6c0f\u4e0d\u7528\u518d\u8865\u4e0a\u4f4d\u7f6e</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_80","title":"\u51fd\u6570\u91cd\u8f7d","text":"<p>\u4f5c\u7528: \u51fd\u6570\u540d\u53ef\u4ee5\u76f8\u540c, \u63d0\u9ad8\u590d\u7528\u6027, \u8fd9\u4e00\u70b9\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u5341\u5206\u91cd\u8981</p> <p>\u51fd\u6570\u91cd\u8f7d\u6ee1\u8db3\u6761\u4ef6:</p> <ol> <li>\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u4e0b</li> <li>\u51fd\u6570\u540d\u79f0\u76f8\u540c</li> <li>\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u4e0d\u540c, \u6216\u8005\u662f\u4e2a\u6570\u4e0d\u540c, \u540e\u8005\u662f\u987a\u5e8f\u4e0d\u540c</li> </ol> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid func()\n{\n    cout &lt;&lt; \"func\u7684\u8c03\u7528\" &lt;&lt; endl;\n}\nvoid func(int a)\n{\n    cout &lt;&lt; \"func(int a)\u7684\u8c03\u7528\" &lt;&lt; endl;\n}\nint main()\n{\n    func(); // func\u7684\u8c03\u7528\n    func(1); // func(int a)\u7684\u8c03\u7528\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\u4e8b\u9879:</p> <ol> <li>\u5f15\u7528\u4f5c\u4e3a\u91cd\u8f7d\u6761\u4ef6</li> <li>\u51fd\u6570\u91cd\u8f7d\u78b0\u5230\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570</li> <li>\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u91cd\u8f7d\u7684\u6761\u4ef6(\u53ea\u80fd\u5728\u53c2\u6570\u4e0a\u9762\u6709\u4e0d\u540c\u624d\u6709\u6548)</li> </ol> <p>\u5173\u4e8e\u7b2c\u4e00\u70b9</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid func(int &amp;a)\n{\n    cout &lt;&lt; \"func(int &amp;a)\u7684\u8c03\u7528\" &lt;&lt; endl;\n}\nvoid func(const int &amp;a)\n{\n    cout &lt;&lt; \"func(const int &amp;a)\u7684\u8c03\u7528\" &lt;&lt; endl;\n}\nint main()\n{\n    int a = 2;\n    func(a); // func(int &amp;a)\u7684\u8c03\u7528, why?\n    func(2); // func(const int &amp;a)\u7684\u8c03\u7528, why?\n    return 0;\n}\n</code></pre> <p>\u4e24\u4e2awhy: \u7b2c\u4e00\u4e2awhy: \u56e0\u4e3aa\u662f\u5c40\u90e8\u53d8\u91cf, \u5b58\u653e\u5728\u6808\u533a, \u56e0\u6b64int &amp;a = a\u5408\u6cd5</p> <p>\u4f46\u662fconst int &amp; a = a, \u76f8\u5f53\u4e8e\u53d8\u6210\u4e86\u4e00\u4e2a\u53ea\u8bfb\u72b6\u6001, \u800c\u53d8\u91cfa\u5e94\u8be5\u662f\u53ef\u4ee5\u6539\u53d8\u7684, \u56e0\u6b64\u8d70\u4e0a\u9762\u7684func\u66f4\u597d(\u5176\u5b9e\u8fd9\u4e2a\u8bed\u6cd5\u5408\u6cd5)</p> <p>\u7b2c\u4e8c\u4e2awhy: int &amp;a = 10; \u660e\u663e\u662f\u4e0d\u5408\u6cd5\u7684, \u56e0\u4e3a\u6307\u5411\u7684\u5fc5\u987b\u662f\u5408\u6cd5\u7684\u7a7a\u95f4, 10\u662f\u6570\u636e\u672c\u8eab(\u6216\u8005\u8bf4, \u5b83\u662f\u5e38\u91cf, \u50a8\u5b58\u5728\u5168\u5c40\u533a)</p> <p>\u4f46\u662fconst int &amp;a = 10, \u7f16\u8bd1\u5668\u5185\u90e8\u5b9e\u8d28\u662f: <code>temp = 10; const int &amp;a = temp</code>(\u4eba\u4e3a\u642d\u5efa\u4e86\u4e00\u4e2a\u5408\u6cd5\u7a7a\u95f4)</p> <p>\u5173\u4e8e\u8fd9\u4e00\u70b9, \u53ef\u4ee5\u89c1\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50: </p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid print(const int &amp; a)\n{\n    cout &lt;&lt; a &lt;&lt; endl;\n}\nint main()\n{\n    print(10); // \u5408\u6cd5, \u8f93\u51fa10\n    return 0; // \u5f53\u7136,\u5982\u679cint a = 10;  print(a); \u4e5f\u5b8c\u5168\u6ca1\u6709\u95ee\u9898, \u5c31\u662ftemp\u4e0ea\u7a7a\u95f4\u6302\u6263\n}\n</code></pre> <p>\u5173\u4e8e\u70b92</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid func(int a)\n{\n    return;\n}\nvoid func(int a, int b = 0)\n{\n    return;\n}\nint main()\n{\n    func(12); // \u76f4\u63a5\u62a5\u9519!! \u56e0\u4e3a\u4e8c\u4e49\u6027!! \u53ea\u80fd\u5c3d\u91cf\u907f\u514d\u8fd9\u79cd\u60c5\u51b5(\u9047\u5230\u91cd\u8f7d, \u5c3d\u91cf\u522b\u7528\u9ed8\u8ba4\u53c2\u6570\u5bfc\u81f4\u4e8c\u4e49\u6027)\n}\n</code></pre> <p>## \u7c7b\u548c\u5bf9\u8c61</p> <p>C++\u9762\u5bf9\u5bf9\u8c61\u7684\u4e09\u5927\u7279\u6027: \u5c01\u88c5 \u7ee7\u627f \u591a\u6001</p> <p>C++\u8ba4\u4e3a: \u4e07\u4e8b\u4e07\u7269\u7686\u4e3a\u5bf9\u8c61, \u5bf9\u8c61\u4e0a\u90fd\u6709\u5176\u5c5e\u6027\u548c\u884c\u4e3a</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_81","title":"\u5c01\u88c5\u7684\u610f\u4e49","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_82","title":"\u5c01\u88c5\u5927\u81f4\u60c5\u51b5","text":"<p>\u5c01\u88c5\u662f\u4e09\u5927\u7279\u6027\u4e4b\u4e00, \u610f\u4e49\u5728\u4e8e:</p> <ol> <li>\u5c06\u5176\u5c5e\u6027\u548c\u884c\u4e3a\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53, \u8868\u73b0\u751f\u6d3b\u4e2d\u7684\u4e8b\u7269</li> <li>\u5c06\u5c5e\u6027\u548c\u884c\u4e3a\u52a0\u4ee5\u6743\u9650\u63a7\u5236</li> </ol> <p>\u610f\u4e49\u4e00: \u5c5e\u6027\u548c\u884c\u4e3a\u5199\u5728\u4e00\u8d77, \u8868\u73b0\u884c\u4e3a:  <code>class \u7c7b\u540d{ \u8bbf\u95ee\u6743\u9650: \u5c5e\u6027 / \u884c\u4e3a};</code></p> <p>\u5b9e\u4f8b: \u8bbe\u8ba1\u4e00\u4e2a\u5706\u7c7b, \u5e76\u4e14\u5706\u7684\u5468\u957f</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nconst double pi = 3.14; // \u5706\u5468\u7387, const\u4fee\u9970\u5e38\u91cf\nclass Circle\n{\npublic: // \u516c\u5171\u6743\u9650\n    int m_r; // \u534a\u5f84\n    double calculate_zc()\n    {\n        return 2 * pi * m_r;\n    } // \u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u8fd9\u4e2a\u7c7b\u7684\u4e00\u4e2a\u884c\u4e3a\n};\nint main()\n{\n    Circle c1; // \u901a\u8fc7\u5706\u7c7b, \u521b\u5efa\u5177\u4f53\u7684\u5706, \u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5316\n    c1.m_r = 10;\n    cout &lt;&lt; \"The zc of c1 is: \" &lt;&lt; c1.calculate_zc() &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass student\n{\npublic:\n    string m_name;\n    int m_id;\n    void tell_name()\n    {\n        cout &lt;&lt; \"The name of the student is: \" &lt;&lt; m_name &lt;&lt; endl;\n    }\n    void tell_id()\n    {\n        cout &lt;&lt; \"The id of the student is: \" &lt;&lt; m_id &lt;&lt; endl;\n    }\n};\nint main()\n{\n    student stu;\n    stu.m_name = \"Van\";\n    stu.m_id = 114514;\n    stu.tell_name();\n    stu.tell_id();\n    return 0;\n}\n</code></pre> <p>\u5c01\u88c5\u610f\u4e49\u4e8c: \u7c7b\u5728\u8bbe\u8ba1\u65f6, \u53ef\u4ee5\u628a\u5c5e\u6027\u548c\u884c\u4e3a\u653e\u5728\u4e0d\u540c\u7684\u6743\u9650\u4e0b, \u52a0\u4ee5\u63a7\u5236</p> <p>\u6709\u4e09\u79cd\u6743\u9650:</p> <p>public  \u516c\u5171\u6743\u9650    \u7c7b\u5185\u548c\u7c7b\u5916\u53ef\u4ee5\u8bbf\u95ee</p> <p>protected     \u4fdd\u62a4\u6743\u9650     \u7c7b\u5185\u53ef\u4ee5\u8bbf\u95ee, \u7c7b\u5916\u4e0d\u53ef\u4ee5\u8bbf\u95ee  (\u513f\u5b50\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u7236\u4eb2\u4e2d\u7684\u4fdd\u62a4\u5185\u5bb9)</p> <p>private   \u79c1\u6709\u6743\u9650      \u7c7b\u5185\u53ef\u4ee5\u8bbf\u95ee, \u7c7b\u5916\u4e0d\u53ef\u4ee5\u8bbf\u95ee  (\u540e\u4e24\u8005\u7684\u533a\u522b\u5728\u7ee7\u627f\u4e2d\u53ef\u4ee5\u4f53\u73b0)  (\u513f\u5b50\u65e0\u6cd5\u8bbf\u95ee\u7236\u4eb2\u4e2d\u7684\u79c1\u6709\u5185\u5bb9)</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    string m_name;\n    void func()\n    {\n        m_Name = \"Van\";\n        m_car = \"toyota\";\n        m_password = 114514;\n    }\nprotected:\n    string m_car;\nprivate:\n    int m_password;\n};\nint main()\n{\n    Person Van;\n    Van.func();\n    cout &lt;&lt; Van.m_car &lt;&lt; endl; // \u65e0\u6cd5\u8bbf\u95ee\n    cout &lt;&lt; Van.m_password &lt;&lt; endl; // \u65e0\u6cd5\u8bbf\u95ee\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#struct-class","title":"struct \u548c class\u7684\u533a\u522b","text":"<p>\u5728C++\u4e2dstruct(\u7ed3\u6784\u4f53)\u548cclass\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f: \u9ed8\u8ba4\u8bbf\u95ee\u6743\u9650\u4e0d\u540c</p> <p>struct \u9ed8\u8ba4\u6743\u9650\u4e3a\u516c\u5171, \u4f46\u662fclass\u9ed8\u8ba4\u6743\u9650\u4e3a\u79c1\u6709</p> <p>\u5728struct\u7ed3\u6784\u4f53\u7684\u5b66\u4e60\u4e2d, \u7ed3\u6784\u4f53\u7684\u4ec0\u4e48\u4e1c\u897f\u6211\u4eec\u90fd\u80fd\u9ed8\u8ba4get\u5230, \u4f46\u662fclass\u5374\u4e0d\u662f\u8fd9\u6837</p> <p>\u5f53\u7136,  struct\u91cc\u9762\u4e5f\u53ef\u4ee5\u786c\u6027\u5b9a\u4e49private \u6216 protected\u7684\u5185\u5bb9, \u90a3\u8fd9\u6837\u4e00\u6765, struct \u548c class\u771f\u7684\u6ca1\u4ec0\u4e48\u533a\u522b\u4e86</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_83","title":"\u6210\u5458\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u79c1\u6709","text":"<p>\u4f18\u70b91: \u5c06\u6210\u5458\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u79c1\u6709, \u53ef\u4ee5\u81ea\u5df1\u63a7\u5236\u8bfb\u5199\u6743\u9650</p> <p>\u4f18\u70b92: \u5bf9\u4e8e\u8bfb\u5199\u7a0b\u5e8f, \u6211\u4eec\u53ef\u4ee5\u76d1\u6d4b\u6570\u636e\u7684\u6709\u6548\u6027</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\n// \u6211\u4eec\u5e0c\u671b\u540d\u5b57\u53ef\u8bfb\u53ef\u5199, \u5e74\u9f84\u53ea\u8bfb, \u5076\u50cf\u53ea\u5199\nclass Person\n{\npublic:\n    void setname(string name)\n    {\n        m_name = name; // \u6ce8\u610f, \u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u6743\u9650\u7684\u5c5e\u6027\u548c\u884c\u4e3a\n    }\n    string tellname()\n    {\n        return m_name;\n    }\n    int tellage()\n    {\n        return m_age;\n    }\n    void writeidol(string name)\n    {\n        m_idol = name;\n    }\n    void setheight() // num\u5fc5\u987b\u662f0-200cm\u4e4b\u95f4\n    {\n        int temp;\n        while (true)\n        {\n            cout &lt;&lt; \"Please input his height: \" &lt;&lt; endl;\n            cin &gt;&gt; temp;\n            if (temp &gt; 0 &amp;&amp; temp &lt; 200)\n            {\n                m_height = temp;\n                break;\n            }\n            else\n            {\n                cout &lt;&lt; \"The height is invalid. Please input again!\" &lt;&lt; endl;\n            }\n        }\n    } // \u8fd9\u91cc\u4f53\u73b0\u4e86\u7b2c\u4e8c\u4e2a\u4f18\u70b9\n    int tellheight()\n    {\n        return m_height;\n    }\nprivate:   \n    string m_name; // \u76f4\u63a5\u8bbf\u95ee\u4e0d\u884c, \u5fc5\u987b\u901a\u8fc7\u516c\u5171\u7684\u884c\u4e3a\u51fd\u6570tellname()\n    int m_age = 18; // \u53ea\u8bfb, \u4e0d\u80fd\u5199\u5165, \u53ea\u80fd\u901a\u8fc7\u884c\u4e3a\u77e5\u9053\u5e74\u9f84\n    string m_idol;\n    int m_height;\n};\nint main()\n{\n    Person p;\n    p.setname(\"Van\");\n    cout &lt;&lt; \"The name of this person is: \" &lt;&lt; p.tellname() &lt;&lt; endl;\n    cout &lt;&lt; \"The age of this person is: \" &lt;&lt; p.tellage() &lt;&lt; endl;\n    p.writeidol(\"Billy Harrington\");\n    // \u4ee5\u4e0a\u5145\u5206\u4f53\u73b0\u4e86\u7b2c\u4e00\u6761\u4f18\u70b9\n    p.setheight();\n    cout &lt;&lt; \"The height of this person is: \" &lt;&lt; p.tellheight()&lt;&lt; endl;\n    return 0;\n}\n\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_84","title":"\u4e24\u4e2a\u5b9e\u4f8b\u5316\u76f8\u6302\u94a9","text":"<p>\u6bd4\u8f83\u4e24\u4e2a\u6b63\u65b9\u4f53\u662f\u5426\u76f8\u540c</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Cube\n{\npublic:\n    void setlength(int length)\n    {\n        m_length = length;\n    }\n    int getlength()\n    {\n        return m_length;\n    }\n    bool is_same(Cube &amp;c1 , Cube &amp;c2)\n    {\n        if (c1.getlength() == c2.getlength())\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\nprivate:\n    int m_length; \n};\nint main()\n{\n    Cube c1;\n    Cube c2;\n    Cube c3;\n    c1.setlength(4);\n    c2.setlength(5);\n    c3.setlength(5);\n    cout &lt;&lt; c1.is_same(c1, c2) &lt;&lt; endl; // 0\n    cout &lt;&lt; c2.is_same(c2, c3) &lt;&lt; endl; // 1\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_85","title":"\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u548c\u6e05\u7406","text":"<p>C++\u4e2d\u7684\u9762\u5411\u5bf9\u8c61\u6765\u6e90\u4e8e\u751f\u6d3b,  \u6bcf\u4e2a\u5bf9\u8c61\u4e5f\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u521d\u59cb\u8bbe\u7f6e\u4ee5\u53ca\u5bf9\u8c61\u9500\u6bc1\u524d\u7684\u6e05\u7406\u6570\u636e\u7684\u8bbe\u7f6e</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_86","title":"\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570","text":"<p>C++\u5229\u7528\u4e86\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898, \u8fd9\u4e24\u4e2a\u51fd\u6570\u5c06\u4f1a\u88ab\u7f16\u8bd1\u5668\u81ea\u52a8\u8c03\u7528, \u5b8c\u6210\u5bf9\u8c61\u521d\u59cb\u5316\u548c\u6e05\u7406\u5de5\u4f5c</p> <p>\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u548c\u6e05\u7406\u5de5\u4f5c\u662f\u7f16\u8bd1\u5668\u5f3a\u5236\u6211\u4eec\u8981\u5b9e\u73b0\u7684\u4e8b\u60c5, \u5982\u679c\u6211\u4eec\u4e0d\u63d0\u4f9b\u6784\u9020\u548c\u6790\u6784, \u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u63d0\u4f9b</p> <p>\u4f46\u662f\u7f16\u8bd1\u5668\u63d0\u4f9b\u7684\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u662f\u7a7a\u5b9e\u73b0</p> <ul> <li>\u6784\u9020\u51fd\u6570: \u4e3b\u8981\u4f5c\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u65f6\u4e3a\u5bf9\u8c61\u7684\u6210\u5458\u5c5e\u6027\u8d4b\u503c, \u6784\u9020\u51fd\u6570\u4f60\u4f1a\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u8c03\u7528, \u65e0\u9700\u624b\u52a8\u8c03\u7528</li> <li>\u6790\u6784\u51fd\u6570: \u4e3b\u8981\u4f5c\u7528\u5728\u4e8e\u5bf9\u8c61\u9500\u6bc1\u524d\u7cfb\u7edf\u81ea\u52a8\u8c03\u7528, \u6267\u884c\u4e00\u4e9b\u6e05\u7406\u5de5\u4f5c</li> </ul> <p>\u6784\u9020\u51fd\u6570\u8bed\u6cd5:  <code>\u7c7b\u540d(){}</code></p> <ol> <li>\u6784\u9020\u51fd\u6570, \u6ca1\u6709\u8fd4\u56de\u503c\u4e5f\u4e0d\u5199void</li> <li>\u51fd\u6570\u540d\u79f0\u548c\u7c7b\u540d\u76f8\u540c</li> <li>\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u6709\u53c2\u6570, \u56e0\u6b64\u53ef\u4ee5\u53d1\u751f\u91cd\u8f7d</li> <li>\u7a0b\u5e8f\u5728\u8c03\u7528\u5bf9\u8c61\u65f6\u4f1a\u81ea\u52a8\u8c03\u7528\u6784\u9020, \u65e0\u987b\u624b\u52a8\u8c03\u7528, \u800c\u4e14\u53ea\u4f1a\u8c03\u7528\u4e00\u6b21</li> </ol> <p>\u6790\u6784\u51fd\u6570\u8bed\u6cd5: <code>~\u7c7b\u540d (){}</code></p> <ol> <li>\u6790\u6784\u51fd\u6570, \u6ca1\u6709\u8fd4\u56de\u503c\u4e5f\u4e0d\u52a0void</li> <li>\u51fd\u6570\u540d\u79f0\u4e0e\u7c7b\u540d\u76f8\u540c, \u5728\u540d\u79f0\u524d\u52a0\u4e0a\u7b26\u53f7~</li> <li>\u6790\u6784\u51fd\u6570\u4e0d\u53ef\u4ee5\u6709\u53c2\u6570, \u56e0\u6b64\u4e0d\u53ef\u4ee5\u53d1\u751f\u91cd\u8f7d</li> <li>\u7a0b\u5e8f\u5728\u5bf9\u8c61\u9500\u6bc1\u524d\u4f1a\u81ea\u52a8\u8c03\u7528\u6790\u6784, \u65e0\u9700\u624b\u52a8\u8c03\u7528, \u800c\u4e14\u53ea\u4f1a\u8c03\u7528\u4e00\u6b21</li> </ol> <p>\u4f8b\u5b50:</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    Person()\n    {\n        cout &lt;&lt; \"I'm here!\" &lt;&lt; endl;\n    }\n    ~Person()\n    {\n        cout &lt;&lt; \"Hello! I'm here!\" &lt;&lt; endl;\n    }\n};\nint test()\n{\n    Person p;\n}\nint main()\n{\n    test();// \u540c\u65f6\u8f93\u51fa: I'm here      Hello! I'm here\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f:</p> <ol> <li>\u4e3a\u4ec0\u4e48\u6784\u9020\u548c\u6790\u6784\u51fd\u6570\u90fd\u88ab\u8c03\u7528\u4e86\u5462? \u56e0\u4e3ap\u662f\u5b58\u653e\u5728\u6808\u533a\u7684, test\u51fd\u6570\u4e00\u65e6\u8c03\u7528\u5b8c\u6bd5, \u5c31\u4f1a\u9500\u6bc1</li> <li>\u8fd9\u662f\u4e0d\u662f\u5f88\u50cfpython\u9b54\u6cd5\u65b9\u6cd5\u5462?</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_87","title":"\u6784\u9020\u51fd\u6570\u7684\u5206\u7c7b\u548c\u8c03\u7528","text":"<p>\u4e24\u79cd\u5206\u7c7b\u65b9\u5f0f: </p> <ul> <li>\u6309\u53c2\u6570\u5206\u4e3a: \u6709\u53c2\u6784\u9020\u548c\u65e0\u53c2\u6784\u9020(\u522b\u540d: \u9ed8\u8ba4\u6784\u9020\u4f7f)</li> <li>\u6309\u7c7b\u578b\u5206\u4e3a: \u666e\u901a\u6784\u9020\u548c\u62f7\u8d1d\u6784\u9020</li> </ul> <p>\u4e09\u79cd\u8c03\u7528\u65b9\u5f0f:</p> <ul> <li>\u62ec\u53f7\u6cd5   \u663e\u793a\u6cd5   \u9690\u5f0f\u8f6c\u6362\u6cd5</li> </ul> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    Person()\n    {\n        cout &lt;&lt; \"Without parameter!\" &lt;&lt;endl;\n    }\n    Person(int a)\n    {\n        cout &lt;&lt; \"With parameter!\" &lt;&lt;endl;\n        age = a;\n    }\n    Person (const Person &amp;p) // \u62f7\u8d1d\u6784\u9020, \u8fd9\u6837\u7684\u8bed\u6cd5\u610f\u5473\u7740\u8fd9\u4e2a\u5bf9\u8c61\u5c06\u4f1a\u590d\u5236\u4f20\u5165\u7684\u5bf9\u8c61\u7684\u4e00\u4e9b\u5c5e\u6027\n     // \u6ce8\u610f\u8fd9\u91cc\u4f20\u5165\u7684\u662f\u5f15\u7528, \u65b9\u4fbf\u4e0d\u5fc5\u5185\u5b58\u518d\u590d\u5236\u4e00\u4efd\n    {   \n        age = p.age;\n        cout &lt;&lt; \"Copied!\" &lt;&lt; endl; \n    }\n    ~Person()\n    {\n        cout &lt;&lt; \"I'm here again\" &lt;&lt; endl;\n    }\n    int age;\n};\nint main()\n{\n    // Person p0(); \u8fd9\u53e5\u8bdd\u867d\u7136\u4ee3\u8868\u6211\u60f3\u8c03\u7528\u65e0\u53c2/\u9ed8\u8ba4\u6784\u9020, \u4f46\u662f\u8fd9\u6837\u7684\u8bed\u6cd5\u662f\u4e0d\u5408\u6cd5\u7684!\n    // \u60f3\u8981\u65e0\u53c2/\u9ed8\u8ba4\u6784\u9020, \u4e0d\u52a0\u62ec\u53f7!!!! \u56e0\u4e3a\u8fd9\u884c\u4ee3\u7801\u4f1a\u88ab\u8bef\u8ba4\u4e3a\u662f\u51fd\u6570\u7684\u58f0\u660e(\u8fd4\u56de\u7684\u662fPerson\u7c7b\u7684\u4e00\u4e2a\u51fd\u6570)\n    Person p1(18); // \u62ec\u53f7\u6cd5\n    Person p2(p1); // \u62ec\u53f7\u6cd5\n    Person p3 = Person(22); // \u663e\u793a\u6cd5\n    Person p4 = Person(p3); // \u663e\u793a\u6cd5\n    Person p5 = 10; // \u7f16\u8bd1\u5668\u89c6\u89d2\u4e0b, \u5b83\u7b49\u4ef7\u4e8e: Person p5 = Person(10);\n    Person p6 = p5; // Person p6 = Person(p5);\n    cout &lt;&lt; p1.age &lt;&lt; endl;\n    cout &lt;&lt; p2.age &lt;&lt; endl;\n    cout &lt;&lt; p3.age &lt;&lt; endl;\n    cout &lt;&lt; p4.age &lt;&lt; endl;\n    cout &lt;&lt; p5.age &lt;&lt; endl;\n    cout &lt;&lt; p6.age &lt;&lt; endl;\n    return 0;\n} /*\nWith parameter!\nCopied!\nWith parameter!\nCopied!\nWith parameter!\nCopied!\n18\n18\n22\n22\n10\n10\nI'm here again\nI'm here again\nI'm here again\nI'm here again\nI'm here again\nI'm here again */\n</code></pre> <p>\u6ce8\u610f:</p> <ol> <li>\u60f3\u8981\u65e0\u53c2/\u9ed8\u8ba4\u6784\u9020, \u4e0d\u52a0\u62ec\u53f7!</li> <li><code>Person(22);</code>\u5355\u7eaf\u4f9d\u636e\u8fd9\u6837\u7684\u8bdd, \u4ee3\u8868\u662f\u533f\u540d\u5bf9\u8c61; <code>Person p3 = Person(22);</code>\u4ee3\u8868\u7740\u7ed9\u8fd9\u4e2a\u533f\u540d\u5bf9\u8c61\u8d77\u4e86\u4e2a\u540d\u53ebp3</li> <li>\u533f\u540d\u5bf9\u8c61\u7684\u7279\u70b9: \u5f53\u524d\u884c\u6267\u884c\u7ed3\u675f\u540e, \u7cfb\u7edf\u4f1a\u7acb\u5373\u56de\u6536\u6389\u533f\u540d\u5bf9\u8c61, \u56e0\u4e3a\u4e00\u70b9\u7528\u4e5f\u6ca1\u6709, \u4f46\u662f\u6784\u9020\u548c\u6790\u6784\u51fd\u6570\u4ecd\u7136\u4f1a\u88ab\u8c03\u7528</li> <li>\u4e0d\u8981\u5229\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316\u533f\u540d\u5bf9\u8c61,  \u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u8ba4\u4e3a: <code>Person (p3);</code>\u7b49\u4ef7\u4e8e<code>Person p3;</code>, \u53f3\u8fb9\u662f\u4e00\u4e2a\u9ed8\u8ba4\u6784\u9020, \u76f8\u5f53\u4e8e\u662f\u5bf9p3\u8fd9\u4e2a\u5bf9\u8c61\u6784\u9020(\u521d\u59cb\u5316)\u4e86\u4e24\u6b21</li> <li>\u4e00\u822c\u6765\u8bf4, \u63a8\u8350\u4f7f\u7528\u62ec\u53f7\u6cd5</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_88","title":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u8c03\u7528\u65f6\u673a","text":"<p>\u4e00\u822c\u6765\u8bf4, \u6709\u4e09\u79cd\u65f6\u673a</p> <ul> <li>\u4f7f\u7528\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u5b8c\u6bd5\u7684\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u5bf9\u8c61</li> <li>\u503c\u4f20\u9012\u7684\u65b9\u5f0f\u7ed9\u51fd\u6570\u53c2\u6570\u4f20\u503c</li> <li>\u4ee5\u503c\u65b9\u5f0f\u8fd4\u56de\u5c40\u90e8\u5bf9\u8c61</li> </ul> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    Person()\n    {\n        cout &lt;&lt; \"default\" &lt;&lt; endl;\n    }    \n    Person(int age)\n    {\n        cout &lt;&lt; \"with parameter\" &lt;&lt; endl;\n        m_age = age;\n    }\n    Person(const Person &amp;p)\n    {\n        m_age = p.m_age;\n        cout &lt;&lt; \"copy\" &lt;&lt; endl;\n    }\n    ~Person()\n    {\n        cout &lt;&lt; \"deleted!\" &lt;&lt; endl;    \n    }\n    int m_age;\n};\nvoid test1()\n{\n    Person p1(20);\n    Person p2(p1);\n}\nvoid doWork1(Person p)\n{\n    cout &lt;&lt; \"doWork1\" &lt;&lt; endl;\n}\nPerson doWork2()\n{\n    Person p1;\n    return p1;\n}\nvoid test2()\n{\n    Person p;\n    doWork1(p);\n}\nvoid test3()\n{\n    Person p = doWork2();\n}\nint main()\n{\n    test1();\n    // \u8fd9\u662f\u6240\u8ff0\u7684\u7b2c\u4e00\u79cd\u60c5\u51b5\n    // with parameter\n    // copy\n    // deleted!\n    // deleted!\n    test2();\n    // default\n    // copy\n    // doWork1\n    // deleted!\n    // deleted!\n    test3();\n    // default\n    // copy    \u4f46\u662f\u8fd9\u4e00\u884c\u548c\u4e0b\u9762\u8fd9\u4e00\u884c\u53ef\u80fd\u4e0d\u4f1a\u663e\u793a, \u56e0\u4e3a\u7f16\u8bd1\u5668\u7684\u539f\u56e0\n    // deleted!\n    // deleted!\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f: \u5728test2\u4e2d, \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0default? \u56e0\u4e3a\u503c\u4f20\u9012\u7684\u65f6\u5019, \u4e8b\u5b9e\u4e0a\u662fcopy\u4e86\u4e00\u4efd, \u56e0\u6b64\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u4e86, \u800c\u4e14\u4ece\u987a\u5e8f\u4e0a\u6765\u8bf4, \u662f\u5148\u53d1\u751f\u4e86copy, \u518d\u53d1\u751f\u4e86doWork1\u51fd\u6570\u4f53\u7684\u8fd0\u884c</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_89","title":"\u6784\u9020\u51fd\u6570\u7684\u8c03\u7528\u89c4\u5219","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b, C++\u7f16\u8bd1\u5668\u81f3\u5c11\u7ed9\u4e00\u4e2a\u7c7b\u6dfb\u52a0\u4e09\u4e2a\u51fd\u6570:</p> <ol> <li>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570(\u65e0\u53c2, \u4e14\u51fd\u6570\u4f53\u4e3a\u7a7a)</li> <li>\u9ed8\u8ba4\u6784\u6790\u51fd\u6570(\u65e0\u53c2, \u4e14\u51fd\u6570\u4f53\u4e3a\u7a7a)</li> <li>\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570, \u5bf9\u5c5e\u6027\u8fdb\u884c\u503c\u62f7\u8d1d</li> </ol> <p>\u6784\u9020\u51fd\u6570\u8c03\u7528\u89c4\u5219\u5982\u4e0b: </p> <ul> <li>\u5982\u679c\u7528\u6237\u5b9a\u4e49\u6709\u53c2\u6784\u9020\u51fd\u6570, C++\u4e0d\u4f1a\u518d\u63d0\u4f9b\u9ed8\u8ba4\u65e0\u53c2\u6784\u9020, \u4f46\u662f\u4f1a\u63d0\u4f9b\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020</li> <li>\u5982\u679c\u7528\u6237\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570, C++\u4e0d\u4f1a\u63d0\u4f9b\u5176\u4ed6\u6784\u9020\u51fd\u6570</li> </ul> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass test\n{\npublic:    \n    test(const test &amp;t)\n    {\n        cout &lt;&lt; \"copy function of test\" &lt;&lt; endl;\n    }\n};\nclass Person\n{ // \u4e0d\u63d0\u4f9b\u62f7\u8d1d\u6784\u9020\u51fd\u6570\npublic:   \n    Person(int age)\n    {\n        cout &lt;&lt; \"with parameter\" &lt;&lt; endl;\n        m_age = age;\n    }\n    ~Person()\n    {\n        cout &lt;&lt; \"deleted!\" &lt;&lt; endl;    \n    }\n    int m_age;\n};\nvoid test1()\n{\n    Person p1(18); // \u6211\u4eec\u63d0\u4f9b\u4e86\u6709\u53c2\u6784\u9020\u51fd\u6570\n    Person p(p1); // \u6ce8\u610f: Person\u7c7b\u91cc\u9762\u6ca1\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\n    cout &lt;&lt; \"The age of p is: \" &lt;&lt; p.m_age &lt;&lt; endl;\n}\nint main()\n{\n    test1();\n    // with parameter\n    // The age of p is: 18\n    // deleted!\n    // deleted!\n    Person p; // \u76f4\u63a5\u62a5\u9519: \u4e0d\u5b58\u5728\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\n    test t; // \u76f4\u63a5\u62a5\u9519, \u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\n    test t0; // \u76f4\u63a5\u62a5\u9519, \u6ca1\u6709\u6709\u53c2\u6784\u9020\u51fd\u6570\n    return 0;\n}\n</code></pre> <p>\u53ef\u89c1, \u62f7\u8d1d\u4f9d\u7136\u662f\u53ef\u4ee5\u8fdb\u884c\u7684, \u867d\u7136\u6211\u4eec\u6ca1\u6709\u63d0\u4f9b\u62f7\u8d1d\u6784\u9020\u51fd\u6570, \u4f46\u662f\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86, \u628ap1\u7684m_age\u5c5e\u6027\u4f20\u7ed9\u4e86p</p> <p>\u5982\u679c\u53ea\u5b9a\u4e49\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570, \u90a3\u4e48\u8fd9\u662f\u4e0d\u662f\u5f88\u5947\u602a\u5462? \u5947\u602a\u5c31\u5bf9\u4e86(...)</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_90","title":"\u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d","text":"<p>\u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u95ee\u9898, \u4e5f\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5751</p> <p>\u6d45\u62f7\u8d1d: \u7b80\u5355\u7684\u590d\u5236\u62f7\u8d1d\u64cd\u4f5c (\u4f8b\u5982\u5e73\u5e38\u7684\u7b49\u53f7\u8d4b\u503c)</p> <p>\u6df1\u62f7\u8d1d: \u5728\u5806\u533a\u91cd\u65b0\u7533\u8bf7\u7a7a\u95f4, \u8fdb\u884c\u62f7\u8d1d\u64cd\u4f5c</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    Person()\n    {\n        cout &lt;&lt; \"default\" &lt;&lt; endl;\n    }\n    Person(int age, int height) // \u540e\u9762\u7684\u8fd9\u4e2a\u662f\u4e00\u4e2aint, \u4e0d\u662f\u6307\u9488\n    {\n        m_age = age;\n        m_height = new int(height);\n        cout &lt;&lt; \"with parameter\" &lt;&lt; endl;\n    }\n    ~Person()\n    {\n        if (m_height != NULL) // \u5982\u679c\u8fd9\u4e2a\u6307\u9488\u662f\u6709\u6307\u5411\u7684\n        // \u6ce8\u610f, \u8fd9\u4e2a\u8bed\u6cd5\u4e0d\u662f\u5728\u5224\u65adm_height\u5bf9\u5e94\u7684\u5806\u533a\u7684\u6570\u636e\u662f\u4e0d\u662f0, \u800c\u662f\u5224\u65ad\u5b83\u6709\u6ca1\u6709\u6307\u5411\n        {\n            delete m_height; // \u5220\u9664\u5806\u533a\u7684\u6570\u636e\n            m_height = NULL; // \u6307\u9488\u7f6e\u7a7a\n        }\n        cout &lt;&lt; \"deleted!\" &lt;&lt; endl;\n    }\n    int m_age;\n    int *m_height; // \u521b\u5efa\u4e00\u4e2a\u6307\u5411\u542b\u6709\u8eab\u9ad8\u6570\u636e\u7684\u6307\u9488, m_height\u5c31\u662f\u4e00\u4e2a\u6307\u9488\n};\nvoid test01()\n{\n    Person p1(18, 160);\n    cout &lt;&lt; \"The age of p1 is: \" &lt;&lt; p1.m_age &lt;&lt; endl;\n    cout &lt;&lt; \"The height of p1 is: \" &lt;&lt; *p1.m_height &lt;&lt; endl; // \u6ce8\u610f\u89e3\u5f15\u7528\n    Person p2(p1);\n    cout &lt;&lt; \"The age of p2 is: \" &lt;&lt; p2.m_age &lt;&lt; endl;\n    cout &lt;&lt; \"The height of p2 is: \" &lt;&lt; *p2.m_height &lt;&lt; endl; // \u6ce8\u610f\u89e3\u5f15\u7528\n}\nint main()\n{\n    test01();\n    // with parameter\n    // The age of p1 is: 18\n    // The height of p1 is: 160\n    // The age of p2 is: 18\n    // The height of p2 is: 160\n    // deleted!\n    /* \u6ce8\u610f\u8fd9\u91cc, \u672c\u6765\u5e94\u8be5\u6709\u4e24\u4e2adeleted, \u4e0d\u662f\u5417, \u4f46\u662f\u4e3a\u4ec0\u4e48\u5374\u53ea\u6709\u4e00\u4e2a?\n    \u5176\u5b9e\u4e8b\u5b9e\u4e0a, \u7a0b\u5e8f\u5230\u8fd9\u91cc\u5df2\u7ecf\u5f00\u59cb\u6709\u70b9\u95ee\u9898\u4e86, \u4f46\u662f\u7531\u4e8e\u7f16\u8bd1\u5668\u7248\u672c\u6bd4\u8f83\u65b0, \u6240\u4ee5\u770b\u8d77\u6765\u8fd8\u80fd\u8dd1\n    \u5728test01()\u7ed3\u675f\u7684\u65f6\u5019, p2,p1\u4f9d\u6b21\u91ca\u653e(\u6ca1\u9519, \u5148\u8fdb\u540e\u51fa), p2\u7684m_height\u6307\u5411\u7684\u5806\u533a\u4e2d\u7684\u6570\u636e\u5220\u9664\u6389\u4e86\n    \u8f6e\u5230p1\u7684m_height\u65f6\u5019, \u5b83\u6307\u5411\u7684\u8fd8\u662f\u5806\u533a\u7684\u90a3\u4e2a\u5730\u5740, \u4f46\u662f\u90a3\u4e2a\u5730\u5740\u91cc\u9762\u65e9\u5c31\u6ca1\u6709\u5185\u5b58\u4e86\n    \u56e0\u6b64\u5c31\u53d1\u751f\u5806\u533a\u5185\u5b58\u7684\u91cd\u590d\u91ca\u653e, \u8fd9\u662f\u975e\u6cd5\u7684!!\n    \u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u6837\u7684\u95ee\u9898\u5462? \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u63d0\u4f9b\u62f7\u8d1d\u6784\u9020\u51fd\u6570, \u7f16\u8bd1\u5668\u7ed9\u7684\u9ed8\u8ba4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u662f\u6d45\u62f7\u8d1d\n    \u56e0\u6b64\u4f7f\u5f97p1p2\u5404\u81ea\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u5806\u533a\u7684\u5730\u5740\u662f\u4e00\u6837\u7684!  \n    \u6d45\u62f7\u8d1d\u7684\u95ee\u9898, \u8981\u7528\u6df1\u62f7\u8d1d\u89e3\u51b3*/\n    return 0;\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    Person()\n    {\n        cout &lt;&lt; \"default\" &lt;&lt; endl;\n    }\n    Person(int age, int height) // \u540e\u9762\u7684\u8fd9\u4e2a\u662f\u4e00\u4e2aint, \u4e0d\u662f\u6307\u9488\n    {\n        m_age = age;\n        m_height = new int(height);\n        cout &lt;&lt; \"with parameter\" &lt;&lt; endl;\n    }\n    Person (const Person &amp;p)\n    {\n        m_height = new int(*p.m_height); // \u6ce8\u610f\u89e3\u5f15\u7528\n        m_age = p.m_age;\n        cout &lt;&lt; \"deep copy! \" &lt;&lt; endl;\n    }\n    ~Person()\n    {\n        if (m_height != NULL) // \u5982\u679c\u8fd9\u4e2a\u6307\u9488\u662f\u6709\u6307\u5411\u7684\n        // \u6ce8\u610f, \u8fd9\u4e2a\u8bed\u6cd5\u4e0d\u662f\u5728\u5224\u65adm_height\u5bf9\u5e94\u7684\u5806\u533a\u7684\u6570\u636e\u662f\u4e0d\u662f0, \u800c\u662f\u5224\u65ad\u5b83\u6709\u6ca1\u6709\u6307\u5411\n        {\n            delete m_height; // \u5220\u9664\u5806\u533a\u7684\u6570\u636e\n            m_height = NULL; // \u6307\u9488\u7f6e\u7a7a, \u4e0d\u6307\u5411\u4efb\u4f55\u5730\u65b9, \u975e\u5e38\u89c4\u8303!\n        }\n        cout &lt;&lt; \"deleted!\" &lt;&lt; endl;\n    }\n    int m_age;\n    int *m_height; // \u521b\u5efa\u4e00\u4e2a\u6307\u5411\u542b\u6709\u8eab\u9ad8\u6570\u636e\u7684\u6307\u9488, m_height\u5c31\u662f\u4e00\u4e2a\u6307\u9488\n};\nvoid test01()\n{\n    Person p1(18, 160);\n    cout &lt;&lt; \"The age of p1 is: \" &lt;&lt; p1.m_age &lt;&lt; endl;\n    cout &lt;&lt; \"The height of p1 is: \" &lt;&lt; *p1.m_height &lt;&lt; endl; // \u6ce8\u610f\u89e3\u5f15\u7528\n    cout &lt;&lt; \"The address of the p1_height is: \"&lt;&lt; p1.m_height &lt;&lt;endl;\n    Person p2(p1);\n    cout &lt;&lt; \"The age of p2 is: \" &lt;&lt; p2.m_age &lt;&lt; endl;\n    cout &lt;&lt; \"The height of p2 is: \" &lt;&lt; *p2.m_height &lt;&lt; endl; // \u6ce8\u610f\u89e3\u5f15\u7528\n    cout &lt;&lt; \"The address of the p2_height is: \"&lt;&lt; p2.m_height &lt;&lt;endl;\n}\nint main()\n{\n    test01();\n/*    \nwith parameter\nThe age of p1 is: 18\nThe height of p1 is: 160\nThe address of the p1_height is: 0x792510\ndeep copy!\nThe age of p2 is: 18\nThe height of p2 is: 160\nThe address of the p2_height is: 0x792530\ndeleted!\ndeleted!   \n*/\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_91","title":"\u521d\u59cb\u5316\u5217\u8868","text":"<p>\u4f5c\u7528: C++\u63d0\u4f9b\u4e86\u521d\u59cb\u5316\u5217\u8868\u8bed\u6cd5, \u7528\u6765\u521d\u59cb\u5316\u5c5e\u6027</p> <p>\u8bed\u6cd5: <code>\u6784\u9020\u51fd\u6570(): \u5c5e\u60271 (\u503c1), \u5c5e\u60272 (\u503c2) ...{\u51fd\u6570\u4f53}</code></p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    // \u4f20\u7edf\u521d\u59cb\u5316\u64cd\u4f5c\n    Person(int a, int b, int c)\n    {\n        m_a = a;\n        m_b = b;\n        m_c = c;\n    }\n    // \u521d\u59cb\u5316\u5217\u8868\u7684\u65b9\u5f0f\u5b9e\u73b0\u521d\u59cb\u5316\n    Person():m_a(1), m_b(2), m_c(3)\n    {        \n    }\n    int m_a;\n    int m_b;\n    int m_c;\n};\nvoid test1()\n{\n    Person p(1,2,3);\n    cout &lt;&lt; p.m_a &lt;&lt; endl;\n    cout &lt;&lt; p.m_b &lt;&lt; endl;\n    cout &lt;&lt; p.m_c &lt;&lt; endl;\n}\nvoid test2()\n{\n    Person p;\n    cout &lt;&lt; p.m_a &lt;&lt; endl;\n    cout &lt;&lt; p.m_b &lt;&lt; endl;\n    cout &lt;&lt; p.m_c &lt;&lt; endl;\n}\nint main()\n{\n    test1();\n    test2();\n    return 0;\n}\n</code></pre> <p>\u4f46\u662f\u53d1\u73b0\u4e86\u5417, \u521d\u59cb\u5316\u5217\u8868\u53ea\u80fd\u628a\u56fa\u5b9a\u7684\u503c\u8d4b\u7ed9\u5b83\u4eec, \u8fd9\u662f\u6211\u4eec\u4e0d\u5e0c\u671b\u770b\u5230\u7684, \u8fd9\u4e2a\u521d\u59cb\u5316\u5217\u8868\u50cf\u662f\u65e0\u53c2\u6784\u9020\u51fd\u6570</p> <p>\u56e0\u6b64\u771f\u6b63\u65b9\u4fbf\u7684\u4f7f\u7528\u65b9\u5f0f\u89c1\u4e0b</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    // \u521d\u59cb\u5316\u5217\u8868\u7684\u65b9\u5f0f\u5b9e\u73b0\u521d\u59cb\u5316\n    Person(int a, int b, int c):m_a(a), m_b(b), m_c(c)\n    {        \n    }\n    int m_a;\n    int m_b;\n    int m_c;\n};\nvoid test1()\n{\n    Person p(1,2,3);\n    cout &lt;&lt; p.m_a &lt;&lt; endl;\n    cout &lt;&lt; p.m_b &lt;&lt; endl;\n    cout &lt;&lt; p.m_c &lt;&lt; endl;\n}\nint main()\n{\n    test1();\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e2a\u521d\u59cb\u5316\u5217\u8868\u5c31\u662f\u91c7\u7528\u4e86\u6709\u53c2\u6784\u9020\u51fd\u6570\u5f62\u5f0f, \u5c31\u65b9\u4fbf\u6211\u4eec\u7075\u6d3b\u4f20\u53c2\u4e86</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_92","title":"\u7c7b\u5bf9\u8c61\u4f5c\u4e3a\u7c7b\u6210\u5458","text":"<p>C++\u7c7b\u4e2d\u7684\u6210\u5458\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61, \u6211\u4eec\u79f0\u8be5\u6210\u5458\u4e3a\u5bf9\u8c61\u6210\u5458</p> <p>\u4f8b\u5982:</p> <pre><code>class A{}\nclass B\n{\n    A a;\n}\n</code></pre> <p>B\u7c7b\u4e2d\u6709\u5bf9\u8c61A\u4f5c\u4e3a\u6210\u5458, A\u4e3a\u5bf9\u8c61\u6210\u5458</p> <p>\u90a3\u4e48\u95ee\u9898\u6765\u4e86: \u521b\u5efaB\u7684\u65f6\u5019, A\u4e0eB\u7684\u6784\u9020\u548c\u6790\u6784\u987a\u5e8f\u662f\u8c01\u5148\u8c01\u540e? </p> <p>\u4e8b\u5b9e\u4e0a\u662f: <code>A\u6784\u9020 &gt;&gt; B\u6784\u9020 &gt;&gt; B\u6790\u6784 &gt;&gt; A\u6790\u6784</code></p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Phone{\npublic:\n    Phone(string name)\n    {\n        phone_name = name;\n        cout &lt;&lt; \"construction of Phone\" &lt;&lt; endl;\n    }  \n    ~Phone()\n    {\n        cout &lt;&lt; \"destruction of Phone\" &lt;&lt; endl;\n    }\n    string phone_name;\n};\nclass Person\n{\npublic:\n    Person(int num, string phonename): age(num), phone(phonename)\n    // \u6ce8\u610f, \u8fd9\u91cc\u4e0d\u662fphone.phone_name(phonename), \u6211\u662f\u7ed9phone\u4f20\u53c2\u4ece\u800c\u5b9e\u4f8b\u5316\n    {\n        cout &lt;&lt; \"construction of Person\" &lt;&lt; endl;\n    }\n    ~Person()\n    {\n        cout &lt;&lt; \"destruction of Person\" &lt;&lt; endl;\n    }\n    int age;\n    Phone phone;\n};\nvoid test()\n{\n    Person p(18, \"iphone\");\n}\nint main()\n{\n    test();\n// construction of Phone\n// construction of Person\n// destruction of Person\n// destruction of Phone\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e2a\u5b9e\u9a8c\u4ee3\u8868\u7740: \u5148\u662fPhone\u5b8c\u6210\u4e86\u5bf9\u8c61\u5b9e\u4f8b\u5316(\u6784\u9020), \u7136\u540ePerson\u7684\u6784\u9020\u624d\u7b97\u6b63\u5f0f\u5b8c\u6210; \u5728\u6790\u6784\u7684\u65f6\u5019, \u5148\u662fPerson\u6790\u6784, \u7136\u540ePhone\u7684\u5bf9\u8c61\u6210\u5458\u6790\u6784</p> <ol> <li>\u5f53\u5176\u4ed6\u7c7b\u5bf9\u8c61\u4f5c\u4e3a\u672c\u7c7b\u6210\u5458, \u6784\u9020\u7684\u65f6\u5019\u5148\u6784\u9020\u5bf9\u8c61\u6210\u5458, \u518d\u6784\u9020\u81ea\u8eab</li> <li>\u5f53\u5176\u4ed6\u7c7b\u5bf9\u8c61\u4f5c\u4e3a\u672c\u7c7b\u6210\u5458, \u6790\u6784\u7684\u65f6\u5019\u5148\u6790\u6784\u81ea\u8eab, \u518d\u6790\u6784\u5bf9\u8c61\u6210\u5458</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_93","title":"\u9759\u6001\u6210\u5458","text":"<p>\u9759\u6001\u6210\u5458\u5c31\u662f\u5728\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u524d\u52a0\u4e0a\u5173\u952e\u8bcdstatic, \u79f0\u4e3a\u9759\u6001\u6210\u5458</p> <p>\u9759\u6001\u6210\u5458\u5206\u4e3a:</p> <ul> <li>\u9759\u6001\u6210\u5458\u53d8\u91cf:</li> <li>\u6240\u6709\u7c7b\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u4efd\u6570\u636e</li> <li>\u5728\u7f16\u8bd1\u9636\u6bb5\u5206\u914d\u5185\u5b58 (\u5206\u914d\u81f3\u5168\u5c40\u533a)</li> <li>\u7c7b\u5185\u58f0\u660e, \u7c7b\u5916\u521d\u59cb\u5316</li> <li>\u9759\u6001\u6210\u5458\u51fd\u6570</li> <li>\u6240\u7528\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u4e2a\u51fd\u6570</li> <li>\u9759\u6001\u6210\u5458\u51fd\u6570\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\u53d8\u91cf</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_94","title":"\u9759\u6001\u6210\u5458\u53d8\u91cf","text":"<p>\u8bbf\u95ee\u516c\u5171\u9759\u6001\u6210\u5458\u53d8\u91cf\u7684\u65b9\u5f0f\u6709\u4e24\u79cd: \u901a\u8fc7\u5bf9\u8c61; \u901a\u8fc7\u7c7b\u540d </p> <p>\u4f46\u662f\u8bbf\u95ee\u79c1\u6709\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u5916\u8bbf\u95ee\u4e0d\u5230 (\u9664\u975e\u901a\u8fc7\u516c\u5171\u51fd\u6570\u8d4b\u503c\u7ed9\u79c1\u6709\u9759\u6001\u6210\u5458\u53d8\u91cf) </p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n\n    // 2. \u5728\u7f16\u8bd1\u9636\u6bb5\u5206\u914d\u5185\u5b58 (\u5206\u914d\u81f3\u5168\u5c40\u533a)\n    static int a;\nprivate:\n    static int b;\n};\n// 3. \u7c7b\u5185\u58f0\u660e, \u7c7b\u5916\u521d\u59cb\u5316; \u6ce8\u610f\u5bf9\u5e94\u7684\u8bed\u6cd5\n// \u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\u9759\u6001\u6210\u5458\nint Person::a = 100;\n// int Person::b = 810; \u8fd9\u662f\u975e\u6cd5\u7684\nvoid test()\n{\n    Person p1;\n    cout &lt;&lt; p1.a &lt;&lt; endl;\n    Person p2;\n    // \u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee\u9759\u6001\u6210\u5458\n    p2.a = 200;\n    cout &lt;&lt; p1.a &lt;&lt; endl;\n    // 1. \u6240\u6709\u7c7b\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u4efd\u6570\u636e\n    cout &lt;&lt; p2.a &lt;&lt; endl;\n    // cout &lt;&lt; p2.b &lt;&lt; endl;   \u62a5\u9519, \u4e0d\u77e5\u9053\u8fd9\u4e2a\u503c\u662f\u8c01\n}\nint main ()\n{\n    test(); // \u4f9d\u6b21\u8f93\u51fa: 100 200 200 \n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_95","title":"\u9759\u6001\u6210\u5458\u51fd\u6570","text":"<p>\u8bbf\u95ee\u516c\u5171\u9759\u6001\u6210\u5458\u51fd\u6570\u6709\u4e24\u79cd\u65b9\u6cd5: \u901a\u8fc7\u5bf9\u8c61; \u901a\u8fc7\u7c7b\u540d</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    static void func()\n    {\n        cout &lt;&lt; \"The static int a = \" &lt;&lt; a &lt;&lt; endl; \n     // cout &lt;&lt; \"The int b = \" &lt;&lt; b &lt;&lt; endl;  \u5982\u679c\u8fd9\u4e2a\u8bed\u53e5\u52a0\u4e0a, \u7a0b\u5e8f\u62a5\u9519, \u56e0\u4e3ab\u4e0d\u662f\u9759\u6001\u6210\u5458\u53d8\u91cf\n    }\n    static int a;\n    int b;\n};\nint Person::a = 100; // \u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\u9759\u6001\u6210\u5458\u53d8\u91cf\nvoid test()\n{\n    Person p;\n    p.b = 100;\n    p.func(); // \u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee\n    Person::func(); // \u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\n}\nint main()\n{\n    test();\n    Person::func(); // \u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\n    return 0;\n}\n</code></pre> <p>\u5176\u5b9e\u5173\u4e8e\u9759\u6001\u6210\u5458\u51fd\u6570\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\u53d8\u91cf\u662f\u5341\u5206\u5bb9\u6613\u8ba4\u540c\u7684, \u56e0\u4e3a\u4e0d\u540c\u7684\u5bf9\u8c61\u90fd\u80fd\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570, \u5982\u679c\u8fd8\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf, \u90a3\u4e48\u4e0d\u540c\u5bf9\u8c61\u7684\u8be5\u51fd\u6570\u7684\u7ed3\u679c\u5c31\u4f1a\u4e0d\u4e00\u6837, \u90a3\u4e48\u8fd9\u4e2a\"\u9759\u6001\u6210\u5458\u51fd\u6570\"\u6709\u4ec0\u4e48\u7528?</p> <p>\u540c\u65f6\u6ce8\u610f: \u7c7b\u5916\u8bbf\u95ee\u4e0d\u4e86\u79c1\u6709\u9759\u6001\u6210\u5458\u51fd\u6570(\u9664\u975e\u4e00\u4e2a\u516c\u5171\u7684\u51fd\u6570\u91cc\u9762\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570)</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#cthis","title":"C++\u5bf9\u8c61\u6a21\u578b\u548cthis\u6307\u9488","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_96","title":"\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u50a8\u5b58","text":"<p>\u5728C++\u4e2d, \u7c7b\u5185\u7684\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u50a8\u5b58, \u53ea\u6709\u975e\u9759\u6001\u6210\u5458\u624d\u5c5e\u4e8e\u7c7b\u7684\u5bf9\u8c61</p> <p>\u6362\u800c\u8a00\u4e4b, \u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\u90fd\u4e0d\u662f\u79f0\u4e3a\u5c5e\u4e8e\u7c7b\u7684\u5bf9\u8c61</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\n};\nclass Test1{\n    int m_a; // \u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\n};\nclass Test2{\n    static int m_a; // \u9759\u6001\u6210\u5458\u53d8\u91cf\n    static void func1()\n    {\n    }\n    void func2()\n    {\n    }\n};\nint main()\n{\n    Person p;\n    Test1 test1;\n    Test2 test2;\n    cout &lt;&lt; sizeof(p) &lt;&lt; endl; // \u8f93\u51fa\u7684\u662f1\n    cout &lt;&lt; sizeof(test1) &lt;&lt; endl; // \u8f93\u51fa\u7684\u662f4\n    cout &lt;&lt; sizeof(test2) &lt;&lt; endl; // \u8f93\u51fa\u7684\u662f1\n    return 0;\n}\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u8f93\u51fa\u7684\u662f1. \u4e3a\u4ec0\u4e48\u5462? C++\u7f16\u8bd1\u5668\u4f1a\u7ed9\u6bcf\u4e2a\u7a7a\u5bf9\u8c61\u4e5f\u5206\u914d\u4e00\u4e2a\u5b57\u8282\u7a7a\u95f4, \u662f\u4e3a\u4e86\u533a\u5206\u7a7a\u5bf9\u8c61\u5360\u5185\u5b58\u7684\u4f4d\u7f6e</p> <p>\u6362\u800c\u8a00\u4e4b, \u5047\u5982\u6211\u521b\u5efa\u4e86\u4e24\u4e2a\u7a7a\u5bf9\u8c61, \u6211\u8981\u786e\u4fdd\u8fd9\u4e24\u4e2a\u7a7a\u5bf9\u8c61\u4e0d\u80fd\u518d\u540c\u4e00\u4e2a\u5730\u5740\u91cc\u9762, \u5982\u4f55\u4fdd\u8bc1\u5462? \u7ed9\u5b83\u4eec\u5206\u914d\u4e00\u4e2a\u5b57\u8282\u7a7a\u95f4\u5c31\u53ef\u4ee5\u4e86, \u53ea\u4e0d\u8fc7\u4eba\u4e3a\u89c4\u5b9a\u53ea\u8981\u7ed9\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u8282\u7a7a\u95f4\u5c31\u53ef\u4ee5\u4e86</p> <p>\u540c\u65f6\u6ce8\u610f: \u9759\u6001\u6210\u5458\u53d8\u91cf, \u9759\u6001\u6210\u5458\u51fd\u6570, \u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u90fd\u662f\u4e0d\u5c5e\u4e8e\u7c7b\u5bf9\u8c61\u4e0a\u7684</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#this","title":"this\u6307\u9488\u6982\u5ff5","text":"<p>\u6211\u4eec\u6ce8\u610f\u5230\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u4e0d\u5c5e\u4e8e\u7c7b\u5bf9\u8c61, \u662f\u5206\u5f00\u5b58\u50a8\u7684. \u6bcf\u4e00\u4e2a\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u53ea\u4f1a\u8bde\u751f\u4e00\u4efd\u51fd\u6570\u5b9e\u4f8b, \u4e5f\u5c31\u662f\u8bf4\u591a\u4e2a\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u4f1a\u5171\u7528\u540c\u4e00\u5757\u4ee3\u7801, \u90a3\u4e48\u95ee\u9898\u6765\u4e86: \u8fd9\u4e00\u5757\u4ee3\u7801\u662f\u5982\u4f55\u533a\u5206\u90a3\u4e2a\u5bf9\u8c61\u8c03\u7528\u81ea\u5df1\u7684\u5462?</p> <p>C++\u901a\u8fc7\u63d0\u4f9b\u7279\u6b8a\u7684\u5bf9\u8c61\u6307\u9488, this\u6307\u9488, \u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898, this\u6307\u9488\u6307\u5411\u88ab\u8c03\u7528\u7684\u6210\u5458\u51fd\u6570\u6240\u8ff0\u7684\u5bf9\u8c61</p> <p>this\u6307\u9488\u662f\u9690\u542b\u6bcf\u4e00\u4e2a\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u5185\u7684\u4e00\u79cd\u6307\u9488, this\u6307\u9488\u4e0d\u9700\u8981\u5b9a\u4e49, \u76f4\u63a5\u4f7f\u7528\u5c31\u53ef\u4ee5\u4e86</p> <p>this\u6307\u9488\u7684\u7528\u9014:</p> <ul> <li>\u5f53\u5f62\u53c2\u548c\u6210\u5458\u53d8\u91cf\u540c\u540d\u65f6, \u53ef\u7528this\u6307\u9488\u8fdb\u884c\u533a\u5206</li> <li>\u5728\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u4e2d\u8fd4\u56de\u5bf9\u8c61\u672c\u8eab, \u53ef\u4f7f\u7528return *this</li> </ul> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    Person(int age)\n    {\n        // \u89e3\u51b3\u540d\u79f0\u51b2\u7a81\n        this-&gt;age = age;\n    }\n    // \u8fd4\u56de\u5bf9\u8c61\u672c\u8eab\u7528this\n    Person&amp; PersonAddAge(Person *p) // \u5f15\u7528\u4f20\u9012, \n    // \u6ce8\u610f, \u540c\u65f6\u4e5f\u8981\u7528\u5f15\u7528\u7684\u65b9\u5f0f\u8fd4\u56de\n    // \u4e3a\u4ec0\u4e48\u5462? \u4e3a\u4e86\u786e\u4fdd\u8fd4\u56de\u7684\u662f\u672c\u4f53!! \u5426\u5219\u4f1a\u590d\u5236\u4e00\u4efd\u65b0\u7684\u51fa\u6765\n    {\n        this-&gt;age += p.age;\n        return *this;\n    }\n    int age;\n};\nint main()\n{\n    Person p(18);\n    cout &lt;&lt; p.age &lt;&lt; endl; // 18\n    Person p2(10);\n    p2.PersonAddAge(p1); // 28\n    // \u94fe\u5f0f\u7f16\u7a0b\u601d\u60f3\n    p2.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1); // \u5408\u6cd5\u4e86\n    return 0;\n}\n</code></pre> <p>\u4e8b\u5b9e\u8bc1\u660e, \u8fd9\u4e00\u8282\u7684\u5185\u5bb9\u5728\u5b9e\u6218\u4e2d\u5341\u5206\u91cd\u8981</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_97","title":"\u7a7a\u6307\u9488\u8bbf\u95ee\u6210\u5458\u51fd\u6570","text":"<p>C++\u4e2d\u7a7a\u6307\u9488\u4e5f\u662f\u53ef\u4ee5\u8c03\u7528\u6210\u5458\u51fd\u6570\u7684, \u4f46\u662f\u4e5f\u8981\u6ce8\u610f\u6709\u6ca1\u6709\u7528\u5230this\u6307\u9488</p> <p>\u5982\u679c\u7528\u5230\u4e86this\u6307\u9488, \u9700\u8981\u52a0\u4ee5\u5224\u65ad \u4fdd\u8bc1\u4ee3\u7801\u7684\u5065\u58ee\u6027</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    void showClassName()\n    {\n        cout &lt;&lt; \"This is Person class\" &lt;&lt; endl;\n    }\n    void showAge()\n    {\n        cout &lt;&lt; \"age = \" &lt;&lt; m_age &lt;&lt; endl;\n    }\n    int m_age;\n};\nvoid test()\n{\n    Person *p = NULL;\n    p-&gt;showClassName(); // \u8fd9\u91cc\u8fd8\u662f\u6b63\u5e38\u7684\n    // p-&gt;showAge();  \u5982\u679c\u8fd9\u53e5\u8bdd\u52a0\u4e0a\u7684\u8bdd, \u7acb\u9a6c\u62a5\u9519\n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre> <p>\u4e3a\u4ec0\u4e48p-&gt;showAge\u5c31\u4f1a\u51fa\u95ee\u9898\u5462? \u56e0\u4e3a, \u7b2c11\u884c\u5176\u5b9e\u4e8b\u5b9e\u4e0a\u662f:</p> <p><code>cout &lt;&lt; \"age = \" &lt;&lt; this-&gt;m_age &lt;&lt; endl;</code></p> <p>\u4f46\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\u53bb\u7528\u8fd9\u4e2a\u51fd\u6570, \u6211\u8fde\u5b9e\u4f53\u90fd\u6ca1\u6709, \u62ff\u6765\u7684\u5bf9\u8c61? \u90fd\u4e0d\u77e5\u9053\u8fd9\u4e2am_age\u5728\u54ea\u91cc</p> <p>\u6240\u4ee5\u4e3a\u4e86\u65b9\u5f0f\u8fd9\u79cd\u4e8b\u60c5\u53d1\u751f, \u4e00\u822c\u8fd9\u4e2a\u7c7b\u65b9\u6cd5\u4f1a\u8fd9\u4e48\u5199:</p> <pre><code>public:\n    void showClassName()\n    {\n        cout &lt;&lt; \"This is Person class\" &lt;&lt; endl;\n    }\n    void showAge()\n    {\n        if (this == NULL)\n        {\n            return;\n        }\n        cout &lt;&lt; \"age = \" &lt;&lt; m_age &lt;&lt; endl;\n    }\n    int m_age;\n};\n</code></pre> <p>\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\u6307\u9488\u8bbf\u95ee\u8fd9\u4e2a\u65b9\u6cd5(\u56e0\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u65e2\u53ef\u4ee5\u7528\u5bf9\u8c61\u8bbf\u95ee, \u4e5f\u53ef\u80fd\u4f1a\u88ab\u7a7a\u6307\u9488\u8bbf\u95ee), \u5982\u679c\u662f, \u76f4\u63a5\u63d0\u524dreturn</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#const_2","title":"const\u4fee\u9970\u6210\u5458\u51fd\u6570","text":"<p>\u5e38\u51fd\u6570:</p> <ul> <li>\u6210\u5458\u51fd\u6570\u540e\u52a0const\u540e\u6211\u4eec\u79f0\u8fd9\u4e2a\u51fd\u6570\u4e3a\u5e38\u51fd\u6570</li> <li>\u5e38\u51fd\u6570\u5185\u4e0d\u53ef\u4ee5\u4fee\u6539\u6210\u5458\u5c5e\u6027</li> <li>\u6210\u5458\u5c5e\u6027\u58f0\u660e\u65f6\u52a0\u4e0a\u5173\u952e\u8bcdmutable\u540e, \u5728\u5e38\u51fd\u6570\u4e2d\u4f9d\u7136\u53ef\u4ee5\u4fee\u6539</li> </ul> <p>\u5e38\u5bf9\u8c61:</p> <ul> <li>\u58f0\u660e\u5bf9\u8c61\u524d\u52a0const\u79f0\u8be5\u5bf9\u8c61\u4e3a\u5e38\u5bf9\u8c61</li> <li>\u5e38\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528\u5e38\u51fd\u6570</li> <li>\u5e38\u5bf9\u8c61\u53ea\u80fd\u4fee\u6539\u6709\u4e86mutable\u7684\u5e38\u53d8\u91cf</li> </ul> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    void showPerson() const // \u8fd9\u662f\u4e00\u4e2a\u5e38\u51fd\u6570\n    { \n        m_b = 100; // \u5408\u6cd5\n        // m_a = 100;   \u4e0d\u5408\u6cd5, \u63d0\u793a\u5de6\u8fb9\u7684\u503c\u5fc5\u987b\u662f\u53ef\u4ee5\u4fee\u6539\u7684\n    }\n    void func()\n    {\n    }  \n    int m_a;\n    mutable int m_b; // \u8fd9\u6837\u4e00\u6765, \u8fd9\u4e2a\u503c\u5728\u5e38\u51fd\u6570\u4f9d\u7136\u53ef\u4ee5\u4fee\u6539\n};\nvoid test()\n{\n    const Person p; // \u521b\u5efa\u4e00\u4e2a\u5e38\u5bf9\u8c61\n    p.m_b = 114; // \u5408\u6cd5, \u56e0\u4e3a\u4fee\u6539\u7684\u662f\u52a0\u4e86mutable\u7684\u53d8\u91cf\n    // p.m_a = 514;  \u76f4\u63a5\u62a5\u9519\n    // p.func();   \u76f4\u63a5\u62a5\u9519\n}\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u52a0\u4e86const\u80fd\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c? \u5176\u5b9e\u8ddfthis\u6307\u9488\u6709\u5173</p> <p>\u56e0\u4e3athis\u6307\u9488\u7684\u672c\u8d28, \u662f\u6307\u9488\u5e38\u91cf, \u6307\u9488\u7684\u6307\u5411\u662f\u4e0d\u53ef\u4ee5\u4fee\u6539\u7684, \u5c31\u662f\u76f8\u5f53\u4e8e\u4e00\u4e2a<code>Person * const this</code></p> <p>\u4f46\u662f\u52a0\u4e0a\u4e86const, \u76f8\u5f53\u4e8e\u4fee\u9970\u4e86\u6307\u9488, \u53d8\u6210\u4e86<code>const Person * const this</code></p> <p>\u56e0\u6b64\u503c\u4e0d\u53ef\u4ee5\u8fdb\u884c\u6539\u53d8\u4e86</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_98","title":"\u53cb\u5143","text":"<p>\u5728\u7a0b\u5e8f\u91cc, \u6709\u4e9b\u79c1\u6709\u5c5e\u6027\u4e5f\u60f3\u8ba9\u7c7b\u5916\u7279\u6b8a\u7684\u4e00\u4e9b\u51fd\u6570\u6216\u8005\u7c7b\u8fdb\u884c\u8bbf\u95ee, \u5c31\u9700\u8981\u7528\u5230\u53cb\u5143\u7684\u6280\u672f</p> <p>\u53cb\u5143\u7684\u76ee\u7684\u5c31\u662f\u8ba9\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u7c7b, \u8bbf\u95ee\u53e6\u4e00\u4e2a\u7c7b\u4e2d\u7684\u79c1\u6709\u6210\u5458, \u5173\u952e\u8bcd: friend</p> <p>\u4e09\u79cd\u5b9e\u73b0\u65b9\u5f0f: \u5168\u5c40\u51fd\u6570\u505a\u53cb\u5143, \u7c7b\u505a\u53cb\u5143, \u6210\u5458\u51fd\u6570\u505a\u53cb\u5143</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_99","title":"\u5168\u5c40\u51fd\u6570\u505a\u53cb\u5143","text":"<pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Building\n{\n    friend void goodGay(BUilding *building); // \u53cb\u5143\u51fd\u6570\u58f0\u660e\npublic:\n    Building()\n    {\n        m_SittingRoom = \"Sitting Room\";\n        m_Bedroom = \"Bedroom\";\n    }\n    string m_SittingRoom;\nprivate:\n    string m_Bedroom;\n};\nvoid goodGay(BUilding *building) // \u5f15\u7528\u4f20\u9012, \u597d\u57fa\u53cb\u5168\u5c40\u51fd\u6570\n{\n    cout &lt;&lt; building.m_SittingRoom &lt;&lt; endl;\n    cout &lt;&lt; building.m_Bedroom &lt;&lt; endl; // private\u4e5f\u53ef\u4ee5\u8bbf\u95ee!\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_100","title":"\u7c7b\u505a\u53cb\u5143","text":"<p>\u8ba9\u4e00\u4e2a\u7c7b\u80fd\u8bbf\u95ee\u53e6\u4e00\u4e2a\u7c7b\u7684\u79c1\u6709\u6210\u5458</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Building\n{\n    friend class GoodGay; // GoodGay\u662fBuilding\u7684\u670b\u53cb, \u53ef\u4ee5\u8bbf\u95eeBuilding\u4e2d\u7684\u79c1\u6709\u6210\u5458\npublic:\n    Building(); // \u58f0\u660e, \u5728\u7c7b\u5916\u5199\u8be5\u51fd\u6570\n    string m_SittingRoom;\nprivate:\n    string m_Bedroom;\n};\nclass GoodGay\n{\npublic: \n    GoodGay();\n    void visit(); // \u53c2\u89c2\u51fd\u6570, \u53ef\u4ee5\u8bbf\u95eeBuilding\u4e2d\u7684\u5c5e\u6027\n    Building *building; // \u6ce8\u610f, \u8fd9\u662f\u4e00\u4e2a\u6307\u9488, \u53ef\u4ee5\u6307\u5411\u4e00\u4e2aBuilding\u7c7b\u6210\u5458\n};\n// \u62d3\u5c55: \u5728\u7c7b\u5916\u5199\u7c7b\u51fd\u6570\nBuilding::Building()\n{\n    m_SittingRoom = \"Sitting Room\";\n    m_Bedroom = \"Bedroom\";\n}\nGoodGay::GoodGay()\n{\n    building = new Building; // \u521b\u5efa\u5efa\u7b51\u7269\u5bf9\u8c61, \u6307\u9488\u63a5\u53d7\u5b83\n}\nvoid GoodGay::visit()\n{\n    cout &lt;&lt; building-&gt;m_Bedroom &lt;&lt; endl;\n}\nint main()\n{\n    GoodGay gg;\n    gg.visit();\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_101","title":"\u6210\u5458\u51fd\u6570\u505a\u53cb\u5143","text":"<pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Building;\nclass GoodGay\n{\npublic:\n    GoodGay();\n    void visit(); // \u8ba9\u5b83\u53ef\u4ee5\u8bbf\u95eeBuilding\u4e2d\u7684\u79c1\u6709\u6210\u5458\n    Building * building;\n};\nclass Building\n{\n    friend void GoodGay::visit();\npublic:\n    Building()\n    {\n        m_SittingRoom = \"Sitting Room\";\n        m_Bedroom = \"Bedroom\";\n    }\n    string m_SittingRoom;\nprivate:\n    string m_Bedroom;\n};\nGoodGay::GoodGay()\n{\n    building = new Building;\n}\nvoid GoodGay::visit()\n{\n    cout &lt;&lt; building-&gt;m_Bedroom &lt;&lt;endl;\n}\nint main()\n{\n    GoodGay gg;\n    gg.visit();\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f:\u8981\u5148\u5199GoodGay, \u518d\u5199Building; \u800c\u4e14\u5728GoodGay\u524d\u9762\u8981\u58f0\u660eclass Building; </p> <p>i.e. \u987a\u5e8f\u662f\u4e00\u4e2a\u8981\u5341\u5206\u6ce8\u610f\u7684\u70b9!!! \u5c06\u8981\u88abfriend\u4fee\u9970\u7684\u7c7b\u6210\u5458\u51fd\u6570\u6240\u5bf9\u5e94\u7684\u7c7b\u7684\u5b9a\u4e49\u5fc5\u987b\u5728friend\u58f0\u660e\u6240\u5728\u7c7b\u7684\u524d\u9762</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_102","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<p>\u6982\u5ff5: \u5bf9\u5df2\u6709\u7684\u8fd0\u7b97\u7b26\u91cd\u65b0\u8fdb\u884c\u5b9a\u4e49, \u8d4b\u4e88\u5176\u53e6\u4e00\u79cd\u529f\u80fd, \u4ee5\u9002\u5e94\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_103","title":"\u52a0\u53f7\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<p>\u901a\u8fc7\u6210\u5458\u51fd\u6570\u91cd\u8f7d+\u53f7</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    Person()\n    {       \n    }\n    Person(int age)\n    {\n        this-&gt;m_age = age;\n    }\n    Person operator+ (Person &amp;p) // \u5f15\u7528\u4f20\u9012\n    { // \u901a\u8fc7\u6210\u5458\u51fd\u6570\u91cd\u8f7d+\u53f7\n        Person temp;\n        temp.m_age = this-&gt;m_age + p.m_age;\n        return temp;\n    }\n    int m_age;\n};\nint main()\n{\n    Person p1(18);\n    Person p2(20);\n    Person p3 = p1 + p2; // \u5b9e\u9645\u4e0a\u662f: Person p3 = p1.operator+(p2)\n    cout &lt;&lt; p3.m_age &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u901a\u8fc7\u5168\u5c40\u51fd\u6570\u91cd\u8f7d</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    Person()\n    {       \n    }\n    Person(int age)\n    {\n        this-&gt;m_age = age;\n    }\n    int m_age;\n};\nPerson operator+ (Person &amp;p1, Person &amp;p2)\n{\n    Person temp;\n    temp.m_age = p1.m_age + p2.m_age;\n    return temp;\n}\nint main()\n{\n    Person p1(18);\n    Person p2(20);\n    Person p3 = p1 + p2; // \u5b9e\u9645\u4e0a\u662f: Person p3 = operator+(p1, p2)\n    cout &lt;&lt; p3.m_age &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f: </p> <ol> <li>\u5bf9\u4e8e\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u7b26\u662f\u4e0d\u53ef\u4ee5\u6539\u53d8\u7684</li> <li>\u4e0d\u8981\u6ee5\u7528\u8fd0\u7b97\u7b26\u91cd\u8f7d</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_104","title":"\u5de6\u79fb\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<p>\u4f5c\u7528: \u53ef\u4ee5\u8f93\u51fa\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u7c7b\u578b</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\npublic:\n    int m_a;\n};\nostream&amp; operator&lt;&lt;(ostream &amp;cout, Person &amp;p) // \u672c\u8d28: operator(cout, p) == cout &lt;&lt; p, \u6ce8\u610f\u70b93\n{ // \u6ce8\u610f\u70b91, 2\n    cout &lt;&lt; \"m_a of p is: \" &lt;&lt; p.m_a;  // \u6ce8\u610f\u70b94\n}\nvoid test()\n{\n    Person p;\n    p.m_a = 10;\n    cout &lt;&lt; p &lt;&lt; endl;\n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f: \u4e0d\u53ef\u4ee5\u5229\u7528\u6210\u5458\u51fd\u6570\u91cd\u8f7d&lt;&lt;\u8fd0\u7b97\u7b26, \u56e0\u4e3a\u65e0\u8bba\u5982\u4f55, \u7b80\u5316\u540e, cout\u5728\u5de6\u4fa7</p> <p>\u56e0\u6b64, \u53ea\u80fd\u7528\u5168\u5c40\u51fd\u6570\u91cd\u8f7d\u5de6\u79fb\u8fd0\u7b97\u7b26</p> <p>\u6ce8\u610f\u70b9:</p> <ol> <li>\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u524d\u9762\u7684\u6570\u636e\u7c7b\u578b\u662fostream? \u56e0\u4e3a\u540e\u9762\u7684<code>cout &lt;&lt; p &lt;&lt; endl;</code>\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u94fe\u5f0f\u6cd5\u5219, \u524d\u9762\u4e00\u4e2a\u8f93\u51fa\u7684\u662fostream, \u624d\u80fd\u4f5c\u4e3a\u540e\u9762\u4e00\u4e2a&lt;&lt;\u7684\u4f20\u53c2</li> <li>\u5b9e\u9645\u4e0a, \u8fd9\u91cc\u9762<code>ostream &amp;cout</code>\u7684cout\u53ef\u4ee5\u968f\u4fbf\u6539\u540d\u5b57(\u51fd\u6570\u4f53\u5185\u7684\u4e5f\u5bf9\u5e94\u6539), \u56e0\u4e3a\u8fd9\u91cc\u662f\u5f15\u7528, \u8d77\u522b\u540d</li> <li>\u6ce8\u610f\u8fd9\u91cc\u8981\u8fd4\u56de\u5f15\u7528!! \u4e0d\u7136\u7684\u8bdd, \u4e8b\u5b9e\u4e0a\u662f\u53e6\u5916\u65b0\u5f00\u4e86\u4e00\u4e2aostream!</li> <li>\u8fd9\u91cc\u4e0d\u8981\u6709endl</li> </ol> <p>\u5f53\u7136, \u5982\u679c\u8fd9\u8f93\u51fa\u7684\u4e1c\u897f\u91cc\u9762\u6709\u79c1\u6709\u6210\u5458\u5462?</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person\n{\n    friend ostream&amp; operator&lt;&lt;(ostream &amp;cout, Person &amp;p);\npublic:\n    Person(int a)\n    {\n        this-&gt;m_a = a;\n    }\nprivate:\n    int m_a;\n};\nostream&amp; operator&lt;&lt;(ostream &amp;cout, Person &amp;p) // \u672c\u8d28: operator(cout, p) == cout &lt;&lt; p\n{ \n    cout &lt;&lt; \"m_a of p is: \" &lt;&lt; p.m_a; \n    return cout;\n}\nvoid test()\n{\n    Person p(18);\n    cout &lt;&lt; p &lt;&lt; endl; \n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\u5168\u5c40\u51fd\u6570\u5199\u5728\u4e86\u7c7b\u7684\u540e\u9762, \u610f\u5728\u5148\u8ba9\u7c7b\u77e5\u9053, \u8fd9\u4e2a\u51fd\u6570\u662f\u53cb\u5143</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_105","title":"\u9012\u589e\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<p>\u4f5c\u7528: \u901a\u8fc7\u91cd\u8f7d\u9012\u589e\u8fd0\u7b97\u7b26, \u5b9e\u73b0\u81ea\u5df1\u7684\u6574\u578b\u6570\u636e</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass MyInteger\n{\n    friend ostream&amp; operator&lt;&lt;(ostream &amp;cout, const MyInteger &amp;p) ; \npublic:\n    MyInteger()\n    {\n        m_num = 0;\n    }\n    MyInteger&amp; operator++()\n    {\n        this-&gt;m_num++;\n        return *this; // \u8fd4\u56de\u81ea\u5df1\n    }\n    MyInteger operator++(int) // \u5360\u4f4d\u53c2\u6570, \u53ef\u4ee5\u7528\u7c7b\u533a\u5206\u524d\u7f6e\u548c\u540e\u7f6e\n    // \u6ce8\u610f\u70b92\n    { // \u8fd9\u91cc\u4e0d\u7528\u5f15\u7528\u4e86, \u8fd4\u56de\u7684\u662f\u503c! \u6ce8\u610f\u524d\u7f6e\u548c\u540e\u7f6e\u7684\u672c\u8d28\u533a\u522b\n        MyInteger temp = *this; // \u8bb0\u5f55\u5f53\u524d\u7ed3\u679c\n        this-&gt;m_num++;\n        return temp; // \u5c06\u8bb0\u5f55\u7ed3\u679c\u8fd4\u56de\n    }\nprivate:\n    int m_num ;\n};\nostream&amp; operator&lt;&lt;(ostream &amp;cout, const MyInteger &amp;p) // \u6ce8\u610f\u70b91\n{ // \u8fd4\u56de\u5f15\u7528\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\u8fdb\u884c\u64cd\u4f5c(\u5f15\u7528\u5341\u5206\u5e38\u89c1\u7684\u7528\u6cd5!!!)\n    cout &lt;&lt; p.m_num;   \n    return cout;\n}\nvoid test1()\n{\n    MyInteger m;\n    cout &lt;&lt; m &lt;&lt; endl; // 0\n    m++; // \u540e\u7f6e\u9012\u589e \n    cout &lt;&lt; m &lt;&lt; endl; // 1\n    ++m; // \u524d\u7f6e\u9012\u589e\n    cout &lt;&lt; m &lt;&lt; endl; // 2\n}\nvoid test2()\n{\n    MyInteger m;\n    cout &lt;&lt; ++(++m) &lt;&lt; endl; // 2\n    cout &lt;&lt; m++ &lt;&lt; endl; // 2\n    cout &lt;&lt; m &lt;&lt; endl; // 3\n}\nint main()\n{\n    test1();\n    test2();\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\u70b9:</p> <ol> <li>\u4e3a\u4ec0\u4e48\u540e\u9762\u8981\u52a0const? \u56e0\u4e3areturn temp\u662f\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf, \u5373\u5b83\u9ed8\u8ba4\u4e3aconst MyInteger, \u800coperator&lt;&lt;\u540e\u9762\u7684\u5b9a\u4e49\u4e2d\u6ca1\u8bf4\u53ef\u4ee5\u662fconst MyInteger; \u800c\u4e8b\u5b9e\u4e0a, \u975econst\u53ef\u4ee5\u5f15\u7528\u81f3const, \u4f46\u662fconst\u4e0d\u80fd\u5f15\u7528\u81f3\u975econst, \u6240\u4ee5\u4e3a\u4e86\u5b8c\u7f8e\u89e3\u51b3\u95ee\u9898(\u517c\u987e\u540e\u7f6e\u548c\u524d\u7f6e\u4e24\u79cdconst\u548c\u975econst\u8fd4\u56de), \u76f4\u63a5\u5b9a\u4e49\u91cc\u9762\u52a0\u4e0aconst, \u4f7f\u5f97\u8be5\u5de6\u79fb\u8fd0\u7b97\u7b26\u80fd\u591f\u63a5\u53d7const\u548c\u975econst</li> <li>\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u9762\u4e0d\u80fd\u8fd4\u56de\u5f15\u7528? \u5426\u5219\u76f4\u63a5\u8fd4\u56de\u6539\u53d8\u540e\u7684\u81ea\u8eab\u4e86! \u6838\u5fc3\u601d\u60f3\u662f\u521b\u5efa\u4e34\u65f6\u7684temp\u63a5\u53d7\u5f53\u524d\u72b6\u6001, \u7136\u540e\u628a\u8fd9\u4e2aconst MyInteger(\u8bb0\u5f55\u7684\u662f\u539f\u6765\u7684\u72b6\u6001)\u8fd4\u56de</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_106","title":"\u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<p>C++\u7f16\u8bd1\u5668\u81f3\u5c11\u7ed9\u4e00\u4e2a\u7c7b\u6dfb\u52a0\u56db\u4e2a\u51fd\u6570:</p> <ol> <li>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570(\u65e0\u53c2, \u51fd\u6570\u4f53\u4e3a\u7a7a)</li> <li>\u9ed8\u8ba4\u6790\u6784\u51fd\u6570(\u65e0\u53c2, \u51fd\u6570\u4f53\u4e3a\u7a7a)</li> <li>\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570, \u5bf9\u5c5e\u6027\u8fdb\u884c\u503c\u62f7\u8d1d</li> <li>\u8d4b\u503c\u8fd0\u7b97\u7b26operator=, \u5bf9\u5c5e\u6027\u8fdb\u884c\u503c\u62f7\u8d1d</li> </ol> <p>\u5982\u679c\u7c7b\u4e2d\u6709\u5c5e\u6027\u6307\u5411\u5806\u533a, \u505a\u590d\u5236\u64cd\u4f5c\u4e5f\u4f1a\u51fa\u73b0\u6df1\u6d45\u62f7\u8d1d\u95ee\u9898 (\u5806\u53d6\u6570\u636e\u91cd\u590d\u91ca\u653e)</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Person{\npublic:\n    Person(int age)\n    {\n        m_age = new int(age); // \u6307\u9488\u6307\u5411\u5806\u533a\u7684\u4e00\u4e2a\u6570\u636e\n    }\n    ~Person()\n    {\n        if (m_age != NULL)\n        {\n            delete m_age; // \u4eba\u5de5\u91ca\u653e\u5806\u533a\u5185\u5b58, \u5982\u679c\u4e0d\u662f\u7a7a\u6307\u9488, \u90a3\u4e48\u6307\u9488\u5bf9\u5e94\u5806\u533a\u6570\u636e\u6e05\u96f6\n            m_age = NULL; // \u6307\u9488\u91cd\u65b0\u7f6e\u56de\u7a7a\u6307\u9488\n        }\n    }\n    int *m_age; // \u521b\u5efa\u4e00\u4e2a\u6307\u9488\n};\nvoid test()\n{\n    Person p1(18);\n    Person p2(20);\n    p2 = p1; // \u8d4b\u503c\u64cd\u4f5c\n    cout &lt;&lt; \"The age of p2 is: \"&lt;&lt; *p2.m_age &lt;&lt; endl;\n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e2a\u4ee3\u7801\u4f1a\u76f4\u63a5\u5d29\u6389, \u4f46\u662fp2\u5e74\u9f84\u8fd8\u662f\u4f1a\u663e\u793a\u51fa\u6765, \u800c\u4e14\u662f18; \u90a3\u4e48\u4e3a\u4ec0\u4e48\u4f1a\u5d29\u6389\u5462? \u95ee\u9898\u5728\u6790\u6784\u4e0a</p> <p><code>p2 = p1</code>\u662f\u590d\u5236\u64cd\u4f5c, \u7531\u4e8e\u662f\u6d45\u62f7\u8d1d, p1 p2\u4e24\u4e2a\u6307\u9488\u90fd\u662f\u6307\u5411\u4e86\u540c\u4e00\u4e2a\u5806\u533a\u4e2d\u91cd\u590d\u7684\u6570\u636e, \u9020\u6210\u4e86\u5806\u53d6\u6570\u636e\u7684\u91cd\u590d\u91ca\u653e</p> <p>\u5982\u4f55\u89e3\u51b3\u5462? \u6211\u4eec\u8981\u6df1\u62f7\u8d1d, \u56e0\u6b64\u6211\u4eec\u6240\u7528\u7684\"\u7b49\u53f7\"\u4e0d\u80fd\u662f\u7a0b\u5e8f\u63d0\u4f9b\u7684Operator, \u8981\u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d</p> <pre><code>    void operator=(Person &amp;p1)\n    {\n        if (this-&gt;m_age != NULL)\n        {\n            delete m_age;\n            m_age = NULL; // \u5982\u679c\u539f\u6765\u8fd9\u4e2a\u5bf9\u8c61\u5728\u5806\u533a\u6709\u6307\u5411\u4e86, \u90a3\u4e48\u8981\u91cd\u7f6e\u4e3a\u7a7a\u6307\u9488\n        }\n        this-&gt;m_age = new int(*p1.m_age);\n    }\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e2a\u5f53\u7136\u5728<code>p2 = p1</code>\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c, \u4f46\u662f\u6211\u4eec\u8fd8\u662f\u6ce8\u91cd\u94fe\u5f0f\u7f16\u7a0b</p> <pre><code>    Person&amp; operator=(Person &amp;p1) // \u8fd4\u56de\u7684\u662f\u81ea\u8eab\u7684\u89e3\u5f15\u7528! \u800c\u4e0d\u662fPerson\u7684\u4e00\u4e2a\u5bf9\u8c61!\n    // \u5982\u679c\u662fPerson\u6253\u5934, \u90a3\u4e48\u8fd4\u56de\u7684\u662f\u6309\u7167*this\u62f7\u8d1d\u6784\u9020\u7684\u5bf9\u8c61\n    {\n        if (this-&gt;m_age != NULL)\n        {\n            delete m_age;\n            m_age = NULL; // \u5982\u679c\u539f\u6765\u8fd9\u4e2a\u5bf9\u8c61\u5728\u5806\u533a\u6709\u6307\u5411\u4e86, \u90a3\u4e48\u8981\u91cd\u7f6e\u4e3a\u7a7a\u6307\u9488\n        }\n        this-&gt;m_age = new int(*p1.m_age);\n        return *this; // \u8fd4\u56de\u81ea\u8eab\n    }\n</code></pre> <p>\u6ce8\u610f Person&amp;  \u548c  Person  \u7684\u533a\u522b!</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_107","title":"\u5173\u7cfb\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<p>\u4f5c\u7528: \u5173\u7cfb\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5668, \u53ef\u4ee5\u8ba9\u4e24\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u5bf9\u8c61\u8fdb\u884c\u5bf9\u6bd4\u64cd\u4f5c(\u5f88\u50cfpython\u9b54\u6cd5\u65b9\u6cd5)</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Person{\npublic:\n    Person(string str, int num)\n    {\n        name = str;\n        age = num;\n    }\n    bool operator==(Person &amp;p)\n    {\n        if (this-&gt;name == p.name &amp;&amp; this-&gt;age == p.age)\n        {\n            return true;   \n        }  \n        return false;\n    }\n    bool operator !=(Person &amp;p)\n    {\n        if (this-&gt;name == p.name &amp;&amp; this-&gt;age == p.age)\n        {\n            return false;\n        }\n        return true;\n    }\n    string name;\n    int age;\n};\nint main(){\n    Person p1(\"Lily\", 18);\n    Person p2(\"Jack\", 20);\n    Person p3(\"Jack\", 20);\n    cout &lt;&lt; (p1 == p2) &lt;&lt; endl; // 0\n    cout &lt;&lt; (p2 == p3) &lt;&lt; endl; // 1\n    cout &lt;&lt; (p1 != p3) &lt;&lt; endl; // 1\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_108","title":"\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<p>\u7531\u4e8e\u91cd\u8f7d\u540e\u4f7f\u7528\u7684\u65b9\u5f0f\u975e\u5e38\u50cf\u51fd\u6570\u7684\u8c03\u7528, \u56e0\u6b64\u79f0\u4e3a\u4eff\u51fd\u6570; \u4eff\u51fd\u6570\u6ca1\u6709\u56fa\u5b9a\u5199\u6cd5, \u975e\u5e38\u7075\u6d3b</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Myprint{\npublic:\n    void operator()(string test)\n    {\n        cout &lt;&lt; test &lt;&lt; endl;\n    }\n};\nclass Myadd\n{\npublic:\n    int operator()(int a, int b)\n    {\n        return a+b ; \n    }\n};\nint main()\n{\n    Myprint print;\n    print(\"Hello World!\"); // \u8fd9\u770b\u8d77\u6765\u662f\u4e0d\u662f\u975e\u5e38\u50cf\u51fd\u6570\u8c03\u7528? \n    Myadd add;\n    cout &lt;&lt; add(1, 2) &lt;&lt; endl;\n    cout &lt;&lt; Myadd()(3, 4) &lt;&lt; endl; // \u6ce8\u610f: Myadd()\u4ee3\u8868\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5bf9\u8c61\n    // \u4e00\u65e6\u8be5\u53e5\u6267\u884c\u5b8c\u6bd5, \u533f\u540d\u5bf9\u8c61\u7acb\u9a6c\u91ca\u653e\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_109","title":"\u7ee7\u627f","text":"<p>\u7ee7\u627f\u662f\u9762\u5411\u5bf9\u8c61\u7684\u4e09\u5927\u7279\u6027\u4e4b\u4e00; \u6709\u4e9b\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u5b58\u5728\u7279\u6b8a\u7684\u5173\u7cfb</p> <p>\u6211\u4eec\u53d1\u73b0, \u5b9a\u4e49\u8fd9\u4e9b\u7c7b\u7684\u65f6\u5019, \u4e0b\u7ea7\u522b\u7684\u6210\u5458\u9664\u4e86\u62e5\u6709\u4e0a\u4e00\u7ea7\u7684\u5171\u6027\u4e4b\u5916, \u8fd8\u6709\u4e00\u4e9b\u81ea\u5df1\u7684\u7279\u6027</p> <p>\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u5229\u7528\u7ee7\u627f\u6280\u672f, \u51cf\u5c11\u91cd\u590d\u7684\u4ee3\u7801</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_110","title":"\u7ee7\u627f\u7684\u57fa\u672c\u8bed\u6cd5","text":"<pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass BasePage{\n// \u8bbe\u60f3\u4e00\u4e2a\u6559JAVA, PYTHON\u7684\u9875\u9762\npublic:\n    void header()\n    {\n        cout &lt;&lt; \"Public header\" &lt;&lt; endl;\n    }\n    void footer()\n    {\n        cout &lt;&lt; \"Public bottom\" &lt;&lt; endl;\n    }\n    void left()\n    {\n        cout &lt;&lt; \"Catagories\" &lt;&lt; endl;\n    }\n    // \u4ee5\u4e0a\u90fd\u662fJAVA, PYTHON\u4e24\u4e2a\u9875\u9762\u7684\u516c\u5171\u90e8\u5206\n};\nclass Java : public BasePage // \u6ce8\u610f\u662f\u5192\u53f7, \u540e\u9762\u6ca1\u6709\u5206\u53f7\n{\npublic:\n    void content()\n    {\n        cout &lt;&lt; \"Java teaching courses\" &lt;&lt; endl;\n    }\n};\nclass Python : public BasePage\n{\npublic:\n    void content()\n    {\n        cout &lt;&lt; \"Python teaching courses\" &lt;&lt; endl;\n    }\n};\nint main()\n{\n    Java().header();\n    Python().footer();\n    Java().content();\n    Python().content(); // \u521b\u5efa\u533f\u540d\u5bf9\u8c61, \u65b9\u4fbf\u8c03\u7528\u51fd\u6570\n    return 0;\n}\n</code></pre> <p><code>class A : public B</code>, \u5176\u4e2dA\u662f\u5b50\u7c7b\u6216\u6d3e\u751f\u7c7b, B\u662f\u7236\u7c7b\u6216\u57fa\u7c7b</p> <p>\u6d3e\u751f\u7c7b\u4e2d\u7684\u6210\u5458, \u5305\u542b\u4e24\u4e2a\u90e8\u5206:</p> <p>\u4e00\u7c7b\u662f\u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684, \u4e00\u7c7b\u662f\u81ea\u5df1\u589e\u52a0\u7684\u6210\u5458; \u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u8868\u73b0\u5176\u5171\u6027, \u800c\u65b0\u589e\u7684\u6210\u5458\u4f53\u73b0\u4e86\u5176\u4e2a\u6027</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_111","title":"\u7ee7\u627f\u65b9\u5f0f","text":"<p><code>class \u5b50\u7c7b : \u7ee7\u627f\u65b9\u5f0f \u7236\u7c7b</code> </p> <p>\u7ee7\u627f\u65b9\u5f0f\u4e00\u5171\u6709\u4e09\u79cd:  \u516c\u5171\u7ee7\u627f, \u4fdd\u62a4\u7ee7\u627f, \u79c1\u6709\u7ee7\u627f</p> <pre><code>class A{\npublic:\n    int a;\nprotected:\n    int b;\nprivate:\n    int c;\n};\n</code></pre> <pre><code>class B : public A // a:public    b:protected    c:\u65e0\u6cd5\u8bbf\u95ee\nclass B : protected A // a&amp;b : protected     c:\u65e0\u6cd5\u8bbf\u95ee\nclass B : private A // a&amp;b : private    c:\u65e0\u6cd5\u8bbf\u95ee\n</code></pre> <p>\u53ef\u89c1, private c\u65e0\u8bba\u54ea\u79cd\u7ee7\u627f, \u4e00\u5b9a\u90fd\u662f\u65e0\u6cd5\u8bbf\u95ee</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_112","title":"\u7ee7\u627f\u4e2d\u7684\u5bf9\u8c61\u6a21\u578b","text":"<p>\u95ee\u9898: \u4ece\u7236\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u6210\u5458, \u54ea\u4e9b\u5c5e\u4e8e\u5b50\u7c7b\u5bf9\u8c61\u4e2d? </p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass A{\npublic:\n    int a;\nprotected:\n    int b;\nprivate:\n    int c;\n};\nclass Son : public Base\n{\npublic:\n    int d;\n};\nint main()\n{\n    cout &lt;&lt; sizeof(Son) &lt;&lt; endl;\n}\n</code></pre> <p>\u7ed3\u679c\u8f93\u51fa\u7684\u662f16, \u76f8\u5f53\u4e8e\u7236\u7c7b\u65e0\u8bba\u4efb\u4f55\u5c5e\u6027\u7684\u6210\u5458\u90fd\u4f1a\u7ee7\u627f, \u5e76\u4e14\u5b50\u7c7b\u81ea\u5df1\u8fd8\u6709\u989d\u5916\u7684\u6210\u5458\u5c5e\u6027</p> <p>\u867d\u7136\u8bf4\u79c1\u6709\u6210\u5458\"\u8bbf\u95ee\u4e0d\u5230\", \u4f46\u662f\u7236\u7c7b\u4e2d\u7684\u79c1\u6709\u6210\u5458\u5c5e\u6027\u662f\u88ab\u7f16\u8bd1\u5668\u7ed9\u9690\u85cf\u4e86, \u56e0\u6b64\u8bbf\u95ee\u4e0d\u5230, \u4f46\u662f\u786e\u5b9e\u88ab\u7ee7\u627f\u4e0b\u53bb\u4e86</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_113","title":"\u7ee7\u627f\u4e2d\u6784\u9020\u548c\u6790\u6784\u987a\u5e8f","text":"<p>\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u4e4b\u540e, \u5f53\u521b\u5efa\u5b50\u7c7b\u5bf9\u8c61, \u4e5f\u4f1a\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570</p> <p>\u95ee\u9898: \u7236\u7c7b\u548c\u5b50\u7c7b\u6784\u9020\u548c\u6790\u6784\u7684\u987a\u5e8f? </p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Base{\npublic:\n    Base()\n    {\n        cout &lt;&lt; \"construction of Base\" &lt;&lt; endl;\n    }\n    ~Base()\n    {\n        cout &lt;&lt; \"destruction of Base\" &lt;&lt; endl;\n    }\n};\nclass Son : public Base\n{\npublic:\n    Son()\n    {\n        cout &lt;&lt; \"construction of Son\" &lt;&lt; endl;\n    }\n    ~Son()\n    {\n        cout &lt;&lt; \"destruction of Son\" &lt;&lt; endl;\n    }\n};\nvoid test()\n{\n    Son();\n}\nint main()\n{\n    test();\n    return 0;\n    // construction of Base\n    // construction of Son\n    // destruction of Son\n    // destruction of Base\n}\n</code></pre> <p>\u53ef\u89c1\u987a\u5e8f\u662f: \u7236\u7c7b\u6784\u9020-\u5b50\u7c7b\u6784\u9020-\u5b50\u7c7b\u6790\u6784-\u7236\u7c7b\u6790\u6784</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_114","title":"\u7ee7\u627f\u540c\u540d\u6210\u5458\u5904\u7406\u65b9\u5f0f","text":"<p>\u95ee\u9898: \u5f53\u5b50\u7c7b\u4e0e\u7236\u7c7b\u51fa\u73b0\u4e86\u540c\u540d\u6210\u5458\u7684\u65f6\u5019, \u5982\u4f55\u901a\u8fc7\u5b50\u7c7b\u5bf9\u8c61, \u8bbf\u95ee\u5230\u5b50\u7c7b\u6216\u7236\u7c7b\u4e2d\u540c\u540d\u7684\u6570\u636e\u5462?</p> <ul> <li>\u8bbf\u95ee\u5b50\u7c7b\u540c\u540d\u6210\u5458\u7684\u65f6\u5019, \u76f4\u63a5\u8bbf\u95ee\u5373\u53ef</li> <li>\u8bbf\u95ee\u7236\u7c7b\u540c\u540d\u6210\u5458\u7684\u65f6\u5019, \u9700\u8981\u52a0\u4f5c\u7528\u57df</li> </ul> <p>\u793a\u4f8b:</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Base{\npublic:\n    Base()\n    {\n        m_a = 100;\n    }\n    void func()\n    {\n        cout &lt;&lt; \"m3\" &lt;&lt; endl;\n    }\n    int m_a;\n};\nclass Son : public Base\n{\npublic:\n    Son()\n    {\n        m_a = 200;\n    }\n    void func()\n    {\n        cout &lt;&lt; \"chipi chipi\" &lt;&lt; endl;\n    }\n    int m_a = 200;\n};\nint main()\n{\n    // \u5229\u7528\u521b\u5efa\u533f\u540d\u51fd\u6570, \u65b9\u4fbf\u6211\u4eec\u76f4\u63a5\u8bbf\u95ee\u6210\u5458\n    cout &lt;&lt; Son().m_a &lt;&lt; endl; // 200    \n    cout &lt;&lt; Son().Base::m_a &lt;&lt; endl; // 100\n    Son().func(); // chipichipi\n    Son().Base::func(); // m3\n    return 0;\n}\n</code></pre> <p>\u8fd9\u91cc\u7684<code>Son().Base::m_a</code>, \u5c31\u662f\u5229\u7528\u4e86\u4f5c\u7528\u57df\u8fdb\u884c\u8bbf\u95ee, \u51fd\u6570\u540c\u7406</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_115","title":"\u7ee7\u627f\u540c\u540d\u9759\u6001\u6210\u5458\u5904\u7406\u65b9\u5f0f","text":"<p>\u95ee\u9898: \u7ee7\u627f\u4e2d\u540c\u540d\u7684\u9759\u6001\u6210\u5458\u5728\u5b50\u7c7b\u5bf9\u8c61\u4e0a\u5982\u4f55\u8fdb\u884c\u8bbf\u95ee</p> <p>\u56de\u987e: \u9759\u6001\u6210\u5458\u53d8\u91cf\u7279\u70b9:</p> <ol> <li>\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u4efd\u6570\u636e</li> <li>\u7f16\u8bd1\u9636\u6bb5\u5206\u914d\u5185\u5b58(\u653e\u5728\u5168\u5c40\u533a)</li> <li>\u7c7b\u5185\u58f0\u660e, \u7c7b\u5916\u521d\u59cb\u5316</li> </ol> <p>\u9759\u6001\u6210\u5458\u51fd\u6570\u7279\u70b9:</p> <ol> <li>\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\u53d8\u91cf</li> <li>\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u4efd\u51fd\u6570\u5b9e\u4f8b</li> </ol> <p>\u9759\u6001\u6210\u5458\u548c\u975e\u9759\u6001\u6210\u5458\u51fa\u73b0\u540c\u540d, \u5904\u7406\u65b9\u5f0f\u4e00\u81f4</p> <ul> <li>\u8bbf\u95ee\u5b50\u7c7b\u540c\u540d\u6210\u5458\u7684\u65f6\u5019, \u76f4\u63a5\u8bbf\u95ee\u5373\u53ef</li> <li>\u8bbf\u95ee\u7236\u7c7b\u540c\u540d\u6210\u5458\u7684\u65f6\u5019, \u9700\u8981\u52a0\u4f5c\u7528\u57df</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_116","title":"\u591a\u7ee7\u627f\u8bed\u6cd5","text":"<p>C++\u4e2d\u5141\u8bb8\u4e00\u4e2a\u7c7b\u7ee7\u627f\u591a\u4e2a\u7c7b</p> <p><code>class \u5b50\u7c7b : \u7ee7\u627f\u65b9\u5f0f \u7236\u7c7b1, \u7ee7\u627f\u65b9\u5f0f \u7236\u7c7b2...</code></p> <p>\u4f46\u662f\u591a\u7ee7\u627f\u53ef\u80fd\u4f1a\u5f15\u53d1\u7236\u7c7b\u4e2d\u6709\u540c\u540d\u6210\u5458\u51fa\u73b0, \u90a3\u4e48\u9700\u8981\u52a0\u4f5c\u7528\u57df\u5373\u53ef(\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d, \u4e0d\u5efa\u8bae\u591a\u7ee7\u627f)</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_117","title":"\u83f1\u5f62\u7ee7\u627f","text":"<p>\u6982\u5ff5:</p> <ul> <li>\u4e24\u4e2a\u6d3e\u751f\u7c7b(B,C)\u7ee7\u627f\u540c\u4e00\u4e2a\u57fa\u7c7b(A)</li> <li>\u53c8\u6709\u67d0\u4e2a\u7c7b(D)\u540c\u65f6\u7ee7\u627f\u4e24\u4e2a\u6d3e\u751f\u7c7b(B,C)</li> </ul> <p>\u8fd9\u79cd\u7ee7\u627f\u79f0\u4e3a\u83f1\u5f62\u7ee7\u627f(\u6216\u8005\u94bb\u77f3\u7ee7\u627f)</p> <p>\u83f1\u5f62\u7ee7\u627f\u95ee\u9898: </p> <ol> <li>D\u4f7f\u7528\u6570\u636e\u7684\u65f6\u5019, \u53ef\u80fd\u4ea7\u751f\u4e8c\u4e49\u6027</li> <li>D\u7ee7\u627f\u4e86\u4e24\u4efdA\u7684\u6570\u636e, \u4f46\u662f\u5176\u5b9e\u6211\u4eec\u6e05\u695a, \u8fd9\u4efd\u6570\u636e\u6211\u4eec\u53ea\u8981\u4e00\u4efd</li> </ol> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u8fd9\u4e24\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u89e3\u51b3\u7684</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass A\n{ // A \u79f0\u4e3a\u865a\u57fa\u7c7b\npublic:\n    int a;\n};\nclass B : virtual public A // \u865a\u7ee7\u627f\n{\n};\nclass C : virtual public A // \u865a\u7ee7\u627f\n{\n};\nclass D : public B, public C\n{\n\n};\nint main()\n{\n    D d;\n    d.B::a = 18;\n    d.C::a = 20;\n    cout &lt;&lt; d.B::a &lt;&lt; endl; // 20(\u5982\u679c\u4e0d\u662f\u865a\u7ee7\u627f, \u90a3\u5c31\u662f18)\n    cout &lt;&lt; d.C::a &lt;&lt; endl; // 20   \u7528\u4f5c\u7528\u57df\u5c31\u80fd\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898(\u5982\u679c\u4e0d\u662f\u865a\u7ee7\u627f)\n    cout &lt;&lt; d.a &lt;&lt; endl;  // 20!(\u8bf4\u660e\u4e24\u4e2aage\u90fd\u662f\u4e00\u4e2a\u6570\u4e86)\n    // \u865a\u7ee7\u627f\u4e4b\u540e, a\u8fd9\u4e2a\u6570\u636e\u53ea\u6709\u4e00\u4e2a\u4e86\n}\n</code></pre> <p>\u4e0d\u662f\u865a\u7ee7\u627f, \u5c31\u4f7f\u7528\u4f5c\u7528\u57df, \u8fd9\u4e00\u70b9\u5341\u5206\u597d\u7406\u89e3</p> <p>\u4f46\u662f\u4e3a\u4ec0\u4e48\u865a\u7ee7\u627f\u4e86\u4e4b\u540e, a\u90fd\u53d8\u6210\u4e86\u4e00\u4e2a\u6570\u5462? \u4e8b\u5b9e\u4e0a, BC\u4e24\u4e2a\u7ee7\u627f\u4e0b\u6765\u7684, \u5176\u5b9e\u662fvbptr(\u865a\u57fa\u7c7b\u6307\u9488)</p> <p>\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u7684\u662fvbtable(\u865a\u57fa\u7c7b\u8868\u683c), \u6240\u4ee521, 22\u4e24\u884c\u5176\u5b9e\u90fd\u662f\u901a\u8fc7\u6307\u9488\u5bf9vbtable\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539</p> <p>\u6240\u4ee5\u6700\u540e\u663e\u793a\u7684\u662f20, \u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u4fee\u6539\u662f22\u884c</p> <p>\u6ce8\u610f: B,C\u91cc\u9762\u4e0d\u80fd\u518d\u5bf9a\u8fdb\u884c\u8d4b\u503c, \u4e00\u65e6\u5982\u6b64, \u6027\u8d28\u5c31\u53d8\u4e86, \u7ee7\u627f\u7684\u5c31\u4e0d\u662fvbptr</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_118","title":"\u591a\u6001","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_119","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u591a\u6001\u662fC++\u9762\u5411\u5bf9\u8c61\u7684\u4e09\u5927\u7279\u6027\u5929\u4e4b\u4e00, \u5206\u4e3a\u4e24\u7c7b:</p> <ul> <li>\u9759\u6001\u591a\u6001: \u51fd\u6570\u91cd\u8f7d\u548c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5c5e\u4e8e\u9759\u6001\u591a\u6001, \u590d\u7528\u51fd\u6570\u540d</li> <li>\u52a8\u6001\u591a\u6001: \u6d3e\u751f\u7c7b\u548c\u865a\u51fd\u6570\u5b9e\u73b0\u8fd0\u884c\u65f6\u591a\u6001</li> </ul> <p>\u533a\u522b: </p> <ul> <li>\u9759\u6001\u591a\u6001\u7684\u51fd\u6570\u5730\u5740\u65e9\u7ed1\u5b9a - \u7f16\u8bd1\u9636\u6bb5\u786e\u5b9a\u51fd\u6570\u5730\u5740</li> <li>\u52a8\u6001\u591a\u6001\u7684\u51fd\u6570\u5730\u5740\u665a\u7ed1\u5b9a - \u8fd0\u884c\u9636\u6bb5\u786e\u5b9a\u51fd\u6570\u5730\u5740</li> </ul> <p>\u4e0a\u9762\u7684\u603b\u7ed3\u8fd8\u662f\u592a\u62bd\u8c61\u4e86, \u4e0b\u9762\u4e3e\u4e2a\u4f8b\u5b50:</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Animal{\npublic:\n    // virtual void speak(), \u8fd9\u5c31\u662f\u89e3\u51b3\u529e\u6cd5!!\n    void speak()\n    {\n        cout &lt;&lt; \"Animal is speaking\" &lt;&lt; endl;\n    }\n};\nclass Cat : public Animal\n{\npublic:\n    void speak()\n    {\n        cout &lt;&lt; \"Cat is speaking\" &lt;&lt; endl;\n    }\n};\nvoid doSpeak(Animal &amp;animal)\n// \u6ce8\u610f! \u8fd9\u91cc\u662fAnimal\u7c7b\u578b\u7684\u5f15\u7528\u4f20\u9012, \u4f46\u662fCat\u6d3e\u751f\u7c7b\u4e5f\u80fd\u4f20\u8fdb\u6765, \u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u77e5\u9053!\n{\n    animal.speak();\n}\nint main()\n{\n    Cat cat;\n    doSpeak(cat); // Animal is speaking \n    return 0;\n}\n</code></pre> <p>\u5f88\u660e\u663e26\u884c\u7684\u8f93\u51fa\u5e76\u4e0d\u662f\u6211\u4eec\u6240\u60f3\u89c1\u5230\u7684, \u4f46\u662f\u4e3a\u4ec0\u4e48\u5462? \u56e0\u4e3a\u5730\u5740\u65e9\u7ed1\u5b9a, \u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u786e\u5b9a\u4e86\u51fd\u6570\u7684\u5730\u5740</p> <p>\u66f4\u8be6\u7ec6\u4e00\u70b9\u6765\u8bf4, doSpeak\u51fd\u6570\u91cc\u9762\u7684animal.speak()\u4e00\u5b9a\u8d70\u7684\u65f6\u5019Animal\u91cc\u9762\u7684speak\u51fd\u6570, \u867d\u7136\u8bf4\u6d3e\u751f\u7c7b\u5141\u8bb8\u4f20\u8fdb\u6765,  \u6240\u4ee5\u4e00\u5b9a\u8c03\u7528\u7684\u662f\u7236\u7c7bAnimal\u91cc\u9762\u7684speak()\u51fd\u6570</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u6837\u7684\u4e8b\u60c5, \u6211\u4eec\u9700\u8981\u5730\u5740\u665a\u7ed1\u5b9a, \u5373\u5728\u8fd0\u884c\u9636\u6bb5\u4e2d, \u6536\u5230\u4e86\u6d3e\u751f\u7c7b, \u518d\u7ed1\u5b9a\u6d3e\u751f\u7c7b\u91cc\u9762\"\u5237\u65b0\u8fc7\u7684\"speak()\u51fd\u6570, \u5728Animal\u91cc\u9762\u7684speak\u51fd\u6570\u524d\u9762\u52a0\u4e0a\u5173\u952e\u8bcdvirtual, \u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u4e86</p> <p>\u5b9e\u8d28: doSpeak\u51fd\u6570\u91cc\u9762\u7684animal.speak()\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u5b9e\u73b0\u4e86\u5730\u5740\u7ed1\u5b9a, \u4ece\u800c\u9020\u6210\u5373\u4f7f\u4f20\u5165\u6d3e\u751f\u7c7b\u5408\u6cd5, \u4f46\u662f\u8c03\u7528\u7684\u6c38\u8fdc\u662fAnimal\u91cc\u9762\u7684speak, \u56e0\u6b64\u7ed9\u8fd9\u4e2a\u51fd\u6570\u52a0\u4e0avirtual, \u8ba9\u5b83\u5728\u8fd0\u884c\u81f3\u8fd9\u91cc\u4e4b\u524d\u90fd\u4e0d\u7ed1\u5b9a\u5730\u5740, \u8fd9\u6837\u4e00\u6765, \u4f20\u5165\u6d3e\u751f\u7c7b\u4e4b\u540e, \u8fd9\u4e2a\u51fd\u6570\u89c1\u673a\u884c\u4e8b, \u5c31\u7ed1\u5b9a\u4e86Cat.speak()\u51fd\u6570\u7684\u5730\u5740, \u4ece\u800c\u89e3\u51b3\u4e86\u95ee\u9898</p> <p>\u5f53virtual\u52a0\u4e0a\u4e86\u4e4b\u540e, Cat\u91cc\u9762\u518d\u5bf9speak\u8fdb\u884c\u7684\u4fee\u6539\u5c31\u53eb\u91cd\u5199, \u5176\u4e2d\u6d3e\u751f\u7c7b\u91cd\u5199\u7684\u65f6\u5019, \u51fd\u6570\u5934\u524d\u9762\u7684virtual\u53ef\u5199\u53ef\u4e0d\u5199</p> <p>\u603b\u7ed3: \u52a8\u6001\u591a\u6001\u6ee1\u8db3\u6761\u4ef6:</p> <ol> <li>\u6709\u7ee7\u627f\u5173\u7cfb</li> <li>\u5b50\u7c7b\u91cd\u5199\u7236\u7c7b\u7684\u865a\u51fd\u6570</li> </ol> <p>\u52a8\u6001\u591a\u6001\u4f7f\u7528: \u7236\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528, \u6267\u884c\u5b50\u7c7b\u5bf9\u8c61</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_120","title":"\u539f\u7406\u5256\u6790","text":"<p>\u91cd\u5199: \u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d \u53c2\u6570\u5217\u8868 \u5b8c\u5168\u4e00\u81f4, \u79f0\u4e3a\u91cd\u5199</p> <p>\u5e95\u5c42\u539f\u7406\u662f\u4ec0\u4e48\u5462? </p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nclass Animal{\npublic:\n    void speak()\n    {\n        cout &lt;&lt; \"Animal is speaking\" &lt;&lt; endl;\n    }\n    virtual void sleep()\n    {\n        cout &lt;&lt; \"Animal is sleeping\" &lt;&lt; endl;\n    }\n};\nclass Cat : public Animal\n{\npublic:\n    void speak()\n    {\n        cout &lt;&lt; \"Cat is speaking\" &lt;&lt; endl;\n    }\n    virtual void sleeping()\n    {\n        cout &lt;&lt; \"Cat is sleeping\" &lt;&lt; endl;\n};\nvoid doSpeak(Animal &amp;animal)\n{\n    animal.speak();\n    animal.sleep();\n}\nint test()\n{\n    cout &lt;&lt; \"sizeof Animal = \" &lt;&lt; sizeof(Animal) &lt;&lt; endl;\n}\nint main()\n{\n    test(); //1+4 = 5, \u56e0\u4e3a\u91cc\u9762\u7684speak\u51fd\u6570\u662f\u975e\u9759\u6001\u6210\u5458, \u662f\u548c\u7c7b\u5bf9\u8c61\u5206\u5f00\u7ed1\u5b9a\u7684, \u56e0\u6b64\u53ea\u6709\u51fd\u6570\u5934\u5360\u4e86\u4e00\u4e2a\u5b57\u8282\u4ee5\u505a\u533a\u5206     // \u8fd9\u91cc\u76844\u5c31\u662fsleep\u51fd\u6570\u4e86, \u90a3\u4e48\u8fd9\u91cc\u76844\u4e2a\u5b57\u8282\u5c31\u4ee3\u8868: \u6307\u9488!!\n    return 0;\n}\n</code></pre> <p>Animal\u7c7b\u5185\u90e8, \u865a\u51fd\u6570\u90fd\u662f\u4ee5vfptr(\u865a\u51fd\u6570\u6307\u9488)\u5b58\u50a8, \u8fd9\u4e9b\u6307\u9488\u6307\u5411\u7684\u662fvftable, \u8fd9\u4e2atable\u91cc\u9762\u8bb0\u5f55\u7740\u865a\u51fd\u6570\u7684\u5730\u5740</p> <p><code>Animal::$vftable@</code>\u91cc\u9762: <code>&amp;Animal :: sleep()</code></p> <p>\u5f53\u5b50\u7c7b\u91cd\u5199\u7236\u7c7b\u7684\u865a\u51fd\u6570, \u5b50\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u8868\u4ee5\u53ca\u5185\u90e8\u4f1a\u66ff\u6362\u6210\u5b50\u7c7b\u7684\u865a\u51fd\u6570\u5730\u5740(\u7236\u7c7b\u7684table\u4e0d\u4f1a\u53d8\u5316)</p> <p><code>Cat::$vftable@</code>\u91cc\u9762: <code>&amp;Animal :: sleep()</code></p> <p>\u5f53\u7236\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u65f6\u5019, \u53d1\u751f\u591a\u6001; \u4f20cat\u65f6, \u76f8\u5f53\u4e8e\u53d1\u751f\u4e86: Animal &amp;animal = cat, \u56e0\u6b64\u8c03\u7528\u7684\u65f6\u5019\u8d70Cat\u865a\u51fd\u6570\u8868, \u800c\u4e0d\u4f1a\u8d70\u7236\u7c7b\u7684</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_121","title":"\u591a\u6001\u4f18\u70b9","text":"<p>C++\u5f00\u53d1\u4e2d\u63d0\u5021\u5229\u7528\u591a\u6001\u8bbe\u8ba1\u7a0b\u5e8f\u6846\u67b6, \u56e0\u4e3a\u591a\u6001\u4f18\u70b9\u5f88\u591a</p> <p>\u591a\u6001\u7684\u4f18\u70b9:</p> <ul> <li>\u4ee3\u7801\u7ed3\u6784\u7ec4\u7ec7\u6e05\u6670</li> <li>\u53ef\u8bfb\u6027\u5f3a</li> <li>\u5229\u7528\u524d\u671f\u548c\u540e\u671f\u7684\u6269\u5c55\u4ee5\u53ca\u7ef4\u62a4</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_122","title":"\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b","text":"<p>\u5728\u591a\u6001\u4e2d, \u901a\u5e38\u7236\u7c7b\u4e2d\u865a\u51fd\u6570\u7684\u5b9e\u73b0\u662f\u6beb\u65e0\u610f\u4e49\u7684, \u4e3b\u8981\u90fd\u662f\u8c03\u7528\u5b50\u7c7b\u91cd\u5199\u7684\u5185\u5bb9</p> <p>\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u865a\u51fd\u6570\u6539\u4e3a\u7eaf\u865a\u51fd\u6570</p> <p>\u8bed\u6cd5: <code>`virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d (\u53c2\u6570\u5217\u8868) = 0;</code>    \u5f53\u7c7b\u4e2d\u6709\u4e86\u7eaf\u865a\u51fd\u6570, \u6211\u4eec\u79f0\u4e4b\u4e3a\u62bd\u8c61\u7c7b</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u51fd\u6570\u76f4\u63a5\u6ca1\u6709\u51fd\u6570\u4f53, \u5c31\u662f\u56e0\u4e3a\u6211\u6839\u672c\u7528\u4e0d\u5230\u5b83, \u6211\u53ea\u662f\u60f3\u8bf4\u660e, \u8fd9\u4e2a\u62bd\u8c61\u7684\u4e1c\u897f\u662f\u5b50\u7c7b\u5171\u6709\u7684</p> <p>\u62bd\u8c61\u7c7b\u7279\u70b9:</p> <ol> <li>\u65e0\u6cd5\u5b9e\u4f8b\u5316\u5bf9\u8c61</li> <li>\u5b50\u7c7b\u5fc5\u987b\u91cd\u5199\u62bd\u8c61\u7c7b\u4e2d\u7684\u7eaf\u865a\u51fd\u6570, \u5426\u5219\u4e5f\u5c5e\u4e8e\u62bd\u8c61\u7c7b</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_123","title":"\u865a\u6790\u6784\u548c\u7eaf\u865a\u6790\u6784","text":"<p>\u591a\u6001\u4f7f\u7528\u65f6, \u5982\u679c\u5b50\u7c7b\u4e2d\u6709\u5c5e\u6027\u5f00\u8f9f\u5230\u5806\u533a, \u90a3\u4e48\u7236\u7c7b\u6307\u9488\u5728\u91ca\u653e\u65f6\u65e0\u6cd5\u8c03\u7528\u5230\u5b50\u7c7b\u7684\u6790\u6784\u4ee3\u7801</p> <p>\u89e3\u51b3\u65b9\u5f0f: \u5c06\u7236\u7c7b\u4e2d\u7684\u6790\u6784\u51fd\u6570\u6539\u4e3a\u865a\u6790\u6784\u6216\u8005\u7eaf\u865a\u6790\u6784</p> <p>\u865a\u6790\u6784\u548c\u7eaf\u865a\u6790\u6784\u5171\u6027:</p> <ul> <li>\u53ef\u4ee5\u89e3\u51b3\u7236\u7c7b\u6307\u9488\u91ca\u653e\u5b50\u7c7b\u5bf9\u8c61</li> <li>\u90fd\u9700\u8981\u6709\u5177\u4f53\u7684\u51fd\u6570\u5b9e\u73b0</li> </ul> <p>\u533a\u522b: \u5982\u679c\u662f\u7eaf\u865a\u6790\u6784, \u90a3\u4e48\u8be5\u7c7b\u5c5e\u4e8e\u62bd\u8c61\u7c7b, \u65e0\u6cd5\u5b9e\u4f8b\u5316\u5bf9\u8c61</p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nclass Animal{\npublic:\n    Animal()\n    {\n        cout &lt;&lt; \"The construction of Animal\" &lt;&lt; endl;\n    }\n    // \u5982\u679c\u662f virtual ~Animal(), \u90a3\u4e48Cat\u5c31\u53ef\u4ee5\u6b63\u5e38\u6790\u6784\u4e86\n    ~Animal()\n    {\n        cout &lt;&lt; \"The destruction of Animal\" &lt;&lt; endl;\n    }\n    virtual void speak() = 0; // \u7eaf\u865a\u51fd\u6570\n};\nclass Cat : public Animal\n{\npublic:\n    Cat (string name)\n    {\n        cout &lt;&lt; \"The construction of Cat\" &lt;&lt; endl;\n        m_name = new string(name)\n    }\n     virtual void speak()\n    {\n        cout &lt;&lt; *m_name &lt;&lt; \"Cat is speaking\" &lt;&lt; endl;\n    }\n    string m_name;\n    ~Cat()\n    {\n        if (m_name != NULL)\n        {\n            cout &lt;&lt; \"destruction of Cat\" &lt;&lt; endl;\n            delete m_name;\n            m_name = NULL;\n        }\n    }\n};\nvoid test()\n{\n    Animal * animal = new Cat(\"Tom\"); // \u7528\u7236\u7c7b\u6307\u9488\u5728\u5806\u533a\u521b\u5efaCat\u5bf9\u8c61\n    animal-&gt;speak(); // \u901a\u8fc7\u6307\u9488\u8c03\u7528\n    delete animal; // \u5806\u53d6\u6570\u636e\u624b\u52a8\u91ca\u653e\n}\nint main()\n{\n    test();\n    // The construction of Animal\n    // The construction of Cat\n    // TomCat is speaking\n    // The destruction of Animal\n    return 0;\n}\n</code></pre> <p>\u53d1\u73b0\u6ca1\u6709destruction of Cat! \u8bf4\u660e\u5806\u53d6\u6570\u636e\u6839\u672c\u6ca1\u6709\u91ca\u653e!</p> <p>\u95ee\u9898\u5728\u4e8e: \u7236\u7c7b\u6307\u9488\u5728\u6790\u6784\u7684\u65f6\u5019(44\u884c), \u4e0d\u4f1a\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684\u6790\u6784\u51fd\u6570, \u56e0\u6b64\u6211\u4eec\u8981\u628a\u7236\u7c7b\u4e2d\u7684\u6790\u6784\u6539\u4e3a\u865a\u6790\u6784(10\u884c)</p> <p>\u4f46\u662f\u6ce8\u610f: \u4e0d\u80fd\u76f4\u63a5\u4ec5\u7528<code>virtual ~Animal() = 0;</code> \u56e0\u4e3a\u7236\u7c7b\u4e2d\u4e5f\u53ef\u80fd\u6709\u9700\u8981\u91ca\u653e\u7684\u5806\u53d6\u6570\u636e, \u800c\u8fd9\u53e5\u8bdd\u538b\u6839\u513f\u6ca1\u6709\u51fd\u6570\u4f53(\u9700\u8981\u6709\u5177\u4f53\u7684\u51fd\u6570\u5b9e\u73b0); \u56e0\u6b64\u6211\u4eec\u628a\u5b83\u89c6\u4e3a\u4e00\u79cd\u58f0\u660e, \u9664\u4e86\u4e0a\u9762\u8fd9\u53e5\u8bdd\u4e4b\u5916, \u5728\u7c7b\u5916\u8fd8\u8981\u8fdb\u884c\u5b9a\u4e49:</p> <pre><code>Animal :: ~Animal()\n{\n    cout &lt;&lt; \"Another kind of destruction of Animal\" &lt;&lt; endl;\n}\n// \u9644: \u6709\u4e86\u7eaf\u865a\u6790\u6784, \u90a3\u4e48\u5c31\u4f1a\u4f7f\u5f97\u8fd9\u4e2a\u7c7b\u53d8\u6210\u62bd\u8c61\u7c7b, \u65e0\u6cd5\u5b9e\u4f8b\u5316\u5bf9\u8c61\n</code></pre> <p>\u603b\u7ed3:</p> <ol> <li>\u865a\u6790\u6784\u6216\u7eaf\u865a\u6790\u6784\u5c31\u662f\u7528\u6765\u89e3\u51b3\u901a\u8fc7\u7236\u7c7b\u6307\u9488\u91ca\u653e\u5b50\u7c7b\u5bf9\u8c61</li> <li>\u5982\u679c\u5b50\u7c7b\u4e2d\u6ca1\u6709\u5806\u53d6\u6570\u636e, \u53ef\u4ee5\u4e0d\u5199\u4e3a\u865a\u6790\u6784\u6216\u7eaf\u865a\u6790\u6784</li> <li>\u62e5\u6709\u7eaf\u865a\u6790\u6784\u51fd\u6570\u7684\u7c7b\u4e5f\u5c5e\u4e8e\u62bd\u8c61\u7c7b</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#c_4","title":"C++\u81ea\u5b66\u2014\u2014\u63d0\u9ad8\u7f16\u7a0b","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_124","title":"\u6a21\u677f","text":"<p>\u6a21\u677f\u5c31\u662f\u5efa\u7acb\u901a\u7528\u7684\u6a21\u5177, \u5927\u5927\u63d0\u9ad8\u590d\u7528\u6027</p> <p>\u7279\u70b9:</p> <ul> <li>\u6a21\u677f\u4e0d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528, \u5b83\u53ea\u662f\u4e00\u4e2a\u6846\u67b6</li> <li>\u6a21\u677f\u7684\u901a\u7528\u5e76\u4e0d\u662f\u4e07\u80fd\u7684</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_125","title":"\u51fd\u6570\u6a21\u677f","text":"<p>C++\u53e6\u4e00\u79cd\u7f16\u7a0b\u601d\u60f3\u79f0\u4e3a\u6cdb\u578b\u7f16\u7a0b, \u4e3b\u8981\u5229\u7528\u7684\u6280\u672f\u5c31\u662f\u6a21\u677f</p> <p>C++\u63d0\u4f9b\u4e24\u79cd\u6a21\u677f\u673a\u5236: \u51fd\u6570\u6a21\u677f\u548c\u7c7b\u6a21\u677f</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_126","title":"\u51fd\u6570\u6a21\u677f\u6982\u5ff5","text":"<p>\u51fd\u6570\u6a21\u677f\u4f5c\u7528: \u5efa\u7acb\u4e00\u4e2a\u901a\u7528\u51fd\u6570, \u5176\u51fd\u6570\u8fd4\u56de\u503c\u548c\u5f62\u53c2\u7c7b\u578b\u53ef\u4ee5\u4e0d\u5177\u4f53\u5236\u5b9a, \u7528\u4e00\u4e2a\u865a\u62df\u7684\u7c7b\u578b\u6765\u4ee3\u8868</p> <pre><code>// \u51fd\u6570\u6a21\u677f\u8bed\u6cd5\ntemplate&lt;typename T&gt;\n\u51fd\u6570\u58f0\u660e\u6216\u5b9a\u4e49\n</code></pre> <p>\u5176\u4e2d: template  \u58f0\u660e\u521b\u5efa\u6a21\u677f</p> <p>typename    \u8868\u660e\u5176\u540e\u9762\u7684\u7b26\u53f7\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b, \u53ef\u4ee5\u7528class\u4ee3\u66ff</p> <p>T     \u901a\u7528\u7684\u6570\u636e\u7c7b\u578b, \u540d\u79f0\u53ef\u4ee5\u66ff\u6362, \u901a\u5e38\u4e3a\u5927\u5199\u5b57\u6bcd(\u522b\u7684\u5927\u5199\u5b57\u6bcd\u4e5f\u53ef\u4ee5, \u4f46\u662fT\u66f4\u4e3a\u5e38\u7528)</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\n// \u5b9e\u73b0\u4e24\u4e2a\u6574\u5f62,\u6d6e\u70b9\u578b\u7684\u51fd\u6570\u6a21\u677f\ntemplate&lt;typename T&gt;\nvoid mySwap(T &amp;a, T &amp;b) // \u6ce8\u610f\u662f\u5f15\u7528\u4f20\u9012\n{\n    T temp = b;\n    b = a;\n    a = temp;\n}\nvoid test()\n{\n    int a = 10;\n    int b = 20;\n    double c = 1.1;\n    double d = 2.2;\n    // \u6709\u4e24\u79cd\u65b9\u5f0f\u4f7f\u7528\u51fd\u6570\u6a21\u677f\n    mySwap(a, b); // \u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc\n    mySwap&lt;double&gt;(c, d); // \u663e\u793a\u662f\u6307\u5b9a\u7c7b\u578b\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\n    cout &lt;&lt; c &lt;&lt; \" \" &lt;&lt; d &lt;&lt; endl;\n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_127","title":"\u51fd\u6570\u6a21\u677f\u6ce8\u610f\u4e8b\u9879","text":"<p>\u6ce8\u610f\u4e8b\u9879:</p> <ul> <li>\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc, \u5fc5\u987b\u63a8\u5bfc\u51fa\u4e00\u81f4\u7684\u6570\u636e\u7c7b\u578bT, \u624d\u53ef\u4ee5\u4f7f\u7528</li> <li>\u6a21\u677f\u5fc5\u987b\u786e\u5b9a\u51faT\u7684\u6570\u636e\u7c7b\u578b, \u624d\u53ef\u4ee5\u4f7f\u7528</li> </ul> <p>\u7b2c\u4e00\u70b9\u5341\u5206\u5bb9\u6613\u8ba4\u540c, \u7b2c\u4e8c\u70b9\u4e3e\u4f8b\u5982\u4e0b:</p> <pre><code>template &lt;class T&gt; // typename\u53ef\u4ee5\u6362\u6210class\nvoid func()\n{\n    cout &lt;&lt; \"func()\" &lt;&lt; endl;\n}\nvoid test()\n{\n    func(); // \u76f4\u63a5\u62a5\u9519, \u7f16\u8bd1\u5668\u4e0d\u77e5\u9053T\u662f\u4ec0\u4e48\n    func&lt;int&gt;(); // \u5408\u6cd5, \u544a\u8bc9\u4e86\u7f16\u8bd1\u5668, T\u662fint\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_128","title":"\u6848\u4f8b","text":"<p>\u6848\u4f8b\u63cf\u8ff0:</p> <ul> <li>\u5229\u7528\u51fd\u6570\u6a21\u677f\u5c01\u88c5\u4e00\u4e2a\u6392\u5e8f\u51fd\u6570, \u53ef\u4ee5\u5bf9\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f</li> <li>\u6392\u5e8f\u89c4\u5219\u4ece\u5927\u5230\u5c0f, \u6392\u5e8f\u7b97\u6cd5\u4e3a\u9009\u62e9\u6392\u5e8f</li> <li>\u5206\u522b\u5229\u7528char\u6570\u7ec4\u548cint\u6570\u7ec4\u8fdb\u884c\u6d4b\u8bd5</li> </ul> <pre><code># include &lt;iostream&gt;\nusing namespace std;\n// \u4ea4\u6362\u6a21\u677f\ntemplate&lt;class T&gt;\nvoid mySwap(T &amp;a, T &amp;b)\n{\n    T temp = b;\n    b = a;\n    a = temp;\n}\n// \u6392\u5e8f\u7b97\u6cd5\u6a21\u677f\ntemplate &lt;class T&gt;\nvoid mySort(T arr[], int len) // \u4e24\u79cd\u6570\u7ec4\n{\n    for(int i = 0; i &lt; len; i++)\n    {\n        int max = i;\n        for (int j = i+1 ; j &lt; len ; j++)\n        {\n            if(arr[max] &lt; arr[j]) // \u8ba4\u5b9a\u7684\u6700\u5927\u503c\u6bd4\u904d\u5386\u7684\u6700\u5927\u503c\u5c0f, \u8bf4\u660ej\u4e0b\u6807\u5143\u7d20\u624d\u662f\u771f\u6b63\u7684\u6700\u5927\u503c\n            {\n                max = j;\n            }\n        }\n        if (max != i) \n        {\n            mySwap(arr[max], arr[i]);\n        }\n    }\n}\ntemplate &lt;class T&gt;\nvoid printArr(T Arr, int len_Arr)\n{\n    for (int i = 0; i &lt; len_Arr; i++)\n    {\n        cout &lt;&lt; Arr[i] &lt;&lt; \" \";\n    }  \n}\nvoid test1()\n{\n    char charArr[] = \"badcfe\";\n    int len_charArr = sizeof(charArr) / sizeof(char);\n    mySort(charArr, len_charArr);\n    printArr(charArr, len_charArr);\n}\nvoid test2()\n{\n    int intArr[] = {7,4,5,3,9,0,1,8};\n    int len_intArr = sizeof(intArr) / sizeof(int);\n    mySort(intArr, len_intArr);\n    printArr(intArr, len_intArr);\n}\nint main()\n{\n    cout &lt;&lt; ('c' &lt; 'd') &lt;&lt; endl; // 1, \u8bf4\u660e\u6bd4\u8f83\u8fd0\u7b97\u7b26\u80fd\u6bd4\u8f83\u5b57\u7b26\u95f4\u7684\u5927\u5c0f\n    test1();\n    cout &lt;&lt; endl;\n    test2();\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_129","title":"\u603b\u7ed3: \u666e\u901a\u51fd\u6570\u4e0e\u51fd\u6570\u6a21\u677f\u7684\u533a\u522b","text":"<ol> <li>\u666e\u901a\u51fd\u6570\u8c03\u7528\u53ef\u4ee5\u53d1\u751f\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362</li> <li>\u51fd\u6570\u6a21\u677f: \u7528\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc, \u4e0d\u53ef\u4ee5\u53d1\u751f\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362</li> <li>\u51fd\u6570\u6a21\u677f: \u7528\u663e\u793a\u6307\u5b9a\u7c7b\u578b, \u53ef\u4ee5\u53d1\u751f\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362</li> </ol> <p>\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u4f8b\u5b50: char c = 'c';   \u5728int\u52a0\u51cf\u4e2d, c\u4f1a\u8f6c\u5316\u4e3a99(ASCII\u7801)</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_130","title":"\u666e\u901a\u51fd\u6570\u4e0e\u51fd\u6570\u6a21\u677f\u7684\u8c03\u7528\u89c4\u5219","text":"<p>\u8c03\u7528\u89c4\u5219\u5982\u4e0b:</p> <ol> <li>\u5982\u679c\u51fd\u6570\u6a21\u677f\u548c\u666e\u901a\u51fd\u6570\u90fd\u53ef\u4ee5\u5b9e\u73b0, \u90a3\u4e48\u4f18\u5148\u8c03\u7528\u666e\u901a\u51fd\u6570</li> <li>\u53ef\u4ee5\u901a\u8fc7\u7a7a\u6a21\u677f\u53c2\u6570\u5217\u8868\u6765\u5f3a\u8c03\u51fd\u6570\u6a21\u677f</li> <li>\u51fd\u6570\u6a21\u677f\u4e5f\u53ef\u4ee5\u53d1\u751f\u91cd\u8f7d</li> <li>\u5982\u679c\u51fd\u6570\u6a21\u677f\u53ef\u4ee5\u4ea7\u751f\u66f4\u597d\u7684\u5339\u914d, \u4f18\u5148\u8c03\u7528\u51fd\u6570\u6a21\u677f</li> <li>\u5141\u8bb8\u666e\u901a\u51fd\u6570\u548c\u6a21\u677f\u4e2d\u7684\u51fd\u6570\u91cd\u540d</li> </ol> <p>\u4e0a\u9762\u8bf4\u7684\u90fd\u5f88\u7384\u5b66, \u4e0b\u9762\u4e3e\u4f8b:</p> <pre><code># include &lt;iostream&gt;\nusing namespace std;\nvoid Myprint(int a, int b)\n{\n    cout &lt;&lt; \"ordinary Myprint\" &lt;&lt; endl;\n}\ntemplate &lt;class T&gt;\nvoid Myprint(T a, T b)\n{\n    cout &lt;&lt; \"Template Myprint\" &lt;&lt; endl;\n}\ntemplate &lt;class T&gt;\nvoid Myprint(T a, T b, T c)\n{\n    cout &lt;&lt; \"Re-Template Myprint\" &lt;&lt; endl;\n}\nvoid test1\n{\n    int a = 10;\n    int b = 20;\n    float c = 1.1;\n    float d = 11.4514;\n    char c1 = 'x';\n    char c2 = 'y';\n    Myprint(a, b);\n    Myprint&lt;&gt;(a, b);\n    Myprint(c, d);\n    Myprint(a, b, 100);\n    Myprint(c1, c2);\n}\nint main()\n{\n    test1();\n    // ordinary Myprint    \u8bf4\u660e\u5982\u679c\u51fd\u6570\u6a21\u677f\u548c\u666e\u901a\u51fd\u6570\u90fd\u53ef\u4ee5\u5b9e\u73b0, \u90a3\u4e48\u4f18\u5148\u8c03\u7528\u666e\u901a\u51fd\u6570\n    // Template Myprint    \u8bf4\u660e\u53ef\u4ee5\u901a\u8fc7\u7a7a\u6a21\u677f\u53c2\u6570\u5217\u8868\u6765\u5f3a\u8c03\u51fd\u6570\u6a21\u677f\n    // Template Myprint    \u8fd9\u662f\u56e0\u4e3a\u53ea\u6709\u6a21\u677f\u4e2d\u7684\u80fd\u548c\u5b83\u5339\u914d\n    // Template Myprint    \u8bf4\u660e\u51fd\u6570\u6a21\u677f\u4e5f\u53ef\u4ee5\u53d1\u751f\u91cd\u8f7d\n    // Template Myprint    \u867d\u7136\u4f20\u5165\u4e24\u4e2a\u5b57\u7b26, \u666e\u901a\u51fd\u6570\u4e5f\u53ef\u4ee5\u8c03\u7528(\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362), \u4f46\u662f\u660e\u663e\u6a21\u677f\u66f4\u597d\n    // \u8bf4\u660e\u5982\u679c\u51fd\u6570\u6a21\u677f\u53ef\u4ee5\u4ea7\u751f\u66f4\u597d\u7684\u5339\u914d, \u4f18\u5148\u8c03\u7528\u51fd\u6570\u6a21\u677f\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_131","title":"\u6a21\u677f\u7684\u5c40\u9650\u6027","text":"<p>\u6a21\u677f\u901a\u7528\u6027\u5e76\u4e0d\u662f\u4e07\u80fd\u7684, \u4f8b\u5982: </p> <pre><code>template &lt;typename T&gt;\nvoid f(T &amp;a, T b) // \u7ed9a\u8d4b\u503c\n{\n    a = b;\n}\n</code></pre> <p>\u5728\u4e0a\u8ff0\u7684\u4ee3\u7801\u4e2d, \u5982\u679ca, b\u90fd\u662f\u6570\u7ec4\u7684\u8bdd, \u90a3\u5c31\u65e0\u6cd5\u5b9e\u73b0\u4e86</p> <p>\u6216\u8005\u8bf4:</p> <pre><code>template &lt;class T&gt;\nvoid same(T &amp;a, T &amp;b)\n{\n    if (a == b)\n    {\n        cout &lt;&lt; \"They are the same\" &lt;&lt; endl;\n    }\n    else\n    {\n        cout &lt;&lt; \"They are not the same\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u4e0a\u9762\u5982\u679c\u4f20\u5165\u7684\u662fPerson\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b, \u90a3\u5c31GG\u4e86</p> <pre><code>class Person\n{\npublic:\n    Person(int num)\n    {\n        age = num;\n    }\n    int age;\n};\ntemplate &lt;class T&gt;\nvoid same(T &amp;a, T &amp;b)\n{\n    if (a == b)\n    {\n        cout &lt;&lt; \"They are the same\" &lt;&lt; endl;\n    }\n    else\n    {\n        cout &lt;&lt; \"They are not the same\" &lt;&lt; endl;\n    }\n}\ntemplate&lt;&gt; void same(Person &amp;a, Person &amp;b)\n{\n    if (a.age == b.age)\n    {\n        cout &lt;&lt; \"They are the same\" &lt;&lt; endl;\n    }\n    else\n    {\n        cout &lt;&lt; \"They are not the same\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u76f8\u5f53\u4e8e\u544a\u8bc9\u4e86\u6a21\u677f: \u5982\u679c\u6570\u636e\u7c7b\u578b\u662fPerson, \u7f16\u8bd1\u5668\u5e94\u8be5\u600e\u4e48\u64cd\u4f5c</p> <p>\u603b\u7ed3:</p> <ul> <li>\u5229\u7528\u5177\u4f53\u5316\u7684\u6a21\u677f, \u53ef\u4ee5\u89e3\u51b3\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u901a\u7528\u5316</li> <li>\u5b66\u4e60\u6a21\u677f\u5e76\u4e0d\u662f\u4e3a\u4e86\u5199\u6a21\u677f, \u800c\u662f\u5728STL\u80fd\u591f\u8fd0\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u6a21\u677f</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_132","title":"\u7c7b\u6a21\u677f","text":"<p>\u8fd9\u4e2a\u6682\u65f6\u4e0d\u63a5\u89e6, \u5148\u7ee7\u7eed\u63a8\u8fdb\u4e4b\u540e\u7684\u5185\u5bb9</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#stl","title":"STL\u521d\u8bc6","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_133","title":"\u4e00\u4e9b\u57fa\u672c\u7684\u4e1c\u897f","text":"<p>STL\u7684\u8bde\u751f:</p> <ul> <li>\u957f\u4e45\u4ee5\u6765, \u8f6f\u4ef6\u754c\u4e00\u76f4\u60f3\u5efa\u7acb\u4e00\u79cd\u53ef\u91cd\u590d\u5229\u7528\u7684\u4e1c\u897f</li> <li>C++\u7684\u9762\u5411\u5bf9\u8c61\u548c\u6cdb\u578b\u7f16\u7a0b\u601d\u60f3, \u76ee\u7684\u5c31\u662f\u590d\u7528\u6027\u7684\u63d0\u5347</li> <li>\u5927\u591a\u60c5\u51b5\u4e0b, \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u90fd\u672a\u80fd\u6709\u4e00\u5957\u6807\u51c6, \u5bfc\u81f4\u88ab\u8feb\u4ece\u4e8b\u5927\u91cf\u91cd\u590d\u5de5\u4f5c</li> <li>\u4e3a\u4e86\u5efa\u7acb\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u4e00\u5957\u6807\u51c6, \u8bde\u751f\u4e86STL</li> </ul> <p>\u57fa\u672c\u6982\u5ff5: </p> <ul> <li>Standard Template Library   \u6807\u51c6\u6a21\u7248\u5e93</li> <li>STL\u5e7f\u4e49\u4e0a\u5206\u4e3a: \u5bb9\u5668(container), \u7b97\u6cd5(algorithm), \u8fed\u4ee3\u5668(iterator)</li> <li>\u5bb9\u5668\u548c\u7b97\u6cd5\u4e4b\u95f4\u901a\u8fc7\u8fed\u4ee3\u5668\u8fdb\u884c\u65e0\u7f1d\u8fde\u63a5</li> <li>STL\u51e0\u4e4e\u6240\u6709\u7684\u4ee3\u7801\u90fd\u91c7\u7528\u4e86\u6a21\u677f\u7c7b\u6216\u8005\u6a21\u677f\u51fd\u6570</li> </ul> <p>\u516d\u5927\u7ec4\u4ef6: </p> <ol> <li>\u5bb9\u5668: \u5404\u79cd\u6570\u636e\u7ed3\u6784: \u5982vector, list, deque, set, map</li> <li>\u7b97\u6cd5: \u5404\u79cd\u5e38\u7528\u7684\u7b97\u6cd5: sort, find, copy, for_each</li> <li>\u8fed\u4ee3\u5668: \u626e\u6f14\u4e86\u5bb9\u5668\u548c\u7b97\u6cd5\u4e4b\u95f4\u7684\u80f6\u5408\u5242</li> <li>\u4eff\u51fd\u6570: \u884c\u4e3a\u7c7b\u4f3c\u51fd\u6570, \u53ef\u4f5c\u4e3a\u7b97\u6cd5\u7684\u67d0\u79cd\u7b56\u7565</li> <li>\u9002\u914d\u5668: \u4e00\u79cd\u7528\u6765\u4fee\u9970\u5bb9\u5668\u6216\u8005\u4eff\u51fd\u6570\u6216\u8fed\u4ee3\u5668\u63a5\u53e3\u7684\u4e1c\u897f</li> <li>\u7a7a\u95f4\u9002\u914d\u5668: \u8d1f\u8d23\u7a7a\u95f4\u7684\u914d\u7f6e\u4e0e\u7ba1\u7406</li> </ol> <p>\u5176\u4e2d, \u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784: \u6570\u7ec4, \u94fe\u8868, \u6811, \u6808, \u961f\u5217, \u96c6\u5408, \u6620\u5c04\u8868</p> <p>\u8fd9\u4e9b\u5bb9\u5668\u5206\u4e3a\u4e24\u79cd:</p> <ul> <li>\u5e8f\u5217\u5f0f\u5bb9\u5668: \u5f3a\u8c03\u503c\u7684\u6392\u5e8f, \u5e8f\u5217\u5f0f\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5747\u6709\u56fa\u5b9a\u7684\u4f4d\u7f6e</li> <li>\u5173\u8054\u662f\u5bb9\u5668: \u4e8c\u53c9\u6811\u7ed3\u6784, \u5404\u5143\u7d20\u4e4b\u95f4\u6ca1\u6709\u4e25\u683c\u7684\u7269\u7406\u4e0a\u7684\u987a\u5e8f\u5173\u7cfb</li> </ul> <p>\u7b97\u6cd5\u5206\u4e3a:</p> <ul> <li>\u8d28\u53d8\u7b97\u6cd5: \u6307\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u66f4\u6539\u533a\u95f4\u5185\u7684\u5143\u7d20\u7684\u5185\u5bb9, \u4f8b\u5982\u62f7\u8d1d, \u66ff\u6362, \u5220\u9664</li> <li>\u975e\u8d28\u53d8\u7b97\u6cd5: \u6307\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u66f4\u6539\u533a\u95f4\u5185\u7684\u5143\u7d20\u7684\u5185\u5bb9, \u4f8b\u5982\u67e5\u627e, \u8ba1\u6570, \u904d\u5386, \u5bfb\u627e\u6781\u503c</li> </ul> <p>\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5, \u4f7f\u4e4b\u80fd\u8fc7\u4f9d\u5e8f\u5bfb\u8bbf\u67d0\u4e2a\u5bb9\u5668\u4e2d\u6240\u542b\u7684\u5404\u4e2a\u5143\u7d20, \u800c\u53c8\u65e0\u9700\u66b4\u9732\u8be5\u5bb9\u5668\u7684\u5185\u90e8\u8868\u793a\u65b9\u5f0f</p> <p>\u6bcf\u4e2a\u5bb9\u5668\u90fd\u6709\u81ea\u5df1\u4e13\u5c5e\u7684\u8fed\u4ee3\u5668, \u8fd9\u79cd\u8fed\u4ee3\u5668\u975e\u5e38\u7c7b\u4f3c\u4e8e\u6307\u9488, \u521d\u59cb\u9636\u6bb5\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u6307\u9488</p> <p>STL\u5185\u5bb9\u5f88\u591a, \u6b64\u5904\u53ea\u5b66\u4e60string\u548cvector\u5bb9\u5668</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#string","title":"string","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_134","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>\u672c\u8d28: string\u662fC++\u98ce\u683c\u7684\u5b57\u7b26\u4e32, \u800cstring\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u7c7b</p> <p>string\u548cchar*\u7684\u533a\u522b:</p> <ul> <li>char* \u662f\u4e00\u4e2a\u6307\u9488</li> <li>string \u662f\u4e00\u4e2a\u7c7b, \u7c7b\u5185\u90e8\u5c01\u88c5\u4e86char, \u7ba1\u7406\u8fd9\u4e2a\u5b57\u7b26\u4e32, \u662f\u4e00\u4e2achar\u578b\u7684\u5bb9\u5668</li> </ul> <p>\u7279\u70b9:  string\u7c7b\u5185\u90e8\u5c01\u88c5\u4e86\u5f88\u591a\u6210\u5458\u65b9\u6cd5</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#string_1","title":"string\u6784\u9020\u51fd\u6570","text":"<p>\u6784\u9020\u51fd\u6570\u539f\u578b:</p> <p><code>string(); // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u7b26\u4e32</code></p> <p><code>string(const char* s); // \u4f7f\u7528\u5b57\u7b26\u4e32s\u521d\u59cb\u5316</code></p> <p><code>string(const string&amp; str) // \u4f7f\u7528\u4e00\u4e2astring\u5bf9\u8c61\u521d\u59cb\u5316\u53e6\u4e00\u4e2astring\u5bf9\u8c61</code></p> <p><code>string(int n, char c) // \u4f7f\u7528n\u4e2a\u5b57\u7b26c\u521d\u59cb\u5316</code></p> <pre><code># include &lt;iostream&gt;\n# include &lt;string&gt;\nusing namespace std;\nvoid test()\n{\n    string s1; // \u9ed8\u8ba4\u6784\u9020, \u76f8\u5f53\u4e8estring s1();\n    const char* str = \"Hello World\";\n    string s2(str);\n    cout &lt;&lt; s2 &lt;&lt; endl;\n    string(s2); // \u7c7b\u4f3c\u4e8e\u62f7\u8d1d\u6784\u9020\n    cout &lt;&lt; s3 &lt;&lt; endl;\n    string s4(4, 'a');\n    cout &lt;&lt; s4 &lt;&lt; endl;\n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#string_2","title":"string\u8d4b\u503c\u64cd\u4f5c","text":"<p>\u529f\u80fd\u63cf\u8ff0: \u7ed9string\u5b57\u7b26\u4e32\u8fdb\u884c\u8d4b\u503c</p> <pre><code>string&amp; operator=(const char* s); //char*\u7c7b\u578b\u5b57\u7b26\u4e32\u8d4b\u503c\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32\nstring&amp; operator=(const string &amp;s); // \u628as\u8d4b\u7ed9\u5f53\u524d\u7684\u5b57\u7b26\u4e32\nstring&amp; operator=(char c); // \u628a\u5f53\u524d\u5b57\u7b26\u8d4b\u7ed9\u5f53\u524d\u7684\u5b57\u7b26\u4e32\nstring&amp; assign(const char* s); // \u628a\u5b57\u7b26\u4e32s\u8d4b\u503c\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32\nstring&amp; assign(const char* s, int n); // \u628a\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u524dn\u4e2a\u8d4b\u503c\u7ed9\u5b57\u7b26\u4e32\nstring&amp; assign(const string &amp;s); // \u628a\u5b57\u7b26\u4e32s\u8d4b\u7ed9\u5f53\u524d\u5b57\u7b26\u4e32\nstring&amp; assign(int n, char c); // \u628an\u4e2a\u5b57\u7b26\u8d4b\u7ed9\u5f53\u524d\u7684\u5b57\u7b26\u4e32\n</code></pre> <pre><code>string s1, s2, s3, s4, s5, s6, s7;\ns1 = \"Hello World\";\ns2 = s1;\ns3 = 'a';\ns4.assign(\"Hello World\");\ns5.assign(s1, 5);\ns6.assign(s1);\ns7.assign(5, \"Hello World\")\n</code></pre> <p>\u8fd9\u91cc\u7684operator\u90fd\u5f3a\u8c03\u4e86\u662f\u7b49\u53f7, \u56e0\u4e3a\u5176\u4ed6\u7684\u7b26\u5408\u6709\u4e0d\u540c\u7684\u542b\u4e49!</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_135","title":"\u5b57\u7b26\u4e32\u7684\u62fc\u63a5","text":"<pre><code>string s1 = \"I\";\ns1 += \" am handsome\";\ncout &lt;&lt; s1 &lt;&lt; endl; // I am handsome\ns1 += \"!\";\nstring s2 = \" I'm sure.\";\ns2 += s1;\ncout &lt;&lt; s2 &lt;&lt; endl; // I am handsome. I'm sure\nstring s3 = \"Long\";\nstring s4 = \"Long\"\ns3.append(\" time no see.\");\ns4.append(\" time no see.\", 5); // Long time\ns3.append(s2); // Long time no see. I'm sure\ns5 = \"I\";\ns5.append(s1, 0, 2); // I am\n// \u4ee3\u8868\u5f15\u7d22\u4ece0\u52302\u7684\u5b57\u6bcd\u622a\u8fdb\u53bb\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#string_3","title":"string\u67e5\u627e\u548c\u66ff\u6362","text":"<p>\u529f\u80fd\u63cf\u8ff0: </p> <ul> <li>\u67e5\u627e: \u67e5\u627e\u6307\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728</li> <li>\u66ff\u6362: \u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u66ff\u6362\u5b57\u7b26\u4e32</li> </ul> <pre><code># include &lt;string&gt;\nvoid test()\n{\n    s1 = \"abcde\";\n    cout &lt;&lt; find(\"de\") &lt;&lt; endl; // 3,\u56e0\u4e3ad\u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u5f15\u7d22\u662f3\n    cout &lt;&lt; find(\"df\") &lt;&lt; endl; // -1, \u4ee3\u8868\u6ca1\u627e\u5230\n    // \u8fd9\u4e2a-1\u503c\u53ef\u4ee5\u7528\u4e8e\u5e2e\u52a9\u8bbe\u7f6e\u5224\u65ad\u6761\u4ef6: if(find(...) == -1)\n    // rfind &amp; find\u533a\u522b: rfind\u4ece\u53f3\u5f80\u5de6\u67e5\u627e, find\u4ece\u5de6\u5f80\u53f3\n    // \u5f71\u54cd\u7684\u662f\u6700\u5148\u53d1\u73b0\u7684\u4f4d\u7f6e! \u4f46\u662f\u8fd4\u56de\u7684\u5f15\u7d22\u4f9d\u7136\u8fd8\u662f\"\u6392\u5934\u4f4d\u7f6e\"\n    cout &lt;&lt; s1.replace(1,3,\"111\") &lt;&lt; endl; // a111e\n    // replace\u5728\u66ff\u6362\u7684\u65f6\u5019, \u8981\u6307\u5b9a\u4ece\u54ea\u4e2a\u4f4d\u7f6e\u8d77, \u591a\u5c11\u4e2a\u5b57\u7b26, \u66ff\u6362\u6210\u4ec0\u4e48\u6837\u7684\u5b57\u7b26\u4e32\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#string_4","title":"string\u5b57\u7b26\u4e32\u6bd4\u8f83","text":"<p>\u6bd4\u8f83\u65b9\u5f0f:</p> <ul> <li>\u5b57\u7b26\u4e32\u6bd4\u8f83\u662f\u6309\u7167\u5b57\u7b26\u7684ASCII\u7801\u8fdb\u884c\u5bf9\u6bd4\u7684</li> </ul> <p>= \u8fd4\u56de0     &gt;\u8fd4\u56de1     &lt;\u8fd4\u56de-1</p> <p><code>str1.compare(st2)</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_136","title":"\u5b57\u7b26\u5b58\u53d6","text":"<pre><code>void test()\n{\n    string str = \"hello\";\n    for(int i = 0; i &lt; str.size(); i++)\n    {\n        cout &lt;&lt; str[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    for(int i = 0; i &lt; str.size(); i++)\n    {\n        cout &lt;&lt; str.at(i) &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    str[1] = 'a';\n    cout &lt;&lt; str &lt;&lt; endl; // hallo\n}\n</code></pre> <pre><code>void test()\n{\n    string str = \"hello\";\n    str.insert(1, \"111\");\n    cout &lt;&lt; str &lt;&lt; endl; // h111ello\n    str.erase(1, 3);\n    cout &lt;&lt; str &lt;&lt; endl; // hello\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_137","title":"\u5b50\u4e32\u83b7\u53d6","text":"<p><code>str.substr(int pos = 0, int n = npos) // \u540e\u9762\u4e00\u4e2a\u4ee3\u8868\u622a\u7684\u5b57\u7b26\u4e2a\u6570</code></p> <pre><code>void test()\n{\n    string str = \"zhangsan@email.com\";\n    int pos = str.find('@')\n    cout &lt;&lt; str.substr(0, pos) &lt;&lt; endl; // zhangsan\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#vector","title":"vector\u5bb9\u5668","text":""},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#_138","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>vector \u6570\u636e\u7ed3\u6784\u548c\u6570\u7ec4\u975e\u5e38\u76f8\u4f3c, \u4e5f\u79f0\u4e3a\u5355\u7aef\u6570\u7ec4; \u4f46\u662f\u6709\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u7279\u70b9:</p> <ul> <li> <p>\u6570\u7ec4\u662f\u9759\u6001\u7a7a\u95f4, \u4f46\u662fvector\u53ef\u4ee5\u52a8\u6001\u6269\u5c55</p> </li> <li> <p>vector\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u662f\u652f\u6301\u968f\u673a\u8bbf\u95ee\u7684\u8fed\u4ee3\u5668</p> </li> </ul> <p>\u52a8\u6001\u6269\u5c55: \u5e76\u4e0d\u662f\u5728\u539f\u7a7a\u95f4\u4e4b\u540e\u7eed\u63a5\u65b0\u7a7a\u95f4, \u800c\u662f\u627e\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4, \u7136\u540e\u5c06\u539f\u6570\u636e\u62f7\u8d1d\u65b0\u7a7a\u95f4, \u91ca\u653e\u539f\u7a7a\u95f4</p> <p></p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#vector_1","title":"vector\u6784\u9020\u51fd\u6570","text":"<pre><code># include&lt;vector&gt;\nvoid test()\n{\n    vector&lt;int&gt;v1; // \u9ed8\u8ba4\u6784\u9020\n    for(int i = 0; i &lt; 10; i++)\n    {\n        v1.push_back(i);\n    }\n    vector&lt;int&gt;v2(v1.begin(), v1.end()); // \u901a\u8fc7\u533a\u95f4\u65b9\u5f0f\u8fdb\u884c\u6784\u9020\n    // begin\u4ee3\u8868\u9996\u5143\u5f15\u7d22, end\u4ee3\u8868\u5c3e\u5143\u5f15\u7d22\n    vector&lt;int&gt;v3(10, 100); // 10\u4e2a100\n    vector&lt;int&gt;v4(v3); // \u62f7\u8d1d\u6784\u9020\n}\n\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#vector_2","title":"vector\u590d\u5236\u64cd\u4f5c","text":"<p>\u529f\u80fd\u63cf\u8ff0:</p> <ul> <li>\u7ed9vector\u5bb9\u5668\u8fdb\u884c\u8d4b\u503c</li> </ul> <pre><code># include&lt;vector&gt;\nvoid printVector(vector&lt;int&gt;&amp; v) // \u5f15\u7528\u4f20\u9012\n{\n    for(vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)\n    // \u8fd9\u4e2a\u8fed\u4ee3\u5668\u591a\u5199\u5199\u5c31\u719f\u7ec3\u4e86, \u4e14\u6ce8\u610f\u662fend,\u4e0d\u662frbegin\n    {\n        cout&lt;&lt; *it &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\nvoid test()\n{\n    vector&lt;int&gt;v1; // \u9ed8\u8ba4\u6784\u9020\n    for(int i = 0; i &lt; 10; i++)\n    {\n        v1.push_back(i);\n    }\n    printVector(v1);\n    vector&lt;int&gt;v2;\n    v2 = v1; // operator=\u6784\u9020\n    vector&lt;int&gt;v3;\n    v3.assign(v1.begin, v1.end()); // assign\u5206\u914d\n    vector&lt;int&gt;v4;\n    v4.assign(10, 100); // 10\u4e2a100 \n}   \n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#vector_3","title":"vector\u5bb9\u91cf\u548c\u5927\u5c0f","text":"<p>\u529f\u80fd\u63cf\u8ff0:</p> <ul> <li>\u5bf9vector\u5bb9\u5668\u7684\u5bb9\u91cf\u548c\u5927\u5c0f\u64cd\u4f5c</li> </ul> <p><code>empty()    capacity()    size()    resize(int num)    resize(int num, elem)</code></p> <pre><code># include&lt;vector&gt;\nvoid printVector(vector&lt;int&gt;&amp; v)\n{\n    for(vector&lt;int&gt;::iterator it = v.begin(); it!=v.end(); it++)\n    {\n        cout &lt;&lt; *it &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\nvoid test()\n{\n    vector&lt;int&gt;v1;\n    {\n        v1.push_back(i);\n    }\n    if(!v1.empty()) // \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7684\u662fbool\u503c, ! \u4ee3\u8868\u975e\n    {\n        printVector(v1);\n    }\n    cout &lt;&lt; v1.capacity() &lt;&lt; endl; // \u8fd9\u4e2a\u6570\u662f\u968f\u673a\u7684\u4e00\u4e2a\u6bd410\u5927\u7684\u6570\u5b57\n    // \u56e0\u4e3a\u52a8\u6001\u6269\u5c55, \u4f7f\u5f97v1\u63a5\u53d7\u4e8610\u4e2a\u6570\u636e\u4e4b\u540e, \u81ea\u52a8\u627e\u5230\u4e86\u4e00\u5757\u6bd410\u5927\u7684\u5185\u5b58\u7a7a\u95f4\n    cout &lt;&lt; v1.size() &lt;&lt; endl; // 10, \u56e0\u4e3a\u8fd4\u56de\u7684\u662f\"\u771f\u6b63\"\u7684\u5927\u5c0f\n    v1.resize(15);\n    printVector(15); // \u540e\u97625\u4e2a\u75280\u586b\u5145\n    v1.resize(20, 9); // \u6307\u5b9a\u586b\u5145\u7684\u5185\u5bb9\n    printVector(v1); // \u540e\u9762\u518d\u52a05\u4e2a9\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#vector_4","title":"vector\u63d2\u5165\u548c\u5220\u9664","text":"<pre><code># include&lt;vector&gt;\nvoid test()\n{\n    vector&lt;int&gt;v1;\n    v1.push_back(10); // \u5c3e\u90e8\u63d2\u516510, \u6709\u70b9\u50cfpython\u7684append\n    v1.pop_back(); // \u5c3e\u90e8\u5220\u966410\n    for(int i = 0; i &lt; 10; i++)\n    {\n        v1.push_back(i);\n    }\n    v1.insert(v1.begin(), 100); // \u5728\u9996\u5143\u7684\u524d\u9762\u63d2\u5165100; \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8fed\u4ee3\u5668\n    v1.insert(v1.rbegin(),2,1000); // \u5728\u5c3e\u5143\u7684\u524d\u9762\u63d2\u5165\u4e24\u4e2a1000, \u6ce8\u610f\u4e0d\u662f\u5c41\u80a1\n    // \u5982\u679c\u662f\u5c41\u80a1, \u90a3\u4e48\u5c31\u662fv1.end()\n    v1.erase(v1.begin()); // \u628a\u9996\u5143\u5220\u6389\u4e86\n    v1.erase(v1.begin(), v1.rbegin()); // \u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4fdd\u7559, \u5176\u4ed6\u5168\u90e8\u5220\u9664\n    // \u5f53\u7136\u5982\u679c\u662f\u5b8c\u5168\u5220\u9664, \u90a3\u4e48\u5c31v1.end(), \u56e0\u4e3a\u540e\u9762\u4e00\u4e2a\u8fed\u4ee3\u5668\u53c2\u6570\u662f\u5f00\u533a\u95f4, \u53d6\u4e0d\u4e2d!\n    v1.erase(); // \u5b8c\u5168\u5220\u9664\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#vector_5","title":"vector\u6570\u636e\u5b58\u53d6\u4e0e\u4e92\u6362\u5bb9\u5668","text":"<pre><code># include &lt;vector&gt;\nvoid test()\n{\n    vector&lt;int&gt;v1;\n    for(int i = 0; i &lt; 10; i++)\n    {\n        v1.push_back(i);\n    }\n    for(int i = 0; i &lt; v1.size(); i++)\n    {\n        cout &lt;&lt; v1[i] &lt;&lt; \" \" &lt;&lt; v1.at(i) &lt;&lt; endl; // \u4e24\u79cd\u65b9\u6cd5\u8bbf\u95ee\n    }\n    cout &lt;&lt; v1.front() &lt;&lt; \" \" &lt;&lt; v1.end() &lt;&lt; endl;\n}\n</code></pre> <p>\u800c\u5b9e\u73b0\u4e24\u4e2a\u5bb9\u5668\u5185\u5143\u7d20\u8fdb\u884c\u4e92\u6362, \u9700\u8981\u4f7f\u7528:</p> <p><code>v1.swap(v2);</code> // \u5c06v2\u4e0ev1\u7684\u5143\u7d20\u8fdb\u884c\u4e92\u6362</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u4e1c\u897f\u7a76\u7adf\u6709\u4ec0\u4e48\u7528\u5462? \u5b9e\u9645\u7528\u9014: \u6536\u7f29\u5185\u5b58\u7a7a\u95f4</p> <pre><code># include&lt;vector&gt;\nvoid test()\n{\n    vector&lt;int&gt;v;\n    for(int i = 0; i&lt;100000; i++)\n    {\n        v.push_back(i);\n    }\n    cout &lt;&lt; v.capacity() &lt;&lt; endl; // \u5341\u4e07\u591a, \u591a\u51fa\u6765\u4e86\u5f88\u591a\u9884\u7559\u5185\u5b58\n    cout &lt;&lt; v.size() &lt;&lt; endl; // 100000\n    v.resize(3); // \u91cd\u65b0\u6307\u5b9a\u5927\u5c0f, \u6211\u53ea\u60f3\u7528\u524d\u4e09\u4e2a\u6570\u636e!\n    cout &lt;&lt; v.capacity() &lt;&lt; endl; // \u548c\u4e0a\u9762\u7684capacity\u4e00\u6837\u5927, \u5927\u91cf\u5185\u5b58\u6d6a\u8d39\u6389\u4e86!\n    cout &lt;&lt; v.size() &lt;&lt; endl; // 3\n    vector&lt;int&gt;(v).swap(v);\n}\n</code></pre> <p>\u90a3\u4e48\u53d1\u751f\u4e86\u4ec0\u4e48? <code>vector&lt;int&gt;(v)</code>\u4ee3\u8868\u7684\u662f\u7528v\u62f7\u8d1d\u6784\u9020\u4e00\u4e2a\u533f\u540dvector, \u8fd9\u4e2avector\u548cv\u8fdb\u884c\u4e86\u4ea4\u6362, \u7136\u540e\u5360\u636e\u4e86\u5927\u91cf\u5185\u5b58\u7a7a\u95f4\u7684\u533f\u540dvector\u5728\u8fd9\u884c\u4ee3\u7801\u7ed3\u675f\u4e4b\u540e\u88ab\u81ea\u52a8\u91ca\u653e</p>"},{"location":"CS100%28C%26C%2B%2B%29/C%2B%2B%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0.html#vector_6","title":"vector\u7684\u9884\u7559\u7a7a\u95f4","text":"<p>\u4e4b\u524d\u63d0\u5230, \u5982\u679c\u8fdb\u884cvector\u63d2\u5165\u6216\u8005\u5220\u9664, \u5185\u5b58\u4f1a\u52a8\u6001\u53d8\u5316; \u6211\u4e0d\u5e0c\u671b\u5b83\u52a8\u6765\u52a8\u53bb, \u76f4\u63a5\u58f0\u660e\u6211\u8981\u6c42\u5212\u51fa\u4e00\u5757\u5185\u5b58\u8ba9\u6211\u64cd\u4f5c:</p> <p><code>vec.reserve(int len)</code>, \u9884\u7559len\u4e2a\u5143\u7d20\u957f\u5ea6, \u9884\u7559\u4f4d\u7f6e\u4e0d\u521d\u59cb\u5316, \u5143\u7d20\u4e0d\u53ef\u8bbf\u95ee</p> <pre><code># include &lt;iostream&gt;\n# include &lt;vector&gt;\nusing namespace std;\nvoid test()\n{\n    vector&lt;int&gt;v;\n    // v.reserve(100000); \u5982\u679c\u52a0\u4e86\u8fd9\u53e5\u8bdd, \u4e0b\u9762\u8f93\u51fa\u5c31\u662f1\n    int *p = NULL;\n    int num = 0;\n    for(int i = 0; i &lt; 100000; i++)\n    {\n        v.push_back(i);\n        if (p != &amp;v[0])\n        {\n            p = &amp;v[0];\n            num ++;\n        }\n    }\n    cout &lt;&lt; \"Times of changes: \" &lt;&lt; num &lt;&lt; endl; // \u4e00\u822c\u6765\u8bf4\u662f\u4e24\u4f4d\u6570; \u5982\u679c\u6709\u4e86reserve, \u90a3\u4e48\u5c31\u662f1\n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre> <p>\u56e0\u6b64\u603b\u7ed3: \u5982\u679c\u6570\u636e\u91cf\u8f83\u5927, \u90a3\u4e48\u4e00\u5f00\u59cb\u5c31\u53ef\u4ee5\u5229\u7528reserve\u9884\u7559\u7a7a\u95f4</p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html","title":"CS100 Lecture 2","text":"<p>Variables I and Arithmetic Types</p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#contents","title":"Contents","text":"<ul> <li>Variable declaration</li> <li>Arithmetic types</li> <li>Bits and bytes</li> <li>Integer types</li> <li>Real floating types</li> <li>Character types</li> <li>Boolean type</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#variable-declaration","title":"Variable declaration","text":""},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#type-of-a-variable","title":"Type of a variable","text":"<p>Every variable in C has a type.</p> <ul> <li>The type is fully deterministic and cannot be changed.</li> <li>The type is known even when the program is not run.</li> <li>The type is known at compile-time.</li> <li>C is statically-typed.   C has a static type system.</li> <li>In contrast, Python is dynamically-typed.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#statically-typed-vs-dynamically-typed","title":"Statically-typed vs dynamically-typed","text":"<p>Python: dynamically typed</p> <pre><code>a = 42       # Type of a is int.\na = \"hello\"  # Type of a becomes str.\n</code></pre> <p>C: statically-typed</p> <pre><code>int a = 42;  // Type of a is int.\na = \"hello\"; // Error! Types mismatch!\n</code></pre> <p>The type of a variable</p> <ul> <li>is explicitly written on declaration, and is known at compile-time, and cannot be changed</li> </ul> <p>A type-related error in C is (usually) a compile error:</p> <ul> <li>It stops the compiler. The executable will not be generated.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#declare-a-variable","title":"Declare a variable","text":"<p>To declare a variable, we need to specify its type and name.</p> <pre><code>Type name;\n</code></pre> <p>We may declare multiple variables of a same type in one declaration statement, separated by <code>,</code>:</p> <pre><code>int x, y; // Declares two variables `x` and `y`, both having type `int`.\n</code></pre> <p>A variable declaration can be placed</p> <ul> <li>inside a function, which declares a local variable, or</li> <li>outside of any functions, which declares a global variable.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#readability-matters","title":"Readability matters","text":"<p>[Best practice] Declare the variable when you first use it!</p> <ul> <li>If the declaration and use of the variable are too separated, it will become much more difficult to figure out what they are used for as the program goes longer.</li> </ul> <p>[Best practice] Use meaningful names!</p> <ul> <li>The program would be a mess if polluted with names like <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>x</code>, <code>y</code>, <code>cnt</code>, <code>cnt_2</code>, <code>flag1</code>, <code>flag2</code>, <code>flag3</code> everywhere.</li> <li>Use meaningful names: <code>sumOfScore</code>, <code>student_cnt</code>, <code>open_success</code>, ...</li> </ul> <p>Readability is very important. Many students debug day and night simply because their programs are not human-readable.</p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#use-of-global-variables","title":"Use of global variables","text":"<p>One reason for using global variables is to have them shared between functions:</p> <pre><code>void work(void) {\n  // Error: `input` was not decared\n  // in this scope.\n  printf(\"%d\\n\", input);\n}\nint main(void) {\n  int input;\n  scanf(\"%d\", &amp;input);\n  work();\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#initialize-a-variable","title":"Initialize a variable","text":"<p>A variable can be initialized on declaration.</p> <pre><code>int x = 42; // Declares the variable `x` of type `int`,\n            // and initializes its value to 42.\nint a = 0, b, c = 42; // Declares three `int` variables, with `a` initialized\n                      // to 0, `c` initialized to 42, and `b` uninitialized.\n</code></pre> <p>This is syntactically different (though seems equivalent) to</p> <pre><code>int x;  // Declares `x`, uninitialized.\nx = 42; // Assigns 42 to `x`.\n</code></pre> <p>[Best practice] Initialize the variable if possible. Prefer initialization to later assignment.</p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#arithmetic-types","title":"Arithmetic types","text":""},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#integer-types","title":"Integer types","text":"<p>Is <code>int</code> equivalent to \u6b63\u6574\u6570?</p> <ul> <li>Is there a limitation on the numbers that <code>int</code> can represent?</li> </ul> <p>Experiment:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  int x = 1;\n  while (1) {\n    printf(\"%d\\n\", x);\n    x *= 2; // x = x * 2\n    getchar();\n  }\n}\n</code></pre> <ul> <li><code>1073741824   -2147483648   0   0</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#bits-and-bytes","title":"Bits and bytes","text":"<p>Information is stored in computers in binary.</p> <ul> <li>\\(42_{\\text{ten}}=101010_{\\text{two}}\\).</li> </ul> <p>A bit is either \\(0\\) or \\(1\\).</p> <ul> <li>The binary representation of \\(42\\) consists of \\(6\\) bits.</li> </ul> <p>A byte is \\(8\\) bits \\({}^{\\textcolor{red}{2}}\\) grouped together like \\(10001001\\).</p> <ul> <li>At least \\(1\\) byte is needed to store \\(42\\).</li> <li>At least \\(3\\) bytes are needed to store \\(142857_{\\text{ten}}=100010111000001001_{\\text{two}}\\)</li> </ul> <p>A 32-bit number: \\(2979269462_{\\text{ten}}=10110001100101000000101101010110_{\\text{two}}\\).</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#integer-types_1","title":"Integer types","text":"<p>An integer type in C is either signed or unsigned, and has a width denoting the number of bits that can be used to represent values.</p> <p>Suppose we have an integer type of \\(n\\) bits in width.</p> <ul> <li>If the type is signed \\({}^{\\textcolor{red}{3}}\\), the range of values that can be represented is \\(\\left[-2^{n-1},2^{n-1}-1\\right]\\).</li> <li> <p>If the type is unsigned, the range of values that can be represented is \\(\\left[0, 2^n-1\\right]\\).</p> </li> <li> <p>The keyword <code>int</code> is optional in types other than <code>int</code>:</p> </li> <li>e.g. <code>short int</code> and <code>short</code> name the same type.</li> <li> <p>e.g. <code>unsigned int</code> and <code>unsigned</code> name the same type.</p> </li> <li> <p>\"Unsigned-ness\" needs to be written explicitly: <code>unsigned int</code>, <code>unsigned long</code>, ...</p> </li> <li>Types without the keyword <code>unsigned</code> are signed by default:</li> <li>e.g. <code>signed int</code> and <code>int</code> name the same type.</li> <li>e.g. <code>signed long int</code>, <code>signed long</code>, <code>long int</code> and <code>long</code> name the same type.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#width-of-integer-types","title":"Width of integer types","text":"| type        | width (at least) | width (usually) | | ----------- | ---------------- | --------------- | | `short`     | 16 bits          | 16 bits         | | `int`       | 16 bits          | 32 bits         | | `long`      | 32 bits          | 32 or 64 bits   | | `long long` | 64 bits          | 64 bits         | |  <pre><code>  |                  |                 |\n</code></pre> <ul> <li>A signed type has the same width as its <code>unsigned</code> counterpart.</li> <li>It is also guaranteed that <code>sizeof(short)</code> \\(\\leqslant\\) <code>sizeof(int)</code> \\(\\leqslant\\) <code>sizeof(long)</code> \\(\\leqslant\\) <code>sizeof(long long)</code>.</li> <li><code>sizeof(T)</code> is the number of bytes that <code>T</code> holds.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#implementation-defined-behaviors","title":"Implementation-defined behaviors","text":"<p>The standard states that the exact width of the integer types is implementation-defined.</p> <ul> <li>Implementation: The compiler and the standard library.</li> <li>An implementation-defined behavior depends on the compiler and the standard library, and is often also related to the hosted environment (e.g. the operating system).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#which-one-should-i-use","title":"Which one should I use?","text":"<p><code>int</code> is the most optimal integer type for the platform.</p> <ul> <li>Use <code>int</code> for integer arithmetic by default.</li> <li>Use <code>long long</code> if the range of <code>int</code> is not large enough.</li> <li>Use smaller types (<code>short</code>, or even <code>unsigned char</code>) for memory-saving or other special purposes.</li> <li>Use <code>unsigned</code> types for special purposes. We will see some in later lectures.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#real-floating-types","title":"Real floating types","text":"<p>\"Floating-point\": The number's radix point can \"float\" anywhere to the left, right, or between the significant digits of the number.</p> <p>Real floating-point types can be used to represent some real values.</p> <ul> <li>Real floating-point types \\(\\neq\\mathbb R\\).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#which-one-should-i-use_1","title":"Which one should I use?","text":"<p>Use <code>double</code> for real floating-point arithmetic by default.</p> <ul> <li>In some cases the precision of <code>float</code> is not enough.</li> <li>Don't worry about efficiency! <code>double</code> arithmetic is not necessarily slower than <code>float</code>.</li> </ul> <p>Do not use floating-point types for integer arithmetic!</p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#scanfprintf","title":"<code>scanf</code>/<code>printf</code>","text":"| type        | format specifier | | ----------- | ---------------- | | `short`     | `%hd`            | | `int`       | `%d`             | | `long`      | `%ld`            | | `long long` | `%lld`           | |       |                  |       | type                 | format specifier | | -------------------- | ---------------- | | `unsigned short`     | `%hu`            | | `unsigned`           | `%u`             | | `unsigned long`      | `%lu`            | | `unsigned long long` | `%llu`           | |                |                  | |  <pre><code>           |                  |\n</code></pre> <ul> <li><code>%f</code> for <code>float</code>, <code>%lf</code> for <code>double</code>, and <code>%Lf</code> for <code>long double</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#character-types","title":"Character types","text":"<p>The C standard provides three different character types: <code>signed char</code>, <code>unsigned char</code> and <code>char</code>.</p> <p>Let <code>T</code> \\(\\in\\{\\)<code>signed char</code>, <code>unsigned char</code>, <code>char</code>\\(\\}\\). It is guaranteed that</p> <p><code>1 == sizeof(T) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code>.</p> <ul> <li><code>T</code> takes exactly 1 byte.</li> </ul> <p>Question: What is the valid range of <code>signed char</code>? <code>unsigned char</code>?</p> <ul> <li><code>signed char</code>: \\([-128, 127]\\).</li> <li><code>unsigned char</code>: \\([0, 255]\\).</li> </ul> <p>What? A character is an integer?</p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#ascii-american-standard-code-for-information-interchange","title":"ASCII (American Standard Code for Information Interchange)","text":"<p>Important things to remember:</p> <ul> <li>\\([\\)<code>'0'</code>\\(,\\)<code>'9'</code>\\(]=[48, 57]\\).</li> <li>\\([\\)<code>'A'</code>\\(,\\)<code>'Z'</code>\\(]=[65, 90]\\).</li> <li>\\([\\)<code>'a'</code>\\(,\\)<code>'z'</code>\\(]=[97, 122]\\).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#best-practice-avoid-magic-numbers","title":"[Best practice] Avoid magic numbers","text":"<p>What is the meaning of <code>32</code> here? \\(\\Rightarrow\\) a magic number.</p> <pre><code>char to_uppercase(char x) {\n  return x - 32;\n}\n</code></pre> <p>Write it in a more human-readable way:</p> <pre><code>char to_uppercase(char x) {\n  return x - ('a' - 'A');\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#escape-sequence","title":"Escape sequence","text":"<p>Some special characters are not directly representable: newline, tab, quote, ...</p>    | escape sequence | description  | | --------------- | ------------ | | `\\'`            | single quote | | `\\\"`            | double quote | | `\\\\`            | backslash    | |           |              |       | escape sequence | description     | | --------------- | --------------- | | `\\n`            | newline         | | `\\r`            | carriage return | | `\\t`            | horizontal tab  | |           |                 | |  <pre><code>      |                 |\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#character-types_1","title":"Character types","text":"<p><code>char</code>, <code>signed char</code> and <code>unsigned char</code> are three different types.</p> <ul> <li>Whether <code>char</code> is signed or unsigned is implementation-defined.</li> <li>If <code>char</code> is signed (unsigned), it represents the same set of values as the type <code>signed char</code> (<code>unsigned char</code>), but they are not the same type.</li> <li>In contrast, <code>T</code> and <code>signed T</code> are the same type for <code>T</code> \\(\\in\\{\\)<code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>\\(\\}\\).</li> </ul> <p>For almost all cases, use <code>char</code> (or, sometimes <code>int</code>) to represent characters.</p> <p><code>signed char</code> and <code>unsigned char</code> are used for other purposes.</p> <p>To read/print a <code>char</code> using <code>scanf</code>/<code>printf</code>, use <code>%c</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/cheatsheet.html#boolean-type-bool-since-c99","title":"Boolean type: <code>bool</code> (since C99)","text":"<p>A type that represents true/false, 0/1, yes/no, ...</p> <p>To access the name <code>bool</code>, <code>true</code> and <code>false</code>, <code>&lt;stdbool.h&gt;</code> is needed. (until C23)</p> <p>Example: Define a function that accepts a character and returns whether that character is a lowercase letter.</p>    Before C99, using `int`, `0` and `1`:   <pre><code>int is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return 1;\n  else\n    return 0;\n}\n</code></pre>    Since C99, using `bool`, `false` and `true`:   <pre><code>bool is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return true;\n  else\n    return false;\n}\n</code></pre>    Before C99, using `int`, `0` and `1`:   <pre><code>int is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return 1;\n  else\n    return 0;\n}\n</code></pre>    Since C99, using `bool`, `false` and `true`:   <pre><code>bool is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return true;\n  else\n    return false;\n}\n</code></pre>   Both return values can be used as follows:   <pre><code>char c; scanf(\"%c\", &amp;c);\nif (is_lowercase(c)) {\n  // do something when c is lowercase ...\n}\n</code></pre>   # CS100 Lecture 3  Operators and Control Flow I  ## Contents  - Operators   - `+`, `-`, `*`, `/`, `%`   - Compound assignment operators   - Signed integer overflow   - `++` and `--` - Control flow   - `if`-`else`   - `while`   - `for`  ---  # Operators  ## The calculator  Accept input of the form `x op y`, where `x` and `y` are floating-point numbers and `op` $\\in\\{$ `'+'`, `'-'`, `'*'`, `'/'` $\\}$. Print the result.   <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  double x, y;\n  char op;\n  scanf(\"%lf %c %lf\", &amp;x, &amp;op, &amp;y);\n  if (op == '+')\n    printf(\"%lf\\n\", x + y);\n  else if (op == '-')\n    printf(\"%lf\\n\", x - y);\n</code></pre> <pre><code>  else if (op == '*')\n    printf(\"%lf\\n\", x * y);\n  else if (op == '/')\n    printf(\"%lf\\n\", x / y);\n  else\n    printf(\"Invalid operator.\\n\");\n  return 0;\n}\n</code></pre>   ## `+`, `-`, `*`, `/`, `%`  - `+` and `-` have two versions: unary (`+a`, `-a`) and binary (`a+b`, `a-b`).    - The unary `+`/`-` and binary `+`/`-` are **different operators**, although they use the same notation.  - Operator precedence:    $\\{$ unary `+`, unary `-` $\\}&gt;\\{$ `*`, `/`, `%` $\\}&gt;\\{$ binary `+`, binary `-` $\\}$    e.g. `a + b * c` is interpreted as `a + (b * c)`, instead of `(a + b) * c`.    $\\Rightarrow$ We will talk more about operator precedence later.  ## Binary `+`, `-` and `*`, `/`  `a + b`, `a - b`, `a * b`, `a / b`  Before the evaluation of such an expression, the operands (`a`, `b`) undergo a sequence of **type conversions**.  - The [detailed rules of the conversions](https://en.cppreference.com/w/c/language/conversion#Usual_arithmetic_conversions) are very complex,   - including *promotions*, conversions between `signed` and `unsigned` types, conversions between integers and floating-point types, etc.   - We only need to remember some common ones. - In the end, the operands will be converted to **a same type**, denoted `T`. **The result type is also `T`.**  `a + b`, `a - b`, `a * b`, `a / b`  If any one operand is of floating-point type and the other is an integer, **the integer will be implicitly converted to that floating-point type**.  Example:   <pre><code>double pi = 3.14;\nint diameter = 20;\nWhatType c = pi * diameter; // What is the type of this result?\n</code></pre>   `a + b`, `a - b`, `a * b`, `a / b`  If any one operand is of floating-point type and the other is an integer, **the integer will be implicitly converted to that floating-point type**.  Example:   <pre><code>double pi = 3.14;\nint diameter = 20;\ndouble c = pi * diameter; // 62.8\n</code></pre>   The value of `diameter` is implicitly converted to a value of type `double`. Then, a floating-point multiplication is performed, yielding a result of type `double`.  \\* Does this rule make sense? - Yes, because $\\mathbb Z\\subseteq\\mathbb R$.  `a + b`, `a - b`, `a * b`, `a / b`  If any one operand is of floating-point type and the other is an integer, **the integer will be implicitly converted to that floating-point type**, and the result type is that floating-point type.  Similarly, if the operands are of types `int` and `long long`, the `int` value will be implicitly converted to `long long`, and the result type is `long long`. ${}^{\\textcolor{red}{1}}$  ## Division: `a / b`  Assume `a` and `b` are of the same type `T` (after conversions as mentioned above).  - Then, the result type is also `T`.  Two cases:  - If `T` is a floating-point type, this is a floating-point division.   - The result is no surprising. - If `T` is an integer type, this is an integer division.   - The result is **truncated towards zero** (since C99 and C++11) ${}^{\\textcolor{red}{2}}$.   - What is the result of `3 / -2`?  Let `a` and `b` be two integers.  - What is the difference between `a / 2` and `a / 2.0`? - What does `(a + 0.0) / b` mean? What about `1.0 * a / b`?    If `T` is an integer type, this is an integer division.    - The result is **truncated towards zero** (since C99 and C++11) ${}^{\\textcolor{red}{2}}$.   - What is the result of `3 / -2`?     - `-1.5` truncated towards zero, which is `-1`.   What is the difference between `a / 2` and `a / 2.0`?    - `a / 2` yields an integer, while `a / 2.0` yields a `double`.  What does `(a + 0.0) / b` mean? What about `1.0 * a / b`?    - Both use floating-point division to compute $\\dfrac ab$. The floating-point numbers `0.0` and `1.0` here cause the conversion of the other operands.  ## Remainder: `a % b`  Example: `15 % 4 == 3`.  **`a` and `b` must have integer types.**  If `a` is negative, is the result negative? What if `b` is negative? What if both are negative?  Example: `15 % 4 == 3`.  **`a` and `b` must have integer types.**  For any integers `a` and `b`, the following always holds:   <pre><code>(a / b) * b + (a % b) == a\n</code></pre>   ## Compound assignment operators  `+=`, `-=`, `*=`, `/=`, `%=`  - `a op= b` is equivalent to `a = a op b`. - e.g. `x *= 2` is equivalent to `x = x * 2`. - **[Best practice]** Learn to use these operators, to make your code clear and simple.  ## Signed integer overflow  If a **signed integer type** holds a value that is not in the valid range, **overflow** is caused.  Suppose `int` is 32-bit and `long long` is 64-bit.  Do the following computations cause overflow?   <pre><code>int ival = 100000; long long llval = ival;\nint result1 = ival * ival;               // (1) overflow\nlong long result2 = ival * ival;         // (2) overflow\nlong long result3 = llval * ival;        // (3) not overflow\nlong long result4 = llval * ival * ival; // (4) not overflow\n</code></pre>   (1) $\\left(10^5\\right)^2=10^{10}&gt;2^{31}-1$.  (2) The result type of the multiplication `ival * ival` is **`int`**, which causes overflow. This is not affected by the type of `result2`.  (3) Since `llval` is of type `long long`, the value of `ival` will be implicitly converted to `long long`, and then the multiplication yields a `long long` value.  (4) `*` is **left-associative**, so the expression `a * b * c` is interpreted as `(a * b) * c`.  $\\Rightarrow$ We will talk about associativity in later lectures.  ---  ## Undefined behavior  Signed integer overflow is : **There are no restrictions on the behavior of the program.** Compilers are not required to diagnose undefined behavior (although many simple situations are diagnosed), and the compiled program is not required to do anything meaningful.  - It may yield some garbage values, or zero, or anything else; - or, this statement may be removed if the compiler is clever enough; - or, the program may crash; - or, any other results beyond imagination.  More on undefined behaviors in recitations.    Unsigned integer arithmetic is always performed *modulo $2^n$*, where $n$ is the number of bits in that integer type.  For example, for `unsigned int` (assuming it is 32-bit)  - adding one to $2^{32}-1$ gives $0$ because $2^{32}\\equiv 0\\pmod{2^{32}}$, and - subtracting one from $0$ gives $2^{32}-1$ because $-1\\equiv 2^{32}-1\\pmod{2^{32}}$.  \\* \"wrap-around\"  ## Increment/decrement operators  Unary operators that increment/decrement the value of a variable by `1`.  Postfix form: `a++`, `a--`  Prefix form: `++a`, `--a`  - `a++` and `++a` increment the value of `a` by `1`. - `a--` and `--a` decrement the value of `a` by `1`.  The result of the **postfix** increment/decrement operators is the value of `a` **before incrementation/decrementation**.  **\\* What does \"result\" mean?**    Unary operators that increment/decrement the value of a variable by `1`.  Postfix form: `a++`, `a--`  The result of the **postfix** increment/decrement operators is the value of `a` **before incrementation/decrementation**.   <pre><code>int x = 42;\nprintf(\"%d\\n\", x++); // x becomes 43, but 42 is printed.\nint y = x++; // y is initialized with 43. x becomes 44.\n</code></pre>   Unary operators that increment/decrement the value of a variable by `1`.  Prefix form: `++a`, `--a`  The result of the **prefix** increment/decrement operators is the value of `a` **after incrementation/decrementation**.   <pre><code>int x = 42;\nprintf(\"%d\\n\", ++x); // x becomes 43, and 43 is printed.\nint y = ++x; // y is initialized with 44. x becomes 44.\n</code></pre>   # CS100 Lecture 4  Operators and Control Flow II, Functions  ## Contents  - Operators   - Operator precedence, associativity and evaluation order   - Comparison operators `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, `==`, `!=`   - Logical operators `&amp;&amp;`, `||`, `!`   - Conditional operator `?:`   - Assignment operator `=` - Control Flow   - `do`-`while`   - `switch`-`case` - Functions  # Operators  ---  ## Operator precedence  [Operator precedence](https://en.cppreference.com/w/c/language/operator_precedence) defines the order in which operators are bound to their arguments.  Example: `*` and `/` have higher precedence than `+` and `-`, so `a + b * c` is interpreted as `a + (b * c)` instead of `(a + b) * c`.  **Operator precedence does not determine [evaluation order](https://en.cppreference.com/w/c/language/eval_order).**  - `f() + g() * h()` is interpreted as `f() + (g() * h())`, but the order in which `f`, `g` and `h` are called is **unspecified**.  ## Associativity  Each operator is either **left-associative** or **right-associative**.  Operators with the same precedence have the same associativity.  Example: `+` and `-` are **left-associative**, so `a - b + c` is interpreted as `(a - b) + c`, instead of `a - (b + c)`.  **Associativity does not determine [evaluation order](https://en.cppreference.com/w/c/language/eval_order).**  - `f() - g() + h()` is interpreted as `(f() - g()) + h()`, but the order in which `f`, `g` and `h` are called is **unspecified**.  ## Evaluation order  Unless otherwise stated, the order in which the operands are evaluated is **unspecified**.  - We will see that `&amp;&amp;`, `||` and `?:` (and also `,`, in recitations) have specified evaluation order of their operands.  Examples: In the following expressions, it is **unspecified** whether `f` is called before `g`.  - `f() + g()` - `f() == g()` - `some_function(f(), g())` (Note that the `,` here is not the [comma operator](https://en.cppreference.com/w/c/language/operator_other#Comma_operator).) - ...  ## Evaluation order and undefined behavior  Let `A` and `B` be two expressions. **The behavior is undefined if**  - the order in which `A` and `B` are evaluated is unspecified ${}^{\\textcolor{red}{1}}$, and - both `A` and `B` modify an object, or one modifies an object and the other uses its value ${}^{\\textcolor{red}{2}}$.  Examples:   <pre><code>i = ++i + i++; // undefined behavior\ni = i++ + 1;   // undefined behavior\nprintf(\"%d, %d\\n\", i, i++); // undefined behavior\n</code></pre>   Recall that **undefined behavior** means \"everything is possible\". We cannot make any assumptions about the behavior of the program.  ---  ## Terminology: Return type/value of an operator  When it comes to \"the return type/value of an operator\", we are actually viewing the operator as a function:   <pre><code>int operator_plus(int a, int b) {\n  return a + b;\n}\nint operator_postfix_inc(int &amp;x) { // We must use a C++ notation here.\n  int old = x;\n  x += 1;\n  return old;\n}\n</code></pre>   The \"return value\" of an operator is the value of the expression it forms.  The \"return type\" of an operator is the type of its return value.  ## [Comparison operators](https://en.cppreference.com/w/c/language/operator_comparison)  Comparison operators are binary operators that test a condition and return `1` if that condition is logically **true** and `0` if it is logically **false**.      | Operator | Operator name | | -------- | ------------- | | `a == b` | equal to      | | `a != b` | not equal to  | | `a &lt; b`  | less than     |        | Operator | Operator name            | | -------- | ------------------------ | | `a &gt; b`  | greater than             | | `a &lt;= b` | less than or equal to    | | `a &gt;= b` | greater than or equal to |       For most cases, the operands `a` and `b` are also converted to a same type, just as what happens for `a + b`, `a - b`, ...  Note: Comparison operators in C **cannot be chained**.  Example: `a &lt; b &lt; c` is interpreted as `(a &lt; b) &lt; c` (due to left-associativity), which means to  - compare `(a &lt; b)` first, whose result is either `0` or `1`, and then - compare `0 &lt; c` or `1 &lt; c`.  **To test $a   | Operator | Operator name | Example    | | -------- | ------------- | ---------- | | `!`      | logical NOT   | `!a`       | | `&amp;&amp;`     | logical AND   | `a &amp;&amp; b`   | | `\\|\\|`   | logical OR    | `a \\|\\| b` | |    |               |            |  `!a`, `a &amp;&amp; b`, `a || b`      Recall the boolean algebra:     | $A$    | $B$   | $\\neg A$ | $A\\land B$ | $A\\lor B$ | | ------ | ----- | -------- | ---------- | --------- | | True   | True  | False    | True       | True      | | True   | False | False    | False      | True      | | False  | True  | True     | False      | True      | | False  | False | True     | False      | False     | |  |       |          |            |           | |  |       |          |            |           |       For C logical operators:     | `a`    | `b`    | `!a` | `a &amp;&amp; b` | `a \\|\\| b` | | ------ | ------ | ---- | -------- | ---------- | | `!= 0` | `!= 0` | `0`  | `1`      | `1`        | | `!= 0` | `== 0` | `0`  | `0`      | `1`        | | `== 0` | `!= 0` | `1`  | `0`      | `1`        | | `== 0` | `== 0` | `1`  | `0`      | `0`        | |  |        |      |          |            | |  |        |      |          |            | |  |        |      |          |            |  Precedence: `!` $&gt;$ comparison operators $&gt;$ `&amp;&amp;` $&gt;$ `||`.  Typical example: lexicographical comparison of two pairs $(a_1, b_1)$ and $(a_2,b_2)$   <pre><code>int less(int a1, int b1, int a2, int b2) {\n  return a1 &lt; a2 || (a1 == a2 &amp;&amp; b1 &lt; b2);\n}\n</code></pre>   The parentheses are optional here, but it improves readability.  ## Avoid abuse of parentheses  Too many parentheses **reduce** readability:   <pre><code>int less(int a1, int b1, int a2, int b2) {\n  return (((a1) &lt; (a2)) || (((a1) == (a2)) &amp;&amp; ((b1) &lt; (b2))));\n  // Is this a1 &lt; b1 || (a1 == b1 &amp;&amp; a2 &lt; b2)\n  //      or (a1 &lt; b1 || a1 == b1) &amp;&amp; a2 &lt; b2 ?\n}\n</code></pre>   **[Best practice]** Use **one** pair of parentheses when two binary logical operators meet.  ## Short-circuit evaluation  `a &amp;&amp; b` and `a || b` perform **short-circuit evaluation**:  - For `a &amp;&amp; b`, `a` is evaluated first. If `a` compares equal to zero (is logically **false**), `b` is not evaluated.   - $\\mathrm{False}\\land p\\equiv\\mathrm{False}$ - For `a || b`, `a` is evaluated first. If `a` compares not equal to zero (is logically **true**), `b` is not evaluated.   - $\\mathrm{True}\\lor p\\equiv\\mathrm{True}$  **The evaluation order is specified!**  ## Conditional operator  Syntax: `condition ? expressionT : expressionF`,  where `condition` is an expression of scalar type.  **The evaluation order is specified!**  - First, `condition` is evaluated. - If `condition` compares not equal to zero (is logically **true**), `expressionT` is evaluated, and the result is the value of `expressionT`. - Otherwise (if `condition` compares equal to zero, which is logically **false**), `expressionF` is evaluated, and the result is the value of `expressionF`.  ## Conditional operator `?:`  Syntax: `condition ? expressionT : expressionF`,  Example: `to_uppercase(c)` returns the uppercase form of `c` if `c` is a lowercase letter, or `c` itself if it is not.   <pre><code>char to_uppercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return c - ('a' - 'A');\n  else\n    return c;\n}\n</code></pre>   Use `?:` to rewrite it:   <pre><code>char to_uppercase(char c) {\n  return c &gt;= 'a' &amp;&amp; c &lt;= 'z' ? c - ('a' - 'A') : c;\n}\n</code></pre>   Syntax: `condition ? expressionT : expressionF`  Use it to replace some simple and short `if`-`else` statement.  **Avoid abusing it!** Nested conditional operators reduces readability significantly.   <pre><code>int result = a &lt; b ? (a &lt; c ? a : c) : (b &lt; c ? b : c); // Um ...\n</code></pre>   **[Best practice]** Avoid more than two levels of nested conditional operators.  ## Assignment operator `=`  `lhs = rhs`  The assignment operator **returns the value of `lhs` after assignment**.  Moreover, the assignment operator is **right-associative**, making it possible to write \"chained\" assignments:   <pre><code>int a = 0, b = 1, c = 2;\na = b = c; // interpreted as a = (b = c)\n           // Both a and b are assigned with 2.\n</code></pre>   # Control Flow  ## `do`-`while`      Syntax: `do loop_body while (condition);`  Executes `loop_body` repeatedly until the value of `condition` compares equal to zero (is logically **false**).  Example:   <pre><code>int i = 0;\ndo {\n  printf(\"%d\", i++);\n} while (i &lt; 5);\n</code></pre>   Output: `01234`  Note that in each iteration, the condition is tested **after** the body is executed.   <pre><code>int i = 0;\ndo {\n  printf(\"%d\", i++);\n} while (i &lt; n);\n</code></pre>   Even if `n == 0`, `0` is printed. The loop body is always executed at least once.  Rewrite a `do`-`while` loop using a `while` loop.   <pre><code>do {\n  // loop_body\n} while (condition);\n</code></pre>   Use `while (1)` and `break`:   <pre><code>while (1) {\n  // loop_body\n  if (!condition)\n    break;\n}\n</code></pre>   ## `switch`-`case`  `switch (expression) { ... }`    <pre><code>switch (op) {\ncase '+':\n  printf(\"%lf\\n\", a + b); break;\ncase '-':\n  printf(\"%lf\\n\", a - b); break;\ncase '*':\n  printf(\"%lf\\n\", a * b); break;\ncase '/':\n  printf(\"%lf\\n\", a / b); break;\ndefault:\n  printf(\"Invalid operator!\\n\");\n  break;\n}\n</code></pre>    - First, `expression` is evaluated. - Control finds the `case` label to which `expression` compares equal, and then goes to that label. - Starting from the selected label, **all subsequent statements are executed until a `break;` or the end of the `switch` statement is reached.** - Note that `break;` here has a special meaning.   - If no `case` label is selected and `default:` is present, the control goes to the `default:` label.  - `default:` is optional, and often appears in the end, though not necessarily.  - `break;` is often needed. Modern compilers often warn against a missing `break;``    The expression in a `case` label must be an integer [*constant expression*](https://en.cppreference.com/w/c/language/constant_expression), whose value is known at compile-time, such as `42`, `'a'`, `true`, ...   <pre><code>int n; scanf(\"%d\", &amp;n);\nint x = 42;\nswitch (value) {\n  case 3.14: // Error: It must have an integer type.\n    printf(\"It is pi.\\n\");\n  case n:    // Error: It must be a constant expression (known at compile-time)\n    printf(\"It is equal to n.\\n\");\n  case 42:   // OK.\n    printf(\"It is equal to 42.\\n\");\n  case x:    // Error: `x` is a variable, not treated as \"constant expression\".\n    printf(\"It is equal to x.\\n\");\n}\n</code></pre>   Another example: Determine whether a letter is vowel or consonant.   <pre><code>switch (letter) {\n  case 'a':\n  case 'e':\n  case 'i':\n  case 'o':\n  case 'u':\n    printf(\"%c is vowel.\\n\", letter);\n    break;\n  default:\n    printf(\"%c is consonant.\\n\", letter);\n}\n</code></pre>   # Functions  ## Call and return   <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\ndouble divide(int a, int b) {\n  if (b == 0) {\n    fprintf(stderr, \"Division by zero!\\n\");\n    exit(EXIT_FAILURE);\n  }\n  return 1.0 * a / b;\n}\n\nint main(void) {\n  int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n  double result = divide(x, y);\n  printf(\"%lf\\n\", result);\n  // ...\n}\n</code></pre>    - For the *call expression* `divide(x, y)`: First the arguments `x` and `y` are passed into `divide` as if the parameters are initialized ${}^{\\textcolor{red}{3}}$ as follows:    ```c   int a = x;   int b = y;   ```    Then control is transferred into the function `divide`, starting from the first statement.      `return` does two things:  - passes a value out to the *call site*.   - This value is the result of the **call expression**.   - Such a value does not exist if the function return type is `void`. - transfers the control to the *call site*.       - The parentheses `()` in the expression `divide(x, y)` is the **function-call operator**. - Even if the function accepts no parameters, the function-call operator should not be omitted. - A statement like `f;` without the function-call operator is **valid**.   - It is a statement that has no effect, just like `5;`, `2+3;`, `;` or `{}`.          If a function has return type `void`, the function does not pass a value to the call site.  For a non-`void` function:  - A `return something;` statement must be executed to return something. - If control reaches the end of the function without a `return` statement, the return value is undefined. **The behavior is undefined** if such value is used.   <pre><code>int do_something(int i) {\n  printf(\"%d\\n\", i);\n}\n</code></pre> <pre><code>a.c: In function \u2018do_something\u2019:\na.c:5:1: warning: control reaches end of non-void function [-Wreturn-type]\n    5 | }\n</code></pre>   The last `if (x &gt; 0)` is not needed:   <pre><code>int abs_int(int x) {\n  if (x &lt; 0)\n    return -x;\n  else if (x == 0)\n    return 0;\n  else // x &gt; 0 must hold. No need to test it\n    return x;\n}\n</code></pre>   It can be simplified as   <pre><code>int abs_int(int x) {\n  return x &lt; 0 ? -x : x;\n}\n</code></pre>   ## Function declaration and definition  A **definition** of a function contains the function body.   <pre><code>int sum(int a, int b) {\n  return a + b;\n}\n</code></pre>   A **declaration** of a function contains only its return type, its name and the types of its parameters, ended with `;`.  The following statements declare **the same function**:   <pre><code>int sum(int, int);\nint sum(int x, int y);\nint sum(int a, int);\n</code></pre>   - A function should have only one definition, but can be declared many times. - A definition is also a declaration, since it contains all the information that a declaration has. - When a function is called, its declaration must be present.   <pre><code>int sum(int, int);      // declares the function\nint main(void) {\n  int x = sum(2, 3);    // ok\n}\nint sum(int x, int y) { // gives its definition afterwards\n  return x + y;\n}\n</code></pre>   ## Scopes   <pre><code>int add(int x, int y) {\n  return x + y;\n}\nint square(int x) {\n  return x * x;\n}\nint main(void) {\n  int x; scanf(\"%d\", &amp;x);\n  printf(\"%d\\n\", square(x));\n  if (x == 42) {\n    int x = 35;\n    printf(\"%d\\n\", square(square(x)));\n  }\n  for (int x = 1; x &lt;= 10; ++x)\n    printf(\"%d\\n\", square(x + 1));\n  return 0;\n}\n</code></pre>    - The scopes form a tree structure:  - ```   global---add          |-square          |-main---if                 |-for   ```  ## Name lookup   - The scopes form a tree structure:  - ```   global---add          |-square          |-main---if                 |-for   ```  - When a name `x` is referenced, the **name lookup** for `x` is performed:    - Only the declarations before the current position can be seen.   - Lookup is performed from the innermost scope to the outer scopes, until a declaration is found.   - A declaration in an inner scope may hide a declaration in an outer scope that introduces the same name.  ## Scopes and name lookup  **[Best practice]** Declare a variable right before the use of it. Declare it in a scope as small as possible.  **[Best practice]** Don't worry about the same names in different scopes. <pre><code>// The three `i`'s are local to the three loops. They will not collide.\nfor (int i = 0; i &lt; n; ++i)\n  do_something(i);\nfor (int i = 0; i &lt; n; ++i)\n  do_another_thing(i);\nif (condition()) {\n  for (int i = 0; i &lt; n; ++i)\n    do_something_else(i);\n}\n</code></pre>   # CS100 Lecture 5  Variables II, Pointers and Arrays I  ## Contents  - Variables   - Local `static` variables   - Initialization   - `const` type qualifier - Pointers - Arrays  ## Local `static` variables   <pre><code>void start_game(Player *p1, Player *p2, int difficulty, GameWorld *world) {\n  static bool called = false;\n  if (called)\n    report_an_error(\"You cannot start the game twice!\");\n  called = true;\n  // ...\n}\n</code></pre>   The lifetime of a local `static` variable is **as long as** that of a global variable. *(They both have [static storage duration](https://en.cppreference.com/w/c/language/storage_duration#Storage_duration).)*  - A local `static` variable is initialized **during program startup**, and is destroyed **on program termination**.  It behaves just like a global variable, but its name is inside a function, which does not pollute the global name space.  ## Initialization  If we declare a variable without explicit initialization, what is the value of it?  Experiment:    <pre><code>#include &lt;stdio.h&gt;\n\nint global;\n\nint main(void) {\n  int local;\n  static int local_static;\n  printf(\"%d, %d, %d\\n\", global, local,\n         local_static);\n  return 0;\n}\n</code></pre>    - Compiled without `-O2` (a kind of optimization):    ```   0, 22031, 0   ```  - Compiled with `-O2`:    ```   0, 0, 0   ```  ## Implicit initialization [Very important]  If a variable is declared without explicit initialization:  - For local non-`static` variables, they are initialized to **indeterminate values**. In other words, they are **uninitialized**.  - For global or local `static` variables, they are [**empty-initialized**](https://en.cppreference.com/w/c/language/initialization#Empty_initialization) ${}^{\\textcolor{red}{1}}$:    - Pointers are initialized to *null pointer values* of their types. (later in this lecture)   - Objects of integral types are initialized to `0`.   - Objects of floating types are initialized to positive zero (`0.0`).   - Other cases will be discussed in later lectures.    \\* Intuitively, such variables are initialized to some kind of \"zero\" ${}^{\\textcolor{red}{2}}$. This is called [zero-initialization](https://en.cppreference.com/w/cpp/language/zero_initialization) in C++.  ## Uninitialized garbage can be deadly!  **[Best practice]** Always initialize the variable.  Except in certain cases, e.g.   <pre><code>// in some function\nint n;           // uninitialized\nscanf(\"%d\", &amp;n); // A value is assigned to `n` immediately. This is OK.\n// Now the value of `n` is not indeterminate. It can be used normally.\n</code></pre>   ## `const` type qualifier  Each type `T` (not `const`-qualified) has a `const`-qualified version of that type, written as `T const` or `const T`.  Any direct modification of variables with `const`-qualified types is not allowed:   <pre><code>const int n = 100; // Type of `n` is `const int`.\n++n; // Error.\n</code></pre>   (Any indirect modification of `const` variables is undefined behavior; see in later lectures.)  A `const` variable cannot be modified after initialization.  Therefore, an uninitialized `const` local non-`static` variable is almost a non-stop ticket to undefined behavior.   <pre><code>// in some function\nconst int n; // `n` has indeterminate values\nn = 42; // Error: cannot modify a const variable.\nscanf(\"%d\", &amp;n); // Error: cannot modify a const variable.\n</code></pre>   In C++, `const` variables of built-in types must be initialized.  # Pointers  ## Pointers  A pointer *points to* a variable. The **value** of a pointer is the address of the variable that it points to.    <pre><code>int i = 42;\nint* pi = &amp;i;\nprintf(\"%d\\n\", *pi);\n</code></pre>   - `int* pi;` declares a pointer named `pi`.   - The type of `pi` is `int*`.   - The type of the variable that `pi` points to (\"pointee\") is `int`. - `&amp;` is the **address-of operator**, used for taking the address of a variable. - `*` in the expression `*pi` is the **indirection (dereference) operator**, used for obtaining the variable that a pointer points to.  A pointer *points to* a variable.  We can access and modify a variable through its address (or a pointer pointing to it).   <pre><code>int num = 3;\nint* ptr = &amp;num;\nprintf(\"%d\\n\", *ptr);  // 3\n*ptr = 10;\nprintf(\"%d\\n\", num);   // 10\n++num;\nprintf(\"%d\\n\", *ptr);  // 11\n</code></pre>   ## Declare a pointer  To declare a pointer: `PointeeType* ptr;`  - The type of `ptr` is `PointeeType*`.   - Pointer types with different pointee types are **different types**: `int*` and `double*` are different. - The asterisk `*` can be placed near either `PointeeType` or `ptr`:   - `PointeeType* ptr;` and `PointeeType *ptr;` are the same declaration.   - `PointeeType * ptr;`, `PointeeType       *   ptr;` and `PointeeType*ptr;` are also correct.  The asterisk `*` can be placed near either `PointeeType` or `ptr`:  - `PointeeType* ptr;` may be more intuitive?  However, when declaring more than one pointers in one declaration statement, an asterisk is needed **for every identifier**:   <pre><code>int* p1, p2, p3;   // `p1` is of type `int*`, but `p2` and `p3` are ints.\nint *q1, *q2, *q3; // `q1`, `q2` and `q3` all have the type `int*`.\nint* r1, r2, *r3;  // `r1` and `r3` are of the type `int*`,\n                   // while `r2` is an int.\n</code></pre>   **[Best practice]** Either `PointeeType *ptr` or `PointeeType* ptr` is ok. Choose one style and stick to it. But if you choose the second one, never declare more than one pointers in one declaration statement.  ## `&amp;` and `*`  `&amp;var` returns the address of the variable `var`.  - The result type is `Type *`, where `Type` is the type of `var`. - `var` must be an object that has an identity (an *lvalue*) ${}^{\\textcolor{red}{3}}$: `&amp;42` or `&amp;(a + b)` are not allowed.  `*expr` returns **the variable** whose address is the value of `expr`.  - `expr` must have a pointer type `PointeeType *`. The result type is `PointeeType`. - **The variable** is returned, not only its value. This means that we can modify the returned variable: `++*ptr` is allowed.  ## `*`  In a **declaration** `PointeeType *ptr`, `*` is a part of the pointer type `PointeeType *`.  In an **expression** like `*ptr`, `*` is the **indirection (dereference) operator** used to obtain the variable whose address is the value of `ptr`.  Do not mix them up!  ## The null pointer  The **null pointer value** is the \"zero\" value for pointer types ${}^{\\textcolor{red}{4}}$.  - It can be obtained from the macro [`NULL`](https://en.cppreference.com/w/c/types/NULL), which is available from many standard library header files (e.g. ``, ``, ``):    ```c   int *ptr = NULL; // `ptr` is a null pointer.   ```  - It can also be obtained from the integer literal `0`.    ```c   double *ptr = 0; // same as `double *ptr = NULL;`   ```  - Conversion from a null pointer to an integer type results in `0`.  Note: Better null pointer values (`nullptr`) are available [in C23](https://en.cppreference.com/w/c/language/nullptr) and [in C++11](https://en.cppreference.com/w/cpp/language/nullptr).  The **null pointer value** is the \"zero\" value for pointer types ${}^{\\textcolor{red}{4}}$.  A null pointer compares unequal to any pointer pointing to an object.  It is used for representing a pointer that \"points nowhere\".  **Dereferencing a null pointer is undefined behavior, and often causes severe runtime errors!**  - Because it is not pointing to an object.   <pre><code>int *ptr = NULL;\nprintf(\"%d\\n\", *ptr); // undefined behavior\n*ptr = 42; // undefined behavior\n</code></pre>   ## Implicit initialization of pointers  If a pointer is not explicitly initialized:  - Global or local `static`: Initialized to the null pointer value. - Local non-`static`: Initialized to indeterminate values, or in other words, **uninitialized**.   - Uninitialized pointers are often called **wild pointers**.  A wild pointer do not point to a specific object, and is not a null pointer either.  **Dereferencing a wild pointer is undefined behavior, and often causes severe runtime errors.**  **[Best practice]** Avoid wild pointers.  ## Pointers that are not dereferenceable  A pointer `ptr` is dereferenceable. $\\Leftrightarrow$ `*ptr` has no undefined behavior. $\\Leftrightarrow$ `ptr` points to an existing object.  A pointer that does not point to an existing object may be  - uninitialized (wild), or - a null pointer, or - dangling (We will discuss this in later lectures.), or - holding some other meaningless address: `int *p = 123`  Dereferencing such a pointer is undefined behavior, and usually causes severe runtime errors.  - Recall the \"short-circuit\" evaluation of binary logical operators:    ```c   if (ptr != NULL &amp;&amp; *ptr == 42) { /* ... */ }   ```    When `ptr` is a null pointer, the right-hand side operand `*ptr == 42` won't be evaluated, so `ptr` is not dereferenced.  ## Argument passing  What is the output? Is the value of `i` changed to `42`?    <pre><code>void fun(int x) {\n   x = 42;\n }\n int main(void) {\n   int i = 30;\n   fun(i);\n   printf(\"%d\\n\", i); // 30\n }  \n</code></pre>   The output is still `30`. `i` is not changed.  - The parameter `x` is initialized as if `int x = i;`, thus obtaining the **value** of `i`.   - `x` and `i` are two independent variables. - Modification on `x` does not influence `i`.  # Arrays  ## Arrays  An array is a sequence of `N` objects of an *element type* `ElemType` stored **contiguously** in memory, where `N` $\\in\\mathbb Z_+$ is the *length* of it.   <pre><code>ElemType arr[N];\n</code></pre>   `N` must be a **constant expression** whose value is known at compile-time.   <pre><code>int a1[10];      // OK. A literal is a constant expression.\n#define MAXN 10\nint a2[MAXN];    // OK. `MAXN` is replaced with `10` by the preprocessor.\nint n; scanf(\"%d\", &amp;n);\nint a[n];        // A C99 VLA (Variable-Length Array), whose length is\n                 // determined at runtime.\n</code></pre>   For now, we do not recommend the use of VLAs. We will talk more about it in recitations.  An array is a sequence of `N` objects of an *element type* `ElemType` stored **contiguously** in memory, where `N` $\\in\\mathbb Z_+$ is the *length* of it.   <pre><code>ElemType arr[N]; // The type of `arr` is `ElemType [N]`.\n</code></pre>   The type of an array consists of two parts:  1. the element type `ElemType`, and 2. the length of the array `[N]`.   <pre><code>ElemType arr[N];\n</code></pre>   Use `arr[i]` to obtain the `i`-th element of `arr`, where `i` $\\in[0,N)$.    <pre><code>int a[10];\n\nbool find(int value) {\n  for (int i = 0; i &lt; 10; ++i)\n    if (a[i] == value)\n      return true;\n  return false;\n}\n</code></pre> <pre><code>int main(void) {\n  int n; scanf(\"%d\", &amp;n);\n  for (int i = 0; i &lt; n; ++i)\n    scanf(\"%d\", &amp;a[i]);\n  for (int i = 0; i &lt; n; ++i)\n    a[i] *= 2;\n  // ...\n}\n</code></pre>   The subscript `i` is an integer within the range $[0,N)$. **Array subscript out of range is undefined behavior, and usually causes severe runtime errors.**  The compiler may assume that the program is free of undefined behaviors:  If an array is declared without explicit initialization:  - Global or local `static`: Empty-initialization $\\Rightarrow$ Every element is empty-initialized. - Local non-`static`: Every element is initialized to indeterminate values (uninitialized).  Arrays can be initialized from [brace-enclosed lists](https://en.cppreference.com/w/c/language/array_initialization#Initialization_from_brace-enclosed_lists):  - Initialize the beginning few elements:    ```c   int a[10] = {2, 3, 5, 7}; // Correct: Initializes a[0], a[1], a[2], a[3]   int b[2] = {2, 3, 5};     // Error: Too many initializers   int c[] = {2, 3, 5};      // Correct: 'c' has type int[3].   int d[100] = {};          // Correct in C++ and since C23.   ```  - Initialize designated elements (since C99):    ```c   int e[10] = {[0] = 2, 3, 5, [7] = 7, 11, [4] = 13};   ```  If an array is explicitly initialized, all the elements that are not explicitly initialized are **empty-initialized**.   <pre><code>int main(void) {\n  int a[10] = {1, 2, 3}; // a[3], a[4], ... are all initialized to zero.\n  int b[100] = {0};      // All elements of b are initialized to zero.\n  int c[100] = {1};      // c[0] is initialized to 1,\n                         // and the rest are initialized to zero.\n}\n</code></pre>   **`= {x}` is not initializing all elements to `x`!**  ## Nested arrays  The C answer to \"multidimensional arrays\" is **nested arrays**, which is in fact **arrays of arrays**:   <pre><code>int a[10][20];\n\nbool find(int value) {\n  for (int i = 0; i &lt; 10; ++i)\n    for (int j = 0; j &lt; 20; ++j)\n      if (a[i][j] == value)\n        return true;\n  return false;\n}\n</code></pre>   ---  ## Initialization of nested arrays   <pre><code>int a[4][3] = { // array of 4 arrays of 3 ints each (4x3 matrix)\n    { 1 },      // row 0 initialized to {1, 0, 0}\n    { 0, 1 },   // row 1 initialized to {0, 1, 0}\n    { [2]=1 },  // row 2 initialized to {0, 0, 1}\n};              // row 3 initialized to {0, 0, 0}\nint b[4][3] = {    // array of 4 arrays of 3 ints each (4x3 matrix)\n  1, 3, 5, 2, 4, 6, 3, 5, 7 // row 0 initialized to {1, 3, 5}\n};                          // row 1 initialized to {2, 4, 6}\n                            // row 2 initialized to {3, 5, 7}\n                            // row 3 initialized to {0, 0, 0}\nint y[4][3] = {[0][0]=1, [1][1]=1, [2][0]=1};  // row 0 initialized to {1, 0, 0}\n                                               // row 1 initialized to {0, 1, 0}\n                                               // row 2 initialized to {1, 0, 0}\n                                               // row 3 initialized to {0, 0, 0}\n</code></pre>   # CS100 Lecture 6  Pointers and Arrays II  ## Contents  Pointers and Arrays  - Pointer arithmetic - Array-to-pointer conversion - Pass an array to a function - Pass a nested array to a function - Do we need an array?  # Pointers and Arrays  ## Pointer arithmetic  Let `p` be a pointer of type `T *` and let `i` be an integer.  - `p + i` returns the address equal to the value of `(char *)p + i * sizeof(T)`. In other words, pointer arithmetic uses the unit of the pointed-to type. - If we let `p = &amp;a[0]` (where `a` is an array of type `T [N]`), then   - `p + i` is equivalent to `&amp;a[i]`, and   - `*(p + i)` is equivalent to `a[i]`.  - Arithmetic operations `i + p`, `p += i`, `p - i`, `p -= i`, `++p`, `p++`, `--p`, `p--` are defined in the same way.  ## Array-to-pointer conversion  If we let `p = &amp;a[0]` (where `a` is an array of type `T [N]`), then  - `p + i` is equivalent to `&amp;a[i]`, and - `*(p + i)` is equivalent to `a[i]`.  Considering the close relationship between arrays and pointers, an array can be **implicitly converted** to a pointer to the first element: **`a` $\\rightarrow$ `&amp;a[0]`, `T [N]` $\\rightarrow$ `T *`**.  - `p = &amp;a[0]` can be written as `p = a` directly. - `*a` is equivalent to `a[0]`.  We can use pointers to traverse an array:   <pre><code>int a[10];\n\nbool find(int value) {\n  for (int *p = a; p &lt; a + 10; ++p)\n    if (*p == value)\n      return true;\n  return false;\n}\n</code></pre>   ## Subtraction of pointers  Let `a` be an array of length `N`. If `p1 == a + i` and `p2 == a + j` (where `i` and `j` are nonnegative integers), the expression `p1 - p2`  - has the value equal to `i - j`, and - has the type `ptrdiff_t`, which is a **signed** integer type declared in ``.   - The size of `ptrdiff_t` is implementation-defined. For example, it might be 64-bit on a 64-bit machine, and 32-bit on a 32-bit machine. - Here `i`, `j` $\\in[0,N]$ (closed interval), i.e. `p1` or `p2` may point to the *\"past-the-end\"* position of `a`.  ## Pointer arithmetic  Pointer arithmetic can only happen within the range of an array and its \"past-the-end\" position (indexed $[0,N]$). For other cases, **the behavior is undefined**.  Examples of undefined behaviors:  - `p1 - p2`, where `p1` and `p2` point to the positions of two different arrays. - `p + 2 * N`, where `p` points to some element in an array of length `N`. - `p - 1`, where `p` points to the first element `a[0]` of some array `a`.  Note that the evaluation of the innocent-looking expression `p - 1`, without dereferencing it, is still undefined behavior and may fail on some platforms.  ## Pass an array to a function  The only way ${}^{\\textcolor{red}{1}}$ of passing an array to a function is to **pass the address of its first element**.  The following declarations are equivalent:   <pre><code>void fun(int *a);\nvoid fun(int a[]);\nvoid fun(int a[10]);\nvoid fun(int a[2]);\n</code></pre>   In all these declarations, the type of the parameter `a` is `int *`.  - How do you verify that?  ## Pass an array to a function   <pre><code>void fun(int a[100]);\n</code></pre>   The type of the parameter `a` is `int *`. How do you verify that?   <pre><code>void fun(int a[100]) {\n  printf(\"%d\\n\", (int)sizeof(a));\n}\n</code></pre>   Output: (On 64-bit Ubuntu 22.04, GCC 13)   <pre><code>8\n</code></pre>   - If the type of `a` is `int[100]` as declared, the output should be `400` (assuming `int` is 32-bit).  ## Pass an array to a function  Even if you declare the parameter as an array (either `T a[N]` or `T a[]`), its type is still a pointer `T*`: **You are allowed to pass anything of type `T*` to it.**  - Array of element type `T` with any length is allowed to be passed to it.   <pre><code>void print(int a[10]) {\n  for (int i = 0; i &lt; 10; ++i)\n    printf(\"%d\\n\", *(a + i));\n}\nint main(void) {\n  int x[20] = {0}, y[10] = {0}, z[5] = {0}, w = 42;\n  print(x);  // OK\n  print(y);  // OK\n  print(z);  // Allowed by the compiler, but undefined behavior!\n  print(&amp;w); // Still allowed by the compiler, also undefined behavior!\n}\n</code></pre>   Even if you declare the parameter as an array (either `T a[N]` or `T a[]`), its type is still a pointer `T*`: **You are allowed to pass anything of type `T*` to it.**  - Array of element type `T` with any length is allowed to be passed to it.  The length `n` of the array is often passed explicitly as another argument, so that the function can know how long the array is.   <pre><code>void print(int *a, int n) {\n  for (int i = 0; i &lt; n; ++i)\n    printf(\"%d\\n\", *(a + i));\n}\n</code></pre>   ## Subscript on pointers   <pre><code>void print(int *a, int n) {\n  for (int i = 0; i &lt; n; ++i)\n    printf(\"%d\\n\", a[i]); // Look at this!\n}\n</code></pre>   Subscript on pointers is also allowed! `a[i]` is equivalent to `*(a + i)`. ${}^{\\textcolor{red}{2}}$  ## Return an array?  There is no way of returning an array from the function.  Returning the address of its first element is ok, **but be careful**:   This is OK:   <pre><code>int a[10];\n\nint *foo(void) {\n  return a;\n}\n</code></pre>    This returns an **invalid address**! (Why?)   <pre><code>int *foo(void) {\n  int a[10] = {0};\n  return a;\n}\n</code></pre>   ## Return an array?  These two functions have made the same mistake: **returning the address of a local variable**.    <pre><code>int *foo(void) {\n  int a[10] = {0};\n  return a;\n}\nint main(void) {\n  int *a = foo();\n  a[0] = 42; // undefined behavior\n}\n</code></pre> <pre><code>int *fun(void) {\n  int x = 42;\n  return &amp;x;\n}\nint main(void) {\n  // undefined behavior\n  printf(\"%d\\n\", *fun());\n}\n</code></pre>   - When the function returns, all the parameters and local objects are destroyed.   - `a` and `x` no longer exist. - The objects on the returned addresses are **\"dead\"** when the function returns!  ## Pointer type (revisited)  The type of a pointer is `PointeeType *`.  For two different types `T1` and `T2`, the pointer types `T1 *` and `T2 *` are **different types**, although they may point to the same location.   <pre><code>int i = 42;\nfloat *fp = &amp;i;\n++*fp; // Undefined behavior. It is not ++i.\n</code></pre>   In C, pointers of different types can be implicitly converted to each other (with possibly a warning). This is **extremely unsafe** and an error in C++.  Dereferencing a pointer of type `T1 *` when it is actually pointing to a `T2` is *almost always* undefined behavior.  - We will see one exception in the next lecture. ${}^{\\textcolor{red}{3}}  ## Pass a nested array to a function  When passing an array to a function, we make use of the **array-to-pointer conversion**:  - `Type [N]` will be implicitly converted to `Type *`.  A \"2d-array\" is an \"array of array\":  - `Type [N][M]` is an array of `N` elements, where each element is of type `Type [M]`. - `Type [N][M]` should be implicitly converted to a \"pointer to `Type[M]`\".  What is a \"pointer to `Type[M]`\"?  ---  ## Pointer to array   A pointer to an array of `N` `int`s:   <pre><code>int (*parr)[N];\n</code></pre>    An array of `N` pointers (pointing to `int`):   <pre><code>int *arrp[N];\n</code></pre>   Too confusing! How can I remember them?  - `int (*parr)[N]` has a pair of parentheses around `*` and `parr`, so   - `parr` is a pointer (`*`), and   - points to something of type `int[N]`. - Then the other one is different:   - `arrp` is an array, and   - stores `N` pointers, with pointee type `int`.  ## Pass a nested array to a function   <pre><code>void print(int (*a)[5], int n) {\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; 5; ++j)\n      printf(\"%d \", a[i][j]);\n    printf(\"\\n\");\n  }\n}\nint main(void) {\n  int a[2][5] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}};\n  int b[3][5] = {0};\n  print(a, 2); // OK\n  print(b, 3); // OK\n}\n</code></pre>   In each of the following declarations, what is the type of `a`? Does it accept an argument of type `int[N][M]`?  1. `void fun(int a[N][M])`: A pointer to `int[M]`. Yes. 2. `void fun(int (*a)[M])`: Same as 1. 3. `void fun(int (*a)[N])`: A pointer to `int[N]`. **Yes iff `N == M`.** 4. `void fun(int **a)`: A pointer to `int *`. **No.** 5. `void fun(int *a[])`: Same as 4. 6. `void fun(int *a[N])`: Same as 4. 7. `void fun(int a[100][M])`: Same as 1. 8. `void fun(int a[N][100])`: A pointer to `int[100]`. Yes iff `M == 100`.  # CS100 Lecture 7  Pointers and Arrays III, Dynamic memory, Strings  ## Contents  - Pointers and Arrays   - Pointers and `const`   - The `void *` type - Dynamic memory - Strings  # Pointers and Arrays  ## Pointer to `const`  A pointer to `const` is a pointer whose pointee type is `const`-qualified:   <pre><code>const int x = 42;\nint *pi = &amp;x; // Dangerous: It discards the const qualifier.\nconst int *cpi = &amp;x; // Better.\n</code></pre>   The type of `cpi` is `const int *` (or equivalently, `int const *`), which is a pointer to `const int`.  ## `const` is a \"lock\"  `const` is like a lock, guarding against modifications to the variable.  It is very dangerous to let a pointer to non-`const` point to a `const` variable: It is an attempt to remove the lock!  - Warning in C, error in C++.   <pre><code>const int x = 42;\nint *pi = &amp;x; // Dangerous: It discards the const qualifier.\nconst int *cpi = &amp;x; // Better.\n++*pi; // No error is generated by the compiler, but actually undefined behavior.\n</code></pre>   Any indirect modification to a `const` variable is **undefined behavior**.  `const` is like a lock, guarding against modifications to the variable.  A pointer to `const` can point to a non-`const` variable: This is adding a lock.   <pre><code>int x = 42;\nint *pi = &amp;x;\nconst int *cpi = &amp;x; // OK.\n++*pi; // Correct, same as ++x.\n++*cpi; // Error!\n</code></pre>   - **A pointer to `const` *thinks* that it is pointing to a `const` variable.** Therefore, it does not allow you to modify the variable through it.  Such `const`ness on the **pointee type** is often called \"low-level `const`ness\".  ## `const` can be helpful  It tells the compiler \"this variable should not be modified!\".   <pre><code>int count(const int *a, int n, int value) {\n  int cnt = 0;\n  for (int i = 0; i &lt; n; ++i)\n    if (a[i] = value) // Error: cannot modify a[i]\n      ++cnt;\n  return cnt;\n}\n</code></pre>   **[Best practice]** Use `const` whenever possible.  We will see more usage of `const` in C++.  ---  ## Top-level `const`ness  A pointer itself can also be `const`. The type of such pointer is `PointeeType *const`.  - Such `const`ness is often called \"top-level `const`ness\".   <pre><code>int x = 42;\nint *const pc = &amp;x;\n++*pc; // OK.\nint y = 30;\npc = &amp;y; // Error.\n</code></pre>   A `const` pointer cannot switch to point to other variables after initialization.  A pointer can have both low-level and top-level `const`ness:   <pre><code>const int *const cipc = &amp;x;\n</code></pre>   ## `void *`  A special pointer type:  - Any pointer can be implicitly converted to that type.  - A pointer of type `void *` can be implicitly converted to any pointer type.    - This must happen explicitly in C++.  - Use `printf(\"%p\", ptr);` to print the value of a pointer `ptr` of type `void *`.    - If `ptr` is a pointer of some other type, a conversion is needed:      ```c     printf(\"%p\", (void *)ptr);     ```  **The C type system is weak. Many kinds of implicit conversions are very dangerous, although allowed by C.**  C does not have a static type system as powerful as C++'s. `void *` is often used to represent \"pointer to anything\", \"location of some memory\", or even \"any object\".  - Typically, the memory allocation function `malloc` (see below) returns `void *`, the address of the block of memory allocated.   - Memory does not have types. - We say \"a disk of 1TB\" instead of \"a disk that can hold $2^{38}$ `int`s\".  ---  # Dynamic memory  ## A \"dynamic array\"  Create an \"array\" whose size is determined at runtime?  - We need a block of memory, the size of which can be determined at runtime. - If we run out of memory, **we need to know**. - We may require a pretty large chunk of memory.  ---  ## Stack memory vs heap (dynamic) memory   - Stack memory is generally smaller than heap memory. - Stack memory is often used for storing local and temporary objects. - Heap memory is often used for storing large objects, and objects with long lifetime. - Operations on stack memory is faster than on heap memory. - Stack memory is allocated and deallocated automatically, while heap memory needs manual management.      ---  ## Use [`malloc`](https://en.cppreference.com/w/c/memory/malloc) and [`free`](https://en.cppreference.com/w/c/memory/free)  Declared in ``.   <pre><code>void *malloc(size_t size);\n</code></pre> <pre><code>T *ptr = malloc(sizeof(T) * n); // sizeof(T) * n bytes\nfor (int i = 0; i != n; ++i)\n  ptr[i] = /* ... */\n// Now you can use `ptr` as if it points to an array of `n` objects of type `T`\n// ...\nfree(ptr);\n</code></pre>   To avoid **memory leaks**, the starting address of that block memory must be passed to `free` when the memory is not used anymore.  ## Use [`malloc`](https://en.cppreference.com/w/c/memory/malloc) and [`free`](https://en.cppreference.com/w/c/memory/free)  Declared in ``.   <pre><code>void free(void *ptr);\n</code></pre>   Deallocates the space previously allocated by an allocation function (such as `malloc`).  **The behavior is undefined** if the memory area referred to by `ptr` has already been deallocated.  - In other words, \"double `free`\" is undefined behavior (and often causes severe runtime errors).  After `free(ptr)`, `ptr` no longer points to an existing object, so it is no longer dereferenceable.  - Often called a \"dangling pointer\".  ---  ## Use `malloc` and `free`  We can also create one single object dynamically (on heap):   <pre><code>int *ptr = malloc(sizeof(int));\n*ptr = 42;\nprintf(\"%d\\n\", *ptr);\n// ...\nfree(ptr);\n</code></pre>   But why? Why not just create one normal variable like `int ival = 42;`?  Benefit: The lifetime of a dynamically allocated object goes beyond a local scope.  It is not destroyed until we `free` it.   <pre><code>int *create_array(void) {\n  int a[N];\n  return a; // Returns the address of the local object `a`.\n            // When the function returns, `a` will be destroyed, so that\n            // the returned address becomes invalid.\n            // Dereferencing the returned address is undefined behavior.\n}\nint *create_dynamic_array(int n) {\n  return malloc(sizeof(int) * n); // OK. The allocated memory is valid until\n                                  // we free it.\n}\n</code></pre>   Create a \"2-d array\" on heap?    <pre><code>int **p = malloc(sizeof(int *) * n);\nfor (int i = 0; i &lt; n; ++i)\n  p[i] = malloc(sizeof(int) * m);\nfor (int i = 0; i &lt; n; ++i)\n  for (int j = 0; j &lt; m; ++j)\n    p[i][j] = /* ... */\n// ...\nfor (int i = 0; i &lt; n; ++i)\n  free(p[i]);\nfree(p);\n</code></pre>     ## Use [`calloc`](https://en.cppreference.com/w/c/memory/calloc)  Declared in ``   <pre><code>void *calloc(size_t num, size_t each_size);\n</code></pre>   Allocates memory for an array of `num` objects (each of size `each_size`), and initializes all bytes in the allocated storage to zero ${}^{\\textcolor{red}{1}}$.  Similar as `malloc(num * each_size)`. ${}^{\\textcolor{red}{2}}$ Returns a null pointer on failure.  ## `malloc`, `calloc` and `free`  The behaviors of `malloc(0)`, `calloc(0, N)` and `calloc(N, 0)` are **implementation-defined**:  - They may or may not allocate memory. - If no memory is allocated, a null pointer is returned. - They may allocate *some* memory, for some reasons. In that case, the address of the allocated memory is returned.   - You cannot dereference the returned pointer.   - It still constitutes **memory leak** if such memory is not `free`d.  ## Arrays vs `malloc`  - An array has limited lifetime (unless it is global or `static`). It is destroyed when control reaches the end of its scope.  - Objects allocated by `malloc` are not destroyed until their address is passed to `free`.  - The program crashes if the size of an array is too large (running out of stack memory). There is no way of recovery.  - Attempt to `malloc` a block of memory that is too large results in a null pointer. We can know if there is no enough heap memory by doing a null check.    ```c   int *ptr = malloc(1ull &lt;&lt; 60); // unrealistic size   if (!ptr)     report_an_error(\"Out of memory.\");   ```  ## Summary  Pointer to `const`  - A pointer to `const` ***thinks*** that it is pointing to a `const` variable (though it may not), so it prevents you from modifying the pointed-to variable through it. - Use `const` whenever possible.  `void *`  - A pointer type that can contain anything. - Often used for representing \"any pointer\", \"any object\", or memory address.  ---  ## Summay  Dynamic memory   <pre><code>void *malloc(size_t size);\nvoid *calloc(size_t num, size_t each_size);\nvoid free(void *ptr);\n</code></pre>   `malloc`: Allocates `size` bytes of **uninitialized** memory and returns its starting address.  `calloc`: Allocates `num * each_size` bytes of memory ${}^{\\textcolor{red}{2}}$, each byte initialized to zero, and returns its starting address.  Both `malloc` and `calloc` return a null pointer on failure.  `free`: Deallocates the memory block starting at `ptr`.  ---  # Strings  ---  ## C-style strings  C does not have a special construct for \"string\".  A string is a sequence of characters stored contiguously. We often use an array or a pointer to the first character to represent a string.  - It can be stored in an array, or in dynamically allocated memory. - **It must be null-terminated: There should be a null character `'\\0'` at the end.**   <pre><code>char s[10] = \"abcde\";  // s = {'a', 'b', 'c', 'd', 'e', '\\0'}\nprintf(\"%s\\n\", s);     // prints abcde\nprintf(\"%s\\n\", s + 1); // prints bcde\ns[2] = ';';            // s = \"ab;de\"\nprintf(\"%s\\n\", s);     // prints ab;de\ns[2] = '\\0';\nprintf(\"%s\\n\", s);     // prints ab\n</code></pre>   The position of the first `'\\0'` is the end of the string. Anything after that is discarded.  ---  ## The null character `'\\0'`  `'\\0'` is the \"null character\" whose [ASCII](https://en.cppreference.com/w/c/language/ascii) value is 0.  It is **the only way** to mark the end of a C-style string.  Every standard library function that handles strings will search for `'\\0'` in that string.  - If there is no `'\\0'`, they will search nonstop, and eventually go out of range (undefined behavior).   <pre><code>char s[5] = \"abcde\"; // OK, but no place for '\\0'.\nprintf(\"%s\\n\", s);   // undefined behavior (missing '\\0')\n</code></pre>   **Remember to allocate one more byte storage for `'\\0'`!**  ---  ## Empty string  An empty string contains no characters before the null character.   <pre><code>char empty[] = \"\"; // `empty` is of type char[1], which contains only '\\0'.\nprintf(\"%s\\n\", empty); // Prints only a newline.\nprintf(\"\"); // Nothing is printed\n</code></pre>   ---  ## String I/O  [`scanf`](https://en.cppreference.com/w/c/io/fscanf)/[`printf`](https://en.cppreference.com/w/c/io/fprintf): `\"%s\"`  - `%s` in `scanf` matches a sequence of **non-whitespace** characters.   - Leading whitespaces are discarded.   - Reading starts from the first non-whitespace character, and stops right before the next whitespace character.   - `'\\0'` will be placed at the end.  Suppose the input is `   123  456`:   <pre><code>char str[100] = \"abcdef\";\nscanf(\"%s\", str); // Reads \"123\". `str` becomes {'1', '2', '3', '\\0', 'e', 'f'}\nprintf(\"%s\\n\", str); // Prints \"123\".\n                     // 'e' and 'f' are not considered as part of the string.\n</code></pre>   ---  ## String I/O  `scanf` is not memory safe:   <pre><code>char str[10];\nscanf(\"%s\", str);\n</code></pre>   - `str` is decayed (implicitly converted) to `char *` when passed as an argument. - `scanf` receives only a pointer `char *`. **It has no idea how big the array is**. - If the input content has more than 9 characters, it causes disaster!  That's why it is banned by MSVC. An alternative is to use `scanf_s`, but not necessarily supported by every compiler.  ---  ## String I/O  `gets` reads a string without bounds checking. **It has been removed since C11.**  - An alternative for `gets` that does bounds checking is `gets_s`, but not supported by every compiler.  **The best alternative: [`fgets`](https://en.cppreference.com/w/c/io/fgets).** It is more portable, more generic, and safer (with bounds checking).   <pre><code>char str[100];\nfgets(str, 100, stdin);\n</code></pre>   `puts(str)`: Prints the string `str`, followed by a newline.  ---  ## String I/O  Homework Read the [cppreference documentation for `fgets`](https://en.cppreference.com/w/c/io/fgets). Answer the following questions:  - How many characters does it read at most? - When does it stop?  ---  ## String manipulation / examination  Some common standard library functions: declared in ``.  - `strlen(str)`: Returns the length of the string `str`. - `strcpy(dest, src)`: Copies the string `src` to `dest`. - `strcat(dest, src)`: Appends a copy of `src` to the end of `dest`. - `strcmp(s1, s2)`: Compares two strings in lexicographical order. - `strchr(str, ch)`: Finds the first occurrence of `ch` in `str`.  **This page is only a brief introduction which cannot be relied on.** The detailed documentations can be found [here](https://en.cppreference.com/w/c/string/byte).  ## String manipulation / examination  **Read the documentation of a function before using it.**  - Is `'\\0'` counted in `strlen`? - Does `strcpy` put a null character at the end? What about `strncpy`? - For `strcpy(dest, src)`, what will happen if `dest` and `src` refer to the same memory address? What if they overlap? What about `strcat`? - What is the result of `strcmp`? Is it $\\in\\{-1,0,1\\}$? Is it `true`/`false`?  If you use the function without making these clear, **you are heading for late-night debugging sessions!**  ## String literals  A string literal is something like `\"abcde\"`, **surrounded by double quotes `\"`**.  - The type of a string literal is `char [N+1]`, where `N` is the length of the string.   - `+1` is for the terminating null character. - **But a string literal will be placed in read-only memory!!**   - In C++, its type is `const char [N+1]`, which is more reasonable.  When initializating a pointer with a string literal,   <pre><code>char *p = \"abcde\";\n</code></pre>   we are actually letting `p` point to the address of the string literal\uff0e  Using a pointer to non-`const` to point to a string literal is **allowed in C** (not allowed in C++), but **very dangerous**:   <pre><code>char *p = \"abcde\"; // OK\np[3] = 'a'; // No compile-error, but undefined behavior,\n            // and possibly severe runtime-error.\n</code></pre>   Correct ways:   Use low-level `const`ness to protect it:   <pre><code>const char *str = \"abcde\";\nstr[3] = 'a'; // compile-error\n</code></pre>    **Copy** the contents into an array:   <pre><code>char arr[] = \"abcde\";\narr[3] = 'a'; // OK.\n// `arr` contains a copy of \"abcde\".\n</code></pre>   ## Array of strings   <pre><code>const char *translations[] = {\n  \"zero\", \"one\", \"two\", \"three\", \"four\",\n  \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n};\n</code></pre>    - `translations` is an array of pointers, where each pointer points to a string literal. - `translations` **is not a 2-d array!**  # CS100 Lecture 8  Dynamic Memory and Strings Revisited  ---  ## Contents  - Recap - Command line arguments - Example: Read a string of unknown length    # Command line arguments  ## Command line arguments  The following command executes `gcc.exe`, and tells it the file to be compiled and the name of the output:   <pre><code>gcc hello.c -o hello\n</code></pre>   How are the arguments `hello.c`, `-o` and `hello` passed to `gcc.exe`?  - It is definitely different from \"input\".  ## A new signature of `main`   <pre><code>int main(int argc, char **argv) { /* body */ }\n</code></pre>   Run this program with some arguments: `.\\program one two three`   <pre><code>int main(int argc, char **argv) {\n  for (int i = 0; i &lt; argc; ++i)\n    puts(argv[i]);\n}\n</code></pre>   Output:   <pre><code>.\\program\none\ntwo\nthree\n</code></pre> <pre><code>int main(int argc, char **argv) { /* body */ }\n</code></pre>   where  - `argc` is a non-negative value representing the number of arguments passed to the program from the environment in which the program is run. - `argv` is a pointer to the first element of an array of `argc + 1` pointers, of which   - the last one is null, and   - the previous ones (if any) point to strings that represent the arguments.  If `argv[0]` is not null (or equivalently, if `argc &gt; 0`), it points to a string representing the program name.  ---  ## Command line arguments   <pre><code>int main(int argc, char **argv) { /* body */ }\n</code></pre>   `argv` is **an array of pointers** that point to the strings representing the arguments:  # Example: Read a string of unknown length  ## Read a string  `fgets(str, count, stdin)` reads a string, but at most `count - 1` characters.  `scanf(\"%s\", str)` reads a string, but not caring about whether the input content is too long to fit into the memory that `str` points to.  For example, the following code is likely to crash if the input is `responsibility`:   <pre><code>char word[6];\nscanf(\"%s\", word);\n</code></pre>   `scanf` does nothing to prevent the disaster.  - It does not even know how long the array `word` is!  Suppose we want to read a sequence of non-whitespace characters, the length of which is unknown.  - Use `malloc` / `free` to allocate and deallocate memory dynamically. - When the current buffer is not large enough, we allocate a larger one and copies the stored elements to it!   <pre><code>char *read_string(void) {\n  // ...\n  while (!isspace(c)) {\n    if (cur_pos == capacity - 1) { // `-1` is for '\\0'.\n      // ...\n    }\n    buffer[cur_pos++] = c;\n    c = getchar();\n  }\n\n  // Now, `c` is a whitespace. This is not part of the contents we need.\n  ungetc(c, stdin); // Put that whitespace back to the input.\n\n  buffer[cur_pos] = '\\0'; // Remember this!!!\n\n  return buffer;\n}\n</code></pre> <pre><code>int main(void) {\n  char *content = read_string();\n  puts(content);\n  free(content);\n}\n</code></pre>   Remember to `free` it after use!  # CS100 Lecture 9  `struct`, Recursion  ---  ## Contents  - `struct` - Recursion    - Factorial   - Print a non-negative integer   - Selection-sort  # `struct`  ## `struct` type  The name of the type defined by a `struct` is `struct Name`.  - Unlike C++, the keyword `struct` here is necessary.   <pre><code>struct Student stu; // `stu` is an object of type `struct Student`\nstruct Point3d polygon[1000]; // `polygon` is an array of 1000 objects,\n                              // each being of type `struct Point3d`.\nstruct TreeNode *pNode; // `pNode` is a pointer to `struct TreeNode`.\n</code></pre>   **\\* The term \"*object*\" is used interchangeably with \"*variable*\".**  - *Objects* often refer to variables of `struct` (or `class` in C++) types. - But in fact, there's nothing wrong to say \"an `int` object\".  ---  ## Members of a `struct`  Use `obj.mem`, the **member-access operator `.`** to access a member.   <pre><code>struct Student stu;\nstu.name = \"Alice\";\nstu.id = \"2024533000\";\nstu.entrance_year = 2024;\nstu.dorm = 8;\nprintf(\"%d\\n\", student.dorm);\n++student.entrance_year;\nputs(student.name);\n</code></pre>   ## Dynamic allocation  Create an object of `struct` type dynamically: Just allocate `sizeof(struct Student)` bytes of memory.   <pre><code>struct Student *pStu = malloc(sizeof(struct Student));\n</code></pre>   Member access through a pointer: `ptr-&gt;mem`, or `(*ptr).mem` **(not `*ptr.mem`!).**   <pre><code>pStu-&gt;name = \"Alice\";\npStu-&gt;id = \"2024533000\";\n(*pStu).entrance_year = 2024; // equivalent to pStu-&gt;entrance_year = 2024;\nprintf(\"%d\\n\", pStu-&gt;entrance_year);\nputs(pStu-&gt;name);\n</code></pre>   As usual, don't forget to `free` after use.   <pre><code>free(pStu);\n</code></pre>   ## Size of a `struct`   <pre><code>struct Student {\n  const char *name;\n  const char *id;\n  int entrance_year;\n  int dorm;\n};\n</code></pre> <pre><code>struct Student *pStu = malloc(sizeof(struct Student));\n</code></pre>   What is the value of `sizeof(struct Student)`?  ## Size of `struct`  It is guaranteed that  $$ \\mathtt{sizeof(struct\\ \\ X)}\\geqslant\\sum_{\\mathtt{member}\\in\\mathtt{X}}\\mathtt{sizeof(member)}. $$  The inequality is due to **memory alignment requirements**, which is beyond the scope of CS100.  ---  ## Implicit initialization  What happens if an object of `struct` type is not explicitly initialized?   <pre><code>struct Student gStu;\n\nint main(void) {\n  struct Student stu;\n}\n</code></pre>   ---  ## Implicit initialization  What happens if an object of `struct` type is not explicitly initialized?   <pre><code>struct Student gStu;\n\nint main(void) {\n  struct Student stu;\n}\n</code></pre>   - Global or local `static`: \"empty-initialization\", which performs **member-wise** empty-initialization. - Local non-`static`: every member is initialized to indeterminate values (in other words, uninitialized).  ---  ## Explicit initialization  Use an initializer list:   <pre><code>struct Student stu = {\"Alice\", \"2024533000\", 2024, 8};\n</code></pre>   **Use C99 designators:** (highly recommended)   <pre><code>struct Student stu = {.name = \"Alice\", .id = \"2024533000\",\n                      .entrance_year = 2024, .dorm = 8};\n</code></pre>   The designators greatly improve the readability.  **[Best practice]** Use designators, especially for `struct` types with lots of members.  ---  ## Compound literals   <pre><code>struct Student *student_list = malloc(sizeof(struct Student) * n);\nfor (int i = 0; i != n; ++i) {\n  student_list[i].name = A(i); // A, B, C and D are some functions\n  student_list[i].id = B(i);\n  student_list[i].entrance_year = C(i);\n  student_list[i].dorm = D(i);\n}\n</code></pre>   Use a **compound literal** to make it clear and simple:   <pre><code>struct Student *student_list = malloc(sizeof(struct Student) * n);\nfor (int i = 0; i != n; ++i) {\n  student_list[i] = (struct Student){.name = A(i), .id = B(i),\n                                     .entrance_year = C(i), .dorm = D(i)};\n}\n\n</code></pre>   ---  ## `struct`-typed parameters  The semantic of argument passing is **copy**:   <pre><code>void print_student(struct Student s) {\n  printf(\"Name: %s, ID: %s, dorm: %d\\n\", s.name, s.id, s.dorm);\n}\n\nprint_student(student_list[i]);\n</code></pre>   In a call `print_student(student_list[i])`, the parameter `s` of `print_student` is initialized as follows:   <pre><code>struct Student s = student_list[i];\n</code></pre>   The copy of a `struct`-typed object: **Member-wise copy.**  ---  ## `struct`-typed parameters  In a call `print_student(student_list[i])`, the parameter `s` of `print_student` is initialized as follows:   <pre><code>struct Student s = student_list[i];\n</code></pre>   The copy of a `struct`-typed object: **Member-wise copy.** It is performed as if   <pre><code>s.name = student_list[i].name;\ns.id = student_list[i].id;\ns.entrance_year = student_list[i].entrance_year;\ns.dorm = student_list[i].dorm;\n</code></pre>   ---  ## Return a `struct`-typed object  Strictly speaking, returning is also a **copy**:   <pre><code>struct Student fun(void) {\n  struct Student s = something();\n  some_operations(s);\n  return s;\n}\nstudent_list[i] = fun();\n</code></pre>   The object `s` is returned as if   <pre><code>student_list[i] = s;\n</code></pre>   **But in fact, the compiler is more than willing to optimize this process.** We will talk more about this in C++.  ---  ## Array member   <pre><code>struct A {\n  int array[10];\n  // ...\n};\n</code></pre>   Although an array cannot be copied, **an array member can be copied**.  The copy of an array is **element-wise copy**.    <pre><code>int a[10];\nint b[10] = a; // Error!\n</code></pre> <pre><code>struct A a;\nstruct A b = a; // OK\n</code></pre>   ---  ## Summary  A `struct` is a type consisting of a sequence of members.  - Member access: `obj.mem`, `ptr-&gt;mem` (equivalent to `(*ptr).mem`, but better) - `sizeof(struct A)`, no less than the sum of size of every member.    - But not necessarily equal, due to memory alignment requirements. - Implicit initialization: recursively performed on every member. - Initializer-lists, designators, compound literals. - Copy of a `struct`: member-wise copy. - Argument passing and returning: copy.  # Recursion  ## Problem 1. Calculate $n!$   <pre><code>int factorial(int n) {\n  return n == 0 ? 1 : n * factorial(n - 1);\n}\n</code></pre>   **This is perfectly valid and reasonable C code!**  - The function `factorial` **recursively** calls itself.Problem 2. Print a non-negative integer  If we only have `getchar`, how can we read an integer?  - We have solved this in recitations.  If we only have `putchar`, how can we print an integer?  - Declared in ``. - `putchar(c)` prints a character `c`. That's it.  For convenience, suppose the integer is non-negative (unsigned).  ---  ## Print a non-negative integer  To print $x$:  - If $x &lt; 10$, just print the digit and we are done. - Otherwise ($x\\geqslant 10$), we first print $\\displaystyle\\left\\lfloor\\frac{x}{10}\\right\\rfloor$, and then print the digit on the last place.   <pre><code>void print(unsigned x) {\n  if (x &lt; 10)\n    putchar(x + '0'); // Remember ASCII?\n  else {\n    print(x / 10);\n    putchar(x % 10 + '0');\n  }\n}\n</code></pre>   ---  ## Simplify the code  To print $x$:  1. If $x\\geqslant 10$, we first print $\\displaystyle\\left\\lfloor\\frac{x}{10}\\right\\rfloor$. Otherwise, do nothing. 2. Print $x\\bmod 10$.   <pre><code>void print(unsigned x) {\n  if (x &gt;= 10)\n    print(x / 10);\n  putchar(x % 10 + '0');\n}\n</code></pre>   ---  ## Print a non-negative integer   To print $x$:  1. If $x\\geqslant 10$, we first print $\\displaystyle\\left\\lfloor\\frac{x}{10}\\right\\rfloor$. Otherwise, do nothing. 2. Print $x\\bmod 10$.   <pre><code>void print(unsigned x) {\n  if (x &gt;= 10)\n    print(x / 10);\n  putchar(x % 10 + '0');\n}\n</code></pre>   ---  ## Design a recursive algorithm  Suppose we are given a problem of scale $n$.  1. Divide the problem into one or more **subproblems**, which are of smaller scales. 2. Solve the subproblems **recursively** by calling the function itself. 3. Generate the answer to the big problem from the answers to the subproblems.  **\\* Feels like mathematical induction?**  ## Problem 3. Selection-sort  How do you sort a sequence of $n$ numbers? (In ascending order)  Do it **recursively**.    How do you sort a sequence of $n$ numbers $\\langle a_0,\\cdots,a_{n-1}\\rangle$? (In ascending order)  Do it **recursively**: Suppose we are going to sort $\\langle a_k,a_{k+1},\\cdots,a_{n-1}\\rangle$, for some $k$.  - If $k=n-1$, we are done. - Otherwise ($k<code>void sort_impl(int *a, int k, int n) {   if (k == n - 1) return;    int m = k;   for (int i = k + 1; i &lt; n; ++i)     if (a[i] &lt; a[m]) m = i;    swap(&amp;a[m], &amp;a[k]); // the \"swap\" function we defined in previous lectures    sort_impl(a, k + 1, n); // sort the rest part recursively } </code>   # CS100 Lecture 11  ## IOStream: Input and Output Stream  `std::cin &gt;&gt; x`: Reads something and stores it in the variable `x`.  - `x` can be of any supported type: integers, floating-points, characters, strings, ... - **C++ has a way of identifying the type of `x` and selecting the correct way to read it.** We don't need the annoying `\"%d\"`, `\"%f\"`, ... anymore. - **C++ functions have a way of obtaining the *reference* of the argument.** We don't need to take the address of `x`.  ## Standard library file names  The names of C++ standard library files **have no extensions**: `` instead of ``, `` instead of ``.  ## Namespace `std`  `std::cin` and `std::cout`: names from the standard library.  C++ has a large standard library with a lot of names declared.  To avoid **name collisions**, all the names from the standard library are placed in a **namespace** named `std`.  - You can write `using std::cin;` to introduce `std::cin` into **the current scope**, so that `cin` can be used without `std::`. - You may write `using namespace std;` to introduce **all the names in `std`** into the current scope, but **you will be at the risk of name collisions again.**  **[Best practice]** Use `` instead of `` when you need the C standard library in C++.  # `std::string`  Defined in the standard library file `` **(not ``, not ``!!)**  ## Define and initialize a string   <pre><code>std::string str = \"Hello world\";\n// equivalent: std::string str(\"Hello world\");\n// equivalent: std::string str{\"Hello world\"}; (modern)\nstd::cout &lt;&lt; str &lt;&lt; std::endl;\n\nstd::string s1(7, 'a');\nstd::cout &lt;&lt; s1 &lt;&lt; std::endl; // aaaaaaa\n\nstd::string s2 = s1; // s2 is a copy of s1\nstd::cout &lt;&lt; s2 &lt;&lt; std::endl; // aaaaaaa\n\nstd::string s; // \"\" (empty string)\n</code></pre>   Default-initialization of a `std::string` will produce **an empty string**, not indeterminate value and has no undefined behaviors!  ## Strings  - The memory of `std::string` is **allocated and deallocated automatically**. - We can insert or erase characters in a `std::string`. **The memory of storage will be adjusted automatically.** - `std::string` **does not need an explicit `'\\0'` at the end**. It has its way of recognizing the end. - When you use `std::string`, **pay attention to its contents** instead of the implementation details.  ## Length of a string  ### Member function `s.size()` || Member function `s.empty()`  ## Use `+=`  In C, `a = a + b` is equivalent to `a += b`. **This is not always true in C++.**  For two `std::string`s `s1` and `s2`, `s1 = s1 + s2` **is different from** `s1 += s2`.  - `s1 = s1 + s2` constructs a temporary object `s1 + s2` (so that the contents of `s1` are copied), and then assigns it to `s1`. - `s1 += s2` appends `s2` directly to the end of `s1`, without copying `s1`.  ## Traversing a string: Use range-based `for` loops.  Example: Print all the uppercase letters in a string.   <pre><code>for (char c : s) // The range-based for loops\n  if (std::isupper(c)) // in &lt;cctype&gt;\n    std::cout &lt;&lt; c;\nstd::cout &lt;&lt; std::endl;\n</code></pre>   Equivalent way: Use subscripts, which is verbose and inconvenient.  ## String IO  Use `std::cin &gt;&gt; s` and `std::cout &lt;&lt; s`, as simple as handling an integer.  - Does `std::cin &gt;&gt; s` ignore leading whitespaces? Does it read an entire line or just a sequence of non-whitespace characters? Do some experiments on it.  `std::getline(std::cin, s)`: Reads a string starting from the current character, and stops at the first `'\\n'`.  - Is the ending `'\\n'` consumed? Is it stored? Do some experiments.  # CS100 Lecture 12  References, `std::vector`  ---  ## Contents  - References - `std::vector`  ---  # References  ---  ## Declare a reference  A **reference** defines an **alternative name** for an object (\"refers to\" that object).  Similar to pointers, the type of a reference is `ReferredType &amp;`, which consists of two things:  - `ReferredType` is the type of the object that it refers to, and - `&amp;` is the symbol indicating that it is a reference.  Example:   <pre><code>int ival = 42;\nint &amp;ri = ival; // `ri` refers to `ival`.\n                // In other words, `ri` is an alternative name for `ival`.\nstd::cout &lt;&lt; ri &lt;&lt; '\\n'; // prints the value of `ival`, which is `42`.\n++ri;           // Same effect as `++ival;`.\n</code></pre>   ---  ## Declare a reference   <pre><code>int ival = 42;\nint x = ival;              // `x` is another variable.\n++x;                       // This has nothing to do with `ival`.\nstd::cout &lt;&lt; ival &lt;&lt; '\\n'; // 42\nint &amp;ri = ival;            // `ri` is a reference that refers to `ival`.\n++ri;                      // This modification is performed on `ival`.\nstd::cout &lt;&lt; ival &lt;&lt; '\\n'; // 43\n</code></pre>   Ordinarily, when we initialize a variable, the value of the initializer is **copied** into the object we are creating.  When we define a reference, instead of copying the initializer's value, we **bind** the reference to its initializer.  ---  ## A reference is an alias  When we define a reference, instead of copying the initializer's value, we **bind** the reference to its initializer.   <pre><code>int ival = 42;\nint &amp;ri = ival;\n++ri;           // Same as `++ival;`.\nri = 50;        // Same as `ival = 50;`.\nint a = ri + 1; // Same as `int a = ival + 1;`.\n</code></pre>   After a reference has been defined, **all** operations on that reference are actually operations on the object to which the reference is bound.   <pre><code>ri = a;\n</code></pre>   What is the meaning of this?  ---  ## A reference is an alias   <pre><code>int ival = 42;\nint &amp;ri = ival;\n++ri;           // Same as `++ival;`.\nri = 50;        // Same as `ival = 50;`.\nint a = ri + 1; // Same as `int a = ival + 1;`.\n</code></pre>   When we define a reference, instead of copying the initializer's value, we **bind** the reference to its initializer.  After a reference has been defined, **all** operations on that reference are actually operations on the object to which the reference is bound.   <pre><code>ri = a;\n</code></pre>   - This is the same as `ival = a;`. **It is not rebinding `ri` to refer to `a`.**  ---  ## A reference must be initialized    <pre><code>ri = a;\n</code></pre>   - This is the same as `ival = a;`. **It is not rebinding `ri` to refer to `a`.**  Once initialized, a reference remains bound to its initial object. **There is no way to rebind a reference to refer to a different object.**  Therefore, **references must be initialized.**  ---  ## References must be bound to *existing objects* (\"lvalues\")  It is not allowed to bind a reference to temporary objects or literals ${}^{\\textcolor{red}{1}}$:   <pre><code>int &amp;r1 = 42;    // Error: binding a reference to a literal\nint &amp;r2 = 2 + 3; // Error: binding a reference to a temporary object\nint a = 10, b = 15;\nint &amp;r3 = a + b; // Error: binding a reference to a temporary object\n</code></pre>   In fact, the references we learn today are \"lvalue references\", which must be bound to *lvalues*. We will talk about *value categories* in later lectures.  ---  ## References are not objects  A reference is an alias. It is only an alternative name of another object, but the reference itself is **not an object**.  Therefore, there are no \"references to references\".   <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp; &amp;rr = ri; // Error! No such thing!\n</code></pre>   What is the meaning of this code? Does it compile?   <pre><code>int &amp;ri2 = ri;\n</code></pre>   ---  ## References are not objects  A reference is an alias. It is only an alternative name of another object, but the reference itself is **not an object**.  Therefore, there are no \"references to references\".   <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp; &amp;rr = ri; // Error! No such thing!\n</code></pre>   What is the meaning of this code? Does it compile?   <pre><code>int &amp;ri2 = ri; // Same as `int &amp;ri2 = ival;`.\n</code></pre>   - `ri2` is a reference that is bound to `ival`. - **Any use of a reference is actually using the object that it is bound to!**  ---  ## References are not objects  A reference is an alias. It is only an alternative name of another object, but the reference itself is **not an object**.  Pointers must also point to objects. Therefore, there are no \"pointers to references\".   <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp;*pr = &amp;ri; // Error! No such thing!\n</code></pre>   What is the meaning of this code? Does it compile?   <pre><code>int *pi = &amp;ri;\n</code></pre>   ---  ## References are not objects  A reference is an alias. It is only an alternative name of another object, but the reference itself is **not an object**.  Pointers must also point to objects. Therefore, there are no \"pointers to references\".   <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp;*pr = ri; // Error! No such thing!\n</code></pre>   What is the meaning of this code? Does it compile?   <pre><code>int *pi = &amp;ri; // Same as `int *pi = &amp;ival;`.\n</code></pre>   ---  ## Reference declaration  Similar to pointers, the ampersand `&amp;` only applies to one identifier.   <pre><code>int ival = 42, &amp;ri = ival, *pi = &amp;ival;\n// `ri` is a reference of type `int &amp;`, which is bound to `ival`.\n// `pi` is a pointer of type `int *`, which points to `ival`.\n</code></pre>   Placing the ampersand near the referred type does not make a difference:   <pre><code>int&amp; x = ival, y = ival, z = ival;\n// Only `x` is a reference. `y` and `z` are of type `int`.\n</code></pre>   ---  ## `*` and `&amp;`  Both symbols have many identities!  - In a **declaration** like `Type *x = expr`, `*` is **a part of the pointer type `Type *`**. - In a **declaration** like `Type &amp;r = expr`, `&amp;` is **a part of the reference type `Type &amp;`**. - In an **expression** like `*opnd` where there is only one operand, `*` is the **dereference operator**. - In an **expression** like `&amp;opnd` where there is only one operand, `&amp;` is the **address-of operator**. - In an **expression** like `a * b` where there are two operands, `*` is the **multiplication operator**. - In an **expression** like `a &amp; b` where there are two operands, `&amp;` is the **bitwise-and operator**.  ---  ## Example: Use references in range-`for`  Recall the range-based `for` loops (range-`for`):   <pre><code>std::string str;\nstd::cin &gt;&gt; str;\nint lower_cnt = 0;\nfor (char c : str)\n  if (std::islower(c))\n    ++lower_cnt;\nstd::cout &lt;&lt; \"There are \" &lt;&lt; lower_cnt &lt;&lt; \" lowercase letters in total.\\n\";\n</code></pre>   The range-`for` loop in the code above traverses the string, and declares and initializes the variable `c` in each iteration as if ${}^{\\textcolor{red}{2}}$   <pre><code>for (std::size_t i = 0; i != str.size(); ++i) {\n  char c = str[i]; // Look at this!\n  if (std::islower(c))\n    ++lower_cnt;\n}\n</code></pre>   ---  ## Example: Use references in range-`for`   <pre><code>for (char c : str)\n  // ...\n</code></pre>   The range-`for` loop in the code above traverses the string, and declares and initializes the variable `c` in each iteration as if ${}^{\\textcolor{red}{2}}$   <pre><code>for (std::size_t i = 0; i != str.size(); ++i) {\n  char c = str[i];\n  // ...\n}\n</code></pre>   **Here `c` is a copy of `str[i]`. Therefore, modification on `c` does not affect the contents in `str`.**  ---  ## Example: Use references in range-`for`  What if we want to change all lowercase letters to their uppercase forms?   <pre><code>for (char c : str)\n  c = std::toupper(c); // This has no effect.\n</code></pre>   **We need to declare `c` as a reference.**   <pre><code>for (char &amp;c : str)\n  c = std::toupper(c);\n</code></pre>   This is the same as   <pre><code>for (std::size_t i = 0; i != str.size(); ++i) {\n  char &amp;c = str[i];\n  c = std::toupper(c); // Same as `str[i] = std::toupper(str[i]);`.\n}\n</code></pre>   ---  ## Example: Pass by reference-to-`const`  Write a function that accepts a string and returns the number of lowercase letters in it:   <pre><code>int count_lowercase(std::string str) {\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre>   To call this function:   <pre><code>int result = count_lowercase(my_string);\n</code></pre>   ---  ## Example: Pass by reference-to-`const`   <pre><code>int count_lowercase(std::string str) {\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <pre><code>int result = count_lowercase(my_string);\n</code></pre>   When passing `my_string` to `count_lowercase`, the parameter `str` is initialized as if   <pre><code>std::string str = my_string;\n</code></pre>   **The contents of the entire string `my_string` are copied!**  ---  ## Example: Pass by reference-to-`const`   <pre><code>int result = count_lowercase(my_string);\n</code></pre>   When passing `my_string` to `count_lowercase`, the parameter `str` is initialized as if   <pre><code>std::string str = my_string;\n</code></pre>   **The contents of the entire string `my_string` are copied!** Is this copy necessary?  ---  ## Example: Pass by reference-to-`const`   <pre><code>int result = count_lowercase(my_string);\n</code></pre>   When passing `my_string` to `count_lowercase`, the parameter `str` is initialized as if   <pre><code>std::string str = my_string;\n</code></pre>   **The contents of the entire string `my_string` are copied!** This copy is unnecessary, because `count_lowercase` is a read-only operation on `str`.  How can we avoid this copy?  ---  ## Example: Pass by reference-to-`const`   <pre><code>int count_lowercase(std::string &amp;str) { // `str` is a reference.\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <pre><code>int result = count_lowercase(my_string);\n</code></pre>   When passing `my_string` to `count_lowercase`, the parameter `str` is initialized as if   <pre><code>std::string &amp;str = my_string;\n</code></pre>   Which is just a reference initialization. No copy is performed.  ---  ## Example: Pass by reference-to-`const`   <pre><code>int count_lowercase(std::string &amp;str) { // `str` is a reference.\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre>   However, this has a problem:   <pre><code>std::string s1 = something(), s2 = some_other_thing();\nint result = count_lowercase(s1 + s2); // Error: binding reference to\n                                       // a temporary object.\n</code></pre>   `a + b` is a temporary object, which `str` cannot be bound to.  ---  ## Example: Pass by reference-to-`const`  References must be bound to existing objects, not literals or temporaries.  **There is an exception to this rule: References-to-`const` can be bound to anything.**   <pre><code>const int &amp;rci = 42; // OK.\nconst std::string &amp;rcs = a + b; // OK.\n</code></pre>   `rcs` is bound to the temporary object returned by `a + b` as if   <pre><code>std::string tmp = a + b;\nconst std::string &amp;rcs = tmp;\n</code></pre>   $\\Rightarrow$ We will talk more about references-to-`const` in recitations.  ---  ## Example: Pass by reference-to-`const`  ***The*** answer:   <pre><code>int count_lowercase(const std::string &amp;str) { // `str` is a reference-to-`const`.\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <pre><code>std::string a = something(), b = some_other_thing();\nint res1 = count_lowercase(a);       // OK.\nint res2 = count_lowercase(a + b);   // OK.\nint res3 = count_lowercase(\"hello\"); // OK.\n</code></pre>   ---  ## Benefits of passing by reference-to-`const`  Apart from the fact that it avoids copy, declaring the parameter as a reference-to-`const` also prevents some potential mistakes:   <pre><code>int some_kind_of_counting(const std::string &amp;str, char value) {\n  int cnt = 0;\n  for (std::size_t i = 0; i != str.size(); ++i) {\n    if (str[i] = value) // Ooops! It should be `==`.\n      ++cnt;\n    else {\n      // do something ...\n      // ...\n    }\n  }\n  return cnt;\n}\n</code></pre>   `str[i] = value` will trigger a compile-error, because `str` is a reference-to-`const`.  ---  ## Benefits of passing by reference-to-`const`  1. Avoids copy. 2. Accepts temporaries and literals (*rvalues*). 3. The `const` qualification prevents accidental modifications to it.  **[Best practice]** Pass by reference-to-`const` if copy is not necessary and the parameter should not be modified.  ---  ## References vs pointers      A reference  - is not itself an object. It is an alias of the object that it is bound to.  - cannot be rebound to another object after initialization.  - has no \"default\" or \"zero\" value. It must be bound to an object.      A pointer  - is an object that stores the address of the object it points to. - can switch to point to another object at any time. - can be set to a null pointer value `nullptr`.      Both a reference and a pointer can be used to refer to an object, but references are more convenient - no need to write the annoying `*` and `&amp;`.  Note: `nullptr` is ***the*** null pointer value in C++. Do not use `NULL`.  ---  # `std::vector`  Defined in the standard library file ``.  A \"dynamic array\".  ---  ## Class template  `std::vector` is a **class template**.  Class templates are not themselves classes. Instead, they can be thought of as instructions to the compiler for *generating* classes.  - The process that the compiler uses to create classes from the templates is called **instantiation**.  For `std::vector`, what kind of class is generated depends on the type of elements we want to store, often called **value type**. We supply this information inside a pair of angle brackets following the template's name:   <pre><code>std::vector&lt;int&gt; v; // `v` is of type `std::vector&lt;int&gt;`\n</code></pre>   ---  ## Create a `std::vector`  `std::vector` **is not a type itself**. It must be combined with some `` to form a type.   <pre><code>std::vector v;               // Error: missing template argument.\nstd::vector&lt;int&gt; vi;         // An empty vector of `int`s.\nstd::vector&lt;std::string&gt; vs; // An empty vector of strings.\nstd::vector&lt;double&gt; vd;      // An empty vector of `double`s.\nstd::vector&lt;std::vector&lt;int&gt;&gt; vvi; // An empty vector of vector of `int`s.\n                                   // \"2-d\" vector.\n</code></pre>   What are the types of `vi`, `vs` and `vvi`?  ---  ## Create a `std::vector`  `std::vector` **is not a type itself**. It must be combined with some `` to form a type.   <pre><code>std::vector v;               // Error: missing template argument.\nstd::vector&lt;int&gt; vi;         // An empty vector of `int`s.\nstd::vector&lt;std::string&gt; vs; // An empty vector of strings.\nstd::vector&lt;double&gt; vd;      // An empty vector of `double`s.\nstd::vector&lt;std::vector&lt;int&gt;&gt; vvi; // An empty vector of vector of `int`s.\n                                   // \"2-d\" vector.\n</code></pre>   What are the types of `vi`, `vs` and `vvi`?  - `std::vector`, `std::vector`, `std::vector&gt;`.  ---  ## Create a `std::vector`  There are several common ways of creating a `std::vector`:   <pre><code>std::vector&lt;int&gt; v{2, 3, 5, 7};     // A vector of `int`s,\n                                    // whose elements are {2, 3, 5, 7}.\nstd::vector&lt;int&gt; v2 = {2, 3, 5, 7}; // Equivalent to \u2191\n\nstd::vector&lt;std::string&gt; vs{\"hello\", \"world\"}; // A vector of strings,\n                                    // whose elements are {\"hello\", \"world\"}.\nstd::vector&lt;std::string&gt; vs2 = {\"hello\", \"world\"}; // Equivalent to \u2191\n\nstd::vector&lt;int&gt; v3(10);     // A vector of ten `int`s, all initialized to 0.\nstd::vector&lt;int&gt; v4(10, 42); // A vector of ten `int`s, all initialized to 42.\n</code></pre>   Note that all the elements in `v3` are initialized to `0`.  - We hate uninitialized values, so does the standard library.  ---  ## Create a `std::vector`  Create a `std::vector` as a copy of another one:   <pre><code>std::vector&lt;int&gt; v{2, 3, 5, 7};\nstd::vector&lt;int&gt; v2 = v; // `v2`` is a copy of `v`\nstd::vector&lt;int&gt; v3(v);  // Equivalent\nstd::vector&lt;int&gt; v4{v};  // Equivalent\n</code></pre>   **No need to write a loop!**  Copy assignment is also enabled:   <pre><code>std::vector&lt;int&gt; v1 = something(), v2 = something_else();\nv1 = v2;\n</code></pre>   - Element-wise copy is performed automatically. - Memory is allocated automatically. The memory used to store the old data of `v1` is deallocated automatically.  ---  ## C++17 CTAD  \"**C**lass **T**emplate **A**rgument **D**eduction\": As long as enough information is supplied in the initializer, **the value type can be deduced automatically by the compiler**.    <pre><code>std::vector v1{2, 3, 5, 7}; // vector&lt;int&gt;\nstd::vector v2{3.14, 6.28}; // vector&lt;double&gt;\nstd::vector v3(10, 42);     // vector&lt;int&gt;, deduced from 42 (int)\nstd::vector v4(10);         // Error: cannot deduce template argument type\n</code></pre>   ---  ## Size of a `std::vector`  `v.size()` and `v.empty()`: same as those on `std::string`.   <pre><code>std::vector v{2, 3, 5, 7};\nstd::cout &lt;&lt; v.size() &lt;&lt; '\\n';\nif (v.empty()) {\n  // ...\n}\n</code></pre>   `v.clear()`: Remove all the elements.  ---  ## Append an element to the end of a `std::vector`  `v.push_back(x)`   <pre><code>int n;\nstd::cin &gt;&gt; n;\nstd::vector&lt;int&gt; v;\nfor (int i = 0; i != n; ++i) {\n  int x;\n  std::cin &gt;&gt; x;\n  v.push_back(x);\n}\nstd::cout &lt;&lt; v.size() &lt;&lt; '\\n'; // n\n</code></pre>   ---  ## Remove the last element of a `std::vector`  `v.pop_back()`  Exercise: Given `v` of type `std::vector`, remove all the consecutive even numbers in the end.  ---  ## Remove the last element of a `std::vector`  `v.pop_back()`  Exercise: Given `v` of type `std::vector`, remove all the consecutive even numbers in the end.   <pre><code>while (!v.empty() &amp;&amp; v.back() % 2 == 0)\n  v.pop_back();\n</code></pre>   `v.back()`: returns the ***reference*** to the last element.  - How is it different from \"returning the *value* of the last element\"?  ---  ## `v.back()` and `v.front()`  Return the references to the last and the first elements, respectively.  It is a **reference**, through which we can modify the corresponding element.   <pre><code>v.front() = 42;\n++v.back();\n</code></pre>   For `v.back()`, `v.front()` and `v.pop_back()`, **the behavior is undefined** if `v` is empty. They do not perform any bounds checking.  ---  ## Range-based `for` loops  A `std::vector` can also be traversed using a **range-based `for` loop**.   <pre><code>std::vector&lt;int&gt; vi = some_values();\nfor (int x : vi)\n  std::cout &lt;&lt; x &lt;&lt; std::endl;\nstd::vector&lt;std::string&gt; vs = some_strings();\nfor (const std::string &amp;s : vs) // use reference-to-const to avoid copy\n  std::cout &lt;&lt; s &lt;&lt; std::endl;\n</code></pre>   Exercise: Use range-based `for` loops to count the number of uppercase letters in a `std::vector`.  ---  ## Range-based `for` loops  Exercise: Use range-based `for` loops to count the number of uppercase letters in a `std::vector`.   <pre><code>int cnt = 0;\nfor (const std::string &amp;s : vs) { // Use reference-to-const to avoid copy\n  for (char c : s) {\n    if (std::isupper(c))\n      ++cnt;\n  }\n}\n</code></pre>   ---  ## Access through subscripts  `v[i]` returns the **reference** to the element indexed `i`.  - `i` $\\in[0,N)$, where $N=$ `v.size()`. - Subscript out of range is **undefined behavior**. `v[i]` performs no bounds checking.   - In pursuit of efficiency, most operations on standard library containers do not perform bounds checking. - A kind of \"subscript\" that has bounds checking: `v.at(i)`.   - If `i` is out of range, *a `std::out_of_range` exception is thrown*.  ---  ## Feel the style of STL  Basic and low-level operations are performed automatically:  - Default initialization of `std::string` and `std::vector` results in an empty string / container, not indeterminate values. - Copy of `std::string` and `std::vector` is done automatically, which performs member-wise copy. - Memory management is done automatically.  Interfaces are consistent:  - `std::string` also has member functions like `.push_back(x)`, `.pop_back()`, `.at(i)`, `.size()`, `.clear()`, etc. which do the same things as on `std::vector`. - Both can be traversed by range-`for`.  # CS100 Lecture 13  \"C\" in C++  ---  ## Contents  \"C\" in C++  - Type System   - Stronger Type Checking   - Explicit Casts   - Type Deduction - Functions   - Default Arguments   - Function Overloading - Range-Based `for` Loops Revisited  ---  ## \"Better C\"  C++ was developed based on C.  From *The Design and Evolution of C++*:  &gt; C++ is a general-purpose programming language that &gt; &gt; - **is a better C**, &gt; - supports data abstraction, &gt; - supports object-oriented programming.  C++ brought up new ideas and improvements of C, some of which also in turn influenced the development of C.  ---  ## \"Better C\"  - `bool`, `true` and `false` are built-in. No need to `#include `. `true` and `false` are of type `bool`, not `int`.   - This is also true since C23. - The return type of logical operators `&amp;&amp;`, `||`, `!` and comparison operators `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, `==`, `!=` is `bool`, not `int`. - The type of string literals `\"hello\"` is `const char [N+1]`, not `char [N+1]`.   - Recall that string literals are stored in **read-only memory**. Any attempt to modify them results in undefined behavior. - The type of character literals `'a'` is `char`, not `int`.  ---  ## \"Better C\"  - `const` variables initialized with literals are compile-time constants. They can be used as the length of arrays.    ```cpp   const int maxn = 1000;   int a[maxn]; // a normal array in C++, but VLA in C   ```  - `int fun()` declares a function accpeting no arguments. It is not accepting unknown arguments.    - This is also true since C23.  ---  # Type System  ---  ## Stronger type checking  Some arithmetic conversions are problematic: They are not value-preserving.   <pre><code>int x = some_int_value();\nlong long y = x; // OK. Value-preserving\nlong long z = some_long_long_value();\nint w = z;       // Is this OK?\n</code></pre>   - Conversion from `int` to `long long` is value-preserving, without doubt. - Conversion from `long long` to `int` may lose precision. (\"narrowing\")  However, no warning or error is generated for such conversions in C.  ---  ## Stronger type checking  Some arithmetic conversions are problematic: They are not value-preserving.   <pre><code>long long z = some_long_long_value();\nint w = z; // \"narrowing\" conversion\n</code></pre>   Stroustrup had decided to ban all implicit narrowing conversions in C++. However,  &gt; The experiment failed miserably. Every C program I looked at contained large numbers of assignments of `int`s to `char` variables. Naturally, since these were **working programs**, most of these assignments were perfectly safe. That is, either the value was small enough not to become truncated, or the truncation was expected or at least harmless in that particular context.  In the end, narrowing conversions are not banned completely in C++. They are not allowed only in a special context in modern C++. We will see it soon.  ---  ## Stronger type checking  Some type conversions (casts) can be very dangerous:   <pre><code>const int x = 42, *pci = &amp;x;\nint *pi = pci; // Warning in C, Error in C++\n++*pi;         // undefined behavior\nchar *pc = pi; // Warning in C, Error in C++\nvoid *pv = pi; char *pc2 = pv; // Even no warning in C! Error in C++.\nint y = pc;    // Warning in C, Error in C++\n</code></pre>   - For `T` $\\neq$ `U`, `T *` and `U *` are different types. Treating a `T *` as `U *` leads to undefined behavior in most cases, but the C compiler gives only a warning! - `void *` is a hole in the type system. You can cast anything to and from it **without even a warning**.  C++ does not allow the dangerous type conversions to happen ***implicitly***.  ---  ## Explicit Casts  C++ provides four **named cast operators**:  - `static_cast(expr)` - `const_cast(expr)` - `reinterpret_cast(expr)` - `dynamic_cast(expr)` $\\Rightarrow$ will be covered in later lectures.  In contrast, the C style explicit cast `(Type)expr` looks way too innocent.  \"An ugly behavior should have an ugly looking.\"  ---  ## `const_cast`  Cast away low-level constness **(DANGEROUS)**:   <pre><code>int ival = 42;\nconst int &amp;cref = ival;\nint &amp;ref = cref; // Error: casting away low-level constness\nint &amp;ref2 = const_cast&lt;int &amp;&gt;(cref); // OK\nint *ptr = const_cast&lt;int *&gt;(&amp;cref); // OK\n</code></pre>   However, modifying a `const` object through a non-`const` access path (possibly formed by `const_cast`) results in **undefined behavior**!   <pre><code>const int cival = 42;\nint &amp;ref = const_cast&lt;int &amp;&gt;(cival); // compiles, but dangerous\n++ref; // undefined behavior (may crash)\n</code></pre>   ---  ## `reinterpret_cast`  Often used to perform conversion between different pointer types **(DANGEROUS)**:   <pre><code>int ival = 42;\nchar *pc = reinterpret_cast&lt;char *&gt;(&amp;ival);\n</code></pre>   We must never forget that the actual object addressed by `pc` is an `int`, not a character! Any use of `pc` that assumes it's an ordinary character pointer **is likely to fail** at run time, e.g.:   <pre><code>std::string str(pc); // undefined behavior\n</code></pre>   **Wherever possible, do not use it!**  ---  ## `static_cast`  Other types of conversions (which often look \"harmless\"):   <pre><code>double average = static_cast&lt;double&gt;(sum) / n;\nint pos = static_cast&lt;int&gt;(std::sqrt(n));\n</code></pre>   Some typical usage: $\\Rightarrow$ We will talk about them in later lectures.   <pre><code>static_cast&lt;std::string &amp;&amp;&gt;(str) // converts to a xvalue\nstatic_cast&lt;Derived *&gt;(base_ptr) // downcast without runtime checking\n</code></pre>   ---  ## Minimize casting  **[Best practice]** Minimize casting. (*Effective C++* Item 27)  Type systems work as a **guard** against possible errors: Type mismatch often indicates a logical error.  **[Best practice]** When casting is necessary, **prefer C++-style casts to old C-style casts**.  - With old C-style casts, you can't even tell whether it is dangerous or not!  ---  ## Type deduction  C++ is very good at **type computations**:   <pre><code>std::vector v(10, 42);\n</code></pre>   - It should be `std::vector v(10, 42);`, but the compiler can deduce that `int` from `42`.   <pre><code>int x = 42; double d = 3.14; std::string s = \"hello\";\nstd::cout &lt;&lt; x &lt;&lt; d &lt;&lt; s;\n</code></pre>   - The compiler can detect the types of `x`, `d` and `s` and select the correct printing functions.  ---  ## `auto`  When declaring a variable with an initializer, we can use the keyword `auto` to let the compiler deduce the type.   <pre><code>auto x = 42;    // `int`, because 42 is an `int`.\nauto y = 3.14;  // `double`, because 3.14 is a `double`.\nauto z = x + y; // `double`, because the type of `x + y` is `double`.\nauto m;         // Error: cannot deduce the type. An initializer is needed.\n</code></pre>   `auto` can also be used to produce compound types:   <pre><code>auto &amp;r = x;        // `int &amp;`, because `x` is an `int`.\nconst auto &amp;rc = r; // `const int &amp;`.\nauto *p = &amp;rc;      // `const int *`, because `&amp;rc` is `const int *`.\n</code></pre>   ---  ## `auto`  What about this?   <pre><code>auto str = \"hello\";\n</code></pre>   ---  ## `auto`  What about this?   <pre><code>auto str = \"hello\"; // `const char *`\n</code></pre>   - Recall that the type of `\"hello\"` is **`const char [6]`**, not `std::string`. This is for compatibility with C. - When using `auto`, the array-to-pointer conversion (\"decay\") is performed automatically.  ---  ## `auto`  Deduction of return type is also allowed (since C++14):   <pre><code>auto sum(int x, int y) {\n  return x + y;\n}\n</code></pre>   - The return type is deduced to `int`.  Since C++20, `auto` can also be used for function parameters! Such a function is actually a function template.  - This is beyond the scope of CS100.   <pre><code>auto sum(auto x, auto y) {\n  return x + y;\n}\n</code></pre>   ---  ## `auto`  `auto` lets us enjoy the benefits of the static type system.  Some types in C++ are very long:   <pre><code>std::vector&lt;std::string&gt;::const_iterator it = vs.begin();\n</code></pre>   Use `auto` to simplify it:   <pre><code>auto it = vs.begin();\n</code></pre>   ---  ## `auto`  `auto` lets us enjoy the benefits of the static type system.  Some types in C++ are not known to anyone but the compiler:   <pre><code>auto lam = [](int x, int y) { return x + y; } // A lambda expression.\n</code></pre>   Every lambda expression has its own type, whose name is only known by the compiler.  ---  ## `decltype`  `decltype(expr)` will deduce the type of the expression `expr` **without evaluating it**.   <pre><code>auto fun(int a, int b) { // The return type is deduced to be `int`.\n  std::cout &lt;&lt; \"fun() is called.\\n\"\n  return a + b;\n}\nint x = 10, y = 15;\ndecltype(fun(x, y)) z; // Same as `int z;`.\n                       // Unlike `auto`, no initializer is required here.\n                       // The type is deduced from the return type of `fun`.\n</code></pre>   - `decltype(fun(x, y))` only deduces the return type of `fun` without actually calling it. Therefore, **no output is produced**.  ---  ## Note on `auto` and `decltype`  The detailed rules of `auto` and `decltype` (as well as their differences) are complicated, and require some deeper understanding of C++ types and templates. You don't have to remember them.  Learn about them mainly through experiments.  - A good IDE should be of great help: Place your mouse on it, and your IDE should tell you the deduction result.  C23 also has `auto` type deduction.  ---  # Functions  ---  ## Default arguments  Some functions have parameters that are given a particular value in most, but not all, calls. In such cases, we can declare that common value as a **default argument**.   <pre><code>std::string get_screen(std::size_t height = 24, std::size_t width = 80,\n                       char background = ' ');\n</code></pre>   - By default, the screen is $24\\times 80$ filled with `' '`.    ```cpp   auto default_screen = get_screen();   ```  - To override the default arguments:    ```cpp   auto large_screen   = get_screen(66);           // 66x80, filled with ' '   auto larger_screen  = get_screen(66, 256);      // 66x256, filled with ' '   auto special_screen = get_screen(66, 256, '#'); // 66x256, filled with '#'   ```  ---  ## Default arguments  Arguments in the call are resolved by position.   <pre><code>auto scr = get_screen('#'); // Passing the ASCII value of '#' to `height`.\n                            // `width` and `background` are set to\n                            // default values (`80` and `' '`).\n</code></pre>   - Some other languages have named parameters:    ```python   print(a, b, sep=\", \", end=\"\") # Python   ```    There is no such syntax in C++.  Default arguments are only allowed for the last (right-most) several parameters:   <pre><code>std::string get_screen(std::size_t height = 24, std::size_t width,\n                       char background); // Error.\n</code></pre>   ---  ## Function overloading  In C++, a group of functions can have the same name, as long as they can be differentiated when called.   <pre><code>int max(int a, int b) {\n  return a &lt; b ? b : a;\n}\ndouble max(double a, double b) {\n  return a &lt; b ? b : a;\n}\nconst char *max(const char *a, const char *b) {\n  return std::strcmp(a, b) &lt; 0 ? b : a;\n}\n</code></pre> <pre><code>auto x = max(10, 20);           // Calls max(int, int)\nauto y = max(3.14, 2.5);        // Calls max(double, double)\nauto z = max(\"hello\", \"world\"); // Calls max(const char *, const char *)\n</code></pre>   ---  ## Overloaded functions  Overloaded functions should be distinguished in the way they are called.   <pre><code>int fun(int);\ndouble fun(int);  // Error: functions that differ only in\n                  // their return type cannot be overloaded.\n</code></pre> <pre><code>void move_cursor(Coord to);\nvoid move_cursor(int r, int c); // OK, differ in the number of arguments\n</code></pre>   ---  ## Overloaded functions  Overloaded functions should be distinguished in the way they are called.  - The following are declaring **the same function**. They are not overloading.    ```cpp   void fun(int *);   void fun(int [10]);   ```  - The following are the same for an array argument:    ```cpp   void fun(int *a);   void fun(int (&amp;a)[10]);   int ival = 42; fun(&amp;ival); // OK, calls fun(int *)   int arr[10];   fun(arr);   // Error: ambiguous call   ```    Why?  ---  ## Overloaded functions  Overloaded functions should be distinguished in the way they are called.  - The following are the same for an array argument:    ```cpp   void fun(int *a);   void fun(int (&amp;a)[10]);   int arr[10];   fun(arr);   // Error: ambiguous call   ```    - For `fun(int (&amp;)[10])`, this is **an exact match**.   - For `fun(int *)`, this involves an array-to-pointer implicit conversion. We will see that this is **also considered an exact match**.  ---  ## Basic overload resolution  Suppose we have the following overloaded functions.   <pre><code>void fun(int);\nvoid fun(double);\nvoid fun(int *);\nvoid fun(const int *);\n</code></pre>   Which will be the best match for a call `fun(a)`?  ---  ## Basic overload resolution  Suppose we have the following overloaded functions.   <pre><code>void fun(int);\nvoid fun(double);\nvoid fun(int *);\nvoid fun(const int *);\n</code></pre>    Obvious: The arguments and the parameters match perfectly.   <pre><code>fun(42);   // fun(int)\nfun(3.14); // fun(double)\nconst int arr[10];\nfun(arr);  // fun(const int *)\n</code></pre>    Not so obvious:   <pre><code>int ival = 42;\n// fun(int *) or fun(const int *)?\nfun(&amp;ival);\nfun('a');   // fun(int) or fun(double)?\nfun(3.14f); // fun(int) or fun(double)?\nfun(NULL);  // fun(int) or fun(int *)?\n</code></pre>   ---  ## Basic overload resolution   <pre><code>void fun(int);\nvoid fun(double);\nvoid fun(int *);\nvoid fun(const int *);\n</code></pre>   - `fun(&amp;ival)` matches `fun(int *)` - `fun('a')` matches `fun(int)` - `fun(3.14f)` matches `fun(double)` - `fun(NULL)` ? We will see this later.  There are detailed rules that define these behaviors. **But our program should avoid such confusing overload sets.**  ---  ## Basic overload resolution  1. An exact match, including the following cases:    - identical types    - **match through decay of array** *(or function)* **type**    - match through top-level `const` conversion 2. **Match through adding low-level `const`** 3. Match through [integral or floating-point promotion](https://en.cppreference.com/w/cpp/language/implicit_conversion#Numeric_promotions) 4. Match through [numeric conversion](https://en.cppreference.com/w/cpp/language/implicit_conversion#Numeric_conversions) 5. Match through a class-type conversion (in later lectures).  No need to remember all the details. But pay attention to some cases that are very common.  ---  ## The null pointer  `NULL` is a **macro** defined in standard library header files.  - In C, it may be defined as `(void *)0`, `0`, `(long)0` or other forms.  In C++, `NULL` cannot be `(void *)0` since the implicit conversion from `void *` to other pointer types is **not allowed**.  - It is most likely to be an integer literal with value zero.  - With the following overload declarations, `fun(NULL)` may call `fun(int)` on some platforms, and may be **ambiguous** on other platforms!            ```cpp   void fun(int);   void fun(int *);     ```              ```cpp   fun(NULL); // May call fun(int),              // or may be ambiguous.     ```         ---  ## Better null pointer: `nullptr`  In short, `NULL` is a \"fake\" pointer.  Since C++11, a better null pointer is introduced: `nullptr` (also available in C23)  - `nullptr` has a unique type `std::nullptr_t` (defined in ``), which is neither `void *` nor an integer.  - `fun(nullptr)` will definitely match `fun(int *)`.            ```cpp   void fun(int);   void fun(int *);     ```              ```cpp   fun(NULL); // May call fun(int),              // or may be ambiguous.   fun(nullptr); // Calls fun(int *).     ```         **[Best practice]** Use `nullptr` as the null pointer constant in C++.  ---  ## Avoid abuse of function overloading  Only overload operations that actually do similar things. A bad example:   <pre><code>Screen &amp;moveHome(Screen &amp;);\nScreen &amp;moveAbs(Screen &amp;, int, int);\nScreen &amp;moveRel(Screen &amp;, int, int, std::string direction);\n</code></pre>   If we overload this set of functions under the name `move`, some information is lost.   <pre><code>Screen &amp;move(Screen &amp;);\nScreen &amp;move(Screen &amp;, int, int);\nScreen &amp;move(Screen &amp;, int, int, std::string direction);\n</code></pre>   Which one is easier to understand?   <pre><code>moveHome(scrn); // OK, moves to home.\n</code></pre> <pre><code>move(scrn); // Unclear: How to move?\n</code></pre>   ---  # Range-based `for` loops revisited  ---  ## Range-based `for` loops  Traverse a `std::string`   <pre><code>int str_to_int(const std::string &amp;str) {\n  int value = 0;\n  for (auto c : str) // char\n    value = value * 10 + c - '0';\n  return value;\n}\n</code></pre>   Note: This function can be replaced by `std::stol`.  ---  ## Range-based `for` loops  Traverse a `std::vector`   <pre><code>bool is_all_digits(const std::string &amp;str) {\n  for (auto c : str)\n    if (!std::isdigit(c))\n      return false;\n  return true;\n}\nint count_numbers(const std::vector&lt;std::string&gt; &amp;strs) {\n  int cnt = 0;\n  for (const auto &amp;s : strs) // const std::string &amp;s\n    if (is_all_digits(s))\n      ++cnt;\n  return cnt;\n}\n</code></pre>   ---  ## Traverse an array  An array can also be traversed by range-`for`:   <pre><code>int arr[100] = {}; // OK in C++ and C23.\n// The following loop will read 100 integers.\nfor (auto &amp;x : arr) // int &amp;\n  std::cin &gt;&gt; x;\n</code></pre>   - Note: The range-based `for` loop will traverse **the entire array**.  What else can be traversed using a range-`for`? $\\Rightarrow$ We will learn about this when introducing **iterators**.  ---  ## Pass an array by reference   <pre><code>void print(int *arr) {\n  for (auto x : arr) // Error: `arr` is a pointer, not an array.\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre>   We can declare `arr` to be a **reference to array**:   <pre><code>void print(const int (&amp;arr)[100]) {\n  for (auto x : arr) // OK. `arr` is an array.\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre>   - `arr` is of type `const int (&amp;)[100]`: a reference to an array of `100` elements, where each element is of type `const int`.  ---  ## Pass an array by reference  We can declare `arr` to be a **reference to array**:   <pre><code>void print(const int (&amp;arr)[100]) {\n  for (auto x : arr) // OK. `arr` is an array.\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre>   - `arr` is of type `const int (&amp;)[100]`: a reference to an array of `100` elements, where each element is of type `const int`.  Note that only arrays of `100` `int`s can fit here.   <pre><code>int a[100] = {}; print(a); // OK.\nint b[101] = {}; print(b); // Error.\ndouble c[100] = {}; print(c); // Error.\n</code></pre>   ---  ## Pass an array by reference  To allow arrays of any type, any length: Use a template function.   <pre><code>template &lt;typename Type, std::size_t N&gt;\nvoid print(const Type (&amp;arr)[N]) {\n  for (const auto &amp;x : arr)\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre>   We will learn about this in the end of this semester.  # CS100 Lecture 14  Class Basics I  ---  ## Contents  Class basics  - Members of a class   - Access   - The `this` pointer - Constructors   - Constructor initializer list   - Default constructors  ---  # Members of a class  ---  ## A simple `class`   The initial idea: A `class` is a new kind of `struct` that can have member functions:   <pre><code>class Student {\n  std::string name; \n  std::string id;\n  int entranceYear;\n  void setName(const std::string &amp;newName) {\n    name = newName;\n  }\n  void printInfo() const {\n    std::cout &lt;&lt; \"I am \" &lt;&lt; name &lt;&lt; \", id \" &lt;&lt; id  \n              &lt;&lt; \", entrance year: \" &lt;&lt; entranceYear &lt;&lt; std::endl;\n  }\n  bool graduated(int year) const {\n    return year - entranceYear &gt;= 4; \n  }\n};\n</code></pre>   ---  ## Member access  Member access: `a.mem`, where `a` is an **object** of the class type.  - Every member ${}^{\\textcolor{red}{1}}$ belongs to an object: each student has a name, id, entrance year, etc.   - You need to specify *whose* name / id / ... you want to obtain.  To call a member function on an object: `a.memfun(args)`.   <pre><code>Student s = someValue();\ns.printInfo(); // call its printInfo() to print related info  \nif (s.graduated(2023)) {\n  // ...\n}\n</code></pre>   ---  ## Access control   <pre><code>class Student {\nprivate:\n  std::string name; \n  std::string id;\n  int entranceYear;\npublic:\n  void setName(const std::string &amp;newName) { name = newName; }\n  void printInfo() const {\n    std::cout &lt;&lt; \"I am \" &lt;&lt; name &lt;&lt; \", id \" &lt;&lt; id  \n              &lt;&lt; \", entrance year: \" &lt;&lt; entranceYear &lt;&lt; std::endl;\n  }\n  bool graduated(int year) const { return year - entranceYear &gt;= 4; }\n};\n</code></pre>   - `private` members: Only accessible to code inside the class and `friend`s.   - $\\Rightarrow$ We will introduce `friend`s in later lectures. - `public` members: Accessible to all parts of the program.  ---  ## Access control    <pre><code>class Student {\nprivate:\n  std::string name;\n  std::string id; \n  int entranceYear;\n\npublic:\n  void setName(const std::string &amp;newName);\n  void printInfo() const;\n  bool graduated(int year) const;  \n};\n</code></pre>   Unlike some other languages (e.g. Java), an access specifier controls the access of all members after it, until the next access specifier or the end of the class definition.  ---  ## Access control    <pre><code>class Student {\n// private:\n  std::string name;\n  std::string id; \n  int entranceYear;\npublic:\n  void setName(const std::string &amp;newName);\n  void printInfo() const;\n  bool graduated(int year) const;  \n};\n</code></pre>   What if there is a group of members with no access specifier at the beginning?  - If it's `class`, they are `private`.   - If it's `struct`, they are `public`.  This is one of the **only two differences** between `struct` and `class` in C++.  ---  ## The `this` pointer   <pre><code>class Student {\n  // ...  \npublic:\n  bool graduated(int year) const;\n};\n\nStudent s = someValue();\nif (s.graduated(2023))\n  // ...\n</code></pre>   How many parameters does `graduated` have?  ---  ## The `this` pointer   <pre><code>class Student {\n  // ...\npublic:\n  bool graduated(int year) const; \n};\n\nStudent s = someValue();\nif (s.graduated(2023)) // ...\n</code></pre>   How many parameters does `graduated` have?  - **Seemingly one, but actually two:** `s` is also information that must be known when calling this function!  ---  ## The `this` pointer   <pre><code>class Student {\npublic:\n  void setName(const std::string &amp;n) {\n    name = n;\n  }\n\n  bool graduated(int year) const {\n    return year - entranceYear &gt;= 4;\n  }  \n};\n\nStudent s = someValue();\nif (s.graduated(2023)) \n  // ...\ns.setName(\"Alice\");\n</code></pre>    - The code on the left can be viewed as:   <pre><code>void setName\n    (Student *this, const std::string &amp;n) {\n  this-&gt;name = n;\n}\nbool graduated\n    (const Student *this, int year) {\n  return year - this-&gt;entranceYear &gt;= 4;\n}\n\nStudent s = someValue();\nif (graduated(&amp;s, 2023))\n  // ...  \nsetName(&amp;s, \"Alice\");\n</code></pre>   ---  ## The `this` pointer  There is a pointer called `this` in each member function of class `X` which has type `X *` or `const X *`, pointing to the object on which the member function is called.  Inside a member function, access of any member `mem` is actually `this-&gt;mem`.  We can also write `this-&gt;mem` explicitly.   <pre><code>class Student {\npublic:\n  bool graduated(int year) const {\n    return year - this-&gt;entranceYear &gt;= 4;\n  }\n};\n</code></pre>   Many languages have similar constructs, e.g. `self` in Python. [(C++23 has `self` too!)](https://en.cppreference.com/w/cpp/language/member_functions#Explicit_object_parameter)  ---  ## `const` member functions  The `const` keyword after the parameter list and before the function body `{` is used to declare a **`const` member function**.  - A `const` member function cannot modify its data members ${}^{\\textcolor{red}{2}}$. - A `const` member function **guarantees** that no data member will be modified.   - A non-`const` member function does not provide such guarantee.   - In a `const` member function, calling a non-`const` member function on `*this` is not allowed. - For a `const` object, **only `const` member functions can be called on it**.  **[Best practice]** If, logically, a member function should not modify the object's state, it should be made a `const` member function. Otherwise, it cannot be called on `const` objects.  ---  ## `const` member functions and the `this` pointer  This `const` is essentially applied to the `this` pointer:  - In `const` member functions of class `X`, `this` has type `const X *`. - In non-`const` member functions of class `X`, `this` has type `X *`.  If `ptr` is of type `const T *`, the expression `ptr-&gt;mem` is also `const`-qualified.  - Recall that in a member function, access of a member `mem` is actually `this-&gt;mem`. - Therefore, `mem` is also `const`-qualified in a `const` member function.   <pre><code>class Student {\npublic:\n  void foo() const {\n    name += 'a'; // Error: `name` is `const std::string` in a const member\n                 // function. It cannot be modified.\n  }\n};\n</code></pre>   ---  ## `const` member functions  *Effective C++* Item 3: **Use `const` whenever possible.**  Decide whether the following member functions need a `const` qualification:   <pre><code>class Student {\n  std::string name, id;\n  int entranceYear;\npublic:\n  const std::string &amp;getName(); // returns the name of the student.\n  const std::string &amp;getID();   // returns the id of the student.\n  bool valid();    // verifies whether the leading four digits in `id`\n                   // is equal to `entranceYear`.\n  void adjustID(); // adjust `id` according to `entranceYear`.\n};\n</code></pre>   ---  ## `const` member functions  *Effective C++* Item 3: **Use `const` whenever possible.**  Decide whether the following member functions need a `const` qualification:   <pre><code>class Student {\n  std::string name, id;\n  int entranceYear;\npublic:\n  const std::string &amp;getName() const; // returns the name of the student.\n  const std::string &amp;getID() const;   // returns the id of the student.\n  bool valid() const;    // verifies whether the leading four digits in `id`\n                         // is equal to `entranceYear`.\n  void adjustID(); // adjust `id` according to `entranceYear`.\n};\n</code></pre>   The `const`ness of member functions should be determined **logically**.  ---  ## `const` member functions   <pre><code>class Student {\n  std::string name, id;\n  int entranceYear;\npublic:\n  const std::string &amp;getName() const { return name; }\n  const std::string &amp;getID() const { return id; }\n  bool valid() const { return id.substr(0, 4) == std::to_string(entranceYear); }\n  void adjustID() { id = std::to_string(entranceYear) + id.substr(4); }\n};\n</code></pre>   `str.substr(pos, len)` returns the substring of `str` starting from the position indexed `pos` with length `len`.  - If `len` is not provided, it returns the **suffix** starting from the position indexed `pos`.  ---  # Constructors  Often abbreviated as \"ctors\".  ---  ## Constructors  **Constructors** define how an object can be initialized.  - Constructors are often **overloaded**, because an object may have multiple reasonable ways of initialization.   <pre><code>class Student {\n  std::string name;\n  std::string id;\n  int entranceYear;\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_, int ey) \n    : name(name_), id(id_), entranceYear(ey) {}\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}   \n};\n\nStudent a(\"Alice\", \"2020123123\", 2020);\nStudent b(\"Bob\", \"2020123124\"); // entranceYear = 2020\nStudent c; // Error: No default constructor. (to be discussed later)\n</code></pre>   ---  ## Constructors   <pre><code>class Student {\n  std::string name;\n  std::string id;\n  int entranceYear;\n\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) \n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}\n};\n</code></pre>   - The constructor name is the class name: `Student`. - Constructors do not have a return type (not even `void` ${}^{\\textcolor{red}{3}}$). The constructor body can contain a `return;` statement, which should not return a value. - The function body of this constructor is empty: `{}`.  ---  ## Constructor initializer list  Constructors initialize **all data members** of the object.  The initialization of **all data members** is done **before entering the function body**.  How they are initialized is (partly) determined by the **constructor initializer list**:   <pre><code>class Student {\n  // ...\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) \n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {} \n};\n</code></pre>   The initializer list starts with `:`, and contains initializers for each data member, separated by `,`. The initializers must be of the form `(...)` or `{...}`, not `= ...`.  ---  ## Order of initialization  Data members are initialized in order **in which they are declared**, not the order in the initializer list.  - If the initializers appear in an order different from the declaration order, the compiler will generate a warning.  Typical mistake: `entranceYear` is initialized in terms of `id`, but `id` is not initialized yet!   <pre><code>class Student {\n  std::string name;\n  int entranceYear; // !!!\n  std::string id;\n\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id.substr(0, 4))) {}\n};\n</code></pre>   ---  ## Constructor initializer list  Data members are initialized in order **in which they are declared**, not the order in the initializer list.  - If the initializers appear in an order different from the declaration order, the compiler will generate a warning.   - For a data member that do not appear in the initializer list:   - If there is an **in-class initializer** (see next page), it is initialized using the in-class initializer.   - Otherwise, it is **default-initialized**.  What does **default-initialization** mean for class types? $\\Rightarrow$ To be discussed later.  ---  ## In-class initializers  A member can have an in-class initializer. It must be in the form `{...}` or `= ...`.${}^{\\textcolor{red}{4}}$   <pre><code>class Student {\n  std::string name = \"Alice\";\n  std::string id;\n  int entranceYear{2024}; // equivalent to `int entranceYear = 2024;`.\npublic:\n  Student() {} // `name` is initialized to `\"Alice\"`,\n               // `id` is initialized to an empty string,\n               // and `entranceYear` is initialized to 2024.\n  Student(int ey) : entranceYear(ey) {} // `name` is initialized to `\"Alice\"`,\n                                    // `id` is initialized to an empty string,\n                                    // and `entranceYear` is initialized to `ey`.\n};\n</code></pre>   The in-class initializer provides the \"default\" way of initializing a member in this class, as a substitute for default-initialization.  ---  ## Constructor initializer list  Below is a typical way of writing this constructor without an initializer list:   <pre><code>class Student {\n  // ...\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) {\n    name = name_;\n    id = id_;\n    entranceYear = std::stoi(id_.substr(0, 4));\n  }\n}; \n</code></pre>   How are these members actually initialized in this constructor?  ---  ## Constructor initializer list  Below is a typical way of writing this constructor without an initializer list:   <pre><code>class Student {\n  // ...\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) {\n    name = name_;\n    id = id_;\n    entranceYear = std::stoi(id_.substr(0, 4));\n  }\n}; \n</code></pre>   How are these members actually initialized in this constructor?  - First, before entering the function body, `name`, `id` and `entranceYear` are default-initialized. `name` and `id` are initialized to empty strings. - Then, the assignments in the function body take place.  ---  ## Constructor initializer list  **[Best practice]** Always use an initializer list in a constructor.  - Not all types can be default-initialized. Not all types can be assigned to. (Any counterexamples?)  ---  ## Constructor initializer list  **[Best practice]** Always use an initializer list in a constructor.  Not all types can be default-initialized. Not all types can be assigned to.  - References `T &amp;` cannot be default-initialized, and cannot be assigned to. - `const` objects of built-in types cannot be default-initialized. - `const` objects cannot be assigned to. - A class can choose to allow or disallow default initialization or assignment. It depends on the design. $\\Rightarrow$ See next page.  Moreover, if a data member is default-initialized and then assigned when could have been initialized directly, it may lead to low efficiency.  ---  ## Default constructors  A special constructor that takes no parameters.  - Guess what it's for?  ---  ## Default Constructors  A special constructor that takes no parameters.  - It defines the behavior of **default-initialization** of objects of that class type, since no arguments need to be passed when calling it.   <pre><code>class Point2d {\n  double x, y;\npublic:\n  Point2d() : x(0), y(0) {} // default constructor\n  Point2d(double x_, double y_) : x(x_), y(y_) {}  \n};\n\nPoint2d p1;       // calls default ctor, (0, 0) \nPoint2d p2(3, 4); // calls Point2d(double, double), (3, 4)\nPoint2d p3();     // Is this calling the default ctor?\n</code></pre>   ---  ## Default constructors  A special constructor that takes no parameters.  - It defines the behavior of **default-initialization** of objects of that class type, since no arguments need to be passed when calling it.   <pre><code>class Point2d {\n  double x, y;\npublic:\n  Point2d() : x(0), y(0) {} // default constructor\n  Point2d(double x_, double y_) : x(x_), y(y_) {}  \n};\n\nPoint2d p1;       // calls default ctor, (0, 0) \nPoint2d p2(3, 4); // calls Point2d(double, double), (3, 4)\nPoint2d p3();     // Is this calling the default ctor?\n</code></pre>   Be careful! `p3` is a **function** that takes no parameters and returns `Point2d`.  ---  ## Is a default constructor needed?  First, if you need to use arrays, you almost certainly need a default constructor:   <pre><code>Student s[1000]; // All elements are default-initialized\n                 // by the default constructor.\nStudent s2[1000] = {a, b}; // The first two elements are initialized to\n                           // `a` and `b`. The rest are initialized by the\n                           // default constructor.\n</code></pre>   A `std::vector` does not require that:   <pre><code>// In this code, the default constructor of `Student` is not called.\nstd::vector&lt;Student&gt; students;\nfor (auto i = 0; i != n; ++i)\n  students.push_back(some_student());\n</code></pre>   ---  ## Is a default constructor needed?   If a class has no user-declared constructors, the compiler will try to synthesize a default constructor.   <pre><code>class X {}; // No user-declared constructors.\nX x; // OK: calls the compiler-synthesized default constructor\n</code></pre>   The synthesized default constructor initializes the data members as follows:  - If a data member has an in-class initializer, it is initialized according to the in-class initializer. - Otherwise, default-initialize that member. If it cannot be default-initialized, the compiler will give up -- no default constructor is generated.  ---  ## Is a default constructor needed?  If a class has any user-declared constructors but no default constructor, the compiler **will not** synthesize a default constructor.  You may ask for a default constructor with `= default;`:   <pre><code>class Student {\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_, int ey)  \n    : name(name_), id(id_), entranceYear(ey) {}\n\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}\n\n  Student() = default;\n};\n</code></pre>   ---  ## Is a default constructor needed?  It depends on the **design**:  - If the class has a default constructor, what should be the behavior of it? Is there a reasonable \"default state\" for your class type?  For `Student`: What is a \"default student\"?  ---  ## Is a default constructor needed?  It depends on the **design**:  - If the class has a default constructor, what should be the behavior of it? Is there a reasonable \"default state\" for your class type?  For `Student`: What is a \"default student\"?  - There seems to be no such thing as a \"default student\" (in a normal design). Therefore, `Student` should not have a default constructor.  ---  ## Is a default constructor needed?  **[Best practice]** **When in doubt, leave it out.** If the class does not have a \"default state\", it should not have a default constructor!  - Do not define one arbitrarily or letting it `= default`. This leads to pitfalls. - Calling the default constructor of something that has no \"default state\" should result in a **compile error**, instead of being allowed arbitrarily.  ---  ## Summary  Members of a class  - A class can have data members and member functions. - Access control: `private`, `public`.   - One difference between `class` and `struct`: Default access. - The `this` pointer: has type `X *` (`const X *` in `const` member functions). It points to the object on which the member function is called. - `const` member function: guarantees that no modification will happen.  ---  ## Summary  The followings hold for **all constructors**, no matter how they are defined:  - A constructor initializes **all** data members in order in which they are declared. - The initialization of **all** data members is done before the function body of a constructor is executed.  In a constructor, a member is initialized as follows:  - If there is an initializer for it in the initializer list, use it. - Otherwise, if it has an in-class initializer, use it. - Otherwise, it is default-initialized. If it cannot be default-initialized, it leads to a compile-error.  ---  ## Summary  Default constructors  - The default constructor defines the behavior of default-initialization. - The default constructor is the constructor with an empty parameter list. - If we have not defined **any constructor**, the compiler will try to synthesize a **default constructor** as if it were defined as `ClassName() {}`.   - The compiler may fail to do that if some member has no in-class initializer and is not default-initializable. In that case, the compiler gives up (without giving an error). - We can use `= default` to ask for a synthesized default constructor explicitly.  ---  # CS100 Lecture 15  Constructors, Destructors, Copy Control  ---  ## Contents  - Constructors and destructors - Copy control  ---  # Constructors and destructors  ---  ## Lifetime of an object      **Lifetime** of a local non-`static` object:  - Starts on initialization - Ends when control flow goes out of its **scope**   <pre><code>for (int i = 0; i != n; ++i) {\n  do_something(i);\n  // Lifetime of `s` begins.\n  std::string s = some_string();\n  do_something_else(s, i);\n/* end of lifetime of `s` */ }\n</code></pre>   Every time the loop body is executed, `s` undergoes initialization and destruction.  - `std::string` **owns** some resources (memory where the characters are stored). - `std::string` must *somehow* release that resources (deallocate that memory) at the end of its lifetime.  ---  ## Lifetime of an object  Lifetime of a global object:  - Starts on initialization (before the first statement of `main`) - Ends when the program terminates.  Lifetime of a heap-based object:  - Starts on initialization: **A `new` expression will do this, but `malloc` does not!** - Ends when it is destroyed: **A `delete` expression will do this, but `free` does not!**  $\\Rightarrow$ `new` / `delete` expressions are in this week's recitation.  ---  ## Constructors and Destructors  Take `std::string` as an example:  - Its initialization (done by its constructors) must allocate some memory for its content. - When it is destroyed, it must *somehow* deallocate that memory.  ---  ## Constructors and Destructors  Take `std::string` as an example:  - Its initialization (done by its constructors) must allocate some memory for its content. - When it is destroyed, it must *somehow* deallocate that memory.  **A destructor of a class is the function that is automatically called when an object of that class type is destroyed.**  ---  ## Constructors and Destructors  Syntax: `~ClassName() { /* ... */ }`    <pre><code>struct A {\n  A() {\n    std::cout &lt;&lt; 'c';\n  }\n  ~A() {\n    std::cout &lt;&lt; 'd';\n  }\n};\n</code></pre> <pre><code>for (int i = 0; i != 3; ++i) {\n  A a;\n  // do something ...\n}\n</code></pre>   Output:   <pre><code>cdcdcd\n</code></pre>   ---  ## Destructor  Called **automatically** when the object is destroyed!  - How can we make use of this property?  ---  ## Destructor  Called **automatically** when the object is destroyed!  - How can we make use of this property?  We often do some **cleanup** in a destructor:  - If the object **owns some resources** (e.g. dynamic memory), destructors can be made use of to avoid leaking!   <pre><code>class A {\n  SomeResourceHandle resource;\n\npublic:\n  A(/* ... */) : resource(obtain_resource(/* ... */)) {}\n  ~A() {\n    release_resource(resource);\n  }\n};\n</code></pre>   ---  ## Example: A dynamic array  Suppose we want to implement a \"dynamic array\":  - It looks like a VLA (variable-length array), but it is heap-based, which is safer. - It should take good care of the memory it uses.  Expected usage:   <pre><code>int n; std::cin &gt;&gt; n;\nDynarray arr(n); // `n` is runtime determined\n                 // `arr` should have allocated memory for `n` `int`s now.\nfor (int i = 0; i != n; ++i) {\n  int x; std::cin &gt;&gt; x;\n  arr.at(i) = x * x; // subscript, looks as if `arr[i] = x * x`\n}\n// ...\n// `arr` should deallocate its memory itself.\n</code></pre>   ---  ## Dynarray: members  - It should have a pointer that points to the memory, where elements are stored. - It should remember its length.   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n};\n</code></pre>   - `m` stands for **member**.  **[Best practice]** Make data members `private`, to achieve good encapsulation.  ---  ## Dynarray: constructors  - We want `Dynarray a(n);` to construct a `Dynarray` that contains `n` elements.   - To avoid troubles, we want the elements to be **value-initialized**!     - **Value-initialization** is like \"empty-initialization\" in C. (In this week's recitation.)   - `new int[n]{}`: Allocate a block of heap memory that stores `n` `int`s, and value-initialize them. - Do we need a default constructor?   - Review: What is a default constructor?     - The constructor with no parameters.   - What should be the correct behavior of it?  ---  ## Dynarray: constructors  - We want `Dynarray a(n);` to construct a `Dynarray` that contains `n` elements.   - To avoid troubles, we want the elements to be **value-initialized**! - Suppose we don't want a default constructor.   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n public:\n  Dynarray(std::size_t n) : m_storage(new int[n]{}), m_length(n) {}\n};\n</code></pre>   **If the class has a user-declared constructor, the compiler will not generate a default constructor.**  ---  ## Dynarray: constructors   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n public:\n  Dynarray(std::size_t n) : m_storage(new int[n]{}), m_length(n) {}\n};\n</code></pre>   Since `Dynarray` has a user-declared constructor, it does not have a default constructor:   <pre><code>Dynarray a; // Error.\n</code></pre>   ---  ## Dynarray: destructor  - Remember: The destructor is (automatically) called when the object is \"dead\". - The memory is obtained in the constructor, and released in the destructor.   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n public:\n  Dynarray(std::size_t n)\n    : m_storage(new int[n]{}), m_length(n) {}\n  ~Dynarray() {\n    delete[] m_storage; // Pay attention to `[]`!\n  }\n};\n</code></pre>   ---  ## Dynarray: destructor  Is this correct?   <pre><code>class Dynarray {\n  // ...\n  ~Dynarray() {\n    if (m_length != 0)\n      delete[] m_storage;\n  }\n};\n</code></pre>   **NO!** `new [0]` may also allocate some memory (implementation-defined, like `malloc`), which should also be deallocated.  ---  ## Dynarray: destructor  Is this correct?   <pre><code>class Dynarray {\n  // ...\n  ~Dynarray() {\n    delete[] m_storage;\n    m_length = 0;\n  }\n};\n</code></pre>   It is correct, but `m_length = 0;` is not needed. The destructor is executed **right before the `Dynarray` object \"dies\"**, so the value of `m_length` does not matter!  ---  ## Dynarray: some member functions  Design some useful member functions.  - A function to obtain its length (size). - A function telling whether it is empty.   <pre><code>class Dynarray {\n  // ...\n public:\n  std::size_t size() const {\n    return m_length;\n  }\n  bool empty() const {\n    return m_length == 0;\n  }\n};\n</code></pre>   ---  ## Dynarray: some member functions  Design some useful member functions.  - A function returning **reference** to an element.   <pre><code>class Dynarray {\n  // ...\n public:\n  int &amp;at(std::size_t i) {\n    return m_storage[i];\n  }\n  const int &amp;at(std::size_t i) const {\n    return m_storage[i];\n  }\n};\n</code></pre>   Why do we need this \"`const` vs non-`const`\" overloading? $\\Rightarrow$ Learn it in recitations.  ---  ## Dynarray: Usage    <pre><code>void print(const Dynarray &amp;a) {\n  for (std::size_t i = 0;\n       i != a.size(); ++i)\n    std::cout &lt;&lt; a.at(i) &lt;&lt; ' ';\n  std::cout &lt;&lt; std::endl;\n}\nvoid reverse(Dynarray &amp;a) {\n  for (std::size_t i = 0,\n    j = a.size() - 1; i &lt; j; ++i, --j)\n    std::swap(a.at(i), a.at(j));\n}\n</code></pre> <pre><code>int main() {\n  int n; std::cin &gt;&gt; n;\n  Dynarray array(n);\n  for (int i = 0; i != n; ++i)\n    std::cin &gt;&gt; array.at(i);\n  reverse(array);\n  print(array);\n  return 0;\n  // Dtor of `array` is called here,\n  // which deallocates the memory\n}\n</code></pre>   ---  # Copy control  ---  ## Copy-initialization  We can easily construct a `std::string` to be a copy of another:   <pre><code>std::string s1 = some_value();\nstd::string s2 = s1; // s2 is initialized to be a copy of s1\nstd::string s3(s1); // equivalent\nstd::string s4{s1}; // equivalent, but modern\n</code></pre>   Can we do this for our `Dynarray`?  ---  ## Copy-initialization  Before we add anything, let's try what will happen:   <pre><code>Dynarray a(3);\na.at(0) = 2; a.at(1) = 3; a.at(2) = 5;\nDynarray b = a; // It compiles.\nprint(b); // 2 3 5\na.at(0) = 70;\nprint(b); // 70 3 5\n</code></pre>   Ooops! Although it compiles, the pointers `a.m_storage` and `b.m_storage` are pointing to the same address!  ---  ## Copy-initialization  Before we add anything, let's try what will happen:   <pre><code>Dynarray a(3);\nDynarray b = a;\n</code></pre>   Although it compiles, the pointers `a.m_storage` and `b.m_storage` are pointing to the same address!  This will cause disaster: consider the case if `b` \"dies\" before `a`:   <pre><code>Dynarray a(3);\nif (some_condition) {\n  Dynarray b = a; // `a.m_storage` and `b.m_storage` point to the same memory!\n  // ...\n} // At this point, dtor of `b` is invoked, which deallocates the memory.\nstd::cout &lt;&lt; a.at(0); // Invalid memory access!\n</code></pre>   ---  ## Copy constructor  Let `a` be an object of type `Type`. The behaviors of **copy-initialization** (in one of the following forms)   <pre><code>Type b = a;\nType b(a);\nType b{a};\n</code></pre>   are determined by a constructor: **the copy constructor**.  - Note! The `=` in `Type b = a;` **is not an assignment operator**!  ---  ## Copy constructor  The copy constructor of a class `X` has a parameter of type `const X &amp;`:   <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;other);\n};\n</code></pre>   Why `const`?  - Logically, it should not modify the object being copied.  Why `&amp;`?  - **Avoid copying.** Pass-by-value is actually **copy-initialization** of the parameter, which will cause infinite recursion here!  ---  ## Dynarray: copy constructor  What should be the correct behavior of it?   <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;other);\n};\n</code></pre>   ---  ## Dynarray: copy constructor  - We want a copy of the content of `other`.   <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;other)\n    : m_storage(new int[other.size()]{}), m_length(other.size()) {\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n  }\n};\n</code></pre>   Now the copy-initialization of `Dynarray` does the correct thing:  - The new object allocates a new block of memory. - The **contents** are copied, not just the address.  ---  ## Synthesized copy constructor  If the class does not have a user-declared copy constructor, the compiler will try to synthesize one:  - The synthesized copy constructor will **copy-initialize** all the members, as if    ```cpp   class Dynarray {    public:     Dynarray(const Dynarray &amp;other)       : m_storage(other.m_storage), m_length(other.m_length) {}   };   ```  - If the synthesized copy constructor does not behave as you expect, **define it on your own!**  ---  ## Defaulted copy constructor  If the synthesized copy constructor behaves as we expect, we can explicitly require it:   <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;) = default;\n  // Explicitly defaulted: Explicitly requires the compiler to synthesize\n  // a copy constructor, with default behavior.\n};\n</code></pre>     ---  ## Deleted copy constructor  What if we don't want a copy constructor?   <pre><code>class ComplicatedDevice {\n  // some members\n  // Suppose this class represents some complicated device, \n  // for which there is no correct and suitable behavior for \"copying\".\n};\n</code></pre>   Simply not defining the copy constructor does not work:  - The compiler will synthesize one for you.  ---  ## Deleted copy constructor  What if we don't want a copy constructor?   <pre><code>class ComplicatedDevice {\n  // some members\n  // Suppose this class represents some complicated device, \n  // for which there is no correct and suitable behavior for \"copying\".\n public:\n  ComplicatedDevice(const ComplicatedDevice &amp;) = delete;\n};\n</code></pre>   By saying `= delete`, we define a **deleted** copy constructor:   <pre><code>ComplicatedDevice a = something();\nComplicatedDevice b = a; // Error: calling deleted function\n</code></pre>   ---  ## Copy-assignment operator  Apart from copy-initialization, there is another form of copying:   <pre><code>std::string s1 = \"hello\", s2 = \"world\";\ns1 = s2; // s1 becomes a copy of s2, representing \"world\"\n</code></pre>   In `s1 = s2`, `=` is the **assignment operator**.  `=` is the assignment operator **only when it is in an expression.**  - `s1 = s2` is an expression. - `std::string s1 = s2` is in a **declaration statement**, not an expression. `=` here is a part of the initialization syntax.  ---  ## Dynarray: copy-assignment operator  The copy-assignent operator is defined in the form of **operator overloading**:  - `a = b` is equivalent to `a.operator=(b)`. - We will talk about more on operator overloading in a few weeks.   <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other);\n};\n</code></pre>   - The function name is `operator=`. - In consistent with built-in assignment operators, `operator=` returns **reference to the left-hand side object** (the object being assigned).   - It is `*this`.  ---  ## Dynarray: copy-assignment operator  We also want the copy-assignment operator to copy the contents, not only an address.   <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    m_storage = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre>   Is this correct?  ---  ## Dynarray: copy-assignment operator  **Avoid memory leaks! Deallocate the memory you don't use!**   <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    delete[] m_storage; // !!!\n    m_storage = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre>   Is this correct?  ---  ## Dynarray: copy-assignment operator  What if **self-assignment** happens?   <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    // If `other` and `*this` are actually the same object,\n    // the memory is deallocated and the data are lost! (DISASTER)\n    delete[] m_storage;\n    m_storage = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre>   ---  ## Dynarray: copy-assignment operator  Assignment operators should be **self-assignment-safe**.   <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    int *new_data = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      new_data[i] = other.at(i);\n    delete[] m_storage;\n    m_storage = new_data;\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre>   This is self-assignment-safe. (Think about it.)  ---  ## Synthesized, defaulted and deleted copy-assignment operator  Like the copy constructor:  - The copy-assignment operator can also be **deleted**, by declaring it as `= delete;`.  - If you don't define it, the compiler will generate one that copy-assigns all the members, as if it is defined as:    ```cpp   class Dynarray {    public:     Dynarray &amp;operator=(const Dynarray &amp;other) {       m_storage = other.m_storage;       m_length = other.m_length;       return *this;     }   };   ```  - You can also require a synthesized one explicitly by saying `= default;`.  ---  ## [IMPORTANT] The rule of three: Reasoning  Among the **copy constructor**, the **copy-assignment operator** and the **destructor**:  - If a class needs a user-provided version of one of them, **usually**, it needs a user-provided version of **each** of them. - Why?  ---  ## [IMPORTANT] The rule of three: Reasoning  Among the **copy constructor**, the **copy-assignment operator** and the **destructor**:  - If a class needs a user-provided version of one of them, - **usually**, it is a class that **manages some resources**, - for which **the default behavior of the copy-control members does not suffice**. - Therefore, all of the three special functions need a user-provided version.   - Define them in a correct, well-defined manner.   - If a class should not be copy-constructible or copy-assignable, **delete that function**.  ---  ## [IMPORTANT] The rule of three: Rules  Let $S=\\{$ copy constructor $,$ copy assignment operator $,$ destructor $\\}$.  If for a class, $\\exists x,y\\in S$ such that  - $x$ is user-declared, and $y$ is not user-declared,  then the compiler *should not* generate $y$, according to the idea of \"the rule of three\".  ---  ## [IMPORTANT] The rule of three: Rules  Let $S=\\{$ copy constructor $,$ copy assignment operator $,$ destructor $\\}$.  If for a class, $\\exists x,y\\in S$ such that  - $x$ is user-declared, and $y$ is not user-declared,  then the compiler **still generates $y$**, but **this behavior has been deprecated since C++11**.  - This is a problem left over from history: At the time C++98 was adopted, the significance of the rule of three was not fully appreciated.  ---  ## [IMPORTANT] The rule of three  Into modern C++: **The Rule of Five**.  - $\\Rightarrow$ We will talk about it in later lectures.  Read *Effective Modern C++* Item 17 for a thorough understanding of this.  ---  ## Summary  Lifetime of an object:  - depends on its **storage**: local non-`static`, global, allocated, ... - **Initialization** marks the beginning of the lifetime of an object.   - Classes can control the way of initialization using **constructors**. - When the lifetime of an object ends, it is **destroyed**.   - If it is an object of class type, its **destructor** is called right before it is destroyed.  ---  ## Summary  Copy control  - Usually, the **copy control members** refer to the copy constructor, the copy assignment operator and the destructor. - Copy constructor: `ClassName(const ClassName &amp;)` - Copy assignment operator: `ClassName &amp;operator=(const ClassName &amp;)`   - It needs to be **self-assignment safe**. - Destructor: `~ClassName()` - `=default`, `=delete` - The rule of three.  # CS100 Lecture 16  Class Basics II  ---  ## Contents  - Type alias members - `static` members - `friend` - Definition and declaration - Destructors revisited  ---  # Type alias members  ---  ## Type aliases in C++: `using`.  A better way of declaring type aliases:   <pre><code>// C-style\ntypedef long long LL;\n// C++-style\nusing LL = long long;\n</code></pre>   It is more readable when dealing with compound types:    <pre><code>// C-style\ntypedef int intarray_t[1000];\n// C++-style\nusing intarray_t = int[1000];\n</code></pre> <pre><code>// C-style\ntypedef int (&amp;ref_to_array)[1000];\n// C++-style\nusing ref_to_array = int (&amp;)[1000];\n</code></pre>   `using` can also declare *alias templates* (in later lectures), while `typedef` cannot.  **[Best practice]** In C++, Use `using` to declare type aliases.  ---  ## Type alias members  A class can have **type alias members**.   <pre><code>class Dynarray {\n public:\n  using size_type = std::size_t;\n  size_type size() const { return m_length; }\n};\n</code></pre>   Usage: `ClassName::TypeAliasName`   <pre><code>for (Dynarray::size_type i = 0; i != a.size(); ++i)\n  // ...\n</code></pre>   Note: Here we use `ClassName::` instead of `object.`, because such members belong to **the class**, not one single object.  ---  ## Type alias members  The class also has control over the accessibility of type alias members.   <pre><code>class A {\n  using type = int;\n};\nA::type x = 42; // Error: Accessing private member of `A`.\n</code></pre>   The class has control over the accessibility of **anything that is called a *member* of it**.  ---  ## Type alias members in the standard library  All standard library containers (and `std::string`) define the type alias member `size_type` as the return type of `.size()`:   <pre><code>std::string::size_type i = s.size();\nstd::vector&lt;int&gt;::size_type j = v.size(); // Not `std::vector::size_type`!\n                                          // The template argument `&lt;int&gt;`\n                                          // is necessary here.\nstd::list&lt;int&gt;::size_type k = l.size();\n</code></pre>   Why?  ---  ## Type alias members in the standard library  All standard library containers (and `std::string`) define the type alias member `size_type` as the return type of `.size()`:   <pre><code>std::string::size_type i = s.size();\nstd::vector&lt;int&gt;::size_type j = v.size();\nstd::list&lt;int&gt;::size_type k = l.size();\n</code></pre>   - This type is **container-dependent**: Different containers may choose different types suitable for representing sizes.   - The Qt containers often use `int` as `size_type`. - Define `Container::size_type` to achieve good **consistency** and **generality**.  ---  # `static` members  ---  ## `static` data members  A `static` data member:   <pre><code>class A {\n  static int something;\n  // other members ...\n};\n</code></pre>   Just consider it as a **global variable**, except that  - its name is in the **class scope**: `A::something`, and that - the accessibility may be restricted. Here `something` is `private`.  ---  ## `static` data members  A `static` data member:   <pre><code>class A {\n  static int something;\n  // other members ...\n};\n</code></pre>   There is **only one** `A::something`: it does not belong to any object of `A`. It belongs to the **class** `A`.  - Like type alias members, we use `ClassName::` instead of `object.` to access them.  ---  ## `static` data members  A `static` data member:   <pre><code>class A {\n  static int something;\n  // other members ...\n};\n</code></pre>   It can also be accessed by `a.something` (where `a` is an object of type `A`), but `a.something` and `b.something` refer to the same variable.  - If `f` is a function that returns an object of type `A`, `f().something` always accesses the same variable no matter what `f()` returns. - In the very first externally available C++ compiler (Cfront 1.0, 1985), `f` in the expression `f().something` is not even called! This bug has been fixed soon.  ---  ## `static` data members: Example  Suppose we want to assign a unique id to each object of our class.   <pre><code>int cnt = 0;\n\nclass Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  int m_id;\npublic:\n  Dynarray(std::size_t n)\n      : m_storage(new int[n]{}), m_length(n), m_id(cnt++) {}\n  Dynarray() : m_storage(nullptr), m_length(0), m_id(cnt++) {}\n  // ...\n};\n</code></pre>   We use a global variable `cnt` as the \"counter\". Is this a good design?  ---  ## `static` data members: Example  The name `cnt` is confusing: A \"counter\" of what?    <pre><code>int X_cnt = 0, Y_cnt = 0, Z_cnt = 0;\nstruct X {\n  int m_id;\n  X() : m_id(X_cnt++) {}\n};\nstruct Y {\n  int m_id;\n  Y() : m_id(Y_cnt++) {}\n};\nstruct Z {\n  int m_id;\n  Z() : m_id(Z_cnt++) {}\n};\n</code></pre>    - The program is in a mess with global variables all around.  - No prevention from potential mistakes:    ```cpp   struct Y {     Y() : m_id(X_cnt++) {}   };   ```    The mistake happens silently.  ---  ## `static` data members: Example  **Restrict the name of this counter in the scope of the corresponding class**, by declaring it as a `static` data member.  - This is exactly the idea behind `static` data members: A \"global variable\" restricted in class scope.   <pre><code>class Dynarray {\n  static int s_cnt; // !!!\n  int *m_storage;\n  std::size_t m_length;\n  int m_id;\n\npublic:\n  Dynarray(/* ... */) : /* ... */, m_id(s_cnt++) {}\n};\n</code></pre>   - `s` stands for `static`.  ---  ## `static` data members   <pre><code>class Dynarray {\n  static int s_cnt; // !!!\n  int *m_storage;\n  std::size_t m_length;\n  int m_id;\n\npublic:\n  Dynarray(/* ... */) : /* ... */, m_id(s_cnt++) {}\n};\n</code></pre>   You also need to give it a definition outside the class, according to some rules.   <pre><code>int Dynarray::s_cnt; // Zero-initialize, because it is `static`.\n</code></pre>   Or initialize it with some value explicitly:   <pre><code>int Dynarray::s_cnt = 42;\n</code></pre>   ---  ## `static` data members  Exercise: `std::string` has a `find` member function:   <pre><code>std::string s = something();\nauto pos = s.find('a');\nif (pos == std::string::npos) { // This means that `'a'` is not found.\n  // ...\n} else {\n  std::cout &lt;&lt; s[pos] &lt;&lt; '\\n'; // If executed, it should print `a`.\n}\n</code></pre>   [`std::string::npos`](https://en.cppreference.com/w/cpp/string/basic_string/npos) is returned when the required character is not found.  Define `npos` and `find` for your `Dynarray` class, whose behavior should be similar to those of `std::string`.  ---  ## `static` member functions  A `static` member function:   <pre><code>class A {\n public:\n  static void fun(int x, int y);\n};\n</code></pre>   Just consider it as a normal non-member function, except that  - its name is in the **class scope**: `A::fun(x, y)`, and that - the accessibility may be restricted. Here `fun` is `public`.  ---  ## `static` member functions  A `static` member function:   <pre><code>class A {\n public:\n  static void fun(int x, int y);\n};\n</code></pre>   `A::fun` does not belong to any object of `A`. It belongs to the **class** `A`.  - There is no `this` pointer inside `fun`.  It can also be called by `a.fun(x, y)` (where `a` is an object of type `A`), but here `a` will not be bound to a `this` pointer, and `fun` has no way of accessing any non-`static` member of `a`.  ---  # `friend`  ---  ## `friend` functions  Recall the `Student` class:   <pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  Student(const std::string &amp;name, const std::string &amp;id)\n      : m_name(name), m_id(id), m_entranceYear(std::stol(id.substr(0, 4))) {}\n  auto graduated(int year) const { return year - m_entranceYear &gt;= 4; }\n  // ...\n};\n</code></pre>   Suppose we want to write a function to display the information of a `Student`.  ---  ## `friend` functions   <pre><code>void print(const Student &amp;stu) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; stu.m_name &lt;&lt; \", id: \" &lt;&lt; stu.m_id\n            &lt;&lt; \"entrance year: \" &lt;&lt; stu.m_entranceYear &lt;&lt; '\\n';\n}\n</code></pre>   This won't compile, because `m_name`, `m_id` and `m_entranceYear` are `private` members of `Student`.  - One workaround is to define `print` as a member of `Student`. - However, there do exist some functions that cannot be defined as a member.  ---  ## `friend` functions  Add a `friend` declaration, so that `print` can access the private members of `Student`.   <pre><code>class Student {\n  friend void print(const Student &amp;); // The parameter name is not used in this\n                                      // declaration, so it is omitted.\n\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  Student(const std::string &amp;name, const std::string &amp;id)\n      : m_name(name), m_id(id), m_entranceYear(std::stol(id.substr(0, 4))) {}\n  auto graduated(int year) const { return year - m_entranceYear &gt;= 4; }\n  // ...\n};\n</code></pre>   ---  ## `friend` functions  Add a `friend` declaration.   <pre><code>class Student {\n  friend void print(const Student &amp;);\n\n  // ...\n};\n</code></pre>   A `friend` is **not** a member! You can put this `friend` delcaration **anywhere in the class body**. The access modifiers have **no effect** on it.  - We often declare all the `friend`s of a class in the beginning or at the end of class definition.  ---  ## `friend` classes  A class can also declare another class as its `friend`.   <pre><code>class X {\n  friend class Y;\n  // ...\n};\n</code></pre>   In this way, any code from the class `Y` can access the private members of `X`.  ---  # Definition and declaration  ---  ## Definition and declaration  For a function:   <pre><code>// Only a declaration: The function body is not present.\nvoid foo(int, const std::string &amp;);\n// A definition: The function body is present.\nvoid foo(int x, const std::string &amp;s) {\n  // ...\n}\n</code></pre>   ---  ## Class definition  For a class, a **definition** consists of **the declarations of all its members**.   <pre><code>class Widget {\npublic:\n  Widget();\n  Widget(int, int);\n  void set_handle(int);\n\n  // `const` is also a part of the function type, which should be present\n  // in its declaration.\n  const std::vector&lt;int&gt; &amp;get_gadgets() const;\n\n  // ...\nprivate:\n  int m_handle;\n  int m_length;\n  std::vector&lt;int&gt; m_gadgets;  \n};\n</code></pre>   ---  ## Define a member function outside the class body  A member function can be declared in the class body, and then defined outside.   <pre><code>class Widget {\npublic:\n  const std::vector&lt;int&gt; &amp;get_gadgets() const; // A declaration only.\n  // ...\n}; // Now the definition of `Widget` is complete.\n\n// Define the function here. The function name is `Widget::get_gadgets`.\nconst std::vector&lt;int&gt; &amp;Widget::get_gadgets() const {\n  return m_gadgets; // Just like how you do it inside the class body.\n                    // The implicit `this` pointer is still there.\n}\n</code></pre>   ---  ## The `::` operator   <pre><code>class Widget {\npublic:\n  using gadgets_list = std::vector&lt;int&gt;;\n  static int special_member;\n  const gadgets_list &amp;get_gadgets() const;\n  // ...\n};\nconst Widget::gadgets_list &amp;Widget::get_gadgets() const {\n  return m_gadgets;\n}\n</code></pre>   - The members `Widget::gadgets_list` and `Widget::special_member` are accessed through `ClassName::`. - The name of the member function `get_gadgets` is `Widget::get_gadgets`.  ---  ## Class declaration and incomplete type  To declare a class without providing a definition:   <pre><code>class A;\nstruct B;\n</code></pre>   If we only see the **declaration** of a class, we have no knowledge about its members, how many bytes it takes, how it can be initialized, ...  - Such class type is an **incomplete type**. - We cannot create an object of such type, nor can we access any of its members. - The only thing we can do is to declare a pointer or a reference to it.  ---  ## Class declaration and incomplete type  If we only see the **declaration** of a class, we have no knowledge about its members, how many bytes it takes, how it can be initialized, ...  - Such class type is an **incomplete type**. - We cannot create an object of such type, nor can we access any of its members. - The only thing we can do is to declare a pointer or a reference to it.   <pre><code>class Student; // We only have this declaration.\n\nvoid print(const Student &amp;stu) { // OK. Declaring a reference to it is OK.\n  std::cout &lt;&lt; stu.getName(); // Error. We don't know anything about its members.\n}\n\nclass Student {\npublic:\n  const std::string &amp;getName() const { /* ... */ }\n  // ...\n};\n</code></pre>   ---  # Destructors revisited  ---  ## Destructors revisited  A **destructor** (dtor) is a member function that is called automatically when an object of that class type is \"dead\".  - For global and `static` objects, on termination of the program. - For local objects, when control reaches the end of its scope. - For objects created by `new`/`new[]`, when their address is passed to `delete`/`delete[]`.  The destructor is often responsible for doing some **cleanup**: Release the resources it owns, do some logging, cut off its connection with some external objects, ...  ---  ## Destructors   <pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  Student(const std::string &amp;, const std::string &amp;);\n  const std::string &amp;getName() const;\n  bool graduated(int) const;\n  void setName(const std::string &amp;);\n  void print() const;\n};\n</code></pre>   Does our `Student` class have a destructor?  ---  ## Destructors  Does our `Student` class have a destructor?  - It **must** have. Whenever you create an object of type `Student`, its destructor needs to be invoked somewhere in this program. ${}^{\\textcolor{red}{1}}$  What does `Student::~Student` need to do? Does `Student` own any resources?  ---  ## Destructors  Does our `Student` class have a destructor?  - It **must** have. Whenever you create an object of type `Student`, its destructor needs to be invoked somewhere in this program. ${}^{\\textcolor{red}{1}}$  What does `Student::~Student` need to do? Does `Student` own any resources?  - It seems that a `Student` has no resources, so nothing special needs to be done. - However, it has two `std::string` members! Their destructors must be called, otherwise the memory is leaked!  ---  ## Destructors  To define the destructor of `Student`: Just write an empty function body, and everything is done.   <pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  ~Student() {}\n};\n</code></pre>   ---  ## Destructors   <pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  ~Student() {}\n};\n</code></pre>   - When the function body is executed, the object is *not yet* \"dead\".    - You can still access its members.      ```cpp     ~Student() { std::cout &lt;&lt; m_name &lt;&lt; '\\n'; }     ```  - After the function body is executed, **all its data members** are destroyed automatically, **in reverse order** in which they are declared.    - For members of class type, their destructors are invoked automatically.  ---  ## Constructors vs destructors    <pre><code>Student(const std::string &amp;name)\n    : m_name(name) /* ... */ {\n  // ...\n}\n</code></pre>   - A class may have multiple ctors (overloaded). - The data members are initialized **before** the execution of function body. - The data members are initialized **in order** in which they are declared.   <pre><code>~Student() {\n  // ...\n}\n</code></pre>   - A class has only one dtor. ${}^{\\textcolor{red}{1}}$ - The data members are destroyed **after** the execution of function body. - The data members are destroyed **in reverse order** in which they are declared.  ---  ## Compiler-generated destructors  For most cases, a class needs a destructor.  Therefore, the compiler always generates one ${}^{\\textcolor{red}{2}}$ if there is no user-declared destructor.  - The compiler-generated destructor is `public` by default. - The compiler-generated destructor is as if it were defined with an empty function body `{}`. - It does nothing but to destroy the data members.  We can explicitly require one by writing `= default;`, just as for other copy control members.  ---  ## Summary  Type alias members  - Type alias members belong to the class, not individual objects, so they are accessed via `ClassName::AliasName`. - The class can controls the accessibility of type alias members.  `static` members  - `static` data members are like global variables, but in the class's scope. - `static` member functions are like normal non-member functions, but in the class's scope. There is no `this` pointer in a `static` member function. - A `static` member belongs to the class, instead of any individual object.  ---  ## Summary  `friend`  - A `friend` declaration allows a function or class to access private (and protected) members of another class. - A `friend` is not a member.  Definitions and declarations  - A class definition includes declarations of all its members. - A member function can be declared in the class body and then defined outside. - A class type is an incomplete type if only its declaration (without a definition) is present.  ---  ## Summary  Destructors  - Destructors are called automatically when an object's lifetime ends. They often do some clean up. - The members are destroyed **after** the function body is executed. They are destroyed in reverse order in which they are declared. - The compiler generates a destructor (in most cases) if none is provided. It just destroys all its members.  # CS100 Lecture 17  Rvalue References and Move  ---  ## Contents  - Motivation: Copy is slow.   - Rvalue references - Move operations   - Move constructor   - Move assignment operator   - The rule of five - `std::move` - NRVO, move and copy elision  ---  ## Motivation: Copy is slow.   <pre><code>std::string a = some_value(), b = some_other_value();\nstd::string s;\ns = a;\ns = a + b;\n</code></pre>   Consider the two assignments: `s = a` and `s = a + b`.  How is `s = a + b` evaluated?  ---  ## Motivation: Copy is slow.   <pre><code>s = a + b;\n</code></pre>   1. Evaluate `a + b` and store the result in a temporary object, say `tmp`. 2. Perform the assignment `s = tmp`. 3. The temporary object `tmp` is no longer needed, hence destroyed by its destructor.  Can we make this faster?  ---  ## Motivation: Copy is slow.   <pre><code>s = a + b;\n</code></pre>   1. Evaluate `a + b` and store the result in a temporary object, say `tmp`. 2. Perform the assignment `s = tmp`. 3. The temporary object `tmp` is no longer needed, hence destroyed by its destructor.  Can we make this faster?  - The assignment `s = tmp` is done by **copying** the contents of `tmp`? - But `tmp` is about to \"die\"! Why can't we just *steal* the contents from it?  ---  ## Motivation: Copy is slow.  Let's look at the other assignment:   <pre><code>s = a;\n</code></pre>   - **Copy** is necessary here, because `a` lives long. It is not destroyed immediately after this statement is executed. - You cannot just \"steal\" the contents from `a`. The contents of `a` must be preserved.  ---  ## Distinguish between the different kinds of assignments    <pre><code>s = a;\n</code></pre> <pre><code>s = a + b;\n</code></pre>   What is the key difference between them?  - `s = a` is an assignment from an **lvalue**, - while `s = a + b` is an assignment from an **rvalue**.  If we only have the copy assignment operator, there is no way of distinguishing them.  **\\* Define two different assignment operators, one accepting an lvalue and the other accepting an rvalue?**  ---  ## Rvalue References  A kind of reference that is bound to **rvalues**:   <pre><code>int &amp;r = 42;             // Error: Lvalue reference cannot be bound to rvalue.\nint &amp;&amp;rr = 42;           // Correct: `rr` is an rvalue reference.\nconst int &amp;cr = 42;      // Also correct:\n                         // Lvalue reference-to-const can be bound to rvalue.\nconst int &amp;&amp;crr = 42;    // Correct, but useless:\n                         // Rvalue reference-to-const is seldom used.\n\nint i = 42;\nint &amp;&amp;rr2 = i;           // Error: Rvalue reference cannot be bound to lvalue.\nint &amp;r2 = i * 42;        // Error: Lvalue reference cannot be bound to rvalue.\nconst int &amp;cr2 = i * 42; // Correct\nint &amp;&amp;rr3 = i * 42;      // Correct\n</code></pre>   - Lvalue references (to non-`const`) can only be bound to lvalues. - Rvalue references can only be bound to rvalues.  ---  ## Overload Resolution  Such overloading is allowed:   <pre><code>void fun(const std::string &amp;);\nvoid fun(std::string &amp;&amp;);\n</code></pre>   - `fun(s1 + s2)` matches `fun(std::string &amp;&amp;)`, because `s1 + s2` is an rvalue. - `fun(s)` matches `fun(const std::string &amp;)`, because `s` is an lvalue. - Note that if `fun(std::string &amp;&amp;)` does not exist, `fun(s1 + s2)` also matches `fun(const std::string &amp;)`.  We will see how this kind of overloading benefit us soon.  ---  # Move Operations  ---  ## Overview  The **move constructor** and the **move assignment operator**.   <pre><code>struct Widget {\n  Widget(Widget &amp;&amp;) noexcept;\n  Widget &amp;operator=(Widget &amp;&amp;) noexcept;\n  // Compared to the copy constructor and the copy assignment operator:\n  Widget(const Widget &amp;);\n  Widget &amp;operator=(const Widget &amp;);\n};\n</code></pre>   - Parameter type is **rvalue reference**, instead of lvalue reference-to-`const`. - **`noexcept` is (almost always) necessary!** $\\Rightarrow$ We will talk about it in later lectures.  ---  ## The Move Constructor  Take the `Dynarray` as an example.   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\npublic:\n  Dynarray(const Dynarray &amp;other) // copy constructor\n    : m_storage(new int[other.m_length]), m_length(other.m_length) {\n    for (std::size_t i = 0; i != m_length; ++i)\n      m_storage[i] = other.m_storage[i];\n  }\n  Dynarray(Dynarray &amp;&amp;other) noexcept // move constructor\n    : m_storage(other.m_storage), m_length(other.m_length) {\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre>   ---  ## The Move Constructor   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept // move constructor\n    : m_storage(other.m_storage), m_length(other.m_length) {\n\n\n  }\n};\n</code></pre>   1. *Steal* the resources of `other`, instead of making a copy.  ---  ## The Move Constructor   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept // move constructor\n    : m_storage(other.m_storage), m_length(other.m_length) {\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre>   1. *Steal* the resources of `other`, instead of making a copy. 2. Make sure `other` is in a valid state, so that it can be safely destroyed.  **\\* Take ownership of `other`'s resources!**  ---  ## The Move Assignment Operator  **Take ownership of `other`'s resources!**   <pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n\n\n      m_storage = other.m_storage; m_length = other.m_length;\n\n\n    return *this;\n  }\n};\n</code></pre>   1. *Steal* the resources from `other`.  ---  ## The Move Assignment Operator   <pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n\n\n      m_storage = other.m_storage; m_length = other.m_length;\n      other.m_storage = nullptr; other.m_length = 0;\n\n    return *this;\n  }\n};\n</code></pre>   1. *Steal* the resources from `other`. 2. Make sure `other` is in a valid state, so that it can be safely destroyed.  Are we done?  ---  ## The Move Assignment Operator   <pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n\n      delete[] m_storage;\n      m_storage = other.m_storage; m_length = other.m_length;\n      other.m_storage = nullptr; other.m_length = 0;\n\n    return *this;\n  }\n};\n</code></pre>   0. **Avoid memory leaks!** 1. *Steal* the resources from `other`. 2. Make sure `other` is in a valid state, so that it can be safely destroyed.  Are we done?  ---  ## The Move Assignment Operator   <pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n    if (this != &amp;other) {\n      delete[] m_storage;\n      m_storage = other.m_storage; m_length = other.m_length;\n      other.m_storage = nullptr; other.m_length = 0;\n    }\n    return *this;\n  }\n};\n</code></pre>   0. **Avoid memory leaks!** 1. *Steal* the resources from `other`. 2. Make sure `other` is in a valid state, so that it can be safely destroyed.  **\\* Self-assignment safe!**  ---  ## Lvalues are Copied; Rvalues are Moved  Before we move on, let's define a function for demonstration.  Suppose we have a function that concatenates two `Dynarray`s:   <pre><code>Dynarray concat(const Dynarray &amp;a, const Dynarray &amp;b) {\n  Dynarray result(a.size() + b.size());\n  for (std::size_t i = 0; i != a.size(); ++i)\n    result.at(i) = a.at(i);\n  for (std::size_t i = 0; i != b.size(); ++i)\n    result.at(a.size() + i) = b.at(i);\n  return result;\n}\n</code></pre>   Which assignment operator should be called?   <pre><code>a = concat(b, c);\n</code></pre>   ---  ## Lvalues are Copied; Rvalues are Moved  Lvalues are copied; rvalues are moved ...   <pre><code>a = concat(b, c); // calls move assignment operator,\n                  // because `concat(b, c)` is an rvalue.\na = b; // calls copy assignment operator\n</code></pre>   ---  ## Lvalues are Copied; Rvalues are Moved  Lvalues are copied; rvalues are moved ...   <pre><code>a = concat(b, c); // calls move assignment operator,\n                  // because `concat(b, c)` generates an rvalue.\na = b; // copy assignment operator\n</code></pre>   ... but rvalues are copied if there is no move operation.   <pre><code>// If Dynarray has no move assignment operator, this is a copy assignment.\na = concat(b, c)\n</code></pre>   ---  ## Synthesized Move Operations  Like copy operations, we can use `=default` to require a synthesized move operation that has the default behaviors.   <pre><code>struct X {\n  X(X &amp;&amp;) = default;\n  X &amp;operator=(X &amp;&amp;) = default;\n};\n</code></pre>   - The synthesized move operations call the corresponding move operations of each member in the order in which they are declared. - The synthesized move operations are `noexcept`.  Move operations can also be deleted by `=delete`, but be careful ... ${}^{\\textcolor{red}{1}}$  ---  ## The Rule of Five: Idea  The updated *copy control members*:  - copy constructor - copy assignment operator - move constructor - move assignment operator - destructor  If one of them has a user-provided version, the copy control of the class is thought of to have special behaviors. (Recall \"the rule of three\".)  ---  ## The Rule of Five: Rules  - The move constructor or the move assignment operator will not be generated ${}^{\\textcolor{red}{2}}$ if any of the rest four members have a user-declared version.  - The copy constructor or copy assignment operator, if not provided by the user, will be implicitly `delete`d if the class has a user-provided move operation.  - The generation of the copy constructor or copy assignment operator is **deprecated** (since C++11) when the class has a user-declared copy operation or a destructor.    - This is why some of you see this error:      ```     Implicitly-declared copy assignment operator is deprecated, because the     class has a user-provided copy constructor.     ```  ---  ## The Rule of Five  The *copy control members* in modern C++:  - copy constructor - copy assignment operator - move constructor - move assignment operator - destructor  **The Rule of Five**: Define zero or five of them.  ---  ## How to Invoke a Move Operation?  Suppose we give our `Dynarray` a label:   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  std::string m_label;\n};\n</code></pre>   The move assignment operator should invoke the **move assignment operator** on `m_label`. But how?   <pre><code>m_label = other.m_label; // calls copy assignment operator,\n                         // because `other.m_label` is an lvalue.\n</code></pre>   ---  # `std::move`  ---  ## `std::move`  Defined in ``  `std::move(x)` performs an **lvalue to rvalue cast**:   <pre><code>int ival = 42;\nint &amp;&amp;rref = ival; // Error\nint &amp;&amp;rref2 = std::move(ival); // Correct\n</code></pre>   Calling `std::move(x)` tells the compiler that:  - `x` is an lvalue, but - we want to treat `x` as an **rvalue**.  ---  ## `std::move`  `std::move(x)` indicates that we want to treat `x` as an **rvalue**, which means that `x` will be *moved from*.  The call to `std::move` **promises** that we do not intend to use `x` again,  - except to assign to it or to destroy it.  A call to `std::move` is usually followed by a call to some function that moves the object, after which **we cannot make any assumptions about the value of the moved-from object.**   <pre><code>void foo(X &amp;&amp;x);      // moves `x`\nvoid foo(const X &amp;x); // copies `x`\nfoo(std::move(x)); // matches `foo(X&amp;&amp;)`, so that `x` is moved.\n</code></pre>   \"`std::move` does not *move* anything. It just makes a *promise*.\"  ---  ## Use `std::move`  Suppose we give every `Dynarray` a special \"label\", which is a string.   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  std::string m_label;\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept\n      : m_storage(other.m_storage), m_length(other.m_length),\n        m_label(std::move(other.m_label)) { // !!\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre>   The standard library facilities ought to define efficient and correct move operations.  ---  ## Use `std::move`  Suppose we give every `Dynarray` a special \"label\", which is a string.   <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  std::string m_label;\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n    if (this != &amp;other) {\n      delete[] m_storage;\n      m_storage = other.m_storage; m_length = other.m_length;\n      m_label = std::move(other.m_label);\n      other.m_storage = nullptr; other.m_length = 0;\n    }\n    return *this;\n  }\n};\n</code></pre>   The standard library facilities ought to define efficient and correct move operations.  ---  ## Use `std::move`  Why do we need `std::move`?   <pre><code>class Dynarray {\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept\n      : m_storage(other.m_storage), m_length(other.m_length),\n        m_label(other.m_label) { // Isn't this correct?\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre>   `other` is an rvalue reference, so ... ?  ---  ## An rvalue reference is an lvalue.  `other` is an rvalue reference, **which is an lvalue**.  - To move the object that the rvalue reference is bound to, we must call `std::move`.   <pre><code>class Dynarray {\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept\n      : m_storage(other.m_storage), m_length(other.m_length),\n        m_label(other.m_label) { // `other.m_label` is copied, not moved.\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre>   An rvalue reference is an lvalue! Does that make sense?  ---  ## Lvalues persist; Rvalues are ephemeral.  The lifetime of rvalues is often very short, compared to that of lvalues.  - Lvalues have persistent state, whereas rvalues are either **literals** or **temporary objects** created in the course of evaluating expressions.  An rvalue reference **extends** the lifetime of the rvalue that it is bound to.   <pre><code>std::string s1 = something(), s2 = some_other_thing();\nstd::string &amp;&amp;rr = s1 + s2; // The state of the temporary object is \"captured\"\n                            // by the rvalue reference, without which the\n                            // temporary object will be destroyed.\nstd::cout &lt;&lt; rr &lt;&lt; '\\n'; // Now we can use `rr` just like a normal string.\n</code></pre>   Golden rule: **Anything that has a name is an lvalue.**  - The rvalue reference has a name, so it is an lvalue.  ---  # NRVO, Move and Copy Elision  ---  ## Returning a Temporary (pure rvalue)   <pre><code>std::string foo(const std::string &amp;a, const std::string &amp;b) {\n  return a + b; // a temporary\n}\nstd::string s = foo(a, b);\n</code></pre>   - First, a temporary is generated to store the result of `a + b`. - How is this temporary returned?  ---  ## Returning a Temporary (pure rvalue)   <pre><code>std::string foo(const std::string &amp;a, const std::string &amp;b) {\n  return a + b; // a temporary\n}\nstd::string s = foo(a, b);\n</code></pre>   Since C++17, **no copy or move** is made here. The initialization of `s` is the same as   <pre><code>std::string s(a + b);\n</code></pre>   This is called **copy elision**.  ---  ## Returning a Named Object   <pre><code>Dynarray concat(const Dynarray &amp;a, const Dynarray &amp;b) {\n  Dynarray result(a.size() + b.size());\n  for (std::size_t i = 0; i != a.size(); ++i)\n    result.at(i) = a.at(i);\n  for (std::size_t i = 0; i != b.size(); ++i)\n    result.at(a.size() + i) = b.at(i);\n  return result;\n}\na = concat(b, c);\n</code></pre>   - `result` is a local object of `concat`. - Since C++11, `return result` performs a **move initialization** of a temporary object, say `tmp`. - Then a **move assignment** to `a` is performed.  ---  ## Named Return Value Optimization, NRVO   <pre><code>Dynarray concat(const Dynarray &amp;a, const Dynarray &amp;b) {\n  Dynarray result(a.size() + b.size());\n  // ...\n  return result;\n}\nDynarray a = concat(b, c); // Initialization\n</code></pre>   NRVO transforms this code to   <pre><code>// Pseudo C++ code.\nvoid concat(Dynarray &amp;result, const Dynarray &amp;a, const Dynarray &amp;b) {\n  // Pseudo C++ code. For demonstration only.\n  result.Dynarray::Dynarray(a.size() + b.size()); // construct in-place\n  // ...\n}\nDynarray a@; // Uninitialized.\nconcat(a@, b, c);\n</code></pre>   so that no copy or move is needed.  ---  ## Named Return Value Optimization, NRVO  Note:  - NRVO was invented decades ago (even before C++98). - NRVO is an **optimization**, but not mandatory. - Even if NRVO is performed, the move constructor should still be available.   - Because the compiler can choose not to perform NRVO.   - The program should be syntactically correct (\"well-formed\"), no matter how the compiler treats it.  ---  ## Summary  Rvalue references  - are bound to rvalues, and extends the lifetime of the rvalue. - Functions accepting `X &amp;&amp;` and `const X &amp;` can be overloaded. - An rvalue reference is an lvalue.  Move operations  - take ownership of resources from the other object. - After a move operation, the moved-from object should be in a valid state that can be safely assigned to or destroyed. - `=default` - The rule of five: Define zero or five of the special member functions.  ---  ## Summary  `std::move`  - does not move anything. It only performs an lvalue-to-rvalue cast. - `std::move(x)` makes a promise that `x` can be safely moved from.  In modern C++, unnecessary copies are greatly avoided by:  - copy-elision, which avoids the move or copy of temporary objects, and - move, with the `return`ed lvalue treated as an rvalue, and - NRVO, which constructs in-place the object to be initialized.  # CS100 Lecture 18  Smart Pointers  ---  ## Contents  - Ideas - `std::unique_ptr` - `std::shared_ptr`  ---  # Ideas  ---  ## Memory management is difficult!  For raw pointers obtained from `new` / `new[]` expressions, a manual `delete` / `delete[]` is required.   <pre><code>void runGame(const std::vector&lt;Option&gt; &amp;options, const Settings &amp;settings) {\n  auto pWindow = new Window(settings.width, settings.height, settings.mode);\n  auto pGame = new Game(options, settings, pWindow);\n  // Run the game ...\n  while (true) {\n    auto key = getUserKeyAction();\n    // ...\n  }\n  delete pGame;   // You must not forget this.\n  delete pWindow; // You must not forget this.\n}\n</code></pre>   Will you always remember to `delete`?  ---  ## Will you always remember to `delete`?   <pre><code>void runGame(const std::vector&lt;Option&gt; &amp;options, const Settings &amp;settings) {\n  auto pWindow = new Window(settings.width, settings.height, settings.mode);\n  auto pGame = new Game(options, settings, pWindow);\n  if (/* condition1 */) {\n    // ...\n    return; // `pWindow` and `pGame` should also be `delete`d here!\n  }\n  // Run the game ...\n  while (true) {\n    auto key = getUserKeyAction();\n    // ...\n    if (/* condition2 */) {\n      // ...\n      return; // `pWindow` and `pGame` should also be `delete`d here!\n    }\n  }\n  delete pGame;\n  delete pWindow;\n}\n</code></pre>   ---  ## Idea: Make use of destructors.   <pre><code>struct WindowPtr { // A \"smart pointer\".\n  Window *ptr;\n  WindowPtr(Window *p) : ptr(p) {}\n  ~WindowPtr() { delete ptr; } // The destructor will `delete` the object.\n};\n</code></pre>   When the control reaches the end of the scope in which the `WindowPtr` lives, the destructor of `WindowPtr` will be called automatically.   <pre><code>void runGame(const std::vector&lt;Option&gt; &amp;options, const Settings &amp;settings) {\n  WindowPtr pWindow(new Window(settings.width, settings.height, settings.mode));\n  if (/* condition1 */) {\n    // ...\n    return; // `pWindow` is destroyed automatically, with its destructor called.\n  }\n  // ...\n  // `pWindow` is destroyed automatically, with its destructor called.\n}\n</code></pre>   ---  ## What if `WindowPtr` is copied?  Now `WindowPtr` only has a compiler-generated copy constructor, which copies the value of `ptr`.   <pre><code>{\n  WindowPtr pWindow(new Window(settings.width, settings.height, settings.mode));\n  auto copy = pWindow; // `copy.ptr` and `pWindow.ptr` point to the same object!\n} // The object is deleted twice! Disaster!\n</code></pre>   What should be the behavior of `auto copy = pWindow;`? Possible designs are:  1. Copy the object, as if `WindowPtr copy(new Window(*pWindow.ptr));`. 2. Copy the pointer, as if `WindowPtr copy(pWindow.ptr);`.    - To avoid disasters caused by multiple `delete`s, some special design is needed. 3. Disable it. If there is no unique reasonable design, disable that operation.  ---  ## What if `WindowPtr` is copied?  What should be the behavior of `auto copy = pWindow;`? Possible designs are:  1. Copy the object, as if `WindowPtr copy(new Window(*pWindow.ptr));`.    - **\"Value semantics\"**    - Typical example: Standard library containers. When you copy a `std::string`, a new string is created, with the **contents** copied.    - May be referred to as \"deep copy\" in some other languages. 2. Copy the pointer, as if `WindowPtr copy(pWindow.ptr);`.    - To avoid disasters caused by multiple `delete`s, some special design is needed.    - **\"Pointer semantics\"**, or **\"Reference semantics\"**    - \"shallow copy\" in some other languages. 3. Disable it. If there is no unique reasonable design, disable that operation.    - In this case, `pWindow` **exclusively owns** the `Window` object.  ---  ## Overview of smart pointers  A \"smart pointer\" is a pointer that manages its resources.  Possible behaviors of copy of a smart pointer:  1. Copy the object. (Value semantics)    - **Standard library containers.** e.g. `std::string`, `std::vector`, `std::set`, ... 2. Copy the pointer, but with some special design. (Pointer semantics)    - **`std::shared_ptr`.** Defined in standard library file ``. 3. Disable it. (Unique ownership)    - **`std::unique_ptr`.** Defined in standard library file ``.  The smart pointers `std::shared_ptr`, `std::unique_ptr` and `std::weak_ptr` are **the C++'s answer to garbage collection**.  - `std::weak_ptr` is not covered in CS100.  ---  ## Overview of smart pointers  The smart pointers `std::shared_ptr`, `std::unique_ptr` and `std::weak_ptr` are **the C++'s answer to garbage collection**.  Smart pointers support the similar operations as raw pointers:  - `*sp` returns reference to the pointed-to object. - `sp-&gt;mem` is equivalent to `(*sp).mem`. - `sp` is *contextually convertible* to `bool`: It can be treated as a \"condition\".   - It can be placed at the \"condition\" part of `if`, `for`, `while`, `do` statements.   - It can be used as operands of `&amp;&amp;`, `||`, `!` or the first operand of `?:`.   - In all cases, the conversion result is `true` **iff** `sp` holds an object (not \"null\").  **[Best practice]** In modern C++, prefer smart pointers to raw pointers.  ---  # `std::unique_ptr`  ---  ## Design: Unique ownership of the object  A \"unique-pointer\" saves a raw pointer internally, pointing to the object it owns.  When the unique-pointer is destroyed, it disposes of the object it owns.   <pre><code>class WindowPtr {\n  Window *ptr;\npublic:\n  WindowPtr(Window *p = nullptr) : ptr(p) {}\n  ~WindowPtr() { delete ptr; }\n  WindowPtr(const WindowPtr &amp;) = delete;\n  WindowPtr &amp;operator=(const WindowPtr &amp;) = delete;\n  WindowPtr(WindowPtr &amp;&amp;other) noexcept : ptr(other.ptr) { other.ptr = nullptr; }\n  WindowPtr &amp;operator=(WindowPtr &amp;&amp;other) noexcept {\n    if (&amp;other != this) {\n      delete ptr; ptr = other.ptr; other.ptr = nullptr;\n    }\n    return *this;\n  }\n};\n</code></pre>   **Move** of a unique-pointer: **transfer of ownership**.  - **Move-only type**  ---  ## `std::unique_ptr`  Like `std::vector`, `std::unique_ptr` is also a class template. It is not a type itself.  - `std::unique_ptr` is the complete type name, where `PointeeType` is the type of the object that it points to. - For `T` $\\neq$ `U`, `std::unique_ptr` and `std::unique_ptr` are **two different and independent types**.  Same for `std::shared_ptr`, which we will talk about later.  ---  ## Creating a `std::unique_ptr`: Two common ways  - Pass a pointer created by `new` to the constructor:    ```cpp   std::unique_ptr p(new Student(\"Bob\", 2020123123));   ```    - Here `` can be omitted. The compiler is able to deduce it.  - Use `std::make_unique`, and pass the initializers to it.    ```cpp   std::unique_ptr p1 = std::make_unique(\"Bob\", 2020123123);   auto p2 = std::make_unique(\"Alice\", 2020321321);   ```    - `std::make_unique(args...)` *perfectly forwards* the arguments `args...` to the constructor of `T`, as if the object were created by `new T(args...)`.   - `std::make_unique` returns a `std::unique_ptr` to the created object.  ---  ## Default initialization of a `std::unique_ptr`   <pre><code>std::unique_ptr&lt;T&gt; up;\n</code></pre>   The default constructor of `std::unique_ptr` initializes `up` to be a \"null pointer\".  `up` is in the state that does not own any object.  - This is a defined and deterministic behavior! It is **not** holding some indeterminate value.   - The standard library hates indeterminate values, just as we do.  ---  ## `std::unique_ptr`: Automatic memory management   <pre><code>void foo() {\n  auto pAlice = std::make_unique&lt;Student&gt;(\"Alice\", 2020321321);\n  // Do something...\n  if (some_condition()) {\n    auto pBob = std::make_unique&lt;Studnet&gt;(\"Bob\", 2020123123);\n    // ...\n  } // `Student::~Student()` is called for Bob,\n    // because the lifetime of `pBob` ends.\n} // `Student::~Student()` is called for Alice,\n  // because the lifetime of `pAlice` ends.\n</code></pre>   A `std::unique_ptr` automatically calls the destructor once it gets destroyed or assigned a new value.  - No manual `delete` needed!  ---  ## `std::unique_ptr`: Move-only   <pre><code>auto p = std::make_unique&lt;std::string&gt;(5, 'c');\nstd::cout &lt;&lt; *p &lt;&lt; std::endl;                  // Prints \"ccccc\".\nauto q = p;                                    // Error. Copy is not allowed.\nauto r = std::move(p);                         // Correct.\n// Now the ownership of this string has been transferred to `r`.\nstd::cout &lt;&lt; *r &lt;&lt; std::endl; // Prints \"ccccc\".\nif (!p) // true\n  std::cout &lt;&lt; \"p is \\\"null\\\" now.\" &lt;&lt; std::endl;\n</code></pre>   `std::unique_ptr` is not copyable, but only movable.  - Remember, only one `std::unique_ptr` can point to the managed object. - Move of a `std::unique_ptr` is the transfer of ownership of the managed object.  ---  ## `std::unique_ptr`: Move-only   <pre><code>auto p = std::make_unique&lt;std::string&gt;(5, 'c');\nstd::cout &lt;&lt; *p &lt;&lt; std::endl;                  // Prints \"ccccc\".\nauto q = p;                                    // Error. Copy is not allowed.\nauto r = std::move(p);                         // Correct.\n// Now the ownership of this string has been transferred to `r`.\nstd::cout &lt;&lt; *r &lt;&lt; std::endl; // Prints \"ccccc\".\nif (!p) // true\n  std::cout &lt;&lt; \"p is \\\"null\\\" now.\" &lt;&lt; std::endl;\n</code></pre>   After `auto up2 = std::move(up1);`, `up1` becomes \"null\". The object that `up1` used to manage now belongs to `up2`.  The assignment `up2 = std::move(up1)` destroys the object that `up2` used to manage, and lets `up2` take over the object managed by `up1`. After that, `up1` becomes \"null\".  ---  ## Express your intent precisely.  You may accidentally write the following code:   <pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre>   The compiler gives an error, complaining about the use of deleted copy constructor.  What are you going to do?  A. Change it to `auto p = std::move(pWindow);`. B. Give up on smart pointers, and switch back to raw pointers. C. Copy-and-paste the compiler output and ask ChatGPT.  ---  ## Express your intent precisely.  You may accidentally write the following code:   <pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre>   The compiler gives an error, complaining about the use of deleted copy constructor.  1. Syntactically, a `std::unique_ptr` is not copyable, but you are copying it. **(Direct cause of the error)** 2. Logically, a `std::unique_ptr` must exclusively manage the pointed-to object. Why would you copy a `std::unique_ptr`?    - The **root cause of the error** is related to your intent: What are you going to do with `p`?  ---  ## Express your intent precisely.   <pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre>   What are you going to do with `p`?  - If you want to copy the pointed-to object, change it to `auto p = std::make_unique(*pWindow);`. - If you want `p` to be just an ***observer***, write `auto p = pWindow.get();`.   - `pWindow.get()` returns a **raw pointer** to the object, which is of type `Window *`.   - Be careful! As an observer, `p` should never interfere in the lifetime of the object. A simple `delete p;` will cause disaster.  ---  ## Express your intent precisely.   <pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre>   What are you going to do with `p`?  - If you want `p` to take over the object managed by `pWindow`, change it to `auto p = std::move(pWindow);`.   - Be careful! `pWindow` will no longer own that object. - If you want to `p` to be another smart pointer that ***shares*** the ownership with `pWindow`, `std::unique_ptr` is not suitable here. $\\Rightarrow$ See `std::shared_ptr` later.  ---  ## Returning a `std::unique_ptr`   <pre><code>struct Window {\n  // A typical \"factory\" function.\n  static std::unique_ptr&lt;Window&gt; create(const Settings &amp;settings) {\n    auto pW = std::make_unique&lt;Window&gt;(/* some arguments */);\n    logWindowCreation(pW);\n    // ...\n    return pW;\n  }\n};\nauto state = Window::create(my_settings);\n</code></pre>   A temporary is move-constructed from `pW`, and then is used to move-construct `state`.  - These two moves can be optimized out by NRVO.  ---  ## Other operations on `std::unique_ptr`  `up.reset()`, `up.release()`, `up1.swap(up2)`, `up1 == up2`, etc.  [Full list](https://en.cppreference.com/w/cpp/memory/unique_ptr) of operations supported on a `std::unique_ptr`.  ---  ## `std::unique_ptr` for array type  By default, the destructor of `std::unique_ptr` uses a `delete` expression to destroy the object it holds.  What happens if `std::unique_ptr up(new T[n]);`?  ---  ## `std::unique_ptr` for array type  By default, the destructor of `std::unique_ptr` uses a `delete` expression to destroy the object it holds.  What happens if `std::unique_ptr up(new T[n]);`?  - The memory is obtained using `new[]`, but deallocated by `delete`! **Undefined behavior.**  ---  ## `std::unique_ptr` for array type  A *template specialization*: `std::unique_ptr`.  - Specially designed to represent pointers that point to a \"dynamic array\" of objects. - It has some array-specific operators, e.g. `operator[]`. In contrast, it does not support `operator*` and `operator-&gt;`. - It uses `delete[]` instead of `delete` to destroy the objects.   <pre><code>auto up = std::make_unique&lt;int[]&gt;(n);\nstd::unique_ptr&lt;int[]&gt; up2(new int[n]{}); // equivalent\nfor (auto i = 0; i != n; ++i)\n  std::cout &lt;&lt; up[i] &lt;&lt; ' ';\n</code></pre>   ---  ## ~~`std::unique_ptr` for array type~~  ~~A *template specialization*: `std::unique_ptr`.~~  ~~- Specially designed to represent pointers that point to a \"dynamic array\" of objects.~~ ~~- It has some array-specific operators, e.g. `operator[]`. In contrast, it does not support `operator*` and `operator-&gt;`.~~ ~~- It uses `delete[]` instead of `delete` to destroy the objects.~~  ## Use standard library containers instead!  They almost always do a better job. `std::unique_ptr` is seldom needed.  ---  ## `std::unique_ptr` is zero-overhead.  `std::unique_ptr` stores nothing more than a raw pointer. ${}^{\\textcolor{red}{1}}$  It does nothing more than better copy / move control and automatic object destruction.  **Zero-overhead**: Using a `std::unique_ptr` does not cost more time or space than using raw pointers.  **[Best practice]** Use `std::unique_ptr` for exclusive-ownership resource management.  ---  # `std::shared_ptr`   ---  ## Motivation  A `std::unique_ptr` exclusively owns an object, but sometimes this is not convenient.   <pre><code>struct WindowManager {\n  void addWindow(const std::unique_ptr&lt;Window&gt; &amp;pW) {\n    mWindows.push_back(pW); // Error. Attempts to copy a `std::unique_ptr`.\n  }\nprivate:\n  std::vector&lt;std::unique_ptr&lt;Window&gt;&gt; mWindows;\n};\n\nstruct Window {\n  static std::unique_ptr&lt;Window&gt; create(const Settings &amp;settings) {\n    auto pW = std::make_unique&lt;Window&gt;(/* some arguments */);\n    logWindowCreation(pW);\n    settings.getWindowManager().addWindow(pW);\n    return pW;\n  }\n};\n</code></pre>   ---  ## Motivation  Design a \"shared-pointer\" that allows the object it manages to be ***shared***.  When should the object be destroyed?  - A `std::unique_ptr` destroys the object it manages when the pointer itself is destroyed. - If we allow many shared-pointers to point to the same object, how can we know when to destroy that object?  ---  ## Idea: Reference counting   <pre><code>class WindowPtr {\n  WindowWithCounter *ptr;\npublic:\n  WindowPtr(WindowPtr &amp;&amp;other) noexcept : ptr(other.ptr) { other.ptr = nullptr; }\n  WindowPtr &amp;operator=(WindowPtr &amp;&amp;other) noexcept {\n    if (this != &amp;other) {\n      if (--ptr-&gt;refCount == 0)\n        delete ptr;\n      ptr = other.ptr; other.ptr = nullptr;\n    }\n    return *this;\n  }\n};\n</code></pre>   ---  ## Reference counting  By maintaining a variable that counts how many shared-pointers are pointing to the object, we can know when to destroy the object.  This strategy is adopted by Python.  It can prevent memory leak in many cases, but not all cases! $\\Rightarrow$ See the question in the end of this lecture's slides.  ---  ## `std::shared_ptr`  A smart pointer that uses **reference counting** to manage shared objects.  Create a `shared_ptr`:   <pre><code>std::shared_ptr&lt;Type&gt; sp2(new Type(args));\nauto sp = std::make_shared&lt;Type&gt;(args); // equivalent, but better\n</code></pre>   For example:   <pre><code>// sp points to a string \"cccccccccc\".\nauto sp = std::make_shared&lt;std::string&gt;(10, 'c');\n\nauto pWindow = std::make_shared&lt;Window&gt;(80, 24, my_settings.mode);\n</code></pre>   ---  ## Create a `shared_ptr`  Note: For `std::unique_ptr`, both of the following ways are ok (since C++17):   <pre><code>auto up = std::make_unique&lt;Type&gt;(args);\nstd::unique_ptr&lt;Type&gt; up2(new Type(args));\n</code></pre>   For `std::shared_ptr`, **`std::make_shared` is preferable to directly using `new`**.   <pre><code>auto sp = std::make_shared&lt;Type&gt;(args);    // preferred\nstd::shared_ptr&lt;Type&gt; sp2(new Type(args)); // ok, but less preferred\n</code></pre>   Read *Effective Modern C++* Item 21. (Note that this book is based on C++14.)  **[Best practice]** Prefer `std::make_shared` to directly using `new` when creating a `std::shared_ptr`.  ---  ## Operations  `*` and `-&gt;` can be used as if it is a raw pointer:   <pre><code>auto sp = std::make_shared&lt;std::string&gt;(10, 'c');\nstd::cout &lt;&lt; *sp &lt;&lt; std::endl;        // \"cccccccccc\"\nstd::cout &lt;&lt; sp-&gt;size() &lt;&lt; std::endl; // \"10\"\n</code></pre>   `sp.use_count()`: The value of the reference counter.   <pre><code>auto sp = std::make_shared&lt;std::string&gt;(10, 'c');\n{\n  auto sp2 = sp;\n  std::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl; // 2\n} // `sp2` is destroyed, but the managed object is not destroyed.\nstd::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl;   // 1\n</code></pre>   ---  ## Operations  [Full list of supported operations on `std::shared_ptr`.](https://en.cppreference.com/w/cpp/memory/shared_ptr)  `std::shared_ptr` is relatively easy to use, since you are free to create many `std::shared_ptr`s pointing to one object.  However, `std::shared_ptr` **has time and space overhead**. Copy of a `std::shared_ptr` requires maintenance of reference counter.  ---  ## Summary  `std::unique_ptr`  - Exclusive-ownership. - Move-only. Move is the transfer of ownership. - Zero-overhead.  `std::shared_ptr`  - Shared-ownership. - Uses reference counting.   - Copy increments the reference counter.   - When the counter is decremented to zero, the object is destroyed.  ---  ## Question  Does `std::shared_ptr` prevent memory leak in all cases? Think about what happens in the following code.   <pre><code>struct Node {\n  int value;\n  std::shared_ptr&lt;Node&gt; next;\n  Node(int x, std::shared_ptr&lt;Node&gt; p) : value{x}, next{std::move(p)} {}\n};\nvoid foo() {\n  auto p = std::make_shared&lt;Node&gt;(1, nullptr);\n  p-&gt;next = std::make_shared&lt;Node&gt;(2, p);\n  p.reset();\n}\n/*\n\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u786e\u5b9e\u5b58\u5728\u5185\u5b58\u6cc4\u6f0f\u7684\u95ee\u9898\u3002\u95ee\u9898\u5728\u4e8efoo\u51fd\u6570\u4e2d\u521b\u5efa\u7684std::shared_ptr&lt;Node&gt;\u5bf9\u8c61p\u548cp-&gt;next\u3002\np\u662f\u4e00\u4e2astd::shared_ptr&lt;Node&gt;\uff0c\u5b83\u6307\u5411\u4e00\u4e2aNode\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u7684value\u662f1\uff0c\u5e76\u4e14next\u6307\u9488\u662fnullptr\u3002\n\u7136\u540e\uff0cp-&gt;next\u88ab\u8d4b\u503c\u4e3a\u4e00\u4e2a\u65b0\u7684std::shared_ptr&lt;Node&gt;\uff0c\u8fd9\u4e2a\u65b0\u7684Node\u5bf9\u8c61\u7684value\u662f2\uff0c\u5e76\u4e14\u5b83\u7684next\u6307\u9488\u6307\u5411p\uff08\u5373\u7b2c\u4e00\u4e2a\u8282\u70b9\uff09\u3002\n\u8fd9\u91cc\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684shared_ptr\u5f15\u7528\u8ba1\u6570\u662f1\uff0c\u56e0\u4e3a\u53ea\u6709p\u6307\u5411\u5b83\u3002\n\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684shared_ptr\u5f15\u7528\u8ba1\u6570\u4e5f\u662f1\uff0c\u56e0\u4e3a\u5b83\u662f\u72ec\u7acb\u521b\u5efa\u7684\u3002\n\u5f53\u6267\u884cp.reset()\u65f6\uff0cp\u6240\u6307\u5411\u7684\u8282\u70b9\u7684\u5f15\u7528\u8ba1\u6570\u51cf1\uff0c\u53d8\u4e3a0\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u8282\u70b9\u4f1a\u88ab\u9500\u6bc1\u3002\n\u4f46\u662f\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684shared_ptr\u5f15\u7528\u8ba1\u6570\u8fd8\u662f1\uff0c\u56e0\u4e3a\u5b83\u7684shared_ptr\u662f\u901a\u8fc7p-&gt;next\u95f4\u63a5\u5f15\u7528\u7684\uff0c\u5e76\u6ca1\u6709\u76f4\u63a5\u901a\u8fc7p.reset()\u91ca\u653e\u3002\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u8282\u70b9\u4e0d\u4f1a\u88ab\u9500\u6bc1\uff0c\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\u3002\n*/\n</code></pre>   # CS100 Lecture 19  Operator Overloading  ---  ## Contents  - Basics - Example: `Rational`   - Arithmetic and relational operators   - Increment and decrement operators (`++`, `--`)   - IO operators (`&lt;&lt;`, `&gt;&gt;`) - Example: `Dynarray`   - Subscript operator (`[]`) - Example: `WindowPtr`   - Dereference (indirection) operator (`*`)   - Member access through pointer (`-&gt;`) - User-defined type conversions  ---  ## Basics  Operator overloading: Provide the behaviors of **operators** for class types.  We have already seen some:  - The **copy assignment operator** and the **move assignment operator** are two special overloads for `operator=`. - The IOStream library provides overloaded `operator&lt;&lt;` and `operator&gt;&gt;` to perform input and output. - The string library provides `operator+` for concatenation of strings, and `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, `==`, `!=` for comparison in lexicographical order. - Standard library containers and `std::string` have `operator[]`. - Smart pointers have `operator*` and `operator-&gt;`.  ---  ## Basics  Overloaded operators can be defined in two forms:  - as a member function, in which the leftmost operand is bound to `this`:    - `a[i]` $\\Leftrightarrow$ `a.operator[](i)`   - `a = b` $\\Leftrightarrow$ `a.operator=(b)`   - `*a` $\\Leftrightarrow$ `a.operator*()`   - `f(arg1, arg2, arg3, ...)` $\\Leftrightarrow$ `f.operator()(arg1, arg2, arg3, ...)`  - as a non-member function:    - `a == b` $\\Leftrightarrow$ `operator==(a, b)`   - `a + b` $\\Leftrightarrow$ `operator+(a, b)`  ---  ## Basics  Some operators cannot be overloaded:  `obj.mem`, `::`, `?:`, `obj.*memptr` (not covered in CS100)  Some operators can be overloaded, but are strongly not recommended:  `cond1 &amp;&amp; cond2`, `cond1 || cond2`  - Reason: Since `x &amp;&amp; y` would become `operator&amp;&amp;(x, y)`, there is no way to overload `&amp;&amp;` (or `||`) that preserves the **short-circuit evaluation** property.  ---  ## Basics  - At least one operand should be a class type. Modifying the behavior of operators on built-in types is not allowed.    ```cpp   int operator+(int, int);   // Error.   MyInt operator-(int, int); // Still error.   ```  - Inventing new operators is not allowed.    ```cpp   double operator**(double x, double exp); // Error.   ```  - Overloading does not modify the **associativity**, **precedence** and the **operands' evaluation order**.    ```cpp   std::cout &lt;&lt; a + b; // Equivalent to `std::cout &lt;&lt; (a + b)`.   ```  ---  # Example: `Rational`  ---  ## A class for rational numbers   <pre><code>class Rational {\n  int m_num;        // numerator\n  unsigned m_denom; // denominator\n  void simplify() { // Private, because this is our implementation detail.\n    int gcd = std::gcd(m_num, m_denom); // std::gcd in &lt;numeric&gt; (since C++17)\n    m_num /= gcd; m_denom /= gcd;\n  }\npublic:\n  Rational(int x = 0) : m_num{x}, m_denom{1} {} // Also a default constructor.\n  Rational(int num, unsigned denom) : m_num{num}, m_denom{denom} { simplify(); }\n  double to_double() const {\n    return static_cast&lt;double&gt;(m_num) / m_denom;\n  }\n};\n</code></pre>   We want to have arithmetic operators supported for `Rational`.  ---  ## `Rational`: arithmetic operators  A good way: define `operator+=` and the **unary** `operator-`, and then define other operators in terms of them.   <pre><code>class Rational {\n  friend Rational operator-(const Rational &amp;); // Unary `operator-` as in `-x`.\npublic:\n  Rational &amp;operator+=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom) // Be careful with `unsigned`!\n            + static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this; // `x += y` should return a reference to `x`.\n  }\n};\nRational operator-(const Rational &amp;x) {\n  return {-x.m_num, x.m_denom};\n  // The above is equivalent to `return Rational(-x.m_num, x.m_denom);`.\n}\n</code></pre>   ---  ## `Rational`: arithmetic operators  Define the arithmetic operators in terms of the compound assignment operators.   <pre><code>class Rational {\npublic:\n  Rational &amp;operator-=(const Rational &amp;rhs) {\n    // Makes use of `operator+=` and the unary `operator-`.\n    return *this += -rhs;\n  }\n};\nRational operator+(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return Rational(lhs) += rhs; // Makes use of `operator+=`.\n}\nRational operator-(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return Rational(lhs) -= rhs; // Makes use of `operator-=`.\n}\n</code></pre>   ---  ## **[Best practice]** Avoid repetition. <pre><code>class Rational {\npublic:\n  Rational &amp;operator+=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom)\n           + static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this;\n  }\n};\n</code></pre>   The arithmetic operators for `Rational` are simple yet requires carefulness.  - Integers with different signed-ness need careful treatment. - Remember to `simplify()`.  Fortunately, we only need to pay attention to these things in `operator+=`. Everything will be right if `operator+=` is right.  ---  ## **[Best practice]** Avoid repetition.  The code would be very error-prone if you implement every function from scratch!    <pre><code>class Rational {\npublic:\n  Rational &amp;operator+=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom)\n           + static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this;\n  }\n  Rational &amp;operator-=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom)\n           - static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this;\n  }\n  friend Rational operator+(const Rational &amp;,\n                            const Rational &amp;);\n  friend Rational operator-(const Rational &amp;,\n                            const Rational &amp;);\n};\n</code></pre> <pre><code>Rational operator+(const Rational &amp;lhs,\n                   const Rational &amp;rhs) {\n  return {\n    lhs.m_num * static_cast&lt;int&gt;(rhs.m_denom)\n        + static_cast&lt;int&gt;(lhs.m_denom) * rhs.lhs,\n    lhs.m_denom * rhs.m_denom\n  };\n}\nRational operator-(const Rational &amp;lhs,\n                   const Rational &amp;rhs) {\n  return {\n    lhs.m_num * static_cast&lt;int&gt;(rhs.m_denom)\n        - static_cast&lt;int&gt;(lhs.m_denom) * rhs.lhs,\n    lhs.m_denom * rhs.m_denom\n  };\n}\n</code></pre>   ---  ## `Rational`: arithmetic operators  Exercise: Define `operator*` (multiplication) and `operator/` (division) as well as `operator*=` and `operator/=` for `Rational`.  ---  ## `Rational`: arithmetic and relational operators  What if we define them (say, `operator+`) as member functions?   <pre><code>class Rational {\npublic:\n  Rational(int x = 0) : m_num{x}, m_denom{1} {}\n  Rational operator+(const Rational &amp;rhs) const {\n    return {\n      m_num * static_cast&lt;int&gt;(rhs.m_denom)\n          + static_cast&lt;int&gt;(m_denom) * rhs.m_num,\n      m_denom * rhs.m_denom\n    };\n  }\n};\n</code></pre>   ---  ## `Rational`: arithmetic and relational operators  What if we define them (say, `operator+`) as member functions?   <pre><code>class Rational {\npublic:\n  Rational(int x = 0) : m_num{x}, m_denom{1} {}\n  Rational operator+(const Rational &amp;rhs) const {\n    // ...\n  }\n};\n</code></pre> <pre><code>Rational r = some_value();\nauto s = r + 0; // OK, `r.operator+(0)`, effectively `r.operator+(Rational(0))`\nauto t = 0 + r; // Error! `0.operator+(r)` ???\n</code></pre>   ---  ## `Rational`: arithmetic and relational operators  To allow implicit conversions on both sides, the operator should be defined as **non-member functions**.   <pre><code>Rational r = some_value();\nauto s = r + 0; // OK, `operator+(r, 0)`, effectively `operator+(r, Rational(0))`\nauto t = 0 + r; // OK, `operator+(0, r)`, effectively `operator+(Rational(0), r)`\n</code></pre>   **[Best practice]** The \"symmetric\" operators, whose operands are often exchangeable, often should be defined as non-member functions.  ---  ## `Rational`: relational operators  Define `&lt;` and `==`, and define others in terms of them. (Before C++20)  - Since C++20: Define `==` and `&lt;=&gt;`, and the compiler will generate others.  A possible way: Use `to_double` and compare the floating-point values.   <pre><code>bool operator&lt;(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return lhs.to_double() &lt; rhs.to_double();\n}\n</code></pre>   - This does not require `operator&lt;` to be a `friend`. - However, this is subject to floating-point errors.  ---  ## `Rational`: ralational operators  Another way (possibly better):   <pre><code>class Rational {\n  friend bool operator&lt;(const Rational &amp;, const Rational &amp;);\n  friend bool operator==(const Rational &amp;, const Rational &amp;);\n};\nbool operator&lt;(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return static_cast&lt;int&gt;(rhs.m_denom) * lhs.m_num\n        &lt; static_cast&lt;int&gt;(lhs.m_denom) * rhs.m_num;\n}\nbool operator==(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return lhs.m_num == rhs.m_num &amp;&amp; lhs.m_denom == rhs.m_denom;\n}\n</code></pre>   If there are member functions to obtain the numerator and the denominator, these functions don't need to be `friend`.  ---  ## `Rational`: relational operators  **[Best practice]** Avoid repetition.  Define others in terms of `&lt;` and `==`:   <pre><code>bool operator&gt;(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return rhs &lt; lhs;\n}\nbool operator&lt;=(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return !(lhs &gt; rhs);\n}\nbool operator&gt;=(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return !(lhs &lt; rhs);\n}\nbool operator!=(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return !(lhs == rhs);\n}\n</code></pre>   ---  ## Relational operators  Define relational operators in a consistent way:  - `a != b` should mean `!(a == b)` - `!(a &lt; b)` and `!(a &gt; b)` should imply `a == b`  C++20 has devoted some efforts to the design of **consistent comparison**: [P0515r3](https://open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0515r3.pdf).  ---  ## Relational operators  Avoid abuse of relational operators:   <pre><code>struct Point2d { double x, y; };\nbool operator&lt;(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x; // Is this the unique, best behavior?\n}\n// Much better design: Use a named function.\nbool less_in_x(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x;\n}\n</code></pre>   **[Best practice]** Operators should be used for operations that are likely to be unambiguous to users.  - If an operator has plausibly more than one interpretation, use named functions instead. Function names can convey more information.  **`std::string` has `operator+` for concatenation. Why doesn't `std::vector` have one?**  ---  ## `++` and `--`  `++` and `--` are often defined as **members**, because they modify the object.  To differentiate the postfix version `x++` and the prefix version `++x`: **The postfix version has a parameter of type `int`.**  - The compiler will translate `++x` to `x.operator++()`, `x++` to `x.operator++(0)`.   <pre><code>class Rational {\npublic:\n  Rational &amp;operator++() { ++m_num; simplify(); return *this; }\n  Rational operator++(int) { // This `int` parameter is not used.\n    // The postfix version is almost always defined like this.\n    auto tmp = *this;\n    ++*this; // Makes use of the prefix version.\n    return tmp;\n  }\n};\n</code></pre>   ---  ## `++` and `--`   <pre><code>class Rational {\npublic:\n  Rational &amp;operator++() { ++m_num; simplify(); return *this; }\n  Rational operator++(int) { // This `int` parameter is not used.\n    // The postfix version is almost always defined like this.\n    auto tmp = *this;\n    ++*this; // Make use of the prefix version.\n    return tmp;\n  }\n};\n</code></pre>   The prefix version returns reference to `*this`, while the postfix version returns a copy of `*this` before incrementation.  - Same as the built-in behaviors.  ---  ## IO operators  Implement `std::cin &gt;&gt; r` and `std::cout &lt;&lt; r`.  Input operator:   <pre><code>std::istream &amp;operator&gt;&gt;(std::istream &amp;, Rational &amp;);\n</code></pre>   Output operator:   <pre><code>std::ostream &amp;operator&lt;&lt;(std::ostream &amp;, const Rational &amp;);\n</code></pre>   - `std::cin` is of type `std::istream`, and `std::cout` is of type `std::ostream`.  - The left-hand side operand should be returned, so that we can write    ```cpp   std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; std::cout &lt;&lt; a &lt;&lt; b &lt;&lt; c;   ```  ---  ## `Rational`: output operator   <pre><code>class Rational {\n  friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;, const Rational &amp;);\n};\nstd::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Rational &amp;r) {\n  return os &lt;&lt; r.m_num &lt;&lt; '/' &lt;&lt; r.m_denom;\n}\n</code></pre>   If there are member functions to obtain the numerator and the denominator, it don't have to be a `friend`.   <pre><code>std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Rational &amp;r) {\n  return os &lt;&lt; r.get_numerator() &lt;&lt; '/' &lt;&lt; r.get_denominator();\n}\n</code></pre>   ---  ## `Rational`: input operator  Suppose the input format is `a b` for the rational number $\\dfrac ab$, where `a` and `b` are integers.   <pre><code>std::istream &amp;operator&gt;&gt;(std::istream &amp;is, Rational &amp;r) {\n  int x, y; is &gt;&gt; x &gt;&gt; y;\n  if (!is) { // Pay attention to input failures!\n    x = 0;\n    y = 1;\n  }\n  if (y &lt; 0) { y = -y; x = -x; }\n  r = Rational(x, y);\n  return is;\n}\n</code></pre>   ---  # Example: `Dynarray`  ---  ## `operator[]`   <pre><code>class Dynarray {\npublic:\n  int &amp;operator[](std::size_t n) {\n    return m_storage[n];\n  }\n  const int &amp;operator[](std::size_t n) const {\n    return m_storage[n];\n  }\n};\n</code></pre>   The use of `a[i]` is interpreted as `a.operator[](i)`.  [(C++23 allows `a[i, j, k]`!)](https://en.cppreference.com/w/cpp/language/operator_member_access#Built-in_subscript_operator)  Homework: Define `operator[]` and relational operators for `Dynarray`.  ---  # Example: `WindowPtr`  ---  ## `WindowPtr`: indirection (dereference) operator  Recall the `WindowPtr` class we defined in the previous lecture.   <pre><code>struct WindowWithCounter {\n  Window theWindow;\n  int refCount = 1;\n};\nclass WindowPtr {\n  WindowWithCounter *m_ptr;\npublic:\n  Window &amp;operator*() const { // Why should it be const?\n    return m_ptr-&gt;theWindow;\n  }\n};\n</code></pre>   We want `*sp` to return reference to the managed object.  ---  ## `WindowPtr`: indirection (derefernce) operator  Why should `operator*` be `const`?   <pre><code>class WindowPtr {\n  WindowWithCounter *m_ptr;\npublic:\n  Window &amp;operator*() const {\n    return m_ptr-&gt;theWindow;\n  }\n};\n</code></pre>   On a `const WindowPtr` (\"top-level\" `const`), obtaining a non-`const` reference to the managed object may still be allowed.  - The (smart) pointer is `const`, but the managed object is not. - `this` is `const WindowPtr *`, so `m_ptr` is `WindowWithCounter *const`.  ---  ## `WindowPtr`: member access through pointer  To make `operator-&gt;` consistent with `operator*` (make `ptr-&gt;mem` equivalent to `(*ptr).mem`), `operator-&gt;` is almost always defined like this:   <pre><code>class WindowPtr {\npublic:\n  Window *operator-&gt;() const {\n    return std::addressof(operator*());\n  }\n};\n</code></pre>   `std::addressof(x)` is almost always equivalent to `&amp;x`, but the latter may not return the address of `x` if `operator&amp;` for `x` has been overloaded!  ---  # User-defined type conversions  ---  ## Type conversions  A **type conversion** is a function $f:T\\mapsto U$ for two different types $T$ and $U$.  Type conversions can happen either **implicitly** or **explicitly**. A conversion is **explicit** if and only if the target type `U` is written explicitly in the conversion expression.  Explicit conversions can happen in one of the following forms:   | expression           | explanation                   | example                          | | -------------------- | ----------------------------- | -------------------------------- | | `what_cast(expr)` | through named casts           | `static_cast(3.14)`         | | `U(expr)`            | looks like a constructor call | `std::string(\"xx\")`, `int(3.14)` | | `(U)expr`            | old C-style conversion        | Not recommended. Don't use it.   |  ---  ## Type conversions  A **type conversion** is a function $f:T\\mapsto U$ for two different types $T$ and $U$.  Type conversions can happen either **implicitly** or **explicitly**. A conversion is **explicit** if and only if the target type `U` is written explicitly in the conversion expression.  - Arithmetic conversions are often allowed to happen implicitly:    ```cpp   int sum = /* ... */, n = /* ... */;   auto average = 1.0 * sum / n; // `sum` and `n` are converted to `double`,                                 // so `average` has type `double`.   ```  - The dangerous conversions for built-in types must be explicit:    ```cpp   const int *cip = something();   auto ip = const_cast(cip);       // int *   auto cp = reinterpret_cast(ip); // char *   ```  ---  ## Type conversions  A **type conversion** is a function $f:T\\mapsto U$ for two different types $T$ and $U$.  Type conversions can happen either **implicitly** or **explicitly**. A conversion is **explicit** if and only if the target type `U` is written explicitly in the conversion expression.  - This is also a type conversion, isn't it?    ```cpp   std::string s = \"hello\"; // from `const char [6]` to `std::string`   ```  - This is also a type conversion, isn't it?    ```cpp   std::size_t n = 1000;   std::vector v(n); // from `std::size_t` to `std::vector`   ```  How do these type conversions happen? Are they implicit or explicit?  ---  ## Type conversions  We can define a type conversion for our class `X` in one of the following ways:  1. A constructor with exactly one parameter of type `T` is a conversion from `T` to `X`.     - Example: `std::string` has a constructor accepting a `const char *`. `std::vector` has a constructor accepting a `std::size_t`.  2. A **type conversion operator**: a conversion from `X` to some other type.     ```cpp    class Rational {    public:      // conversion from `Rational` to `double`.      operator double() const { return 1.0 * m_num / m_denom; }    };    Rational r(3, 4);    double dval = r;  // 0.75    ```  ---  ## Type conversion operator  A type conversion operator is a member function of class `X`, which defines the type conversion from `X` to some other type `T`.   <pre><code>class Rational {\npublic:\n  // conversion from `Rational` to `double`.\n  operator double() const { return 1.0 * m_num / m_denom; }\n};\nRational r(3, 4);\ndouble dval = r;  // 0.75\n</code></pre>   - The name of the function is `operator T`. - The return type is `T`, which is not written before the name. - A type conversion is usually a **read-only** operation, so it is usually `const`.  ---  ## Explicit type conversion  Some conversions should be allowed to happen implicitly:   <pre><code>void foo(const std::string &amp;str) { /* ... */ }\nfoo(\"hello\"); // implicit conversion from `const char [6]` to `const char *`,\n              // and then to `std::string`.\n</code></pre>   Some should never happen implicitly!   <pre><code>void bar(const std::vector&lt;int&gt; &amp;vec) { /* ...*/ }\nbar(1000);                  // ??? Too weird!\nbar(std::vector&lt;int&gt;(1000)) // OK.\nstd::vector&lt;int&gt; v1(1000);  // OK.\nstd::vector&lt;int&gt; v2 = 1000; // No! This should never happen. Too weird!\n</code></pre>   ---  ## Explicit type conversion  To disallow the implicit use of a constructor as a type conversion, write `explicit` before the return type:   <pre><code>class string { // Suppose this is the `std::string` class.\npublic:\n  string(const char *cstr); // Not marked `explicit`. Implicit use is allowed.\n};\n\ntemplate &lt;typename T&gt; class vector { // Suppose this is the `std::vector` class.\npublic:\n  explicit vector(std::size_t n); // Implicit use is not allowed.\n};\n\nclass Dynarray {\npublic:\n  explicit Dynarray(std::size_t n) : m_length{n}, m_storage{new int[n]{}} {}\n};\n</code></pre>   ---  ## Explicit type conversion  To disallow the implicit use of a type conversion operator, also write `explicit`:   <pre><code>class Rational {\npublic:\n  explicit operator double() const { return 1.0 * m_num / m_denom; }\n};\nRational r(3, 4);\ndouble d = r;                     // Error.\nvoid foo(double x) { /* ... */ }\nfoo(r);                           // Error.\nfoo(double(r));                   // OK.\nfoo(static_cast&lt;double&gt;(r));      // OK.\n</code></pre>   ---  ## **[Best practice]** Avoid the abuse of type conversion operators.  Type conversion operators can lead to unexpected results!   <pre><code>class Rational {\npublic:\n  operator double() const { return 1.0 * m_num / m_denom; }\n  operator std::string() const {\n    return std::to_string(m_num) + \" / \" + std::to_string(m_denom);\n  }\n};\nint main() {\n  Rational r(3, 4);\n  std::cout &lt;&lt; r &lt;&lt; '\\n'; // Ooops! Is it `0.75` or `3 / 4`?\n}\n</code></pre>   In the code above, either **mark the type conversions as `explicit`**, or remove them and **define named functions** like `to_double()` and `to_string()` instead.  ---  ## Contextual conversion to `bool`  A special rule for conversion to `bool`.  Suppose `expr` is an expression of a class type `X`, and suppose `X` has an `explicit` type conversion operator to `bool`. In the following contexts, that conversion is applicable even if it is not written as `bool(expr)` or `static_cast(expr)`:  - `if (expr)`, `while (expr)`, `for (...; expr; ...)`, `do ... while (expr)` - as the operand of `!`, `&amp;&amp;`, `||` - as the first operand of `?:`: `expr ? something : something_else`  ---  ## Contextual conversion to `bool`  Exercise: We often test whether a pointer is non-null like this:   <pre><code>if (ptr) {\n  // ...\n}\nauto val = ptr ? ptr-&gt;some_value : 0;\n</code></pre>   Define a conversion from `WindowPtr` to `bool`, so that we can test whether a `WindowPtr` is non-null in the same way.  - Should this conversion be allowed to happen implicitly? If not, mark it `explicit`.  ---  ## Summary  Operator overloading  - As a non-member function: `@a` $\\Leftrightarrow$ `operator@(a)`,  `a @ b` $\\Leftrightarrow$ `operator@(a, b)` - As a member function: `@a` $\\Leftrightarrow$ `a.operator@()`, `a @ b` $\\Leftrightarrow$ `a.operator@(b)`   - The postfix `++` and `--` are special: They have a special `int` parameter to make them different from the prefix ones.   - The arrow operator `-&gt;` is special: Although it looks like a binary operator in `ptr-&gt;mem`, it is unary and involves special rules.     - You don't need to understand the exact rules for `-&gt;`. - Avoid repetition. - Avoid abuse of operator overloading.  ---  ## Summary  Type conversions  - Implicit vs explicit - User-defined type conversions: either through a constructor or through a type conversion operator. - To disable the implicit use of the user-defined type conversion: `explicit` - Avoid abuse of type conversion operators. - Conversion to `bool` has some special rules (*contextual conversion*).  # CS100 Lecture 20  Iterators and Algorithms  ---  ## Contents  - Iterators - Algorithms  ---  ## Iterators  A generalized \"pointer\" used for accessing elements in different containers.  Every container has its iterator, whose type is `Container::iterator`.  e.g. `std::vector::iterator`, `std::forward_list::iterator`  - `auto` comes to our rescue!  ---  ## Iterators  For any container object `c`,  - `c.begin()` returns the iterator to the first element of `c`. - `c.end()` returns the iterator to **the position following the last element** of `c` (\"off-the-end\", \"past-the-end\").     ---  ## Iterators  A pair of iterators (`b`, `e`) is often used to indicate a range `[b, e)`.  Such ranges are **left-inclusive**. Benefits:  - `e - b` is the **length** (**size**) of the range, i.e. the number of elements. There is no extra `+1` or `-1` in this expression. - If `b == e`, the range is empty. In other words, to check whether the range is empty, we only need to do an equality test, which is easily supported by all kinds of iterators.  ---  ## Iterators  Basic operations, supported by almost all kinds of iterators:  - `*it`: returns a reference to the element that `it` refers to. - `it-&gt;mem`: equivalent to `(*it).mem`. - `++it`, `it++`: moves `it` one step forward, so that `it` refers to the \"next\" element.   - `++it` returns a reference to `it`, while `it++` returns a copy of `it` before incrementation. - `it1 == it2`: checks whether `it1` and `it2` refer to the same position in the container. - `it1 != it2`: equivalent to `!(it1 == it2)`.  These are supported by the iterators of all sequence containers, as well as `std::string`.  ---  ## Iterators  Use the basic operations to traverse a sequence container:   <pre><code>void swapcase(std::string &amp;str) {\n  for (auto it = str.begin(); it != str.end(); ++it) {\n    if (std::islower(*it))\n      *it = std::toupper(*it);\n    else if (std::isupper(*it))\n      *it = std::tolower(*it);\n  }\n}\nvoid print(const std::vector&lt;int&gt; &amp;vec) {\n  for (auto it = vec.begin(); it != vec.end(); ++it)\n    std::cout &lt;&lt; *it &lt;&lt; ' ';\n}\n</code></pre>   ---  ## Iterators  **Built-in pointers are also iterators**: They are the iterator for built-in arrays.  For an array `Type a[N]`:  - The \"begin\" iterator is `a`. - The \"end\" (off-the-end) iterator is `a + N`.  The standard library functions `std::begin(c)` and `std::end(c)` (defined in `` and many other header files):  - return `c.begin()` and `c.end()` if `c` is a container; - return `c` and `c + N` if `c` is an array of length `N`.  ---  ## Range-for demystified  The range-based for loop   <pre><code>for (@declaration : container)\n  @loop_body\n</code></pre>   is equivalent to    <pre><code>{\n  auto b = std::begin(container);\n  auto e = std::end(container);\n  for (; b != e; ++b) {\n    @declaration = *b;\n    @loop_body\n  }\n}\n</code></pre>   ---  ## Iterators: dereferenceable  Like pointers, an iterator can be dereferenced (`*it`) only when it refers to an existing element. (**\"dereferenceable\"**)  - `*v.end()` is undefined behavior. - `++it` is undefined behavior if `it` is not dereferenceable. In other words, moving an iterator out of the range `[begin, off_the_end]` is undefined behavior.  ---  ## Iterators: invalidation   <pre><code>Type *storage = new Type[n];\nType *iter = storage;\ndelete[] storage;\n// Now `iter` does not refer to any existing element.\n</code></pre>   Some operations on some containers will **invalidate** some iterators:  - make these iterators not refer to any existing element.  For example:  - `push_back(x)` on a `std::vector` may cause the reallocation of storage. All iterators obtained previously are invalidated. - `pop_back()` on a `std::vector` will invalidate the iterators that points to the deleted element.  ---  ## Never use invalidated iterators or references!   <pre><code>void foo(std::vector&lt;int&gt; &amp;vec) {\n  auto it = vec.begin();\n  while (some_condition(vec))\n    vec.push_back(*it++); // Undefined behavior.\n}\n</code></pre>   After several calls to `push_back`, `vec` may reallocate a larger chunk of memory to store its elements. This will invalidate all pointers, references and iterators that point to somewhere in the previous memory block.  ---  ## More operations on iterators  The iterators of containers that support `*it`, `it-&gt;mem`, `++it`, `it++`, `it1 == it2` and `it1 != it2` are [**ForwardIterators**](https://en.cppreference.com/w/cpp/named_req/ForwardIterator).  [**BidirectionalIterator**](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator): a ForwardIterator that can be moved in both directions  - supports `--it` and `it--`.  [**RandomAccessIterator**](https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator): a BidirectionalIterator that can be moved to any position in constant time.  - supports `it + n`, `n + it`, `it - n`, `it += n`, `it -= n` for an integer `n`. - supports `it[n]`, equivalent to `*(it + n)`. - supports `it1 - it2`, returns the **distance** of two iterators. - supports `&lt;`, `&lt;=`, `&gt;`, `&gt;=`.  ---  ## More operations on iterators  The iterators of containers that support `*it`, `it-&gt;mem`, `++it`, `it++`, `it1 == it2` and `it1 != it2` are [**ForwardIterators**](https://en.cppreference.com/w/cpp/named_req/ForwardIterator).  [**BidirectionalIterator**](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator): a ForwardIterator that can be moved in both directions  - supports `--it` and `it--`.  [**RandomAccessIterator**](https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator): a BidirectionalIterator that can be moved to any position in constant time.  - supports `it + n`, `n + it`, `it - n`, `it += n`, `it -= n`, `it[n]`, `it1 - it2`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`. - `std::string::iterator` and `std::vector::iterator` are in this category.  Which category is the built-in pointer in?  ---  ## More operations on iterators  The iterators of containers that support `*it`, `it-&gt;mem`, `++it`, `it++`, `it1 == it2` and `it1 != it2` are [**ForwardIterators**](https://en.cppreference.com/w/cpp/named_req/ForwardIterator).  [**BidirectionalIterator**](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator): a ForwardIterator that can be moved in both directions  - supports `--it` and `it--`.  [**RandomAccessIterator**](https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator): a BidirectionalIterator that can be moved to any position in constant time.  - supports `it + n`, `n + it`, `it - n`, `it += n`, `it -= n`, `it[n]`, `it1 - it2`, `&lt;`, `&lt;=`, `&gt;`, `&gt;=`. - `std::string::iterator` and `std::vector::iterator` are in this category.  Which category is the built-in pointer in? - RandomAccessIterator.  ---  ## Initialization from iterator range  `std::string`, `std::vector`, as well as other standard library containers, support the initialization from an iterator range:   <pre><code>std::vector&lt;char&gt; v = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'};\nstd::vector v2(v.begin() + 2, v.end() - 3);  // {'c', 'd', 'e', 'f'}\nstd::string s(v.begin(), v.end()); // \"abcdefghi\"\n</code></pre>   ---  # Algorithms  ---  ## Algorithms  Full list of standard library algorithms can be found [here](https://en.cppreference.com/w/cpp/algorithm).  No one can remember all of them, but some are quite commonly used.  ---  ## Algorithms: interfaces  **Parameters**: The STL algorithms accept pairs of iterators to represent \"ranges\":   <pre><code>int a[N], b[N]; std::vector&lt;int&gt; v;\nstd::sort(a, a + N);\nstd::sort(v.begin(), v.end());\nstd::copy(a, a + N, b); // copies elements in [a, a+N) to [b, b+N)\nstd::sort(v.begin(), v.begin() + 10); // Only the first 10 elements are sorted.\n</code></pre>   Since C++20, `std::ranges::xxx` can be used, which has more modern interfaces   <pre><code>std::ranges::sort(a);\nstd::ranges::copy(a, b);\n</code></pre>   ---  ## Algorithms: interfaces  **Parameters**: The algorithms suffixed `_n` use **a beginning iterator `begin` and an integer `n` to represent a range `[begin, begin + n)`**.  Example: Use STL algorithms to rewrite the constructors of `Dynarray`:   <pre><code>Dynarray::Dynarray(const int *begin, const int *end)\n    : m_storage{new int[end - begin]}, m_length(end - begin) {\n  std::copy(begin, end, m_storage);\n}\nDynarray::Dynarray(const Dynarray &amp;other)\n    : m_storage{new int[other.size()]}, m_length{other.size()} {\n  std::copy_n(other.m_storage, other.size(), m_storage);\n}\nDynarray::Dynarray(std::size_t n, int x = 0)\n    : m_storage{new int[n]}, m_length{n} {\n  std::fill_n(m_storage, m_length, x);\n}\n</code></pre>   ---  ## Algorithms: interfaces  **Return values**: \"Position\" is typically represented by an iterator. For example:   <pre><code>std::vector&lt;int&gt; v = someValues();\nauto pos = std::find(v.begin(), v.end(), 42);\nassert(*pos == 42);\nauto maxPos = std::max_element(v.begin(), v.end());\n</code></pre>   - `pos` is an **iterator** pointing to the first occurrence of `42` in `v`. - `maxPos` is an **iterator** pointing to the max element in `v`.  \"Not found\" / \"No such element\" is often indicated by returning `end`.   <pre><code>if (std::find(v.begin(), v.end(), something) != v.end()) {\n  // ...\n}\n</code></pre>   ---  ## `if`: new syntax in C++17  \"Not found\" / \"No such element\" is often indicated by returning `end`.   <pre><code>if (std::find(v.begin(), v.end(), something) != v.end()) { /* (*) */ }\n</code></pre>   If we want to use the returned iterator in (*):   <pre><code>if (auto pos = std::find(v.begin(), v.end(), something); pos != v.end())\n  std::cout &lt;&lt; *pos &lt;&lt; '\\n';\n</code></pre>   The new syntax of `if` in C++17: `if (init_expr; condition)`.  - `init_expr` is just like the first part of the `for` statement. - The scope of the variable declared in `init_expr` is within this `if` statement (containing the `else` clause, if present).  ---  ## Algorithms: requirements  An algorithm may have **requirements** on  - the iterator categories of the passed-in iterators, and - the type of elements that the iterators point to.  Typically, `std::sort` requires *RandomAccessIterator*s, while `std::copy` allows any *InputIterator*s.  Typically, all algorithms that need to compare elements rely only upon `operator&lt;` and `operator==` of the elements.  - You don't have to define all the six comparison operators of `X` in order to `sort` a `vector`. `sort` only requires `operator&lt;`.  ---  ## Algorithms  Since we pass **iterators** instead of **containers** to algorithms, **the standard library algorithms never modify the length of the containers**.  - STL algorithms never insert or delete elements in the containers (unless the iterator passed to them is some special *iterator adapter*).  For example: `std::copy` only **copies** elements, instead of inserting elements.   <pre><code>std::vector&lt;int&gt; a = someValues();\nstd::vector&lt;int&gt; b(a.size());\nstd::vector&lt;int&gt; c{};\nstd::copy(a.begin(), a.end(), b.begin()); // OK\nstd::copy(a.begin(), a.end(), c.begin()); // Undefined behavior!\n</code></pre>   ---  ## Some common algorithms (``)  Non-modifying sequence operations:  - `count(begin, end, x)`, `find(begin, end, x)`, `find_end(begin, end, x)`, `find_first_of(begin, end, x)`, `search(begin, end, pattern_begin, pattern_end)`  Modifying sequence operations:  - `copy(begin, end, dest)`, `fill(begin, end, x)`, `reverse(begin, end)`, ... - `unique(begin, end)`: drop duplicate elements.   - requires the elements in the range `[begin, end)` to be **sorted** (in ascending order by default).   - **It does not remove any elements!** Instead, it moves all the duplicated elements to the end of the sequence, and returns an iterator `pos`, so that `[begin, pos)` has no duplicate elements.  ---  ## Some common algorithms (``)  Example: `unique`   <pre><code>std::vector v{1, 1, 2, 2, 2, 3, 5};\nauto pos = std::unique(v.begin(), v.end());\n// Now [v.begin(), pos) contains {1, 2, 3, 5}.\n// [pos, v.end()) has the values {1, 2, 2}, but the exact order is not known.\nv.erase(pos, v.end()); // Typical use with the container's `erase` operation\n// Now v becomes {1, 2, 3, 5}.\n</code></pre>   `unique` does not remove the duplicate elements! To remove them, use the container's `erase` operation.  ---  ## Some common algorithms (``)  Partitioning, sorting and merging algorithms:  - `partition`, `is_partitioned`, `stable_partition` - `sort`, `is_sorted`, `stable_sort` - `nth_element` - `merge`, `inplace_merge`  Binary search on sorted ranges:  - `lower_bound`, `upper_bound`, `binary_search`, `equal_range`  Heap algorithms:  - `is_heap`, `make_heap`, `push_heap`, `pop_heap`, `sort_heap`  Learn the underlying algorithms and data structures of these functions in CS101!  ---  ## Some common algorithms  Min/Max and comparison algorithms: (``)  - `min_element(begin, end)`, `max_element(begin, end)`, `minmax_element(begin, end)` - `equal(begin1, end1, begin2)`, `equal(begin1, end1, begin2, end2)` - `lexicographical_compare(begin1, end1, begin2, end2)`  Numeric operations: (``)  - `accumulate(begin, end, initValue)`: Sum of elements in `[begin, end)`, with initial value `initValue`.   - `accumulate(v.begin(), v.end(), 0)` returns the sum of elements in `v`. - `inner_product(begin1, end1, begin2, initValue)`: Inner product of two vectors $\\mathbf{a}^T\\mathbf{b}$, added with the initial value `initValue`.  ---  ## Predicates  Consider the `Point2d` class:   <pre><code>struct Point2d {\n  double x, y;\n};\nstd::vector&lt;Point2d&gt; points = someValues();\n</code></pre>   Suppose we want to sort `points` in ascending order of the `x` coordinate.  - `std::sort` requires `operator&lt;` in order to compare the elements, - but it is not recommended to overload `operator&lt;` here! (What if we want to sort some `Point2d`s in another way?)  (C++20 modern way: `std::ranges::sort(points, {}, &amp;Point2d::x);`)  ---  ## Predicates  `std::sort` has another version that accepts another argument `cmp`:   <pre><code>bool cmp_by_x(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x;\n}\nstd::sort(points.begin(), points.end(), cmp_by_x);\n</code></pre>   `sort(begin, end, cmp)`  - `cmp` is a **Callable** object. When called, it accepts two arguments whose type is the same as the element type, and returns `bool`. - `std::sort` will use `cmp(x, y)` instead of `x &lt; y` to compare elements. - After sorting, `cmp(v[i], v[i + 1])` is true for every `i` $\\in$ `[0, v.size()-1)`.  ---  ## Predicates  To sort numbers in reverse (descending) order:   <pre><code>bool greater_than(int a, int b) { return a &gt; b; }\nstd::sort(v.begin(), v.end(), greater_than);\n</code></pre>   To sort them in ascending order of absolute values:   <pre><code>bool abs_less(int a, int b) { return std::abs(a) &lt; std::abs(b); } // &lt;cmath&gt;\nstd::sort(v.begin(), v.end(), abs_less);\n</code></pre>   ---  ## Predicates  Many algorithms accept a Callable object. For example, `find_if(begin, end, pred)` finds the first element in `[begin, end)` such that `pred(element)` is true.   <pre><code>bool less_than_10(int x) {\n  return x &lt; 10;\n}\nstd::vector&lt;int&gt; v = someValues();\nauto pos = std::find_if(v.begin(), v.end(), less_than_10);\n</code></pre>   `for_each(begin, end, operation)` performs `operation(element)` for each element in the range `[begin, end)`.   <pre><code>void print_int(int x) { std::cout &lt;&lt; x &lt;&lt; ' '; }\nstd::for_each(v.begin(), v.end(), print_int);\n</code></pre>   ---  ## Predicates  Many algorithms accept a Callable object. For example, `find_if(begin, end, pred)` finds the first element in `[begin, end)` such that `pred(element)` is true.  What if we want to find the first element less than **`k`**, where `k` is determined at run-time?  ---  ## Predicates  What if we want to find the first element less than **`k`**, where `k` is determined at run-time?   <pre><code>struct LessThan {\n  int k_;\n  LessThan(int k) : k_{k} {}\n  bool operator()(int x) const {\n    return x &lt; k_;\n  }\n};\nauto pos = std::find_if(v.begin(), v.end(), LessThan(k));\n</code></pre>   - `LessThan(k)` constructs an object of type `LessThan`, with the member `k_` initialized to `k`. - This object has an `operator()` overloaded: **the function-call operator**.   - `LessThan(k)(x)` is equivalent to `LessThan(k).operator()(x)`, which is `x &lt; k`.  ---  ## Function objects  Modern way:   <pre><code>struct LessThan {\n  int k_; // No constructor is needed, and k_ is public.\n  bool operator()(int x) const { return x &lt; k_; }\n};\nauto pos = std::find_if(v.begin(), v.end(), LessThan{k}); // {} instead of ()\n</code></pre>   A **function object** (aka \"functor\") is an object `fo` with `operator()` overloaded.  - `fo(arg1, arg2, ...)` is equivalent to `fo.operator()(arg1, arg2, ...)`. Any number of arguments is allowed.  ---  ## Function objects  Exercise: use a function object to compare integers by their absolute values.   <pre><code>struct AbsCmp {\n  bool operator()(int a, int b) const {\n    return std::abs(a) &lt; std::abs(b);\n  }\n};\nstd::sort(v.begin(), v.end(), AbsCmp{});\n</code></pre>   ---  ## Lambda expressions  Defining a function or a function object is not good enough:  - These functions or function objects are almost used only once, but - too many lines of code is needed, and - you have to add names to the global scope.  Is there a way to define an **unnamed**, immediate callable object?  ---  ## Lambda expressions  To sort by comparing absolute values:   <pre><code>std::sort(v.begin(), v.end(),\n          [](int a, int b) -&gt; bool { return std::abs(a) &lt; std::abs(b); });\n</code></pre>   To sort in reverse order:   <pre><code>std::sort(v.begin(), v.end(),\n          [](int a, int b) -&gt; bool { return a &gt; b; });\n</code></pre>   To find the first element less than `k`:   <pre><code>auto pos = std::find_if(v.begin(), v.end(),\n                        [k](int x) -&gt; bool { return x &lt; k; });\n</code></pre>   ---  ## Lambda expressions  The return type can be omitted and deduced by the compiler.   <pre><code>std::sort(v.begin(), v.end(),\n          [](int a, int b) { return std::abs(a) &lt; std::abs(b); });\n</code></pre> <pre><code>std::sort(v.begin(), v.end(), [](int a, int b) { return a &gt; b; });\n</code></pre> <pre><code>auto pos = std::find_if(v.begin(), v.end(), [k](int x) { return x &lt; k; });\n</code></pre>   ---  ## Lambda expressions  A lambda expression has the following syntax:   <pre><code>[capture_list](params) -&gt; return_type { function_body }\n</code></pre>   The compiler will generate a function object according to it.   <pre><code>int k = 42;\nauto f = [k](int x) -&gt; bool { return x &lt; k; };\nbool b1 = f(10); // true\nbool b2 = f(100); // false\n</code></pre>   ---  ## Lambda expressions   <pre><code>[capture_list](params) -&gt; return_type { function_body }\n</code></pre>   It is allowed to write complex statements in `function_body`, just as in a function.   <pre><code>struct Point2d { double x, y; };\nstd::vector&lt;Point2d&gt; points = somePoints();\n// prints the l2-norm of every point\nstd::for_each(points.begin(), points.end(),\n              [](const Point2d &amp;p) {\n                auto norm = std::sqrt(p.x * p.x + p.y * p.y);\n                std::cout &lt;&lt; norm &lt;&lt; std::endl;\n              });\n</code></pre>   ---  ## Lambda expressions: capture  To capture more variables:   <pre><code>auto pos = std::find_if(v.begin(), v.end(),\n                    [lower, upper](int x) { return lower &lt;= x &amp;&amp; x &lt;= upper;});\n</code></pre>   To capture by reference (so that copy is avoided)   <pre><code>std::string str = someString();\nstd::vector&lt;std::string&gt; wordList;\n// finds the first string that is lexicographically greater than `str`,\n// but shorter than `str`.\nauto pos = std::find_if(wordList.begin(), wordList.end(),\n     [&amp;str](const std::string &amp;s) { return s &gt; str &amp;&amp; s.size() &lt; str.size();});\n</code></pre>   Here `&amp;str` indicates that `str` is captured by referece. **`&amp;` here is not the address-of operator!**  ---  ## More on lambda expressions  - *C++ Primer* Section 10.3 - *Effective Modern C++* Chapter 6 (Item 31-34)  Note that *C++ Primer (5th edition)* is based on C++11 and *Effective Modern C++* is based on C++14. Lambda expressions are evolving at a very fast pace in modern C++, with many new things added and many limitations removed.  More fancy ways of writing lambda expressions are not covered in CS100.  ---  ## Back to algorithms  So many things in the algorithm library! How can we remember them?  - Remember the **conventions**:   - No insertion/deletion of elements   - Iterator range `[begin, end)`   - Functions named with the suffix `_n` uses `[begin, begin + n)`   - Pass functions, function objects, and lambdas for customized operations   - Functions named with the suffix `_if` requires a boolean predicate - Remember the common ones: `copy`, `find`, `for_each`, `sort`, ... - Look them up in [cppreference](https://en.cppreference.com/w/cpp/algorithm) before use.  ---  ## Summary  Iterators  - A generalized \"pointer\" used for accessing elements in different containers. - Iterator range: a left-inclusive interval `[b, e)`. - `c.begin()`, `c.end()` - Basic operations: `*it`, `it-&gt;mem`, `++it`, `it++`, `it1 == it2`, `it1 != it2`. - Range-based `for` loops are in fact traversal using iterators. - More operations: BidirectionalIterator supports `it--` and `--it`. RandomAccessIterator supports all pointer arithmetics. - Initialization of standard library containers from an iterator range.  ---  ## Summary  Algorithms  - Normal functions accept iterator range `[b, e)`. Functions with `_n` accept an iterator and an integer, representing the range `[begin, begin + n)`. - Position is represented by an iterator. - STL algorithms never insert or delete elements in the containers. - Some algorithms accept a predicate argument, which is a callable object. It can be a function, a pointer to function, an object of some type that has an overloaded `operator()`, or a lambda. - Lambda: `[capture_list][params] -&gt; return_type { function_body }`  # CS100 Lecture 21  Inheritance and Polymorphism I  ---  ## Contents  - Inheritance - Dynamic binding and polymorphism  ---  # Inheritance  ---  ## Example: An item for sale   <pre><code>class Item {\n  std::string m_name;\n  double m_price = 0.0;\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price)\n      : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return m_name; }\n  auto netPrice(int cnt) const {\n    return cnt * m_price;\n  }\n};\n</code></pre>   ---  ## Defining a subclass  A discounted item **is an** item, and has more information:  - `std::size_t m_minQuantity;` - `double m_discount;`  The net price for such an item is  $$ \\text{netPrice}(n)=\\begin{cases} n\\cdot\\text{price},&amp;\\text{if }n&lt;\\text{minQuantity},\\\\ n\\cdot\\text{discount}\\cdot\\text{price},&amp;\\text{otherwise}. \\end{cases} $$  ---  ## Defining a subclass  Use **inheritance** to model the \"is-a\" relationship:  - A discounted item **is an** item.   <pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\npublic:\n  // constructors\n  // netPrice\n};\n</code></pre>   ---  ## `protected` members  A `protected` member is private, except that it is accessible in subclasses.  - `m_price` needs to be `protected`, of course. - Should `m_name` be `protected` or `private`?   - `private` is ok if the subclass does not modify it. It is accessible through the public `getName` interface.   - `protected` is also reasonable.  ---  ## `protected` members   <pre><code>class Item {\n  std::string m_name;\nprotected:\n  double m_price = 0.0;\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price)\n      : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return m_name; }\n  auto netPrice(int cnt) const {\n    return cnt * m_price;\n  }\n};\n</code></pre>   ---  ## Inheritance    By defining `DiscountedItem` to be a subclass of `Item`, **every `DiscountedItem` object contains a subobject of type `Item`.**  - Every data member and member function, except the ctors and dtors, is inherited, **no matter what access level they have**.  What can be inferred from this?  ---  ## Inheritance  By defining `DiscountedItem` to be a subclass of `Item`, **every `DiscountedItem` object contains a subobject of type `Item`.**  - Every data member and member function, except the ctors and dtors, is inherited, **no matter what access level they have**.  What can be inferred from this?  - A constructor of `DiscountedItem` must first initialize the base class subobject by calling a constructor of `Item`'s. - The destructor of `DiscountedItem` must call the destructor of `Item` after having destroyed its own members (`m_minQuantity` and `m_discount`). - `sizeof(Derived) &gt;= sizeof(Base)`  ---  ## Inheritance  Key points of inheritance:  - Every object of the derived class (subclass) contains a base class subobject. - Inheritance should not break the encapsulation of the base class.   - e.g. To initialize the base class subobject, **we must call a constructor of the base class**. It is not allowed to initialize data members of the base class subobject directly.  ---  ## Constructor of `DiscountedItem`   <pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\npublic:\n  DiscountedItem(const std::string &amp;name, double price,\n                 int minQ, double disc)\n      : Item(name, price), m_minQuantity(minQ), m_discount(disc) {}\n};\n</code></pre>   It is not allowed to write this:   <pre><code>DiscountedItem(const std::string &amp;name, double price,\n               int minQ, double disc)\n    : m_name(name), m_price(price), m_minQuantity(minQ), m_discount(disc) {}\n</code></pre>   ---  ## Constructor of derived classes  Before the initialization of the derived class's own data members, the base class subobject **must** be initialized by having one of its ctors called.  - What if we don't call the base class's ctor explicitly?    ```cpp   DiscountedItem(...)     : /* ctor of Item is not called */ m_minQuantity(minQ), m_discount(d) {}   ```  ---  ## Constructor of derived classes  Before the initialization of the derived class's own data members, the base class subobject **must** be initialized by having one of its ctors called.  - What if we don't call the base class's ctor explicitly?    - The default constructor of the base class is called.   - If the base class is not default-constructible, an error.  - What does this constructor do?    ```cpp   DiscountedItem() = default;   ```  ---  ## Constructor of derived classes  Before the initialization of the derived class's own data members, the base class subobject **must** be initialized by having one of its ctors called.  - What if we don't call the base class's ctor explicitly?    - The default constructor of the base class is called.   - If the base class is not default-constructible, an error.  - What does this constructor do?    ```cpp   DiscountedItem() = default;   ```    - Calls `Item::Item()` to default-initialize the base class subobject before initializing `m_minQuantity` and `m_discount`.  ---  ## Constructor of derived classes  In the following code, does the constructor of `DiscountedItem` compile?   <pre><code>class Item {\nprotected:\n  std::string m_name;\n  double m_price;\npublic:\n  Item(const std::string &amp;name, double p) : m_name(name), m_price(p) {}\n};\nclass DiscountedItem : public Item {\n  int m_minQuantity;\n  double m_discount;\npublic:\n  DiscountedItem(const std::string &amp;name, double p, int mq, double disc) {\n    m_name = name; m_price = p; m_minQuantity = mq; m_discount = disc;\n  }\n};\n</code></pre>   ---  ## Constructor of derived classes  In the following code, does the constructor of `DiscountedItem` compile?   <pre><code>class Item {\n  // ...\npublic:\n  // Since `Item` has a user-declared constructor, it does not have\n  // a default constructor.\n  Item(const std::string &amp;name, double p) : m_name(name), m_price(p) {}\n};\nclass DiscountedItem : public Item {\n  // ...\npublic:\n  DiscountedItem(const std::string &amp;name, double p, int mq, double disc)\n  // Before entering the function body, `Item::Item()` is called --&gt; Error!\n  { /* ... */ }\n};\n</code></pre>   **[Best practice]** Use constructor initializer lists whenever possible.  ---  # Dynamic binding  ---  ## Upcasting  If `D` is a subclass of `B`:  - A `B*` can point to a `D`, and - A `B&amp;` can be bound to a `D`.   <pre><code>DiscountedItem di = someValue();\nItem &amp;ir = di; // correct\nItem *ip = &amp;di; // correct\n</code></pre>   Reason: The **is-a** relationship! A `D` **is a** `B`.  But on such references or pointers, only the members of `B` can be accessed.  ---  ## Upcasting: Example   <pre><code>void printItemName(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName() &lt;&lt; std::endl;\n}\nDiscountedItem di(\"A\", 10, 2, 0.8);\nItem i(\"B\", 15);\nprintItemName(i); // \"Name: B\"\nprintItemName(di); // \"Name: A\"\n</code></pre>   `const Item &amp;item` can be bound to either an `Item` or a `DiscountedItem`.  ---  ## Static type and dynamic type  - **static type** of an expression: The type known at compile-time. - **dynamic type** of an expression: The real type of the object that the expression is representing. This is known at run-time.   <pre><code>void printItemName(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName() &lt;&lt; std::endl;\n}\n</code></pre>   The static type of the expression `item` is `const Item`, but its dynamic type is not known until run-time. (It may be `const Item` or `const DiscountedItem`.)  ---  ## `virtual` functions  `Item` and `DiscountedItem` have different ways of computing the net price.   <pre><code>void printItemInfo(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName()\n            &lt;&lt; \", price: \" &lt;&lt; item.netPrice(1) &lt;&lt; std::endl;\n}\n</code></pre>   - Which `netPrice` should be called? - How do we define two different `netPrice`s?  ---  ## `virtual` functions   <pre><code>class Item {\npublic:\n  virtual double netPrice(int cnt) const {\n    return m_price * cnt;\n  }\n  // other members\n};\nclass DiscountedItem : public Item {\npublic:\n  double netPrice(int cnt) const override {\n    return cnt &lt; m_minQuantity ? cnt * m_price : cnt * m_price * m_discount;\n  }\n  // other members\n};\n</code></pre>   Note: `auto` cannot be used to deduce the return type of `virtual` functions.  ---  ## Dynamic binding   <pre><code>void printItemInfo(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName()\n            &lt;&lt; \", price: \" &lt;&lt; item.netPrice(1) &lt;&lt; std::endl;\n}\n</code></pre>   The dynamic type of `item` is determined at run-time.  Since `netPrice` is a `virtual` function, which version is called is also determined at run-time:  - If the dynamic type of `item` is `Item`, it calls `Item::netPrice`. - If the dynamic type of `item` is `DiscountedItem`, it calls `DiscountedItem::netPrice`.  **late binding**, or **dynamic binding**  ---  ## `virtual`-`override`  To **override** (\u8986\u76d6/\u8986\u5199) a `virtual` function,  - The function parameter list must be the same as that of the base class's version. - The return type should be **identical to** (or ***covariant with***) that of the corresponding function in the base class.   - We will talk about \"covariant with\" in later lectures or recitations. - **The `const`ness should be the same!**  To make sure you are truly overriding the `virtual` function (instead of making a overloaded version), use the `override` keyword.  **\\* Not to be confused with \"overloading\"\uff08\u91cd\u8f7d\uff09.**  ---  ## `virtual`-`override`  An overriding function is also `virtual`, even if not explicitly declared.   <pre><code>class DiscountedItem : public Item {\n  virtual double netPrice(int cnt) const override; // correct, explicitly virtual\n};\nclass DiscountedItem : public Item {\n  double netPrice(int cnt) const; // also correct, but not recommended\n};\n</code></pre>   The `override` keyword lets the compiler check and report if the function is not truly overriding.  **[Best practice]** To override a virtual function, write the `override` keyword explicitly. The `virtual` keyword can be omitted.  ---  ## `virtual` destructors   <pre><code>Item *ip = nullptr;\nif (some_condition)\n  ip = new Item(/* ... */);\nelse\n  ip = new DiscountedItem(/* ... */);\n// ...\ndelete ip;\n</code></pre>   Whose destructor should be called?  - Only looking at the static type of `*ip` is not enough.  ---  ## `virtual` destructors   <pre><code>Item *ip = nullptr;\nif (some_condition)\n  ip = new Item(/* ... */);\nelse\n  ip = new DiscountedItem(/* ... */);\n// ...\ndelete ip;\n</code></pre>   Whose destructor should be called? - It needs to be determined at run-time!  - **To use dynamic binding correctly, you almost always need a `virtual` destructor.**  ---  ## `virtual` destructors   <pre><code>Item *ip = nullptr;\nif (some_condition)\n  ip = new Item(/* ... */);\nelse\n  ip = new DiscountedItem(/* ... */);\n// ...\ndelete ip;\n</code></pre>   - The implicitly-defined (compiler-generated) destructor is **non-`virtual`**, but we can explicitly require a `virtual` one:    ```cpp   virtual ~Item() = default;   ```  - If the dtor of the base class is `virtual`, the compiler-generated dtor for the derived class is also `virtual`.  ---  ## (Almost) completed `Item` and `DiscountedItem`   <pre><code>class Item {\n  std::string m_name;\n\nprotected:\n  double m_price = 0.0;\n\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price) : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return name; }\n  virtual double net_price(int n) const {\n    return n * price;\n  }\n  virtual ~Item() = default;\n};\n</code></pre>   ---  ## (Almost) completed `Item` and `DiscountedItem`   <pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\n\npublic:\n  DiscountedItem(const std::string &amp;name, double price,\n                 int minQ, double disc)\n      : Item(name, price), m_minQuantity(minQ), m_discount(disc) {}\n  double netPrice(int cnt) const override {\n    return cnt &lt; m_minQuantity ? cnt * m_price : cnt * m_price * m_discount;\n  }\n};\n</code></pre>   ---  ## Usage with smart pointers  Smart pointers are implemented by wrapping the raw pointers, so they can also be used for dynamic binding.   <pre><code>std::vector&lt;std::shared_ptr&lt;Item&gt;&gt; myItems;\nfor (auto i = 0; i != n; ++i) {\n  if (someCondition) {\n    myItems.push_back(std::make_shared&lt;Item&gt;(someParams));\n  } else {\n    myItems.push_back(std::make_shared&lt;DiscountedItem&gt;(someParams));\n  }\n}\n</code></pre>   A `std::unique_ptr` can be implicitly converted to a `std::unique_ptr`.  A `std::shared_ptr` can be implicitly converted to a `std::shared_ptr`.  ---  ## Copy-control  Remember to copy/move the base subobject! One possible way:   <pre><code>class Derived : public Base {\npublic:\n  Derived(const Derived &amp;other)\n      : Base(other), /* Derived's own members */ { /* ... */ }\n  Derived &amp;operator=(const Derived &amp;other) {\n    Base::operator=(other); // call Base's operator= explicitly\n    // copy Derived's own members\n    return *this;\n  }\n  // ...\n};\n</code></pre>   Why `Base(other)` and `Base::operator=(other)` work?  - The parameter type is `const Base &amp;`, which can be bound to a `Derived` object.  ---  ## Synthesized copy-control members  Guess!  - What are the behaviors of the compiler-generated copy-control members? - In what cases will they be `delete`d?  ---  ## Synthesized copy-control members  Remeber that the base class's subobject is always handled first.  These rules are quite natural:  - What are the behaviors of the compiler-generated copy-control members?   - First, it calls the base class's corresponding copy-control member.   - Then, it performs the corresponding operation on the derived class's own data members. - In what cases will they be `delete`d?   - If the base class's corresponding copy-control member is not accessible (e.g. non-existent, or `private`),   - or if any of the data members' corresponding copy-control member is not accessible.  ---  ## Slicing  Dynamic binding only happens on references or pointers to base class.   <pre><code>DiscountedItem di(\"A\", 10, 2, 0.8);\nItem i = di; // What happens?\nauto x = i.netPrice(3); // Which netPrice?\n</code></pre>   ---  ## Slicing  Dynamic binding only happens on references or pointers to base class.   <pre><code>DiscountedItem di(\"A\", 10, 2, 0.8);\nItem i = di; // What happens?\nauto x = i.netPrice(3); // Which netPrice?\n</code></pre>   `Item i = di;` calls the **copy constructor of `Item`**  - but `Item`'s copy constructor handles only the base part. - So `DiscountedItem`'s own members are **ignored**, or **\"sliced down\"**. - `i.netPrice(3)` calls `Item::netPrice`.  ---  ## Downcasting   <pre><code>Base *bp = new Derived{};\n</code></pre>   If we only have a `Base` pointer, but we are quite sure that it points to a `Derived` object  - Accessing the members of `Derived` through `bp` is not allowed. - How can we perform a **\"downcasting\"**?  ---  ## Polymorphic class  A class is said to be **polymorphic** if it has (declares or inherits) at least one virtual function.  - Either a `virtual` normal member function or a `virtual` dtor is ok.  If a class is polymorphic, all classes derived from it are polymorphic.  - There is no way to \"refuse\" to inherit any member functions, so `virtual` member functions must be inherited. - The dtor must be `virtual` if the dtor of the base class is `virtual`.  ---  ## Downcasting: For polymorphic class only  `dynamic_cast(expr)`.   <pre><code>Base *bp = new Derived{};\nDerived *dp = dynamic_cast&lt;Derived *&gt;(bp);\nDerived &amp;dr = dynamic_cast&lt;Derived &amp;&gt;(*bp);\n</code></pre>   - `Target` must be a **reference** or a **pointer** type. - `dynamic_cast` will perform **runtime type identification (RTTI)** to check the dynamic type of the expression.   - If the dynamic type is `Derived`, or a derived class (direct or indirect) of `Derived`, the downcasting succeeds.   - Otherwise, the downcasting fails. If `Target` is a pointer, returns a null pointer. If `Target` is a reference, throws an exception `std::bad_cast`.  ---  ## `dynamic_cast` can be very slow  `dynamic_cast` performs a runtime **check** to see whether the downcasting should succeed, which uses runtime type information.  This is **much slower** than other types of casting, e.g. `const_cast`, or arithmetic conversions.  **[Best practice]** Avoid `dynamic_cast` whenever possible.  ### Guaranteed successful downcasting: Use `static_cast`.  If the downcasting is guaranteed to be successful, you may use `static_cast`   <pre><code>auto dp = static_cast&lt;Derived *&gt;(bp); // quicker than dynamic_cast,\n// but performs no checks. If the dynamic type is not Derived, UB.\n</code></pre>   ---  ## Avoiding `dynamic_cast`  Typical abuse of `dynamic_cast`:    <pre><code>struct A {\n  virtual ~A() {}\n};\nstruct B : A {};\nstruct C : A {};\n</code></pre> <pre><code>std::string getType(const A *ap) {\n  if (dynamic_cast&lt;const B *&gt;(ap))\n    return \"B\";\n  else if (dynamic_cast&lt;const C *&gt;(ap))\n    return \"C\";\n  else\n    return \"A\";\n}\n</code></pre>   ---  ## Avoiding `dynamic_cast`  Use a group of `virtual` functions!    <pre><code>struct A {\n  virtual ~A() {}\n  virtual std::string name() const {\n    return \"A\";\n  }\n};\nstruct B : A {\n  std::string name()const override{\n    return \"B\";\n  }\n};\nstruct C : A {\n  std::string name()const override{\n    return \"C\";\n  }\n};\n</code></pre> <pre><code>auto getType(const A *ap) {\n  return ap-&gt;name();\n}\n</code></pre>   ---  ## Summary  Inheritance  - Every object of type `Derived` contains a subobject of type `Base`.   - Every member of `Base` is inherited, no matter whether it is accessible or not. - Inheritance should not break the base class's encapsulation.   - The access control of inherited members is not changed.   - Every constructor of `Derived` calls a constructor of `Base` to initialize the base class subobject **before** initializing its own data members.   - The destructor of `Derived` calls the destructor of `Base` to destroy the base class subobject **after** destroying its own data members.  ---  ## Summary  Dynamic binding  - Upcasting: A pointer, reference or smart pointer to `Base` can be bound to an object of type `Derived`.   - static type and dynamic type - `virtual` functions: A function that can be overridden by derived classes.   - The base class and the derived class can provide different versions of this function. - Dynamic (late) binding   - A call to a virtual function on a pointer or reference to `Base` will actually call the corresponding version of that function according to the dynamic type. - Avoid downcasting if possible.  # CS100 Lecture 22  Inheritance and Polymorphism II  ---  ## Contents  - Abstract base class - More on the \"is-a\" relationship (*Effective C++* Item 32) - Inheritance of interface vs inheritance of implementation (*Effective C++* Item 34)  ---  # Abstract base class  ---  ## Shapes  Define different shapes: Rectangle, Triangle, Circle, ...  Suppose we want to draw things like this:   <pre><code>void drawThings(ScreenHandle &amp;screen,\n                const std::vector&lt;std::shared_ptr&lt;Shape&gt;&gt; &amp;shapes) {\n  for (const auto &amp;shape : shapes)\n    shape-&gt;draw(screen);\n}\n</code></pre>   and print information:   <pre><code>void printShapeInfo(const Shape &amp;shape) {\n  std::cout &lt;&lt; \"Area: \" &lt;&lt; shape.area()\n            &lt;&lt; \"Perimeter: \" &lt;&lt; shape.perimeter() &lt;&lt; std::endl;\n}\n</code></pre>   ---  ## Shapes  Define a base class `Shape` and let other shapes inherit it.   <pre><code>class Shape {\npublic:\n  Shape() = default;\n  virtual void draw(ScreenHandle &amp;screen) const;\n  virtual double area() const;\n  virtual double perimeter() const;\n  virtual ~Shape() = default;\n};\n</code></pre>   Different shapes should define their own `draw`, `area`  and `perimeter`, so these functions should be `virtual`.  ---  ## Shapes   <pre><code>class Rectangle : public Shape {\n  Point2d mTopLeft, mBottomRight;\n\npublic:\n  Rectangle(const Point2d &amp;tl, const Point2d &amp;br)\n      : mTopLeft(tl), mBottomRight(br) {} // Base is default-initialized\n  void draw(ScreenHandle &amp;screen) const override { /* ... */ }\n  double area() const override {\n    return (mBottomRight.x - mTopLeft.x) * (mBottomRight.y - mTopLeft.y);\n  }\n  double perimeter() const override {\n    return 2 * (mBottomRight.x - mTopLeft.x + mBottomRight.y - mTopLeft.y);\n  }\n};\n</code></pre>   ---  ## Pure `virtual` functions  How should we define `Shape::draw`, `Shape::area` and `Shape::perimeter`?  - For the general concept \"Shape\", there is no way to determine the behaviors of these functions.  ---  ## Pure `virtual` functions  How should we define `Shape::draw`, `Shape::area` and `Shape::perimeter`?  - For the general concept \"Shape\", there is no way to determine the behaviors of these functions. - Direct call to `Shape::draw`, `Shape::area` and `Shape::perimeter` should be forbidden. - We shouldn't even allow an object of type `Shape` to be instantiated! The class `Shape` is only used to **define the concept \"Shape\" and required interfaces**.  ---  ## Pure `virtual` functions  If a `virtual` function does not have a reasonable definition in the base class, it should be declared as **pure `virtual`** by writing `=0`.   <pre><code>class Shape {\npublic:\n  virtual void draw(ScreenHandle &amp;) const = 0;\n  virtual double area() const = 0;\n  virtual double perimeter() const = 0;\n  virtual ~Shape() = default;\n};\n</code></pre>   Any class that has a **pure `virtual` function** is an **abstract class**. Pure `virtual` functions (usually) cannot be called ${}^{\\textcolor{red}{1}}$, and abstract classes cannot be instantiated.  ---  ## Pure `virtual` functions and abstract classes  Any class that has a **pure `virtual` function** is an **abstract class**. Pure `virtual` functions (usually) cannot be called ${}^{\\textcolor{red}{1}}$, and abstract classes cannot be instantiated.   <pre><code>Shape shape; // Error.\nShape *p = new Shape; // Error.\nauto sp = std::make_shared&lt;Shape&gt;(); // Error.\nstd::shared_ptr&lt;Shape&gt; sp2 = std::make_shared&lt;Rectangle&gt;(p1, p2); // OK.\n</code></pre>   We can define pointer or reference to an abstract class, but never an object of that type!  ---  ## Pure `virtual` functions and abstract classes  An impure `virtual` function **must be defined**. Otherwise, the compiler will fail to generate necessary runtime information (the virtual table), which leads to an error.   <pre><code>class X {\n  virtual void foo(); // Declaration, without a definition\n  // Even if `foo` is not used, this will lead to an error.\n};\n</code></pre>   Linkage error:   <pre><code>/usr/bin/ld: /tmp/ccV9TNfM.o: in function `main':\na.cpp:(.text+0x1e): undefined reference to `vtable for X'\n</code></pre>   ---  ## Make the interface robust, not error-prone.  Is this good?   <pre><code>class Shape {\npublic:\n  virtual double area() const {\n    return 0;\n  }\n};\n</code></pre>   What about this?   <pre><code>class Shape {\npublic:\n  virtual double area() const {\n    throw std::logic_error{\"area() called on Shape!\"};\n  }\n};\n</code></pre>   ---  ## Make the interface robust, not error-prone.   <pre><code>class Shape {\npublic:\n  virtual double area() const {\n    return 0;\n  }\n};\n</code></pre>   If `Shape::area` is called accidentally, the error will happen ***silently***!  ---  ## Make the interface robust, not error-prone.   <pre><code>class Shape {\npublic:\n  virtual double area() const {\n    throw std::logic_error{\"area() called on Shape!\"};\n  }\n};\n</code></pre>   If `Shape::area` is called accidentally, an exception will be raised.  However, **a good design should make errors fail to compile**.  **[Best practice]** If an error can be caught in compile-time, don't leave it until run-time.  ---  ## Polymorphism (\u591a\u6001)  Polymorphism: The provision of a single interface to entities of different types, or the use of a single symbol to represent multiple different types.  - Run-time polymorphism: Achieved via **dynamic binding**. - Compile-time polymorphism: Achieved via **function overloading**, **templates**, **concepts (since C++20)**, etc.   Run-time polymorphism:   <pre><code>struct Shape {\n  virtual void draw() const = 0;\n};\nvoid drawStuff(const Shape &amp;s) {\n  s.draw();\n}\n</code></pre>    Compile-time polymorphism:   <pre><code>template &lt;typename T&gt;\nconcept Shape = requires(const T x) {\n  x.draw();\n};\nvoid drawStuff(Shape const auto &amp;s) {\n  s.draw();\n}\n</code></pre>   ---  # More on the \"is-a\" relationship  *Effective C++* Item 32  ---  ## Public inheritance: The \"is-a\" relationship  By writing that class `D` publicly inherits from class `B`, you are telling the compiler (as well as human readers of your code) that  - Every object of type `D` ***is*** also ***an*** object of type `B`, but not vice versa. - `B` represents a **more general concept** than `D`, and that `D` represents a **more specialized concept** than `B`.  More specifically, you are asserting that **anywhere an object of type `B` can be used, an object of type `D` can be used just as well**.  - On the other hand, if you need an object of type `D`, an object of type `B` won't do.  ---  ## Example: Every student *is a* person.   <pre><code>class Person { /* ... */ };\nclass Student : public Person { /* ... */ };\n</code></pre>   - Every student ***is a*** person, but not every person is a student. - Anything that is true of a person is also true of a student:    - A person has a date of birth, so does a student. - Something is true of a student, but not true of people in general.    - A student is entrolled in a particular school, but a person may not.  The notion of a person is **more general** than is that of a student; a student is **a specialized type** of person.  ---  ## Example: Every student *is a* person.  The **is-a** relationship: Anywhere an object of type `Person` can be used, an object of type `Student` can be used just as well, **but not vice versa**.   <pre><code>void eat(const Person &amp;p);    // Anyone can eat.\nvoid study(const Student &amp;s); // Only students study.\nPerson p;\nStudent s;\neat(p);   // Fine. `p` is a person.\neat(s);   // Fine. `s` is a student, and a student is a person.\nstudy(s); // Fine.\nstudy(p); // Error! `p` isn't a student.\n</code></pre>   ---  ## Your intuition can mislead you.  - A penguin **is a** bird. - A bird can fly.  If we naively try to express this in C++, our effort yields:   <pre><code>class Bird {\npublic:\n  virtual void fly();         // Birds can fly.\n  // ...\n};\nclass Penguin : public Bird { // A penguin is a bird.\n  // ...\n};\n</code></pre> <pre><code>Penguin p;\np.fly();    // Oh no!! Penguins cannot fly, but this code compiles!\n</code></pre>   ---  ## No. Not every bird can fly.  ***In general***, birds have the ability to fly.  - Strictly speaking, there are several types of non-flying birds.  Maybe the following hierarchy models the reality much better?   <pre><code>class Bird { /* ... */ };\nclass FlyingBird : public Bird {\n  virtual void fly();\n};\nclass Penguin : public Bird {   // Not FlyingBird\n  // ...\n};\n</code></pre>   ---  ## No. Not every bird can fly.  Maybe the following hierarchy models the reality much better?   <pre><code>class Bird { /* ... */ };\nclass FlyingBird : public Bird {\n  virtual void fly();\n};\nclass Penguin : public Bird {   // Not FlyingBird\n  // ...\n};\n</code></pre>   - **Not necessarily.** If your application has much to do with beaks and wings, and nothing to do with flying, the original two-class hierarchy might be satisfactory. - **There is no one ideal design for every software.** The best design depends on what the system is expected to do.  ---  ## What about report a runtime error?   <pre><code>void report_error(const std::string &amp;msg); // defined elsewhere\nclass Penguin : public Bird {\npublic:\n  virtual void fly() {\n    report_error(\"Attempt to make a penguin fly!\");\n  }\n};\n</code></pre>   ---  ## What about report a runtime error?   <pre><code>void report_error(const std::string &amp;msg); // defined elsewhere\nclass Penguin : public Bird {\npublic:\n  virtual void fly() { report_error(\"Attempt to make a penguin fly!\"); }\n};\n</code></pre>   **No.** This does not say \"Penguins can't fly.\" This says **\"Penguins can fly, but it is an error for them to actually try to do it.\"**  To actually express the constraint \"Penguins can't fly\", you should prevent the attempt from **compiling**.   <pre><code>Penguin p;\np.fly(); // This should not compile.\n</code></pre>   **[Best practice]** Good interfaces prevent invalid code from **compiling**.  ---  ## Example: A square *is a* rectangle.  Should class `Square` publicly inherit from class `Rectangle`?  ---  ## Example: A square *is a* rectangle.  Consider this code.    <pre><code>class Rectangle {\npublic:\n  virtual void setHeight(int newHeight);\n  virtual void setWidth(int newWidth);\n  virtual int getHeight() const;\n  virtual int getWidth() const;\n  // ...\n};\nvoid makeBigger(Rectangle &amp;r) {\n  r.setWidth(r.getWidth() + 10);\n}\n</code></pre> <pre><code>class Square : public Rectangle {\n  // A square is a rectangle,\n  // where height == width.\n  // ...\n};\n\nSquare s(10);  // A 10x10 square.\nmakeBigger(s); // Oh no!\n</code></pre>   ---  ## Is this really an \"is-a\" relationship?  We said before that the \"is-a\" relationship means that **anywhere an object of type `B` can be used, an object of type `D` can be used just as well**.  However, something applicable to a rectangle is not applicable to a square!  ### Conclusion: Public inheritance means \"is-a\". Everything that applies to base classes must also apply to derived classes, because every derived class object is a base class object.  ---  # Inheritance of interface vs inheritance of implementation  *Effective C++* Item 34  ---  ## Example: Airplanes for XYZ Airlines.  Suppose XYZ has only two kinds of planes: the Model A and the Model B, and both are flown in exactly the same way.   <pre><code>class Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    // Default code for flying an airplane to the given destination.\n  }\n};\nclass ModelA : public Airplane { /* ... */ };\nclass ModelB : public Airplane { /* ... */ };\n</code></pre>   - `Airplane::fly` is declared `virtual` because ***in principle***, different airplanes should be flown in different ways. - `Airplane::fly` is defined, to avoid copy-and-pasting code in the `ModelA` and `ModelB` classes.  ---  ## Example: Airplanes for XYZ Airlines.  Now suppose that XYZ decides to acquire a new type of airplane, the Model C, **which is flown differently from the Model A and the Model B**.  XYZ's programmers add the class `ModelC` to the hierarchy, but forget to redefine the `fly` function!   <pre><code>class ModelC : public Airplane {\n  // `fly` is not overridden.\n  // ...\n};\n</code></pre>   This surely leads to a disaster:   <pre><code>auto pc = std::make_unique&lt;ModelC&gt;();\npc-&gt;fly(PVG); // No! Attempts to fly Model C in the Model A/B way!\n</code></pre>   ---  ## Impure virtual function: Interface + default implementation  The problem here is not that `Airplane::fly` has default behavior, but that `ModelC` was allowed to inherit that behavior **without explicitly saying that it wanted to**.  ### * By defining an impure virtual function, we have the derived class inherit a function *interface as well as a default implementation*.  - Interface: Every class inheriting from `Airplane` can `fly`. - Default implementation: If `ModelC` does not override `Airplane::fly`, it will have the inherited implementation automatically.  ---  ## Separate default implementation from interface  To sever the connection between the *interface* of the virtual function and its *default implementation*:   <pre><code>class Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) = 0; // pure virtual\n  // ...\nprotected:\n  void defaultFly(const Airport &amp;destination) {\n    // Default code for flying an airplane to the given destination.\n  }\n};\n</code></pre>   - The pure virtual function `fly` provides the **interface**: Every derived class can `fly`. - The **default implementation** is written in `defaultFly`.  ---  ## Separate default implementation from interface  If `ModelA` and `ModelB` want to adopt the default way of flying, they simply make a call to `defaultFly`.   <pre><code>class ModelA : public Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    defaultFly(destination);\n  }\n  // ...\n};\nclass ModelB : public Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    defaultFly(destination);\n  }\n  // ...\n};\n</code></pre>   ---  ## Separate default implementation from interface  For `ModelC`:  - Since `Airplane::fly` is pure virtual, `ModelC` must define its own version of `fly`. - If it **does** want to use the default implementation, **it must say it explicitly** by making a call to `defaultFly`.   <pre><code>class ModelC : public Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    // The \"Model C way\" of flying.\n    // Without the definition of this function, `ModelC` remains abstract,\n    // which does not compile if we create an object of such type.\n  }\n};\n</code></pre>   ---  ## Still not satisfactory?  Some people object to the idea of having separate functions for providing the interface and the default implementation, such as `fly` and `defaultFly` above.  - For one thing, it pollutes the class namespace with closely related function names.    - This really matters, especially in complicated projects. Extra mental effort might be required to distinguish the meaning of overly similar names.  Read the rest part of *Effective C++* Item 34 for another solution to this problem.  ---  ## Inheritance of interface vs inheritance of implementation  We have come to the conclusion that  - Pure virtual functions specify **inheritance of interface** only. - Simple (impure) virtual functions specify **inheritance of interface + a default implementation**.   - The default implementation can be overridden.  Moreover, non-virtual functions specify **inheritance of interface + a mandatory implementation**.  Note: In public inheritance, *interfaces are always inherited*.  ---  ## Summary  Pure virtual function and abstract class  - A pure virtual function is a virtual function declared `= 0`.   - Call to a pure virtual function is not allowed. ${}^{\\textcolor{red}{1}}$   - Pure virtual functions define the interfaces and force the derived classes to override it. - A class that has a pure virtual function is an abstract class.   - We cannot create an object of an abstract class type.   - Abstract classes are often used to represent abstract, general concepts.  ---  ## Summary  Public inheritance models the \"is-a\" relationship.  - Everything that applies to base classes must also apply to derived classes. - The \"Birds can fly, and a penguin is a bird\" example. - The \"A square is a rectangle\" example.  ---  ## Summary  Inheritance of interface vs inheritance of implementation  - In public inheritance, interfaces are always inherited. - Pure virtual functions: inheritance of **interface** only. - Simple (impure) virtual functions: inheritance of **interface + a default implementation**.   - The default implementation can be overridden. - non-virtual functions: inheritance of **interface + a mandatory implementation**.  ---  ## Notes  ${}^{\\textcolor{red}{1}}$ A pure virtual function can have a definition. In that case, it can be called via the syntax `ClassName::functionName(args)`, not via a virtual function call (dynamic binding).  In some cases, we want a class to be made abstract, but it does not have any pure virtual function. A possible workaround is to declare the destructor to be pure virtual, and then provide a definition for it:   <pre><code>struct Foo {\n  virtual ~Foo() = 0;\n};\nFoo::~Foo() = default; // Provide a definition outside the class.\n</code></pre>   The \"another solution\" mentioned in page 36 is also related to this."},{"location":"CS100%28C%26C%2B%2B%29/core.html","title":"core","text":"<ol> <li> <p>C\u8bed\u8a00\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7c7b\u578b\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u786e\u5b9a\uff08\u9759\u6001\u7c7b\u578b\uff09</p> </li> <li> <p>\u83b7\u5f97'9'\u7684int\u6570\u503c: <code>int num = '9' - '0';</code></p> </li> <li> <p>\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u65e0\u7b26\u53f7\u6574\u6570\u8fd0\u7b97\u603b\u662f\u4ee5\u6a21 <code>n</code> \u8fdb\u884c\uff0c<code>n</code> \u662f\u6574\u6570\u7c7b\u578b\u7684\u4f4d\u6570\u3002</p> </li> <li> <p>Whether char is signed or unsigned is implementation-defined.</p> </li> <li> <p>printf\u51fd\u6570\u8981\u6c42\u6570\u636e\u7c7b\u578b\u4e0e\u5360\u4f4d\u7b26\u4e25\u683c\u5bf9\u5e94, \u4e0d\u5141\u8bb8\u9690\u5f0f\u8f6c\u6362</p> </li> <li> <p><code>printf(\"%d\\n\", ++x);</code>\u53ef\u4ee5, \u4f46\u662f<code>printf(\"%d%d\\n\", x, x++);</code>\u4e0d\u884c, \u56e0\u4e3a\u4e0d\u77e5\u9053\u662f\u5148\u5360\u4f4d\u8fd8\u662f\u5148++x</p> </li> <li> <p>Operator precedence does not determine evaluation order.  <code>f() + g() * h()</code> is interpreted as <code>f() + (g() * h())</code> , but the order in which <code>f , g and h</code>are called is unspecified.</p> </li> <li> <p>In the following expressions, it is unspecified whether f is called before g .    <code>f() + g() ; f() == g() ; some_function(f(), g())</code></p> </li> <li> <p>The assignment operator returns the value of lhs after assignment. </p> </li> </ol> <p><code>c    int a = 0, b = 1, c = 2;    a = b = c; // interpreted as a = (b = c)    // Both a and b are assigned with 2.</code></p> <ol> <li> <p>The expression in a case label must be an integer constant expression, whose value is known at compile-time</p> </li> <li> <p>If a variable is declared without explicit initialization: </p> <p>For local non- static variables, they are initialized to indeterminate values. In other words, they are uninitialized. (\u5c40\u90e8\u975e\u9759\u6001\u53d8\u91cf, \u4e0d\u4f1a\u96f6\u521d\u59cb\u5316)</p> <p>For global or local static variables, they are empty-initialized : (\u5168\u5c40\u6216\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u4f1a\u96f6\u521d\u59cb\u5316)</p> <p>Pointers are initialized to null pointer values of their types. </p> <p>Objects of integral types are initialized to 0 .</p> <p>Objects of floating types are initialized to positive zero ( 0.0 ). </p> </li> <li> <p>\u5c40\u90e8\u975e\u9759\u6001\u6307\u9488\u662f\u672a\u521d\u59cb\u5316\u7684, \u800c\u5168\u5c40\u6216\u5c40\u90e8\u9759\u6001\u6307\u9488\u4f1a\u96f6\u521d\u59cb\u5316(\u7a7a\u6307\u9488)</p> </li> <li> <p>\u8981\u907f\u514d\u89e3\u5f15\u7528\u7a7a\u6307\u9488\u6216\u8005\u662f\u91ce\u6307\u9488, \u6700\u597d\u662f<code>if (ptr != NULL &amp;&amp; *ptr == 42){}</code></p> </li> <li> <p><code>c     int a1[10]; // OK. A literal is a constant expression.     #define MAXN 10     int a2[MAXN]; // OK. `MAXN` is replaced with `10` by the preprocessor.     int n; scanf(\"%d\", &amp;n);     int a[n]; // A C99 VLA (Variable-Length Array), whose length is     // determined at runtime. \u4e0d\u53ef\u4ee5!</code></p> </li> <li> <p>If an array is declared without explicit initialization: </p> <p>Global or local static : Empty-initialization Every element is empty-initialized. </p> <p>Local non- static : Every element is initialized to indeterminate values (uninitialized).</p> </li> <li> <p>\u603b\u800c\u8a00\u4e4b, \u5c40\u90e8\u53d8\u91cf\u4e0d\u521d\u59cb\u5316, \u5c31\u662f\u771f\u7684\u672a\u521d\u59cb\u5316\u4e86; \u5176\u4ed6\u7684\u90fd\u662f\u7a7a\u521d\u59cb\u5316</p> </li> <li> <p>an array can be implicitly converted to a pointer to the first element: <code>a -&gt; &amp;a[0] , T -&gt; [N] T *</code>; \u4f46\u662f\u4e24\u8005\u4ecd\u7136\u6709\u533a\u522b, array\u652f\u6301\u57fa\u4e8e\u8303\u56f4\u7684\u5faa\u73af, \u4f46\u662f\u5982\u679c\u662f\u51fd\u6570\u4f20\u53c2, \u4f20\u5165\u4e86\u4e00\u4e2a\u9000\u5316\u4e3a\u6307\u9488\u7684\u6570\u7ec4, \u90a3\u4e48\u8fd9\u4e2a\u6307\u9488\u4e0d\u652f\u6301\u57fa\u4e8e\u8303\u56f4\u7684\u5faa\u73af. \u53ea\u4e0d\u8fc7\u662f\u5728\u51fd\u6570\u91cc\u9762\u7684\u8fd9\u4e2a\u6307\u9488\u652f\u6301subscript, \u56e0\u4e3a\u7f16\u8bd1\u5668\u5e2e\u4e86\u5927\u5fd9</p> </li> <li> <p><code>int (*parr)[N];</code>a ptr to an array of N ints   </p> <p><code>int *arrp[N];</code> an array of N ptrs pointing to int.</p> </li> <li> <p>\u4f20\u5165<code>int[N][M]</code>\u7684\u65b9\u6cd5:  <code>void fun(int a[N][M])</code> <code>void fun(int (*a)[M])</code> \u4e00\u5b9a\u8981\u7406\u89e3\u5230\u5e95\u4f20\u5165\u7684\u5173\u952e\u662f\u4ec0\u4e48? A pointer to int [M]!</p> </li> <li> <p><code>void *malloc(size_t size)</code>, \u4e0d\u4f1a\u7a7a\u521d\u59cb\u5316, \u800ccalloc\u4f1a. \u6709\u4e14\u53ea\u6709\u4e00\u79cdfree\u65b9\u6cd5: free\u6307\u9488</p> </li> <li> <p>C\u98ce\u683c\u5b57\u7b26\u4e32: It must be null-terminated: There should be a null character '\\0' at the end. <code>'\\0'</code> is the \"null character\" whose ASCII value is 0. <code>fgets(str, 100, stdin);</code>    puts(str) : Prints the string str , followed by a newline.</p> </li> <li> <p>\u60f3\u5f00\u8f9f\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u4f8b\u5728\u5806\u533a\u4e0a: <code>struct Student *pStu = malloc(sizeof(struct Student));</code></p> </li> <li> <p>Although an array cannot be copied, an array member can be copied. The copy of an array is element-wise copy. (struct)</p> </li> <li> <p>Global or local static : \"empty-initialization\", which performs member-wise empty-initialization. (\u7a7a\u521d\u59cb\u5316)</p> </li> </ol> <p>\u200b       Local non- static : every member is initialized to indeterminate values (in other       words, uninitialized). (\u672a\u521d\u59cb\u5316)</p> <ol> <li>Default-initialization of a std::string will produce an empty string. (\u4e0d\u662fundefined)</li> <li><code>string.size()</code>\u8fd4\u56de\u5b57\u7b26\u4e32\u957f\u5ea6; <code>string.empty()</code>\u5224\u65ad\u662f\u5426\u662f\u7a7a\u5b57\u7b26\u4e32</li> <li>At least one operand of <code>+</code> should be <code>std::string</code></li> <li>References must be bound to existing objects; References are not objects</li> <li>Use references in range- for: <code>for (char &amp;c : str){for (char &amp;c : str)}</code></li> <li><code>std::vector</code> is not a type itself. It must be combined with some  to form a type.</li> <li> <p>C++\u4e2d, <code>const int maxn = 1000; int a[maxn]; // a normal array in C++, but VLA in C</code></p> </li> <li> <p>Almost all implicit narrowing conversions in C++ is banned. </p> </li> <li> <p><code>c++     const int cival = 42;     int &amp;ref = const_cast&lt;int &amp;&gt;(cival); // compiles, but dangerous     ++ref; // undefined behavior (may crash)</code></p> </li> <li> <p><code>auto str = \"hello\"; // `const char *</code> <code>auto it = vs.begin();</code></p> <p><code>auto lam = [](int x, int y) { return x + y; } // A lambda expression.</code></p> </li> <li> <p>decltype(expr) will deduce the type of the expression expr without evaluating it.</p> </li> <li> <p>Pass an array by reference: </p> </li> </ol> <pre><code>void print(const int (&amp;arr)[100]) {\n    for (auto x : arr) // OK. `arr` is an array.\n        std::cout &lt;&lt; x &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre> <ol> <li>In a const member function, calling a non- const member function on *this is not allowed.</li> <li>For a const object, only const member functions can be called on it.</li> <li>Data members are initialized in order in which they are declared.</li> <li>\u7c7b\u4e2d\u58f0\u660e\u7684\u6307\u9488\u662f\u65e0\u6cd5\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a nullptr(\u60e8\u75db\u6559\u8bad)(=default)(\u9664\u975ein-class\u6709\u5b9a\u4e49)</li> <li><code>new [0]</code>may also allocate some memory which should also be deallocated</li> <li>If the class does not have a user-declared copy constructor, the compiler will try to synthesize one. The synthesized one will copy-initialize all the members</li> <li>By saying <code>= delete</code> , we define a deleted copy constructor. (\u62d2\u7edd\u590d\u5236\u6784\u9020)</li> <li><code>a = b</code> is equivalent to <code>a.operator=(b)</code>.</li> <li><code>operator=</code> returns reference to the left-hand side object. It is <code>*this</code>.\u522b\u5fd8\u4e86delete</li> <li>copy\u548cmove\u95ee\u9898\u90fd\u9700\u8981\u8003\u8651self-assignment\u7684corner-case</li> <li>A <code>static</code> data member: \u5b83\u5c5e\u4e8e\u7c7b, \u800c\u4e0d\u5c5e\u4e8e\u4efb\u4f55object, \u56e0\u6b64\u9759\u6001\u7c7b\u65b9\u6cd5\u6ca1\u6709this\u6307\u9488</li> <li>A <code>friend</code> is not a member! \u53cb\u5143\u58f0\u660e\u5728\u7c7b\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5(\u4e00\u822c\u662f\u6700\u5f00\u59cb\u6216\u6700\u540e)</li> <li>A member function can be declared in the class body, and then defined outside.</li> <li>\u53ea\u58f0\u660e\u4e00\u4e2a\u7c7b, \u4f46\u662f\u5565\u4e5f\u4e0d\u77e5\u9053, \u90a3\u4e48\u5c31\u662fincomplete type, \u53ea\u80fd\u7ed9\u5b83\u58f0\u660e\u6307\u9488\u6216\u5f15\u7528</li> <li>\u6790\u6784\u51fd\u6570\u7ed3\u675f\u540e, \u7c7b\u5185\u6240\u6709\u6210\u5458\u90fd\u4f1a\u88ab\u81ea\u52a8\u6467\u6bc1, \u6467\u6bc1\u987a\u5e8f\u662f\u58f0\u660e\u987a\u5e8f\u7684\u9006\u5e8f!</li> <li>\u9ed8\u8ba4\u6790\u6784\u51fd\u6570\u4e0d\u4f1a\u81ea\u52a8\u91ca\u653e\u6307\u9488\u6307\u5411\u7684\u5185\u5b58</li> <li> <p><code>std::shared_ptr // in &lt;memory&gt;</code>\u5141\u8bb8\u667a\u6167\u6307\u9488\u7684\u590d\u5236, \u4f46\u662f\u6709\u7279\u6b8a\u7684\u8bbe\u8ba1; <code>std::unique_ptr // in &lt;memory&gt;</code> \u4e0d\u5141\u8bb8\u667a\u6167\u6307\u9488\u7684\u590d\u5236(move-only type, move\u4e4b\u540e\u7684\u6307\u9488\u53d8\u6210\u7a7a\u6307\u9488); \u4e14\u6ce8\u610f, \u8fd9\u4e24\u4e2a\u548c\u662f<code>class template</code>, \u4e0d\u662f<code>type</code></p> </li> <li> <p><code>std::unique_ptr&lt;Student&gt; p(new Student(\"Bob\", 2020123123));</code>\u4e5f\u53ef\u4ee5: </p> </li> </ol> <p><code>std::unique_ptr p1 = std::make_unique(\"Bob\", 2020123123);</code></p> <p><code>auto p2 = std::make_unique(\"Alice\", 2020321321);</code></p> <ol> <li> <p>The default constructor of <code>std::unique_ptr&lt;T&gt;</code> initializes ptr to be a <code>null pointer</code>. It is not holding some indeterminate value. </p> </li> <li> <p><code>c++     // Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.     auto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.</code></p> <p>If you want p to be just an observer, write <code>auto p = pWindow.get();</code> <code>pWindow.get()</code> returns a raw pointer to the object, which is of type <code>Window *</code>. </p> <p>Be careful! As an observer, p should never interfere in the lifetime of the object. A simple delete p; will cause disaster.</p> </li> <li> <p>\u5982\u679c<code>std::unique_ptr up(new T[n]);</code>\u5462? \u5e94\u8be5\u7528<code>delete[]</code>\u7684\u4f46\u662f\u5374\u662f<code>delete</code></p> </li> </ol> <p>A template <code>specialization: std::unique_ptr</code>. \u6216\u8005\u8bf4\u76f4\u63a5\u4f7f\u7528STL</p> <ol> <li> <p>Zero-overhead: Using a <code>std::unique_ptr</code> does not cost more time or space than using raw pointers.</p> </li> <li> <p><code>c++     std::shared_ptr&lt;Type&gt; sp2(new Type(args));     auto sp = std::make_shared&lt;Type&gt;(args); // equivalent, but better</code></p> <p><code>sp.use_count()</code> : The value of the reference counter.</p> </li> </ol> <pre><code>auto sp = std::make_shared&lt;std::string&gt;(10, 'c');\n{\nauto sp2 = sp;\nstd::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl; // 2\n} // `sp2` is destroyed, but the managed object is not destroyed.\nstd::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl; // 1\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html","title":"C\u62fe\u9057","text":"<p>\u672c\u7b14\u8bb0\u65e8\u5728\u62fe\u9057\u81ea\u5b66\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u6d89\u53ca\u5230\u7684\u4e0a\u8bfe\u7684\u5185\u5bb9</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_1","title":"\u7a0b\u5e8f\u6846\u67b6","text":"<ul> <li> <p>Why is <code>#include &lt;stdio.h&gt;</code>needed?</p> </li> <li> <p><code>scanf</code> and <code>printf</code> are declared in the standard library header file <code>stdio.h</code>.</p> </li> <li> <p>What does <code>int main(void)</code>mean?</p> </li> <li> <p>The <code>main</code> function is where the program starts. <code>int</code> is the return type and <code>void</code> indicates that this function accepts no arguments.</p> </li> <li> <p>What is the meaning of <code>return 0</code>; ? Can it be omitted?</p> </li> <li> <p>A program returns <code>0</code> if it exits successfully. The <code>main</code> function of C will execute <code>return 0</code> automatically at the end if we don't write it explicitly. </p> </li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\uff0creturn 0\u53ef\u4ee5\u7701\u7565\uff0c\u6211\u4eec\u4e0d\u5199\u7684\u8bdd\uff0c\u7a0b\u5e8f\u8dd1\u5b8c\u4e5f\u4f1a\u81ea\u52a8\u8fd4\u56de0</p> <ul> <li>How do we represent a newline?</li> <li><code>'\\n'</code>.</li> <li>What does %d mean?</li> <li>Indicates that the type of the data being read or printed is <code>int</code>.</li> <li>How are whitespaces handled when reading integers with scanf?</li> <li>When reading <code>int</code> with <code>%d</code> in <code>scanf</code>, leading whitespaces are ignored.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#scanf","title":"scanf","text":"<p><code>scanf(\"%d%d\", &amp;a, &amp;b);</code>  \u4e2d\u7684\u5360\u4f4d\u7b26%d\uff1a</p> <p><code>%d</code> will skip any leading whitespaces.</p> <ul> <li>\"whitespace\" refers to the character that looks \"blank\": space <code>' '</code>, newline <code>'\\n</code>, tab <code>'\\t'</code>, etc.</li> </ul> <p>\u4f1a\u8df3\u8fc7space \u6362\u884c\u7b26 \u5236\u8868\u7b26</p> <p></p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#variable-declaration","title":"variable declaration","text":"<p>Every variable in C has a type.</p> <ul> <li>The type is fully deterministic and cannot be changed.</li> <li>The type is known even when the program is not run</li> <li>\u21d4 The type is known at compile-time.  \u7f16\u8bd1\u9636\u6bb5\u5c31\u77e5\u9053type\u4e86\uff01</li> <li>\u21d4 C is statically-typed 1. \u21d4 C has a static type system.</li> <li>In contrast, Python is dynamically-typed.</li> </ul> <p>\u201c\u7f16\u8bd1\u9636\u6bb5\u5c31\u77e5\u9053\u201d\u8fd9\u4e2a\u4e1c\u897f\u5176\u5b9e\u662f\u5341\u5206\u91cd\u8981\u7684\uff01\u4e4b\u540e\u8fd8\u4f1a\u4f53\u63d0\u53ca</p> <p>\u800c\u53d8\u91cf\u58f0\u660e\u5728function\u5185\u80fd\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\uff0c\u5728\u4efb\u4f55\u51fd\u6570\u4f53\u4e4b\u5916\u58f0\u660e\uff0c\u80fd\u591f\u58f0\u660e\u5168\u5c40\u53d8\u91cf</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#arithmetic-type","title":"Arithmetic type","text":"<p>\u516b\u4f4d\uff08bit\uff09\u662f\u4e00\u4e2a\u5b57\u8282\uff08byte\uff09</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#boolean","title":"Boolean","text":"<p>\u539f\u5148\u4e00\u76f4\u5728<code>&lt;stdbool.h&gt;</code>\u91cc\u9762\uff0c\u800c\u81ea\u4eceC23\u5c31\u4e0d\u7528\u52a0\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e86</p> <p>\u5728C99\u4e4b\u524d\uff0c\u6ca1\u6709true false\uff0c\u76f4\u63a5\u7528int\u76841\u548c0</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#integer","title":"integer","text":"<p>\u90a3\u4e48\u5173\u4e8e\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\uff0c\u5047\u8bbe\u4e00\u4e2a\u6574\u6570\u6570\u636e\u7c7b\u578b\u6709n bits\uff0c\u90a3\u4e48\u5206\u4e3a\u6709\u7b26\u53f7signed \u548c\u65e0\u7b26\u53f7 unsigned</p> <ul> <li>If the type is signed, the range of values that can be represented is [\u22122^n-1,2^n-1  \u22121].</li> <li>If the type is unsigned, the range of values that can be represented is [0,2^n  \u22121].</li> </ul> <p>\u56e0\u4e3a\u8868\u793a\u7b26\u53f7\u9700\u8981\u6700\u524d\u9762\u7684\u6570\u5b57\u8868\u793a\u6b63\u8d1f</p> <p>\u90a3\u4e48\u6570\u636e\u7c7b\u578b\u5bf9\u5e94\u7684\u5b57\u8282\u662f\u591a\u5c11\u5462\uff1f \u9996\u5148\u6211\u4eec\u6765\u770b\u547d\u540d</p> <ul> <li>The keyword <code>int</code> is optional in types other than <code>int</code>:</li> <li>e.g. <code>short int</code> and <code>short</code> name the same type.</li> <li>e.g. <code>unsigned int</code> and <code>unsigned</code> name the same type.</li> <li>\"Unsigned-ness\" needs to be written explicitly: <code>unsigned int</code>, <code>unsigned long</code>, ...</li> <li>Types without the keyword <code>unsigned</code> are signed by default:</li> <li>e.g. <code>signed int</code> and <code>int</code> name the same type.</li> <li>e.g. <code>signed long int</code>, <code>signed long</code>, <code>long int</code> and <code>long</code> name the same type.</li> </ul> <p>unsigned\u4e0d\u4f1a\u7701\u7565\uff0csigned\u4f1a\uff1b short, long, long long \u5176\u5b9e\u539f\u6765\u90fd\u662f\u7528\u6765\u4fee\u9970int\u7684</p> <p>\u90a3\u4e48\u5360\u7528\u591a\u5c11\u5b57\u8282\u5462\uff1f </p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u6709long int \u548c int\u7c7b\u578b\u662fimplementation-defined</p> <p>In addition: Implementation-defined behaviors</p> <p>The standard states that the exact width of the integer types is implementation-defined.</p> <ul> <li>Implementation: The compiler and the standard library.</li> <li>An implementation-defined behavior depends on the compiler and the standard library, and is often also related to the hosted environment (e.g. the operating system).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#floating-type","title":"floating type","text":"<p>float : 4\u5b57\u8282    double : 8\u5b57\u8282   long double: \u7cbe\u5ea6\u548c\u8303\u56f4\u81f3\u5c11\u6bd4double\u597d</p> <p>float\u7684\u6307\u6570\u8303\u56f4\u4e3a-127 ~ 128\uff0c\u800cdouble\u7684\u6307\u6570\u8303\u56f4\u4e3a-1023 ~ 1024\uff08double\u66f4\u7cbe\u786e\u4e9b\uff09</p> <p>float\u548cdouble\u7684\u7cbe\u5ea6\u662f\u7531\u5c3e\u6570\u7684\u4f4d\u6570\u6765\u51b3\u5b9a\u7684</p> <p>float\uff1a2^23 = 8388608\uff0c\u4e00\u5171\u4e03\u4f4d\uff0c\u8fd9\u610f\u5473\u7740\u6700\u591a\u80fd\u67097\u4f4d\u6709\u6548\u6570\u5b57\uff0c\u4f46\u7edd\u5bf9\u80fd\u4fdd\u8bc1\u7684\u4e3a6\u4f4d\uff0c\u4e5f\u5373float\u7684\u7cbe\u5ea6\u4e3a6~7\u4f4d\u6709\u6548\u6570\u5b57\uff1b</p> <p>double\uff1a2^52 = 4503599627370496\uff0c\u4e00\u517116\u4f4d\uff0c\u540c\u7406\uff0cdouble\u7684\u7cbe\u5ea6\u4e3a15~16\u4f4d\u3002</p> <p>\u65e0\u8bba\u662f\u5355\u7cbe\u5ea6\u8fd8\u662f\u53cc\u7cbe\u5ea6\u5728\u5b58\u50a8\u4e2d\u90fd\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a \u7b26\u53f7\u4f4d(Sign) : 0\u4ee3\u8868\u6b63\uff0c1\u4ee3\u8868\u4e3a\u8d1f \u6307\u6570\u4f4d\uff08Exponent\uff09:\u7528\u4e8e\u5b58\u50a8\u79d1\u5b66\u8ba1\u6570\u6cd5\u4e2d\u7684\u6307\u6570\u6570\u636e\uff0c\u5e76\u4e14\u91c7\u7528\u79fb\u4f4d\u5b58\u50a8 \u5c3e\u6570\u90e8\u5206\uff08Mantissa\uff09\uff1a\u5c3e\u6570\u90e8\u5206</p> <p>Use <code>double</code> for real floating-point arithmetic by default. Don't worry about efficiency! <code>double</code> arithmetic is not necessarily slower than <code>float</code>.</p> <p>\u6ce8\u610f\uff1a\u4e0d\u8981\u7528floating-point type\u4e8einteger arithmetic, \u5426\u5219\u8fd4\u56de\u7684\u5c31\u662f\u6d6e\u70b9\u6570\uff08\u9690\u5f0f\u8f6c\u6362\uff09</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#character-type","title":"character type","text":"<p>The C standard provides three different character types: <code>signed char</code>, <code>unsigned char</code> and <code>char</code>.</p> <p>\u4f46\u662f\u65e0\u8bba\u662f\u54ea\u4e00\u79cd\uff0c\u4e00\u5b9a\u90fd\u662f\u4e00\u4e2a\u5b57\u8282\uff0c\u56db\u4f4d\u8868\u793a\u8303\u56f4\uff1a</p> <p>signed char : -128 - 127        unsigned char : 0 - 255 (\u90fd\u662f\u95ed\u533a\u95f4)</p> <p>\u5b57\u7b26\u5bf9\u5e94\u7684\u5c31\u662fASCII\u7801</p> <p>\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a Whether <code>char</code> is signed or unsigned is implementation-defined.</p> <p>If <code>char</code> is signed (unsigned), it represents the same set of values as the type <code>signed char</code> (<code>unsigned char</code>), but they are not the same type. \uff08\u76f8\u53cd\uff0c\u5982\u679c\u662fshort int long longlong, \u90a3\u4e48\u524d\u9762\u52a0signed\u5176\u5b9e\u6ca1\u533a\u522b\uff09</p> <p>\u6280\u5de7\uff1a \u5982\u4f55\u5c06\u4e00\u4e2achar \u8868\u793a\u76840-9\u7684\u6570\uff08ASCII\u4e2d\u662f48-57\uff09\u8f6c\u5316\u4e3aint\u5462\uff1f</p> <p><code>c  char c = '5';  int a = c - '0'; // \u6b63\u786e\uff0c\u53d1\u751f\u9690\u5f0f\u8f6c\u6362  int b = c - 48; // \u6b63\u786e  // \u53ef\u4ee5\u628a\u7ed3\u679c\u76f4\u63a5\u4ed8\u7ed9int, \u56e0\u4e3a\u5728 C \u8bed\u8a00\u4e2d\uff0cchar \u7c7b\u578b\u7684\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u6574\u6570\u7c7b\u578b\uff0c\u53ea\u662f\u5b83\u4eec\u901a\u5e38\u88ab\u89e3\u91ca\u4e3a\u5b57\u7b26\u800c\u4e0d\u662f\u6570\u5b57\u3002\u56e0\u6b64\uff0c\u5c06\u5b57\u7b26 '0' \u5230 '9' \u8d4b\u7ed9 int \u53d8\u91cf\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5c06\u5b83\u4eec\u7684 ASCII \u503c\u8d4b\u7ed9\u4e86 int \u53d8\u91cf\uff0cASCII \u503c\u6070\u597d\u4e0e\u76f8\u5e94\u7684\u6570\u5b57\u503c\u76f8\u540c\u3002</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_2","title":"\u9690\u5f0f\u8f6c\u6362","text":"<p>\u5728\u8fdb\u884c\u52a0\u51cf\u4e58\u9664\u4e4b\u7c7b\u7684\u8ba1\u7b97\u4e4b\u524d\uff0c\u5176\u5b9e\u90fd\u4f1a\u53d1\u751f\u4e00\u6b21\u9690\u5f62\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u4f7f\u5f97\u6700\u7ec8\u5b83\u4eec\u90fd\u662f\u540c\u4e00\u4e2a\u7c7b\u578b</p> <p>\u5e38\u89c1\u7684\u6709\uff1a </p> <p>If any one operand is of floating-point type and the other is an integer, the integer will be implicitly converted to that floating-point type. \u6709\u4e00\u4e2a\u662f\u6d6e\u70b9\u6570\uff0c\u90a3\u4e48\u5176\u4ed6\u6574\u6570\u90fd\u4f1a\u8f6c\u5316\u4e3a\u6d6e\u70b9\u6570</p> <p>Similarly, if the operands are of types <code>int</code> and <code>long long</code>, the <code>int</code> value will be implicitly converted to <code>long long</code>, and the result type is <code>long long</code>.  \u5373\u4f7f\u90fd\u662f\u6574\u6570\uff0c\u5047\u5982\u8bf4\u4e00\u4e2a\u662fint \u4e00\u4e2a\u662flong long\uff0c \u90a3\u4e48int\u4e5f\u4f1a\u8f6c\u5316\u4e3along long, \u6700\u7ec8\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e5f\u662flong long  </p> <p>\u53ef\u89c1\uff0c\u8f6c\u6362\u90fd\u4f1a\u5f80\u66f4\u4e3a\u4e25\u82db\u7684\u65b9\u5411\u8f6c\u6362</p> <p>\u800c\u9664\u6cd5\u5c31\u66f4\u4e3a\u7279\u6b8a\uff1a </p> <p>Assume <code>a</code> and <code>b</code> are of the same type <code>T</code> (after conversions as mentioned above).</p> <ul> <li>Then, the result type is also <code>T</code>.</li> </ul> <p>Two cases:</p> <ul> <li>If <code>T</code> is a floating-point type, this is a floating-point division.</li> <li>If <code>T</code> is an integer type, this is an integer division. \u800c\u4e14\u7ed3\u679c\u603b\u662f\u5411\u96f6\u53d6\u6574\uff01(truncated toward zero)</li> </ul> <p>remainder\uff1a a % b, \u4e24\u4e2a\u5fc5\u987b\u662f\u76f8\u540c\u7684\u6574\u6570\u7c7b\u578b</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#overflow","title":"overflow","text":"<p>If a signed integer type holds a value that is not in the valid range, overflow is caused.</p> <p>Suppose <code>int</code> is 32-bit and <code>long long</code> is 64-bit.</p> <pre><code>int ival = 100000; long long llval = ival;\nint result1 = ival * ival;               // (1) overflow , int \nlong long result2 = ival * ival;         // (2) overflow , \u53f3\u8fb9\u7b97\u5f0f\u662fint, \u201d\u4e00\u77ac\u95f4\u201coverflow\nlong long result3 = llval * ival;        // (3) not overflow, \u53f3\u8fb9\u662flong long int \nlong long result4 = llval * ival * ival; // (4) not overflow\n</code></pre> <p>\u6ce8\u610f\uff0c\u662f\u5426\u6ea2\u51fa\u8ddf\u53f3\u8fb9\u7b97\u5f0f\u6709\u5173\u7cfb\u3002\u770b\u4f3c\u5f88\u591a\u90fd\u662f\u76f8\u540c\u7684\u4e58\u6cd5\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u9690\u5f0f\u8f6c\u6362\u975e\u5e38\u91cd\u8981\uff01</p> <p><code>*</code> is left-associative, so the expression <code>a * b * c</code> is interpreted as <code>(a * b) * c</code>.</p> <p>\u4f46\u662f\u540c\u65f6\u4e00\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u70b9: unsigned integers never overflow  \u6c38\u8fdc\u4f1a\u7528\u4e0a\u786e\u754c\u53d6\u6a21()</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#bit-operation","title":"Bit Operation","text":"<p>\u5341\u8fdb\u5236\u7684\u6570\u5b57\u5728\u5185\u5b58\u4e2d\u662f\u4ee5\u4e8c\u8fdb\u5236\u50a8\u5b58\u7684\uff0c\u800c\u4e8c\u8fdb\u5236\u5728C\u91cc\u9762\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4f4d\u8fd0\u7b97</p> <p></p> <p>\u53d6\u53cd\u8fd0\u7b97\u201c~\u201d\u662f\u4e00\u4e2a\u5355\u76ee\u8fd0\u7b97\u7b26, \u8fd0\u7b97\u89c4\u5219\u4e3a\uff1a ~1=0 ~0=1</p> <pre><code># include &lt;stdio.h&gt;\nint main()\n{ \n   unsigned char  a=18,b;\n   b=~a;\n   printf(\u201c~a=%u\u201d,b); \n   return 0; \n} // 237\n</code></pre> <p>\u9996\u5148\u662f%u\u548c%d\u7684\u533a\u522b\uff0c\u524d\u8005\u5141\u8bb8\u662f\u8d1f\u6570\uff0c\u800c%d\u4f1a\u53d6\u6a21\u53d8\u6210\u6b63\u6570\uff0c\u800c\u4e14\u53d6\u7684\u6a21\u8fd8\u662f\u8ddf\u6570\u636e\u7c7b\u578b\u5185\u5b58\u76f8\u5173\uff1b\u7136\u540e\u5c31\u662fchar and unsigned char\u7684\u533a\u522b\u4e86\uff0c\u5982\u679c\u662f\u65e0\u7b26\u53f7\u7684\u90a3\u4e48\u5c31\u662f\u6b63\u5e38\u7684\u8f6c\u6362\u7136\u540e\u8f93\u51fa\uff0c\u5fc5\u5b9a\u662f\u6574\u6570\uff1b\u4f46\u662f\u5982\u679c\u662fsigned, \u90a3\u4e48\u8f6c\u5316\u7684\u65f6\u5019\uff0c\u6392\u5934\u7684\u6570\u5b57\u4e0d\u53d8\uff0c\u7136\u540e\u5269\u4f59\u7684\u90e8\u5206\u5148\u51cf\u4e00\u7136\u540e\u518d\u5168\u90e8\u53d6\u53cd\uff0c\u7136\u540e\u518d\u4ee5\u7b2c\u4e00\u4e2a\u4e3a\u7b26\u53f7\u4f4d\uff0c\u8f93\u51fa\u6570\u5b57\uff08signed\u6839\u672c\uff09</p> <p>10010011\uff0c\u5373\u5341\u8fdb\u5236\u7684-19\uff08signed\uff09 </p> <p>\u5de6\u79fb\u8fd0\u7b97\u201c&lt;&lt;\u201d\u662f\u4e00\u4e2a\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u5de6\u79fb\u8fd0\u7b97\u7684\u529f\u80fd\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u6240\u6709\u4f4d\u5411\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u5de6\u8fb9\uff08\u9ad8\u4f4d\uff09\u79fb\u51fa\u7684\u90e8\u5206\u820d\u53bb\uff0c\u53f3\u8fb9\uff08\u4f4e\u4f4d\uff09\u81ea\u52a8\u8865\u96f6\u3002</p> <p>\u53f3\u79fb\u8fd0\u7b97\u201c&gt;&gt;\u201d\u662f\u4e00\u4e2a\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u53f3\u79fb\u8fd0\u7b97\u7684\u529f\u80fd\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u6240\u6709\u4f4d\u5411\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u53f3\u8fb9\uff08\u4f4e\u4f4d\uff09\u79fb\u51fa\u7684\u90e8\u5206\u820d\u53bb\uff0c\u5de6\u8fb9\uff08\u9ad8\u4f4d\uff09\u79fb\u5165\u7684\u4e8c\u8fdb\u5236\u6570\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6570\u548c\u6b63\u6574\u6570\uff0c\u9ad8\u4f4d\u88650\uff1b\u5bf9\u4e8e\u8d1f\u6574\u6570\uff0c\u9ad8\u4f4d\u88651</p> <p>\u6309\u4f4d\u201c\u4e0e\u201d\u8fd0\u7b97\u7b26\u8981\u6c42\u6709\u4e24\u4e2a\u8fd0\u7b97\u91cf\uff0c\u5176\u529f\u80fd\u662f\u5c06\u4e24\u4e2a\u8fd0\u7b97\u91cf\u7684\u5404\u4e2a\u76f8\u5e94\u4f4d\u5206\u522b\u8fdb\u884c\u201c\u4e0e\u201d\u8fd0\u7b97\u3002</p> <p>\u6309\u4f4d\u201c\u6216\u201d\u8fd0\u7b97\u7b26\u8981\u6c42\u6709\u4e24\u4e2a\u8fd0\u7b97\u91cf\uff0c\u5176\u529f\u80fd\u662f\u5c06\u4e24\u4e2a\u8fd0\u7b97\u91cf\u7684\u5404\u4e2a\u76f8\u5e94\u4f4d\u5206\u522b\u8fdb\u884c\u201c\u6216\u201d\u8fd0\u7b97\u3002</p> <p>\u8fd0\u7b97\u89c4\u5219\u4e3a: 1|1=1 0|1=1 1|0=1 0&amp;0=0</p> <p>\u6309\u4f4d\u201c\u5f02\u6216\u201d\u8fd0\u7b97\u7b26\u8981\u6c42\u6709\u4e24\u4e2a\u8fd0\u7b97\u91cf\uff0c\u5176\u529f\u80fd\u662f\u5c06\u4e24\u4e2a\u8fd0\u7b97\u91cf\u7684\u5404\u4e2a\u76f8\u5e94\u4f4d\u5206\u522b\u8fdb\u884c\u201c\u5f02\u6216\u201d\u8fd0\u7b97</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#undefined-behavior","title":"Undefined behavior","text":"<p>The C language standard precisely specifies the observable behavior of C language programs, except for the ones in the following categories:</p> <ul> <li> <p>undefined behavior - there are no restrictions on the behavior of the program. Examples of undefined behavior are memory accesses outside of array bounds, signed integer overflow, null pointer dereference, modification of the same scalar more than once in an expression without sequence points, access to an object through a pointer of a different type, etc. Compilers are not required to diagnose undefined behavior (although many simple situations are diagnosed), and the compiled program is not required to do anything meaningful.    \u8d85\u6570\u7ec4\u3001\u8d85\u6570\u636e\u7c7b\u578b\u5185\u5b58\u4e0a\u9650\u3001\u7a7a\u6307\u9488\u89e3\u5f15\u7528\u3001\u4e0d\u540c\u7c7b\u578b\u6307\u9488\u53bb\u6307\u5411\u4e00\u4e2a\u53d8\u91cf\u3001\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf</p> </li> <li> <p>unspecified behavior - two or more behaviors are permitted and the implementation is not required to document the effects of each behavior. For example, order of evaluation, whether identical string literals are distinct, etc. Each unspecified behavior results in one of a set of valid results and may produce a different result when repeated in the same program. (Unspecified \u4e5f\u7b97\u662f Undefined)</p> </li> <li> <p>implementation-defined behavior - unspecified behavior where each implementation documents how the choice is made. For example, number of bits in a byte, or whether signed integer right shift is arithmetic or logical.</p> </li> <li> <p>locale-specific behavior - implementation-defined behavior that depends on the currently chosen locale. For example, whether islower returns true for any character other than the 26 lowercase Latin letters.</p> </li> </ul> <p>(Note: Strictly conforming programs do not depend on any unspecified, undefined, or implementation-defined behavior)</p> <p>The compilers are required to issue diagnostic messages (either errors or warnings) for any programs that violates any C syntax rule or semantic constraint, even if its behavior is specified as undefined or implementation-defined or if the compiler provides a language extension that allows it to accept such program. Diagnostics for undefined behavior are not otherwise required.</p> <p>\u4e00\u4e2a\u597d\u7684C\u7a0b\u5e8f\u5e94\u8be5\u6ca1\u6709\u4efb\u4f55undefined behavior\uff1b \u800cundefined behavior means \"everything is possible\"</p> <pre><code>i = ++i + i++; // undefined behavior\ni = i++ + 1;   // undefined behavior\nprintf(\"%d, %d\\n\", i, i++); // undefined behavior\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#operator","title":"Operator","text":"<p>Unless otherwise stated, the order in which the operands are evaluated is unspecified.</p> <ul> <li>We will see that <code>&amp;&amp;</code>, <code>||</code> and <code>?:</code> (and also <code>,</code>, in recitations) have specified evaluation order of their operands.</li> </ul> <p>Examples: In the following expressions, it is unspecified whether <code>f</code> is called before <code>g</code>.</p> <ul> <li><code>f() + g()</code></li> <li><code>f() == g()</code></li> </ul> <p>\u6709\u4e0a\u9762\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6709\uff1a Let <code>A</code> and <code>B</code> be two expressions. The behavior is undefined if</p> <ul> <li>the order in which <code>A</code> and <code>B</code> are evaluated is unspecified, and  </li> <li>both <code>A</code> and <code>B</code> modify an object, or one modifies an object and the other uses its value.</li> </ul> <p><code>i = ++i + i++; // undefined behavior</code> \u56e0\u4e3a\u524d\u9762\u540e\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u65e0\u6cd5\u786e\u5b9a\u8c01\u5148\u8c01\u540e\uff08\u4e0d\u662f\u4ece\u5de6\u5230\u53f3\uff0c\u56e0\u4e3a\u8fd9\u91cc\u5176\u5b9e\u662f\u4e24\u4e2a\u51fd\u6570\uff09\u800c\u8fd9\u4e24\u4e2a\u8868\u8fbe\u5f0f\u90fd\u662f\u5c1d\u8bd5\u4fee\u6539i\u7684\uff1b \u5f53\u7136\u5982\u679c\u4e00\u4e2a\u662f\u6539i\uff0c\u53e6\u4e00\u4e2a\u662f\u7528i\uff0c\u90a3\u4e48\u4e5f\u662fundefined</p> <p>Comparison operators are binary operators that test a condition and return <code>1</code> if that condition is logically true and <code>0</code> if it is logically false.</p> <p>Note: Comparison operators in C cannot be chained.</p> <p>Example: <code>a &lt; b &lt; c</code> is interpreted as <code>(a &lt; b) &lt; c</code> (due to left-associativity), which means to</p> <ul> <li>compare <code>(a &lt; b)</code> first, whose result is either <code>0</code> or <code>1</code>, and then</li> <li>compare <code>0 &lt; c</code> or <code>1 &lt; c</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_3","title":"\u6307\u9488\u4e0e\u6570\u7ec4","text":"<p>\u5c0f\u6280\u5de7\uff1a\u5982\u4f55\u907f\u514d\u89e3\u5f15\u7528\u7a7a\u6307\u9488\uff1a</p> <p><code>if (ptr != NULL &amp;&amp; *ptr == 42) { /* ... */ }</code> \u5982\u679c\u662f\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u53f3\u8fb9\u7684\u89e3\u5f15\u7528\u4e0d\u4f1a\u8fdb\u884c\uff0c\u56e0\u4e3a\u5de6\u8fb9\u4e00\u5224\u65ad\u5b8c\u5c31\u77e5\u9053\u4e0d\u5fc5\u518d\u770b\u5de6\u8fb9\u4e86</p> <p>A pointer that does not point to an existing object may be</p> <ul> <li>uninitialized (wild), or</li> <li>a null pointer, or</li> <li>dangling (We will discuss this in later lectures.), or</li> <li>holding some other meaningless address: <code>int *p = 123;</code></li> </ul> <p>Dereferencing such a pointer is undefined behavior, and usually causes severe runtime errors.</p> <p>If an array is declared without explicit initialization:</p> <ul> <li>Global or local <code>static</code>: Empty-initialization \u21d2 Every element is empty-initialized.</li> <li>Local non-<code>static</code>: Every element is initialized to indeterminate values (uninitialized).</li> </ul> <pre><code>int main(void) {\n  int a[10] = {1, 2, 3}; // a[3], a[4], ... are all initialized to zero.\n  int b[100] = {0};      // All elements of b are initialized to zero.\n  int c[100] = {1};      // c[0] is initialized to 1,\n                         // and the rest are initialized to zero.\n}\n</code></pre> <p>Nested Arrays:  (\u521d\u59cb\u5316\u6709\u5f88\u591a\u65b9\u6cd5)</p> <pre><code>int a[4][3] = { // array of 4 arrays of 3 ints each (4x3 matrix)\n    { 1 },      // row 0 initialized to {1, 0, 0}\n    { 0, 1 },   // row 1 initialized to {0, 1, 0}\n    { [2]=1 },  // row 2 initialized to {0, 0, 1}\n};              // row 3 initialized to {0, 0, 0}\nint b[4][3] = {    // array of 4 arrays of 3 ints each (4x3 matrix)\n  1, 3, 5, 2, 4, 6, 3, 5, 7 // row 0 initialized to {1, 3, 5}\n};                          // row 1 initialized to {2, 4, 6}\n                            // row 2 initialized to {3, 5, 7}\n                            // row 3 initialized to {0, 0, 0}\nint y[4][3] = {[0][0]=1, [1][1]=1, [2][0]=1};  // row 0 initialized to {1, 0, 0}\n                                               // row 1 initialized to {0, 1, 0}\n                                               // row 2 initialized to {1, 0, 0}\n                                               // row 3 initialized to {0, 0, 0}\n</code></pre> <p>Pointer arithmetic:</p> <p></p> <p>\u8fd9\u91ccp+1\u4e2d\u76841\u4ee3\u8868\u7684\u662f1\u4e2a\u5b57\u8282\uff0c\u56db\u4f4d</p> <p>Let <code>p</code> be a pointer of type <code>T *</code> and let <code>i</code> be an integer.</p> <ul> <li><code>p + i</code> returns the address equal to the value of <code>(char *)p + i * sizeof(T)</code>. In other words, pointer arithmetic uses the unit of the pointed-to type.</li> <li>If we let <code>p = &amp;a[0]</code>(where a is an array of type T [N]), then</li> <li><code>p + i</code> is equivalent to <code>&amp;a[i]</code>, and</li> <li><code>*(p + i)</code> is equivalent to <code>a[i]</code>.</li> </ul> <p>Pointer arithmetic can only happen within the range of an array and its \"past-the-end\" position (indexed [0,N-1]). For other cases, the behavior is undefined.</p> <p>Examples of undefined behaviors:</p> <ul> <li><code>p1 - p2</code>, where <code>p1</code> and <code>p2</code> point to the positions of two different arrays.</li> <li><code>p + 2 * N</code>, where <code>p</code> points to some element in an array of length <code>N</code>.</li> <li><code>p - 1</code>, where <code>p</code> points to the first element <code>a[0]</code> of some array <code>a</code>.</li> </ul> <p>Note that the evaluation of the innocent-looking expression <code>p - 1</code>, without dereferencing it, is still undefined behavior and may fail on some platforms.</p> <p>Considering the close relationship between arrays and pointers, an array can be implicitly converted to a pointer to the first element: <code>a</code> \u2192 <code>&amp;a[0]</code>, <code>T [N]</code> \u2192 <code>T \\*</code>.</p> <ul> <li><code>p = &amp;a[0]</code> can be written as <code>p = a</code> directly.</li> <li><code>*a</code> is equivalent to <code>a[0]</code>.  </li> </ul> <p>\u4e0a\u9762\u5c31\u6d89\u53ca\u5230\u4e86\u6570\u7ec4\u6307\u9488\u7684\u9000\u5316\uff0c\u4e5f\u5c31\u6d89\u53ca\u5230\u4e86\uff1a how to pass an array to a function:</p> <pre><code>void fun(int *a);\nvoid fun(int a[]);\nvoid fun(int a[10]);\nvoid fun(int a[2]);\n</code></pre> <p>Return an array? Sorry, there is no way to return a n array from a function. \u8fd4\u56de\u5730\u5740\u5012\u662f\u53ef\u4ee5\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u6ce8\u610f\uff1a</p> <pre><code>int *foo(void) {\n  int a[10] = {0};\n  return a;\n}\n</code></pre> <p>\u7c7b\u4f3c\u4e8e\u8fd9\u6837\u7684\u4e8b\u60c5\u4e0d\u80fd\u53d1\u751f\uff01\u867d\u7136\u8bf4\u8fd4\u56de\u7684\u5176\u5b9e\u662f\u6307\u9488\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u5f00\u8f9f\u5728\u6808\u533a\uff0c\u51fd\u6570\u8c03\u7528\u7ed3\u675f\uff0c\u6570\u7ec4\u5c31\u91ca\u653e\u4e86\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u6307\u9488\u4e5f\u5c31\u53d8\u6210\u4e86\u91ce\u6307\u9488\uff01\u89e3\u5f15\u7528\u5c31undifined behavior</p> <p>Pointer to array:</p> <p>A pointer to an array of <code>N</code> <code>int</code>s:</p> <pre><code>int (*parr)[N];\n</code></pre> <p>An array of <code>N</code> pointers (pointing to <code>int</code>):</p> <pre><code>int *arrp[N];\n</code></pre> <ul> <li><code>int (*parr)[N]</code>has a pair of parentheses around * and parr, so</li> <li><code>parr</code> is a pointer (<code>*</code>), and</li> <li>points to something of type <code>int[N]</code>.</li> <li>Then the other one is different:</li> <li><code>arrp</code> is an array, and</li> <li>stores <code>N</code> pointers, with pointee type <code>int</code>.</li> </ul> <p>Passing a nested array to a function:</p> <pre><code>void fun(int (*a)[N]); // recommanded, for its convenient format \nvoid fun(int a[][N]);\nvoid fun(int a[2][N]);\nvoid fun(int a[10][N]);\n</code></pre> <p>The parameter is of type <code>int (*)[N]</code>, which is a pointer to <code>int[N]</code>.</p> <p>We can pass an array of type <code>int[K][N]</code> to <code>fun</code>, where <code>K</code> is arbitrary.</p> <ul> <li>The size for the second dimension must be N.</li> <li><code>T[10]</code> and <code>T[20]</code> are different types, so the pointer types <code>T(*)[10]</code> and <code>T(*)[20]</code> are not compatible.</li> </ul> <p>In each of the following declarations, what is the type of <code>a</code>? Does it accept an argument of type <code>int[N][M]</code>?</p> <ol> <li><code>void fun(int a[N][M])</code>: A pointer to <code>int[M]</code>. Yes.</li> <li><code>void fun(int (*a)[M])</code>: Same as 1.</li> <li><code>void fun(int (*a)[N])</code>: A pointer to <code>int[N]</code>. Yes iff <code>N == M</code>.</li> <li><code>void fun(int **a)</code>: A pointer to <code>int *</code>. No.</li> <li><code>void fun(int *a[])</code>: Same as 4.</li> <li><code>void fun(int *a[N])</code>: Same as 4.</li> <li><code>void fun(int a[100][M])</code>: Same as 1.</li> <li><code>void fun(int a[N][100])</code>: A pointer to <code>int[100]</code>. Yes iff <code>M == 100</code></li> </ol> <p>void * \u6307\u9488\uff1a A special pointer type:</p> <ul> <li>Any pointer can be implicitly converted to that type.</li> <li>A pointer of type void * can be implicitly converted to any pointer type.</li> <li>This must happen explicitly in C++.</li> </ul> <p>Use <code>printf(\"%p\", ptr);</code> to print the value of a pointer <code>ptr</code> of type <code>void *</code>.</p> <ul> <li>If <code>ptr</code> is a pointer of some other type, a conversion is needed</li> <li><code>printf(\"%p\", (void *)ptr);</code></li> </ul> <p><code>void *</code> is often used to represent \"pointer to anything\", \"location of some memory\", or even \"any object\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#dynamic-memory","title":"Dynamic memory","text":"<p>Create an \"array\" whose size is determined at runtime? \u7f16\u8bd1\u9636\u6bb5\u5c31\u9700\u8981\u77e5\u9053\u6570\u7ec4\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u6570\u7ec4\u5143\u7d20\u6570\u91cf\u548c\u6570\u636e\u7c7b\u578b</p> <ul> <li>We need a block of memory, the size of which can be determined at runtime.</li> <li>If we run out of memory, we need to know.</li> <li>We may require a pretty large chunk of memory.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#using-malloc-and-free-and-calloc","title":"Using malloc and free and calloc","text":"<p>Declared in <code>&lt;stdlib.h&gt;</code>.</p> <pre><code>void *malloc(size_t size);\n</code></pre> <p>Allocates <code>size</code> bytes of uninitialized storage on heap.</p> <p>If allocation succeeds, returns the starting address of the allocated memory block.</p> <p>If allocation fails, a null pointer is returned.</p> <ul> <li>size_t:  A type that can hold the size (number of bytes) of any object. It is</li> <li>declared in <code>&lt;stddef.h&gt;</code>, and</li> <li>is an unsigned integer type,</li> <li>whose size is implementation-defined. For example, it may be 64-bit on a 64-bit machine, and 32-bit on a 32-bit machine.</li> </ul> <pre><code>T *ptr = malloc(sizeof(T) * n); // sizeof(T) * n bytes\nfor (int i = 0; i != n; ++i)\n  ptr[i] = /* ... */\n// Now you can use `ptr` as if it points to an array of `n` objects of type `T`\n// ...\nfree(ptr); // to avoid memory leak \n</code></pre> <p>In addition: There is no need to do a null check before calling <code>free</code>!\uff08\u5982\u679c\u662f\u7a7a\u6307\u9488\uff0cfree\u51fd\u6570\u4e0d\u4f1a\u505a\u4efb\u4f55\u4e8b\u60c5\uff09</p> <p>\u8bfb\u53d6\u53ea\u9700\u8981\uff1a<code>scanf(\"%s\", str)</code>, \u56e0\u4e3astr\u5df2\u7ecf\u662f\u6307\u9488\u4e86</p> <p>\u91cd\u70b9\uff01\u91cd\u590d\u91ca\u653e\u662f\u4e00\u79cdUndefined behavior</p> <p>Create a \"2-d array\" on heap?</p> <pre><code>int **p = malloc(sizeof(int *) * n);\nfor (int i = 0; i &lt; n; ++i)\n  p[i] = malloc(sizeof(int) * m); // p\u5df2\u7ecf\u80fd\u5f53\u6570\u7ec4\u7528\u4e86\uff1bp\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5730\u5740\uff1b\u8fd9\u53e5\u8bdd\u4f7f\u5f97\u5730\u5740\u6307\u5411\u7684\u4e5f\u662f\u4e00\u4e2a\u201c\u6570\u7ec4\u201d\nfor (int i = 0; i &lt; n; ++i)\n  for (int j = 0; j &lt; m; ++j)\n    p[i][j] = /* ... */   // \u5df2\u7ecf\u80fd\u5f53\u4e8c\u7ef4\u6570\u7ec4\u4f7f\u7528\u6307\u9488\u4e86\n// ...\nfor (int i = 0; i &lt; n; ++i)\n  free(p[i]);\nfree(p); // \u91ca\u653e\u4e5f\u662f\u9010\u7ea7\u91ca\u653e\n</code></pre> <p>\u4f46\u662f\u4e5f\u9700\u8981\u6ce8\u610f\uff1a\u8981\u91ca\u653e\u5c31\u6574\u4f53\u5b8c\u5168\u91ca\u653e\uff0c\u4e0d\u80fd\u53ea\u91ca\u653e\u4e00\u90e8\u5206</p> <p>C \u5e93\u51fd\u6570 void *calloc(size_t nitems, size_t size) \u5206\u914d\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5b83\u7684\u6307\u9488\u3002malloc \u548c calloc \u4e4b\u95f4\u7684\u4e0d\u540c\u70b9\u662f\uff0cmalloc \u4e0d\u4f1a\u8bbe\u7f6e\u5185\u5b58\u4e3a\u96f6(\u4e0d\u4f1a\u8fdb\u884c\u521d\u59cb\u5316)\uff0c\u800c calloc \u4f1a\u8bbe\u7f6e\u5206\u914d\u7684\u5185\u5b58\u4e3a\u96f6\uff08\u7a7a\u521d\u59cb\u5316\uff09\u3002</p> <p><code>void *calloc(size_t nitems, size_t size)</code>, \u53c2\u6570\u7b2c\u4e00\u4e2a\u662f\u5206\u914d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7684\u5927\u5c0f\uff1b\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u5df2\u5206\u914d\u7684\u5185\u5b58\u3002\u5982\u679c\u8bf7\u6c42\u5931\u8d25\uff0c\u5219\u8fd4\u56de NULL\u3002</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#string","title":"String","text":"<p>C does not have a special construct for \"string\".</p> <p>A string is a sequence of characters stored contiguously. We often use an array or a pointer to the first character to represent a string.</p> <ul> <li>It can be stored in an array, or in dynamically allocated memory.</li> <li>It must be null-terminated: There should be a null character <code>'\\0'</code> at the end.</li> </ul> <pre><code>char s[10] = \"abcde\";  // s = {'a', 'b', 'c', 'd', 'e', '\\0'}\nprintf(\"%s\\n\", s);     // prints abcde\nprintf(\"%s\\n\", s + 1); // prints bcde , +1\u4ee3\u8868\u5168\u4f53\u524d\u79fb\u4e00\u4f4d\u540e\u7684\u7ed3\u679c\uff0ca\u6254\u6389\u4e86\ns[2] = ';';            // s = \"ab;de\"\nprintf(\"%s\\n\", s);     // prints ab;de\ns[2] = '\\0';\nprintf(\"%s\\n\", s);     // prints ab\n</code></pre> <p>\u7b2c\u4e09\u884c\u5176\u5b9e\u662f\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u89e3\u9898\u4e2d\u53ef\u80fd\u4f1a\u4f7f\u7528</p> <p>The position of the first <code>'\\0'</code> is the end of the string. Anything after that is discarded.</p> <p>Every standard library function that handles strings will search for <code>'\\0'</code> in that string.</p> <ul> <li>If there is no <code>'\\0'</code>, they will search nonstop, and eventually go out of range (undefined behavior).</li> </ul> <pre><code>char s[5] = \"abcde\"; // OK, but no place for '\\0'.\nprintf(\"%s\\n\", s);   // undefined behavior (missing '\\0')\n</code></pre> <p><code>scanf</code>/<code>printf</code>: <code>\"%s\"</code></p> <ul> <li> <p>%s in scanf matches a sequence of non-whitespace characters.</p> </li> <li> <p>Leading whitespaces are discarded. // \u5f00\u5934\u7684''\u7a7a\u683c''\uff08whitespace\uff09\u90fd\u7701\u7565\u6389</p> </li> <li>Reading starts from the first non-whitespace character, and stops right before the next whitespace character. // \u5728\u4e0b\u4e00\u4e2awhitespace\u505c\u6b62\u8bfb\u53d6</li> <li><code>'\\0'</code> will be placed at the end. // \u800c\u4e14\u6700\u540e\u4f1a\u5c06\u4e00\u4e2a/0\u7d27\u63a5\u7740\u8bfb\u53d6\u5185\u5bb9\u88ab\u8bfb\u53d6\u8fdb\u53bb\uff08\u89c1\u4e0b\u4f8b\uff09</li> </ul> <p>Suppose the input is <code>123  456</code>:</p> <pre><code>char str[100] = \"abcdef\";\nscanf(\"%s\", str); // Reads \"123\". `str` becomes {'1', '2', '3', '\\0', 'e', 'f'}\nprintf(\"%s\\n\", str); // Prints \"123\".\n                     // 'e' and 'f' are not considered as part of the string.\n</code></pre> <p>\u4e0a\u9762\u8fd9\u79cd\u8bfb\u6cd5\u660e\u663e\u592a\u9ebb\u70e6\u800c\u4e14\u5bb3\u6015\u8d85\u4e0a\u9650</p> <p><code>gets</code> reads a string without bounds checking. It has been removed since C11.</p> <ul> <li>An alternative for <code>gets</code> that does bounds checking is <code>gets_s</code>, but not supported by every compiler.</li> </ul> <p>The best alternative: <code>fgets</code>. It is more portable, more generic, and safer (with bounds checking).</p> <pre><code>char str[100];\nfgets(str, 100, stdin);\n</code></pre> <p><code>**puts(str)**</code>: Prints the string <code>str</code>, followed by a newline.</p> <p>String manipulation / examination</p> <p>Some common standard library functions: declared in <code>&lt;string.h&gt;</code>.</p> <ul> <li><code>strlen(str)</code>: Returns the length of the string <code>str</code>.</li> <li><code>strcpy(dest, src)</code>: Copies the string <code>src</code> to <code>dest</code>.</li> <li><code>strcat(dest, src)</code>: Appends a copy of <code>src</code> to the end of <code>dest</code>.</li> <li><code>strcmp(s1, s2)</code>: Compares two strings in lexicographical order.</li> <li><code>strchr(str, ch)</code>: Finds the first occurrence of <code>ch</code> in <code>str</code>.</li> </ul> <p>This page is only a brief introduction which cannot be relied on. The detailed documentations can be found here.</p> <p>\u66f4\u591a\u51fd\u6570\u7ec6\u8282\u89c1\u4e0b\uff1a</p> <p>Implement your own <code>strlen</code>, which accepts a pointer to the first character of a string and returns its length.</p> <pre><code>size_t my_strlen(const char *str) { // const\u52a0\u5165\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u5bf9\u8f93\u5165\u7684string\u8fdb\u884c\u6539\u53d8\n  size_t ans = 0; // \u5f53\u4f5c\u6307\u9488\u5bf9\u5f85\n  while (*str != '\\0') { // \u89e3\u5f15\u7528\u540e\u53d1\u73b0\u4e0d\u662f'\\0'\n    ++ans;\n    ++str; // \u8fd9\u91cc\u81ea\u52a8\u52a0\u7684\u5c31\u662f\u6570\u636e\u7c7b\u578b\u7684\u5b57\u8282\u6570\n  }\n  return ans;\n}\n</code></pre> <pre><code>size_t my_strlen(const char *str) {\n  const char *end = str; // \u5f53\u4f5c\u6570\u7ec4\u5bf9\u5f85\uff0c\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5b83\n  while (*end != '\\0')\n    ++end;\n  return end - str; // \u89e3\u5f15\u7528\u540e\u53d1\u73b0\u662f'\\0'\u7684\u5730\u5740\u51cf\u53bb\u9996\u5730\u5740\uff0c\u53c8\u7531\u4e8echar\u5185\u5b58\u662f1\u5b57\u8282\n}\n</code></pre> <pre><code>size_t my_strlen(const char *str) {\n  size_t ans = 0;\n  while (*str++ != '\\0') // Understand and learn to use this.\n    ++ans; // \u6ce8\u610f\u662f\u5148str\u540e++\uff0c\u6307\u7684\u662f\u5148\u5224\u65ad\uff0c\u7136\u540e\u518d\u5730\u5740+1\n  return ans;\n}\n</code></pre> <p>\u5982\u679c\u60f3\u8981\u4e00\u4e2a\u6307\u9488\u6307\u5411string, \u90a3\u4e48\u6700\u597d\u7528const char , \u56e0\u4e3astring\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u5176\u5b9e\u662fconst char*</p> <p>\u6362\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u4e32\u5e38\u91cf\u5b58\u653e\u5728\u5e38\u91cf\u533a\u800c\u975e\u6808\u533a</p> <p>\u90a3\u4e48\u60f3\u901a\u8fc7\u6307\u9488\u6765\u5b57\u7b26\u4e32\u5176\u5b9e\u662f\u4e0d\u53ef\u80fd\u7684\uff1b \u4f46\u662f\u901a\u8fc7malloc\u8fd4\u56de\u7684\u6307\u9488\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u5176\u5b9e\u6307\u9488\u64cd\u63a7\u7684\u5185\u5b58\u5728\u5806\u533a</p> <p>Using a pointer to non-<code>const</code> to point to a string literal is allowed in C (not allowed in C++), but very dangerous:</p> <pre><code>char *p = \"abcde\"; // OK\np[3] = 'a'; // No compile-error, but undefined behavior,\n            // and possibly severe runtime-error.\n</code></pre> <p>Correct ways: Use low-level <code>const</code>ness to protect it:</p> <pre><code>const char *str = \"abcde\";\nstr[3] = 'a'; // compile-error\n</code></pre> <p>Or : Copy the content into an array instead of using a pointer pointing to it </p> <pre><code>char arr[] = \"abcde\";\narr[3] = 'a'; // OK.\n// `arr` contains a copy of \"abcde\".\n</code></pre> <p>Array of strings </p> <pre><code>const char *translations[] = {\n  \"zero\", \"one\", \"two\", \"three\", \"four\",\n  \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n};\n</code></pre> <ul> <li><code>translations</code> is an array of pointers, where each pointer points to a string literal.</li> <li><code>translations</code> is not a 2-d array!</li> </ul> <p></p> <p>Summary:</p> <p>A C-style string is a sequence of characters stored contiguously, with <code>'\\0'</code> at the end.</p> <ul> <li>Never forget the null character <code>'\\0'</code>.</li> <li>String literals are not modifiable, even though their types are not const</li> <li>It's better to use a pointer to <code>const</code> to point to a string literal.</li> <li>I/O: <code>scanf</code>/<code>printf</code>, <code>fgets</code>, <code>puts</code></li> <li>String manipulation / examination functions like <code>strlen</code>, <code>strcmp</code>, <code>strcpy</code>, ...</li> <li>Conversions to and from numeric formats: <code>strtol</code>, <code>strtoll</code>, ...</li> </ul> <p>Read a string of unknown length</p> <p>Suppose we want to read a sequence of non-whitespace characters, the length of which is unknown.</p> <ul> <li>Use <code>malloc</code> / <code>free</code> to allocate and deallocate memory dynamically.</li> <li>When the current buffer is not large enough, we allocate a larger one and copies the stored elements to it!</li> </ul> <pre><code>char *read_string(void) {\n  // \u5148\u83b7\u53d6\u975e\u7a7a\u767d\u7684\u5b57\u7b26\u4eec\uff1a\n  char c = getchar();\n  while (isspace(c))\n    c = getchar();\n  // \u5982\u679c\u8df3\u51fa\u4e86\u5faa\u73af\uff0c\u8bf4\u660ec\u4e0d\u662fwhitespace\u4e86\n  char *buffer = malloc(INITIAL_SIZE);\n  int capacity = INITIAL_SIZE;\n  int cur_pos = 0; // The index at which we store the input character.\n  while (!isspace(c)) { // \u53ea\u8981\u4e0d\u9047\u5230\u4e0b\u4e00\u4e2awhitespace\uff1a\n    if (cur_pos == capacity - 1) { // `-1` is for '\\0'.\u6070\u597d\u653e\u4e0d\u4e0b'\\0'\u7684\u65f6\u5019\uff1a\n      char *new_buffer = malloc(capacity * 2);\n      memcpy(new_buffer, buffer, cur_pos); // copy everything we have stored\n                                           // to the new buffer\n      free(buffer);  // !!!!!!!!!!!\n      capacity *= 2;\n      buffer = new_buffer;\n      // \u4e3a\u4ec0\u4e48\u4e0d\u7528free new_buffer? \u5176\u5b9e\u4e24\u4e2a\u662f\u6307\u9488\uff0cbuffer\u6307\u9488\u5bf9\u5e94\u7684\u5185\u5b58\u91ca\u653e\u4e86\n      // \u800cnew_buffer\u5bf9\u5e94\u7684\u7a7a\u95f4\u662f\u66f4\u65b0\u540e\u7684\uff0c\u6240\u4ee5\u8ba9buffer\u6307\u9488\u6307\u5411new_buffer\u6307\u5411\u7684\u5185\u5b58\n      // \u800cnew_buffer\u8fd9\u4e2a\u6307\u9488\u4f1a\u968f\u7740while\u4e0d\u65ad\u66f4\u65b0\uff0c\u4f46\u6700\u540e\u51fd\u6570\u8c03\u7528\u7ed3\u675f\u7684\u65f6\u5019\uff0cnew_buffer       \n      // \u4f1a\u88ab\u91ca\u653e\u6389\uff08\u8fd9\u4e2a\u5730\u5740\u5b58\u653e\u5728\u6808\u533a\uff09\uff0cbuffer\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u4e0d\u8fc7\u662f\u91ca\u653e\u524dreturn\u51fa\u53bb\u4e86\n      // \u800cbuffer\u5bf9\u5e94\u7684\u5185\u5b58\u5728\u5806\u533a\u4e0d\u4f1a\u5728\u51fd\u6570\u7ed3\u675f\u7684\u65f6\u5019\u88ab\u91ca\u653e\n    }\n    buffer[cur_pos++] = c;\n    c = getchar();\n  }\n\n  // Now, `c` is a whitespace. This is not part of the contents we need.\n  ungetc(c, stdin); // Put that whitespace back to the input.\n\n  buffer[cur_pos] = '\\0'; // Remember this!!!\n\n  return buffer; // buffer\u4ee3\u8868\u7684\u5c31\u662f\u5185\u5b58\u5757\u7684\u9996\u5730\u5740\n}\nint main(void) {\n  char *content = read_string();\n  puts(content); // \u7528puts\u51fd\u6570\u6253\u5370\uff0c\u66f4\u65b9\u4fbf\n  free(content); // \u91ca\u653econtent\uff0c\u9632\u6b62memory leak\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_4","title":"\u9636\u6bb5\u6027\u67e5\u6f0f\u8865\u7f3a","text":"<ol> <li>\u7528malloc\u4e3a\u5b57\u7b26\u4e32\u5f00\u8f9f\u5185\u5b58\u7684\u65f6\u5019\u65e0\u6761\u4ef6\u9884\u7559\u597d'\\0'\u7684\u4f4d\u7f6e\uff1a </li> </ol> <p><code>char* str = malloc(sizeof(char) * (len + 1))</code></p> <ol> <li>\u5f00\u8f9f\u597d\u5185\u5b58\u4e4b\u540e\uff0c\u5982\u4f55\u8bfb\u53d6\uff1a</li> </ol> <p><code>scanf(\"%s\", str)</code>\u5c31\u53ef\u4ee5\u4e86</p> <ol> <li>ASCII\u7801\u4e2d\u4e0d\u662f\u6240\u6709\u7684\u90fd\u662f\u5b57\u7b26\uff01\u6709\u5f88\u591a\u547d\u4ee4\u6216\u8f6c\u4e49\u7684\uff01\u53ea\u670933-126\u662f\uff01</li> <li>\u4ea7\u751f\u968f\u673a\u6570\u5b57\uff1a</li> </ol> <pre><code># include &lt;time.h&gt;\nint main (void){\n    time_t t;\n    srand((unsigned) time(&amp;t)); // \u521d\u59cb\u5316\n    a = rand() % ?; // ?\u4ee3\u8868\u4f60\u60f3\u53d6\u6a21\u591a\u5c11\u4ece\u800c\u8fbe\u5230\u751f\u6210\u6570\u5b57\u7684\u8303\u56f4\n}\n</code></pre> <ol> <li>\u4e00\u4e9b\u4ee3\u7801\u6b23\u8d4f\uff1a</li> </ol> <pre><code>// \u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\nsize_t hw3_strlen(const char *str) {\n    // \u627e\u5230\u4e0d\u80fd\u591f\u89e3\u5f15\u7528\u7684\u5730\u5740\uff0c\u4e24\u4e2a\u5730\u5740\u4e4b\u95f4\u5c31\u662f\u957f\u5ea6\n    // \u56e0\u4e3achar\u7684\u5927\u5c0f\u5c31\u662f1\u4e2a\u5b57\u8282\n    const char *st = str;\n    while (*st != '\\0'){ // \u67e5\u5230NULL\uff08\u7a7a\uff09\u5c31\u505c\u6b62\u5faa\u73af\n        st++;\n    }\n    return st - str; // \u4e24\u4e2a\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u5c31\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\n}\n\n// \u5728\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5b57\u7b26\nchar *hw3_strchr(const char *str, int ch) {\n    // Pointer to the found character in str, or null pointer if no such character is found.\n    while (*str &amp;&amp; *str != ch){\n        str++; // \u89e3\u5f15\u7528\u540e\u4e0d\u662fNULL\uff0c\u800c\u4e14\u53d1\u73b0\u4e0d\u662fch\n    }\n    return (*str == ch) ? (char *)str : NULL;// \u5982\u679c\u89e3\u5f15\u7528\u6307\u5411\u4e86ch,\u8fd4\u56de\u5b83\uff1b \u4e0d\u662f\u7684\u8bdd\uff0c\u8fd4\u56de\u7a7a\u6307\u9488\n    // \u4f7f\u7528\u4e86\u4e09\u76ee\u8fd0\u7b97\u7b26\u8fdb\u884c\u7b80\u5316\u3002\u3002\u3002\n}\n\n// \u590d\u5236\u5b57\u7b26\u4e32\nchar *hw3_strcpy(char *dest, const char *src) {\n    char *ptr = dest; // \u8fd9\u4e2aptr\u4f1a\u79fb\u52a8\uff0c\u800cdest\u4e0d\u52a8\uff0c\u5c31\u662f\u4e3a\u4e86\u65b9\u4fbf\u8fd4\u56dedest\n    // \u8fd9\u7406\u5e94\u662f\u5e38\u89c1\u624b\u6cd5\n    while (*src !='\\0') {// \u53ef\u4ee5\u89e3\u5f15\u7528\uff0c\u5c31\u590d\u5236\n        *ptr = *src;\n        ptr++;\n        src++;\n    }\n    *ptr = '\\0'; // \u6dfb\u52a0\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\n    return dest;\n}\n\n// \u8fde\u63a5\u5b57\u7b26\u4e32\nchar *hw3_strcat(char *dest, const char *src) {\n    char *ptr = dest;\n    while (*ptr != '\\0'){\n        ptr++; // \u73b0\u5728ptr\u77e5\u9053\u4e86\u5c3e\u90e8\n    }\n    while (*src != '\\0') {// \u53ef\u4ee5\u89e3\u5f15\u7528\uff0c\u5c31\u590d\u5236\n        *ptr = *src;\n        ptr++;\n        src++;\n    }\n    *ptr = '\\0'; // \u5728\u76ee\u6807\u5b57\u7b26\u4e32\u672b\u5c3e\u6dfb\u52a0\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\n    return dest;\n}\n\n// \u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\nint hw3_strcmp(const char *lhs, const char *rhs) {\n    while (*lhs &amp;&amp; *rhs &amp;&amp; *lhs == *rhs) {\n        lhs++;\n        rhs++;\n    } // \u76f8\u540c\u60c5\u51b5\uff1a\u90fd\u80fd\u89e3\u5f15\u7528\u4e14\u4e24\u4e2a\u90fd\u76f8\u540c\n    // \u5982\u679c\u8df3\u51fa\u4e86\u5faa\u73af\uff0c\u8bf4\u660e\u8981\u4e48\u6709\u4e00\u4e2a\u662fNULL, \u8981\u4e48\u5b57\u7b26\u4e0d\u76f8\u540c\n    if (*lhs == '\\0' &amp;&amp; *rhs == '\\0'){\n        return 0;\n    }\n    if (*lhs == '\\0' || *rhs == '\\0'){\n        if (*lhs == '\\0'){\n            return -1;\n        }\n        else{\n            return 1;\n        }\n    }\n    return *lhs - *rhs;\n}\n</code></pre> <ol> <li>\u4f5c\u4e1a3prob4\u4e2d\u7684\u7cbe\u534e\uff1a</li> </ol> <pre><code>void explain_std(char* xxx) {\n    // \u8981\u6ce8\u610f\u5224\u65ad\u7684\u987a\u5e8f\u3002\u3002\u3002\n    if (strncmp(xxx, \"c++\", 3) == 0) {\n        printf(\"-std=%s: Set the language standard to %s%s.\\n\", xxx, \"ISO C++\", xxx + 3);\n    } \n    else if (strncmp(xxx, \"c\", 1) == 0) {\n        printf(\"-std=%s: Set the language standard to %s%s.\\n\", xxx, \"ISO C\", xxx + 1);\n    } \n    else if (strncmp(xxx, \"gnu++\", 5) == 0) {\n        printf(\"-std=%s: Set the language standard to %s%s.\\n\", xxx, \"GNU dialect of C++\", xxx + 5);\n    } \n    else if (strncmp(xxx, \"gnu\", 3) == 0) {\n        printf(\"-std=%s: Set the language standard to %s%s.\\n\", xxx, \"GNU dialect of C\", xxx + 3);\n    }\n}\n\n// other\nvoid explain_file(char* file) {\n    char* type;\n    const char *last_dot = strrchr(file, '.');  // \u627e\u5230\u6700\u540e\u4e00\u4e2a.\u7684\u4f4d\u7f6e\n    // \u6ce8\u610f\u5224\u65ad\u987a\u5e8f\u3002\u3002\u3002e.g. \u5982\u679c\u5148\u662f\u770bh\uff0c \u90a3\u4e48hpp hxx\u7684\u5224\u65ad\u6839\u672c\u4e0d\u4f1a\u8f6e\u5230\u4ed6\u4eec\n    if (strncmp(last_dot, \".cpp\", 4) == 0 || strncmp(last_dot, \".C\", 2) == 0 ||\n               strncmp(last_dot, \".cc\", 3) == 0 || strncmp(last_dot, \".cxx\", 4) == 0) {\n        type = \"C++ source code\";\n    } \n    else if (strncmp(last_dot, \".hpp\", 4) == 0 || strncmp(last_dot, \".hxx\",4) == 0) {\n        type = \"C++ header file\";\n    } \n    else if (strncmp(last_dot, \".c\", 2) == 0) {\n        type = \"C source code\";\n    } \n    else if (strncmp(last_dot, \".h\", 2) == 0) {\n        type = \"C/C++ header file\";\n    } \n    printf(\"%s: %s as input file.\\n\", file, type);\n}\n\nint main(int argc, char* argv[]) {\n    for (int i = 1; i &lt; argc; i++) {\n        if (strcmp(argv[i], \"-Wall\") == 0) {\n            explain_Wall();\n        } \n        else if (strcmp(argv[i], \"-Wpedantic\") == 0) {\n            explain_Wpedantic();\n        } \n        else if (strcmp(argv[i], \"-Wextra\") == 0) {\n            explain_Wextra();\n        } \n        else if (strcmp(argv[i], \"-Werror\") == 0) {\n            explain_Werror();\n        } \n        else if (strcmp(argv[i], \"-o\") == 0 ) {\n            explain_output(argv[i + 1]);\n            i++;  // \u8981\u770b\u4e0b\u4e0b\u4e2aargv[]\u4e86\n        } \n        else if (strcmp(argv[i], \"-I\") == 0 ) {\n            explain_include(argv[i + 1]);\n            i++;  \n        } \n        else if (strncmp(argv[i], \"-std=\", 5) == 0) { // \u53d1\u73b0\u524d\u4e94\u4e2a\u5b57\u7b26\u662f-std=\n            explain_std(argv[i] + 5);  // \u6307\u9488+5\uff0c \u8df3\u8fc7 \"-std=\"\n        } \n        else {\n            explain_file(argv[i]);\n        }\n    }\n    return 0;\n}\n</code></pre> <ol> <li>\u8c1c\u4e00\u6837\u7684\u8c03\u7528\u987a\u5e8f\uff1a</li> </ol> <p><code>printf(\"%d, %d\\n\", f(), g())</code>\uff0c \u5bf9\u4e8e\u8fd9\u53e5\u8bdd\u6765\u8bf4\uff0c\u6211\u4e0d\u77e5\u9053\u662ff\u51fd\u6570\u5148\u8c03\u7528\u8fd8\u662fg\uff0c\u4f46\u662f\u80fd\u786e\u5b9a\u7684\u662f\uff0c\u4e24\u4e2a\u90fd\u8c03\u7528\u5b8c\u6bd5\u4e4b\u540e\uff0c\u624d\u4f1a\u6253\u5370</p> <ol> <li>\u6253\u5370\u5b57\u7b26\u4e32\u662f\u5426\u6362\u884c\uff1f </li> </ol> <pre><code>const char *s = \"hello\";\nprintf(\"%s\\n\", s); // %s\u6253\u5370\u4e0d\u4f1a\u81ea\u52a8\u6362\u884c\nputs(s); // puts\u51fd\u6570\u4f1a\u81ea\u52a8\u6362\u884c\nputs(\"hello\");\n</code></pre> <pre><code>char str[5] = \"hello\";\nprintf(\"%s\\n\", str);\n// \u8fd9\u6bb5\u4ee3\u7801\u6709\u95ee\u9898\uff0c\u5e94\u8be5str[6]\u4ece\u800c\u7559\u4e0b'\\0' \uff1b \u6216\u8005\u76f4\u63a5str[]\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u5df1\u786e\u5b9a\u5927\u5c0f\uff0c\u5e76\u4e14\u786e\u4fdd\u7559\u4e0b\u4e86'\\0'\n// str\u5c06\u4f1a\u4ee3\u8868\u6570\u7ec4\u7684\u9996\u5730\u5740\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5728%s\u8f93\u51fa\u91cc\u9762\n</code></pre> <ol> <li>\u8bfb\u53d6string</li> </ol> <pre><code>char str[10];\nfgets(str, 10, stdin);\n</code></pre> <ul> <li>If the input is <code>aaabbbcccd</code> with a newline at the end, what is the content of the string <code>str</code>?</li> </ul> <p>\"aaabbbccc\"</p> <ul> <li>If the input is <code>aaabbbccc</code> with a newline at the end, what is the content of the string <code>str</code>?</li> </ul> <p>''aaabbbccc''</p> <ul> <li>If the input is <code>aaabbbcc</code> with a newline at the end, what is the content of the string <code>str</code>?</li> </ul> <p>''aaabbbcc\\n''</p> <p>\u4e0a\u9762\u8fd9\u4e09\u4e2a\u95ee\u9898\u4e2d\u53ef\u4ee5\u770b\u51fa\uff1a\u4e00\u5b9a\u4f1a\u9884\u7559'\\0', \u800c\u4e14\u5b83\u4e0d\u7b97content of the string</p> <p>\u4f46\u662f\u4e00\u65e6\uff0c\u5c31\u50cf\u7b2c\u4e09\u95ee\uff0c\u8bfb\u8fdb\u4e86\u6362\u884c\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u90fd\u7b97\u4f5c\u662fcontent of the string, i.e. '\\0'\u4e0d\u914d\u662f</p> <ul> <li>If we change <code>fgets(str, 10, stdin);</code> to <code>scanf(\"%s\", str);</code> and the input is <code>aaabbbcccd</code> with a newline at the end, what is the content of the string <code>str</code>?</li> </ul> <p>The program has undefined behavior!  fgets\u80fd\u591f\u786e\u4fdd\u9884\u7559\uff0c\u4f46\u662fscanf\u4e0d\u80fd\uff01\u4e00\u65e6\u6ca1\u7559\u4f4d\u7f6e\u5c31\u662fundefined behavior</p> <ol> <li>\u65e0\u8bba\u5982\u4f55\uff0c\u53ea\u6709<code>free(T *ptr)</code>\u53ef\u4ee5\u6b63\u786e\u91ca\u653e\u5185\u5b58</li> <li><code>void *malloc(size_t size);</code> \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u662fvoid, \u5e76\u4e0d\u4ee3\u8868\u8fd4\u56de\u7684\u662fvoid, \u800c\u662f<code>void*</code> \u7c7b\u578b\u662f\u4e00\u79cd\u901a\u7528\u6307\u9488\u7c7b\u578b\uff0c\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u3002\u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97 <code>malloc</code> \u51fd\u6570\u53ef\u4ee5\u5728\u4e0d\u77e5\u9053\u5177\u4f53\u6570\u636e\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u5206\u914d\u5185\u5b58\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5185\u5b58\u7684\u6307\u9488\u3002 \u800c\u5982\u679c\u5206\u914d\u5931\u8d25\uff0c\u5e76\u4e0d\u662f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u800c\u662f\u8fd4\u56deNULL*</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#struct","title":"struct","text":"<p>A <code>struct</code> is a type consisting of a sequence of members whose storage is allocated in an ordered sequence.</p> <p>Simply put, place several things together to form a new type.</p> <p>Unlike C++, the keyword <code>struct</code> here is necessary.</p> <p>Use <code>obj.mem</code>, the member-access operator <code>.</code> to access a member.</p> <pre><code>struct Student stu;\nstu.name = \"Alice\";\nstu.id = \"2024533000\";\nstu.entrance_year = 2024;\nstu.dorm = 8;\nprintf(\"%d\\n\", student.dorm);\n++student.entrance_year;\nputs(student.name);\n</code></pre> <p>\u5728\u5b9a\u4e49\u5b8c\u4e4b\u540e\uff0c\u4e5f\u53ef\u4ee5malloc\u4e00\u5757\u5730\u65b9\u5b58\u653e\u4e00\u4e2astruct\u7684\u5b9e\u4f8b\uff0c\u8fd4\u56de\u4e00\u4e2astruct ? *\u7c7b\u578b\u7684\u6307\u9488</p> <p><code>struct Student *pStu = malloc(sizeof(struct Student));</code></p> <p>Member access through a pointer: <code>ptr-&gt;mem</code>, or <code>(*ptr).mem</code> (not <code>*ptr.mem</code>!).</p> <p>As usual, don't forget to <code>free</code> after use.</p> <p>What is the value of <code>sizeof(struct Student)</code>?  \u5176\u5b9e\u8fd9\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u6bcf\u4e2a\u6210\u5458\u7684\u6570\u636e\u7c7b\u578b\u7684\u5185\u5b58\u76f8\u52a0\u5c31\u5b8c\u4e8b\u513f\u4e86</p> <p></p> <p>What happens if an object of <code>struct</code> type is not explicitly initialized?</p> <pre><code>struct Student gStu;\n\nint main(void) {\n  struct Student stu;\n}\n</code></pre> <ul> <li>Global or local <code>static</code>: \"empty-initialization\", which performs member-wise empty-initialization. // \u6bcf\u4e2a\u6210\u5458\u9010\u4e2a\u7a7a\u521d\u59cb\u5316</li> <li>Local non-<code>static</code>: every member is initialized to indeterminate values (in other words, uninitialized).</li> </ul> <p>Explicit initialization</p> <pre><code>struct Student stu = {.name = \"Alice\", .id = \"2024533000\",\n                      .entrance_year = 2024, .dorm = 8}; // designator, recommended!\nstruct Student *student_list = malloc(sizeof(struct Student) * n);\nfor (int i = 0; i != n; ++i) {\n  student_list[i].name = A(i); // A, B, C and D are some functions\n  student_list[i].id = B(i);\n  student_list[i].entrance_year = C(i);\n  student_list[i].dorm = D(i);\n}\n// \u8fd9\u91cc\u7684\u6307\u9488\u62d3\u5c55\u4e3a\u4e86\u201c\u6570\u7ec4\u201d\uff0c\u6bcf\u4e00\u4e2a\u5730\u5740\u90fd\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e86\u4e00\u4e2a\u5b9e\u4f8b\nvoid print_student(struct Student s) {\n  printf(\"Name: %s, ID: %s, dorm: %d\\n\", s.name, s.id, s.dorm);\n}\n\nprint_student(student_list[i]);\n\nstruct Student s = student_list[i]; // \u5b9e\u4f8b\u521b\u9020\u5b9e\u4f8b\uff0ccopy\u5173\u7cfb\n</code></pre> <p>\u7279\u6b8a\u7684\u5730\u65b9\uff1a Although an array cannot be copied, an array member can be copied.</p> <p>The copy of an array is element-wise copy.</p> <pre><code>int a[10];\nint b[10] = a; // Error!\nstruct A a;\nstruct A b = a; // OK\n</code></pre> <p>A <code>struct</code> is a type consisting of a sequence of members.</p> <ul> <li>Member access: <code>obj.mem</code>, <code>ptr-&gt;mem</code> (equivalent to <code>(*ptr).mem</code>, but better)</li> <li><code>sizeof(struct A)</code>, no less than the sum of size of every member.</li> <li>But not necessarily equal, due to memory alignment requirements.</li> <li>Implicit initialization: recursively performed on every member.</li> <li>Initializer-lists, designators, compound literals.</li> <li>Copy of a <code>struct</code>: member-wise copy.</li> <li>Argument passing and returning: copy.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#recurssion","title":"Recurssion\u2014\u2014\u9012\u5f52","text":"<p>\u5f15\u5b50 \uff1a \u8ba1\u7b97n!</p> <pre><code>int factorial(int n) {\n  int result = 1;\n  for (int i = 1; i &lt;= n; ++i)\n    result *= i;\n  return result;\n}\n</code></pre> <p>\u4f46\u662f\u5176\u5b9e\u53ef\u4ee5\u4e00\u884c\u4ee3\u7801\u89e3\u51b3\uff0c\u7834\u5c40\u70b9\u5c31\u662f n! = (n-1)! * n</p> <pre><code>int factorial(int n) {\n  return n == 0 ? 1 : n * factorial(n - 1);\n}\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u4e09\u76ee\u8fd0\u7b97\u7b26\uff01\u4e3a\u7684\u5c31\u662f\u5230\u6700\u540e\u8981\u505c\u6b62\u9012\u5f52</p> <p>\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a \u6253\u5370\u4e00\u4e2a\u6b63\u6574\u6570 \u53ea\u6709putchar()\u51fd\u6570</p> <pre><code>void print(unsigned x) {\n  if (x &gt;= 10)\n    print(x / 10);\n  putchar(x % 10 + '0');\n}\n</code></pre> <p>\u6ce8\u610f\u903b\u8f91\u5173\u7cfb\uff01\u4e0d\u662f\u5148putchar\uff01\u8fd9\u4e00\u4e2a\u70b9\u5176\u5b9e\u5c31\u662fpython\u7b97\u6cd5\u91cc\u9762\u63d0\u5230\u7684\u9012\u5f52\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4e0d\u518d\u590d\u8ff0\uff08\u5c24\u5176\u662f\u90a3\u5f20\u56fe\uff09</p> <p>\u7b2c\u4e09\u4e2a\u4f8b\u5b50\u2014\u2014selection sort</p> <pre><code>void sort_impl(int *a, int k, int n) {\n  if (k == n - 1)\n    return; // \u7ec8\u6b62\u6761\u4ef6\uff1a \u8303\u56f4\u4ec5\u4ec5\u662f\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u6570\u5b57\u81ea\u7136\u662f\u8303\u56f4\u91cc\u9762\u6700\u5c0f\u7684\n\n  int m = k;\n  for (int i = k + 1; i &lt; n; ++i)\n    if (a[i] &lt; a[m])\n      m = i;\n\n  swap(&amp;a[m], &amp;a[k]); // the \"swap\" function we defined in previous lectures\n\n  sort_impl(a, k + 1, n); // sort the rest part recursively\n}\n\nvoid sort(int *a, int n) {\n  sort_impl(a, 0, n);\n}\n//\u5176\u4e2d\uff0ck\u4ee3\u8868\u201c\u8303\u56f4\u201d\uff0c\u8303\u56f4\u5185\u627e\u5230\u6700\u5c0f\u7684\u5e76\u4e14\u7f6e\u9876\u4e8e\u8303\u56f4\u9876\u90e8\uff1b m\u662f\u7528\u6765\u627e\u5230\u6700\u5c0f\u7684\u6570\u5b57\u7684\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#c_1","title":"\u56de\u987eC","text":""},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#type","title":"type","text":"<p>C is a statically-typed language! \u6570\u636e\u7c7b\u578b\u8981\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u80fd\u5168\u90e8\u660e\u767d</p> <p></p> <ul> <li><code>1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code></li> <li> <p><code>sizeof(signed T) == sizeof(unsigned T)</code> for every <code>T</code></p> </li> <li> <p><code>short</code> and <code>int</code> are at least 16 bits. <code>long</code> is at least 32 bits. <code>long long</code> is at least 64 bits.</p> </li> <li>Whether <code>char</code> is signed or not is implementation-defined.</li> <li>Signed integer overflow is undefined behavior.</li> <li>Unsigned arithmetic never overflows**: It is performed modulo 2^N, where N is the number of bits of that type.</li> </ul> <p>Pointer Type:</p> <ul> <li>For <code>T</code> \u2260 <code>U</code>, <code>T *</code> and <code>U *</code> are different types.</li> <li>The value of a pointer of type <code>T *</code> is the address of an object of type <code>T</code>.</li> <li>Null pointer: The pointer holding the null pointer value, which is a special value indicating that the pointer is \"pointing nowhere\".</li> <li>A null pointer can be obtained from <code>NULL</code>.</li> <li>\u521b\u5efa\u4e00\u4e2a\u6307\u9488\u4f46\u662f\u4e0d\u7528\u7684\u65f6\u5019\uff0c\u6700\u597d\u5148\u521d\u59cb\u5316\u4e3a\u7a7a\u6307\u9488</li> <li><code>&amp;var</code> returns the address of <code>var</code>. The return type is pointer to the type of <code>var</code>.</li> <li>Only when a pointer is actually pointing to an object is it dereferenceable.</li> <li><code>*ptr</code>, where <code>ptr</code> is not dereferenceable, is undefined behavior.</li> </ul> <p>Array types</p> <pre><code>ElemType [N]\n</code></pre> <ul> <li><code>T [N]</code>, <code>U [N]</code> and <code>T [M]</code> are different types for <code>T</code> \u2260 <code>U</code> and <code>N</code> \u2260 <code>M</code>.</li> <li><code>N</code> should be compile-time constant. Otherwise it is a VLA.</li> <li>Valid index range: [0,N). Subscript out of range is undefined behavior.</li> <li>Decay: <code>a</code> \u2192 <code>&amp;a[0]</code>, <code>T [N]</code> \u2192 <code>T *</code>. // \u9000\u5316\u73b0\u8c61\uff1a\uff08\u81ea\u52a8\u4ee3\u8868\u9996\u5143\u7d20\u5730\u5740\uff09</li> </ul> <p>Pointer to array: <code>T (*)[N]</code>. Array of pointers: <code>T *[N]</code>.</p> <pre><code>int arr1[5] = {1, 2, 3, 4, 5};\nint *ptr1 = arr1; // Pointer to array\nint *arr2[5]; // Array of pointers\nfor (int i = 0; i &lt; 5; i++) {\n    arr2[i] = &amp;arr1[i]; // Assign the address of each element in arr1 to arr2\n}\n</code></pre> <p>\u521d\u59cb\u5316\uff1a</p> <ul> <li>Brace-enclosed list initializer for arrays and <code>struct</code>s: <code>= { ... }</code>.</li> <li>Designators for arrays: <code>= {[3] = 5, [7] = 4}</code></li> <li>Designators for <code>struct</code>s: <code>= {.mem1 = x, .mem2 = y}</code>.</li> </ul> <p>If a variable is declared without explicit initializer:</p> <ul> <li>For global or local static variables, they are empty-initialized:</li> <li><code>0</code> for integer types,</li> <li><code>+0.0</code> for floating-point types,</li> <li>null pointer value for pointer types.</li> <li>For local non-<code>static</code> variables, they are uninitialized, holding indeterminate values.</li> </ul> <p>These rules apply recursively to the elements of arrays and the members of <code>struct</code>s.</p> <p>Any use of the value of an uninitialized variable is undefined behavior.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#expression-and-arithmetics","title":"expression and arithmetics","text":"<ul> <li> <p>If the evaluation order of <code>A</code> and <code>B</code> is unspecified, and if</p> </li> <li> <p>both <code>A</code> and <code>B</code> contain a write to an object, or</p> </li> <li>one of them contains a write to an object, and the other one contains a read to that object</li> </ul> <p>then the behavior is undefined.</p> <p>Bitwise operators: <code>~</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></p> <ul> <li>Pointer arithmetic uses the units of the pointed-to type.</li> <li><code>p + i == (char *)p + i * sizeof(*p)</code></li> <li>Pointer arithmetic must be performed within an array (including its past-the-end position), otherwise the behavior is undefined.</li> </ul> <p>Member access through pointer: <code>ptr-&gt;member</code>, which is equivalent to <code>(*ptr).member</code>.</p> <ul> <li><code>.</code> has higher precedence than <code>*</code>, so the parentheses around <code>*ptr</code> are necessary.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#function","title":"Function","text":"<ul> <li> <p>Argument passing:</p> </li> <li> <p>Use the argument to initialize the parameter.</p> </li> <li>The semantic is copy.</li> <li>Decay always happens: One can never declare an array parameter.</li> </ul> <p>// \u60f3\u4f20\u5165\u6570\u7ec4\uff0c\u53ea\u80fd\u4f20\u5165\u9996\u5730\u5740</p> <p>The main function:</p> <ul> <li><code>int main(void) { ... }</code></li> <li><code>int main(int argc, char **argv) { ... }</code>, for passing command-line arguments.</li> <li><code>/* another implementation-defined signature */</code></li> </ul> <p>Return value: <code>0</code> to indicate that the program exits successfully.</p> <p>argc\u4ee3\u8868\u7684\u662f\u547d\u4ee4\u884c\u53f3\u8fb9\u53c2\u6570\u6570\u91cf+1\uff0c \u56e0\u4e3aargv[]\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u662f\u6ca1\u6709\u7528\u7684\uff01\u56e0\u6b64\uff1a\u904d\u5386\u5217\u8868\u5e94\u8be5\u8303\u56f4\u662f\uff1a<code>for(i = 1; i &lt; argc ; i++)</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#vector","title":"\u4f8b\u5b50\uff1a\u624b\u6413vector","text":"<p>vector \u5e94\u8be5\u662f\u4e00\u4e2astruct, \u56e0\u4e3a\u4e00\u4e2avector\u6709\u4e00\u4e2a\u5217\u8868\u548c\u4e00\u4e2a\u7ef4\u5ea6</p> <pre><code>struct Vector {\n  double *entries;\n  size_t dimension;\n};\nstruct Vector create_vector(size_t n) {\n  return (struct Vector){.entries = calloc(n, sizeof(double)),\n                         .dimension = n};//designator\n}\nvoid destroy_vector(struct Vector *vec) {\n  free(vec-&gt;entries);\n  // Do we need to free(vec)? \u5176\u5b9e\u4e0d\u5fc5\uff0c.dimension\u4f1a\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u7684\u65f6\u5019\u81ea\u52a8\u91ca\u653e\n}\n// deep copy of vector\nstruct Vector v = something();\nstruct Vector u = v;\ndestroy_vector(&amp;u);\ndestroy_vector(&amp;v); // undefined behavior: double free!\n// u = v\u5c06\u5185\u5b58\u5168\u90e8\u590d\u5236\u8fc7\u53bb\u4e86\uff01\u76f8\u5f53\u4e8e\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e86\u540c\u4e00\u4e2a\u5185\u5b58\nvoid vector_assign(struct Vector *to, const struct Vector *from) {\n    // \u52a0const\u597d\u4e60\u60ef\n  if (to == from)\n    return; // \u81ea\u5df1\u590d\u5236\u7ed9\u81ea\u5df1\uff0c\u4ec0\u4e48\u8bf4\u6cd5\uff1f \u5e94\u8be5\u5224\u65ad\u8f93\u5165\u7684\u4e24\u4e2a\u6307\u9488\uff08\u5730\u5740\uff09\u662f\u4e0d\u662f\u76f8\u540c\u7684\uff01\n  free(to-&gt;entries); // Don't forget this!!\n  to-&gt;entries = malloc(from-&gt;dimension * sizeof(double));\n  memcpy(to-&gt;entries, from-&gt;entries, from-&gt;dimension * sizeof(double));\n  // void *memcpy(void *str1, const void *str2, size_t n)\n  to-&gt;dimension = from-&gt;dimension;\n}\nbool vector_equal(const struct Vector *lhs, const struct Vector *rhs) {\n  if (lhs-&gt;dimension != rhs-&gt;dimension)\n    return false;\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    if (lhs-&gt;entries[i] != rhs-&gt;entries[i])\n      return false;\n  return true;\n} // &lt;stdbool.h&gt;\n// For vector_add, our design is to claim that \"the behavior is undefined if the vectors have different dimensions\".\nstruct Vector vector_add(const struct Vector *lhs, const struct Vector *rhs) {\n  assert(lhs-&gt;dimension == rhs-&gt;dimension);\n  // ASSERT ()\u662f\u4e00\u4e2a\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u7ecf\u5e38\u4f7f\u7528\u7684\u5b8f\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5b83\u8ba1\u7b97\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u8868\u8fbe\u5f0f\u4e3aFALSE (0), \u7a0b\u5e8f\u5c06\u62a5\u544a\u9519\u8bef\uff0c\u5e76\u7ec8\u6b62\u6267\u884c\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u4e3a0\uff0c\u5219\u7ee7\u7eed\u6267\u884c\u540e\u9762\u7684\u8bed\u53e5\n  struct Vector result = create_vector(lhs-&gt;dimension);\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    result.entries[i] = lhs-&gt;entries[i] + rhs-&gt;entries[i];\n  return result;\n}\n\nstruct Vector vector_scale(const struct Vector *lhs, double scale) {\n  struct Vector result = create_vector(lhs-&gt;dimension);\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    result.entries[i] = lhs-&gt;entries[i] * scale;\n  return result;\n}\n\ndouble vector_dot_product(const struct Vector *lhs, const struct Vector *rhs) {\n  assert(lhs-&gt;dimension == rhs-&gt;dimension);\n  double result = 0;\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    result += lhs-&gt;entries[i] * rhs-&gt;entries[i];\n  return result;\n}\ndouble vector_norm(const struct Vector *vec) {\n  return sqrt(vector_dot_product(vec, vec));\n}\ndouble vector_distance(const struct Vector *lhs, const struct Vector *rhs) {\n  struct Vector diff = vector_minus(lhs, rhs); // Define this on your own.\n  return vector_norm(&amp;diff);\n}\nvoid print_vector(const struct Vector *vec) {\n  putchar('(');\n  if (vec-&gt;dimension &gt; 0) {\n    printf(\"%lf\", vec-&gt;entries[0]);\n    for (size_t i = 1; i != vec-&gt;dimension; ++i)\n      printf(\", %lf\", vec-&gt;entries[i]);\n  }\n  putchar(')');\n}\n</code></pre> <p>\u5c31\u6b64\uff0c\u5373\u5c06\u8fdb\u5165C++\u7684\u4e16\u754c...</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#c_2","title":"C++\u62fe\u9057","text":""},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_5","title":"\u57fa\u7840","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int a, b;\n  std::cin &gt;&gt; a &gt;&gt; b;\n  std::cout &lt;&lt; \"a + b = \" &lt;&lt; a + b\n            &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <ul> <li>For input: There is no need to take the address of <code>a</code> and <code>b</code>! C++ has a way to obtain the reference of the argument.</li> <li> <p>There is no need to write <code>%d</code>! C++ has a way of identifying the type of the argument, and will select the correct way to handle that type.</p> </li> <li> <p><code>std::cin</code> and <code>std::cout</code>: two objects defined in the standard library file <code>&lt;iostream&gt;</code>. They are not functions!</p> </li> </ul> <p>The input and output \"functions\" are actually the operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code>, which are overloaded to do something different from bit shifting.</p> <p>C++ has a large standard library with a lot of names declared.</p> <p>To avoid name collisions, all the names from the standard library are placed in a namespace named <code>std</code>.</p> <ul> <li>You can write <code>using std::cin;</code> to introduce <code>std::cin</code> into the current scope, so that <code>cin</code> can be used without <code>std::</code>.</li> <li>You may write <code>using namespace std;</code> to introduce all the names in <code>std</code> into the current scope, but you will be at the risk of name collisions again.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#string_1","title":"String","text":"<p><code>std::string</code>  Defined in the standard library file <code>&lt;string&gt;</code></p> <pre><code>std::string str = \"Hello world\";\n// equivalent: std::string str(\"Hello world\");\n// equivalent: std::string str{\"Hello world\"}; (modern)\nstd::cout &lt;&lt; str &lt;&lt; std::endl;\n\nstd::string s1(7, 'a');\nstd::cout &lt;&lt; s1 &lt;&lt; std::endl; // aaaaaaa\n\nstd::string s2 = s1; // s2 is a copy of s1\nstd::cout &lt;&lt; s2 &lt;&lt; std::endl; // aaaaaaa\n\nstd::string s; // \"\" (empty string)\n</code></pre> <p>Member function <code>s.size()</code> <code>s.empty()</code></p> <p>Concatenation: </p> <ul> <li>No need to care about the memory allocation.</li> <li>No awkward functions like <code>strcat</code>.</li> </ul> <pre><code>std::string s1 = \"Hello\";\nstd::string s2 = \"world\";\nstd::string s3 = s1 + ' ' + s2; // \"Hello world\"\ns1 += s2; // s1 becomes \"Helloworld\"\ns2 += \"C++string\"; // s2 becomes \"worldC++string\"\n</code></pre> <p>At least one operand of <code>+</code> should be <code>std::string</code>.</p> <pre><code>const char *old_bad_ugly_C_style_string = \"hello\";\nstd::string good_beautiful_Cpp_string = \"hello\";\n\nstd::string s1 = good_beautiful_Cpp_string + \"aaaaa\"; // OK.\nstd::string s2 = \"aaaaa\" + good_beautiful_Cpp_string; // OK.\nstd::string s3 = old_bad_ugly_C_style_string + \"aaaaa\"; // Error\n</code></pre> <p>In C, <code>a = a + b</code> is equivalent to <code>a += b</code>. This is not always true in C++.</p> <p>For two <code>std::string</code>s <code>s1</code> and <code>s2</code>, <code>s1 = s1 + s2</code> is different from <code>s1 += s2</code>.</p> <ul> <li><code>s1 = s1 + s2</code> constructs a temporary object <code>s1 + s2</code> (so that the contents of <code>s1</code> are copied), and then assigns it to <code>s1</code>.</li> <li><code>s1 += s2</code> appends <code>s2</code> directly to the end of <code>s1</code>, without copying <code>s1</code>.</li> </ul> <p>Try these with <code>n = 1000000</code>:</p> <pre><code>std::string result;\nfor (int i = 0; i != n; ++i)\n  result += 'a'; // Fast\nstd::string result;\nfor (int i = 0; i != n; ++i)\n  result = result + 'a'; // Very slow\n</code></pre> <p>string IO: cin\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5728\u9047\u5230\u201cwhitespace\u201d\u7684\u65f6\u5019\u4f1a\u505c\u6b62\u8bfb\u53d6\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5b57\u7b26\u89c6\u4e3a\u8f93\u5165\u7684\u7ed3\u675f\u7b26</p> <ul> <li> <p>getline\u8bfb\u53d6\u6362\u884c\u7b26 \u5e76\u4e14\u5c06\u6362\u884c\u7b26\u66ff\u6362\u6210'\\0'\uff0c\u5e76\u4e14\u4f1a\u4e22\u5f03\u6362\u884c\u7b26</p> </li> <li> <p>cin\u4f1a\u628a\u6362\u884c\u7b26\u7559\u5728\u8f93\u5165\u961f\u5217\u4e2d</p> </li> <li> <p>cin.getline\u8bfb\u53d6\u6362\u884c\u7b26\u5e76\u66ff\u6362\u6210'\\0'\uff0c\u5e76\u4e14\u4e0d\u4f1a\u4e3b\u52a8\u4e22\u5f03\u6362\u884c\u7b26\uff0c\u4f1a\u628a\u5b83\u7559\u5728\u8f93\u5165\u961f\u5217\u4e2d</p> </li> </ul> <p>Conversion between strings and arithmetic numbers \uff1a \u5728python\u4e2d\u68a6\u5bd0\u4ee5\u6c42\u5b9e\u73b0\u7684\u51fd\u6570\uff1a </p> <pre><code>int ival = 42;\ndouble dval = 3.14;\nstd::string s = std::to_string(ival) + std::to_string(dval);\nstd::cout &lt;&lt; s &lt;&lt; '\\n'; // Possible output: 423.140000\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#reference","title":"Reference\uff08\u5f15\u7528\uff09","text":"<p>A reference defines an alternative name for an object (\"refers to\" that object). (\u522b\u540d)</p> <ul> <li><code>ReferredType</code> is the type of the object that it refers to, and</li> <li><code>&amp;</code> is the symbol indicating that it is a reference</li> </ul> <pre><code>int ival = 42;\nint &amp;ri = ival; // `ri` refers to `ival`.\n                // In other words, `ri` is an alternative name for `ival`.\nstd::cout &lt;&lt; ri &lt;&lt; '\\n'; // prints the value of `ival`, which is `42`.\n++ri;           // Same effect as `++ival;`.\n</code></pre> <pre><code>int ival = 42;\nint x = ival;              // `x` is another variable.\n++x;                       // This has nothing to do with `ival`.\nstd::cout &lt;&lt; ival &lt;&lt; '\\n'; // 42\nint &amp;ri = ival;            // `ri` is a reference that refers to `ival`.\n++ri;                      // This modification is performed on `ival`.\nstd::cout &lt;&lt; ival &lt;&lt; '\\n'; // 43\n</code></pre> <p>\u8d77\u522b\u540d\u4e0d\u662f\u8d4b\u503c\uff0c\u56e0\u6b64\u80fd\u8d77\u522b\u540d\u7684\u4e00\u5b9a\u662f\u4e00\u4e2a\u5185\u5b58\u7a33\u5b9a\u7684\u53d8\u91cf</p> <pre><code>int &amp;r1 = 42;    // Error: binding a reference to a literal\nint &amp;r2 = 2 + 3; // Error: binding a reference to a temporary object\nint a = 10, b = 15;\nint &amp;r3 = a + b; // Error: binding a reference to a temporary object\n</code></pre> <p>\u5f53\u7136\uff0c\u522b\u540d\u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\u53d8\u91cf(not an object)\uff0c\u56e0\u6b64\u4e0d\u80fd\u7ed9\u522b\u540d\u8d77\u522b\u540d;\u4e0d\u80fd\u7ed9\u5b83\u4e0a\u6307\u9488</p> <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp; &amp;rr = ri; // Error! No such thing!\n</code></pre> <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp;*pr = &amp;ri; // Error! No such thing!\n</code></pre> <p>\u5e94\u7528\uff1a </p> <pre><code>for (std::size_t i = 0; i != str.size(); ++i) {\n  char &amp;c = str[i];\n  c = std::toupper(c); // Same as `str[i] = std::toupper(str[i]);`.\n}\n// the same as:\nfor (char &amp;c : str) // \u4ecestr\u91cc\u9762\u4f9d\u6b21\u62ff\u5b57\u7b26\n  c = std::toupper(c);\n</code></pre> <pre><code>int count_lowercase(std::string str) {\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n// the same as:\nint count_lowercase(std::string &amp;str) { // `str` is a reference.\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u4ee3\u7801\u91cc\u9762\u7684\u533a\u522b\uff1a\u4e00\u4e2a\u662f\u9010\u4e2a\u62ff\u51fa\u6765\uff0ccopy\u5e76\u5224\u65ad\uff1b\u53e6\u4e00\u4e2a\u662f\u76f4\u63a5\u5f15\u7528\uff0c\u5e76\u5224\u65ad</p> <p>\u4e8b\u5b9e\u4e0a\u5f15\u7528\u4f1a\u66f4\u5feb\uff0c\u56e0\u4e3acopy\u662f\u975e\u5e38\u8017\u65f6\u95f4\u7684\uff1b\u7b2c\u4e8c\u4e2a\u4ee3\u7801\u7c7b\u4f3c</p> <p>\u544a\u8bc9\u4e00\u4e2a\u9053\u7406\uff1a\u5f15\u7528\u4f20\u9012\u662f\u975e\u5e38\u4e0d\u9519\u7684\u9009\u62e9\uff01\u76f4\u63a5\u65e0copy\u64cd\u7eb5\u53c2\u6570\uff08\u800c\u4e0d\u662f\u5f62\u53c2\u4f20\u9012\uff09</p> <p>Benefits of passing by reference-to-<code>const</code></p> <ol> <li>Avoids copy.</li> <li>Accepts temporaries and literals (rvalues).</li> <li>The <code>const</code> qualification prevents accidental modifications to it.</li> </ol> <p>References vs pointers</p> <p>A reference</p> <ul> <li>is not itself an object. It is an alias of the object that it is bound to.</li> <li>cannot be rebound to another object after initialization.</li> <li>has no \"default\" or \"zero\" value. It must be bound to an object.</li> </ul> <p>A pointer</p> <ul> <li>is an object that stores the address of the object it points to.</li> <li>can switch to point to another object at any time.</li> <li>can be set to a null pointer value <code>nullptr</code>.</li> </ul> <p>Both a reference and a pointer can be used to refer to an object, but references are more convenient - no need to write the annoying <code>*</code> and <code>&amp;</code>.</p> <p>Note: <code>nullptr</code> is the null pointer value in C++. Do not use <code>NULL</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#stdvector","title":"std::vector","text":"<p>Defined in the standard library file <code>&lt;vector&gt;</code>.</p> <p><code>std::vector&lt;int&gt; v; // `v` is of type `std::vector&lt;int&gt;</code></p> <p><code>std::vector</code> is not a type itself. It must be combined with some <code>&lt;T&gt;</code> to form a type.</p> <pre><code>std::vector v;               // Error: missing template argument.\nstd::vector&lt;int&gt; vi;         // An empty vector of `int`s.\nstd::vector&lt;std::string&gt; vs; // An empty vector of strings.\nstd::vector&lt;double&gt; vd;      // An empty vector of `double`s.\nstd::vector&lt;std::vector&lt;int&gt;&gt; vvi; // An empty vector of vector of `int`s.\n                                   // \"2-d\" vector.\n</code></pre> <p>What are the types of <code>vi</code>, <code>vs</code> and <code>vvi</code>?</p> <ul> <li><code>std::vector&lt;int&gt;</code>, <code>std::vector&lt;std::string&gt;</code>, <code>std::vector&lt;std::vector&lt;int&gt;&gt;</code>.</li> </ul> <pre><code>std::vector&lt;int&gt; v{2, 3, 5, 7};     // A vector of `int`s,\n                                    // whose elements are {2, 3, 5, 7}.\nstd::vector&lt;int&gt; v2 = {2, 3, 5, 7}; // Equivalent to \u2191\n\nstd::vector&lt;std::string&gt; vs{\"hello\", \"world\"}; // A vector of strings,\n                                    // whose elements are {\"hello\", \"world\"}.\nstd::vector&lt;std::string&gt; vs2 = {\"hello\", \"world\"}; // Equivalent to \u2191\n\nstd::vector&lt;int&gt; v3(10);     // A vector of ten `int`s, all initialized to 0.\nstd::vector&lt;int&gt; v4(10, 42); // A vector of ten `int`s, all initialized to 42.\n</code></pre> <p>Copy assignment is also enabled:</p> <pre><code>std::vector&lt;int&gt; v1 = something(), v2 = something_else();\nv1 = v2;\n</code></pre> <ul> <li>Element-wise copy is performed automatically.</li> <li>Memory is allocated automatically. The memory used to store the old data of <code>v1</code> is deallocated automatically.</li> </ul> <p><code>v.size()</code> and <code>v.empty()</code>: same as those on <code>std::string</code>.</p> <p>Append an element to the end of a <code>std::vector</code> <code>v.push_back(x)</code></p> <pre><code>int n;\nstd::cin &gt;&gt; n;\nstd::vector&lt;int&gt; v;\nfor (int i = 0; i != n; ++i) {\n  int x;\n  std::cin &gt;&gt; x;\n  v.push_back(x);\n}\nstd::cout &lt;&lt; v.size() &lt;&lt; '\\n'; // n\n</code></pre> <p>Remove the last element of a <code>std::vector</code> <code>v.pop_back()</code></p> <p>v.back()<code>and</code>v.front()</p> <p>Return the references to the last and the first elements, respectively.</p> <p>It is a reference, through which we can modify the corresponding element.</p> <p>For <code>v.back()</code>, <code>v.front()</code> and <code>v.pop_back()</code>, the behavior is undefined if <code>v</code> is empty. They do not perform any bounds checking.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#c-in-c","title":"C in C++","text":"<p><code>bool</code>, <code>true</code> and <code>false</code> are built-in. No need to <code>#include &lt;stdbool.h&gt;</code>. <code>true</code> and <code>false</code> are of type <code>bool</code>, not <code>int</code>.   bool\u7c7b\u578b\u5185\u5d4c\u4e86\uff0c\u65b9\u4fbf\u4f7f\u7528</p> <p>The return type of logical operators <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> and comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code> is <code>bool</code>, not <code>int</code>.   \u8fd9\u5f88\u7b26\u5408python\u76f4\u89c9\uff0c\u66f4\u597d\u4e86</p> <p>The type of string literal \"hello\" is const char [N+1], not char [N+1]</p> <p>Recall that string literals are stored in read-only memory. Any attempt to modify them results in undefined behavior*.   \u5b57\u7b26\u4e32\u5e38\u91cf\u5b58\u653e\u5728\u5e38\u91cf\u533a\uff0c\u4f46\u662f\u7c7b\u578b\u662fconst char\uff0c \u63d0\u9192\u4f60\u4e0d\u80fdmodify\uff01</p> <p>The type of character literals <code>'a'</code> is <code>char</code>, not <code>int</code>.   C\u4e2d\uff0cchar\u7684\u5b9e\u8d28\u5c31\u662fint, \u7528ASCII\u7801\u5bf9\u5e94</p> <p><code>const</code> variables initialized with literals are compile-time constants. They can be used as the length of arrays.  \uff1a</p> <pre><code>const int maxn = 1000;\nint a[maxn]; // a normal array in C++, but VLA in C\n</code></pre> <p>C\u91cc\u9762\u9700\u8981\u521b\u5efa\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6210\u5458\u6570\u91cf\u7acb\u9a6c\u77e5\u9053\uff1b\u4f46\u662fC++\u4e0d\u7528\u62c5\u5fc3\uff0c\u4f20\u53c2\u662fOK\u7684</p> <p>\u540c\u65f6\uff0c\u7c7b\u578b\u8f6c\u5316\u6709\u66f4\u4fdd\u969c\u7684checking, \u4f8b\u5982long long \u8f6c\u5316\u4e3aint, \u8fd9\u79cd\u6709\u98ce\u9669\u7684\u8f6c\u6362\uff0c\u90fd\u4f1a\u62a5\u9519\uff01</p> <p>\u540c\u65f6\u6307\u9488\u7c7b\u578b\u8f6c\u5316\u4e5f\u662f\u4e0d\u88ab\u8fd0\u884c\u7684\uff1a </p> <pre><code>const int x = 42, *pci = &amp;x;\nint *pi = pci; // Warning in C, Error in C++\n// \u4e3a\u4ec0\u4e48\u662f\u9519\u7684\uff1f\u56e0\u4e3aint\u662fconst, pci \u662fconst int*\u6ca1\u95ee\u9898\uff0c\u4f46\u662fpi\u662fint *, \u6709\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u4fee\u6539const\u7684\u6f5c\u5728\u98ce\u9669\n++*pi;         // undefined behavior\nchar *pc = pi; // Warning in C, Error in C++\nvoid *pv = pi; char *pc2 = pv; // Even no warning in C! Error in C++.\nint y = pc;    // Warning in C, Error in C++\n</code></pre> <ul> <li>For <code>T</code> \u2260 <code>U</code>, <code>T *</code> and <code>U *</code> are different types. Treating a <code>T *</code> as <code>U *</code> leads to undefined behavior in most cases, but the C compiler gives only a warning!</li> <li><code>void *</code> is a hole in the type system. You can cast anything to and from it without even a warning.</li> </ul> <p>\u4f46\u662f\u5982\u679c\u6211\u5c31\u662f\u60f3\u8981\u53d1\u751f\u8f6c\u5316\u5462\uff1f </p> <p>C++ provides four named cast operators:</p> <ul> <li><code>static_cast&lt;Type&gt;(expr)</code></li> <li><code>const_cast&lt;Type&gt;(expr)</code></li> <li><code>reinterpret_cast&lt;Type&gt;(expr)</code></li> <li><code>dynamic_cast&lt;Type&gt;(expr)</code> \u21d2 will be covered in later lectures.</li> </ul> <p>In contrast, the C style explicit cast <code>(Type)expr</code> looks way too innocent.</p> <ul> <li><code>static_cast&lt;Type&gt;(expr)</code></li> </ul> <pre><code>int ival = 42;\nconst int &amp;cref = ival; // \u5f15\u7528\u662f\u201c\u4e0a\u9501\u7684\u201d\nint &amp;ref = cref; // Error: casting away low-level constness\nint &amp;ref2 = const_cast&lt;int &amp;&gt;(cref); // OK\nint *ptr = const_cast&lt;int *&gt;(&amp;cref); // OK\n</code></pre> <p>However, modifying a <code>const</code> object through a non-<code>const</code> access path (possibly formed by <code>const_cast</code>) results in undefined behavior!</p> <pre><code>const int cival = 42;\nint &amp;ref = const_cast&lt;int &amp;&gt;(cival); // compiles, but dangerous\n++ref; // undefined behavior (may crash)\n</code></pre> <p>\u53d8\u91cf\u53ef\u53d8\uff0c\u4f46\u662f\u5f15\u7528\u4e0a\u9501\uff0c\u90a3\u4e48\u89e3\u9501\u5176\u5b9e\u65e0\u4f24\u5927\u96c5\uff1b\u4f46\u662f\u53d8\u91cf\u4e0a\u9501\uff0c\u7528const\u5f15\u7528\u7136\u540e\u89e3\u9501\uff0c\u8bd5\u56fe\u6539\u53d8\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u975e\u5e38\u5371\u9669\u7684</p> <ul> <li><code>const_cast&lt;Type&gt;(expr)</code></li> </ul> <p>Often used to perform conversion between different pointer types (DANGEROUS):</p> <pre><code>int ival = 42;\nchar *pc = reinterpret_cast&lt;char *&gt;(&amp;ival);\n</code></pre> <p>We must never forget that the actual object addressed by <code>pc</code> is an <code>int</code>, not a character! Any use of <code>pc</code> that assumes it's an ordinary character pointer is likely to fail at run time, e.g.:</p> <pre><code>std::string str(pc); // undefined behavior\n</code></pre> <ul> <li><code>static_cast</code></li> </ul> <p>Other types of conversions (which often look \"harmless\"):</p> <pre><code>double average = static_cast&lt;double&gt;(sum) / n;\nint pos = static_cast&lt;int&gt;(std::sqrt(n));\nstatic_cast&lt;std::string &amp;&amp;&gt;(str) // converts to a xvalue\nstatic_cast&lt;Derived *&gt;(base_ptr) // downcast without runtime checking\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#auto-decltype","title":"auto &amp; decltype","text":"<p>When declaring a variable with an initializer, we can use the keyword <code>auto</code> to let the compiler deduce the type.</p> <pre><code>auto x = 42;    // `int`, because 42 is an `int`.\nauto y = 3.14;  // `double`, because 3.14 is a `double`.\nauto z = x + y; // `double`, because the type of `x + y` is `double`.\nauto m;         // Error: cannot deduce the type. An initializer is needed.\n// auto can also be used to produce compound types:\nauto &amp;r = x;        // `int &amp;`, because `x` is an `int`.\nconst auto &amp;rc = r; // `const int &amp;`.\nauto *p = &amp;rc;      // `const int *`, because `&amp;rc` is `const int *`.\n\nauto str = \"hello\"; // `const char *`\n\n</code></pre> <ul> <li>Recall that the type of <code>\"hello\"</code> is <code>const char [6]</code>, not <code>std::string</code>. This is for compatibility with C.</li> <li>When using <code>auto</code>, the array-to-pointer conversion (\"decay\") is performed automatically.</li> </ul> <pre><code>auto sum(int x, int y) {\n  return x + y;\n} // The return type is deduced to int.\n</code></pre> <p>Some types in C++ are not known to anyone but the compiler:</p> <p><code>auto lam = [](int x, int y) { return x + y; } // A lambda expression.</code></p> <p>Every lambda expression has its own type, whose name is only known by the compiler.</p> <pre><code>auto fun(int a, int b) { // The return type is deduced to be `int`.\n  std::cout &lt;&lt; \"fun() is called.\\n\"\n  return a + b;\n}\nint x = 10, y = 15;\ndecltype(fun(x, y)) z; // Same as `int z;`.\n                       // Unlike `auto`, no initializer is required here.\n                       // The type is deduced from the return type of `fun`.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_6","title":"\u51fd\u6570\u91cd\u8f7d","text":"<pre><code>int fun(int);\ndouble fun(int);  // Error: functions that differ only in\n                  // their return type cannot be overloaded.\n// \u5fc5\u987b\u5728\u4f20\u53c2\u7c7b\u578b\u4e0a\u9762\u6709\u6240\u533a\u522b\nvoid fun(int *a);\nvoid fun(int (&amp;a)[10]); // \u5f15\u7528\u4f20\u5165\u6570\u7ec4\uff01\uff01\uff01\nint ival = 42; fun(&amp;ival); // OK, calls fun(int *)\nint arr[10];   fun(arr);   // Error: ambiguous call\n// \u56e0\u4e3a\u6570\u7ec4\u65e2\u80fd\u5339\u914dint (&amp;a)[10], \u4e5f\u80fd\u9000\u5316\u4e3a\u6307\u9488\uff0c\u7b26\u5408int *a\n</code></pre> <ul> <li> <ul> <li>For <code>fun(int (&amp;)[10])</code>, this is an exact match.</li> </ul> </li> <li>For <code>fun(int *)</code>, this involves an array-to-pointer implicit conversion. We will see that this is also considered an exact match.</li> </ul> <p>\u4f46\u662f\u6709\u7684\u65f6\u5019\u8c8c\u4f3c\u5e76\u4e0d\u662f\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48\u5339\u914d\u89c4\u5219\u662f\u4ec0\u4e48\u5462</p> <pre><code>void fun(int);\nvoid fun(double);\nvoid fun(int *);\nvoid fun(const int *);\nint ival = 42;\n// fun(int *) or fun(const int *)?\nfun(&amp;ival);\nfun('a');   // fun(int) or fun(double)?\nfun(3.14f); // fun(int) or fun(double)?\nfun(NULL);  // fun(int) or fun(int *)?\n</code></pre> <ul> <li><code>fun(&amp;ival)</code> matches <code>fun(int *)</code></li> <li><code>fun('a')</code> matches <code>fun(int)</code></li> <li><code>fun(3.14f)</code> matches <code>fun(double)</code></li> <li><code>fun(NULL)</code> ? We will see this later.</li> </ul> <p>\u4e00\u822c\uff1a char (\u5982\u679c\u6ca1\u6709\u51fd\u6570\u63a5\u53d7char) -&gt; int; \u6307\u9488\uff08\u6ca1\u6709\u89c4\u5b9a\u662f\u4e0d\u662fconst\uff09-&gt;\u5339\u914d\u975econst\u6307\u9488</p> <p>No need to remember all the details. But pay attention to some cases that are very common.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#null-pointer","title":"Null Pointer","text":"<p>In C++, <code>NULL</code> cannot be <code>(void *)0</code> since the implicit conversion from <code>void *</code> to other pointer types is not allowed.</p> <ul> <li>It is most likely to be an integer literal with value zero.</li> <li>With the following overload declarations, <code>fun(NULL)</code> may call <code>fun(int)</code> on some platforms, and may be ambiguous on other platforms!</li> </ul> <pre><code>void fun(int);\nvoid fun(int *);\nfun(NULL); // May call fun(int),\n           // or may be ambiguous.\n</code></pre> <p>C\u91cc\u9762\u7684NULL\u5176\u5b9emay be defined as <code>(void *)0</code>, <code>0</code>, <code>(long)0</code> or other forms.</p> <p>\u4f46\u662fC++\u91cc\u9762\u89c4\u5b9a\u4e86\uff0c\u5c31\u4e13\u95e8\u6709null pointer\uff1a</p> <p>nullptr: has a unique type <code>std::nullptr_t</code> (defined in <code>&lt;cstddef&gt;</code>), which is neither <code>void *</code> nor an integer.</p> <p><code>fun(nullptr)</code> will definitely match <code>fun(int *)</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#range-based-for-loops-revisited","title":"Range-based <code>for</code> loops revisited","text":"<pre><code>vector&lt;int&gt; vec;\nvec.push_back(1);\nvec.push_back(2);\nfor(int&amp; i : vec)\n{\n    // \u589e\u52a0vector\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u503c\n    i++;    \n}\nfor (int i : vec)\n{\n    // \u663e\u793a\u66f4\u65b0\u540e\u7684\u6570\u503c\n    cout &lt;&lt; i &lt;&lt; endl;\n}\n// \u5f53\u7136\u4e2d\u95f4\u53ef\u4ee5\u7528continue\u7ed3\u675f\u672c\u6b21\u5faa\u73af\uff0cbreak\u8df3\u51fa\u6574\u4e2a\u5faa\u73af\n</code></pre> <p>\u6ce8\u610f\uff0c\u5f53\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u4f20\u5165\u4e86\u4e00\u4e2a\u6570\u5217\u4f5c\u4e3a\u53c2\u6570\uff0c\u6570\u5217\u4f1a\u9000\u5316\u4e3a\u6307\u9488\uff0c\u56e0\u6b64\u6307\u9488\u662f\u4e0d\u80fd\u57fa\u4e8e\u8303\u56f4\u5faa\u73af\u904d\u5386\u7684</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n//\u5f53\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u6570\u7ec4\u540d\u9000\u5316\u4e3a\u6307\u9488\uff0c\u4e0d\u80fd\u4f7f\u7528\u8303\u56f4for\nvoid fun(int arr[], int n)\n{\n    for (const auto&amp; e : arr)\n    {\n        cout &lt;&lt; e &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\n// \u4e0a\u9762\u8fd9\u4e2a\u5c31\u4f1a\u53d1\u751f\u9519\u8bef\uff0c\u56e0\u4e3a\u5176\u5b9earr\u5df2\u7ecf\u53ea\u662f\u4e00\u4e2aint * \u7c7b\u578b\u7684\u6307\u9488\u4e86\nvoid test()\n{\n    //\u8303\u56f4for\uff0c\u5f53\u524d\u7684\u6570\u636e\uff1a\u5faa\u73af\u8303\u56f4\n    //\u4e5f\u53ef\u4ee5\u7528continue\u7ed3\u675f\u672c\u6b21\u5faa\u73af\uff0cbreak\u8df3\u51fa\u6574\u4e2a\u5faa\u73af\n    //\u8303\u56f4for\u7684\u8868\u793a\n    int arr[] = { 1,2,3,4,5 };\n    for (int e : arr)\n    {\n        cout &lt;&lt; e &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    //\u5f15\u7528\n    for (const int&amp; e : arr)\n    {\n        cout &lt;&lt; e &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    //auto\u5173\u952e\u5b57\n    for (const auto&amp; e : arr)\n    {\n        cout &lt;&lt; e &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\nint main()\n{\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#class","title":"Class","text":""},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#constthis","title":"const\u76f8\u5173\u548cthis\u6307\u9488","text":"<pre><code>class Student {\n  std::string name; \n  std::string id;\n  int entranceYear;\n  void setName(const std::string &amp;newName) {\n    name = newName;\n  }\n  void printInfo() const {\n    std::cout &lt;&lt; \"I am \" &lt;&lt; name &lt;&lt; \", id \" &lt;&lt; id  \n              &lt;&lt; \", entrance year: \" &lt;&lt; entranceYear &lt;&lt; std::endl;\n  }\n  // \u4e0a\u4e0b\u4e24\u4e2a\u65b9\u6cd5\u90fd\u7528\u4e86const\u5173\u952e\u8bcd\uff0c\u4ee3\u8868\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\u4e0d\u80fd\u591f\u4fee\u6539\u5bf9\u8c61\u91cc\u9762\u7684\u4efb\u4f55\u6210\u5458\u53d8\u91cf\n  bool graduated(int year) const {\n    return year - entranceYear &gt;= 4; \n  }\n};\n// \u4e3a\u4ec0\u4e48\u65b9\u6cd5\u8981const\u5173\u952e\u8bcd\uff1f\u56e0\u4e3a\u4e0econst\u5bf9\u8c61\u517c\u5bb9\uff01\n// const\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528const\u65b9\u6cd5\uff0c\u4e0d\u662fconst\u65b9\u6cd5\u4e0d\u80fd\u8c03\u7528\uff01\n</code></pre> <p>\u90a3\u4e48\u5982\u4f55\u8c03\u7528\u6210\u5458\u5462\uff1f </p> <pre><code>Student s = someValue();\ns.printInfo(); // call its printInfo() to print related info  \nif (s.graduated(2023)) {\n  // ...\n}\n</code></pre> <p>\u90a3\u4e48\u5728c++\u91cc\u9762\uff0cstruct\u548cclass\u6700\u5927\u7684\u533a\u522b\u662f\uff1a\u524d\u8005\u6210\u5458\u9ed8\u8ba4\u516c\u5f00\uff0c\u540e\u8005\u6210\u5458\u9ed8\u8ba4\u79c1\u6709\uff1aAccess Control!</p> <p>This is one of the only two differences between <code>struct</code> and <code>class</code> in C++.</p> <pre><code>class Student {\nprivate:\n  std::string name;\n  std::string id; \n  int entranceYear;\n\npublic:\n  void setName(const std::string &amp;newName){\n      this-&gt;name = newName; // this-&gt;\u6307\u9488\u5f53\u7136\u53ef\u4ee5\u7701\u7565\uff0c\u4f46\u662f\u6700\u597d\u52a0\u4e0a\n  }\n  void printInfo() const;\n  bool graduated(int year) const;  \n};\n</code></pre> <p>\u5173\u4e8econst\u65b9\u6cd5 \uff1a</p> <ul> <li>A <code>const</code> member function cannot modify its data members 2.</li> <li>A <code>const</code> member function guarantees that no data member will be modified.</li> <li>A non-<code>const</code> member function does not provide such guarantee.</li> <li>In a <code>const</code> member function, calling a non-<code>const</code> member function on <code>*this</code> is not allowed.</li> <li>For a <code>const</code> object, only <code>const</code> member functions can be called on it.</li> </ul> <p>\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u505a\u5230\uff1a \u80fd\u52a0const\u5c31\u5c3d\u91cf\u52a0const\uff0c\u89c1\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>class Student {\n  std::string name, id;\n  int entranceYear;\npublic:\n  const std::string &amp;getName() const { return name; }\n  const std::string &amp;getID() const { return id; }\n  bool valid() const { return id.substr(0, 4) == std::to_string(entranceYear); }\n  void adjustID() { id = std::to_string(entranceYear) + id.substr(4); }\n};\n</code></pre> <p>\u53ef\u4ee5\u901a\u8fc7\u516c\u5f00\u7684\u65b9\u6cd5\u53bb\u4fee\u6539\u79c1\u6709\u53d8\u91cf</p> <p>\u5173\u4e8ethis pointer</p> <p>There is a pointer called <code>this</code> in each member function of class <code>X</code> which has type <code>X *</code> or <code>const X *</code>, pointing to the object on which the member function is called.</p> <p>Inside a member function, access of any member <code>mem</code> is actually <code>this-&gt;mem</code>.</p> <p>We can also write <code>this-&gt;mem</code> explicitly.</p> <pre><code>class Student {\npublic:\n  bool graduated(int year) const {\n    return year - this-&gt;entranceYear &gt;= 4;\n  }\n}; // \u8fd9\u4e00\u70b9\u5f88\u50cfpython\u4e2d\u7684self\u5173\u952e\u8bcd\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_7","title":"\u6784\u9020\u51fd\u6570","text":"<p>Constructors define how an object can be initialized.</p> <ul> <li>Constructors are often overloaded, because an object may have multiple reasonable ways of initialization.</li> </ul> <pre><code>class Student {\n  std::string name;\n  std::string id;\n  int entranceYear;\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_, int ey) \n    : name(name_), id(id_), entranceYear(ey) {}\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}   \n};\n\nStudent a(\"Alice\", \"2020123123\", 2020);\nStudent b(\"Bob\", \"2020123124\"); // entranceYear = 2020\nStudent c; // Error: No default constructor. (to be discussed later)\n</code></pre> <p>\u4e0a\u9762\u6709\u4e24\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662f\u4f20\u53c2\u7684\u60c5\u51b5\u4e0d\u540c\uff0c\u56e0\u6b64\u662f\u51fd\u6570\u540d\u5b57\u7684\u91cd\u8f7d\uff0c\u63d0\u4f9b\u4e86\u591a\u79cd\u7684\u6784\u9020\u65b9\u5f0f</p> <p>\u5176\u4e2d <code>:  name(name_), id(id_), entranceYear(ey) {}</code>\u8fd9\u79cd\u5176\u5b9e\u662f\u6210\u5458\u521d\u59cb\u5316\u5217\u8868\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u800c\u4e0d\u662f\u8d4b\u503c\uff0c\u5f53\u7136\u51fd\u6570\u4f53\u91cc\u9762\u53bb\u8d4b\u503c\uff08in-class initialization\uff09\u6765\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u4e5f\u662f\u4e00\u79cd\u65b9\u6cd5</p> <p>The initializer list starts with <code>:</code>, and contains initializers for each data member, separated by <code>,</code>. The initializers must be of the form <code>(...)</code> or <code>{...}</code>, not <code>= ...</code>.</p> <pre><code>class Student {\n  std::string name = \"Alice\";\n  std::string id;\n  int entranceYear{2024}; // equivalent to `int entranceYear = 2024;`.\npublic:\n  Student() {} // `name` is initialized to `\"Alice\"`,\n               // `id` is initialized to an empty string,\n               // and `entranceYear` is initialized to 2024.\n  Student(int ey) : entranceYear(ey) {} // `name` is initialized to `\"Alice\"`,\n                                    // `id` is initialized to an empty string,\n                                    // and `entranceYear` is initialized to `ey`.\n};\n</code></pre> <p>Data members are initialized in order in which they are declared, not the order in the initializer list.</p> <ul> <li>If the initializers appear in an order different from the declaration order, the compiler will generate a warning.</li> </ul> <p>Typical mistake: <code>entranceYear</code> is initialized in terms of <code>id</code>, but <code>id</code> is not initialized yet!</p> <p>\u90a3\u4e48\u65e2\u53ef\u4ee5\u5217\u8868\u521d\u59cb\u5316\uff0c\u53c8\u80fdin-class initialization, \u5230\u5e95\u521d\u59cb\u5316\u7684\u987a\u5e8f\u662f\u4ec0\u4e48\u5462\uff1f \u5982\u679c\u4e24\u79cd\u521d\u59cb\u5316\u90fd\u6709\u5462\uff1f</p> <ul> <li>First, before entering the function body, <code>name</code>, <code>id</code> and <code>entranceYear</code> are default-initialized. <code>name</code> and <code>id</code> are initialized to empty strings.</li> <li>Then, the assignments in the function body take place.</li> </ul> <p>Not all types can be default-initialized. Not all types can be assigned to. (Any counterexamples?)</p> <ul> <li>References <code>T &amp;</code> cannot be default-initialized, and cannot be assigned to.</li> <li><code>const</code> objects of built-in types cannot be default-initialized.</li> <li><code>const</code> objects cannot be assigned to.</li> <li>A class can choose to allow or disallow default initialization or assignment. It depends on the design</li> </ul> <p>\u90a3\u4e48\u53ef\u4e0d\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u79cd\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\u5462\uff1f \u5f53\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u6ce8\u610f\u8c03\u7528\u7684\u65f6\u5019\u7684\u8bed\u6cd5\uff01</p> <pre><code>class Point2d {\n  double x, y;\npublic:\n  Point2d() : x(0), y(0) {} // default constructor\n  Point2d(double x_, double y_) : x(x_), y(y_) {}  \n};\n\nPoint2d p1;       // calls default ctor, (0, 0) \nPoint2d p2(3, 4); // calls Point2d(double, double), (3, 4)\nPoint2d p3();     // Is this calling the default ctor?\n</code></pre> <p>Be careful! <code>p3</code> is a function that takes no parameters and returns <code>Point2d</code>.</p> <p>\u4f46\u662f\u5728\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff0c\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u5e76\u6ca1\u6709\u88ab\u8c03\u7528</p> <pre><code>// In this code, the default constructor of `Student` is not called.\nstd::vector&lt;Student&gt; students;\nfor (auto i = 0; i != n; ++i)\n  students.push_back(some_student());\n</code></pre> <p>\u5f53\u7136\uff0c\u54ea\u6015\u4f60\u6ca1\u6709\u5199\u9ed8\u8ba4\u7684\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u90a3\u4e48\u4f9d\u7136\u6709\u7f16\u8bd1\u5668\u4e3a\u4f60\u63d0\u4f9b\u7684\u57fa\u7840\u6b3e</p> <pre><code>class X {}; // No user-declared constructors.\nX x; // OK: calls the compiler-synthesized default constructor\n</code></pre> <p>\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u7c7b\u7684\u65f6\u5019\uff0c\u5236\u5b9a\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\u5c31\u662f\u7f16\u8bd1\u5668\u57fa\u672c\u6b3e\uff1a</p> <pre><code>class Student {\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_, int ey)  \n    : name(name_), id(id_), entranceYear(ey) {}\n\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}   \n  Student() = default;\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#constructor-destrucotr-copy-control","title":"Constructor, Destrucotr, Copy Control","text":"<p>\u4e00\u4e2aobject\u7684lifespan\u662f\u4ec0\u4e48\uff1f \u5bf9\u4e8e\u4e00\u4e2alocal non-static object\u6765\u8bf4\uff1a </p> <ul> <li>Starts on initialization</li> <li>Ends when control flow goes out of its scope.</li> </ul> <p>\u4f8b\u5982\u5728\u4e00\u4e2afor\u7684\u5faa\u73af\u91cc\u9762\u521b\u5efa\u4e00\u4e2astring, \u90a3\u4e48\u5728\u4e00\u8f6e\u5faa\u73af\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u521b\u5efa\u7684string\u5c31\u4f1a\u91ca\u653e</p> <p>\u90a3\u4e48\u5bf9\u4e8e\u5168\u5c40global object\u6765\u8bf4\u5462\uff1f </p> <ul> <li>Starts on initialization (before the first statement of <code>main</code>)</li> <li>Ends when the program terminates.</li> </ul> <p>\u90a3\u4e48\u5982\u679c\u662f\u4e00\u4e2a\u5f00\u8f9f\u5728\u6808\u533a\u7684object\u5462\uff1f </p> <ul> <li>Starts on initialization: A <code>new</code> expression will do this, but <code>malloc</code> does not!</li> <li>Ends when it is destroyed: A <code>delete</code> expression will do this, but <code>free</code> does not!</li> </ul> <p>\u90a3\u4e48\u4ec0\u4e48\u662f\u6784\u9020\u548c\u6790\u6784\u65b9\u6cd5\u5462\uff1f </p> <p>A destructor of a class is the function that is automatically called when an object of that class type is destroyed.</p> <pre><code>struct A {\n  A() {\n    std::cout &lt;&lt; 'c';\n  }\n  ~A() {\n    std::cout &lt;&lt; 'd';\n  }\n};\n// \u8f93\u51facdcdcd\n</code></pre> <p>\u90a3\u4e48\u5982\u4f55\u5229\u7528\u8fd9\u79cd\u975e\u5e38\u79d2\u7684\u5c5e\u6027\u6765\u5b9e\u73b0\u4e00\u4e9b\u529f\u80fd\u5462\uff1f\uff08\u800c\u4e0d\u4ec5\u4ec5\u662f\u5c40\u9650\u4e8e\u6253\u5370\uff09</p> <p>\u5c31\u6bd4\u5982\u8bf4\uff0c\u521b\u5efa\u7684\u65f6\u5019\u4f1a\u81ea\u52a8malloc \u5185\u5b58\uff0c\u90a3\u4e48\u6790\u6784\u51fd\u6570\u91cc\u9762\u5c31\u53ef\u4ee5free</p> <p>\u90a3\u4e48\u6784\u9020\u51fd\u6570\u5462\uff1f\u5c31\u662f\u5728\u63a5\u53d7\u53c2\u6570\uff08\u6216\u8005\u4e0d\u63a5\u53d7\u53c2\u6570\u89e6\u53d1\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff09\u4e4b\u540e\uff0c\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 \u89c1\u4e0b\u4f8b\uff1a</p> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n public:\n  Dynarray(std::size_t n)\n    : m_storage(new int[n]{}), m_length(n) {}\n  ~Dynarray() {\n    delete[] m_storage;} // Pay attention to `[]`!\n  std::size_t size() const {\n    return m_length;\n  }\n  bool empty() const {\n    return m_length != 0;\n  }\n  int &amp;at(std::size_t i) {\n    return m_storage[i];\n  }\n  const int &amp;at(std::size_t i) const {\n    return m_storage[i];\n  }\n};\nvoid print(const Dynarray &amp;a) {\n  for (std::size_t i = 0;\n       i != a.size(); ++i)\n    std::cout &lt;&lt; a.at(i) &lt;&lt; ' ';\n  std::cout &lt;&lt; std::endl;\n}\nvoid reverse(Dynarray &amp;a) {\n  for (std::size_t i = 0,\n    j = a.size() - 1; i &lt; j; ++i, --j)\n    std::swap(a.at(i), a.at(j));\n} // \u8fd9\u4e00\u6bb5\u5173\u4e8ereverse\u7684\u4ee3\u7801\u975e\u5e38\u6f02\u4eae\nint main() {\n  int n; std::cin &gt;&gt; n;\n  Dynarray array(n);\n  for (int i = 0; i != n; ++i)\n    std::cin &gt;&gt; array.at(i);\n  reverse(array);\n  print(array);\n  return 0;\n  // Dtor of `array` is called here,\n  // which deallocates the memory\n}\n</code></pre> <p>\u90a3\u4e48\u5728string\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2astring\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u3002\u90a3\u4e48\u8fd9\u5c31\u6d89\u53ca\u5230copy control</p> <pre><code>Dynarray a(3);\na.at(0) = 2; a.at(1) = 3; a.at(2) = 5;\nDynarray b = a; // It compiles.\nprint(b); // 2 3 5\na.at(0) = 70;\nprint(b); // 70 3 5\n// \u8bf4\u660e\u5176\u5b9epointers a.m_storage and b.m_storage are pointing to the same address!\n</code></pre> <p>\u56e0\u6b64\u4e3a\u4e86\u4e0d\u4f1a\u53d1\u751f\u591a\u6307\u9488\u6307\u5411\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u6784\u9020\u51fd\u6570\u4e0a\u9762\u505a\u6587\u7ae0\u2014\u2014Copy Constructor</p> <p>\u4f20\u5165\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u5c31\u80fd\u4f20\u5165\u4e00\u4e2aclass\uff01</p> <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;other); // const\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u6539\u53d8\u4f20\u8fdb\u6765\u7684class\u5b9e\u4f8b\n  // \u8fd9\u91cc\u4f20\u5165\u7684\u662f\u5f15\u7528\n    : m_storage(new int[other.size()]{}), m_length(other.size()) {\n        // \u4e0a\u9762\u5217\u8868\u521d\u59cb\u5316\u4e4b\u540e\u5f00\u59cb\u8d4b\u503c\uff0c\u4f46\u662f\u5176\u5b9e\u6307\u9488\u5df2\u7ecf\u662f\u4e0d\u4e00\u6837\u7684\u4e86\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n  }\n};\n</code></pre> <p>\u5f53\u7136\u5982\u679c\u4e0d\u8be6\u7ec6\u5730\u8fdb\u884ccopy, \u90a3\u4e48\u5728\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u58f0\u660e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u9ed8\u8ba4\u7684</p> <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;) = default;\n  // Explicitly defaulted: Explicitly requires the compiler to synthesize\n  // a copy constructor, with default behavior.\n};\n</code></pre> <p>\u9664\u4e86std::string s1(s2);  \u6709\u7684\u65f6\u5019\u6211\u4eec\u8fd8\u53ef\u4ee5\uff1a s1 = s2;</p> <p>\u90a3\u4e48\u8fd9\u53c8\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f \u8fd9\u5c31\u9700\u8981\u8fd0\u7b97\u7b26\u91cd\u8f7d\u4e86\uff08Copy-assignment operator\uff09</p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    delete[] m_storage; // !!!\u4f60\u539f\u6765\u53ef\u80fd\u5c31\u5df2\u7ecf\u662f\u62e5\u6709\u6570\u636e\u4e86\n    m_storage = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre> <p>\u8fd9\u5f53\u7136\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u4f46\u662f\u5982\u679c\u518d\u5201\u94bb\u4e00\u70b9\uff1a\u5982\u679c\u81ea\u5df1copy\u7ed9\u81ea\u5df1\u5462\uff1f </p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    int *new_data = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      new_data[i] = other.at(i);\n    delete[] m_storage;\n    m_storage = new_data;\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre> <p>\u5f53\u7136\uff0ccopy  constructor\u4e5f\u6709\u9ed8\u8ba4\u7684\u7248\u672c\u4f9b\u4f60\u9009\u62e9\uff0c\u5982\u679c\u4e0d\u5b9a\u4e49\u7684\u8bdd\uff0c\u90a3\u4e48\u5176\u5b9e\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u4f1a\u628a\u6210\u5458\u4e00\u4e2a\u4e00\u4e2a\u590d\u5236:</p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    m_storage = other.m_storage;\n    m_length = other.m_length;\n    return *this;\n  }\n};\n// You can also require a synthesized one explicitly by saying = default;\n</code></pre> <p>\u5728C++\u4e2d\uff0c\"the rule of three\"\uff08\u4e09\u6cd5\u5219\uff09\u662f\u6307\u5f53\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3001\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6216\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u65f6\uff0c\u901a\u5e38\u9700\u8981\u540c\u65f6\u5b9a\u4e49\u8fd9\u4e09\u4e2a\u7279\u6b8a\u6210\u5458\u51fd\u6570\u3002\u8fd9\u662f\u56e0\u4e3aC++\u7684\u9ed8\u8ba4\u884c\u4e3a\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u81ea\u5b9a\u4e49\u8d44\u6e90\u7ba1\u7406\u6216\u5bf9\u8c61\u7684\u62f7\u8d1d\u8bed\u4e49\u3002</p> <p>\u8fd9\u4e09\u4e2a\u7279\u6b8a\u6210\u5458\u51fd\u6570\u5305\u62ec\uff1a</p> <ol> <li>\u6790\u6784\u51fd\u6570\uff08<code>~ClassName()</code>\uff09\uff1a\u8d1f\u8d23\u9500\u6bc1\u5bf9\u8c61\u5e76\u91ca\u653e\u8d44\u6e90\u3002\u5982\u679c\u7c7b\u7ba1\u7406\u4e86\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u6216\u5176\u4ed6\u8d44\u6e90\uff0c\u901a\u5e38\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u6765\u6b63\u786e\u5730\u91ca\u653e\u8fd9\u4e9b\u8d44\u6e90\u3002</li> <li>\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08<code>ClassName(const ClassName &amp;)</code>\uff09\uff1a\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u73b0\u6709\u5bf9\u8c61\u7684\u526f\u672c\u3002\u5f53\u5bf9\u8c61\u901a\u8fc7\u503c\u4f20\u9012\u6216\u4f5c\u4e3a\u67d0\u4e9b\u51fd\u6570\u7684\u8fd4\u56de\u503c\u65f6\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u8fd9\u65f6\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f1a\u88ab\u7528\u5230\u3002</li> <li>\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff08<code>ClassName &amp; operator=(const ClassName &amp;)</code>\uff09\uff1a\u7528\u4e8e\u5c06\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5bb9\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b9e\u73b0\u5bf9\u8c61\u7684\u6df1\u62f7\u8d1d\u3002</li> </ol> <p>\"the rule of three\" \u80cc\u540e\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u4f60\u4e0d\u663e\u5f0f\u5730\u5b9a\u4e49\u8fd9\u4e9b\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4e3a\u4f60\u751f\u6210\u9ed8\u8ba4\u7684\u7248\u672c\uff0c\u800c\u8fd9\u4e9b\u9ed8\u8ba4\u7248\u672c\u53ef\u80fd\u4e0d\u4f1a\u6b63\u786e\u5730\u5904\u7406\u8d44\u6e90\u7ba1\u7406\u3002\u4f8b\u5982\uff0c\u7f16\u8bd1\u5668\u751f\u6210\u7684\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u4f1a\u6267\u884c\u6d45\u62f7\u8d1d\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u591a\u91cd\u91ca\u653e\u8d44\u6e90\uff08\u5982\u52a8\u6001\u5185\u5b58\uff09\u7684\u95ee\u9898\u3002</p> <p>\u5982\u679c\u4f60\u5b9a\u4e49\u4e86\u6790\u6784\u51fd\u6570\u6765\u91ca\u653e\u8d44\u6e90\uff0c\u4f46\u6ca1\u6709\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u90a3\u4e48\u5728\u590d\u5236\u5bf9\u8c61\u65f6\uff0c\u8fd9\u4e9b\u590d\u5236\u7684\u5bf9\u8c61\u5c06\u4e0d\u4f1a\u6b63\u786e\u5730\u7ba1\u7406\u8d44\u6e90\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\u6765\u91ca\u653e\u8d44\u6e90\u3002\u540c\u6837\uff0c\u5982\u679c\u4f60\u5b9a\u4e49\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6216\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u4f46\u6ca1\u6709\u5b9a\u4e49\u6790\u6784\u51fd\u6570\uff0c\u90a3\u4e48\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff0c\u8d44\u6e90\u53ef\u80fd\u4e0d\u4f1a\u88ab\u91ca\u653e\u3002</p> <p>\u56e0\u6b64\uff0c\"the rule of three\" \u662f\u4e00\u79cd\u6307\u5bfc\u539f\u5219\uff0c\u5e2e\u52a9\u4f60\u786e\u4fdd\u7c7b\u7684\u8d44\u6e90\u88ab\u6b63\u786e\u7ba1\u7406\uff0c\u907f\u514d\u8d44\u6e90\u6cc4\u6f0f\u6216\u5176\u4ed6\u4e0e\u8d44\u6e90\u7ba1\u7406\u76f8\u5173\u7684\u95ee\u9898\u3002</p> <p>\u4eceC++11\u5f00\u59cb\uff0c\"the rule of three\" \u5df2\u7ecf\u6269\u5c55\u4e3a\"the rule of five\"\uff0c\u56e0\u4e3a\u5f15\u5165\u4e86\u4e24\u4e2a\u989d\u5916\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff1a</p> <ul> <li>\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08<code>ClassName(ClassName &amp;&amp;)</code>\uff09</li> <li>\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\uff08<code>ClassName &amp; operator=(ClassName &amp;&amp;)</code>\uff09</li> </ul> <p>\u79fb\u52a8\u8bed\u4e49\u5141\u8bb8\u8d44\u6e90\u7684\u8f6c\u79fb\uff0c\u800c\u4e0d\u662f\u590d\u5236\uff0c\u8fd9\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#type-alias-members","title":"Type alias members","text":"<p>\u6709\u7684\u65f6\u5019\u6570\u636e\u7c7b\u578b\u6211\u60f3\u6362\u4e2a\u540d\u5b57\uff0c\u600e\u4e48\u5b9e\u73b0\uff1f</p> <pre><code>// C-style\ntypedef long long LL;\n// C++-style\nusing LL = long long;\n// C-style\ntypedef int (&amp;ref_to_array)[1000];\n// C++-style\nusing ref_to_array = int (&amp;)[1000];\n</code></pre> <p>A class can have type alias members.</p> <pre><code>class Dynarray {\n public:\n  using size_type = std::size_t;\n  size_type size() const { return m_length; }\n};\n// Usage: ClassName::TypeAliasName, \u56e0\u4e3a\u662f\u7c7b\u4e0b\u7684\n// \u5f53\u7136\uff0c\u8fd9\u79cd\u7c7b\u578b\u522b\u540d\u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u5728private\u91cc\u9762\n</code></pre> <p>All standard library containers (and <code>std::string</code>) define the type alias member <code>size_type</code> as the return type of <code>.size()</code>:</p> <pre><code>int main() {\n    std::vector&lt;int&gt; vec = {1, 2, 3, 4, 5};\n    // \u4f7f\u7528\u7c7b\u578b\u522b\u540d size_type \u6765\u83b7\u53d6\u5bb9\u5668\u7684\u5927\u5c0f\n    std::vector&lt;int&gt;::size_type size = vec.size();\n    // \u8fd9\u4e48\u7528\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5bb9\u5668\u5185\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f\u4ec0\u4e48\u4e86\n    std::cout &lt;&lt; \"The size of the vector is: \" &lt;&lt; size &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#static-member","title":"static member","text":"<pre><code>class A {\n  static int something;\n  // other members ...\n};\n</code></pre> <p>There is only one <code>A::something</code>: it does not belong to any object of <code>A</code>. It belongs to the class <code>A</code>.</p> <ul> <li>Like type alias members, we use <code>ClassName::</code> instead of <code>object.</code> to access them.</li> </ul> <p>\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u7528\u5b9e\u4f8b\u53bb\u8bbf\u95ee\uff1b\u53ea\u4e0d\u8fc7\u662f\u4e0d\u540c\u7684\u5b9e\u4f8b\u5176\u5b9e\u8bbf\u95ee\u7684\u90fd\u662f\u4e00\u4e2a\u53d8\u91cf\u3002static member\u7684\u751f\u547d\u5468\u671f\u548c\u5168\u5c40\u53d8\u91cf\u4e00\u6837\u957f</p> <pre><code>class Dynarray {\n  static int s_cnt; // !!!\n  int *m_storage;\n  std::size_t m_length;\n  int m_id;\npublic:\n  Dynarray(/* ... */) : /* ... */, m_id(s_cnt++) {}\n};\n</code></pre> <p>\u800c\u5982\u679c\u7c7b\u91cc\u9762\u6709static \u65b9\u6cd5\uff0c\u90a3\u4e48\u5176\u5b9e\u8fd9\u4e2a\u5b9a\u4e49\u5728\u5916\u9762\u7684\u65b9\u6cd5\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u53ea\u4e0d\u8fc7\u662f\u8c03\u7528\u7684\u65f6\u5019\u57df\u540d\u7684\u7c7b\uff0c\u800c\u4e14\u65b9\u6cd5\u7684\u5c5e\u6027\u53ef\u80fd\u662fPublic\u4e5f\u53ef\u80fd\u662fprivate\uff08\u5f53\u7136\u53ef\u4ee5\u7c7b\u5b9a\u4e49\u7684\u65f6\u5019\u8bf4\u6e05\u695a\uff09</p> <pre><code>class A {\n public:\n  static void fun(int x, int y);\n};\n</code></pre> <p>\u800c\u4e14\uff1aThere is no <code>this</code> pointer inside <code>fun</code>. </p> <p>It can also be called by <code>a.fun(x, y)</code> (where <code>a</code> is an object of type <code>A</code>), but here <code>a</code> will not be bound to a <code>this</code> pointer, and <code>fun</code> has no way of accessing any non-<code>static</code> member of <code>a</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_8","title":"\u53cb\u5143","text":"<p>\u5b83\u5141\u8bb8\u975e\u6210\u5458\u51fd\u6570\u6216\u8005\u53e6\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u51fd\u6570\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\uff08private\uff09\u6216\u4fdd\u62a4\uff08protected\uff09\u6210\u5458\u3002</p> <p>\u53cb\u5143\u4e0d\u662f\u7c7b\u7684\u6210\u5458\uff0c\u56e0\u6b64\u5176\u5b9e\u8fd9\u4e2a\u58f0\u660e\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u65e0\u6240\u8c13\uff0c\u800c\u51fd\u6570\u5b9a\u4e49\u662f\u5728\u5916\u90e8\u7684</p> <ul> <li>We often declare all the <code>friend</code>s of a class in the beginning or at the end of class definition.</li> </ul> <pre><code>class Student {\n  friend void print(const Student &amp;); // The parameter name is not used in this\n                                      // declaration, so it is omitted.\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  Student(const std::string &amp;name, const std::string &amp;id)\n      : m_name(name), m_id(id), m_entranceYear(std::stol(id.substr(0, 4))) {}\n  auto graduated(int year) const { return year - m_entranceYear &gt;= 4; }\n  // ...\n};\nvoid print(const Student &amp;stu) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; stu.m_name &lt;&lt; \", id: \" &lt;&lt; stu.m_id\n            &lt;&lt; \"entrance year: \" &lt;&lt; stu.m_entranceYear &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_9","title":"\u51fd\u6570\u7684\u58f0\u660e","text":"<p>\u6210\u5458\u65b9\u6cd5\u53ef\u4ee5\u5728\u5916\u9762\u5b9a\u4e49\uff0c\u53ea\u4e0d\u8fc7\u9700\u8981\u52a0\u4e0a::</p> <pre><code>class Widget {\npublic:\n  const std::vector&lt;int&gt; &amp;get_gadgets() const; // A declaration only.\n  // ...\n}; // Now the definition of `Widget` is complete.\n\n// Define the function here. The function name is `Widget::get_gadgets`.\nconst std::vector&lt;int&gt; &amp;Widget::get_gadgets() const {\n  return m_gadgets; // Just like how you do it inside the class body.\n                    // The implicit `this` pointer is still there.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#rvalue-references-and-move","title":"Rvalue References and Move","text":"<pre><code>std::string a = some_value(), b = some_other_value();\nstd::string s;\ns = a;\ns = a + b; // \u8fd9\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f \n</code></pre> <ol> <li>Evaluate <code>a + b</code> and store the result in a temporary object, say <code>tmp</code>.</li> <li>Perform the assignment <code>s = tmp</code>.</li> <li>The temporary object <code>tmp</code> is no longer needed, hence destroyed by its destructor.</li> </ol> <p>Can we make this faster?</p> <ul> <li>The assignment <code>s = tmp</code> is done by copying the contents of <code>tmp</code>?</li> <li>But <code>tmp</code> is about to \"die\"! Why can't we just steal the contents from it?</li> </ul> <p>*** Define two different assignment operators, one accepting an lvalue and the other accepting an rvalue?**</p> <p>\u5de6\u503c\u662f\u6307\u5728\u5185\u5b58\u4e2d\u6709\u6301\u4e45\u5b58\u50a8\u4f4d\u7f6e\u7684\u5bf9\u8c61\uff0c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8868\u8fbe\u5f0f\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5de6\u503c\u5c31\u662f\u6709\u4e00\u4e2a\u660e\u786e\u5185\u5b58\u5730\u5740\u7684\u53d8\u91cf\u3002</p> <p>\u53f3\u503c\u662f\u6307\u90a3\u4e9b\u4e0d\u5728\u5185\u5b58\u4e2d\u6709\u6301\u4e45\u5b58\u50a8\u4f4d\u7f6e\u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u662f\u4e34\u65f6\u5bf9\u8c61\u6216\u5b57\u9762\u91cf\u3002\u53f3\u503c\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u8868\u8fbe\u5f0f\u7684\u5de6\u8fb9\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u6301\u4e45\u7684\u5185\u5b58\u5730\u5740\u3002</p> <p>\u5de6\u503c\u5f15\u7528\u53ef\u4ee5\u7ed1\u5b9a\u5230\u5de6\u503c\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u5230\u53f3\u503c\u4e0a\uff08\u4f46\u8fd9\u6837\u4f1a\u5c06\u53f3\u503c\u8f6c\u5316\u4e3a\u5de6\u503c\uff09\u3002\u5de6\u503c\u5f15\u7528\u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528<code>&amp;</code>\u7b26\u53f7\u8868\u793a\u3002</p> <p>\u53f3\u503c\u5f15\u7528\u53ea\u80fd\u7ed1\u5b9a\u5230\u53f3\u503c\u4e0a\uff0c\u4e0d\u80fd\u7ed1\u5b9a\u5230\u5de6\u503c\u4e0a\u3002\u53f3\u503c\u5f15\u7528\u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528\u4e24\u4e2a<code>&amp;</code>\u7b26\u53f7\u8868\u793a\uff08<code>&amp;&amp;</code>\uff09\u3002</p> <pre><code>int &amp;r = 42;             // Error: Lvalue reference cannot be bound to rvalue.\nint &amp;&amp;rr = 42;           // Correct: `rr` is an rvalue reference.\nconst int &amp;cr = 42;      // Also correct:\n                         // Lvalue reference-to-const can be bound to rvalue.\nconst int &amp;&amp;crr = 42;    // Correct, but useless:\n                         // Rvalue reference-to-const is seldom used.\n\nint i = 42;\nint &amp;&amp;rr2 = i;           // Error: Rvalue reference cannot be bound to lvalue.\nint &amp;r2 = i * 42;        // Error: Lvalue reference cannot be bound to rvalue.\nconst int &amp;cr2 = i * 42; // Correct\nint &amp;&amp;rr3 = i * 42;      // Correct\n</code></pre> <pre><code>void fun(const std::string &amp;);\nvoid fun(std::string &amp;&amp;);\n// such overloading is allowed!\n</code></pre> <ul> <li><code>fun(s1 + s2)</code> matches <code>fun(std::string &amp;&amp;)</code>, because <code>s1 + s2</code> is an rvalue.</li> <li><code>fun(s)</code> matches <code>fun(const std::string &amp;)</code>, because <code>s</code> is an lvalue.</li> <li>Note that if <code>fun(std::string &amp;&amp;)</code> does not exist, <code>fun(s1 + s2)</code> also matches <code>fun(const std::string &amp;)</code></li> </ul> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n    if (this != &amp;other) {\n    // Self-assignment safe!\n      delete[] m_storage;\n      // Avoid memory leaks!\n      m_storage = other.m_storage; m_length = other.m_length;\n      // Steal the resources from other.\n      other.m_storage = nullptr; other.m_length = 0;\n      // Make sure other is in a valid state, so that it can be safely destroyed.\n    }\n    return *this;\n  }\n  Dynarray(const Dynarray &amp;other) // copy constructor\n    : m_storage(new int[other.m_length]), m_length(other.m_length) {\n    for (std::size_t i = 0; i != m_length; ++i)\n      m_storage[i] = other.m_storage[i];\n  }\n  Dynarray(Dynarray &amp;&amp;other) noexcept // move constructor\n    : m_storage(other.m_storage), m_length(other.m_length) {\n    // Steal the resources of other, instead of making a copy.\n    other.m_storage = nullptr;\n    other.m_length = 0;\n    // Make sure other is in a valid state, so that it can be safely destroyed.\n  }\n};\n</code></pre> <p>Like copy operations, we can use <code>=default</code> to require a synthesized move operation that has the default behaviors.</p> <pre><code>struct X {\n  X(X &amp;&amp;) = default;\n  X &amp;operator=(X &amp;&amp;) = default;\n};\n</code></pre> <ul> <li>The synthesized move operations call the corresponding move operations of each member in the order in which they are declared.</li> <li>The synthesized move operations are <code>noexcept</code>.</li> </ul> <p>The Rule of Five </p> <p>The updated copy control members: Define zero or five of them </p> <ul> <li>copy constructor</li> <li>copy assignment operator</li> <li>move constructor</li> <li>move assignment operator</li> <li> <p>destructor</p> </li> <li> <p>The move constructor or the move assignment operator will not be generated 2 if any of the rest four members have a user-declared version.</p> </li> <li>The copy constructor or copy assignment operator, if not provided by the user, will be implicitly <code>delete</code>d if the class has a user-provided move operation.</li> <li>The generation of the copy constructor or copy assignment operator is deprecated (since C++11) when the class has a user-declared copy operation or a destructor.</li> </ul> <p>std::move   Defined in <code>&lt;utility&gt;</code></p> <p><code>std::move(x)</code> performs an lvalue to rvalue cast:</p> <pre><code>int ival = 42;\nint &amp;&amp;rref = ival; // Error\nint &amp;&amp;rref2 = std::move(ival); // Correct\n</code></pre> <p><code>std::move(x)</code> indicates that we want to treat <code>x</code> as an rvalue, which means that <code>x</code> will be moved from.</p> <p>The call to <code>std::move</code> promises that we do not intend to use <code>x</code> again,</p> <ul> <li>except to assign to it or to destroy it.</li> </ul> <p>A call to <code>std::move</code> is usually followed by a call to some function that moves the object, after which we cannot make any assumptions about the value of the moved-from object.</p> <p>\"<code>std::move</code> does not move anything. It just makes a promise.\"</p> <p>Suppose we give every <code>Dynarray</code> a special \"label\", which is a string.</p> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  std::string m_label;\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept\n      : m_storage(other.m_storage), m_length(other.m_length),\n        m_label(std::move(other.m_label)) { // !!\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n}; // The standard library facilities ought to define efficient and correct move operations.\n</code></pre> <p>The lifetime of rvalues is often very short, compared to that of lvalues.</p> <ul> <li>Lvalues have persistent state, whereas rvalues are either literals or temporary objects created in the course of evaluating expressions.</li> </ul> <p>An rvalue reference extends the lifetime of the rvalue that it is bound to.</p> <p>Golden rule: Anything that has a name is an lvalue.</p> <ul> <li>The rvalue reference has a name, so it is an lvalue.</li> </ul> <p>Since C++11, <code>return result</code> performs a move initialization of a temporary object, say <code>tmp</code>.</p> <p>\u547d\u540d\u8fd4\u56de\u503c\u4f18\u5316NRVO\uff1a</p> <pre><code>Dynarray concat(const Dynarray &amp;a, const Dynarray &amp;b) {\n  Dynarray result(a.size() + b.size());\n  // ...\n  return result;\n}\nDynarray a = concat(b, c); // Initialization\n</code></pre> <p>NRVO transforms this code to</p> <pre><code>// Pseudo C++ code.\nvoid concat(Dynarray &amp;result, const Dynarray &amp;a, const Dynarray &amp;b) {\n  // Pseudo C++ code. For demonstration only.\n  result.Dynarray::Dynarray(a.size() + b.size()); // construct in-place\n  // ...\n}\nDynarray a@; // Uninitialized.\nconcat(a@, b, c);\n</code></pre> <p>so that no copy or move is needed.</p> <p>Note:</p> <ul> <li>NRVO was invented decades ago (even before C++98).</li> <li>NRVO is an optimization, but not mandatory.</li> <li>Even if NRVO is performed, the move constructor should still be available.</li> <li>Because the compiler can choose not to perform NRVO.</li> <li>The program should be syntactically correct (\"well-formed\"), no matter how the compiler treats it.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#smart-pointer","title":"smart pointer","text":"<p>For raw pointers obtained from <code>new</code> / <code>new[]</code> expressions, a manual <code>delete</code> / <code>delete[]</code> is required.</p> <p>Idea: Make use of destructors.  \u4e0d\u59a8\u628a\u6307\u9488\u53d8\u6210\u4e00\u79cdclass\uff01</p> <pre><code>struct WindowPtr { // A \"smart pointer\".\n  Window *ptr;\n  WindowPtr(Window *p) : ptr(p) {}\n  ~WindowPtr() { delete ptr; } // The destructor will `delete` the object.\n};\n</code></pre> <p>Wrap the pointer into a class! When the control reaches the end of the scope in which the <code>WindowPtr</code> lives, the destructor of <code>WindowPtr</code> will be called automatically.</p> <pre><code>void runGame(const std::vector&lt;Option&gt; &amp;options, const Settings &amp;settings) {\n  WindowPtr pWindow(new Window(settings.width, settings.height, settings.mode));\n  if (/* condition1 */) {\n    // ...\n    return; // `pWindow` is destroyed automatically, with its destructor called.\n  }\n  // ...\n  // `pWindow` is destroyed automatically, with its destructor called.\n}\n</code></pre> <p>\u8fd9\u6837\u5f53\u7136\u4e0d\u9519\uff0c\u4f46\u662f\u5982\u679c\u6709\u4e24\u4e2a\u8fd9\u6837\u7684\u6307\u9488\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\uff0c\u90a3\u5c82\u4e0d\u662f\u53cc\u91cd\u91ca\u653e\u4e86\u5417\uff1f </p> <pre><code>{\n  WindowPtr pWindow(new Window(settings.width, settings.height, settings.mode));\n  auto copy = pWindow; // `copy.ptr` and `pWindow.ptr` point to the same object!\n} // The object is deleted twice! Disaster!\n</code></pre> <p>Possible behaviors of copy of a smart pointer:</p> <ol> <li>Copy the object. (Value semantics)</li> <li>Standard library containers. e.g. <code>std::string</code>, <code>std::vector</code>, <code>std::set</code>, ...</li> <li>Copy the pointer, but with some special design. (Pointer semantics)</li> <li><code>std::shared_ptr&lt;T&gt;</code>. Defined in standard library file <code>&lt;memory&gt;</code>.</li> <li>Disable it. (Unique ownership)</li> <li><code>std::unique_ptr&lt;T&gt;</code>. Defined in standard library file <code>&lt;memory&gt;</code>.</li> </ol> <p>The smart pointers <code>std::shared_ptr&lt;T&gt;</code>, <code>std::unique_ptr&lt;T&gt;</code> and <code>std::weak_ptr&lt;T&gt;</code> are the C++'s answer to garbage collection.</p> <ul> <li><code>std::weak_ptr</code> is not covered in CS100.</li> </ul> <p>Smart pointers support the similar operations as raw pointers:</p> <ul> <li><code>*sp</code> returns reference to the pointed-to object.</li> <li><code>sp-&gt;mem</code> is equivalent to <code>(*sp).mem</code>.</li> <li><code>sp</code> is contextually convertible to <code>bool</code>: It can be treated as a \"condition\".</li> <li>It can be placed at the \"condition\" part of <code>if</code>, <code>for</code>, <code>while</code>, <code>do</code> statements.</li> <li>It can be used as operands of <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> or the first operand of <code>?:</code>.</li> <li>In all cases, the conversion result is <code>true</code> iff <code>sp</code> holds an object (not \"null\").</li> </ul> <p>[Best practice] In modern C++, prefer smart pointers to raw pointers.</p> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd<code>std::unique_ptr</code> \u548c <code>std::shared_ptr</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#stdunique_ptr","title":"std::unique_ptr","text":"<p>\u8fd9\u4e2a\u6307\u9488\u610f\u5473\u7740\uff1a Unique ownership of the object </p> <p><code>std::unique_ptr&lt;T&gt;</code>\u662f\u4e00\u79cd\u72ec\u5360\u6240\u6709\u6743\u667a\u80fd\u6307\u9488\uff0c\u5b83\u62e5\u6709\u5176\u6307\u5411\u7684\u8d44\u6e90\u7684\u552f\u4e00\u6240\u6709\u6743\uff0c\u5e76\u4e14\u4e0d\u80fd\u88ab\u590d\u5236\u6216\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a<code>unique_ptr</code>\uff08\u9664\u975e\u4f7f\u7528<code>std::move</code>\u8fdb\u884c\u79fb\u52a8\u8bed\u4e49\uff09\u3002\u5f53<code>unique_ptr</code>\u88ab\u9500\u6bc1\u65f6\uff0c\u5b83\u6240\u7ba1\u7406\u7684\u8d44\u6e90\u4e5f\u4f1a\u88ab\u81ea\u52a8\u5220\u9664\u3002</p> <p>\u4e3b\u8981\u7279\u70b9\uff1a</p> <ol> <li>\u72ec\u5360\u6240\u6709\u6743\uff1a<code>std::unique_ptr</code>\u62e5\u6709\u5176\u6307\u5411\u7684\u8d44\u6e90\u7684\u552f\u4e00\u6240\u6709\u6743\uff0c\u4e0d\u80fd\u6709\u5176\u4ed6<code>unique_ptr</code>\u5171\u4eab\u540c\u4e00\u8d44\u6e90\u3002</li> <li>\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\uff1a\u4e0e<code>shared_ptr</code>\u7c7b\u4f3c\uff0c\u5f53<code>unique_ptr</code>\u88ab\u9500\u6bc1\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5220\u9664\u6240\u7ba1\u7406\u7684\u8d44\u6e90\u3002</li> <li>\u79fb\u52a8\u8bed\u4e49\uff1a<code>std::unique_ptr</code>\u652f\u6301\u79fb\u52a8\u8bed\u4e49\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u6743\u4ece\u4e00\u4e2a<code>unique_ptr</code>\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a<code>unique_ptr</code>\u3002</li> <li>\u6027\u80fd\uff1a\u7531\u4e8e\u6ca1\u6709\u5f15\u7528\u8ba1\u6570\u7684\u5f00\u9500\uff0c<code>std::unique_ptr</code>\u901a\u5e38\u6bd4<code>std::shared_ptr</code>\u66f4\u9ad8\u6548\u3002</li> </ol> <p>\u4f7f\u7528\u573a\u666f\uff1a</p> <ul> <li>\u5f53\u8d44\u6e90\u53ea\u9700\u8981\u4e00\u4e2a\u5bf9\u8c61\u7ba1\u7406\u65f6\u3002</li> <li>\u5f53\u8d44\u6e90\u7684\u751f\u547d\u5468\u671f\u660e\u786e\uff0c\u4e0d\u9700\u8981\u8de8\u5bf9\u8c61\u5171\u4eab\u65f6\u3002</li> </ul> <pre><code>class WindowPtr {\n  Window *ptr;\npublic:\n  WindowPtr(Window *p = nullptr) : ptr(p) {}\n  ~WindowPtr() { delete ptr; }\n  // \u4e0b\u9762\u4e24\u79cd\u65b9\u6cd5\u5e94\u8be5\u662f\u4e0d\u652f\u6301\u7684\uff01\n  WindowPtr(const WindowPtr &amp;) = delete;\n  WindowPtr &amp;operator=(const WindowPtr &amp;) = delete;\n  WindowPtr(WindowPtr &amp;&amp;other) noexcept : ptr(other.ptr) { other.ptr = nullptr; }\n  WindowPtr &amp;operator=(WindowPtr &amp;&amp;other) noexcept {\n    // transfer of ownership.\n    if (&amp;other != this) {\n      delete ptr; ptr = other.ptr; other.ptr = nullptr;\n    }\n    return *this;\n  }\n};\n</code></pre> <p>Like <code>std::vector</code>, <code>std::unique_ptr</code> is also a class template. It is not a type itself.</p> <ul> <li><code>std::unique_ptr&lt;PointeeType&gt;</code> is the complete type name, where <code>PointeeType</code> is the type of the object that it points to.</li> <li>For <code>T</code> \u2260 <code>U</code>, <code>std::unique_ptr&lt;T&gt;</code> and <code>std::unique_ptr&lt;U&gt;</code> are two different and independent types.</li> </ul> <p>\u4f8b\u5b50\uff1a</p> <pre><code>std::unique_ptr&lt;Student&gt; p(new Student(\"Bob\", 2020123123));\nstd::unique_ptr&lt;Student&gt; p1 = std::make_unique&lt;Student&gt;(\"Bob\", 2020123123);\nauto p2 = std::make_unique&lt;Student&gt;(\"Alice\", 2020321321);\n</code></pre> <p><code>up</code> is in the state that does not own any object.</p> <ul> <li>This is a defined and deterministic behavior! It is not holding some indeterminate value.</li> <li>The standard library hates indeterminate values, just as we do.</li> </ul> <p><code>std::unique_ptr</code> is not copyable, but only movable.</p> <pre><code>auto p = std::make_unique&lt;std::string&gt;(5, 'c');\nstd::cout &lt;&lt; *p &lt;&lt; std::endl;                  // Prints \"ccccc\".\nauto q = p;                                    // Error. Copy is not allowed.\nauto r = std::move(p);                         // Correct.\n// Now the ownership of this string has been transferred to `r`.\nstd::cout &lt;&lt; *r &lt;&lt; std::endl; // Prints \"ccccc\".\nif (!p) // true\n  std::cout &lt;&lt; \"p is \\\"null\\\" now.\" &lt;&lt; std::endl;\n</code></pre> <p>\u4f46\u662f\u6709\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e5f\u60f3\u8981\u4e00\u4e2a\u539f\u7248\u7684\u6307\u9488\u6765\u505a\u4e00\u4e9b\u4e8b\u60c5\uff1a</p> <pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre> <ul> <li>If you want p to be just an observer, write <code>auto p = pWindow.get();</code></li> <li><code>pWindow.get()</code> returns a raw pointer to the object, which is of type <code>Window *</code>.</li> <li>Be careful! As an observer, <code>p</code> should never interfere in the lifetime of the object. A simple <code>delete p;</code> will cause disaster.</li> </ul> <p>\u5f53\u7136\uff0c\u8fd4\u56de\u4e00\u4e2a<code>std::unique_ptr</code>\u4e5f\u662f\u5f88\u6b63\u5e38\u7684\uff1a </p> <pre><code>struct Window {\n  // A typical \"factory\" function.\n  static std::unique_ptr&lt;Window&gt; create(const Settings &amp;settings) {\n    auto pW = std::make_unique&lt;Window&gt;(/* some arguments */);\n    logWindowCreation(pW);\n    // ...\n    return pW;\n  }\n};\nauto state = Window::create(my_settings);\n</code></pre> <p>\u4f46\u662f\u5047\u5982\u8bf4array type, \u90a3\u4e48\u662f\u5982\u4f55\u5904\u7406\u7684\u5462\uff1f </p> <p>By default, the destructor of <code>std::unique_ptr&lt;T&gt;</code> uses a <code>delete</code> expression to destroy the object it holds.</p> <p>What happens if <code>std::unique_ptr&lt;T&gt; up(new T[n]);</code>?</p> <ul> <li>The memory is obtained using <code>new[]</code>, but deallocated by <code>delete</code>! Undefined behavior.</li> </ul> <p>\u89c1\u62db\u62c6\u62db\uff0c\u6709A template specialization: <code>std::unique_ptr&lt;T[]&gt;</code>.</p> <p>\u4f46\u662f\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cUse standard library containers instead!\uff1b \u3001</p> <p><code>std::unique_ptr&lt;T[]&gt;</code> is seldom needed.</p> <p>Zero-overhead: Using a <code>std::unique_ptr</code> does not cost more time or space than using raw pointers.</p> <p>[Best practice] Use <code>std::unique_ptr</code> for exclusive-ownership resource management.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#stdshared_ptr","title":"std::shared_ptr","text":"<p>A <code>std::unique_ptr</code> exclusively owns an object, but sometimes this is not convenient.</p> <p>\u52a8\u673a\u662f\u4ec0\u4e48\uff1f </p> <p>Design a \"shared-pointer\" that allows the object it manages to be shared.</p> <p>When should the object be destroyed?</p> <ul> <li>A <code>std::unique_ptr</code> destroys the object it manages when the pointer itself is destroyed.</li> <li>If we allow many shared-pointers to point to the same object, how can we know when to destroy that object?</li> </ul> <p><code>std::shared_ptr&lt;T&gt;</code>\u662f\u4e00\u79cd\u5171\u4eab\u6240\u6709\u6743\u667a\u80fd\u6307\u9488\uff0c\u5b83\u5141\u8bb8\u591a\u4e2a<code>shared_ptr</code>\u5b9e\u4f8b\u5171\u4eab\u540c\u4e00\u8d44\u6e90\u3002\u5f53\u6700\u540e\u4e00\u4e2a\u5f15\u7528\u8be5\u8d44\u6e90\u7684<code>shared_ptr</code>\u88ab\u9500\u6bc1\u6216\u88ab\u91ca\u653e\u65f6\uff0c\u8d44\u6e90\u4f1a\u88ab\u81ea\u52a8\u5220\u9664\u3002</p> <p>\u4e3b\u8981\u7279\u70b9\uff1a</p> <ol> <li>\u5f15\u7528\u8ba1\u6570\uff1a<code>std::shared_ptr</code>\u5185\u90e8\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u673a\u5236\u6765\u7ba1\u7406\u8d44\u6e90\u3002\u6bcf\u5f53\u6709\u65b0\u7684<code>shared_ptr</code>\u6307\u5411\u8be5\u8d44\u6e90\u65f6\uff0c\u5f15\u7528\u8ba1\u6570\u589e\u52a0\uff1b\u5f53\u4e00\u4e2a<code>shared_ptr</code>\u88ab\u9500\u6bc1\u6216\u88abreset\u65f6\uff0c\u5f15\u7528\u8ba1\u6570\u51cf\u5c11\u3002</li> <li>\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\uff1a\u5f53\u5f15\u7528\u8ba1\u6570\u964d\u52300\u65f6\uff0c<code>std::shared_ptr</code>\u4f1a\u81ea\u52a8\u5220\u9664\u6240\u7ba1\u7406\u7684\u8d44\u6e90\u3002</li> <li>\u590d\u5236\u8bed\u4e49\uff1a<code>std::shared_ptr</code>\u652f\u6301\u590d\u5236\uff0c\u590d\u5236\u6784\u9020\u51fd\u6570\u548c\u8d4b\u503c\u64cd\u4f5c\u7b26\u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u4f7f\u5f97\u591a\u4e2a\u6307\u9488\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u8d44\u6e90\u3002</li> <li>\u7ebf\u7a0b\u5b89\u5168\uff1a\u5f15\u7528\u8ba1\u6570\u7684\u4fee\u6539\u901a\u5e38\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4f46\u8d44\u6e90\u7684\u8bbf\u95ee\u9700\u8981\u7a0b\u5e8f\u5458\u81ea\u884c\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u3002</li> </ol> <p>\u4f7f\u7528\u573a\u666f\uff1a</p> <ul> <li>\u5f53\u8d44\u6e90\u9700\u8981\u5728\u591a\u4e2a\u5bf9\u8c61\u95f4\u5171\u4eab\u65f6\u3002</li> <li>\u5f53\u8d44\u6e90\u7684\u751f\u547d\u5468\u671f\u9700\u8981\u8de8\u8d8a\u591a\u4e2a\u51fd\u6570\u6216\u6a21\u5757\u65f6\u3002</li> </ul> <p>By maintaining a variable that counts how many shared-pointers are pointing to the object, we can know when to destroy the object. It can prevent memory leak in many cases, but not all cases!</p> <pre><code>std::shared_ptr&lt;Type&gt; sp2(new Type(args));\nauto sp = std::make_shared&lt;Type&gt;(args); // equivalent, but better\n// sp points to a string \"cccccccccc\".\nauto sp = std::make_shared&lt;std::string&gt;(10, 'c');\nauto pWindow = std::make_shared&lt;Window&gt;(80, 24, my_settings.mode);\n\nauto sp = std::make_shared&lt;Type&gt;(args);    // preferred\nstd::shared_ptr&lt;Type&gt; sp2(new Type(args)); // ok, but less preferred\n</code></pre> <p>[Best practice] Prefer <code>std::make_shared</code> to directly using <code>new</code> when creating a <code>std::shared_ptr</code>.</p> <p><code>*</code> and <code>-&gt;</code> can be used as if it is a raw pointer:</p> <pre><code>auto sp = std::make_shared&lt;std::string&gt;(10, 'c');\nstd::cout &lt;&lt; *sp &lt;&lt; std::endl;        // \"cccccccccc\"\nstd::cout &lt;&lt; sp-&gt;size() &lt;&lt; std::endl; // \"10\"\n</code></pre> <p><code>sp.use_count()</code>: The value of the reference counter.</p> <pre><code>auto sp = std::make_shared&lt;std::string&gt;(10, 'c');\n{\n  auto sp2 = sp;\n  std::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl; // 2\n} // `sp2` is destroyed, but the managed object is not destroyed.\nstd::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl;   // 1\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#operator-overloading","title":"Operator Overloading","text":"<p>Overloaded operators can be defined in two forms:</p> <ul> <li>as a member function, in which the leftmost operand is bound to <code>this</code>:</li> <li><code>a[i]</code> \u21d4 <code>a.operator[](i)</code></li> <li><code>a = b</code> \u21d4 <code>a.operator=(b)</code></li> <li><code>*a</code> \u21d4 <code>a.operator*()</code></li> <li><code>f(arg1, arg2, arg3, ...)</code> \u21d4 <code>f.operator()(arg1, arg2, arg3, ...)</code></li> <li>as a non-member function:</li> <li><code>a == b</code> \u21d4 <code>operator==(a, b)</code></li> <li><code>a + b</code> \u21d4 <code>operator+(a, b)</code></li> </ul> <p>At least one operand should be a class type. Modifying the behavior of operators on built-in types is not allowed.</p> <pre><code>int operator+(int, int);   // Error.\nMyInt operator-(int, int); // Still error.\n</code></pre> <p>Inventing new operators is not allowed.</p> <p><code>double operator**(double x, double exp); // Error.</code></p> <p>Overloading does not modify the associativity, precedence and the operands' evaluation order.</p> <p><code>std::cout &lt;&lt; a + b; // Equivalent to `std::cout &lt;&lt; (a + b)`.</code></p> <p>\u4f8b\u5b50:</p> <pre><code>class Rational {\n  int m_num;        // numerator\n  unsigned m_denom; // denominator\n  void simplify() { // Private, because this is our implementation detail.\n    int gcd = std::gcd(m_num, m_denom); // std::gcd in &lt;numeric&gt; (since C++17)\n    m_num /= gcd; m_denom /= gcd;\n  }\n  friend Rational operator-(const Rational &amp;); // Unary `operator-` as in `-x`.\npublic:\n  Rational &amp;operator+=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom) // Be careful with `unsigned`!\n            + static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this; // `x += y` should return a reference to `x`.\n  }\n};\nRational operator-(const Rational &amp;x) {\n  return {-x.m_num, x.m_denom};\n  // The above is equivalent to `return Rational(-x.m_num, x.m_denom);`.\n}\n</code></pre> <p>\u5728C++\u4e2d\uff0c<code>&amp;</code>\u7b26\u53f7\u5728\u6210\u5458\u51fd\u6570\u7684\u58f0\u660e\u4e2d\u8868\u793a\u8be5\u6210\u5458\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u5177\u4f53\u5230<code>operator+=</code>\u6210\u5458\u51fd\u6570\u4e2d\uff0c<code>&amp;</code>\u7684\u4f5c\u7528\u5982\u4e0b\uff1a</p> <pre><code>Rational &amp;operator+=(const Rational &amp;rhs) {\n    // ...\n    return *this; // `x += y` should return a reference to `x`.\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>operator+=</code>\u51fd\u6570\u91cd\u8f7d\u4e86\u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26<code>+=</code>\u3002\u5f53\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u88ab\u7528\u4e8e\u4e24\u4e2a<code>Rational</code>\u5bf9\u8c61\u65f6\uff0c\u5b83\u6267\u884c\u52a0\u6cd5\u64cd\u4f5c\uff0c\u5e76\u4e14\u8fd4\u56de\u8c03\u7528\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u8fd9\u91cc\u7684<code>*this</code>\u662f\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u56e0\u6b64<code>return *this;</code>\u8fd4\u56de\u7684\u662f\u8c03\u7528<code>operator+=</code>\u7684<code>Rational</code>\u5bf9\u8c61\u7684\u5f15\u7528\u3002</p> <p>\u5bf9\u4e8e<code>Rational</code>\u7c7b\u4e2d\u7684<code>operator-</code>\u51fd\u6570\uff0c\u5b83\u88ab\u58f0\u660e\u4e3a\u53cb\u5143\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u8bbf\u95ee<code>Rational</code>\u7c7b\u7684\u79c1\u6709\u6210\u5458\u53d8\u91cf<code>m_num</code>\u548c<code>m_denom</code>\u3002\u7531\u4e8e\u8fd9\u4e9b\u6210\u5458\u662f\u79c1\u6709\u7684\uff0c\u5982\u679c\u4e0d\u5c06<code>operator-</code>\u58f0\u660e\u4e3a\u53cb\u5143\uff0c\u5b83\u5c06\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e9b\u53d8\u91cf\u3002\u58f0\u660e\u4e3a\u53cb\u5143\u540e\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u50cf\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e00\u6837\u8bbf\u95ee\u8fd9\u4e9b\u79c1\u6709\u6210\u5458\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c<code>operator+=</code>\u662f<code>Rational</code>\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u56e0\u6b64\u5b83\u672c\u8eab\u5c31\u6709\u6743\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u6210\u5458\uff0c\u65e0\u9700\u58f0\u660e\u4e3a\u53cb\u5143\u3002\u6210\u5458\u51fd\u6570\u81ea\u7136\u53ef\u4ee5\u8bbf\u95ee\u5b83\u4eec\u6240\u5c5e\u7c7b\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\u548c\u51fd\u6570\uff0c\u5305\u62ec\u79c1\u6709\u7684\u3002</p> <p>\u8fd9\u4e9b+=  /=   -=   *=\u8fd0\u7b97\u7b26\u91cd\u8f7d\u90fd\u662f\u5b9a\u4e49\u5728\u7c7b\u91cc\u9762, \u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5, \u8fd9\u662f\u5f88\u5bb9\u6613\u7406\u89e3\u7684, \u6bd5\u7adf\u662f\u64cd\u4f5c\u4e4b\u540e\u4f1a\u7acb\u9a6c\u8d4b\u503c\u7ed9\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u4f8b; \u4f46\u662f\u5bf9\u4e8e+ - * / , \u5047\u5982\u8bf4\u9047\u5230\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5: </p> <pre><code>Rational r = some_value();\nauto s = r + 0; // OK, `r.operator+(0)`, effectively `r.operator+(Rational(0))`\nauto t = 0 + r; // Error! `0.operator+(r)` ???\n</code></pre> <p>[Best practice] The \"symmetric\" operators, whose operands are often exchangeable, often should be defined as non-member functions.</p> <p>\u8bda\u5982\u4e0a\u9762\u6240\u8bf4, \u90a3\u79cd\u4ea4\u6362\u5bf9\u79f0\u578b\u7684\u8fd0\u7b97\u7b26\u6700\u597d\u662f\u5b9a\u4e49\u4e3a\u7c7b\u5916\u7684\u51fd\u6570, \u7136\u540e\u53cb\u5143\u91cc\u9762\u58f0\u660e; \u5bf9\u4e8e\u90a3\u79cd\u4ea4\u6362\u4e0d\u5bf9\u79f0\u7684, \u90a3\u4e48\u5c31\u662f\u7c7b\u91cc\u9762\u5b9a\u4e49. \u5f53\u7136\u5173\u4e8e\u662f\u5426\u8981\u5728\u53cb\u5143\u91cc\u9762\u58f0\u660e, \u5982\u679c\u7c7b\u6709\u5b9a\u4e49\u80fd\u591f\u62ff\u5230\u6570\u636e\u4ece\u800c\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5, \u90a3\u4e48\u5c31\u6ca1\u6709\u5fc5\u8981\u8bbe\u8ba1\u53cb\u5143\u4e86</p> <p>[Best practice] Operators should be used for operations that are likely to be unambiguous to users.</p> <ul> <li>If an operator has plausibly more than one interpretation, use named functions instead. Function names can convey more information.</li> </ul> <p>\u89c1\u4e0b\u4f8b: </p> <pre><code>struct Point2d { double x, y; };\nbool operator&lt;(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x; // Is this the unique, best behavior?\n}\n// Much better design: Use a named function.\nbool less_in_x(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x;\n}\n</code></pre> <p>\u5173\u4e8e++ &amp; --</p> <p><code>++</code> and <code>--</code> are often defined as members, because they modify the object.</p> <p>To differentiate the postfix version <code>x++</code> and the prefix version <code>++x</code>: The postfix version has a parameter of type <code>int</code>.</p> <ul> <li>The compiler will translate <code>++x</code> to <code>x.operator++()</code>, <code>x++</code> to <code>x.operator++(0)</code>.</li> </ul> <pre><code>class Rational {\npublic:\n  Rational &amp;operator++() { ++m_num; simplify(); return *this; }\n  Rational operator++(int) { // This `int` parameter is not used.\n    // The postfix version is almost always defined like this.\n    auto tmp = *this;\n    ++*this; // Make use of the prefix version.\n    return tmp;\n  }\n};\n</code></pre> <p>\u5728C++\u4e2d\uff0c\u540e\u7f00\u9012\u589e\u8fd0\u7b97\u7b26\u91cd\u8f7d <code>operator++(int)</code> \u4e2d\u6ca1\u6709\u4f7f\u7528 <code>&amp;</code> \u7b26\u53f7\u7684\u539f\u56e0\u4e0e\u51fd\u6570\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u5173\u3002\u8fd9\u91cc\u7684 <code>&amp;</code> \u8868\u793a\u53d6\u5730\u5740\u8fd0\u7b97\u7b26\uff0c\u901a\u5e38\u7528\u4e8e\u83b7\u53d6\u5bf9\u8c61\u6216\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u3002\u5728\u91cd\u8f7d\u7684\u540e\u7f00\u9012\u589e\u8fd0\u7b97\u7b26\u4e2d\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u53d6\u5730\u5740\u8fd0\u7b97\u7b26\uff0c\u56e0\u4e3a\u51fd\u6570\u7684\u76ee\u7684\u662f\u5728\u9012\u589e\u64cd\u4f5c\u4e4b\u540e\u8fd4\u56de\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c\u3002</p> <p>\u8fd9\u91cc\u7684 <code>*this</code> \u5df2\u7ecf\u9690\u5f0f\u5730\u8868\u793a\u4e86\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4f7f\u7528 <code>&amp;</code> \u6765\u83b7\u53d6\u5730\u5740\u3002<code>*this</code> \u8868\u793a\u8c03\u7528\u5bf9\u8c61\u7684\u5f53\u524d\u5b9e\u4f8b\uff0c\u662f\u5bf9\u5f53\u524d\u5bf9\u8c61\u7684\u89e3\u5f15\u7528\u64cd\u4f5c\u3002</p> <p>\u5f53\u6267\u884c <code>auto tmp = *this;</code> \u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u4e86 <code>this</code> \u6307\u9488\u6240\u6307\u5411\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c\u3002\u7531\u4e8e <code>this</code> \u662f\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488\uff0c<code>*this</code> \u5c31\u662f\u5f53\u524d\u5bf9\u8c61\u7684\u5b9e\u4f8b\u672c\u8eab\u3002\u56e0\u6b64\uff0c<code>auto tmp = *this;</code> \u521b\u5efa\u4e86 <code>Rational</code> \u7c7b\u5f53\u524d\u5b9e\u4f8b\u7684\u4e00\u4e2a\u526f\u672c\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u53d8\u91cf <code>tmp</code> \u4e2d\u3002</p> <p>\u5728\u540e\u7f00\u9012\u589e\u8fd0\u7b97\u7b26 <code>operator++(int)</code> \u7684\u5b9e\u73b0\u4e2d\uff0c\u9012\u589e\u64cd\u4f5c <code>++*this</code> \u53d1\u751f\u5728\u521b\u5efa\u526f\u672c\u4e4b\u540e\uff0c\u8fd9\u610f\u5473\u7740\u539f\u5bf9\u8c61\u5c06\u88ab\u9012\u589e\uff0c\u4f46\u8fd4\u56de\u503c <code>tmp</code> \u4ecd\u7136\u662f\u9012\u589e\u524d\u7684\u526f\u672c\u3002</p> <p>\u5173\u4e8eIO operator</p> <p>Input operator: <code>std::istream &amp;operator&gt;&gt;(std::istream &amp;, Rational &amp;);</code></p> <p>Output operator: <code>std::ostream &amp;operator&lt;&lt;(std::ostream &amp;, const Rational &amp;);</code></p> <ul> <li><code>std::cin</code> is of type <code>std::istream</code>, and <code>std::cout</code> is of type <code>std::ostream</code>.</li> </ul> <pre><code>class Rational {\n  friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;, const Rational &amp;);\n};\nstd::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Rational &amp;r) {\n  return os &lt;&lt; r.m_num &lt;&lt; '/' &lt;&lt; r.m_denom;\n}\n</code></pre> <p><code>return os &lt;&lt; r.get_numerator() &lt;&lt; '/' &lt;&lt; r.get_denominator();</code>\uff1a\u8fd9\u662f\u51fd\u6570\u4f53\uff0c\u5b83\u4f7f\u7528 <code>&lt;&lt;</code> \u8fd0\u7b97\u7b26\u5c06 <code>Rational</code> \u5bf9\u8c61\u7684\u5206\u5b50\u548c\u5206\u6bcd\u6309\u987a\u5e8f\u8f93\u51fa\u5230\u6d41 <code>os</code>\u3002<code>get_numerator()</code> \u548c <code>get_denominator()</code> \u662f\u5047\u5b9a\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684 <code>Rational</code> \u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u5206\u522b\u8fd4\u56de\u5206\u5b50\u548c\u5206\u6bcd\u7684\u503c\u3002</p> <ul> <li>\u9996\u5148\uff0c<code>r.get_numerator()</code> \u88ab\u63d2\u5165\u5230\u6d41 <code>os</code> \u4e2d\u3002</li> <li>\u7136\u540e\uff0c\u5b57\u7b26\u4e32 <code>'/'</code> \u4e5f\u88ab\u63d2\u5165\u5230\u540c\u4e00\u4e2a\u6d41\u4e2d\uff0c\u8868\u793a\u5206\u6570\u7684\u5206\u9694\u7b26\u3002</li> <li>\u6700\u540e\uff0c<code>r.get_denominator()</code> \u88ab\u63d2\u5165\u5230\u6d41\u4e2d\u3002</li> </ul> <p>\u7531\u4e8e\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de <code>std::ostream &amp;</code> \u7c7b\u578b\uff0c\u5b83\u5141\u8bb8\u94fe\u5f0f\u8f93\u51fa\uff0c\u5373\u53ef\u4ee5\u8fde\u7eed\u4f7f\u7528 <code>&lt;&lt;</code> \u8fd0\u7b97\u7b26\u5c06\u591a\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u6216\u503c\u8f93\u51fa\u5230\u540c\u4e00\u4e2a\u6d41\u4e2d\u3002</p> <p>\u4e0a\u9762\u662f\u5173\u4e8e\u8f93\u51fa\u7684\u5b9a\u4e49, \u90a3\u4e48\u8f93\u5165\u5462? \u5047\u8bbe\u8f93\u5165\u7684\u65f6\u5019\u683c\u5f0f\u662f<code>a b</code></p> <pre><code>std::istream &amp;operator&gt;&gt;(std::istream &amp;is, Rational &amp;r) {\n  int x, y; is &gt;&gt; x &gt;&gt; y;\n  if (!is) { // Pay attention to input failures!\n    x = 0;\n    y = 1;\n  }\n  if (y &lt; 0) { y = -y; x = -x; }\n  r = Rational(x, y);\n  return is;\n}\n</code></pre> <p>\u5173\u4e8eoperator[]</p> <pre><code>class Dynarray {\npublic:\n  int &amp;operator[](std::size_t n) {\n    return m_storage[n];\n  }\n  const int &amp;operator[](std::size_t n) const {\n    return m_storage[n];\n  }\n};\n</code></pre> <p>The use of <code>a[i]</code> is interpreted as <code>a.operator[](i)</code>.</p> <p>\u5173\u4e8edereference operator and member access operator </p> <pre><code>struct WindowWithCounter {\n  Window theWindow;\n  int refCount = 1;\n};\nclass WindowPtr {\n  WindowWithCounter *m_ptr;\npublic:\n  Window &amp;operator*() const { // Why should it be const?\n    return m_ptr-&gt;theWindow;\n  }\n};\n</code></pre> <p>\u5728C++\u4e2d\uff0c\u6210\u5458\u51fd\u6570\u540e\u9762\u7684 <code>const</code> \u5173\u952e\u5b57\u8868\u793a\u8be5\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u5176\u6240\u5c5e\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u5bf9\u4e8e <code>WindowPtr</code> \u7c7b\u4e2d\u7684 <code>operator*()</code> \u6210\u5458\u51fd\u6570\uff0c\u5b83\u88ab\u58f0\u660e\u4e3a <code>const</code>\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5728 <code>WindowPtr</code> \u7684 <code>const</code> \u5b9e\u4f8b\u4e0a\u8c03\u7528\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6539\u53d8 <code>WindowPtr</code> \u5bf9\u8c61\u7684\u4efb\u4f55\u6210\u5458\u53d8\u91cf\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c<code>operator*()</code> \u88ab\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u4e0d\u4fee\u6539 <code>m_ptr</code> \u7684\u64cd\u4f5c\uff0c\u5b83\u53ea\u662f\u8fd4\u56de <code>m_ptr</code> \u6240\u6307\u5411\u7684 <code>WindowWithCounter</code> \u5bf9\u8c61\u4e2d\u7684 <code>theWindow</code> \u6210\u5458\u7684\u5f15\u7528\u3002\u56e0\u4e3a <code>operator*()</code> \u4e0d\u4f1a\u6539\u53d8 <code>m_ptr</code> \u7684\u503c\uff0c\u4e5f\u4e0d\u4f1a\u4ee5\u4efb\u4f55\u65b9\u5f0f\u4fee\u6539 <code>WindowPtr</code> \u5bf9\u8c61\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u662f <code>const</code>\u3002</p> <p>\u5982\u679c\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d <code>operator*()</code> \u6ca1\u6709\u88ab\u58f0\u660e\u4e3a <code>const</code>\uff0c\u90a3\u4e48\u5728\u5c1d\u8bd5\u901a\u8fc7\u4e00\u4e2a <code>const</code> \u7c7b\u578b\u7684 <code>WindowPtr</code> \u5b9e\u4f8b\u8c03\u7528\u5b83\u65f6\uff0c\u786e\u5b9e\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002\u8fd9\u662f\u56e0\u4e3a <code>const</code> \u5bf9\u8c61\u53ea\u80fd\u8c03\u7528 <code>const</code> \u6210\u5458\u51fd\u6570\uff0c\u8fd9\u4e9b\u6210\u5458\u51fd\u6570\u4fdd\u8bc1\u4e0d\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\u3002</p> <p>To make <code>operator-&gt;</code> consistent with <code>operator*</code> (make <code>ptr-&gt;mem</code> equivalent to <code>(*ptr).mem</code>), <code>operator-&gt;</code> is almost always defined like this:</p> <pre><code>class WindowPtr {\npublic:\n  Window *operator-&gt;() const {\n    return std::addressof(operator*());\n  }\n};\n</code></pre> <p><code>std::addressof(x)</code> is almost always equivalent to <code>&amp;x</code>, but the latter may not return the address of <code>x</code> if <code>operator&amp;</code> for <code>x</code> has been overloaded!</p> <p>\u76f8\u5f53\u4e8e\u662f: \u5229\u7528\u4e4b\u524d\u5b9a\u4e49\u7684*\u62ff\u5230\u5b9e\u4f8b, \u7136\u540e<code>std::addressof()</code>\u62ff\u5230\u5f15\u7528, \u7136\u540e\u76f4\u63a5\u52a0\u4e0a\u6210\u5458\u5c31\u80fd\u8bbf\u95ee\u4e86</p> <p>\u5b9e\u9645\u4e0a\u662f: <code>-&gt;</code> \u8fd0\u7b97\u7b26\u5728\u5185\u90e8\u4f1a\u8f6c\u6362\u4e3a <code>(*obj).member</code> \u7684\u5f62\u5f0f\uff0c\u5373\u5148\u901a\u8fc7\u89e3\u5f15\u7528\u64cd\u4f5c <code>*</code> \u83b7\u53d6 <code>WindowPtr</code> \u5b9e\u4f8b\u6240\u6307\u5411\u7684 <code>Window</code> \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u70b9\u64cd\u4f5c\u7b26 <code>.</code> \u8bbf\u95ee\u8be5\u5bf9\u8c61\u7684\u6210\u5458\u3002</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#type-conversions","title":"Type conversions","text":"<p>Type conversions can happen either implicitly or explicitly. A conversion is explicit if and only if the target type <code>U</code> is written explicitly in the conversion expression.</p> <p>Arithmetic conversions are often allowed to happen implicitly:</p> <pre><code>int sum = /* ... */, n = /* ... */;\nauto average = 1.0 * sum / n; // `sum` and `n` are converted to `double`,\n                              // so `average` has type `double`.\n</code></pre> <p>The dangerous conversions for built-in types must be explicit:</p> <pre><code>const int *cip = something();\nauto ip = const_cast&lt;int *&gt;(cip);       // int *\nauto cp = reinterpret_cast&lt;char *&gt;(ip); // char *\n</code></pre> <p>\u53ef\u89c1\u7c7b\u578b\u8f6c\u5316\u5206\u4e3a\u663e\u793a\u548c\u9690\u5f0f, \u5bf9\u4e8e\u53ef\u80fd\u4f1a\u9020\u6210\u5371\u9669\u7684\u7c7b\u578b\u8f6c\u6362\u4e00\u5b9a\u9700\u8981\u663e\u5f0f\u8f6c\u6362</p> <p>\u90a3\u4e48\u6211\u53ef\u4e0d\u53ef\u4ee5\u7528\u4e00\u4e2aclass\u6765\u81ea\u5b9a\u4e49\u7c7b\u578b\u8f6c\u5316\u5462? </p> <p>We can define a type conversion for our class <code>X</code> in one of the following ways:</p> <ol> <li>A constructor with exactly one parameter of type <code>T</code> is a conversion from <code>T</code> to <code>X</code>.</li> <li>Example: <code>std::string</code> has a constructor accepting a <code>const char *</code>. <code>std::vector</code> has a constructor accepting a <code>std::size_t</code>.</li> <li>A type conversion operator: a conversion from <code>X</code> to some other type</li> </ol> <pre><code>class Rational {\npublic:\n  // conversion from `Rational` to `double`.\n  operator double() const { return 1.0 * m_num / m_denom; }\n};\nRational r(3, 4);\ndouble dval = r;  // 0.75\n</code></pre> <ul> <li>The name of the function is <code>operator T</code>.</li> <li>The return type is <code>T</code>, which is not written before the name.</li> <li>A type conversion is usually a read-only operation, so it is usually <code>const</code>.</li> </ul> <p>To disallow the implicit use of a constructor as a type conversion, write <code>explicit</code> before the return type:</p> <pre><code>class string { // Suppose this is the `std::string` class.\npublic:\n  string(const char *cstr); // Not marked `explicit`. Implicit use is allowed.\n};\n\ntemplate &lt;typename T&gt; class vector { // Suppose this is the `std::vector` class.\npublic:\n  explicit vector(std::size_t n); // Implicit use is not allowed.\n};\n\nclass Dynarray {\npublic:\n  explicit Dynarray(std::size_t n) : m_length{n}, m_storage{new int[n]{}} {}\n};\n</code></pre> <p>To disallow the implicit use of a type conversion operator, also write <code>explicit</code>:</p> <pre><code>class Rational {\npublic:\n  explicit operator double() const { return 1.0 * m_num / m_denom; }\n};\nRational r(3, 4);\ndouble d = r;                     // Error.\nvoid foo(double x) { /* ... */ }\nfoo(r);                           // Error.\nfoo(double(r));                   // OK.\nfoo(static_cast&lt;double&gt;(r));      // OK.\n</code></pre> <p>Contextual conversion to bool </p> <p>A special rule for conversion to <code>bool</code>.</p> <p>Suppose <code>expr</code> is an expression of a class type <code>X</code>, and suppose <code>X</code> has an <code>explicit</code> type conversion operator to <code>bool</code>. In the following contexts, that conversion is applicable even if it is not written as <code>bool(expr)</code> or <code>static_cast&lt;bool&gt;(expr)</code>:</p> <ul> <li><code>if (expr)</code>, <code>while (expr)</code>, <code>for (...; expr; ...)</code>, <code>do ... while (expr)</code></li> <li>as the operand of <code>!</code>, <code>&amp;&amp;</code>, <code>||</code></li> <li>as the first operand of <code>?:</code>: <code>expr ? something : something_else</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#iterators","title":"Iterators","text":"<p>A generalized \"pointer\" used for accessing elements in different containers.</p> <p>Every container has its iterator, whose type is <code>Container::iterator</code>.</p> <p>e.g. <code>std::vector&lt;int&gt;::iterator</code>, <code>std::forward_list&lt;std::string&gt;::iterator</code></p> <ul> <li><code>auto</code> comes to our rescue!</li> </ul> <p>For any container object <code>c</code>,</p> <ul> <li><code>c.begin()</code> returns the iterator to the first element of <code>c</code>.</li> <li><code>c.end()</code> returns the iterator to the position following the last element of <code>c</code> (\"off-the-end\", \"past-the-end\").</li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4,<code>c.end()</code>\u8fd4\u56de\u7684\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u540e\u9762\u4e00\u4e2a\u4f4d\u7f6e</p> <p>A pair of iterators (<code>b</code>, <code>e</code>) is often used to indicate a range <code>[b, e)</code>.</p> <p>Such ranges are left-inclusive. Benefits:</p> <ul> <li><code>e - b</code> is the length (size) of the range, i.e. the number of elements. There is no extra <code>+1</code> or <code>-1</code> in this expression.</li> <li>If <code>b == e</code>, the range is empty. In other words, to check whether the range is empty, we only need to do an equality test, which is easily supported by all kinds of iterators.</li> </ul> <p>Basic operations, supported by almost all kinds of iterators:</p> <ul> <li><code>*it</code>: returns a reference to the element that <code>it</code> refers to.</li> <li><code>it-&gt;mem</code>: equivalent to <code>(*it).mem</code>.</li> <li><code>++it</code>, <code>it++</code> : moves <code>it</code>one step forward, so that <code>it</code> refers to the \"next\" element.</li> <li><code>++it</code> returns a reference to <code>it</code>, while <code>it++</code> returns a copy of <code>it</code> before incrementation.</li> <li><code>it1 == it2</code>: checks whether <code>it1</code> and <code>it2</code> refer to the same position in the container.</li> <li><code>it1 != it2</code>: equivalent to <code>!(it1 == it2)</code>.</li> </ul> <p>These are supported by the iterators of all sequence containers, as well as <code>std::string</code>.</p> <p>\u4e00\u4e2a\u4f7f\u7528\u7684\u4f8b\u5b50:</p> <pre><code>oid swapcase(std::string &amp;str) {\n  for (auto it = str.begin(); it != str.end(); ++it) {\n    if (std::islower(*it))\n      *it = std::toupper(*it);\n    else if (std::isupper(*it))\n      *it = std::tolower(*it);\n  }\n}\nvoid print(const std::vector&lt;int&gt; &amp;vec) {\n  for (auto it = vec.begin(); it != vec.end(); ++it)\n    std::cout &lt;&lt; *it &lt;&lt; ' ';\n}\n</code></pre> <p>Like pointers, an iterator can be dereferenced (<code>*it</code>) only when it refers to an existing element. (\"dereferenceable\")</p> <ul> <li><code>*v.end()</code> is undefined behavior.</li> <li><code>++it</code> is undefined behavior if <code>it</code> is not dereferenceable. In other words, moving an iterator out of the range <code>[begin, off_the_end]</code> is undefined behavior.</li> </ul> <p>\u53ef\u89c1, \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u540e\u9762\u8fd8\u662f\u7b97\u5728\u8303\u56f4\u5185\u7684(\u5f53\u7136, end()\u4f4d\u7f6e\u89e3\u5f15\u7528\u662fundefeined behavior), \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u9762\u7684\u540e\u9762\u662f\u4e0d\u80fd\u770b\u7684!</p> <p>\u4f46\u662f\u6709\u7684\u65f6\u5019\u8fed\u4ee3\u5668\u53ef\u80fd\u4f1a\u4e2d\u9014\u53d1\u751fInvalidation, \u4f8b\u5982:</p> <ul> <li><code>push_back(x)</code> on a <code>std::vector</code> may cause the reallocation of storage. All iterators obtained previously are invalidated.</li> <li><code>pop_back()</code> on a <code>std::vector</code> will invalidate the iterators that points to the deleted element.</li> </ul> <p>Never use invalidated iterators or references!</p> <pre><code>void foo(std::vector&lt;int&gt; &amp;vec) {\n  auto it = vec.begin();\n  while (some_condition(vec))\n    vec.push_back(*it++); // Undefined behavior.\n}\n</code></pre> <p>After several calls to <code>push_back</code>, <code>vec</code> may reallocate a larger chunk of memory to store its elements. This will invalidate all pointers, references and iterators that point to somewhere in the previous memory block.</p> <p>Initialization from iterator range</p> <p><code>std::string</code>, <code>std::vector</code>, as well as other standard library containers, support the initialization from an iterator range:</p> <pre><code>std::vector&lt;char&gt; v = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'};\nstd::vector v2(v.begin() + 2, v.end() - 3);  // {'c', 'd', 'e', 'f'}\nstd::string s(v.begin(), v.end()); // \"abcdefghi\"\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#algorithm","title":"Algorithm","text":"<p>Parameters: The STL algorithms accept pairs of iterators to represent \"ranges\":</p> <p>Parameters: The algorithms suffixed <code>_n</code> use a beginning iterator <code>begin</code> and an integer <code>n</code> to represent a range <code>[begin, begin + n)</code>.</p> <pre><code>Dynarray::Dynarray(const int *begin, const int *end)\n    : m_storage{new int[end - begin]}, m_length(end - begin) {\n  std::copy(begin, end, m_storage);\n}\nDynarray::Dynarray(const Dynarray &amp;other)\n    : m_storage{new int[other.size()]}, m_length{other.size()} {\n  std::copy_n(other.m_storage, other.size(), m_storage);\n}\nDynarray::Dynarray(std::size_t n, int x = 0)\n    : m_storage{new int[n]}, m_length{n} {\n  std::fill_n(m_storage, m_length, x);\n}\n</code></pre> <p>Since we pass iterators instead of containers to algorithms, the standard library algorithms never modify the length of the containers.</p> <ul> <li>STL algorithms never insert or delete elements in the containers (unless the iterator passed to them is some special iterator adapter).</li> </ul> <p>For example: <code>std::copy</code> only copies elements, instead of inserting elements.</p> <pre><code>std::vector&lt;int&gt; a = someValues();\nstd::vector&lt;int&gt; b(a.size());\nstd::vector&lt;int&gt; c{};\nstd::copy(a.begin(), a.end(), b.begin()); // OK\nstd::copy(a.begin(), a.end(), c.begin()); // Undefined behavior!\n</code></pre> <p>Non-modifying sequence operations:</p> <ul> <li><code>count(begin, end, x)</code>, <code>find(begin, end, x)</code>, <code>find_end(begin, end, x)</code>, <code>find_first_of(begin, end, x)</code>, <code>search(begin, end, pattern_begin, pattern_end)</code></li> </ul> <p>Modifying sequence operations:</p> <ul> <li><code>copy(begin, end, dest)</code>, <code>fill(begin, end, x)</code>, <code>reverse(begin, end)</code>, ...</li> <li><code>unique(begin, end)</code>: drop duplicate elements.</li> <li>requires the elements in the range <code>[begin, end)</code> to be sorted (in ascending order by default).</li> <li>It does not remove any elements! Instead, it moves all the duplicated elements to the end of the sequence, and returns an iterator <code>pos</code>, so that <code>[begin, pos)</code> has no duplicate elements.</li> </ul> <p>Some common algorithms (<code>&lt;algorithm&gt;</code>)</p> <p>unique : </p> <pre><code>std::vector v{1, 1, 2, 2, 2, 3, 5};\nauto pos = std::unique(v.begin(), v.end());\n// Now [v.begin(), pos) contains {1, 2, 3, 5}.\n// [pos, v.end()) has the values {1, 2, 2}, but the exact order is not known.\nv.erase(pos, v.end()); // Typical use with the container's `erase` operation\n// Now v becomes {1, 2, 3, 5}.\n</code></pre> <p><code>unique</code> does not remove the duplicate elements! To remove them, use the container's <code>erase</code> operation.</p> <p>Partitioning, sorting and merging algorithms:</p> <ul> <li><code>partition</code>, <code>is_partitioned</code>, <code>stable_partition</code></li> <li><code>sort</code>, <code>is_sorted</code>, <code>stable_sort</code></li> <li><code>nth_element</code></li> <li><code>merge</code>, <code>inplace_merge</code></li> </ul> <p>Binary search on sorted ranges:</p> <ul> <li><code>lower_bound</code>, <code>upper_bound</code>, <code>binary_search</code>, <code>equal_range</code></li> </ul> <p>Heap algorithms:</p> <ul> <li><code>is_heap</code>, <code>make_heap</code>, <code>push_heap</code>, <code>pop_heap</code>, <code>sort_heap</code></li> </ul> <p>Min/Max and comparison algorithms: (<code>&lt;algorithm&gt;</code>)</p> <ul> <li><code>min_element(begin, end)</code>, <code>max_element(begin, end)</code>, <code>minmax_element(begin, end)</code></li> <li><code>equal(begin1, end1, begin2)</code>, <code>equal(begin1, end1, begin2, end2)</code></li> <li><code>lexicographical_compare(begin1, end1, begin2, end2)</code></li> </ul> <p>Numeric operations: (<code>&lt;numeric&gt;</code>)</p> <ul> <li><code>accumulate(begin, end, initValue)</code>: Sum of elements in<code>[begin, end)</code></li> </ul> <p>, with initial value <code>initValue</code>.</p> <ul> <li> <p><code>accumulate(v.begin(), v.end(), 0)</code> returns the sum of elements in <code>v</code>.</p> </li> <li> <p><code>inner_product(begin1, end1, begin2, initValue)</code>: Inner product of two vectors atransposeb, added with the initial value <code>initValue</code>.</p> </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#lambda-expressions","title":"Lambda expressions","text":"<p>The return type can be omitted and deduced by the compiler.</p> <p><code>std::sort(v.begin(), v.end(),[](int a, int b) { return std::abs(a) &lt; std::abs(b); });</code></p> <p><code>std::sort(v.begin(), v.end(), [](int a, int b) { return a &gt; b; });</code></p> <p><code>auto pos = std::find_if(v.begin(), v.end(), [k](int x) { return x &lt; k; });</code></p> <p>A lambda expression has the following syntax:</p> <p><code>[capture_list](params) -&gt; return_type { function_body }</code></p> <p>The compiler will generate a function object according to it.</p> <pre><code>int k = 42;\nauto f = [k](int x) -&gt; bool { return x &lt; k; };\nbool b1 = f(10); // true\nbool b2 = f(100); // false\n</code></pre> <p>It is allowed to write complex statements in <code>function_body</code>, just as in a function.</p> <pre><code>struct Point2d { double x, y; };\nstd::vector&lt;Point2d&gt; points = somePoints();\n// prints the l2-norm of every point\nstd::for_each(points.begin(), points.end(),\n              [](const Point2d &amp;p) {\n                auto norm = std::sqrt(p.x * p.x + p.y * p.y);\n                std::cout &lt;&lt; norm &lt;&lt; std::endl;\n              });\n</code></pre> <p>\u90a3\u4e48\u65b9\u62ec\u53f7[]\u5230\u5e95\u662f\u5e72\u4ec0\u4e48\u7528\u7684?  Capture </p> <p>To capture more variables:</p> <pre><code>auto pos = std::find_if(v.begin(), v.end(),\n                    [lower, upper](int x) { return lower &lt;= x &amp;&amp; x &lt;= upper;});\n</code></pre> <p>To capture by reference (so that copy is avoided)</p> <pre><code>std::string str = someString();\nstd::vector&lt;std::string&gt; wordList;\n// finds the first string that is lexicographically greater than `str`,\n// but shorter than `str`.\nauto pos = std::find_if(wordList.begin(), wordList.end(),\n     [&amp;str](const std::string &amp;s) { return s &gt; str &amp;&amp; s.size() &lt; str.size();});\n</code></pre> <p>Here <code>&amp;str</code> indicates that <code>str</code> is captured by referece. <code>&amp;</code> here is not the address-of operator!</p> <p>Summary: </p> <p>So many things in the algorithm library! How can we remember them?</p> <ul> <li>Remember the</li> </ul> <p>conventions</p> <p>:</p> <ul> <li>No insertion/deletion of elements</li> <li>Iterator range <code>[begin, end)</code></li> <li>Functions named with the suffix <code>_n</code> uses <code>[begin, begin + n)</code></li> <li>Pass functions, function objects, and lambdas for customized operations</li> <li> <p>Functions named with the suffix <code>_if</code> requires a boolean predicate</p> </li> <li> <p>Remember the common ones: <code>copy</code>, <code>find</code>, <code>for_each</code>, <code>sort</code>, ...</p> </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_10","title":"\u7ee7\u627f\u4e0e\u591a\u6001","text":"<p>Use inheritance to model the \"is-a\" relationship: for instance, A discounted item is an item, and has more information.</p> <ul> <li><code>std::size_t m_minQuantity;</code></li> <li><code>double m_discount;</code></li> </ul> <pre><code>class Item {\n  std::string m_name;\n  double m_price = 0.0;\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price)\n      : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return m_name; }\n  auto netPrice(int cnt) const {\n    return cnt * m_price;\n  }\n};\n</code></pre> <pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\npublic:\n  // constructors\n  // netPrice\n};\n</code></pre> <p>\u95ee\u9898\u6765\u4e86, \u5982\u679c\u8bf4\u6211\u5e0c\u671b\u7ee7\u627f\u7236\u7c7b\u7684\u5b50\u7c7b\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u7684\u6210\u5458, \u4f46\u662f\u5f88\u591a\u6210\u5458\u90fd\u7528private\u9650\u5b9a\u8bcd\u9650\u5236\u4f4f\u4e86, \u600e\u4e48\u529e? \u90a3\u4e48\u53ef\u4ee5\u7528protected\u9650\u5b9a\u8bcd.</p> <p>A <code>protected</code> member is private, except that it is accessible in subclasses.</p> <p>\u90a3\u4e48\u5c31\u53ef\u4ee5\u5427m_price\u6539\u6210protected: </p> <pre><code>class Item {\n  std::string m_name;\nprotected:\n  double m_price = 0.0;\n</code></pre> <p>By defining <code>DiscountedItem</code> to be a subclass of <code>Item</code>, every <code>DiscountedItem</code> object contains a subobject of type <code>Item</code>.(\u8fd9\u4e2acontains an object of Item \u5f88\u8010\u4eba\u5bfb\u5473)</p> <ul> <li>Every data member and member function, except the ctors and dtors, is inherited, no matter what access level they have.</li> </ul> <p>What can be inferred from this?</p> <ul> <li>A constructor of <code>DiscountedItem</code> must first initialize the base class subobject by calling a constructor of <code>Item</code>'s.</li> <li>The destructor of <code>DiscountedItem</code> must call the destructor of <code>Item</code> after having destroyed its own members (<code>m_minQuantity</code> and <code>m_discount</code>).</li> <li><code>sizeof(Derived) &gt;= sizeof(Base)</code></li> </ul> <p>Key points of inheritance:</p> <ul> <li>Every object of the derived class (subclass) contains a base class subobject.</li> <li>Inheritance should not break the encapsulation of the base class.</li> <li>e.g. To initialize the base class subobject, we must call a constructor of the base class. It is not allowed to initialize data members of the base class subobject directly.</li> </ul> <pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\npublic:\n  DiscountedItem(const std::string &amp;name, double price,\n                 int minQ, double disc)\n      : Item(name, price), m_minQuantity(minQ), m_discount(disc) {}\n};\n</code></pre> <p>It is not allowed to write this:</p> <pre><code>DiscountedItem(const std::string &amp;name, double price,\n               int minQ, double disc)\n    : m_name(name), m_price(price), m_minQuantity(minQ), m_discount(disc) {}\n</code></pre> <p>\u6240\u4ee5\u8bf4, \u7ee7\u627f\u7684\u7236\u7c7b\u4e00\u5b9a\u8981\u5728intialization list\u91cc\u9762\u5148\u521b\u5efa</p> <p>What if we don't call the base class's ctor explicitly?</p> <ul> <li>The default constructor of the base class is called.</li> <li>If the base class is not default-constructible, an error.</li> </ul> <p>\u5982\u679c\u8bf4\u4e0d\u663e\u5f0f\u5730\u521d\u59cb\u5316\u7236\u7c7b, \u90a3\u4e48\u5c31\u4f1a\u8c03\u7528default; \u5373\u4f7f\u662f\u5728\u51fd\u6570\u91cc\u9762\u8c03\u7528({}\u91cc\u9762), \u4e5f\u4e8b\u5b9e\u4e0a, \u8fdb\u5165\u8fd9\u4e2a\u51fd\u6570\u4f53\u4e4b\u524d, <code>Item::Item()</code>\u4e5f\u88ab\u8c03\u7528\u4e86</p> <p>\u5728C++\u4e2d\uff0cupcasting\uff08\u5411\u4e0a\u8f6c\u578b\uff09\u6307\u7684\u662f\u5c06\u6d3e\u751f\u7c7b\uff08derived class\uff09\u7684\u6307\u9488\u6216\u5f15\u7528\u8f6c\u6362\u4e3a\u57fa\u7c7b\uff08base class\uff09\u7684\u6307\u9488\u6216\u5f15\u7528\u3002\u8fd9\u79cd\u8f6c\u6362\u901a\u5e38\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u6d3e\u751f\u7c7b\u5bf9\u8c61\u5305\u542b\u57fa\u7c7b\u7684\u6240\u6709\u6210\u5458\uff0c\u6240\u4ee5\u5411\u4e0a\u8f6c\u578b\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u7279\u6b8a\u5904\u7406\u3002</p> <pre><code>void printItemName(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName() &lt;&lt; std::endl;\n}\nDiscountedItem di(\"A\", 10, 2, 0.8);\nItem i(\"B\", 15);\nprintItemName(i); // \"Name: B\"\nprintItemName(di); // \"Name: A\"\n</code></pre> <p><code>const Item &amp;item</code> can be bound to either an <code>Item</code> or a <code>DiscountedItem</code>.</p> <ul> <li>static type of an expression: The type known at compile-time.</li> <li>dynamic type of an expression: The real type of the object that the expression is representing. This is known at run-time.</li> </ul> <p>\u5c31\u50cf\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50: The static type of the expression <code>item</code> is <code>const Item</code>, but its dynamic type is not known until run-time. (It may be <code>const Item</code> or <code>const DiscountedItem</code>.)</p> <p>\u90a3\u4e48\u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d, \u5982\u4f55\u8ba1\u7b97\u4ef7\u683c\u662f\u4e00\u4e2a\u5934\u75bc\u7684\u95ee\u9898, \u56e0\u4e3a\u6253\u6298\u5546\u54c1\u548c\u6b63\u5e38\u5546\u54c1\u7684\u8ba1\u7b97\u4ef7\u683c\u662f\u4e0d\u4e00\u6837\u7684. \u90a3\u4e48\u5c31\u8981\u8fd0\u7528\u865a\u51fd\u6570\u4e86(virtual function)</p> <pre><code>class Item {\npublic:\n  virtual double netPrice(int cnt) const {\n    return m_price * cnt;\n  }\n  // other members\n};\nclass DiscountedItem : public Item {\npublic:\n  double netPrice(int cnt) const override {\n    return cnt &lt; m_minQuantity ? cnt * m_price : cnt * m_price * m_discount;\n  }\n  // other members\n};\n</code></pre> <p>Note: <code>auto</code> cannot be used to deduce the return type of <code>virtual</code> functions.</p> <p>Item\u91cc\u9762<code>netPrice()</code>\u51fd\u6570\u52a0\u4e0a\u4e86virtual\u5173\u952e\u8bcd, \u5c31\u4ee3\u8868\u8fd0\u884c\u5230\u8fd9\u91cc\u7684\u65f6\u5019, \u54ea\u4e2a\u7248\u672c\u7684\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u662fdetermined at run-time</p> <ul> <li>If the dynamic type of <code>item</code> is <code>Item</code>, it calls <code>Item::netPrice</code>.</li> <li>If the dynamic type of <code>item</code> is <code>DiscountedItem</code>, it calls <code>DiscountedItem::netPrice</code>.</li> </ul> <p>\u90a3\u4e48\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230\u4e86virtual-override\u4e86: </p> <p>To override (\u8986\u76d6/\u8986\u5199) a <code>virtual</code> function,</p> <ul> <li>The function parameter list must be the same as that of the base class's version.</li> <li>The return type should be identical to (or covariant with) that of the corresponding function in the base class.</li> <li>We will talk about \"covariant with\" in later lectures or recitations.</li> <li>The <code>const</code>ness should be the same!</li> </ul> <p>\u603b\u800c\u8a00\u4e4b, \u53c2\u6570\u5217\u8868\u8981\u4e00\u6837, \u8fd4\u56de\u7c7b\u578b\u8981\u4e00\u6837, constness\u8981\u4e00\u6837</p> <p>To make sure you are truly overriding the <code>virtual</code> function (instead of making a overloaded version), use the <code>override</code> keyword.</p> <p>An overriding function is also <code>virtual</code>, even if not explicitly declared.</p> <pre><code>class DiscountedItem : public Item {\n  virtual double netPrice(int cnt) const override; // correct, explicitly virtual\n};\nclass DiscountedItem : public Item {\n  double netPrice(int cnt) const; // also correct, but not recommended\n};\n</code></pre> <p>\u5047\u5982\u8bf4\u9047\u5230\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5: </p> <pre><code>Item *ip = nullptr;\nif (some_condition)\n  ip = new Item(/* ... */);\nelse\n  ip = new DiscountedItem(/* ... */);\n// ...\ndelete ip;\n</code></pre> <p>Whose destructor should be called?</p> <ul> <li>Only looking at the static type of <code>*ip</code> is not enough.</li> </ul> <p>To use dynamic binding correctly, you almost always need a <code>virtual</code> destructor.</p> <p>The implicitly-defined (compiler-generated) destructor is non-<code>virtual</code>, but we can explicitly require a <code>virtual</code> one:</p> <p><code>virtual ~Item() = default;</code></p> <p>If the dtor of the base class is <code>virtual</code>, the compiler-generated dtor for the derived class is also <code>virtual</code>.(\u57fa\u7c7b\u662f\u865a\u51fd\u6570, \u90a3\u4e48\u6d3e\u751f\u7c7b\u4e5f\u662f\u865a\u51fd\u6570, \u56e0\u6b64\u6d3e\u751f\u7c7b\u865a\u51fd\u6570\u5173\u952e\u8bcd\u80fd\u7701\u7565)</p> <pre><code>class Item {\n  std::string m_name;\n\nprotected:\n  double m_price = 0.0;\n\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price) : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return name; }\n  virtual double net_price(int n) const {\n    return n * price;\n  }\n  virtual ~Item() = default;\n};\n</code></pre> <pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\n\npublic:\n  DiscountedItem(const std::string &amp;name, double price,\n                 int minQ, double disc)\n      : Item(name, price), m_minQuantity(minQ), m_discount(disc) {}\n  double netPrice(int cnt) const override {\n    return cnt &lt; m_minQuantity ? cnt * m_price : cnt * m_price * m_discount;\n  }\n};\n</code></pre> <p>\u5047\u5982\u8bf4\u5728\u590d\u5236/\u79fb\u52a8\u590d\u5236\u6d3e\u751f\u7c7b\u7684\u65f6\u5019, \u522b\u5fd8\u4e86\u4e5f\u8981\u590d\u5236\u57fa\u7c7b!</p> <pre><code>class Derived : public Base {\npublic:\n  Derived(const Derived &amp;other)\n      : Base(other), /* Derived's own members */ { /* ... */ }\n  Derived &amp;operator=(const Derived &amp;other) {\n    Base::operator=(other); // call Base's operator= explicitly\n    // copy Derived's own members\n    return *this;\n  }\n  // ...\n};\n</code></pre> <p>Why <code>Base(other)</code> and <code>Base::operator=(other)</code> work?</p> <ul> <li>The parameter type is <code>const Base &amp;</code>, which can be bound to a <code>Derived</code> object.</li> </ul> <p>These rules are quite natural:</p> <ul> <li>What are the behaviors of the compiler-generated copy-control members?</li> <li>First, it calls the base class's corresponding copy-control member.</li> <li>Then, it performs the corresponding operation on the derived class's own data members.</li> <li>\u603b\u7ed3: \u9996\u5148\u8c03\u7528\u57fa\u7c7b\u590d\u5236\u51fd\u6570, \u7136\u540e\u5bf9\u81ea\u5df1\u6d3e\u751f\u7c7b\u72ec\u6709\u7684\u8fdb\u884c\u521d\u59cb\u5316</li> <li>In what cases will they be <code>delete</code>d?</li> <li>If the base class's corresponding copy-control member is not accessible (e.g. non-existent, or <code>private</code>),</li> <li>or if any of the data members' corresponding copy-control member is not accessible.</li> </ul> <p>\u518d\u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5: (slicing)</p> <pre><code>DiscountedItem di(\"A\", 10, 2, 0.8);\nItem i = di; // What happens?\nauto x = i.netPrice(3); // Which netPrice?\n</code></pre> <p><code>Item i = di;</code> calls the copy constructor of <code>Item</code></p> <ul> <li>but <code>Item</code>'s copy constructor handles only the base part.</li> <li>So <code>DiscountedItem</code>'s own members are ignored, or \"sliced down\".</li> <li><code>i.netPrice(3)</code> calls <code>Item::netPrice</code>.</li> </ul> <p>Downcasting: For polymorphic class only</p> <p>If we only have a <code>Base</code> pointer, but we are quite sure that it points to a <code>Derived</code> object</p> <ul> <li>Accessing the members of <code>Derived</code> through <code>bp</code> is not allowed.</li> <li>How can we perform a \"downcasting\"?</li> </ul> <p>A class is said to be polymorphic(\u591a\u6001) if it has (declares or inherits) at least one virtual function.  (\u6709\u4e00\u4e2a\u865a\u51fd\u6570, \u5c31\u662f\u591a\u6001)</p> <ul> <li>Either a <code>virtual</code> normal member function or a <code>virtual</code> dtor is ok.</li> </ul> <p>If a class is polymorphic, all classes derived from it are polymorphic.</p> <ul> <li>There is no way to \"refuse\" to inherit any member functions, so <code>virtual</code> member functions must be inherited.</li> <li>The dtor must be <code>virtual</code> if the dtor of the base class is <code>virtual</code>.</li> </ul> <p><code>dynamic_cast&lt;Target&gt;(expr)</code></p> <pre><code>Base *bp = new Derived{};\nDerived *dp = dynamic_cast&lt;Derived *&gt;(bp);\nDerived &amp;dr = dynamic_cast&lt;Derived &amp;&gt;(*bp);\n</code></pre> <ul> <li><code>Target</code> must be a reference or a pointer type. (\u5fc5\u987b\u662f\u6307\u9488\u6216\u5f15\u7528)</li> <li><code>dynamic_cast</code> will perform runtime type identification (RTTI) to check the dynamic type of the expression.</li> <li>If the dynamic type is <code>Derived</code>, or a derived class (direct or indirect) of <code>Derived</code>, the downcasting succeeds.</li> <li>Otherwise, the downcasting fails. If <code>Target</code> is a pointer, returns a null pointer. If <code>Target</code> is a reference, throws an exception <code>std::bad_cast</code>.</li> </ul> <p><code>dynamic_cast</code> can be very slow; Avoid <code>dynamic_cast</code> whenever possible.</p> <p>If the downcasting is guaranteed to be successful, you may use <code>static_cast</code></p> <pre><code>auto dp = static_cast&lt;Derived *&gt;(bp); // quicker than dynamic_cast,\n// but performs no checks. If the dynamic type is not Derived, UB.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#summary","title":"Summary","text":"<p>Inheritance</p> <ul> <li>Every object of type <code>Derived</code> contains a subobject of type <code>Base</code>.</li> <li>Every member of <code>Base</code> is inherited, no matter whether it is accessible or not.</li> <li>Inheritance should not break the base class's encapsulation.</li> <li>The access control of inherited members is not changed.</li> <li>Every constructor of <code>Derived</code> calls a constructor of <code>Base</code> to initialize the base class subobject before initializing its own data members.</li> <li>The destructor of <code>Derived</code> calls the destructor of <code>Base</code> to destroy the base class subobject after destroying its own data members.</li> </ul> <p>Dynamic binding</p> <ul> <li>Upcasting: A pointer, reference or smart pointer to <code>Base</code> can be bound to an object of type <code>Derived</code>.</li> <li>static type and dynamic type</li> <li><code>virtual</code> functions: A function that can be overridden by derived classes.</li> <li>The base class and the derived class can provide different versions of this function.</li> <li>Dynamic (late) binding</li> <li>A call to a virtual function on a pointer or reference to <code>Base</code> will actually call the corresponding version of that function according to the dynamic type.</li> <li>Avoid downcasting if possible.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_11","title":"\u62bd\u8c61\u57fa\u7c7b","text":"<p>\u5047\u5982\u8bf4\u5b9a\u4e49\u4e00\u4e2ashape\u7c7b, \u7136\u540e\u6b63\u65b9\u5f62, \u5706\u5f62\u7b49\u7c7b\u7ee7\u627f\u5b83</p> <pre><code>class Shape {\npublic:\n  virtual void draw(ScreenHandle &amp;) const = 0;\n  virtual double area() const = 0;\n  virtual double perimeter() const = 0;\n  virtual ~Shape() = default;\n};\nclass Rectangle : public Shape {\n  Point2d mTopLeft, mBottomRight;\n\npublic:\n  Rectangle(const Point2d &amp;tl, const Point2d &amp;br)\n      : mTopLeft(tl), mBottomRight(br) {} // Base is default-initialized\n  void draw(ScreenHandle &amp;screen) const override { /* ... */ }\n  double area() const override {\n    return (mBottomRight.x - mTopLeft.x) * (mBottomRight.y - mTopLeft.y);\n  }\n  double perimeter() const override {\n    return 2 * (mBottomRight.x - mTopLeft.x + mBottomRight.y - mTopLeft.y);\n  }\n};\n</code></pre> <p>Different shapes should define their own <code>draw</code>, <code>area</code>  and <code>perimeter</code>, so these functions should be <code>virtual</code>.</p> <p>How should we define <code>Shape::draw</code>, <code>Shape::area</code> and <code>Shape::perimeter</code>?</p> <ul> <li>For the general concept \"Shape\", there is no way to determine the behaviors of these functions. \u5bf9\u4e8e\u8fd9\u4e2a\u62bd\u8c61\u7c7b\u6765\u8bf4, \u8fd9\u4e9b\u51fd\u6570\u6ca1\u6709\u610f\u4e49, \u4e5f\u5e94\u8be5\u4e0d\u80fd\u88ab\u8c03\u7528</li> <li>Direct call to <code>Shape::draw</code>, <code>Shape::area</code> and <code>Shape::perimeter</code> should be forbidden. \u8c03\u7528\u5b83\u4eec\u5e94\u8be5\u88ab\u7981\u6b62</li> <li>We shouldn't even allow an object of type <code>Shape</code> to be instantiated! The class <code>Shape</code> is only used to define the concept \"Shape\" and required interfaces.</li> </ul> <p>If a <code>virtual</code> function does not have a reasonable definition in the base class, it should be declared as pure <code>virtual</code> by writing <code>=0</code>.</p> <p>Any class that has a pure <code>virtual</code> function is an abstract class. \u6709\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570, \u5c31\u662f\u62bd\u8c61\u7c7b</p> <p>Pure virtual function cannot be called, and an abstract class cannot be instantiated. </p> <p>We can define pointer or reference to an abstract class, but never an object of that type!</p> <p>An impure <code>virtual</code> function must be defined.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#_12","title":"\u591a\u6001(\u4e0d\u662f\u7c7b\u7684\u90a3\u4e2a\u6982\u5ff5)","text":"<p>Polymorphism: The provision of a single interface to entities of different types, or the use of a single symbol to represent multiple different types.</p> <p>Polymorphism: The provision of a single interface to entities of different types, or the use of a single symbol to represent multiple different types.</p> <ul> <li>Run-time polymorphism: Achieved via dynamic binding.</li> <li>Compile-time polymorphism: Achieved via function overloading, templates, concepts (since C++20), etc.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#is-a","title":"is-a","text":"<p>Public inheritance means \"is-a\". Everything that applies to base classes must also apply to derived classes, because every derived class object is a base class object.</p>"},{"location":"CS100%28C%26C%2B%2B%29/%E8%AF%BE%E5%A0%82.html#inheritance-of-interface-or-implementation-or","title":"Inheritance of interface or implementation? (\u63a5\u53e3or\u5b9e\u73b0)","text":"<p>\u5047\u5982\u8bf4\u6709\u4e00\u4e2a\u57fa\u7c7b\u53eb\u505aAirplane, \u7136\u540eModel A/B\u90fd\u662f\u4e00\u6837\u7684\u98de\u884c\u6a21\u5f0f, \u4f46\u662fC\u7684\u98de\u884c\u6a21\u5f0f\u4e0d\u4e00\u6837. \u90a3\u4e48\u5982\u4f55\u8bbe\u8ba1\u7a0b\u5e8f? \u4e24\u79cd\u601d\u60f3: \u7b2c\u4e00\u79cd\u662f\u57fa\u7c7b\u5b9a\u4e49\u65b9\u6cd5, \u4f46\u662f\u6d3e\u751f\u7c7b\u81ea\u5df1\u5b9e\u73b0; \u7b2c\u4e8c\u79cd\u662f\u57fa\u7c7b\u91cc\u9762\u5b9a\u4e49A/B\u7684\u98de\u884c\u6a21\u5f0f, \u4f46\u662fC\u7ee7\u627f\u8fc7\u6765\u4e4b\u540e\u9700\u8981\u8986\u5199</p> <ol> <li>\u7ee7\u627f\u63a5\u53e3\uff1a</li> <li>\u6307\u7684\u662f\u4e00\u4e2a\u7c7b\u6216\u63a5\u53e3\u53ef\u4ee5\u7ee7\u627f\u53e6\u4e00\u4e2a\u63a5\u53e3\u3002\u7ee7\u627f\u63a5\u53e3\u7684\u7c7b\u5fc5\u987b\u5b9e\u73b0\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u9664\u975e\u8be5\u7c7b\u4e5f\u662f\u58f0\u660e\u4e3a\u62bd\u8c61\u7c7b\u3002</li> <li>\u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5\u7684\u7b7e\u540d\uff0c\u4f46\u4e0d\u63d0\u4f9b\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002\u7ee7\u627f\u63a5\u53e3\u5141\u8bb8\u7c7b\u627f\u8bfa\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u4f46\u5177\u4f53\u7684\u5b9e\u73b0\u7ec6\u8282\u7531\u7c7b\u81ea\u5df1\u51b3\u5b9a\u3002</li> <li>\u7ee7\u627f\u63a5\u53e3\u6709\u52a9\u4e8e\u5b9a\u4e49\u7cfb\u7edf\u7684\u4e0d\u540c\u7ec4\u4ef6\u4e4b\u95f4\u53ef\u4ee5\u5982\u4f55\u4e92\u76f8\u4ea4\u4e92\uff0c\u5b83\u5f3a\u8c03\u7684\u662f\u7ec4\u4ef6\u4e4b\u95f4\u7684\u5951\u7ea6\u3002</li> <li>\u7ee7\u627f\u5b9e\u73b0\uff1a</li> <li>\u6307\u7684\u662f\u4e00\u4e2a\u7c7b\u7ee7\u627f\u53e6\u4e00\u4e2a\u7c7b\uff08\u5373\u7236\u7c7b\uff09\uff0c\u4ece\u800c\u83b7\u5f97\u7236\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\uff08override\uff09\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002</li> <li>\u7ee7\u627f\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u5f97\u5b50\u7c7b\u590d\u7528\u7236\u7c7b\u7684\u4ee3\u7801\uff0c\u51cf\u5c11\u91cd\u590d\u52b3\u52a8\u3002\u540c\u65f6\uff0c\u5b50\u7c7b\u53ef\u4ee5\u6269\u5c55\u7236\u7c7b\u7684\u529f\u80fd\uff0c\u5b9e\u73b0\u591a\u6001\u6027\u3002</li> <li>\u7ee7\u627f\u5b9e\u73b0\u5f3a\u8c03\u7684\u662f\u5bf9\u73b0\u6709\u4ee3\u7801\u7684\u590d\u7528\u548c\u6269\u5c55\uff0c\u5b83\u5141\u8bb8\u5b50\u7c7b\u62e5\u6709\u7236\u7c7b\u7684\u6240\u6709\u7279\u6027\uff0c\u5e76\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5b9a\u5236\u3002</li> </ol> <pre><code>class Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) = 0; // pure virtual\n  // ...\nprotected:\n  void defaultFly(const Airport &amp;destination) {\n    // Default code for flying an airplane to the given destination.\n  }\n};\nclass ModelA : public Airplane {\npublic: // AB\u90fd\u7ee7\u627f\u4e86\u5b9e\u73b0 \n  virtual void fly(const Airport &amp;destination) {\n    defaultFly(destination);\n  }\n  // ...\n};\nclass ModelB : public Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    defaultFly(destination);\n  }\n  // ...\n};\nclass ModelC : public Airplane {\npublic: // C \u7ee7\u627f\u63a5\u53e3, \u5e76\u4e14\u8986\u5199\n  virtual void fly(const Airport &amp;destination) {\n    // The \"Model C way\" of flying.\n    // Without the definition of this function, `ModelC` remains abstract,\n    // which does not compile if we create an object of such type.\n  }\n};\n</code></pre> <p>We have come to the conclusion that</p> <ul> <li>Pure virtual functions specify inheritance of interface only.(\u7eaf\u865a\u51fd\u6570\u58f0\u660e\u63a5\u53e3)</li> <li>Simple (impure) virtual functions specify inheritance of interface + a default implementation. (\u865a\u51fd\u6570\u58f0\u660e\u4e86\u63a5\u53e3\u7684\u540c\u65f6, \u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u65b9\u6cd5)</li> <li>The default implementation can be overridden.</li> </ul> <p>Moreover, non-virtual functions specify inheritance of interface + a mandatory implementation.(\u975e\u865a\u51fd\u6570\u63d0\u4f9b\u7684\u65b9\u6cd5\u4f1a\u88ab\u5f3a\u5236\u63a5\u53d7)</p> <p>Note: In public inheritance, interfaces are always inherited.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html","title":"L0","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#cs100-lecture-0","title":"CS100 Lecture 0","text":"<p>Introduction</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#contents","title":"Contents","text":"<ul> <li>Introduction to programming</li> <li>Standardization of C and C++</li> <li>Course Information</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#introduction-to-programming","title":"Introduction to programming","text":"<p>What is programming?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#introduction-to-programming_1","title":"Introduction to programming","text":"<p>Computer programming is the process of writing instructions that get executed by computers.</p> <p>The instructions, also known as code, are written in a programming language which the computer can understand and use to perform a task or solve a problem.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#machine-code","title":"Machine code","text":"<p>The only langauge that the computer can directly understand is the machine code, which is binary!</p> <ul> <li>For convenience, write binary code in hexadecimal form.</li> </ul> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#assembly-code","title":"Assembly code","text":"<p>The assembly code is just a more human-readable form of the machine code.</p> <ul> <li>It can be translated into machine code straightforwardly.</li> </ul> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#high-level-languages","title":"High-level languages","text":"<p>Disadvantages of assembly code:</p> <ul> <li>Not portable: Different machines (architectures) may have different instruction sets.</li> <li>Too difficult to write and understand:</li> <li>Instructions are very primitive and low-level, e.g. load, store, add, jump, ...</li> <li>No high-level structures/abstractions: ~~control-flow statements, classes, ...~~</li> </ul> <p>Learn more about them in senior courses (CS110, CS130, etc.)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#high-level-languages_1","title":"High-level languages","text":"<p>Examples: C, Java, Python, C++, Rust, JavaScript, ...</p> <ul> <li>Syntactically rich</li> <li>Better abstraction ability</li> <li>More structured code</li> <li>Easier to code, debug and maintain</li> <li>Easier to ensure safety</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#high-level-languages-and-compilers-including-interpreters","title":"High-level languages and compilers (including interpreters)","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#high-level-languages-and-compilers","title":"High-level languages and compilers","text":"<p>A compiler is a special program that translates a programming language's source code into machine code, bytecode or another programming language.</p> <ul> <li>The high-level code cannot be understood by the computer directly! It needs to be translated by a compiler.</li> <li>The C/C++ compiler will translate the program and generate an executable (<code>.exe</code> file).</li> <li>Some languages (e.g. Python) use interpreters, which may be seen as a special kind of compiler.</li> <li>An interpreter reads and executes the program directly, without earlier compiling it into machine code.</li> <li>When executing a Python program, you don't see a <code>.exe</code> file! </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#high-level-languages-and-compilers_1","title":"High-level languages and compilers","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#high-level-languages-and-compilers_2","title":"High-level languages and compilers","text":"<p>A compiler is a special program that translates a programming language's source code into machine code, bytecode or another programming language.</p> <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\n  puts(\"hello world\");\n}\n</code></pre> <p><code>gcc hello.c -o hello.exe</code> \\(\\Rightarrow\\) Generates an executable <code>hello.exe</code>.</p> <ul> <li><code>gcc</code> is the C compiler used here.</li> <li><code>-o xxx</code> indicates that the name of the generated file is <code>xxx</code>.</li> </ul> <p><code>.\\hello</code> \\(\\Rightarrow\\) Prints <code>hello world</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#compilers","title":"Compilers","text":"<p>Popular C/C++ compilers:</p> <ul> <li>GCC (GNU Compiler Collection)</li> <li>MSVC (Microsoft Visual C compiler)</li> <li>Clang</li> <li>ICC (Intel C/C++ Compiler)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#why-c-and-c","title":"Why C and C++?","text":"<ul> <li>C is a high-level language that is closest to assembly.</li> <li>C++ \"is as close to C as possible, but no closer\".</li> <li>C++ is a language that</li> <li>is a better C,</li> <li>supports data abstraction,</li> <li>and supports object oriented programming.</li> <li>C and C++ are popular, powerful, general-purpose and efficient, and play an essential role in areas like systems programming, game engines development, high frequency trading, ...</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#standardization-of-c-and-c","title":"Standardization of C and C++","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#standardization-of-c-and-c_1","title":"Standardization of C and C++","text":"<p>Both C and C++ have ISO standards:</p> <ul> <li>C: ISO/IEC 9899, since 1990</li> <li>C89/90, C99, C11, C17, C23, ... </li> <li>Since C11 (2011), a new standard every 6 years.</li> <li>C++: ISO/IEC 14882, since 1998</li> <li>C++98/03, C++11, C++14, C++17, C++20, C++23, ... </li> <li>Since C++11 (2011), a new standard every 3 years.</li> </ul> <p>CS100 is based on C17 and C++17.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#what-is-the-value-of-a-standard","title":"What is the value of a standard?","text":"<ul> <li>Offers a unique, standard definition of the language.</li> <li>Every compiler should accept the programs that conform to the standard, with some possible compiler extensions.</li> <li>If we want our code to be compiled and run with different compilers on different platforms, make it standard-conforming.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#how-to-get-the-standard","title":"How to get the standard?","text":"<p>Possible ways:</p> <ul> <li>Purchase the standard documentation from ISO (or ANSI) \\(\\Longrightarrow\\) Very expensive</li> <li>Download the working drafts (free): Some working drafts are really close to the standards.</li> <li>Useful resources for C and for C++.</li> <li>cppreference \\(\\Longleftarrow\\) RECOMMENDED!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#about-cppreference","title":"About cppreference","text":"<p>The standard documentations are not friendly for learning:</p> <ul> <li>They aim to provide a precise definition of the language, instead of teaching the language.</li> <li>The chapters are not organized in a way suitable for learning.</li> <li>Changes between different standards are not shown in-place.</li> </ul> <p>Cppreference is a complete online reference for the C and C++ languages and standard libraries.</p> <ul> <li>A more convenient and friendly version of the standards.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#course-information","title":"Course Information","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#course-objectives","title":"Course objectives","text":"<p>Upon completion of the course, you should be able to:</p> <ul> <li>Know how to analyze simple problems and design programs.</li> <li>Know how to write them in C and C++.</li> <li>Know C/C++ syntax.</li> <li>Understand some basic ideas of programming.</li> <li>Understand sequential and OO programming.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#course-structure","title":"Course Structure","text":"<ul> <li>16 weeks teaching</li> <li>C: Week 1 \\~ 6</li> <li>C++: Week 7 \\~ 16</li> <li>1 midterm exam, in week 13 \\~ 15</li> <li>2 lectures every week</li> <li>Monday 8:15-9:55</li> <li>Wednesday 8:15-9:55</li> <li>Room: Teaching Center 201, 202</li> <li>Weekly recitations</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#assessment","title":"Assessment","text":"<p>Homework \\(72\\%\\) + Midterm Exam \\(22\\%\\) + Quiz \\(4\\%\\) + Recitation attendance checks \\(2\\%\\).</p> <ul> <li>No final exams</li> <li>No projects</li> <li>Homework assignments make up a large proportion!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#recitations","title":"Recitations","text":"<ul> <li>About 15 recitations</li> <li>2 hours every week</li> <li>Include review of important contents, some extensions, homework/quiz/exam solutions, and some coding examples.</li> <li>Attendance mandatory! (\\(2\\%\\) in total)</li> <li>Videos will be available on Bilibili.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#homework-assignments","title":"Homework assignments","text":"<ul> <li>8 homework assignments:</li> <li>\\(7\\%+7\\%+7\\%+11\\%+7\\%+11\\%+11\\%+11\\%=\\mathbf{72}\\%\\) (may be adjusted)</li> <li>Submit through Online Judge!!!</li> <li>Any other forms of submissions are not accepted, unless with special reasons.</li> <li>For every problem, the score of the last submission will be taken as the final score.</li> <li>No plagiarism!!! The penalty will be heavy.</li> <li>The TAs are really experienced. Don't take any chances.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#academic-integrity-and-ai-gpt-copilot-etc","title":"*Academic integrity and AI (GPT, Copilot, etc.)","text":"<ul> <li>Anything obtained from AI tools is treated equivalently as the contents from the Internet.</li> <li>If two students copied the same code from the Internet and submitted them \\(\\Longrightarrow\\) PLAGIARISM!</li> <li>If two students copied the same answer from AI tools and submitted them \\(\\Longrightarrow\\) PLAGIARISM!</li> <li>Typical excuses we don't accept:</li> <li>\"We used the same ChatGPT account, and ChatGPT gave me his code.\"</li> <li>\"Copilot generated the same code for us.\"</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#quizzes","title":"Quizzes","text":"<ul> <li>1 or 2 quizzes, \\(4\\%\\) in total.</li> <li>During regular classes</li> <li>Time will not be announced in advance!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#midterm-exam","title":"Midterm exam","text":"<ul> <li>\\(22\\%\\)</li> <li>Will be held in the 13th \\~ 15th week</li> <li>Covers everything in regular classes and recitations, unless otherwise stated.</li> <li>Ranging from the beginning to operator overloading (C++).</li> <li>Will not be too difficult. Don't worry.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#piazza","title":"PIAZZA!!","text":"<ul> <li>All the notifications will be announced on Piazza.</li> <li>All the course materials will be available on Piazza.</li> <li>Ask and answer questions on Piazza.</li> <li>In case you miss any important notifications, we suggest checking Piazza once every 12 hours.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#textbooks-and-references","title":"Textbooks and references","text":"<p>Recommended textbooks:</p> <ul> <li>C++ Primer (5th edition) (NOT C++ Primer Plus!) (based on C++11)</li> <li>Effective C++ (based on C++98), Effective Modern C++ (based on C++14)</li> <li>The C++ Programming Language (4th edition) (based on C++11), written by Bjarne Stroustrup, the inventor of C++</li> </ul> <p>All of the course materials conform to the C17 and C++17 standards, based on cppreference and the standard committee's papers.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#textbooks-and-references_1","title":"Textbooks and references","text":"<p>Note on textbooks:</p> <ul> <li>You are not required to read the entire books.</li> <li>We will recommend (or require) reading some of the chapters/sections when necessary.</li> <li>We will upload the materials to Piazza.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#textbooks-and-references_2","title":"Textbooks and references","text":"<p>Note on cppreference/standard documentations:</p> <ul> <li>You may find them difficult to read at the beginning. Don't worry!</li> <li>We will teach you how to read them (maybe during recitations).</li> <li>By the time you have learned some major aspects of the language, you should have less difficulty reading them.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l0/l0.html#cc-environment-setup","title":"C/C++ environment setup","text":"<ul> <li>We recommend VSCode + GCC (MinGW on Windows). Follow this video.</li> <li>Advanced tools (Visual Studio, CMake, ... ) may be needed in further homework assignments.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html","title":"L1","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#cs100-lecture-1","title":"CS100 Lecture 1","text":"<p>The First C Program</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#contents","title":"Contents","text":"<ul> <li>Brief history of C</li> <li>The first C program</li> <li>Functions (basic) and the <code>main</code> function</li> <li><code>scanf</code> and <code>printf</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#brief-history-of-c","title":"Brief history of C","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-unix-operating-system-and-c","title":"The UNIX operating system and C","text":"<ul> <li>In 1969, a small group of AT&amp;T Bell Labs led by Ken Thompson and Dennis Ritchie began to develop UNIX.</li> <li>In 1973, UNIX kernel was rewritten in C.</li> <li>From 1969 to 1973, Dennis Ritchie developed C in Bell Labs.</li> <li>In 1978, Kernighan and Ritchie published the K&amp;R book: The C Programming Language.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#dennis-ritchie-and-the-kr-book","title":"Dennis Ritchie and the K&amp;R book","text":"- Dennis M. Ritchie (1941 - 2011)   - The inventor of C   - Co-inventor of UNIX   - ACM Turing Award (1983) with Ken Thompson for UNIX"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#standardization-of-c","title":"Standardization of C","text":"<ul> <li>\"K&amp;R C\": Informal specification (the K&amp;R book)</li> <li>ANSI C: Known as \"C89\"</li> <li>American National Standards Institute</li> <li>Came out in 1989</li> <li>ISO C standard: ISO/IEC 9899</li> <li>International Organization for Standardization</li> <li>First version: \"C90\" in 1990, the same standard as C89 with only formatting changes</li> <li>C99 (1999), C11 (2011), C17 (2017/2018), C23 (2023)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-first-c-program","title":"The first C program","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#hello-world","title":"Hello World","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"hello world\\n\");\n  return 0;\n}\n</code></pre> <ul> <li>Save the code as <code>hello.c</code>.</li> <li><code>gcc hello.c -o hello.exe</code> \\(\\Rightarrow\\) generates <code>hello.exe</code></li> <li><code>.\\hello.exe</code> \\(\\Rightarrow\\) prints <code>hello world</code>, with a newline at the end.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-main-function","title":"The <code>main</code> function","text":"<p>Every C program coded to run in a hosted execution environment contains the definition of a function named <code>main</code>, which is the designated start of the program.</p> <pre><code>// Other things (functions, structures, ...), if any ...\n\nint main(void) {\n  // The program starts here.\n  statement_1;\n  statement_2;\n  // ...\n  statement_n;\n}\n</code></pre> <p>* What is a function?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#a-function-in-c","title":"A function in C","text":"<p>A function in mathematics: \\(f:S\\mapsto T\\), accepts some arguments and returns some value.</p> <p>Example: \\(f(x)=x^2,x\\in\\mathbb Z\\) accepts an integer argument, and returns its square.</p> <p>Write it in C:</p> <pre><code>int f(int x) {\n  return x * x;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#a-function-in-c_1","title":"A function in C","text":"<p>Example: \\(f(x, y)=x+y,x,y\\in\\mathbb R\\)</p> <p>Write it in C:</p> <pre><code>double f(double x, double y) { // Two arguments\n  return x + y;\n}\n</code></pre> <p><code>double</code>: double-precision floating-point number \\(\\Rightarrow\\) will be covered in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#a-function-in-c_2","title":"A function in C","text":"<p>Syntax: <code>ReturnType FunctionName(Parameters) { FunctionBody }</code></p> <p><code>FunctionBody</code> can also contain more complex statements:</p> <pre><code>int max(int a, int b) {\n  if (a &lt; b)\n    return b;\n  else\n    return a;\n}\n</code></pre> <p><code>if</code> statement \\(\\Rightarrow\\) will be covered in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#a-function-in-c_3","title":"A function in C","text":"<p>Syntax: <code>ReturnType FunctionName(Parameters) { FunctionBody }</code></p> <p>A function can have no arguments. To define such a function, write <code>void</code> in <code>Parameters</code>:</p> <pre><code>int always42(void) {\n  return 42;\n}\n</code></pre> <p>We will introduce more on functions in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-main-function_1","title":"The <code>main</code> function","text":"<p>Every C program coded to run in a hosted execution environment contains the definition of a function named <code>main</code>, which is the designated start of the program.</p> <p>According to the standard, the <code>main</code> function must has one of the following signatures:</p> <ol> <li><code>int main(void) { ... }</code></li> <li><code>int main(int argc, char *argv[]) { ... }</code></li> <li><code>/* another implementation-defined signature */</code></li> </ol> <p>For now, we only use the first one: <code>int main(void) { ... }</code>.</p> <p>\"signature\": consisting of the return-type, parameters, and some other possible information</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-main-function_2","title":"The <code>main</code> function","text":"<pre><code>int main(void) {\n  printf(\"hello world\\n\");\n  return 0;\n}\n</code></pre> <p>The return value of <code>main</code>: Indicates whether the program exits successfully.</p> <p>A program exits successfully if and only if its <code>main</code> function returns <code>0</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-main-function_3","title":"The <code>main</code> function","text":"<p>A program exits successfully if and only if its <code>main</code> function returns <code>0</code>.</p> <p>You may also see this somewhere else:</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-main-function_4","title":"The <code>main</code> function","text":"<p>A program exits successfully if and only if its <code>main</code> function returns <code>0</code>.</p> <p>You may also see this somewhere else:</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-main-function_5","title":"The <code>main</code> function","text":"<p>It is ok to omit <code>return 0;</code> in <code>main</code> (but not in other functions):</p> <pre><code>int main(void) {\n  printf(\"hello world\\n\");\n}\n</code></pre> <p>According to the standard:</p> <p>If the return type is compatible with <code>int</code> and control reaches the terminating <code>}</code>, the value returned to the environment is the same as if executing <code>return 0;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#printf","title":"<code>printf</code>","text":"<p>Declared in the standard library header file <code>stdio.h</code>.</p> <ul> <li>That's why we need <code>#include &lt;stdio.h&gt;</code> in the beginning.</li> </ul> <p>Writes something to the standard output.</p> <pre><code>printf(\"hello world\\n\");\n</code></pre> <ul> <li>Prints <code>hello world</code>, with a newline <code>\\n</code> at the end.</li> <li>Try this out: <code>printf(\"hello\\nworld\\n\");</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#output-vs-return","title":"Output vs return","text":"<pre><code>int main(void) {\n  printf(\"hello world\\n\");\n  return 0;\n}\n</code></pre> <ul> <li>What is the output of the program?</li> <li>What is the return value of <code>main</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#output-vs-return_1","title":"Output vs return","text":"<pre><code>int main(void) {\n  printf(\"hello world\\n\");\n  return 0;\n}\n</code></pre> <ul> <li>What is the output of the program? \\(\\Rightarrow\\) <code>hello world</code> with an ending newline.</li> <li>What is the return value of <code>main</code>? \\(\\Rightarrow\\) <code>0</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-ab-problem","title":"The \"A+B\" problem","text":"<p>Reads two integers from input (separated by whitespaces), and prints the sum of them.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  int a, b; // declares two variables of type \"int\", named \"a\" and \"b\".\n  scanf(\"%d%d\", &amp;a, &amp;b);\n  printf(\"%d\\n\", a + b);\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#the-ab-problem_1","title":"The \"A+B\" problem","text":"<p>Reads two integers from input (separated by whitespaces), and prints the sum of them.</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#scanf","title":"<code>scanf</code>","text":"<p>Also declared in <code>stdio.h</code>.</p> <p>Reads something from the standard input.</p> <p>Example: Reads two integers from the standard input, separated by whitespaces.</p> <pre><code>scanf(\"%d%d\", &amp;a, &amp;b);\n</code></pre> <ul> <li><code>%d</code>: Indicates that an integer is expected, and will be stored into an <code>int</code> variable.</li> <li><code>&amp;</code>: The address-of operator \\(\\Rightarrow\\) will be covered in later lectures.</li> </ul> <p>For now, just remember to add <code>&amp;</code> when passing things to <code>scanf</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#scanf_1","title":"<code>scanf</code>","text":"<pre><code>scanf(\"%d%d\", &amp;a, &amp;b);\n</code></pre> <p>How should these two integers be separated? Try it out:</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#scanf_2","title":"<code>scanf</code>","text":"<pre><code>scanf(\"%d%d\", &amp;a, &amp;b);\n</code></pre> <p><code>%d</code> will skip any leading whitespaces.</p> <ul> <li>\"whitespace\" refers to the character that looks \"blank\": space <code>' '</code>, newline <code>'\\n</code>, tab <code>'\\t'</code>, etc.</li> </ul> <p>More on the rules related to <code>scanf</code> will be covered in recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#printf-printing-an-integer","title":"<code>printf</code> printing an integer","text":"<p>Given <code>a</code> \\(=30\\), <code>b</code> \\(=42\\) as input:</p> <ul> <li><code>printf(\"%d\\n\", a + b);</code></li> </ul> <p>\\(\\Rightarrow\\) prints <code>72</code>, with a newline in the end.</p> <ul> <li><code>printf(\"%d + %d equals %d\\n\", a, b, a + b);</code></li> </ul> <p>What is the output?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#printf-printing-an-integer_1","title":"<code>printf</code> printing an integer","text":"<p>Given <code>a</code> \\(=30\\), <code>b</code> \\(=42\\) as input:</p> <ul> <li><code>printf(\"%d\\n\", a + b);</code></li> </ul> <p>\\(\\Rightarrow\\) prints <code>72</code>, with a newline in the end.</p> <ul> <li><code>printf(\"%d + %d equals %d\\n\", a, b, a + b);</code></li> </ul> <p>\\(\\Rightarrow\\) prints <code>30 + 42 equals 72</code>, with a newline in the end.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#summary","title":"Summary","text":"<p>Understand the following two programs:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"hello world\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  int a, b;\n  scanf(\"%d%d\", &amp;a, &amp;b);\n  printf(\"%d + %d equals %d\\n\",\n         a, b, a + b);\n  return 0;\n}\n</code></pre>   - Why is `#include ` needed? - What does `int main(void)` mean? - What is the meaning of `return 0;`? Can it be omitted? - How do we represent a newline? - What does `%d` mean? - How are whitespaces handled when reading integers with `scanf`?"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#summary_1","title":"Summary","text":"<ul> <li>Why is <code>#include &lt;stdio.h&gt;</code> needed?</li> <li><code>scanf</code> and <code>printf</code> are declared in the standard library header file <code>stdio.h</code>.</li> <li>What does <code>int main(void)</code> mean?</li> <li>The <code>main</code> function is where the program starts. <code>int</code> is the return type and <code>void</code> indicates that this function accepts no arguments.</li> <li>What is the meaning of <code>return 0;</code>? Can it be omitted?</li> <li>A program returns <code>0</code> if it exits successfully. The <code>main</code> function of C will execute <code>return 0</code> automatically at the end if we don't write it exiplicitly.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#summary_2","title":"Summary","text":"<ul> <li>How do we represent a newline?</li> <li><code>'\\n'</code>.</li> <li>What does <code>%d</code> mean?</li> <li>Indicates that the type of the data being read or printed is <code>int</code>.</li> <li>How are whitespaces handled when reading integers with <code>scanf</code>?</li> <li>When reading <code>int</code> with <code>%d</code> in <code>scanf</code>, leading whitespaces are ignored.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#exercises","title":"Exercises","text":"<ol> <li>Run the following code. Try to understand what it means.</li> </ol> <p>```c    #include  <p>int max(int a, int b) {      if (a &lt; b)        return b;      else        return a;    }</p> <p>int main(void) {      int a, b;      scanf(\"%d%d\", &amp;a, &amp;b);      printf(\"%d\\n\", max(a, b));      return 0;    }    ```</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l1/l1.html#exercises_1","title":"Exercises","text":"<ol> <li>Try to modify the program above. Add some prompts for input and output. For example:</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html","title":"CS100 Lecture 10","text":"<p>C Summary</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#contents","title":"Contents","text":"<ul> <li>C summary</li> <li>Types</li> <li>Variables</li> <li>Expressions</li> <li>Control flow</li> <li>Functions</li> <li>Standard library</li> <li>Example: <code>Vector</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#c-summary","title":"C Summary","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#types","title":"Types","text":"<p>Types are fundamental to any program: They tell us what our data mean and what operations we can perform on those data.</p> <p>C is a statically-typed language: The type of every expression (except those involving VLAs) is known at compile-time.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#arithmetic-types","title":"Arithmetic types","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#arithmetic-types_1","title":"Arithmetic types","text":"<ul> <li><code>1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code></li> <li><code>sizeof(signed T) == sizeof(unsigned T)</code> for every <code>T</code> \\(\\in\\{\\) <code>char</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code> \\(\\}\\)</li> <li><code>short</code> and <code>int</code> are at least 16 bits. <code>long</code> is at least 32 bits. <code>long long</code> is at least 64 bits.</li> <li>Range of signed types: \\(\\left[-2^{N-1},2^{N-1}-1\\right]\\). Range of unsigned types: \\(\\left[0,2^N-1\\right]\\).</li> <li>Whether <code>char</code> is signed or not is implementation-defined.</li> <li>Signed integer overflow is undefined behavior.</li> <li>Unsigned arithmetic never overflows: It is performed modulo \\(2^N\\), where \\(N\\) is the number of bits of that type.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#pointer-types","title":"Pointer types","text":"<p><code>PointeeType *</code></p> <ul> <li>For <code>T</code> \\(\\neq\\) <code>U</code>, <code>T *</code> and <code>U *</code> are different types.</li> <li>The value of a pointer of type <code>T *</code> is the address of an object of type <code>T</code>.</li> <li>Null pointer: The pointer holding the null pointer value, which is a special value indicating that the pointer is \"pointing nowhere\".</li> <li>A null pointer can be obtained from <code>NULL</code>.</li> <li><code>&amp;var</code> returns the address of <code>var</code>. The return type is pointer to the type of <code>var</code>.</li> <li>Only when a pointer is actually pointing to an object is it dereferenceable.</li> <li><code>*ptr</code>, where <code>ptr</code> is not dereferenceable, is undefined behavior.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#array-types","title":"Array types","text":"<p><code>ElemType [N]</code></p> <ul> <li><code>T [N]</code>, <code>U [N]</code> and <code>T [M]</code> are different types for <code>T</code> \\(\\neq\\) <code>U</code> and <code>N</code> \\(\\neq\\) <code>M</code>.</li> <li><code>N</code> should be compile-time constant. Otherwise it is a VLA.</li> <li>Valid index range: \\([0,N)\\). Subscript out of range is undefined behavior.</li> <li>Decay: <code>a</code> \\(\\to\\) <code>&amp;a[0]</code>, <code>T [N]</code> \\(\\to\\) <code>T *</code>.</li> </ul> <p>Pointer to array: <code>T (*)[N]</code>. Array of pointers: <code>T *[N]</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#struct-types","title":"<code>struct</code> types","text":"<p>A special data type consisting of a sequence of members.</p> <ul> <li>The type name is <code>struct StructName</code>.</li> <li>\\(\\displaystyle \\mathtt{sizeof(struct\\ \\ X)}\\geqslant\\sum_{\\mathtt{member}\\in\\mathtt{X}}\\mathtt{sizeof(member)}\\)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#variables","title":"Variables","text":"<p>Declare a variable: <code>Type varName</code></p> <ul> <li><code>ElemType varName[N]</code> for array type <code>ElemType[N]</code>.</li> <li><code>T (*varName)[N]</code> for pointer to array type <code>T (*)[N]</code>.</li> </ul> <p>Initialize a variable: <code>= initializer</code></p> <ul> <li>Brace-enclosed list initializer for arrays and <code>struct</code>s: <code>= { ... }</code>.</li> <li>Designators for arrays: <code>= {[3] = 5, [7] = 4}</code></li> <li>Designators for <code>struct</code>s: <code>= {.mem1 = x, .mem2 = y}</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#initialization","title":"Initialization","text":"<p>If a variable is declared without explicit initializer:</p> <ul> <li>For global or local <code>static</code> variables, they are empty-initialized:</li> <li><code>0</code> for integer types,</li> <li><code>+0.0</code> for floating-point types,</li> <li>null pointer value for pointer types.</li> <li>For local non-<code>static</code> variables, they are uninitialized, holding indeterminate values.</li> </ul> <p>These rules apply recursively to the elements of arrays and the members of <code>struct</code>s.</p> <p>Any use of the value of an uninitialized variable is undefined behavior.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#scopes-and-name-lookup","title":"Scopes and name lookup","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#expressions","title":"Expressions","text":"<p>Expressions = operators + operands.</p> <ul> <li>Operator precedence, associativity, and evaluation order of operands</li> <li><code>f() + g() * h()</code>, <code>f() - g() + h()</code></li> <li>The only four operators whose operands have deterministic evaluation order:</li> <li><code>&amp;&amp;</code> and <code>||</code>: short-circuit evaluation</li> <li><code>?:</code></li> <li><code>,</code> (not in a function call or in an initializer list)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#expressions_1","title":"Expressions","text":"<ul> <li>If the evaluation order of <code>A</code> and <code>B</code> is unspecified, and if</li> <li>both <code>A</code> and <code>B</code> contain a write to an object, or</li> <li>one of them contains a write to an object, and the other one contains a read to that object</li> </ul> <p>then the behavior is undefined.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#arithmetic-operators","title":"Arithmetic operators","text":"<p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></p> <ul> <li>Division: truncated towards zero.</li> <li>Remainder: <code>(a / b) * b + (a % b) == a</code> always holds.</li> <li>For <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code>, the operands undergo a series of type conversions to a common type.</li> </ul> <p>Bitwise operators: <code>~</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></p> <p>Compound assignment operators: <code>a op= b</code> is equivalent to <code>a = a op b</code>.</p> <p>Be careful with signed overflows.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#pointer-arithmetic","title":"Pointer arithmetic","text":"<ul> <li>Pointer arithmetic: <code>p++</code>, <code>++p</code>, <code>p--</code>, <code>--p</code>, <code>p + i</code>, <code>i + p</code>, <code>p - i</code>, <code>p += i</code>, <code>p -= i</code>, <code>p1 - p2</code>.</li> <li>Pointer arithmetic uses the units of the pointed-to type.</li> <li><code>p + i == (char *)p + i * sizeof(*p)</code></li> <li>Pointer arithmetic must be performed within an array (including its past-the-end position), otherwise the behavior is undefined.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#operators","title":"Operators","text":"<p><code>++</code>, <code>--</code></p> <ul> <li><code>++a</code> and <code>--a</code> returns the value of <code>a</code> after incrementation/decrementation.</li> <li><code>a++</code> and <code>a--</code> returns the original value of <code>a</code>.</li> </ul> <p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code></p> <ul> <li>The operands undergo a series of type conversions to a common type before comparison.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#operators_1","title":"Operators","text":"<p>Member access: <code>obj.member</code>.</p> <p>Member access through pointer: <code>ptr-&gt;member</code>, which is equivalent to <code>(*ptr).member</code>.</p> <ul> <li><code>.</code> has higher precedence than <code>*</code>, so the parentheses around <code>*ptr</code> are necessary.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#control-flow","title":"Control flow","text":"<ul> <li><code>if (cond) stmt</code></li> <li><code>if (cond) stmt1 else stmt2</code></li> <li><code>for (init_expr; cond; inc_expr) stmt</code></li> <li><code>while (cond) stmt</code></li> <li><code>do stmt while (cond);</code></li> <li><code>switch (integral_expr) { ... }</code></li> <li><code>break</code> and <code>continue</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#functions","title":"Functions","text":"<p>Function declaration: <code>RetType funcName(Parameters);</code></p> <ul> <li>Parameter names are not necessary, but types are required.</li> <li>A function can be declared multiple times.</li> </ul> <p>Function definition: <code>RetType funcName(Parameters) { functionBody }</code></p> <ul> <li>A function can be defined only once.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#functions_1","title":"Functions","text":"<ul> <li> <p>Argument passing:</p> </li> <li> <p>Use the argument to initialize the parameter.</p> </li> <li>The semantic is copy.</li> <li>Decay always happens: One can never declare an array parameter.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#the-main-function","title":"The <code>main</code> function","text":"<p>Entry point of the program (after initialization of all global and local <code>static</code> variables).</p> <p>One of the following signatures:</p> <ul> <li><code>int main(void) { ... }</code></li> <li><code>int main(int argc, char **argv) { ... }</code>, for passing command-line arguments.</li> <li><code>/* another implementation-defined signature */</code></li> </ul> <p>Return value: <code>0</code> to indicate that the program exits successfully.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#standard-library","title":"Standard library","text":"<ul> <li>IO library <code>&lt;stdio.h&gt;</code>: <code>scanf</code>, <code>printf</code>, <code>fgets</code>, <code>puts</code>, <code>putchar</code>, <code>getchar</code>, ...</li> <li>String library <code>&lt;string.h&gt;</code>: <code>strlen</code>, <code>strcpy</code>, <code>strcmp</code>, <code>strchr</code>, ...</li> <li>Character classification <code>&lt;ctype.h&gt;</code>: <code>isdigit</code>, <code>isalpha</code>, <code>tolower</code>, ...</li> <li><code>&lt;stdlib.h&gt;</code>: Several general-purpose functions: <code>malloc</code>/<code>free</code>, <code>rand</code>, ...</li> <li><code>&lt;limits.h&gt;</code>: Defines macros like <code>INT_MAX</code> that describe the limits of built-in types.</li> <li><code>&lt;math.h&gt;</code>: Mathematical functions like <code>sqrt</code>, <code>sin</code>, <code>acos</code>, <code>exp</code>, ...</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#example-vector","title":"Example: <code>Vector</code>","text":"<p>A \"vector\" in linear algebra:</p> \\[ \\mathbf x=\\begin{bmatrix}x_1\\\\\\vdots\\\\x_n\\end{bmatrix}. \\] <p>It consists of two things: A sequence of \\(n\\) numbers, and its dimension \\(n\\).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#example-vector_1","title":"Example: <code>Vector</code>","text":"<pre><code>struct Vector {\n  double *entries;\n  size_t dimension;\n};\n</code></pre> <p>Do not name them with <code>x</code> and <code>n</code>!</p> <p>[Best practice] Use meaningful names in programs.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#creation-and-destruction","title":"Creation and destruction","text":"<pre><code>struct Vector create_vector(size_t n) {\n  return (struct Vector){.entries = calloc(n, sizeof(double)),\n                         .dimension = n};\n}\nvoid destroy_vector(struct Vector *vec) {\n  free(vec-&gt;entries);\n  // Do we need to free(vec)?\n}\n</code></pre> <p>Usage:</p> <pre><code>struct Vector v = create_vector(10);\n// some operations ...\ndestroy_vector(&amp;v);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#deep-copy-of-vector","title":"\"Deep copy\" of <code>Vector</code>","text":"<p>The default copy semantics of <code>Vector</code> is not satisfactory:</p> <pre><code>struct Vector v = something();\nstruct Vector u = v;\n</code></pre> <p>Now <code>u.entries</code> and <code>v.entries</code> point to the same memory block!</p> <pre><code>destroy_vector(&amp;u);\ndestroy_vector(&amp;v); // undefined behavior: double free!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#deep-copy-of-vector_1","title":"\"Deep copy\" of <code>Vector</code>","text":"<pre><code>void vector_assign(struct Vector *to, const struct Vector *from) {\n  to-&gt;entries = malloc(from-&gt;dimension * sizeof(double));\n  memcpy(to-&gt;entries, from-&gt;entries, from-&gt;dimension * sizeof(double));\n  to-&gt;dimension = from-&gt;dimension;\n}\n</code></pre> <p>Is this correct?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#deep-copy-of-vector_2","title":"\"Deep copy\" of <code>Vector</code>","text":"<p><code>free</code> the memory block that is not used anymore!</p> <pre><code>void vector_assign(struct Vector *to, const struct Vector *from) {\n  free(to-&gt;entries); // Don't forget this!!\n  to-&gt;entries = malloc(from-&gt;dimension * sizeof(double));\n  memcpy(to-&gt;entries, from-&gt;entries, from-&gt;dimension * sizeof(double));\n  to-&gt;dimension = from-&gt;dimension;\n}\n</code></pre> <p>Is this correct?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#deep-copy-of-vector_3","title":"\"Deep copy\" of <code>Vector</code>","text":"<pre><code>void vector_assign(struct Vector *to, const struct Vector *from) {\n  free(to-&gt;entries); // Don't forget this!!\n  to-&gt;entries = malloc(from-&gt;dimension * sizeof(double));\n  memcpy(to-&gt;entries, from-&gt;entries, from-&gt;dimension * sizeof(double));\n  to-&gt;dimension = from-&gt;dimension;\n}\n</code></pre> <p>What happens if <code>to == from</code>?</p> <ul> <li>This is not impossible. Consider <code>vector_assign(&amp;vecs[i], &amp;vecs[j])</code> where <code>i</code> and <code>j</code> have a chance to be equal.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#deep-copy-of-vector_4","title":"\"Deep copy\" of <code>Vector</code>","text":"<pre><code>void vector_assign(struct Vector *to, const struct Vector *from) {\n  free(to-&gt;entries); // Don't forget this!!\n  to-&gt;entries = malloc(from-&gt;dimension * sizeof(double));\n  memcpy(to-&gt;entries, from-&gt;entries, from-&gt;dimension * sizeof(double));\n  to-&gt;dimension = from-&gt;dimension;\n}\n</code></pre> <p>What happens if <code>to == from</code>?</p> <ul> <li>This is not impossible. Consider <code>vector_assign(&amp;x[i], &amp;x[j])</code> where <code>i</code> and <code>j</code> have a chance to be equal.</li> <li>The memory block is <code>free</code>d, and the data are gone.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#deep-copy-of-vector_5","title":"\"Deep copy\" of <code>Vector</code>","text":"<pre><code>void vector_assign(struct Vector *to, const struct Vector *from) {\n  if (to == from)\n    return;\n  free(to-&gt;entries); // Don't forget this!!\n  to-&gt;entries = malloc(from-&gt;dimension * sizeof(double));\n  memcpy(to-&gt;entries, from-&gt;entries, from-&gt;dimension * sizeof(double));\n  to-&gt;dimension = from-&gt;dimension;\n}\n</code></pre> <p>Why do we declare the parameters as pointers?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#deep-copy-of-vector_6","title":"\"Deep copy\" of <code>Vector</code>","text":"<pre><code>void vector_assign(struct Vector *to, const struct Vector *from) {\n  if (to == from)\n    return;\n  free(to-&gt;entries); // Don't forget this!!\n  to-&gt;entries = malloc(from-&gt;dimension * sizeof(double));\n  memcpy(to-&gt;entries, from-&gt;entries, from-&gt;dimension * sizeof(double));\n  to-&gt;dimension = from-&gt;dimension;\n}\n</code></pre> <p>Why do we declare the parameters as pointers?</p> <ul> <li>For <code>to</code>, we need to modify it.</li> <li>For <code>from</code>, this is a read-only operation. Pass the address to avoid copies.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#equality-comparison","title":"Equality comparison","text":"<pre><code>bool vector_equal(const struct Vector *lhs, const struct Vector *rhs) {\n  if (lhs-&gt;dimension != rhs-&gt;dimension)\n    return false;\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    if (lhs-&gt;entries[i] != rhs-&gt;entries[i])\n      return false;\n  return true;\n}\n</code></pre> <p>Here we use <code>!=</code> to compare two <code>double</code>s directly. It's better to use \\(|a-b|&gt;\\epsilon\\), considering the floating-point errors.</p> <p><code>lhs</code> and <code>rhs</code> are pointers, to avoid unnecessary copies.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#basic-operations-on-vector","title":"Basic operations on <code>Vector</code>","text":"<pre><code>struct Vector vector_add(const struct Vector *lhs, const struct Vector *rhs) {\n  assert(lhs-&gt;dimension == rhs-&gt;dimension);\n  struct Vector result = create_vector(lhs-&gt;dimension);\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    result.entries[i] = lhs-&gt;entries[i] + rhs-&gt;entries[i];\n  return result;\n}\n\nstruct Vector vector_scale(const struct Vector *lhs, double scale) {\n  struct Vector result = create_vector(lhs-&gt;dimension);\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    result.entries[i] = lhs-&gt;entries[i] * scale;\n  return result;\n}\n</code></pre> <p>For <code>vector_add</code>, our design is to claim that \"the behavior is undefined if the vectors have different dimensions\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#dot-product-norm-and-distance-ell_2","title":"Dot product, norm and distance (\\(\\ell_2\\))","text":"<pre><code>double vector_dot_product(const struct Vector *lhs, const struct Vector *rhs) {\n  assert(lhs-&gt;dimension == rhs-&gt;dimension);\n  double result = 0;\n  for (size_t i = 0; i != lhs-&gt;dimension; ++i)\n    result += lhs-&gt;entries[i] * rhs-&gt;entries[i];\n  return result;\n}\ndouble vector_norm(const struct Vector *vec) {\n  return sqrt(vector_dot_product(vec, vec));\n}\ndouble vector_distance(const struct Vector *lhs, const struct Vector *rhs) {\n  struct Vector diff = vector_minus(lhs, rhs); // Define this on your own.\n  return vector_norm(&amp;diff);\n}\n</code></pre> <p>For <code>vector_dot_product</code>, our design is to claim that \"the behavior is undefined if the vectors have different dimensions\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#print-a-vector","title":"Print a <code>Vector</code>","text":"<pre><code>void print_vector(const struct Vector *vec) {\n  putchar('(');\n  if (vec-&gt;dimension &gt; 0) {\n    printf(\"%lf\", vec-&gt;entries[0]);\n    for (size_t i = 1; i != vec-&gt;dimension; ++i)\n      printf(\", %lf\", vec-&gt;entries[i]);\n  }\n  putchar(')');\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#exercise","title":"Exercise","text":"<p>What if we want to increase the dimension of a <code>Vector</code>? Implement the related functionality that reallocates a larger block of memory when needed.</p> <pre><code>void vector_push_back(struct Vector *vec, double x) {\n  if (/* reallocation is needed */)\n    vector_grow(vec); // Implement this function\n  vec-&gt;entries[vec-&gt;dimension++] = x;\n}\n</code></pre> <p>You may need to add members to <code>struct Vector</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#what-we-have-done","title":"What we have done","text":"<pre><code>struct Vector {\n  double *entries;\n  size_t dimension;\n};\nstruct Vector create_vector(size_t n);\nvoid destroy_vector(struct Vector *vec);\nvoid vector_assign(struct Vector *to, const struct Vector *from);\nbool vector_equal(const struct Vector *lhs, const struct Vector *rhs);\nstruct Vector vector_add(const struct Vector *lhs, const struct Vector *rhs);\nstruct Vector vector_minus(const struct Vector *lhs, const struct Vector *rhs);\nstruct Vector vector_scale(const struct Vector *lhs, double scale);\ndouble vector_dot_product(const struct Vector *lhs, const struct Vector *rhs);\ndouble vector_norm(const struct Vector *vec);\ndouble vector_distance(const struct Vector *lhs, const struct Vector *rhs);\nvoid print_vector(const struct Vector *vec);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#problems-of-the-current-implementation","title":"Problems of the current implementation","text":"<ol> <li>The call to <code>create_vector</code> is not mandatory. One can easily create a <code>Vector</code> with some garbage values.</li> <li><code>destroy_vector</code> is not called automatically. If we forget to call it manually, memory leak happens.</li> <li>We always need to pass the address of <code>Vector</code>s to these functions. The extra <code>&amp;</code> and <code>*</code> are annoying.</li> <li>The \"deep copy\" is implemented by a function, but the default copy semantics are still there. If we forget to call <code>vector_assign</code> when copying a <code>Vector</code>, disaster will happen.</li> <li>No prevention from modifying a <code>Vector</code>: Disaster is caused easily by a simple <code>free(vec-&gt;entries);</code>.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#problems-of-the-current-implementation_1","title":"Problems of the current implementation","text":"<ol> <li>The named functions are inconvenient: To compute \\(\\mathbf u^T(\\mathbf v+2\\mathbf w)\\), we need to write</li> </ol> <p><code>c    struct Vector scaled = vector_scale(&amp;w, 2);    struct Vector added = vector_add(&amp;v, &amp;scaled);    return vector_dot_product(&amp;u, &amp;added);</code></p> <p>Can we express it directly by <code>return u * (v + 2 * w);</code>?</p> <ol> <li>......</li> </ol> <p>We will see the solutions to these problems in C++, by data abstraction, and by OOP (object-oriented programming).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l10/l10.html#enter-the-world-of-c","title":"Enter the world of C++ ...","text":"<p>From The Design and Evolution of C++, by Bjarne Stroustrup who invented C++:</p> <p>C++ is a general-purpose programming language that - is a better C, and - supports data abstraction, and - supports object-oriented programming.</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  std::cout &lt;&lt; \"Hello world\\n\";\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html","title":"CS100 Lecture 11","text":"<p>C++ Introduction, Strings</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#contents","title":"Contents","text":"<ul> <li>Brief history of C++</li> <li>Basic IO</li> <li>Standard library</li> <li><code>std::string</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#brief-history-of-c","title":"Brief history of C++","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#c-with-classes","title":"C with Classes","text":"<p>Back to 1979, the Bell Labs: C with Classes was invented by Bjarne Stroustrup.</p> <ul> <li>An object-oriented C, with the ideas of \"class\" from Simula (and several other programming languages).</li> <li>Based on C, with many improvements: better type checking, better linkage, ...</li> </ul> <p>The development of C++ also influences that of C.</p> <ul> <li>Today's C has also deprecated the unsafe function declarations, and has adopted better type checking.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#the-birth-of-c","title":"The birth of C++","text":"<p>After C with Classes was seen as a \"medium success\" by Stroustrup, he moved on to make a better new language - C++ (1983).</p> <p>~~C++ is an object-oriented programming language.~~</p> <p>C++ is a multi-paradigm programming language that - is a better C, - supports data abstraction, and that - supports object-oriented programming.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#standardization-of-c","title":"Standardization of C++","text":"<p>Standardization: C++98, C++11, C++14, C++17, C++20, C++23, C++26, ...</p> <ul> <li>C++98: The first ISO standard in 1998.</li> <li>C++11: Marks the beginning of modern C++.</li> <li>C++14/17: Some slight fixes and improvements of C++11.</li> <li>C++20: The first standard that delivers on virtually all the features that Bjarne Stroustrup dreamed of in The Design and Evolution of C++ in 1994.</li> <li>\"D&amp;E Complete\"</li> </ul> <p>CS100 is based on C++17.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#overview-of-c","title":"Overview of C++","text":"<p>What do embedded systems, game development, high frequency trading, and particle accelerators have in common? - C++, of course!</p> <p>Effective C++ Item 1 (by Scott Meyers): View C++ as a federation of languages.</p> <p>The easiest way is to view C++ not as a single language but as a federation of related languages ... Fortunately, there are only four: - C. - Object-Oriented C++. - Template C++. - The STL.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#better-c","title":"\"Better C\"","text":"<p>Safer &amp; more reasonable designs.</p> <ul> <li><code>bool</code>, <code>true</code> and <code>false</code> are built-in. No need to <code>#include &lt;stdbool.h&gt;</code>. <code>true</code> and <code>false</code> are of type <code>bool</code>, not <code>int</code>.</li> <li>The return type of logical operators <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> and comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code> is <code>bool</code>, not <code>int</code>.</li> <li>The type of string literals <code>\"hello\"</code> is <code>const char [N+1]</code>, not <code>char [N+1]</code>.</li> <li>The type of character literals <code>'a'</code> is <code>char</code>, not <code>int</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#better-c_1","title":"\"Better C\"","text":"<p>Safer &amp; more reasonable designs.</p> <ul> <li>Potentially dangerous type conversions are not allowed to happen implicitly. They are errors, not just warnings.</li> <li><code>const</code> variables initialized with literals are compile-time constants. They can be used as the length of arrays.</li> <li><code>int fun()</code> declares a function accepting no arguments. It is not accepting unknown arguments.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#basic-io","title":"Basic IO","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#hello-world","title":"Hello world","text":"C: Use `printf`   <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world\\n\");\n  return 0;\n}\n</code></pre>   C++: Use `std::cout`   <pre><code>#include &lt;iostream&gt;\n\nint main() { // just an empty `()`\n  std::cout &lt;&lt; \"Hello world\\n\";\n  return 0;\n}\n</code></pre> <p>Note on the <code>main</code> function: In C++, a function declared with an empty parameter list accepts no arguments, so there is no need to put a <code>void</code> there.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#ab-problem","title":"A+B problem","text":"C:   <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  int a, b;\n  scanf(\"%d%d\", &amp;a, &amp;b);\n  printf(\"a + b = %d\\n\", a + b);\n  return 0;\n}\n</code></pre>   C++:   <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int a, b;\n  std::cin &gt;&gt; a &gt;&gt; b;\n  std::cout &lt;&lt; \"a + b = \" &lt;&lt; a + b\n            &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <ul> <li>For input: There is no need to take the address of <code>a</code> and <code>b</code>! C++ has a way to obtain the reference of the argument.</li> <li>There is no need to write <code>%d</code>! C++ has a way of identifying the type of the argument, and will select the correct way to handle that type.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#iostream-input-and-output-stream","title":"IOStream: Input and Output Stream","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int a, b;\n  std::cin &gt;&gt; a &gt;&gt; b;\n  std::cout &lt;&lt; \"a + b = \" &lt;&lt; a + b &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <p><code>std::cin</code> and <code>std::cout</code>: two objects defined in the standard library file <code>&lt;iostream&gt;</code>.</p> <ul> <li>They are not functions.</li> <li>The input and output \"functions\" are actually the operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code>, which are overloaded to do something different from bit shifting.</li> <li>We will learn about operator overloading in later lectures.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#iostream-input-and-output-stream_1","title":"IOStream: Input and Output Stream","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n  int a, b;\n  std::cin &gt;&gt; a &gt;&gt; b;\n  std::cout &lt;&lt; \"a + b = \" &lt;&lt; a + b &lt;&lt; '\\n';\n  return 0;\n}\n</code></pre> <p><code>std::cin</code> and <code>std::cout</code>: two objects defined in the standard library file <code>&lt;iostream&gt;</code>.</p> <ul> <li><code>std::cin</code> stands for standard input stream. <code>std::cout</code> stands for the standard output stream.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#iostream-input-and-output-stream_2","title":"IOStream: Input and Output Stream","text":"<p><code>std::cin &gt;&gt; x</code>: Reads something and stores it in the variable <code>x</code>.</p> <ul> <li><code>x</code> can be of any supported type: integers, floating-points, characters, strings, ...</li> <li>C++ has a way of identifying the type of <code>x</code> and selecting the correct way to read it. We don't need the annoying <code>\"%d\"</code>, <code>\"%f\"</code>, ... anymore.</li> <li>C++ functions have a way of obtaining the reference of the argument. We don't need to take the address of <code>x</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#iostream-input-and-output-stream_3","title":"IOStream: Input and Output Stream","text":"<ul> <li><code>std::cin &gt;&gt; x</code> returns <code>std::cin</code>, so we can write several reads in a chained way:</li> <li> <p><code>std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; z</code> is equivalent to <code>((std::cin &gt;&gt; x) &gt;&gt; y) &gt;&gt; z</code>, which is equivalent to</p> <p><code>cpp std::cin &gt;&gt; x; std::cin &gt;&gt; y; std::cin &gt;&gt; z;</code>   - Similarly, outputs can also be chained: <code>std::cout &lt;&lt; x &lt;&lt; y &lt;&lt; z</code> is equivalent to</p> <p><code>cpp std::cout &lt;&lt; x; std::cout &lt;&lt; y; std::cout &lt;&lt; z;</code></p> </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#standard-library","title":"Standard library","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#standard-library-file-names","title":"Standard library file names","text":"<p>The names of C++ standard library files have no extensions: <code>&lt;iostream&gt;</code> instead of <code>&lt;iostream.h&gt;</code>, <code>&lt;string&gt;</code> instead of <code>&lt;string.h&gt;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#namespace-std","title":"Namespace <code>std</code>","text":"<p><code>std::cin</code> and <code>std::cout</code>: names from the standard library.</p> <p>C++ has a large standard library with a lot of names declared.</p> <p>To avoid name collisions, all the names from the standard library are placed in a namespace named <code>std</code>.</p> <ul> <li>Example of name collisions in C: Suppose we want to write our own quick-sort:</li> </ul> <p><code>c   #include &lt;stdlib.h&gt;   void qsort(int *a, int n) { // Ooops! stdlib already has one named `qsort`.     // ...   }</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#namespace-std_1","title":"Namespace <code>std</code>","text":"<p><code>std::cin</code> and <code>std::cout</code>: names from the standard library.</p> <p>C++ has a large standard library with a lot of names declared.</p> <p>To avoid name collisions, all the names from the standard library are placed in a namespace named <code>std</code>.</p> <ul> <li>You can write <code>using std::cin;</code> to introduce <code>std::cin</code> into the current scope, so that <code>cin</code> can be used without <code>std::</code>.</li> <li>You may write <code>using namespace std;</code> to introduce all the names in <code>std</code> into the current scope, but you will be at the risk of name collisions again.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#compatibility-with-c-standard-library","title":"Compatibility with C standard library","text":"<p>The C++ standard library has everything from the C standard library, but not exactly the same as in C.</p> <ul> <li>For some historical issues, C has many awkward designs and weird defaults, some of which are not compatible in C++.</li> <li>The C++ version of a C standard library file <code>&lt;xxx.h&gt;</code> is <code>&lt;cxxx&gt;</code>, with all the names also introduced into <code>namespace std</code>.</li> </ul> <pre><code>#include &lt;cstdio&gt;\nint main() {\n  int a, b; std::scanf(\"%d%d\", &amp;a, &amp;b);\n  std::printf(\"%d\\n\", a + b);\n}\n</code></pre> <p>[Best practice] Use <code>&lt;cxxx&gt;</code> instead of <code>&lt;xxx.h&gt;</code> when you need the C standard library in C++.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#stdstring","title":"<code>std::string</code>","text":"<p>Defined in the standard library file <code>&lt;string&gt;</code> (not <code>&lt;string.h&gt;</code>, not <code>&lt;cstring&gt;</code>!!)</p> <p>The string.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#define-and-initialize-a-string","title":"Define and initialize a string","text":"<pre><code>std::string str = \"Hello world\";\n// equivalent: std::string str(\"Hello world\");\n// equivalent: std::string str{\"Hello world\"}; (modern)\nstd::cout &lt;&lt; str &lt;&lt; std::endl;\n\nstd::string s1(7, 'a');\nstd::cout &lt;&lt; s1 &lt;&lt; std::endl; // aaaaaaa\n\nstd::string s2 = s1; // s2 is a copy of s1\nstd::cout &lt;&lt; s2 &lt;&lt; std::endl; // aaaaaaa\n\nstd::string s; // \"\" (empty string)\n</code></pre> <p>Default-initialization of a <code>std::string</code> will produce an empty string, not indeterminate value and has no undefined behaviors!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#strings","title":"Strings","text":"<ul> <li>The memory of <code>std::string</code> is allocated and deallocated automatically.</li> <li>We can insert or erase characters in a <code>std::string</code>. The memory of storage will be adjusted automatically.</li> <li><code>std::string</code> does not need an explicit <code>'\\0'</code> at the end. It has its way of recognizing the end.</li> <li>When you use <code>std::string</code>, pay attention to its contents instead of the implementation details.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#length-of-a-string","title":"Length of a string","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#member-function-ssize","title":"Member function <code>s.size()</code>","text":"<pre><code>std::string str{\"Hello world\"};\nstd::cout &lt;&lt; str.size() &lt;&lt; std::endl;\n</code></pre> <p>Not <code>strlen</code>, not <code>sizeof</code>!!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#member-function-sempty","title":"Member function <code>s.empty()</code>","text":"<pre><code>if (str.empty()) {\n  // ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#concatenation-of-strings","title":"Concatenation of strings","text":"<p>Use <code>+</code> and <code>+=</code> directly!</p> <ul> <li>No need to care about the memory allocation.</li> <li>No awkward functions like <code>strcat</code>.</li> </ul> <pre><code>std::string s1 = \"Hello\";\nstd::string s2 = \"world\";\nstd::string s3 = s1 + ' ' + s2; // \"Hello world\"\ns1 += s2; // s1 becomes \"Helloworld\"\ns2 += \"C++string\"; // s2 becomes \"worldC++string\"\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#concatenation-of-strings_1","title":"Concatenation of strings","text":"<p>At least one operand of <code>+</code> should be <code>std::string</code>.</p> <pre><code>const char *old_bad_ugly_C_style_string = \"hello\";\nstd::string good_beautiful_Cpp_string = \"hello\";\n\nstd::string s1 = good_beautiful_Cpp_string + \"aaaaa\"; // OK.\nstd::string s2 = \"aaaaa\" + good_beautiful_Cpp_string; // OK.\nstd::string s3 = old_bad_ugly_C_style_string + \"aaaaa\"; // Error\n</code></pre> <p>Is this ok?</p> <pre><code>std::string hello{\"hello\"};\nstd::string s = hello + \"world\" + \"C++\";\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#concatenation-of-strings_2","title":"Concatenation of strings","text":"<p>At least one operand of <code>+</code> should be <code>std::string</code>.</p> <pre><code>const char *old_bad_ugly_C_style_string = \"hello\";\nstd::string good_beautiful_Cpp_string = \"hello\";\n\nstd::string s1 = good_beautiful_Cpp_string + \"aaaaa\"; // OK.\nstd::string s2 = \"aaaaa\" + good_beautiful_Cpp_string; // OK.\nstd::string s3 = old_bad_ugly_C_style_string + \"aaaaa\"; // Error\n</code></pre> <p>Is this ok?</p> <pre><code>std::string hello{\"hello\"};\nstd::string s = hello + \"world\" + \"C++\";\n</code></pre> <p>Yes! <code>+</code> is left-associated. <code>(hello + \"world\")</code> is of type <code>std::string</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#use","title":"Use <code>+=</code>","text":"<p>In C, <code>a = a + b</code> is equivalent to <code>a += b</code>. This is not always true in C++.</p> <p>For two <code>std::string</code>s <code>s1</code> and <code>s2</code>, <code>s1 = s1 + s2</code> is different from <code>s1 += s2</code>.</p> <ul> <li><code>s1 = s1 + s2</code> constructs a temporary object <code>s1 + s2</code> (so that the contents of <code>s1</code> are copied), and then assigns it to <code>s1</code>.</li> <li><code>s1 += s2</code> appends <code>s2</code> directly to the end of <code>s1</code>, without copying <code>s1</code>.</li> </ul> <p>Try these with <code>n = 1000000</code>:</p> <pre><code>std::string result;\nfor (int i = 0; i != n; ++i)\n  result += 'a'; // Fast\n</code></pre> <pre><code>std::string result;\nfor (int i = 0; i != n; ++i)\n  result = result + 'a'; // Very slow\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#lexicographical-comparison-of-strings","title":"Lexicographical comparison of strings","text":"<p>Just use <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>!</p> <ul> <li>No loops. No weird functions like <code>strcmp</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#copying-a-string","title":"Copying a string","text":"<p>Just use <code>=</code>!</p> <pre><code>std::string s1{\"Hello\"};\nstd::string s2{\"world\"};\ns2 = s1; // s2 is a copy of s1\ns1 += 'a'; // s2 is still \"Hello\"\n</code></pre> <p>The copy assignment operator of <code>std::string</code> will copy the contents of it.</p> <p>\\(\\Rightarrow\\) We will learn about copy assignment operators in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#string-io","title":"String IO","text":"<p>Use <code>std::cin &gt;&gt; s</code> and <code>std::cout &lt;&lt; s</code>, as simple as handling an integer.</p> <ul> <li>Does <code>std::cin &gt;&gt; s</code> ignore leading whitespaces? Does it read an entire line or just a sequence of non-whitespace characters? Do some experiments on it.</li> </ul> <p><code>std::getline(std::cin, s)</code>: Reads a string starting from the current character, and stops at the first <code>'\\n'</code>.</p> <ul> <li>Is the ending <code>'\\n'</code> consumed? Is it stored? Do some experiments.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#traversing-a-string-use-range-based-for-loops","title":"Traversing a string: Use range-based <code>for</code> loops.","text":"<p>Example: Print all the uppercase letters in a string.</p> <pre><code>for (char c : s) // The range-based for loops\n  if (std::isupper(c)) // in &lt;cctype&gt;\n    std::cout &lt;&lt; c;\nstd::cout &lt;&lt; std::endl;\n</code></pre> <p>Equivalent way: Use subscripts, which is verbose and inconvenient.</p> <pre><code>for (std::size_t i = 0; i != s.size(); ++i)\n  if (std::isupper(s[i]))\n    std::cout &lt;&lt; s[i];\nstd::cout &lt;&lt; std::endl;\n</code></pre> <p>[Best practice] Use range-based <code>for</code> loops. They are modern, clear, simple, generic, and hence more recommended.</p> <p>\\(\\Rightarrow\\) More about range-based <code>for</code> loops in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#conversion-between-strings-and-arithmetic-numbers","title":"Conversion between strings and arithmetic numbers","text":"<p>For a number <code>x</code> of any arithmetic type, <code>std::to_string(x)</code> returns a string representing it.</p> <pre><code>int ival = 42;\ndouble dval = 3.14;\nstd::string s = std::to_string(ival) + std::to_string(dval);\nstd::cout &lt;&lt; s &lt;&lt; '\\n'; // Possible output: 423.140000\n</code></pre> <p><code>std::stoi(s)</code>, <code>std::stol(s)</code>, ...: Extracts the arithmetic value represented by <code>s</code>.</p> <p>See this list.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#summary","title":"Summary","text":"<ul> <li>IO: Use <code>&lt;iostream&gt;</code>, <code>std::cin &gt;&gt; x &gt;&gt; y</code>, <code>std::cout &lt;&lt; x &lt;&lt; y</code>.</li> <li>Namespace <code>std</code>.</li> <li>C++ standard library files: names with no extensions.</li> <li>Compatible with C, but use <code>&lt;cxxx&gt;</code> instead of <code>&lt;xxx.h&gt;</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#summary_1","title":"Summary","text":"<p><code>std::string</code></p> <ul> <li>No need for a terminating <code>'\\0'</code>.</li> <li>Automatic memory management.</li> <li><code>s.size()</code> returns the length. <code>s.empty()</code> returns whether <code>s</code> is empty.</li> <li>Use <code>+</code> and <code>+=</code> for concatenation. Use <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code> for comparison. Use <code>=</code> for copying.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l11/l11.html#summary_2","title":"Summary","text":"<p><code>std::string</code></p> <ul> <li>Use <code>&gt;&gt;</code> and <code>&lt;&lt;</code> for IO, as well as <code>std::getline</code>.</li> <li>Use <code>s[i]</code> to access the elements.</li> <li>Use range-based <code>for</code> loops to traverse a string.</li> <li>Use <code>std::to_string</code> and <code>std::stoi</code>, <code>std::stol</code>, ... for numeric conversions.</li> <li>Full list of functions related to <code>std::string</code>: https://en.cppreference.com/w/cpp/string/basic_string</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html","title":"CS100 Lecture 12","text":"<p>References, <code>std::vector</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#contents","title":"Contents","text":"<ul> <li>References</li> <li><code>std::vector</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#references","title":"References","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#declare-a-reference","title":"Declare a reference","text":"<p>A reference defines an alternative name for an object (\"refers to\" that object).</p> <p>Similar to pointers, the type of a reference is <code>ReferredType &amp;</code>, which consists of two things:</p> <ul> <li><code>ReferredType</code> is the type of the object that it refers to, and</li> <li><code>&amp;</code> is the symbol indicating that it is a reference.</li> </ul> <p>Example:</p> <pre><code>int ival = 42;\nint &amp;ri = ival; // `ri` refers to `ival`.\n                // In other words, `ri` is an alternative name for `ival`.\nstd::cout &lt;&lt; ri &lt;&lt; '\\n'; // prints the value of `ival`, which is `42`.\n++ri;           // Same effect as `++ival;`.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#declare-a-reference_1","title":"Declare a reference","text":"<pre><code>int ival = 42;\nint x = ival;              // `x` is another variable.\n++x;                       // This has nothing to do with `ival`.\nstd::cout &lt;&lt; ival &lt;&lt; '\\n'; // 42\nint &amp;ri = ival;            // `ri` is a reference that refers to `ival`.\n++ri;                      // This modification is performed on `ival`.\nstd::cout &lt;&lt; ival &lt;&lt; '\\n'; // 43\n</code></pre> <p>Ordinarily, when we initialize a variable, the value of the initializer is copied into the object we are creating.</p> <p>When we define a reference, instead of copying the initializer's value, we bind the reference to its initializer.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#a-reference-is-an-alias","title":"A reference is an alias","text":"<p>When we define a reference, instead of copying the initializer's value, we bind the reference to its initializer.</p> <pre><code>int ival = 42;\nint &amp;ri = ival;\n++ri;           // Same as `++ival;`.\nri = 50;        // Same as `ival = 50;`.\nint a = ri + 1; // Same as `int a = ival + 1;`.\n</code></pre> <p>After a reference has been defined, all operations on that reference are actually operations on the object to which the reference is bound.</p> <pre><code>ri = a;\n</code></pre> <p>What is the meaning of this?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#a-reference-is-an-alias_1","title":"A reference is an alias","text":"<pre><code>int ival = 42;\nint &amp;ri = ival;\n++ri;           // Same as `++ival;`.\nri = 50;        // Same as `ival = 50;`.\nint a = ri + 1; // Same as `int a = ival + 1;`.\n</code></pre> <p>When we define a reference, instead of copying the initializer's value, we bind the reference to its initializer.</p> <p>After a reference has been defined, all operations on that reference are actually operations on the object to which the reference is bound.</p> <pre><code>ri = a;\n</code></pre> <ul> <li>This is the same as <code>ival = a;</code>. It is not rebinding <code>ri</code> to refer to <code>a</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#a-reference-must-be-initialized","title":"A reference must be initialized","text":"<pre><code>ri = a;\n</code></pre> <ul> <li>This is the same as <code>ival = a;</code>. It is not rebinding <code>ri</code> to refer to <code>a</code>.</li> </ul> <p>Once initialized, a reference remains bound to its initial object. There is no way to rebind a reference to refer to a different object.</p> <p>Therefore, references must be initialized.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#references-must-be-bound-to-existing-objects-lvalues","title":"References must be bound to existing objects (\"lvalues\")","text":"<p>It is not allowed to bind a reference to temporary objects or literals \\({}^{\\textcolor{red}{1}}\\):</p> <pre><code>int &amp;r1 = 42;    // Error: binding a reference to a literal\nint &amp;r2 = 2 + 3; // Error: binding a reference to a temporary object\nint a = 10, b = 15;\nint &amp;r3 = a + b; // Error: binding a reference to a temporary object\n</code></pre> <p>In fact, the references we learn today are \"lvalue references\", which must be bound to lvalues. We will talk about value categories in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#references-are-not-objects","title":"References are not objects","text":"<p>A reference is an alias. It is only an alternative name of another object, but the reference itself is not an object.</p> <p>Therefore, there are no \"references to references\".</p> <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp; &amp;rr = ri; // Error! No such thing!\n</code></pre> <p>What is the meaning of this code? Does it compile?</p> <pre><code>int &amp;ri2 = ri;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#references-are-not-objects_1","title":"References are not objects","text":"<p>A reference is an alias. It is only an alternative name of another object, but the reference itself is not an object.</p> <p>Therefore, there are no \"references to references\".</p> <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp; &amp;rr = ri; // Error! No such thing!\n</code></pre> <p>What is the meaning of this code? Does it compile?</p> <pre><code>int &amp;ri2 = ri; // Same as `int &amp;ri2 = ival;`.\n</code></pre> <ul> <li><code>ri2</code> is a reference that is bound to <code>ival</code>.</li> <li>Any use of a reference is actually using the object that it is bound to!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#references-are-not-objects_2","title":"References are not objects","text":"<p>A reference is an alias. It is only an alternative name of another object, but the reference itself is not an object.</p> <p>Pointers must also point to objects. Therefore, there are no \"pointers to references\".</p> <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp;*pr = &amp;ri; // Error! No such thing!\n</code></pre> <p>What is the meaning of this code? Does it compile?</p> <pre><code>int *pi = &amp;ri;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#references-are-not-objects_3","title":"References are not objects","text":"<p>A reference is an alias. It is only an alternative name of another object, but the reference itself is not an object.</p> <p>Pointers must also point to objects. Therefore, there are no \"pointers to references\".</p> <pre><code>int ival = 42;\nint &amp;ri = ival; // binding `ri` to `ival`.\nint &amp;*pr = ri; // Error! No such thing!\n</code></pre> <p>What is the meaning of this code? Does it compile?</p> <pre><code>int *pi = &amp;ri; // Same as `int *pi = &amp;ival;`.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#reference-declaration","title":"Reference declaration","text":"<p>Similar to pointers, the ampersand <code>&amp;</code> only applies to one identifier.</p> <pre><code>int ival = 42, &amp;ri = ival, *pi = &amp;ival;\n// `ri` is a reference of type `int &amp;`, which is bound to `ival`.\n// `pi` is a pointer of type `int *`, which points to `ival`.\n</code></pre> <p>Placing the ampersand near the referred type does not make a difference:</p> <pre><code>int&amp; x = ival, y = ival, z = ival;\n// Only `x` is a reference. `y` and `z` are of type `int`.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#and","title":"<code>*</code> and <code>&amp;</code>","text":"<p>Both symbols have many identities!</p> <ul> <li>In a declaration like <code>Type *x = expr</code>, <code>*</code> is a part of the pointer type <code>Type *</code>.</li> <li>In a declaration like <code>Type &amp;r = expr</code>, <code>&amp;</code> is a part of the reference type <code>Type &amp;</code>.</li> <li>In an expression like <code>*opnd</code> where there is only one operand, <code>*</code> is the dereference operator.</li> <li>In an expression like <code>&amp;opnd</code> where there is only one operand, <code>&amp;</code> is the address-of operator.</li> <li>In an expression like <code>a * b</code> where there are two operands, <code>*</code> is the multiplication operator.</li> <li>In an expression like <code>a &amp; b</code> where there are two operands, <code>&amp;</code> is the bitwise-and operator.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-use-references-in-range-for","title":"Example: Use references in range-<code>for</code>","text":"<p>Recall the range-based <code>for</code> loops (range-<code>for</code>):</p> <pre><code>std::string str;\nstd::cin &gt;&gt; str;\nint lower_cnt = 0;\nfor (char c : str)\n  if (std::islower(c))\n    ++lower_cnt;\nstd::cout &lt;&lt; \"There are \" &lt;&lt; lower_cnt &lt;&lt; \" lowercase letters in total.\\n\";\n</code></pre> <p>The range-<code>for</code> loop in the code above traverses the string, and declares and initializes the variable <code>c</code> in each iteration as if \\({}^{\\textcolor{red}{2}}\\)</p> <pre><code>for (std::size_t i = 0; i != str.size(); ++i) {\n  char c = str[i]; // Look at this!\n  if (std::islower(c))\n    ++lower_cnt;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-use-references-in-range-for_1","title":"Example: Use references in range-<code>for</code>","text":"<pre><code>for (char c : str)\n  // ...\n</code></pre> <p>The range-<code>for</code> loop in the code above traverses the string, and declares and initializes the variable <code>c</code> in each iteration as if \\({}^{\\textcolor{red}{2}}\\)</p> <pre><code>for (std::size_t i = 0; i != str.size(); ++i) {\n  char c = str[i];\n  // ...\n}\n</code></pre> <p>Here <code>c</code> is a copy of <code>str[i]</code>. Therefore, modification on <code>c</code> does not affect the contents in <code>str</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-use-references-in-range-for_2","title":"Example: Use references in range-<code>for</code>","text":"<p>What if we want to change all lowercase letters to their uppercase forms?</p> <pre><code>for (char c : str)\n  c = std::toupper(c); // This has no effect.\n</code></pre> <p>We need to declare <code>c</code> as a reference.</p> <pre><code>for (char &amp;c : str)\n  c = std::toupper(c);\n</code></pre> <p>This is the same as</p> <pre><code>for (std::size_t i = 0; i != str.size(); ++i) {\n  char &amp;c = str[i];\n  c = std::toupper(c); // Same as `str[i] = std::toupper(str[i]);`.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const","title":"Example: Pass by reference-to-<code>const</code>","text":"<p>Write a function that accepts a string and returns the number of lowercase letters in it:</p> <pre><code>int count_lowercase(std::string str) {\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <p>To call this function:</p> <pre><code>int result = count_lowercase(my_string);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const_1","title":"Example: Pass by reference-to-<code>const</code>","text":"<pre><code>int count_lowercase(std::string str) {\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <pre><code>int result = count_lowercase(my_string);\n</code></pre> <p>When passing <code>my_string</code> to <code>count_lowercase</code>, the parameter <code>str</code> is initialized as if</p> <pre><code>std::string str = my_string;\n</code></pre> <p>The contents of the entire string <code>my_string</code> are copied!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const_2","title":"Example: Pass by reference-to-<code>const</code>","text":"<pre><code>int result = count_lowercase(my_string);\n</code></pre> <p>When passing <code>my_string</code> to <code>count_lowercase</code>, the parameter <code>str</code> is initialized as if</p> <pre><code>std::string str = my_string;\n</code></pre> <p>The contents of the entire string <code>my_string</code> are copied! Is this copy necessary?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const_3","title":"Example: Pass by reference-to-<code>const</code>","text":"<pre><code>int result = count_lowercase(my_string);\n</code></pre> <p>When passing <code>my_string</code> to <code>count_lowercase</code>, the parameter <code>str</code> is initialized as if</p> <pre><code>std::string str = my_string;\n</code></pre> <p>The contents of the entire string <code>my_string</code> are copied! This copy is unnecessary, because <code>count_lowercase</code> is a read-only operation on <code>str</code>.</p> <p>How can we avoid this copy?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const_4","title":"Example: Pass by reference-to-<code>const</code>","text":"<pre><code>int count_lowercase(std::string &amp;str) { // `str` is a reference.\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <pre><code>int result = count_lowercase(my_string);\n</code></pre> <p>When passing <code>my_string</code> to <code>count_lowercase</code>, the parameter <code>str</code> is initialized as if</p> <pre><code>std::string &amp;str = my_string;\n</code></pre> <p>Which is just a reference initialization. No copy is performed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const_5","title":"Example: Pass by reference-to-<code>const</code>","text":"<pre><code>int count_lowercase(std::string &amp;str) { // `str` is a reference.\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <p>However, this has a problem:</p> <pre><code>std::string s1 = something(), s2 = some_other_thing();\nint result = count_lowercase(s1 + s2); // Error: binding reference to\n                                       // a temporary object.\n</code></pre> <p><code>a + b</code> is a temporary object, which <code>str</code> cannot be bound to.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const_6","title":"Example: Pass by reference-to-<code>const</code>","text":"<p>References must be bound to existing objects, not literals or temporaries.</p> <p>There is an exception to this rule: References-to-<code>const</code> can be bound to anything.</p> <pre><code>const int &amp;rci = 42; // OK.\nconst std::string &amp;rcs = a + b; // OK.\n</code></pre> <p><code>rcs</code> is bound to the temporary object returned by <code>a + b</code> as if</p> <pre><code>std::string tmp = a + b;\nconst std::string &amp;rcs = tmp;\n</code></pre> <p>\\(\\Rightarrow\\) We will talk more about references-to-<code>const</code> in recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#example-pass-by-reference-to-const_7","title":"Example: Pass by reference-to-<code>const</code>","text":"<p>The answer:</p> <pre><code>int count_lowercase(const std::string &amp;str) { // `str` is a reference-to-`const`.\n  int cnt = 0;\n  for (char c : str)\n    if (std::islower(c))\n      ++cnt;\n  return cnt;\n}\n</code></pre> <pre><code>std::string a = something(), b = some_other_thing();\nint res1 = count_lowercase(a);       // OK.\nint res2 = count_lowercase(a + b);   // OK.\nint res3 = count_lowercase(\"hello\"); // OK.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#benefits-of-passing-by-reference-to-const","title":"Benefits of passing by reference-to-<code>const</code>","text":"<p>Apart from the fact that it avoids copy, declaring the parameter as a reference-to-<code>const</code> also prevents some potential mistakes:</p> <pre><code>int some_kind_of_counting(const std::string &amp;str, char value) {\n  int cnt = 0;\n  for (std::size_t i = 0; i != str.size(); ++i) {\n    if (str[i] = value) // Ooops! It should be `==`.\n      ++cnt;\n    else {\n      // do something ...\n      // ...\n    }\n  }\n  return cnt;\n}\n</code></pre> <p><code>str[i] = value</code> will trigger a compile-error, because <code>str</code> is a reference-to-<code>const</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#benefits-of-passing-by-reference-to-const_1","title":"Benefits of passing by reference-to-<code>const</code>","text":"<ol> <li>Avoids copy.</li> <li>Accepts temporaries and literals (rvalues).</li> <li>The <code>const</code> qualification prevents accidental modifications to it.</li> </ol> <p>[Best practice] Pass by reference-to-<code>const</code> if copy is not necessary and the parameter should not be modified.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#references-vs-pointers","title":"References vs pointers","text":"A reference  - is not itself an object. It is an alias of the object that it is bound to. - cannot be rebound to another object after initialization. - has no \"default\" or \"zero\" value. It must be bound to an object.      A pointer  - is an object that stores the address of the object it points to. - can switch to point to another object at any time. - can be set to a null pointer value `nullptr`.    <p>Both a reference and a pointer can be used to refer to an object, but references are more convenient - no need to write the annoying <code>*</code> and <code>&amp;</code>.</p> <p>Note: <code>nullptr</code> is the null pointer value in C++. Do not use <code>NULL</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#stdvector","title":"<code>std::vector</code>","text":"<p>Defined in the standard library file <code>&lt;vector&gt;</code>.</p> <p>A \"dynamic array\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#class-template","title":"Class template","text":"<p><code>std::vector</code> is a class template.</p> <p>Class templates are not themselves classes. Instead, they can be thought of as instructions to the compiler for generating classes.</p> <ul> <li>The process that the compiler uses to create classes from the templates is called instantiation.</li> </ul> <p>For <code>std::vector</code>, what kind of class is generated depends on the type of elements we want to store, often called value type. We supply this information inside a pair of angle brackets following the template's name:</p> <pre><code>std::vector&lt;int&gt; v; // `v` is of type `std::vector&lt;int&gt;`\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#create-a-stdvector","title":"Create a <code>std::vector</code>","text":"<p><code>std::vector</code> is not a type itself. It must be combined with some <code>&lt;T&gt;</code> to form a type.</p> <pre><code>std::vector v;               // Error: missing template argument.\nstd::vector&lt;int&gt; vi;         // An empty vector of `int`s.\nstd::vector&lt;std::string&gt; vs; // An empty vector of strings.\nstd::vector&lt;double&gt; vd;      // An empty vector of `double`s.\nstd::vector&lt;std::vector&lt;int&gt;&gt; vvi; // An empty vector of vector of `int`s.\n                                   // \"2-d\" vector.\n</code></pre> <p>What are the types of <code>vi</code>, <code>vs</code> and <code>vvi</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#create-a-stdvector_1","title":"Create a <code>std::vector</code>","text":"<p><code>std::vector</code> is not a type itself. It must be combined with some <code>&lt;T&gt;</code> to form a type.</p> <pre><code>std::vector v;               // Error: missing template argument.\nstd::vector&lt;int&gt; vi;         // An empty vector of `int`s.\nstd::vector&lt;std::string&gt; vs; // An empty vector of strings.\nstd::vector&lt;double&gt; vd;      // An empty vector of `double`s.\nstd::vector&lt;std::vector&lt;int&gt;&gt; vvi; // An empty vector of vector of `int`s.\n                                   // \"2-d\" vector.\n</code></pre> <p>What are the types of <code>vi</code>, <code>vs</code> and <code>vvi</code>?</p> <ul> <li><code>std::vector&lt;int&gt;</code>, <code>std::vector&lt;std::string&gt;</code>, <code>std::vector&lt;std::vector&lt;int&gt;&gt;</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#create-a-stdvector_2","title":"Create a <code>std::vector</code>","text":"<p>There are several common ways of creating a <code>std::vector</code>:</p> <pre><code>std::vector&lt;int&gt; v{2, 3, 5, 7};     // A vector of `int`s,\n                                    // whose elements are {2, 3, 5, 7}.\nstd::vector&lt;int&gt; v2 = {2, 3, 5, 7}; // Equivalent to \u2191\n\nstd::vector&lt;std::string&gt; vs{\"hello\", \"world\"}; // A vector of strings,\n                                    // whose elements are {\"hello\", \"world\"}.\nstd::vector&lt;std::string&gt; vs2 = {\"hello\", \"world\"}; // Equivalent to \u2191\n\nstd::vector&lt;int&gt; v3(10);     // A vector of ten `int`s, all initialized to 0.\nstd::vector&lt;int&gt; v4(10, 42); // A vector of ten `int`s, all initialized to 42.\n</code></pre> <p>Note that all the elements in <code>v3</code> are initialized to <code>0</code>.</p> <ul> <li>We hate uninitialized values, so does the standard library.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#create-a-stdvector_3","title":"Create a <code>std::vector</code>","text":"<p>Create a <code>std::vector</code> as a copy of another one:</p> <pre><code>std::vector&lt;int&gt; v{2, 3, 5, 7};\nstd::vector&lt;int&gt; v2 = v; // `v2`` is a copy of `v`\nstd::vector&lt;int&gt; v3(v);  // Equivalent\nstd::vector&lt;int&gt; v4{v};  // Equivalent\n</code></pre> <p>No need to write a loop!</p> <p>Copy assignment is also enabled:</p> <pre><code>std::vector&lt;int&gt; v1 = something(), v2 = something_else();\nv1 = v2;\n</code></pre> <ul> <li>Element-wise copy is performed automatically.</li> <li>Memory is allocated automatically. The memory used to store the old data of <code>v1</code> is deallocated automatically.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#c17-ctad","title":"C++17 CTAD","text":"<p>\"Class Template Argument Deduction\": As long as enough information is supplied in the initializer, the value type can be deduced automatically by the compiler.</p> <pre><code>std::vector v1{2, 3, 5, 7}; // vector&lt;int&gt;\nstd::vector v2{3.14, 6.28}; // vector&lt;double&gt;\nstd::vector v3(10, 42);     // vector&lt;int&gt;, deduced from 42 (int)\nstd::vector v4(10);         // Error: cannot deduce template argument type\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#size-of-a-stdvector","title":"Size of a <code>std::vector</code>","text":"<p><code>v.size()</code> and <code>v.empty()</code>: same as those on <code>std::string</code>.</p> <pre><code>std::vector v{2, 3, 5, 7};\nstd::cout &lt;&lt; v.size() &lt;&lt; '\\n';\nif (v.empty()) {\n  // ...\n}\n</code></pre> <p><code>v.clear()</code>: Remove all the elements.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#append-an-element-to-the-end-of-a-stdvector","title":"Append an element to the end of a <code>std::vector</code>","text":"<p><code>v.push_back(x)</code></p> <pre><code>int n;\nstd::cin &gt;&gt; n;\nstd::vector&lt;int&gt; v;\nfor (int i = 0; i != n; ++i) {\n  int x;\n  std::cin &gt;&gt; x;\n  v.push_back(x);\n}\nstd::cout &lt;&lt; v.size() &lt;&lt; '\\n'; // n\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#remove-the-last-element-of-a-stdvector","title":"Remove the last element of a <code>std::vector</code>","text":"<p><code>v.pop_back()</code></p> <p>Exercise: Given <code>v</code> of type <code>std::vector&lt;int&gt;</code>, remove all the consecutive even numbers in the end.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#remove-the-last-element-of-a-stdvector_1","title":"Remove the last element of a <code>std::vector</code>","text":"<p><code>v.pop_back()</code></p> <p>Exercise: Given <code>v</code> of type <code>std::vector&lt;int&gt;</code>, remove all the consecutive even numbers in the end.</p> <pre><code>while (!v.empty() &amp;&amp; v.back() % 2 == 0)\n  v.pop_back();\n</code></pre> <p><code>v.back()</code>: returns the reference to the last element.</p> <ul> <li>How is it different from \"returning the value of the last element\"?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#vback-and-vfront","title":"<code>v.back()</code> and <code>v.front()</code>","text":"<p>Return the references to the last and the first elements, respectively.</p> <p>It is a reference, through which we can modify the corresponding element.</p> <pre><code>v.front() = 42;\n++v.back();\n</code></pre> <p>For <code>v.back()</code>, <code>v.front()</code> and <code>v.pop_back()</code>, the behavior is undefined if <code>v</code> is empty. They do not perform any bounds checking.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#range-based-for-loops","title":"Range-based <code>for</code> loops","text":"<p>A <code>std::vector</code> can also be traversed using a range-based <code>for</code> loop.</p> <pre><code>std::vector&lt;int&gt; vi = some_values();\nfor (int x : vi)\n  std::cout &lt;&lt; x &lt;&lt; std::endl;\nstd::vector&lt;std::string&gt; vs = some_strings();\nfor (const std::string &amp;s : vs) // use reference-to-const to avoid copy\n  std::cout &lt;&lt; s &lt;&lt; std::endl;\n</code></pre> <p>Exercise: Use range-based <code>for</code> loops to count the number of uppercase letters in a <code>std::vector&lt;std::string&gt;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#range-based-for-loops_1","title":"Range-based <code>for</code> loops","text":"<p>Exercise: Use range-based <code>for</code> loops to count the number of uppercase letters in a <code>std::vector&lt;std::string&gt;</code>.</p> <pre><code>int cnt = 0;\nfor (const std::string &amp;s : vs) { // Use reference-to-const to avoid copy\n  for (char c : s) {\n    if (std::isupper(c))\n      ++cnt;\n  }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#access-through-subscripts","title":"Access through subscripts","text":"<p><code>v[i]</code> returns the reference to the element indexed <code>i</code>.</p> <ul> <li><code>i</code> \\(\\in[0,N)\\), where \\(N=\\) <code>v.size()</code>.</li> <li>Subscript out of range is undefined behavior. <code>v[i]</code> performs no bounds checking.</li> <li>In pursuit of efficiency, most operations on standard library containers do not perform bounds checking.</li> <li>A kind of \"subscript\" that has bounds checking: <code>v.at(i)</code>.</li> <li>If <code>i</code> is out of range, a <code>std::out_of_range</code> exception is thrown.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#feel-the-style-of-stl","title":"Feel the style of STL","text":"<p>Basic and low-level operations are performed automatically:</p> <ul> <li>Default initialization of <code>std::string</code> and <code>std::vector</code> results in an empty string / container, not indeterminate values.</li> <li>Copy of <code>std::string</code> and <code>std::vector</code> is done automatically, which performs member-wise copy.</li> <li>Memory management is done automatically.</li> </ul> <p>Interfaces are consistent:</p> <ul> <li><code>std::string</code> also has member functions like <code>.push_back(x)</code>, <code>.pop_back()</code>, <code>.at(i)</code>, <code>.size()</code>, <code>.clear()</code>, etc. which do the same things as on <code>std::vector</code>.</li> <li>Both can be traversed by range-<code>for</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#summary","title":"Summary","text":"<p>References</p> <ul> <li>A reference is an alias.</li> <li>A reference is bound to an object during initialization. After that, any use of that reference is actually using the object it is bound to.</li> <li>A reference can only be bound to existing objects (lvalues). A pointer can only point to existing objects.</li> <li>But a reference-to-<code>const</code> can be bound to anything.</li> <li>Pass arguments by reference-to-<code>const</code>: avoids copy, accepts both lvalues and rvalues, and prevents accidental modification on what should not be modified.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#summary_1","title":"Summary","text":"<p><code>std::vector</code></p> <ul> <li><code>std::vector</code> is not a type. It must be combined with some <code>&lt;T&gt;</code> to form a type.</li> <li>Many ways of creation.</li> <li>Copy of a <code>std::vector</code> performs member-wise copy.</li> <li><code>v.size</code>, <code>v.empty</code>, <code>v.push_back</code>, <code>v.pop_back</code>, <code>v.clear</code>, <code>v[i]</code>, <code>v.at(i)</code>.</li> <li>Use range-<code>for</code> to traverse a <code>std::vector</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#exercises","title":"Exercises","text":"<p>Write the exercises on page 26, 38, 40 and 43 on your own.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l12/l12.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) String literals (<code>\"hello\"</code>) are an exception to this. Integer literals, floating-point literals, character literals, boolean literals and <code>enum</code> items are rvalues, but string literals are lvalues. They do live somewhere in the memory.</p> <p>\\({}^{\\textcolor{red}{2}}\\) In fact, the range-<code>for</code> uses iterators, not subscripts.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html","title":"CS100 Lecture 13","text":"<p>\"C\" in C++</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#contents","title":"Contents","text":"<p>\"C\" in C++</p> <ul> <li>Type System</li> <li>Stronger Type Checking</li> <li>Explicit Casts</li> <li>Type Deduction</li> <li>Functions</li> <li>Default Arguments</li> <li>Function Overloading</li> <li>Range-Based <code>for</code> Loops Revisited</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#better-c","title":"\"Better C\"","text":"<p>C++ was developed based on C.</p> <p>From The Design and Evolution of C++:</p> <p>C++ is a general-purpose programming language that - is a better C, - supports data abstraction, - supports object-oriented programming.</p> <p>C++ brought up new ideas and improvements of C, some of which also in turn influenced the development of C.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#better-c_1","title":"\"Better C\"","text":"<ul> <li><code>bool</code>, <code>true</code> and <code>false</code> are built-in. No need to <code>#include &lt;stdbool.h&gt;</code>. <code>true</code> and <code>false</code> are of type <code>bool</code>, not <code>int</code>.</li> <li>This is also true since C23.</li> <li>The return type of logical operators <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> and comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code> is <code>bool</code>, not <code>int</code>.</li> <li>The type of string literals <code>\"hello\"</code> is <code>const char [N+1]</code>, not <code>char [N+1]</code>.</li> <li>Recall that string literals are stored in read-only memory. Any attempt to modify them results in undefined behavior.</li> <li>The type of character literals <code>'a'</code> is <code>char</code>, not <code>int</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#better-c_2","title":"\"Better C\"","text":"<ul> <li><code>const</code> variables initialized with literals are compile-time constants. They can be used as the length of arrays.</li> </ul> <p><code>cpp   const int maxn = 1000;   int a[maxn]; // a normal array in C++, but VLA in C</code> - <code>int fun()</code> declares a function accpeting no arguments. It is not accepting unknown arguments.</p> <ul> <li>This is also true since C23.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#type-system","title":"Type System","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#stronger-type-checking","title":"Stronger type checking","text":"<p>Some arithmetic conversions are problematic: They are not value-preserving.</p> <pre><code>int x = some_int_value();\nlong long y = x; // OK. Value-preserving\nlong long z = some_long_long_value();\nint w = z;       // Is this OK?\n</code></pre> <ul> <li>Conversion from <code>int</code> to <code>long long</code> is value-preserving, without doubt.</li> <li>Conversion from <code>long long</code> to <code>int</code> may lose precision. (\"narrowing\")</li> </ul> <p>However, no warning or error is generated for such conversions in C.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#stronger-type-checking_1","title":"Stronger type checking","text":"<p>Some arithmetic conversions are problematic: They are not value-preserving.</p> <pre><code>long long z = some_long_long_value();\nint w = z; // \"narrowing\" conversion\n</code></pre> <p>Stroustrup had decided to ban all implicit narrowing conversions in C++. However,</p> <p>The experiment failed miserably. Every C program I looked at contained large numbers of assignments of <code>int</code>s to <code>char</code> variables. Naturally, since these were working programs, most of these assignments were perfectly safe. That is, either the value was small enough not to become truncated, or the truncation was expected or at least harmless in that particular context.</p> <p>In the end, narrowing conversions are not banned completely in C++. They are not allowed only in a special context in modern C++. We will see it soon.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#stronger-type-checking_2","title":"Stronger type checking","text":"<p>Some type conversions (casts) can be very dangerous:</p> <pre><code>const int x = 42, *pci = &amp;x;\nint *pi = pci; // Warning in C, Error in C++\n++*pi;         // undefined behavior\nchar *pc = pi; // Warning in C, Error in C++\nvoid *pv = pi; char *pc2 = pv; // Even no warning in C! Error in C++.\nint y = pc;    // Warning in C, Error in C++\n</code></pre> <ul> <li>For <code>T</code> \\(\\neq\\) <code>U</code>, <code>T *</code> and <code>U *</code> are different types. Treating a <code>T *</code> as <code>U *</code> leads to undefined behavior in most cases, but the C compiler gives only a warning!</li> <li><code>void *</code> is a hole in the type system. You can cast anything to and from it without even a warning.</li> </ul> <p>C++ does not allow the dangerous type conversions to happen implicitly.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#explicit-casts","title":"Explicit Casts","text":"<p>C++ provides four named cast operators:</p> <ul> <li><code>static_cast&lt;Type&gt;(expr)</code></li> <li><code>const_cast&lt;Type&gt;(expr)</code></li> <li><code>reinterpret_cast&lt;Type&gt;(expr)</code></li> <li><code>dynamic_cast&lt;Type&gt;(expr)</code> \\(\\Rightarrow\\) will be covered in later lectures.</li> </ul> <p>In contrast, the C style explicit cast <code>(Type)expr</code> looks way too innocent.</p> <p>\"An ugly behavior should have an ugly looking.\"</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#const_cast","title":"<code>const_cast</code>","text":"<p>Cast away low-level constness (DANGEROUS):</p> <pre><code>int ival = 42;\nconst int &amp;cref = ival;\nint &amp;ref = cref; // Error: casting away low-level constness\nint &amp;ref2 = const_cast&lt;int &amp;&gt;(cref); // OK\nint *ptr = const_cast&lt;int *&gt;(&amp;cref); // OK\n</code></pre> <p>However, modifying a <code>const</code> object through a non-<code>const</code> access path (possibly formed by <code>const_cast</code>) results in undefined behavior!</p> <pre><code>const int cival = 42;\nint &amp;ref = const_cast&lt;int &amp;&gt;(cival); // compiles, but dangerous\n++ref; // undefined behavior (may crash)\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#reinterpret_cast","title":"<code>reinterpret_cast</code>","text":"<p>Often used to perform conversion between different pointer types (DANGEROUS):</p> <pre><code>int ival = 42;\nchar *pc = reinterpret_cast&lt;char *&gt;(&amp;ival);\n</code></pre> <p>We must never forget that the actual object addressed by <code>pc</code> is an <code>int</code>, not a character! Any use of <code>pc</code> that assumes it's an ordinary character pointer is likely to fail at run time, e.g.:</p> <pre><code>std::string str(pc); // undefined behavior\n</code></pre> <p>Wherever possible, do not use it!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#static_cast","title":"<code>static_cast</code>","text":"<p>Other types of conversions (which often look \"harmless\"):</p> <pre><code>double average = static_cast&lt;double&gt;(sum) / n;\nint pos = static_cast&lt;int&gt;(std::sqrt(n));\n</code></pre> <p>Some typical usage: \\(\\Rightarrow\\) We will talk about them in later lectures.</p> <pre><code>static_cast&lt;std::string &amp;&amp;&gt;(str) // converts to a xvalue\nstatic_cast&lt;Derived *&gt;(base_ptr) // downcast without runtime checking\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#minimize-casting","title":"Minimize casting","text":"<p>[Best practice] Minimize casting. (Effective C++ Item 27)</p> <p>Type systems work as a guard against possible errors: Type mismatch often indicates a logical error.</p> <p>[Best practice] When casting is necessary, prefer C++-style casts to old C-style casts. - With old C-style casts, you can't even tell whether it is dangerous or not!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#type-deduction","title":"Type deduction","text":"<p>C++ is very good at type computations:</p> <pre><code>std::vector v(10, 42);\n</code></pre> <ul> <li>It should be <code>std::vector&lt;int&gt; v(10, 42);</code>, but the compiler can deduce that <code>int</code> from <code>42</code>.</li> </ul> <pre><code>int x = 42; double d = 3.14; std::string s = \"hello\";\nstd::cout &lt;&lt; x &lt;&lt; d &lt;&lt; s;\n</code></pre> <ul> <li>The compiler can detect the types of <code>x</code>, <code>d</code> and <code>s</code> and select the correct printing functions.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#auto","title":"<code>auto</code>","text":"<p>When declaring a variable with an initializer, we can use the keyword <code>auto</code> to let the compiler deduce the type.</p> <pre><code>auto x = 42;    // `int`, because 42 is an `int`.\nauto y = 3.14;  // `double`, because 3.14 is a `double`.\nauto z = x + y; // `double`, because the type of `x + y` is `double`.\nauto m;         // Error: cannot deduce the type. An initializer is needed.\n</code></pre> <p><code>auto</code> can also be used to produce compound types:</p> <pre><code>auto &amp;r = x;        // `int &amp;`, because `x` is an `int`.\nconst auto &amp;rc = r; // `const int &amp;`.\nauto *p = &amp;rc;      // `const int *`, because `&amp;rc` is `const int *`.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#auto_1","title":"<code>auto</code>","text":"<p>What about this?</p> <pre><code>auto str = \"hello\";\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#auto_2","title":"<code>auto</code>","text":"<p>What about this?</p> <pre><code>auto str = \"hello\"; // `const char *`\n</code></pre> <ul> <li>Recall that the type of <code>\"hello\"</code> is <code>const char [6]</code>, not <code>std::string</code>. This is for compatibility with C.</li> <li>When using <code>auto</code>, the array-to-pointer conversion (\"decay\") is performed automatically.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#auto_3","title":"<code>auto</code>","text":"<p>Deduction of return type is also allowed (since C++14):</p> <pre><code>auto sum(int x, int y) {\n  return x + y;\n}\n</code></pre> <ul> <li>The return type is deduced to <code>int</code>.</li> </ul> <p>Since C++20, <code>auto</code> can also be used for function parameters! Such a function is actually a function template.</p> <ul> <li>This is beyond the scope of CS100.</li> </ul> <pre><code>auto sum(auto x, auto y) {\n  return x + y;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#auto_4","title":"<code>auto</code>","text":"<p><code>auto</code> lets us enjoy the benefits of the static type system.</p> <p>Some types in C++ are very long:</p> <pre><code>std::vector&lt;std::string&gt;::const_iterator it = vs.begin();\n</code></pre> <p>Use <code>auto</code> to simplify it:</p> <pre><code>auto it = vs.begin();\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#auto_5","title":"<code>auto</code>","text":"<p><code>auto</code> lets us enjoy the benefits of the static type system.</p> <p>Some types in C++ are not known to anyone but the compiler:</p> <pre><code>auto lam = [](int x, int y) { return x + y; } // A lambda expression.\n</code></pre> <p>Every lambda expression has its own type, whose name is only known by the compiler.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#decltype","title":"<code>decltype</code>","text":"<p><code>decltype(expr)</code> will deduce the type of the expression <code>expr</code> without evaluating it.</p> <pre><code>auto fun(int a, int b) { // The return type is deduced to be `int`.\n  std::cout &lt;&lt; \"fun() is called.\\n\"\n  return a + b;\n}\nint x = 10, y = 15;\ndecltype(fun(x, y)) z; // Same as `int z;`.\n                       // Unlike `auto`, no initializer is required here.\n                       // The type is deduced from the return type of `fun`.\n</code></pre> <ul> <li><code>decltype(fun(x, y))</code> only deduces the return type of <code>fun</code> without actually calling it. Therefore, no output is produced.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#note-on-auto-and-decltype","title":"Note on <code>auto</code> and <code>decltype</code>","text":"<p>The detailed rules of <code>auto</code> and <code>decltype</code> (as well as their differences) are complicated, and require some deeper understanding of C++ types and templates. You don't have to remember them.</p> <p>Learn about them mainly through experiments.</p> <ul> <li>A good IDE should be of great help: Place your mouse on it, and your IDE should tell you the deduction result.</li> </ul> <p> </p> <p>C23 also has <code>auto</code> type deduction.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#functions","title":"Functions","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#default-arguments","title":"Default arguments","text":"<p>Some functions have parameters that are given a particular value in most, but not all, calls. In such cases, we can declare that common value as a default argument.</p> <pre><code>std::string get_screen(std::size_t height = 24, std::size_t width = 80,\n                       char background = ' ');\n</code></pre> <ul> <li>By default, the screen is \\(24\\times 80\\) filled with <code>' '</code>.</li> </ul> <p><code>cpp   auto default_screen = get_screen();</code></p> <ul> <li>To override the default arguments:</li> </ul> <p><code>cpp   auto large_screen   = get_screen(66);           // 66x80, filled with ' '   auto larger_screen  = get_screen(66, 256);      // 66x256, filled with ' '   auto special_screen = get_screen(66, 256, '#'); // 66x256, filled with '#'</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#default-arguments_1","title":"Default arguments","text":"<p>Arguments in the call are resolved by position.</p> <pre><code>auto scr = get_screen('#'); // Passing the ASCII value of '#' to `height`.\n                            // `width` and `background` are set to\n                            // default values (`80` and `' '`).\n</code></pre> <ul> <li>Some other languages have named parameters:</li> </ul> <p><code>python   print(a, b, sep=\", \", end=\"\") # Python</code></p> <p>There is no such syntax in C++.</p> <p>Default arguments are only allowed for the last (right-most) several parameters:</p> <pre><code>std::string get_screen(std::size_t height = 24, std::size_t width,\n                       char background); // Error.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#function-overloading","title":"Function overloading","text":"<p>In C++, a group of functions can have the same name, as long as they can be differentiated when called.</p> <pre><code>int max(int a, int b) {\n  return a &lt; b ? b : a;\n}\ndouble max(double a, double b) {\n  return a &lt; b ? b : a;\n}\nconst char *max(const char *a, const char *b) {\n  return std::strcmp(a, b) &lt; 0 ? b : a;\n}\n</code></pre> <pre><code>auto x = max(10, 20);           // Calls max(int, int)\nauto y = max(3.14, 2.5);        // Calls max(double, double)\nauto z = max(\"hello\", \"world\"); // Calls max(const char *, const char *)\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#overloaded-functions","title":"Overloaded functions","text":"<p>Overloaded functions should be distinguished in the way they are called.</p> <pre><code>int fun(int);\ndouble fun(int);  // Error: functions that differ only in\n                  // their return type cannot be overloaded.\n</code></pre> <pre><code>void move_cursor(Coord to);\nvoid move_cursor(int r, int c); // OK, differ in the number of arguments\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#overloaded-functions_1","title":"Overloaded functions","text":"<p>Overloaded functions should be distinguished in the way they are called.</p> <ul> <li>The following are declaring the same function. They are not overloading.</li> </ul> <p><code>cpp   void fun(int *);   void fun(int [10]);</code> - The following are the same for an array argument:</p> <p><code>cpp   void fun(int *a);   void fun(int (&amp;a)[10]);   int ival = 42; fun(&amp;ival); // OK, calls fun(int *)   int arr[10];   fun(arr);   // Error: ambiguous call</code></p> <p>Why?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#overloaded-functions_2","title":"Overloaded functions","text":"<p>Overloaded functions should be distinguished in the way they are called.</p> <ul> <li>The following are the same for an array argument:</li> </ul> <p><code>cpp   void fun(int *a);   void fun(int (&amp;a)[10]);   int arr[10];   fun(arr);   // Error: ambiguous call</code></p> <ul> <li>For <code>fun(int (&amp;)[10])</code>, this is an exact match.</li> <li>For <code>fun(int *)</code>, this involves an array-to-pointer implicit conversion. We will see that this is also considered an exact match.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#basic-overload-resolution","title":"Basic overload resolution","text":"<p>Suppose we have the following overloaded functions.</p> <pre><code>void fun(int);\nvoid fun(double);\nvoid fun(int *);\nvoid fun(const int *);\n</code></pre> <p>Which will be the best match for a call <code>fun(a)</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#basic-overload-resolution_1","title":"Basic overload resolution","text":"<p>Suppose we have the following overloaded functions.</p> <pre><code>void fun(int);\nvoid fun(double);\nvoid fun(int *);\nvoid fun(const int *);\n</code></pre>   Obvious: The arguments and the parameters match perfectly.   <pre><code>fun(42);   // fun(int)\nfun(3.14); // fun(double)\nconst int arr[10];\nfun(arr);  // fun(const int *)\n</code></pre>   Not so obvious:   <pre><code>int ival = 42;\n// fun(int *) or fun(const int *)?\nfun(&amp;ival);\nfun('a');   // fun(int) or fun(double)?\nfun(3.14f); // fun(int) or fun(double)?\nfun(NULL);  // fun(int) or fun(int *)?\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#basic-overload-resolution_2","title":"Basic overload resolution","text":"<pre><code>void fun(int);\nvoid fun(double);\nvoid fun(int *);\nvoid fun(const int *);\n</code></pre> <ul> <li><code>fun(&amp;ival)</code> matches <code>fun(int *)</code></li> <li><code>fun('a')</code> matches <code>fun(int)</code></li> <li><code>fun(3.14f)</code> matches <code>fun(double)</code></li> <li><code>fun(NULL)</code> ? We will see this later.</li> </ul> <p>There are detailed rules that define these behaviors. But our program should avoid such confusing overload sets.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#basic-overload-resolution_3","title":"Basic overload resolution","text":"<ol> <li>An exact match, including the following cases:</li> <li>identical types</li> <li>match through decay of array (or function) type</li> <li>match through top-level <code>const</code> conversion</li> <li>Match through adding low-level <code>const</code></li> <li>Match through integral or floating-point promotion</li> <li>Match through numeric conversion</li> <li>Match through a class-type conversion (in later lectures).</li> </ol> <p>No need to remember all the details. But pay attention to some cases that are very common.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#the-null-pointer","title":"The null pointer","text":"<p><code>NULL</code> is a macro defined in standard library header files. - In C, it may be defined as <code>(void *)0</code>, <code>0</code>, <code>(long)0</code> or other forms.</p> <p>In C++, <code>NULL</code> cannot be <code>(void *)0</code> since the implicit conversion from <code>void *</code> to other pointer types is not allowed. - It is most likely to be an integer literal with value zero. - With the following overload declarations, <code>fun(NULL)</code> may call <code>fun(int)</code> on some platforms, and may be ambiguous on other platforms!</p>       ```cpp     void fun(int);     void fun(int *);     ```             ```cpp     fun(NULL); // May call fun(int),                // or may be ambiguous.     ```"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#better-null-pointer-nullptr","title":"Better null pointer: <code>nullptr</code>","text":"<p>In short, <code>NULL</code> is a \"fake\" pointer.</p> <p>Since C++11, a better null pointer is introduced: <code>nullptr</code> (also available in C23) - <code>nullptr</code> has a unique type <code>std::nullptr_t</code> (defined in <code>&lt;cstddef&gt;</code>), which is neither <code>void *</code> nor an integer. - <code>fun(nullptr)</code> will definitely match <code>fun(int *)</code>.</p>       ```cpp     void fun(int);     void fun(int *);     ```             ```cpp     fun(NULL); // May call fun(int),                // or may be ambiguous.     fun(nullptr); // Calls fun(int *).     ```      <p>[Best practice] Use <code>nullptr</code> as the null pointer constant in C++.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#avoid-abuse-of-function-overloading","title":"Avoid abuse of function overloading","text":"<p>Only overload operations that actually do similar things. A bad example:</p> <pre><code>Screen &amp;moveHome(Screen &amp;);\nScreen &amp;moveAbs(Screen &amp;, int, int);\nScreen &amp;moveRel(Screen &amp;, int, int, std::string direction);\n</code></pre> <p>If we overload this set of functions under the name <code>move</code>, some information is lost.</p> <pre><code>Screen &amp;move(Screen &amp;);\nScreen &amp;move(Screen &amp;, int, int);\nScreen &amp;move(Screen &amp;, int, int, std::string direction);\n</code></pre> <p>Which one is easier to understand?</p> <pre><code>moveHome(scrn); // OK, moves to home.\n</code></pre> <pre><code>move(scrn); // Unclear: How to move?\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#range-based-for-loops-revisited","title":"Range-based <code>for</code> loops revisited","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#range-based-for-loops","title":"Range-based <code>for</code> loops","text":"<p>Traverse a <code>std::string</code></p> <pre><code>int str_to_int(const std::string &amp;str) {\n  int value = 0;\n  for (auto c : str) // char\n    value = value * 10 + c - '0';\n  return value;\n}\n</code></pre> <p>Note: This function can be replaced by <code>std::stol</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#range-based-for-loops_1","title":"Range-based <code>for</code> loops","text":"<p>Traverse a <code>std::vector</code></p> <pre><code>bool is_all_digits(const std::string &amp;str) {\n  for (auto c : str)\n    if (!std::isdigit(c))\n      return false;\n  return true;\n}\nint count_numbers(const std::vector&lt;std::string&gt; &amp;strs) {\n  int cnt = 0;\n  for (const auto &amp;s : strs) // const std::string &amp;s\n    if (is_all_digits(s))\n      ++cnt;\n  return cnt;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#traverse-an-array","title":"Traverse an array","text":"<p>An array can also be traversed by range-<code>for</code>:</p> <pre><code>int arr[100] = {}; // OK in C++ and C23.\n// The following loop will read 100 integers.\nfor (auto &amp;x : arr) // int &amp;\n  std::cin &gt;&gt; x;\n</code></pre> <ul> <li>Note: The range-based <code>for</code> loop will traverse the entire array.</li> </ul> <p>What else can be traversed using a range-<code>for</code>? \\(\\Rightarrow\\) We will learn about this when introducing iterators.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#pass-an-array-by-reference","title":"Pass an array by reference","text":"<pre><code>void print(int *arr) {\n  for (auto x : arr) // Error: `arr` is a pointer, not an array.\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>We can declare <code>arr</code> to be a reference to array:</p> <pre><code>void print(const int (&amp;arr)[100]) {\n  for (auto x : arr) // OK. `arr` is an array.\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre> <ul> <li><code>arr</code> is of type <code>const int (&amp;)[100]</code>: a reference to an array of <code>100</code> elements, where each element is of type <code>const int</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#pass-an-array-by-reference_1","title":"Pass an array by reference","text":"<p>We can declare <code>arr</code> to be a reference to array:</p> <pre><code>void print(const int (&amp;arr)[100]) {\n  for (auto x : arr) // OK. `arr` is an array.\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre> <ul> <li><code>arr</code> is of type <code>const int (&amp;)[100]</code>: a reference to an array of <code>100</code> elements, where each element is of type <code>const int</code>.</li> </ul> <p>Note that only arrays of <code>100</code> <code>int</code>s can fit here.</p> <pre><code>int a[100] = {}; print(a); // OK.\nint b[101] = {}; print(b); // Error.\ndouble c[100] = {}; print(c); // Error.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#pass-an-array-by-reference_2","title":"Pass an array by reference","text":"<p>To allow arrays of any type, any length: Use a template function.</p> <pre><code>template &lt;typename Type, std::size_t N&gt;\nvoid print(const Type (&amp;arr)[N]) {\n  for (const auto &amp;x : arr)\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>We will learn about this in the end of this semester.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#summary","title":"Summary","text":"<p>Type system</p> <ul> <li>Dangerous casts must happen explicitly: pointers of different types, pointers to integers, casting away low-level <code>const</code>ness, ...</li> <li><code>const_cast</code>: used for casting away low-level <code>const</code>ness.</li> <li><code>reinterpret_cast</code>: used for conversion between different pointer types.</li> <li><code>static_cast</code>: used for some normal \"innocent-looking\" conversions: <code>int</code> to <code>double</code>, <code>unsigned</code> to <code>int</code>, ...</li> <li>Prefer the C++-style named casts to old C-style casts.</li> <li><code>auto</code> and <code>decltype</code>: type deduction</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l13/l13.html#summary_1","title":"Summary","text":"<p>Functions</p> <ul> <li>Default arguments: used for setting defaults for some parameters.</li> <li>Function overloading: a group of functions with the same name but can be distinguished in the way they are called.</li> </ul> <p>Range-based <code>for</code> loops</p> <ul> <li>can also be used to traverse arrays.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html","title":"CS100 Lecture 14","text":"<p>Class Basics I</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#contents","title":"Contents","text":"<p>Class basics</p> <ul> <li>Members of a class</li> <li>Access</li> <li>The <code>this</code> pointer</li> <li>Constructors</li> <li>Constructor initializer list</li> <li>Default constructors</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#members-of-a-class","title":"Members of a class","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#a-simple-class","title":"A simple <code>class</code>","text":"<p>The initial idea: A <code>class</code> is a new kind of <code>struct</code> that can have member functions:</p> <pre><code>class Student {\n  std::string name; \n  std::string id;\n  int entranceYear;\n  void setName(const std::string &amp;newName) {\n    name = newName;\n  }\n  void printInfo() const {\n    std::cout &lt;&lt; \"I am \" &lt;&lt; name &lt;&lt; \", id \" &lt;&lt; id  \n              &lt;&lt; \", entrance year: \" &lt;&lt; entranceYear &lt;&lt; std::endl;\n  }\n  bool graduated(int year) const {\n    return year - entranceYear &gt;= 4; \n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#member-access","title":"Member access","text":"<p>Member access: <code>a.mem</code>, where <code>a</code> is an object of the class type.</p> <ul> <li>Every member \\({}^{\\textcolor{red}{1}}\\) belongs to an object: each student has a name, id, entrance year, etc.</li> <li>You need to specify whose name / id / ... you want to obtain.</li> </ul> <p>To call a member function on an object: <code>a.memfun(args)</code>.</p> <pre><code>Student s = someValue();\ns.printInfo(); // call its printInfo() to print related info  \nif (s.graduated(2023)) {\n  // ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#access-control","title":"Access control","text":"<pre><code>class Student {\nprivate:\n  std::string name; \n  std::string id;\n  int entranceYear;\npublic:\n  void setName(const std::string &amp;newName) { name = newName; }\n  void printInfo() const {\n    std::cout &lt;&lt; \"I am \" &lt;&lt; name &lt;&lt; \", id \" &lt;&lt; id  \n              &lt;&lt; \", entrance year: \" &lt;&lt; entranceYear &lt;&lt; std::endl;\n  }\n  bool graduated(int year) const { return year - entranceYear &gt;= 4; }\n};\n</code></pre> <ul> <li><code>private</code> members: Only accessible to code inside the class and <code>friend</code>s.</li> <li>\\(\\Rightarrow\\) We will introduce <code>friend</code>s in later lectures.</li> <li><code>public</code> members: Accessible to all parts of the program.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#access-control_1","title":"Access control","text":"<pre><code>class Student {\nprivate:\n  std::string name;\n  std::string id; \n  int entranceYear;\n\npublic:\n  void setName(const std::string &amp;newName);\n  void printInfo() const;\n  bool graduated(int year) const;  \n};\n</code></pre> <p>Unlike some other languages (e.g. Java), an access specifier controls the access of all members after it, until the next access specifier or the end of the class definition.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#access-control_2","title":"Access control","text":"<pre><code>class Student {\n// private:\n  std::string name;\n  std::string id; \n  int entranceYear;\npublic:\n  void setName(const std::string &amp;newName);\n  void printInfo() const;\n  bool graduated(int year) const;  \n};\n</code></pre> <p>What if there is a group of members with no access specifier at the beginning? - If it's <code>class</code>, they are <code>private</code>. - If it's <code>struct</code>, they are <code>public</code>.</p> <p>This is one of the only two differences between <code>struct</code> and <code>class</code> in C++.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#the-this-pointer","title":"The <code>this</code> pointer","text":"<pre><code>class Student {\n  // ...  \npublic:\n  bool graduated(int year) const;\n};\n\nStudent s = someValue();\nif (s.graduated(2023))\n  // ...\n</code></pre> <p>How many parameters does <code>graduated</code> have?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#the-this-pointer_1","title":"The <code>this</code> pointer","text":"<pre><code>class Student {\n  // ...\npublic:\n  bool graduated(int year) const; \n};\n\nStudent s = someValue();\nif (s.graduated(2023)) // ...\n</code></pre> <p>How many parameters does <code>graduated</code> have?</p> <ul> <li>Seemingly one, but actually two: <code>s</code> is also information that must be known when calling this function!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#the-this-pointer_2","title":"The <code>this</code> pointer","text":"<pre><code>class Student {\npublic:\n  void setName(const std::string &amp;n) {\n    name = n;\n  }\n\n  bool graduated(int year) const {\n    return year - entranceYear &gt;= 4;\n  }  \n};\n\nStudent s = someValue();\nif (s.graduated(2023)) \n  // ...\ns.setName(\"Alice\");\n</code></pre>   - The code on the left can be viewed as:   <pre><code>void setName\n    (Student *this, const std::string &amp;n) {\n  this-&gt;name = n;\n}\nbool graduated\n    (const Student *this, int year) {\n  return year - this-&gt;entranceYear &gt;= 4;\n}\n\nStudent s = someValue();\nif (graduated(&amp;s, 2023))\n  // ...  \nsetName(&amp;s, \"Alice\");\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#the-this-pointer_3","title":"The <code>this</code> pointer","text":"<p>There is a pointer called <code>this</code> in each member function of class <code>X</code> which has type <code>X *</code> or <code>const X *</code>, pointing to the object on which the member function is called.</p> <p>Inside a member function, access of any member <code>mem</code> is actually <code>this-&gt;mem</code>.</p> <p>We can also write <code>this-&gt;mem</code> explicitly.</p> <pre><code>class Student {\npublic:\n  bool graduated(int year) const {\n    return year - this-&gt;entranceYear &gt;= 4;\n  }\n};\n</code></pre> <p>Many languages have similar constructs, e.g. <code>self</code> in Python. (C++23 has <code>self</code> too!)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#const-member-functions","title":"<code>const</code> member functions","text":"<p>The <code>const</code> keyword after the parameter list and before the function body <code>{</code> is used to declare a <code>const</code> member function. - A <code>const</code> member function cannot modify its data members \\({}^{\\textcolor{red}{2}}\\). - A <code>const</code> member function guarantees that no data member will be modified.   - A non-<code>const</code> member function does not provide such guarantee.   - In a <code>const</code> member function, calling a non-<code>const</code> member function on <code>*this</code> is not allowed. - For a <code>const</code> object, only <code>const</code> member functions can be called on it.</p> <p>[Best practice] If, logically, a member function should not modify the object's state, it should be made a <code>const</code> member function. Otherwise, it cannot be called on <code>const</code> objects.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#const-member-functions-and-the-this-pointer","title":"<code>const</code> member functions and the <code>this</code> pointer","text":"<p>This <code>const</code> is essentially applied to the <code>this</code> pointer: - In <code>const</code> member functions of class <code>X</code>, <code>this</code> has type <code>const X *</code>. - In non-<code>const</code> member functions of class <code>X</code>, <code>this</code> has type <code>X *</code>.</p> <p>If <code>ptr</code> is of type <code>const T *</code>, the expression <code>ptr-&gt;mem</code> is also <code>const</code>-qualified. - Recall that in a member function, access of a member <code>mem</code> is actually <code>this-&gt;mem</code>. - Therefore, <code>mem</code> is also <code>const</code>-qualified in a <code>const</code> member function.</p> <pre><code>class Student {\npublic:\n  void foo() const {\n    name += 'a'; // Error: `name` is `const std::string` in a const member\n                 // function. It cannot be modified.\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#const-member-functions_1","title":"<code>const</code> member functions","text":"<p>Effective C++ Item 3: Use <code>const</code> whenever possible.</p> <p>Decide whether the following member functions need a <code>const</code> qualification:</p> <pre><code>class Student {\n  std::string name, id;\n  int entranceYear;\npublic:\n  const std::string &amp;getName(); // returns the name of the student.\n  const std::string &amp;getID();   // returns the id of the student.\n  bool valid();    // verifies whether the leading four digits in `id`\n                   // is equal to `entranceYear`.\n  void adjustID(); // adjust `id` according to `entranceYear`.\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#const-member-functions_2","title":"<code>const</code> member functions","text":"<p>Effective C++ Item 3: Use <code>const</code> whenever possible.</p> <p>Decide whether the following member functions need a <code>const</code> qualification:</p> <pre><code>class Student {\n  std::string name, id;\n  int entranceYear;\npublic:\n  const std::string &amp;getName() const; // returns the name of the student.\n  const std::string &amp;getID() const;   // returns the id of the student.\n  bool valid() const;    // verifies whether the leading four digits in `id`\n                         // is equal to `entranceYear`.\n  void adjustID(); // adjust `id` according to `entranceYear`.\n};\n</code></pre> <p>The <code>const</code>ness of member functions should be determined logically.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#const-member-functions_3","title":"<code>const</code> member functions","text":"<pre><code>class Student {\n  std::string name, id;\n  int entranceYear;\npublic:\n  const std::string &amp;getName() const { return name; }\n  const std::string &amp;getID() const { return id; }\n  bool valid() const { return id.substr(0, 4) == std::to_string(entranceYear); }\n  void adjustID() { id = std::to_string(entranceYear) + id.substr(4); }\n};\n</code></pre> <p><code>str.substr(pos, len)</code> returns the substring of <code>str</code> starting from the position indexed <code>pos</code> with length <code>len</code>.</p> <ul> <li>If <code>len</code> is not provided, it returns the suffix starting from the position indexed <code>pos</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructors","title":"Constructors","text":"<p>Often abbreviated as \"ctors\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructors_1","title":"Constructors","text":"<p>Constructors define how an object can be initialized.</p> <ul> <li>Constructors are often overloaded, because an object may have multiple reasonable ways of initialization.</li> </ul> <pre><code>class Student {\n  std::string name;\n  std::string id;\n  int entranceYear;\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_, int ey) \n    : name(name_), id(id_), entranceYear(ey) {}\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}   \n};\n\nStudent a(\"Alice\", \"2020123123\", 2020);\nStudent b(\"Bob\", \"2020123124\"); // entranceYear = 2020\nStudent c; // Error: No default constructor. (to be discussed later)\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructors_2","title":"Constructors","text":"<pre><code>class Student {\n  std::string name;\n  std::string id;\n  int entranceYear;\n\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) \n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}\n};\n</code></pre> <ul> <li>The constructor name is the class name: <code>Student</code>.</li> <li>Constructors do not have a return type (not even <code>void</code> \\({}^{\\textcolor{red}{3}}\\)). The constructor body can contain a <code>return;</code> statement, which should not return a value.</li> <li>The function body of this constructor is empty: <code>{}</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructor-initializer-list","title":"Constructor initializer list","text":"<p>Constructors initialize all data members of the object.</p> <p>The initialization of all data members is done before entering the function body.</p> <p>How they are initialized is (partly) determined by the constructor initializer list:</p> <pre><code>class Student {\n  // ...\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) \n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {} \n};\n</code></pre> <p>The initializer list starts with <code>:</code>, and contains initializers for each data member, separated by <code>,</code>. The initializers must be of the form <code>(...)</code> or <code>{...}</code>, not <code>= ...</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#order-of-initialization","title":"Order of initialization","text":"<p>Data members are initialized in order in which they are declared, not the order in the initializer list. - If the initializers appear in an order different from the declaration order, the compiler will generate a warning.</p> <p>Typical mistake: <code>entranceYear</code> is initialized in terms of <code>id</code>, but <code>id</code> is not initialized yet!</p> <pre><code>class Student {\n  std::string name;\n  int entranceYear; // !!!\n  std::string id;\n\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id.substr(0, 4))) {}\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructor-initializer-list_1","title":"Constructor initializer list","text":"<p>Data members are initialized in order in which they are declared, not the order in the initializer list. - If the initializers appear in an order different from the declaration order, the compiler will generate a warning. - For a data member that do not appear in the initializer list:   - If there is an in-class initializer (see next page), it is initialized using the in-class initializer.   - Otherwise, it is default-initialized.</p> <p>What does default-initialization mean for class types? \\(\\Rightarrow\\) To be discussed later.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#in-class-initializers","title":"In-class initializers","text":"<p>A member can have an in-class initializer. It must be in the form <code>{...}</code> or <code>= ...</code>.\\({}^{\\textcolor{red}{4}}\\)</p> <pre><code>class Student {\n  std::string name = \"Alice\";\n  std::string id;\n  int entranceYear{2024}; // equivalent to `int entranceYear = 2024;`.\npublic:\n  Student() {} // `name` is initialized to `\"Alice\"`,\n               // `id` is initialized to an empty string,\n               // and `entranceYear` is initialized to 2024.\n  Student(int ey) : entranceYear(ey) {} // `name` is initialized to `\"Alice\"`,\n                                    // `id` is initialized to an empty string,\n                                    // and `entranceYear` is initialized to `ey`.\n};\n</code></pre> <p>The in-class initializer provides the \"default\" way of initializing a member in this class, as a substitute for default-initialization.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructor-initializer-list_2","title":"Constructor initializer list","text":"<p>Below is a typical way of writing this constructor without an initializer list:</p> <pre><code>class Student {\n  // ...\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) {\n    name = name_;\n    id = id_;\n    entranceYear = std::stoi(id_.substr(0, 4));\n  }\n}; \n</code></pre> <p>How are these members actually initialized in this constructor?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructor-initializer-list_3","title":"Constructor initializer list","text":"<p>Below is a typical way of writing this constructor without an initializer list:</p> <pre><code>class Student {\n  // ...\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_) {\n    name = name_;\n    id = id_;\n    entranceYear = std::stoi(id_.substr(0, 4));\n  }\n}; \n</code></pre> <p>How are these members actually initialized in this constructor?</p> <ul> <li>First, before entering the function body, <code>name</code>, <code>id</code> and <code>entranceYear</code> are default-initialized. <code>name</code> and <code>id</code> are initialized to empty strings.</li> <li>Then, the assignments in the function body take place.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructor-initializer-list_4","title":"Constructor initializer list","text":"<p>[Best practice] Always use an initializer list in a constructor. - Not all types can be default-initialized. Not all types can be assigned to. (Any counterexamples?)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#constructor-initializer-list_5","title":"Constructor initializer list","text":"<p>[Best practice] Always use an initializer list in a constructor.</p> <p>Not all types can be default-initialized. Not all types can be assigned to. - References <code>T &amp;</code> cannot be default-initialized, and cannot be assigned to. - <code>const</code> objects of built-in types cannot be default-initialized. - <code>const</code> objects cannot be assigned to. - A class can choose to allow or disallow default initialization or assignment. It depends on the design. \\(\\Rightarrow\\) See next page.</p> <p>Moreover, if a data member is default-initialized and then assigned when could have been initialized directly, it may lead to low efficiency.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#default-constructors","title":"Default constructors","text":"<p>A special constructor that takes no parameters. - Guess what it's for?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#default-constructors_1","title":"Default Constructors","text":"<p>A special constructor that takes no parameters. - It defines the behavior of default-initialization of objects of that class type, since no arguments need to be passed when calling it.</p> <pre><code>class Point2d {\n  double x, y;\npublic:\n  Point2d() : x(0), y(0) {} // default constructor\n  Point2d(double x_, double y_) : x(x_), y(y_) {}  \n};\n\nPoint2d p1;       // calls default ctor, (0, 0) \nPoint2d p2(3, 4); // calls Point2d(double, double), (3, 4)\nPoint2d p3();     // Is this calling the default ctor?\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#default-constructors_2","title":"Default constructors","text":"<p>A special constructor that takes no parameters. - It defines the behavior of default-initialization of objects of that class type, since no arguments need to be passed when calling it.</p> <pre><code>class Point2d {\n  double x, y;\npublic:\n  Point2d() : x(0), y(0) {} // default constructor\n  Point2d(double x_, double y_) : x(x_), y(y_) {}  \n};\n\nPoint2d p1;       // calls default ctor, (0, 0) \nPoint2d p2(3, 4); // calls Point2d(double, double), (3, 4)\nPoint2d p3();     // Is this calling the default ctor?\n</code></pre> <p>Be careful! <code>p3</code> is a function that takes no parameters and returns <code>Point2d</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#is-a-default-constructor-needed","title":"Is a default constructor needed?","text":"<p>First, if you need to use arrays, you almost certainly need a default constructor:</p> <pre><code>Student s[1000]; // All elements are default-initialized\n                 // by the default constructor.\nStudent s2[1000] = {a, b}; // The first two elements are initialized to\n                           // `a` and `b`. The rest are initialized by the\n                           // default constructor.\n</code></pre> <p>A <code>std::vector</code> does not require that:</p> <pre><code>// In this code, the default constructor of `Student` is not called.\nstd::vector&lt;Student&gt; students;\nfor (auto i = 0; i != n; ++i)\n  students.push_back(some_student());\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#is-a-default-constructor-needed_1","title":"Is a default constructor needed?","text":"<p>If a class has no user-declared constructors, the compiler will try to synthesize a default constructor.</p> <pre><code>class X {}; // No user-declared constructors.\nX x; // OK: calls the compiler-synthesized default constructor\n</code></pre> <p>The synthesized default constructor initializes the data members as follows: - If a data member has an in-class initializer, it is initialized according to the in-class initializer. - Otherwise, default-initialize that member. If it cannot be default-initialized, the compiler will give up -- no default constructor is generated.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#is-a-default-constructor-needed_2","title":"Is a default constructor needed?","text":"<p>If a class has any user-declared constructors but no default constructor, the compiler will not synthesize a default constructor.</p> <p>You may ask for a default constructor with <code>= default;</code>:</p> <pre><code>class Student {\npublic:\n  Student(const std::string &amp;name_, const std::string &amp;id_, int ey)  \n    : name(name_), id(id_), entranceYear(ey) {}\n\n  Student(const std::string &amp;name_, const std::string &amp;id_)\n    : name(name_), id(id_), entranceYear(std::stoi(id_.substr(0, 4))) {}\n\n  Student() = default;\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#is-a-default-constructor-needed_3","title":"Is a default constructor needed?","text":"<p>It depends on the design: - If the class has a default constructor, what should be the behavior of it? Is there a reasonable \"default state\" for your class type?</p> <p>For <code>Student</code>: What is a \"default student\"?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#is-a-default-constructor-needed_4","title":"Is a default constructor needed?","text":"<p>It depends on the design: - If the class has a default constructor, what should be the behavior of it? Is there a reasonable \"default state\" for your class type?</p> <p>For <code>Student</code>: What is a \"default student\"? - There seems to be no such thing as a \"default student\" (in a normal design). Therefore, <code>Student</code> should not have a default constructor.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#is-a-default-constructor-needed_5","title":"Is a default constructor needed?","text":"<p>[Best practice] When in doubt, leave it out. If the class does not have a \"default state\", it should not have a default constructor! - Do not define one arbitrarily or letting it <code>= default</code>. This leads to pitfalls. - Calling the default constructor of something that has no \"default state\" should result in a compile error, instead of being allowed arbitrarily.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#summary","title":"Summary","text":"<p>Members of a class</p> <ul> <li>A class can have data members and member functions.</li> <li>Access control: <code>private</code>, <code>public</code>.</li> <li>One difference between <code>class</code> and <code>struct</code>: Default access.</li> <li>The <code>this</code> pointer: has type <code>X *</code> (<code>const X *</code> in <code>const</code> member functions). It points to the object on which the member function is called.</li> <li><code>const</code> member function: guarantees that no modification will happen.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#summary_1","title":"Summary","text":"<p>The followings hold for all constructors, no matter how they are defined: - A constructor initializes all data members in order in which they are declared. - The initialization of all data members is done before the function body of a constructor is executed.</p> <p>In a constructor, a member is initialized as follows: - If there is an initializer for it in the initializer list, use it. - Otherwise, if it has an in-class initializer, use it. - Otherwise, it is default-initialized. If it cannot be default-initialized, it leads to a compile-error.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#summary_2","title":"Summary","text":"<p>Default constructors</p> <ul> <li>The default constructor defines the behavior of default-initialization.</li> <li>The default constructor is the constructor with an empty parameter list.</li> <li>If we have not defined any constructor, the compiler will try to synthesize a default constructor as if it were defined as <code>ClassName() {}</code>.</li> <li>The compiler may fail to do that if some member has no in-class initializer and is not default-initializable. In that case, the compiler gives up (without giving an error).</li> <li>We can use <code>= default</code> to ask for a synthesized default constructor explicitly.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l14/l14.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) Every non-<code>static</code> member belongs to an object. All data members mentioned in the slides of this lecture are non-<code>static</code>.</p> <p>\\({}^{\\textcolor{red}{2}}\\) A <code>const</code> member function cannot modify its data members, unless that member is marked <code>mutable</code>.</p> <p>\\({}^{\\textcolor{red}{3}}\\) A constructor does not have a return type according to the standard. But it behaves as if its return type is <code>void</code>. Some compilers (such as Clang) may also treat it as if it returns <code>void</code>.</p> <p>\\({}^{\\textcolor{red}{4}}\\) In-class initializers cannot be provided in the form <code>(...)</code>. The parentheses here will be treated as part of a function declaration.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html","title":"CS100 Lecture 15","text":"<p>Constructors, Destructors, Copy Control</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#contents","title":"Contents","text":"<ul> <li>Constructors and destructors</li> <li>Copy control</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#constructors-and-destructors","title":"Constructors and destructors","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#lifetime-of-an-object","title":"Lifetime of an object","text":"**Lifetime** of a local non-`static` object: - Starts on initialization - Ends when control flow goes out of its **scope**.    <pre><code>for (int i = 0; i != n; ++i) {\n  do_something(i);\n  // Lifetime of `s` begins.\n  std::string s = some_string();\n  do_something_else(s, i);\n/* end of lifetime of `s` */ }\n</code></pre> <p>Every time the loop body is executed, <code>s</code> undergoes initialization and destruction. - <code>std::string</code> owns some resources (memory where the characters are stored). - <code>std::string</code> must somehow release that resources (deallocate that memory) at the end of its lifetime.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#lifetime-of-an-object_1","title":"Lifetime of an object","text":"<p>Lifetime of a global object: - Starts on initialization (before the first statement of <code>main</code>) - Ends when the program terminates.</p> <p>Lifetime of a heap-based object: - Starts on initialization: A <code>new</code> expression will do this, but <code>malloc</code> does not! - Ends when it is destroyed: A <code>delete</code> expression will do this, but <code>free</code> does not!</p> <p>\\(\\Rightarrow\\) <code>new</code> / <code>delete</code> expressions are in this week's recitation.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#constructors-and-destructors_1","title":"Constructors and Destructors","text":"<p>Take <code>std::string</code> as an example: - Its initialization (done by its constructors) must allocate some memory for its content. - When it is destroyed, it must somehow deallocate that memory.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#constructors-and-destructors_2","title":"Constructors and Destructors","text":"<p>Take <code>std::string</code> as an example: - Its initialization (done by its constructors) must allocate some memory for its content. - When it is destroyed, it must somehow deallocate that memory.</p> <p>A destructor of a class is the function that is automatically called when an object of that class type is destroyed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#constructors-and-destructors_3","title":"Constructors and Destructors","text":"<p>Syntax: <code>~ClassName() { /* ... */ }</code></p> <pre><code>struct A {\n  A() {\n    std::cout &lt;&lt; 'c';\n  }\n  ~A() {\n    std::cout &lt;&lt; 'd';\n  }\n};\n</code></pre> <pre><code>for (int i = 0; i != 3; ++i) {\n  A a;\n  // do something ...\n}\n</code></pre>   Output:  <pre><code>cdcdcd\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#destructor","title":"Destructor","text":"<p>Called automatically when the object is destroyed! - How can we make use of this property?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#destructor_1","title":"Destructor","text":"<p>Called automatically when the object is destroyed! - How can we make use of this property?</p> <p>We often do some cleanup in a destructor: - If the object owns some resources (e.g. dynamic memory), destructors can be made use of to avoid leaking!</p> <pre><code>class A {\n  SomeResourceHandle resource;\n\npublic:\n  A(/* ... */) : resource(obtain_resource(/* ... */)) {}\n  ~A() {\n    release_resource(resource);\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#example-a-dynamic-array","title":"Example: A dynamic array","text":"<p>Suppose we want to implement a \"dynamic array\": - It looks like a VLA (variable-length array), but it is heap-based, which is safer. - It should take good care of the memory it uses.</p> <p>Expected usage:</p> <pre><code>int n; std::cin &gt;&gt; n;\nDynarray arr(n); // `n` is runtime determined\n                 // `arr` should have allocated memory for `n` `int`s now.\nfor (int i = 0; i != n; ++i) {\n  int x; std::cin &gt;&gt; x;\n  arr.at(i) = x * x; // subscript, looks as if `arr[i] = x * x`\n}\n// ...\n// `arr` should deallocate its memory itself.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-members","title":"Dynarray: members","text":"<ul> <li>It should have a pointer that points to the memory, where elements are stored.</li> <li>It should remember its length.</li> </ul> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n};\n</code></pre> <ul> <li><code>m</code> stands for member.</li> </ul> <p>[Best practice] Make data members <code>private</code>, to achieve good encapsulation.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-constructors","title":"Dynarray: constructors","text":"<ul> <li>We want <code>Dynarray a(n);</code> to construct a <code>Dynarray</code> that contains <code>n</code> elements.</li> <li>To avoid troubles, we want the elements to be value-initialized!<ul> <li>Value-initialization is like \"empty-initialization\" in C. (In this week's recitation.)</li> </ul> </li> <li><code>new int[n]{}</code>: Allocate a block of heap memory that stores <code>n</code> <code>int</code>s, and value-initialize them.</li> <li>Do we need a default constructor?</li> <li>Review: What is a default constructor?<ul> <li>The constructor with no parameters.</li> </ul> </li> <li>What should be the correct behavior of it?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-constructors_1","title":"Dynarray: constructors","text":"<ul> <li>We want <code>Dynarray a(n);</code> to construct a <code>Dynarray</code> that contains <code>n</code> elements.</li> <li>To avoid troubles, we want the elements to be value-initialized!</li> <li>Suppose we don't want a default constructor.</li> </ul> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n public:\n  Dynarray(std::size_t n) : m_storage(new int[n]{}), m_length(n) {}\n};\n</code></pre> <p>If the class has a user-declared constructor, the compiler will not generate a default constructor.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-constructors_2","title":"Dynarray: constructors","text":"<pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n public:\n  Dynarray(std::size_t n) : m_storage(new int[n]{}), m_length(n) {}\n};\n</code></pre> <p>Since <code>Dynarray</code> has a user-declared constructor, it does not have a default constructor:</p> <pre><code>Dynarray a; // Error.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-destructor","title":"Dynarray: destructor","text":"<ul> <li>Remember: The destructor is (automatically) called when the object is \"dead\".</li> <li>The memory is obtained in the constructor, and released in the destructor.</li> </ul> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n public:\n  Dynarray(std::size_t n)\n    : m_storage(new int[n]{}), m_length(n) {}\n  ~Dynarray() {\n    delete[] m_storage; // Pay attention to `[]`!\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-destructor_1","title":"Dynarray: destructor","text":"<p>Is this correct?</p> <pre><code>class Dynarray {\n  // ...\n  ~Dynarray() {\n    if (m_length != 0)\n      delete[] m_storage;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-destructor_2","title":"Dynarray: destructor","text":"<p>Is this correct?</p> <pre><code>class Dynarray {\n  // ...\n  ~Dynarray() {\n    if (m_length != 0)\n      delete[] m_storage;\n  }\n};\n</code></pre> <p>NO! <code>new [0]</code> may also allocate some memory (implementation-defined, like <code>malloc</code>), which should also be deallocated.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-destructor_3","title":"Dynarray: destructor","text":"<p>Is this correct?</p> <pre><code>class Dynarray {\n  // ...\n  ~Dynarray() {\n    delete[] m_storage;\n    m_length = 0;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-destructor_4","title":"Dynarray: destructor","text":"<p>Is this correct?</p> <pre><code>class Dynarray {\n  // ...\n  ~Dynarray() {\n    delete[] m_storage;\n    m_length = 0;\n  }\n};\n</code></pre> <p>It is correct, but <code>m_length = 0;</code> is not needed. The destructor is executed right before the <code>Dynarray</code> object \"dies\", so the value of <code>m_length</code> does not matter!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-some-member-functions","title":"Dynarray: some member functions","text":"<p>Design some useful member functions. - A function to obtain its length (size). - A function telling whether it is empty.</p> <pre><code>class Dynarray {\n  // ...\n public:\n  std::size_t size() const {\n    return m_length;\n  }\n  bool empty() const {\n    return m_length == 0;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-some-member-functions_1","title":"Dynarray: some member functions","text":"<p>Design some useful member functions. - A function returning reference to an element.</p> <pre><code>class Dynarray {\n  // ...\n public:\n  int &amp;at(std::size_t i) {\n    return m_storage[i];\n  }\n  const int &amp;at(std::size_t i) const {\n    return m_storage[i];\n  }\n};\n</code></pre> <p>Why do we need this \"<code>const</code> vs non-<code>const</code>\" overloading? \\(\\Rightarrow\\) Learn it in recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-usage","title":"Dynarray: Usage","text":"<pre><code>void print(const Dynarray &amp;a) {\n  for (std::size_t i = 0;\n       i != a.size(); ++i)\n    std::cout &lt;&lt; a.at(i) &lt;&lt; ' ';\n  std::cout &lt;&lt; std::endl;\n}\nvoid reverse(Dynarray &amp;a) {\n  for (std::size_t i = 0,\n    j = a.size() - 1; i &lt; j; ++i, --j)\n    std::swap(a.at(i), a.at(j));\n}\n</code></pre> <pre><code>int main() {\n  int n; std::cin &gt;&gt; n;\n  Dynarray array(n);\n  for (int i = 0; i != n; ++i)\n    std::cin &gt;&gt; array.at(i);\n  reverse(array);\n  print(array);\n  return 0;\n  // Dtor of `array` is called here,\n  // which deallocates the memory\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#copy-control","title":"Copy control","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#copy-initialization","title":"Copy-initialization","text":"<p>We can easily construct a <code>std::string</code> to be a copy of another:</p> <pre><code>std::string s1 = some_value();\nstd::string s2 = s1; // s2 is initialized to be a copy of s1\nstd::string s3(s1); // equivalent\nstd::string s4{s1}; // equivalent, but modern\n</code></pre> <p>Can we do this for our <code>Dynarray</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#copy-initialization_1","title":"Copy-initialization","text":"<p>Before we add anything, let's try what will happen:</p> <pre><code>Dynarray a(3);\na.at(0) = 2; a.at(1) = 3; a.at(2) = 5;\nDynarray b = a; // It compiles.\nprint(b); // 2 3 5\na.at(0) = 70;\nprint(b); // 70 3 5\n</code></pre> <p>Ooops! Although it compiles, the pointers <code>a.m_storage</code> and <code>b.m_storage</code> are pointing to the same address!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#copy-initialization_2","title":"Copy-initialization","text":"<p>Before we add anything, let's try what will happen:</p> <pre><code>Dynarray a(3);\nDynarray b = a;\n</code></pre> <p>Although it compiles, the pointers <code>a.m_storage</code> and <code>b.m_storage</code> are pointing to the same address!</p> <p>This will cause disaster: consider the case if <code>b</code> \"dies\" before <code>a</code>:</p> <pre><code>Dynarray a(3);\nif (some_condition) {\n  Dynarray b = a; // `a.m_storage` and `b.m_storage` point to the same memory!\n  // ...\n} // At this point, dtor of `b` is invoked, which deallocates the memory.\nstd::cout &lt;&lt; a.at(0); // Invalid memory access!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#copy-constructor","title":"Copy constructor","text":"<p>Let <code>a</code> be an object of type <code>Type</code>. The behaviors of copy-initialization (in one of the following forms)</p> <pre><code>Type b = a;\nType b(a);\nType b{a};\n</code></pre> <p>are determined by a constructor: the copy constructor.</p> <ul> <li>Note! The <code>=</code> in <code>Type b = a;</code> is not an assignment operator!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#copy-constructor_1","title":"Copy constructor","text":"<p>The copy constructor of a class <code>X</code> has a parameter of type <code>const X &amp;</code>:</p> <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;other);\n};\n</code></pre> <p>Why <code>const</code>? - Logically, it should not modify the object being copied.</p> <p>Why <code>&amp;</code>? - Avoid copying. Pass-by-value is actually copy-initialization of the parameter, which will cause infinite recursion here!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-copy-constructor","title":"Dynarray: copy constructor","text":"<p>What should be the correct behavior of it?</p> <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;other);\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-copy-constructor_1","title":"Dynarray: copy constructor","text":"<ul> <li>We want a copy of the content of <code>other</code>.</li> </ul> <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;other)\n    : m_storage(new int[other.size()]{}), m_length(other.size()) {\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n  }\n};\n</code></pre> <p>Now the copy-initialization of <code>Dynarray</code> does the correct thing: - The new object allocates a new block of memory. - The contents are copied, not just the address.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#synthesized-copy-constructor","title":"Synthesized copy constructor","text":"<p>If the class does not have a user-declared copy constructor, the compiler will try to synthesize one: - The synthesized copy constructor will copy-initialize all the members, as if</p> <p><code>cpp   class Dynarray {    public:     Dynarray(const Dynarray &amp;other)       : m_storage(other.m_storage), m_length(other.m_length) {}   };</code> - If the synthesized copy constructor does not behave as you expect, define it on your own!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#defaulted-copy-constructor","title":"Defaulted copy constructor","text":"<p>If the synthesized copy constructor behaves as we expect, we can explicitly require it:</p> <pre><code>class Dynarray {\n public:\n  Dynarray(const Dynarray &amp;) = default;\n  // Explicitly defaulted: Explicitly requires the compiler to synthesize\n  // a copy constructor, with default behavior.\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#deleted-copy-constructor","title":"Deleted copy constructor","text":"<p>What if we don't want a copy constructor?</p> <pre><code>class ComplicatedDevice {\n  // some members\n  // Suppose this class represents some complicated device, \n  // for which there is no correct and suitable behavior for \"copying\".\n};\n</code></pre> <p>Simply not defining the copy constructor does not work: - The compiler will synthesize one for you.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#deleted-copy-constructor_1","title":"Deleted copy constructor","text":"<p>What if we don't want a copy constructor?</p> <pre><code>class ComplicatedDevice {\n  // some members\n  // Suppose this class represents some complicated device, \n  // for which there is no correct and suitable behavior for \"copying\".\n public:\n  ComplicatedDevice(const ComplicatedDevice &amp;) = delete;\n};\n</code></pre> <p>By saying <code>= delete</code>, we define a deleted copy constructor:</p> <pre><code>ComplicatedDevice a = something();\nComplicatedDevice b = a; // Error: calling deleted function\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#copy-assignment-operator","title":"Copy-assignment operator","text":"<p>Apart from copy-initialization, there is another form of copying:</p> <pre><code>std::string s1 = \"hello\", s2 = \"world\";\ns1 = s2; // s1 becomes a copy of s2, representing \"world\"\n</code></pre> <p>In <code>s1 = s2</code>, <code>=</code> is the assignment operator.</p> <p><code>=</code> is the assignment operator only when it is in an expression. - <code>s1 = s2</code> is an expression. - <code>std::string s1 = s2</code> is in a declaration statement, not an expression. <code>=</code> here is a part of the initialization syntax.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-copy-assignment-operator","title":"Dynarray: copy-assignment operator","text":"<p>The copy-assignent operator is defined in the form of operator overloading: - <code>a = b</code> is equivalent to <code>a.operator=(b)</code>. - We will talk about more on operator overloading in a few weeks.</p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other);\n};\n</code></pre> <ul> <li>The function name is <code>operator=</code>.</li> <li>In consistent with built-in assignment operators, <code>operator=</code> returns reference to the left-hand side object (the object being assigned).</li> <li>It is <code>*this</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-copy-assignment-operator_1","title":"Dynarray: copy-assignment operator","text":"<p>We also want the copy-assignment operator to copy the contents, not only an address.</p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    m_storage = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre> <p>Is this correct?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-copy-assignment-operator_2","title":"Dynarray: copy-assignment operator","text":"<p>Avoid memory leaks! Deallocate the memory you don't use!</p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    delete[] m_storage; // !!!\n    m_storage = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre> <p>Is this correct?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-copy-assignment-operator_3","title":"Dynarray: copy-assignment operator","text":"<p>What if self-assignment happens?</p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    // If `other` and `*this` are actually the same object,\n    // the memory is deallocated and the data are lost! (DISASTER)\n    delete[] m_storage;\n    m_storage = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      m_storage[i] = other.at(i);\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#dynarray-copy-assignment-operator_4","title":"Dynarray: copy-assignment operator","text":"<p>Assignment operators should be self-assignment-safe.</p> <pre><code>class Dynarray {\n public:\n  Dynarray &amp;operator=(const Dynarray &amp;other) {\n    int *new_data = new int[other.size()];\n    for (std::size_t i = 0; i != other.size(); ++i)\n      new_data[i] = other.at(i);\n    delete[] m_storage;\n    m_storage = new_data;\n    m_length = other.size();\n    return *this;\n  }\n};\n</code></pre> <p>This is self-assignment-safe. (Think about it.)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#synthesized-defaulted-and-deleted-copy-assignment-operator","title":"Synthesized, defaulted and deleted copy-assignment operator","text":"<p>Like the copy constructor: - The copy-assignment operator can also be deleted, by declaring it as <code>= delete;</code>. - If you don't define it, the compiler will generate one that copy-assigns all the members, as if it is defined as:</p> <p><code>cpp   class Dynarray {    public:     Dynarray &amp;operator=(const Dynarray &amp;other) {       m_storage = other.m_storage;       m_length = other.m_length;       return *this;     }   };</code> - You can also require a synthesized one explicitly by saying <code>= default;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#important-the-rule-of-three-reasoning","title":"[IMPORTANT] The rule of three: Reasoning","text":"<p>Among the copy constructor, the copy-assignment operator and the destructor: - If a class needs a user-provided version of one of them, usually, it needs a user-provided version of each of them. - Why?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#important-the-rule-of-three-reasoning_1","title":"[IMPORTANT] The rule of three: Reasoning","text":"<p>Among the copy constructor, the copy-assignment operator and the destructor: - If a class needs a user-provided version of one of them, - usually, it is a class that manages some resources, - for which the default behavior of the copy-control members does not suffice. - Therefore, all of the three special functions need a user-provided version.   - Define them in a correct, well-defined manner.   - If a class should not be copy-constructible or copy-assignable, delete that function.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#important-the-rule-of-three-rules","title":"[IMPORTANT] The rule of three: Rules","text":"<p>Let \\(S=\\{\\) copy constructor \\(,\\) copy assignment operator \\(,\\) destructor \\(\\}\\).</p> <p>If for a class, \\(\\exists x,y\\in S\\) such that</p> <ul> <li>\\(x\\) is user-declared, and \\(y\\) is not user-declared,</li> </ul> <p>then the compiler should not generate \\(y\\), according to the idea of \"the rule of three\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#important-the-rule-of-three-rules_1","title":"[IMPORTANT] The rule of three: Rules","text":"<p>Let \\(S=\\{\\) copy constructor \\(,\\) copy assignment operator \\(,\\) destructor \\(\\}\\).</p> <p>If for a class, \\(\\exists x,y\\in S\\) such that</p> <ul> <li>\\(x\\) is user-declared, and \\(y\\) is not user-declared,</li> </ul> <p>then the compiler still generates \\(y\\), but this behavior has been deprecated since C++11.</p> <ul> <li>This is a problem left over from history: At the time C++98 was adopted, the significance of the rule of three was not fully appreciated.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#important-the-rule-of-three","title":"[IMPORTANT] The rule of three","text":"<p>Into modern C++: The Rule of Five.</p> <ul> <li>\\(\\Rightarrow\\) We will talk about it in later lectures.</li> </ul> <p>Read Effective Modern C++ Item 17 for a thorough understanding of this.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#summary","title":"Summary","text":"<p>Lifetime of an object:</p> <ul> <li>depends on its storage: local non-<code>static</code>, global, allocated, ...</li> <li>Initialization marks the beginning of the lifetime of an object.</li> <li>Classes can control the way of initialization using constructors.</li> <li>When the lifetime of an object ends, it is destroyed.</li> <li>If it is an object of class type, its destructor is called right before it is destroyed.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l15/l15.html#summary_1","title":"Summary","text":"<p>Copy control</p> <ul> <li>Usually, the copy control members refer to the copy constructor, the copy assignment operator and the destructor.</li> <li>Copy constructor: <code>ClassName(const ClassName &amp;)</code></li> <li>Copy assignment operator: <code>ClassName &amp;operator=(const ClassName &amp;)</code></li> <li>It needs to be self-assignment safe.</li> <li>Destructor: <code>~ClassName()</code></li> <li><code>=default</code>, <code>=delete</code></li> <li>The rule of three.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html","title":"CS100 Lecture 16","text":"<p>Class Basics II</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#contents","title":"Contents","text":"<ul> <li>Type alias members</li> <li><code>static</code> members</li> <li><code>friend</code></li> <li>Definition and declaration</li> <li>Destructors revisited</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#type-alias-members","title":"Type alias members","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#type-aliases-in-c-using","title":"Type aliases in C++: <code>using</code>.","text":"<p>A better way of declaring type aliases:</p> <pre><code>// C-style\ntypedef long long LL;\n// C++-style\nusing LL = long long;\n</code></pre> <p>It is more readable when dealing with compound types:</p> <pre><code>// C-style\ntypedef int intarray_t[1000];\n// C++-style\nusing intarray_t = int[1000];\n</code></pre> <pre><code>// C-style\ntypedef int (&amp;ref_to_array)[1000];\n// C++-style\nusing ref_to_array = int (&amp;)[1000];\n</code></pre> <p><code>using</code> can also declare alias templates (in later lectures), while <code>typedef</code> cannot.</p> <p>[Best practice] In C++, Use <code>using</code> to declare type aliases.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#type-alias-members_1","title":"Type alias members","text":"<p>A class can have type alias members.</p> <pre><code>class Dynarray {\n public:\n  using size_type = std::size_t;\n  size_type size() const { return m_length; }\n};\n</code></pre> <p>Usage: <code>ClassName::TypeAliasName</code></p> <pre><code>for (Dynarray::size_type i = 0; i != a.size(); ++i)\n  // ...\n</code></pre> <p>Note: Here we use <code>ClassName::</code> instead of <code>object.</code>, because such members belong to the class, not one single object.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#type-alias-members_2","title":"Type alias members","text":"<p>The class also has control over the accessibility of type alias members.</p> <pre><code>class A {\n  using type = int;\n};\nA::type x = 42; // Error: Accessing private member of `A`.\n</code></pre> <p>The class has control over the accessibility of anything that is called a member of it.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#type-alias-members-in-the-standard-library","title":"Type alias members in the standard library","text":"<p>All standard library containers (and <code>std::string</code>) define the type alias member <code>size_type</code> as the return type of <code>.size()</code>:</p> <pre><code>std::string::size_type i = s.size();\nstd::vector&lt;int&gt;::size_type j = v.size(); // Not `std::vector::size_type`!\n                                          // The template argument `&lt;int&gt;`\n                                          // is necessary here.\nstd::list&lt;int&gt;::size_type k = l.size();\n</code></pre> <p>Why?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#type-alias-members-in-the-standard-library_1","title":"Type alias members in the standard library","text":"<p>All standard library containers (and <code>std::string</code>) define the type alias member <code>size_type</code> as the return type of <code>.size()</code>:</p> <pre><code>std::string::size_type i = s.size();\nstd::vector&lt;int&gt;::size_type j = v.size();\nstd::list&lt;int&gt;::size_type k = l.size();\n</code></pre> <ul> <li>This type is container-dependent: Different containers may choose different types suitable for representing sizes.</li> <li>The Qt containers often use <code>int</code> as <code>size_type</code>.</li> <li>Define <code>Container::size_type</code> to achieve good consistency and generality.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-members","title":"<code>static</code> members","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members","title":"<code>static</code> data members","text":"<p>A <code>static</code> data member:</p> <pre><code>class A {\n  static int something;\n  // other members ...\n};\n</code></pre> <p>Just consider it as a global variable, except that - its name is in the class scope: <code>A::something</code>, and that - the accessibility may be restricted. Here <code>something</code> is <code>private</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members_1","title":"<code>static</code> data members","text":"<p>A <code>static</code> data member:</p> <pre><code>class A {\n  static int something;\n  // other members ...\n};\n</code></pre> <p>There is only one <code>A::something</code>: it does not belong to any object of <code>A</code>. It belongs to the class <code>A</code>.</p> <ul> <li>Like type alias members, we use <code>ClassName::</code> instead of <code>object.</code> to access them.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members_2","title":"<code>static</code> data members","text":"<p>A <code>static</code> data member:</p> <pre><code>class A {\n  static int something;\n  // other members ...\n};\n</code></pre> <p>It can also be accessed by <code>a.something</code> (where <code>a</code> is an object of type <code>A</code>), but <code>a.something</code> and <code>b.something</code> refer to the same variable.</p> <ul> <li>If <code>f</code> is a function that returns an object of type <code>A</code>, <code>f().something</code> always accesses the same variable no matter what <code>f()</code> returns.</li> <li>In the very first externally available C++ compiler (Cfront 1.0, 1985), <code>f</code> in the expression <code>f().something</code> is not even called! This bug has been fixed soon.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members-example","title":"<code>static</code> data members: Example","text":"<p>Suppose we want to assign a unique id to each object of our class.</p> <pre><code>int cnt = 0;\n\nclass Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  int m_id;\npublic:\n  Dynarray(std::size_t n)\n      : m_storage(new int[n]{}), m_length(n), m_id(cnt++) {}\n  Dynarray() : m_storage(nullptr), m_length(0), m_id(cnt++) {}\n  // ...\n};\n</code></pre> <p>We use a global variable <code>cnt</code> as the \"counter\". Is this a good design?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members-example_1","title":"<code>static</code> data members: Example","text":"<p>The name <code>cnt</code> is confusing: A \"counter\" of what?</p> <pre><code>int X_cnt = 0, Y_cnt = 0, Z_cnt = 0;\nstruct X {\n  int m_id;\n  X() : m_id(X_cnt++) {}\n};\nstruct Y {\n  int m_id;\n  Y() : m_id(Y_cnt++) {}\n};\nstruct Z {\n  int m_id;\n  Z() : m_id(Z_cnt++) {}\n};\n</code></pre>   - The program is in a mess with global variables all around. - No prevention from potential mistakes:    ```cpp   struct Y {     Y() : m_id(X_cnt++) {}   };   ```    The mistake happens silently."},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members-example_2","title":"<code>static</code> data members: Example","text":"<p>Restrict the name of this counter in the scope of the corresponding class, by declaring it as a <code>static</code> data member.</p> <ul> <li>This is exactly the idea behind <code>static</code> data members: A \"global variable\" restricted in class scope.</li> </ul> <pre><code>class Dynarray {\n  static int s_cnt; // !!!\n  int *m_storage;\n  std::size_t m_length;\n  int m_id;\n\npublic:\n  Dynarray(/* ... */) : /* ... */, m_id(s_cnt++) {}\n};\n</code></pre> <ul> <li><code>s</code> stands for <code>static</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members_3","title":"<code>static</code> data members","text":"<pre><code>class Dynarray {\n  static int s_cnt; // !!!\n  int *m_storage;\n  std::size_t m_length;\n  int m_id;\n\npublic:\n  Dynarray(/* ... */) : /* ... */, m_id(s_cnt++) {}\n};\n</code></pre> <p>You also need to give it a definition outside the class, according to some rules.</p> <pre><code>int Dynarray::s_cnt; // Zero-initialize, because it is `static`.\n</code></pre> <p>Or initialize it with some value explicitly:</p> <pre><code>int Dynarray::s_cnt = 42;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-data-members_4","title":"<code>static</code> data members","text":"<p>Exercise: <code>std::string</code> has a <code>find</code> member function:</p> <pre><code>std::string s = something();\nauto pos = s.find('a');\nif (pos == std::string::npos) { // This means that `'a'` is not found.\n  // ...\n} else {\n  std::cout &lt;&lt; s[pos] &lt;&lt; '\\n'; // If executed, it should print `a`.\n}\n</code></pre> <p><code>std::string::npos</code> is returned when the required character is not found.</p> <p>Define <code>npos</code> and <code>find</code> for your <code>Dynarray</code> class, whose behavior should be similar to those of <code>std::string</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-member-functions","title":"<code>static</code> member functions","text":"<p>A <code>static</code> member function:</p> <pre><code>class A {\n public:\n  static void fun(int x, int y);\n};\n</code></pre> <p>Just consider it as a normal non-member function, except that - its name is in the class scope: <code>A::fun(x, y)</code>, and that - the accessibility may be restricted. Here <code>fun</code> is <code>public</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#static-member-functions_1","title":"<code>static</code> member functions","text":"<p>A <code>static</code> member function:</p> <pre><code>class A {\n public:\n  static void fun(int x, int y);\n};\n</code></pre> <p><code>A::fun</code> does not belong to any object of <code>A</code>. It belongs to the class <code>A</code>. - There is no <code>this</code> pointer inside <code>fun</code>.</p> <p>It can also be called by <code>a.fun(x, y)</code> (where <code>a</code> is an object of type <code>A</code>), but here <code>a</code> will not be bound to a <code>this</code> pointer, and <code>fun</code> has no way of accessing any non-<code>static</code> member of <code>a</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#friend","title":"<code>friend</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#friend-functions","title":"<code>friend</code> functions","text":"<p>Recall the <code>Student</code> class:</p> <pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  Student(const std::string &amp;name, const std::string &amp;id)\n      : m_name(name), m_id(id), m_entranceYear(std::stol(id.substr(0, 4))) {}\n  auto graduated(int year) const { return year - m_entranceYear &gt;= 4; }\n  // ...\n};\n</code></pre> <p>Suppose we want to write a function to display the information of a <code>Student</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#friend-functions_1","title":"<code>friend</code> functions","text":"<pre><code>void print(const Student &amp;stu) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; stu.m_name &lt;&lt; \", id: \" &lt;&lt; stu.m_id\n            &lt;&lt; \"entrance year: \" &lt;&lt; stu.m_entranceYear &lt;&lt; '\\n';\n}\n</code></pre> <p>This won't compile, because <code>m_name</code>, <code>m_id</code> and <code>m_entranceYear</code> are <code>private</code> members of <code>Student</code>.</p> <ul> <li>One workaround is to define <code>print</code> as a member of <code>Student</code>.</li> <li>However, there do exist some functions that cannot be defined as a member.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#friend-functions_2","title":"<code>friend</code> functions","text":"<p>Add a <code>friend</code> declaration, so that <code>print</code> can access the private members of <code>Student</code>.</p> <pre><code>class Student {\n  friend void print(const Student &amp;); // The parameter name is not used in this\n                                      // declaration, so it is omitted.\n\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  Student(const std::string &amp;name, const std::string &amp;id)\n      : m_name(name), m_id(id), m_entranceYear(std::stol(id.substr(0, 4))) {}\n  auto graduated(int year) const { return year - m_entranceYear &gt;= 4; }\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#friend-functions_3","title":"<code>friend</code> functions","text":"<p>Add a <code>friend</code> declaration.</p> <pre><code>class Student {\n  friend void print(const Student &amp;);\n\n  // ...\n};\n</code></pre> <p>A <code>friend</code> is not a member! You can put this <code>friend</code> delcaration anywhere in the class body. The access modifiers have no effect on it.</p> <ul> <li>We often declare all the <code>friend</code>s of a class in the beginning or at the end of class definition.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#friend-classes","title":"<code>friend</code> classes","text":"<p>A class can also declare another class as its <code>friend</code>.</p> <pre><code>class X {\n  friend class Y;\n  // ...\n};\n</code></pre> <p>In this way, any code from the class <code>Y</code> can access the private members of <code>X</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#definition-and-declaration","title":"Definition and declaration","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#definition-and-declaration_1","title":"Definition and declaration","text":"<p>For a function:</p> <pre><code>// Only a declaration: The function body is not present.\nvoid foo(int, const std::string &amp;);\n// A definition: The function body is present.\nvoid foo(int x, const std::string &amp;s) {\n  // ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#class-definition","title":"Class definition","text":"<p>For a class, a definition consists of the declarations of all its members.</p> <pre><code>class Widget {\npublic:\n  Widget();\n  Widget(int, int);\n  void set_handle(int);\n\n  // `const` is also a part of the function type, which should be present\n  // in its declaration.\n  const std::vector&lt;int&gt; &amp;get_gadgets() const;\n\n  // ...\nprivate:\n  int m_handle;\n  int m_length;\n  std::vector&lt;int&gt; m_gadgets;  \n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#define-a-member-function-outside-the-class-body","title":"Define a member function outside the class body","text":"<p>A member function can be declared in the class body, and then defined outside.</p> <pre><code>class Widget {\npublic:\n  const std::vector&lt;int&gt; &amp;get_gadgets() const; // A declaration only.\n  // ...\n}; // Now the definition of `Widget` is complete.\n\n// Define the function here. The function name is `Widget::get_gadgets`.\nconst std::vector&lt;int&gt; &amp;Widget::get_gadgets() const {\n  return m_gadgets; // Just like how you do it inside the class body.\n                    // The implicit `this` pointer is still there.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#the-operator","title":"The <code>::</code> operator","text":"<pre><code>class Widget {\npublic:\n  using gadgets_list = std::vector&lt;int&gt;;\n  static int special_member;\n  const gadgets_list &amp;get_gadgets() const;\n  // ...\n};\nconst Widget::gadgets_list &amp;Widget::get_gadgets() const {\n  return m_gadgets;\n}\n</code></pre> <ul> <li>The members <code>Widget::gadgets_list</code> and <code>Widget::special_member</code> are accessed through <code>ClassName::</code>.</li> <li>The name of the member function <code>get_gadgets</code> is <code>Widget::get_gadgets</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#class-declaration-and-incomplete-type","title":"Class declaration and incomplete type","text":"<p>To declare a class without providing a definition:</p> <pre><code>class A;\nstruct B;\n</code></pre> <p>If we only see the declaration of a class, we have no knowledge about its members, how many bytes it takes, how it can be initialized, ... - Such class type is an incomplete type. - We cannot create an object of such type, nor can we access any of its members. - The only thing we can do is to declare a pointer or a reference to it.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#class-declaration-and-incomplete-type_1","title":"Class declaration and incomplete type","text":"<p>If we only see the declaration of a class, we have no knowledge about its members, how many bytes it takes, how it can be initialized, ... - Such class type is an incomplete type. - We cannot create an object of such type, nor can we access any of its members. - The only thing we can do is to declare a pointer or a reference to it.</p> <pre><code>class Student; // We only have this declaration.\n\nvoid print(const Student &amp;stu) { // OK. Declaring a reference to it is OK.\n  std::cout &lt;&lt; stu.getName(); // Error. We don't know anything about its members.\n}\n\nclass Student {\npublic:\n  const std::string &amp;getName() const { /* ... */ }\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#destructors-revisited","title":"Destructors revisited","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#destructors-revisited_1","title":"Destructors revisited","text":"<p>A destructor (dtor) is a member function that is called automatically when an object of that class type is \"dead\".</p> <ul> <li>For global and <code>static</code> objects, on termination of the program.</li> <li>For local objects, when control reaches the end of its scope.</li> <li>For objects created by <code>new</code>/<code>new[]</code>, when their address is passed to <code>delete</code>/<code>delete[]</code>.</li> </ul> <p>The destructor is often responsible for doing some cleanup: Release the resources it owns, do some logging, cut off its connection with some external objects, ...</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#destructors","title":"Destructors","text":"<pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  Student(const std::string &amp;, const std::string &amp;);\n  const std::string &amp;getName() const;\n  bool graduated(int) const;\n  void setName(const std::string &amp;);\n  void print() const;\n};\n</code></pre> <p>Does our <code>Student</code> class have a destructor?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#destructors_1","title":"Destructors","text":"<p>Does our <code>Student</code> class have a destructor?</p> <ul> <li>It must have. Whenever you create an object of type <code>Student</code>, its destructor needs to be invoked somewhere in this program. \\({}^{\\textcolor{red}{1}}\\)</li> </ul> <p>What does <code>Student::~Student</code> need to do? Does <code>Student</code> own any resources?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#destructors_2","title":"Destructors","text":"<p>Does our <code>Student</code> class have a destructor?</p> <ul> <li>It must have. Whenever you create an object of type <code>Student</code>, its destructor needs to be invoked somewhere in this program. \\({}^{\\textcolor{red}{1}}\\)</li> </ul> <p>What does <code>Student::~Student</code> need to do? Does <code>Student</code> own any resources?</p> <ul> <li>It seems that a <code>Student</code> has no resources, so nothing special needs to be done.</li> <li>However, it has two <code>std::string</code> members! Their destructors must be called, otherwise the memory is leaked!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#destructors_3","title":"Destructors","text":"<p>To define the destructor of <code>Student</code>: Just write an empty function body, and everything is done.</p> <pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  ~Student() {}\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#destructors_4","title":"Destructors","text":"<pre><code>class Student {\n  std::string m_name;\n  std::string m_id;\n  int m_entranceYear;\npublic:\n  ~Student() {}\n};\n</code></pre> <ul> <li>When the function body is executed, the object is not yet \"dead\".</li> <li>You can still access its members.     <code>cpp     ~Student() { std::cout &lt;&lt; m_name &lt;&lt; '\\n'; }</code></li> <li>After the function body is executed, all its data members are destroyed automatically, in reverse order in which they are declared.</li> <li>For members of class type, their destructors are invoked automatically.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#constructors-vs-destructors","title":"Constructors vs destructors","text":"<pre><code>Student(const std::string &amp;name)\n    : m_name(name) /* ... */ {\n  // ...\n}\n</code></pre>   - A class may have multiple ctors (overloaded). - The data members are initialized **before** the execution of function body. - The data members are initialized **in order** in which they are declared.    <pre><code>~Student() {\n  // ...\n}\n</code></pre>   - A class has only one dtor. ${}^{\\textcolor{red}{1}}$ - The data members are destroyed **after** the execution of function body. - The data members are destroyed **in reverse order** in which they are declared."},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#compiler-generated-destructors","title":"Compiler-generated destructors","text":"<p>For most cases, a class needs a destructor.</p> <p>Therefore, the compiler always generates one \\({}^{\\textcolor{red}{2}}\\) if there is no user-declared destructor.</p> <ul> <li>The compiler-generated destructor is <code>public</code> by default.</li> <li>The compiler-generated destructor is as if it were defined with an empty function body <code>{}</code>.</li> <li>It does nothing but to destroy the data members.</li> </ul> <p>We can explicitly require one by writing <code>= default;</code>, just as for other copy control members.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#summary","title":"Summary","text":"<p>Type alias members - Type alias members belong to the class, not individual objects, so they are accessed via <code>ClassName::AliasName</code>. - The class can controls the accessibility of type alias members.</p> <p><code>static</code> members - <code>static</code> data members are like global variables, but in the class's scope. - <code>static</code> member functions are like normal non-member functions, but in the class's scope. There is no <code>this</code> pointer in a <code>static</code> member function. - A <code>static</code> member belongs to the class, instead of any individual object.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#summary_1","title":"Summary","text":"<p><code>friend</code> - A <code>friend</code> declaration allows a function or class to access private (and protected) members of another class. - A <code>friend</code> is not a member.</p> <p>Definitions and declarations - A class definition includes declarations of all its members. - A member function can be declared in the class body and then defined outside. - A class type is an incomplete type if only its declaration (without a definition) is present.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#summary_2","title":"Summary","text":"<p>Destructors - Destructors are called automatically when an object's lifetime ends. They often do some clean up. - The members are destroyed after the function body is executed. They are destroyed in reverse order in which they are declared. - The compiler generates a destructor (in most cases) if none is provided. It just destroys all its members.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l16/l16.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) Objects created by <code>new</code>/<code>new[]</code> are not required to destroyed. A <code>delete</code>/<code>delete[]</code> expression will destroy it, but it is not mandatory. So you can still create an object with a deleted destructor (see \\(\\textcolor{red}{3}\\)) by a <code>new</code> expression, but you can't <code>delete</code> it, which possibly leads to memory leak.</p> <p>\\({}^{\\textcolor{red}{2}}\\) A class can have many prospective destructors since C++20.</p> <p>\\({}^{\\textcolor{red}{3}}\\) If no user-declared destructor is provided for a class type, the compiler will always declare a destructor as an <code>inline</code> <code>public</code> member of its class.</p> <p>If an implicitly-declared destructor is not deleted, it is implicitly-defined by the compiler when it is odr-used. In some very special cases the compiler may fail to define the destructor (e.g. due to a member whose destructor is inaccessible). In that case, the destructor is implicitly deleted.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html","title":"CS100 Lecture 17","text":"<p>Rvalue References and Move</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#contents","title":"Contents","text":"<ul> <li>Motivation: Copy is slow.</li> <li>Rvalue references</li> <li>Move operations</li> <li>Move constructor</li> <li>Move assignment operator</li> <li>The rule of five</li> <li><code>std::move</code></li> <li>NRVO, move and copy elision</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#motivation-copy-is-slow","title":"Motivation: Copy is slow.","text":"<pre><code>std::string a = some_value(), b = some_other_value();\nstd::string s;\ns = a;\ns = a + b;\n</code></pre> <p>Consider the two assignments: <code>s = a</code> and <code>s = a + b</code>.</p> <p>How is <code>s = a + b</code> evaluated?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#motivation-copy-is-slow_1","title":"Motivation: Copy is slow.","text":"<pre><code>s = a + b;\n</code></pre> <ol> <li>Evaluate <code>a + b</code> and store the result in a temporary object, say <code>tmp</code>.</li> <li>Perform the assignment <code>s = tmp</code>.</li> <li>The temporary object <code>tmp</code> is no longer needed, hence destroyed by its destructor.</li> </ol> <p>Can we make this faster?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#motivation-copy-is-slow_2","title":"Motivation: Copy is slow.","text":"<pre><code>s = a + b;\n</code></pre> <ol> <li>Evaluate <code>a + b</code> and store the result in a temporary object, say <code>tmp</code>.</li> <li>Perform the assignment <code>s = tmp</code>.</li> <li>The temporary object <code>tmp</code> is no longer needed, hence destroyed by its destructor.</li> </ol> <p>Can we make this faster?</p> <ul> <li>The assignment <code>s = tmp</code> is done by copying the contents of <code>tmp</code>?</li> <li>But <code>tmp</code> is about to \"die\"! Why can't we just steal the contents from it?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#motivation-copy-is-slow_3","title":"Motivation: Copy is slow.","text":"<p>Let's look at the other assignment:</p> <pre><code>s = a;\n</code></pre> <ul> <li>Copy is necessary here, because <code>a</code> lives long. It is not destroyed immediately after this statement is executed.</li> <li>You cannot just \"steal\" the contents from <code>a</code>. The contents of <code>a</code> must be preserved.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#distinguish-between-the-different-kinds-of-assignments","title":"Distinguish between the different kinds of assignments","text":"<pre><code>s = a;\n</code></pre> <pre><code>s = a + b;\n</code></pre> <p>What is the key difference between them?</p> <ul> <li><code>s = a</code> is an assignment from an lvalue,</li> <li>while <code>s = a + b</code> is an assignment from an rvalue.</li> </ul> <p>If we only have the copy assignment operator, there is no way of distinguishing them.</p> <p>* Define two different assignment operators, one accepting an lvalue and the other accepting an rvalue?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#rvalue-references","title":"Rvalue References","text":"<p>A kind of reference that is bound to rvalues:</p> <pre><code>int &amp;r = 42;             // Error: Lvalue reference cannot be bound to rvalue.\nint &amp;&amp;rr = 42;           // Correct: `rr` is an rvalue reference.\nconst int &amp;cr = 42;      // Also correct:\n                         // Lvalue reference-to-const can be bound to rvalue.\nconst int &amp;&amp;crr = 42;    // Correct, but useless:\n                         // Rvalue reference-to-const is seldom used.\n\nint i = 42;\nint &amp;&amp;rr2 = i;           // Error: Rvalue reference cannot be bound to lvalue.\nint &amp;r2 = i * 42;        // Error: Lvalue reference cannot be bound to rvalue.\nconst int &amp;cr2 = i * 42; // Correct\nint &amp;&amp;rr3 = i * 42;      // Correct\n</code></pre> <ul> <li>Lvalue references (to non-<code>const</code>) can only be bound to lvalues.</li> <li>Rvalue references can only be bound to rvalues.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#overload-resolution","title":"Overload Resolution","text":"<p>Such overloading is allowed:</p> <pre><code>void fun(const std::string &amp;);\nvoid fun(std::string &amp;&amp;);\n</code></pre> <ul> <li><code>fun(s1 + s2)</code> matches <code>fun(std::string &amp;&amp;)</code>, because <code>s1 + s2</code> is an rvalue.</li> <li><code>fun(s)</code> matches <code>fun(const std::string &amp;)</code>, because <code>s</code> is an lvalue.</li> <li>Note that if <code>fun(std::string &amp;&amp;)</code> does not exist, <code>fun(s1 + s2)</code> also matches <code>fun(const std::string &amp;)</code>.</li> </ul> <p>We will see how this kind of overloading benefit us soon.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#move-operations","title":"Move Operations","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#overview","title":"Overview","text":"<p>The move constructor and the move assignment operator.</p> <pre><code>struct Widget {\n  Widget(Widget &amp;&amp;) noexcept;\n  Widget &amp;operator=(Widget &amp;&amp;) noexcept;\n  // Compared to the copy constructor and the copy assignment operator:\n  Widget(const Widget &amp;);\n  Widget &amp;operator=(const Widget &amp;);\n};\n</code></pre> <ul> <li>Parameter type is rvalue reference, instead of lvalue reference-to-<code>const</code>.</li> <li><code>noexcept</code> is (almost always) necessary! \\(\\Rightarrow\\) We will talk about it in later lectures.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-move-constructor","title":"The Move Constructor","text":"<p>Take the <code>Dynarray</code> as an example.</p> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\npublic:\n  Dynarray(const Dynarray &amp;other) // copy constructor\n    : m_storage(new int[other.m_length]), m_length(other.m_length) {\n    for (std::size_t i = 0; i != m_length; ++i)\n      m_storage[i] = other.m_storage[i];\n  }\n  Dynarray(Dynarray &amp;&amp;other) noexcept // move constructor\n    : m_storage(other.m_storage), m_length(other.m_length) {\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-move-constructor_1","title":"The Move Constructor","text":"<pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept // move constructor\n    : m_storage(other.m_storage), m_length(other.m_length) {\n\n\n  }\n};\n</code></pre> <ol> <li>Steal the resources of <code>other</code>, instead of making a copy.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-move-constructor_2","title":"The Move Constructor","text":"<pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept // move constructor\n    : m_storage(other.m_storage), m_length(other.m_length) {\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre> <ol> <li>Steal the resources of <code>other</code>, instead of making a copy.</li> <li>Make sure <code>other</code> is in a valid state, so that it can be safely destroyed.</li> </ol> <p>* Take ownership of <code>other</code>'s resources!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-move-assignment-operator","title":"The Move Assignment Operator","text":"<p>Take ownership of <code>other</code>'s resources!</p> <pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n\n\n      m_storage = other.m_storage; m_length = other.m_length;\n\n\n    return *this;\n  }\n};\n</code></pre> <ol> <li>Steal the resources from <code>other</code>.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-move-assignment-operator_1","title":"The Move Assignment Operator","text":"<pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n\n\n      m_storage = other.m_storage; m_length = other.m_length;\n      other.m_storage = nullptr; other.m_length = 0;\n\n    return *this;\n  }\n};\n</code></pre> <ol> <li>Steal the resources from <code>other</code>.</li> <li>Make sure <code>other</code> is in a valid state, so that it can be safely destroyed.</li> </ol> <p>Are we done?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-move-assignment-operator_2","title":"The Move Assignment Operator","text":"<pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n\n      delete[] m_storage;\n      m_storage = other.m_storage; m_length = other.m_length;\n      other.m_storage = nullptr; other.m_length = 0;\n\n    return *this;\n  }\n};\n</code></pre> <ol> <li>Avoid memory leaks!</li> <li>Steal the resources from <code>other</code>.</li> <li>Make sure <code>other</code> is in a valid state, so that it can be safely destroyed.</li> </ol> <p>Are we done?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-move-assignment-operator_3","title":"The Move Assignment Operator","text":"<pre><code>class Dynarray {\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n    if (this != &amp;other) {\n      delete[] m_storage;\n      m_storage = other.m_storage; m_length = other.m_length;\n      other.m_storage = nullptr; other.m_length = 0;\n    }\n    return *this;\n  }\n};\n</code></pre> <ol> <li>Avoid memory leaks!</li> <li>Steal the resources from <code>other</code>.</li> <li>Make sure <code>other</code> is in a valid state, so that it can be safely destroyed.</li> </ol> <p>* Self-assignment safe!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#lvalues-are-copied-rvalues-are-moved","title":"Lvalues are Copied; Rvalues are Moved","text":"<p>Before we move on, let's define a function for demonstration.</p> <p>Suppose we have a function that concatenates two <code>Dynarray</code>s:</p> <pre><code>Dynarray concat(const Dynarray &amp;a, const Dynarray &amp;b) {\n  Dynarray result(a.size() + b.size());\n  for (std::size_t i = 0; i != a.size(); ++i)\n    result.at(i) = a.at(i);\n  for (std::size_t i = 0; i != b.size(); ++i)\n    result.at(a.size() + i) = b.at(i);\n  return result;\n}\n</code></pre> <p>Which assignment operator should be called?</p> <pre><code>a = concat(b, c);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#lvalues-are-copied-rvalues-are-moved_1","title":"Lvalues are Copied; Rvalues are Moved","text":"<p>Lvalues are copied; rvalues are moved ...</p> <pre><code>a = concat(b, c); // calls move assignment operator,\n                  // because `concat(b, c)` is an rvalue.\na = b; // calls copy assignment operator\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#lvalues-are-copied-rvalues-are-moved_2","title":"Lvalues are Copied; Rvalues are Moved","text":"<p>Lvalues are copied; rvalues are moved ...</p> <pre><code>a = concat(b, c); // calls move assignment operator,\n                  // because `concat(b, c)` generates an rvalue.\na = b; // copy assignment operator\n</code></pre> <p>... but rvalues are copied if there is no move operation.</p> <pre><code>// If Dynarray has no move assignment operator, this is a copy assignment.\na = concat(b, c)\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#synthesized-move-operations","title":"Synthesized Move Operations","text":"<p>Like copy operations, we can use <code>=default</code> to require a synthesized move operation that has the default behaviors.</p> <pre><code>struct X {\n  X(X &amp;&amp;) = default;\n  X &amp;operator=(X &amp;&amp;) = default;\n};\n</code></pre> <ul> <li>The synthesized move operations call the corresponding move operations of each member in the order in which they are declared.</li> <li>The synthesized move operations are <code>noexcept</code>.</li> </ul> <p>Move operations can also be deleted by <code>=delete</code>, but be careful ... \\({}^{\\textcolor{red}{1}}\\)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-rule-of-five-idea","title":"The Rule of Five: Idea","text":"<p>The updated copy control members:</p> <ul> <li>copy constructor</li> <li>copy assignment operator</li> <li>move constructor</li> <li>move assignment operator</li> <li>destructor</li> </ul> <p>If one of them has a user-provided version, the copy control of the class is thought of to have special behaviors. (Recall \"the rule of three\".)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-rule-of-five-rules","title":"The Rule of Five: Rules","text":"<ul> <li>The move constructor or the move assignment operator will not be generated \\({}^{\\textcolor{red}{2}}\\) if any of the rest four members have a user-declared version.</li> <li>The copy constructor or copy assignment operator, if not provided by the user, will be implicitly <code>delete</code>d if the class has a user-provided move operation.</li> <li>The generation of the copy constructor or copy assignment operator is deprecated (since C++11) when the class has a user-declared copy operation or a destructor.</li> <li> <p>This is why some of you see this error:</p> <p><code>Implicitly-declared copy assignment operator is deprecated, because the class has a user-provided copy constructor.</code></p> </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#the-rule-of-five","title":"The Rule of Five","text":"<p>The copy control members in modern C++:</p> <ul> <li>copy constructor</li> <li>copy assignment operator</li> <li>move constructor</li> <li>move assignment operator</li> <li>destructor</li> </ul> <p>The Rule of Five: Define zero or five of them.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#how-to-invoke-a-move-operation","title":"How to Invoke a Move Operation?","text":"<p>Suppose we give our <code>Dynarray</code> a label:</p> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  std::string m_label;\n};\n</code></pre> <p>The move assignment operator should invoke the move assignment operator on <code>m_label</code>. But how?</p> <pre><code>m_label = other.m_label; // calls copy assignment operator,\n                         // because `other.m_label` is an lvalue.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#stdmove","title":"<code>std::move</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#stdmove_1","title":"<code>std::move</code>","text":"<p>Defined in <code>&lt;utility&gt;</code></p> <p><code>std::move(x)</code> performs an lvalue to rvalue cast:</p> <pre><code>int ival = 42;\nint &amp;&amp;rref = ival; // Error\nint &amp;&amp;rref2 = std::move(ival); // Correct\n</code></pre> <p>Calling <code>std::move(x)</code> tells the compiler that: - <code>x</code> is an lvalue, but - we want to treat <code>x</code> as an rvalue.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#stdmove_2","title":"<code>std::move</code>","text":"<p><code>std::move(x)</code> indicates that we want to treat <code>x</code> as an rvalue, which means that <code>x</code> will be moved from.</p> <p>The call to <code>std::move</code> promises that we do not intend to use <code>x</code> again,</p> <ul> <li>except to assign to it or to destroy it.</li> </ul> <p>A call to <code>std::move</code> is usually followed by a call to some function that moves the object, after which we cannot make any assumptions about the value of the moved-from object.</p> <pre><code>void foo(X &amp;&amp;x);      // moves `x`\nvoid foo(const X &amp;x); // copies `x`\nfoo(std::move(x)); // matches `foo(X&amp;&amp;)`, so that `x` is moved.\n</code></pre> <p>\"<code>std::move</code> does not move anything. It just makes a promise.\"</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#use-stdmove","title":"Use <code>std::move</code>","text":"<p>Suppose we give every <code>Dynarray</code> a special \"label\", which is a string.</p> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  std::string m_label;\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept\n      : m_storage(other.m_storage), m_length(other.m_length),\n        m_label(std::move(other.m_label)) { // !!\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre> <p>The standard library facilities ought to define efficient and correct move operations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#use-stdmove_1","title":"Use <code>std::move</code>","text":"<p>Suppose we give every <code>Dynarray</code> a special \"label\", which is a string.</p> <pre><code>class Dynarray {\n  int *m_storage;\n  std::size_t m_length;\n  std::string m_label;\npublic:\n  Dynarray &amp;operator=(Dynarray &amp;&amp;other) noexcept {\n    if (this != &amp;other) {\n      delete[] m_storage;\n      m_storage = other.m_storage; m_length = other.m_length;\n      m_label = std::move(other.m_label);\n      other.m_storage = nullptr; other.m_length = 0;\n    }\n    return *this;\n  }\n};\n</code></pre> <p>The standard library facilities ought to define efficient and correct move operations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#use-stdmove_2","title":"Use <code>std::move</code>","text":"<p>Why do we need <code>std::move</code>?</p> <pre><code>class Dynarray {\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept\n      : m_storage(other.m_storage), m_length(other.m_length),\n        m_label(other.m_label) { // Isn't this correct?\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre> <p><code>other</code> is an rvalue reference, so ... ?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#an-rvalue-reference-is-an-lvalue","title":"An rvalue reference is an lvalue.","text":"<p><code>other</code> is an rvalue reference, which is an lvalue. - To move the object that the rvalue reference is bound to, we must call <code>std::move</code>.</p> <pre><code>class Dynarray {\npublic:\n  Dynarray(Dynarray &amp;&amp;other) noexcept\n      : m_storage(other.m_storage), m_length(other.m_length),\n        m_label(other.m_label) { // `other.m_label` is copied, not moved.\n    other.m_storage = nullptr;\n    other.m_length = 0;\n  }\n};\n</code></pre> <p>An rvalue reference is an lvalue! Does that make sense?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#lvalues-persist-rvalues-are-ephemeral","title":"Lvalues persist; Rvalues are ephemeral.","text":"<p>The lifetime of rvalues is often very short, compared to that of lvalues.</p> <ul> <li>Lvalues have persistent state, whereas rvalues are either literals or temporary objects created in the course of evaluating expressions.</li> </ul> <p>An rvalue reference extends the lifetime of the rvalue that it is bound to.</p> <pre><code>std::string s1 = something(), s2 = some_other_thing();\nstd::string &amp;&amp;rr = s1 + s2; // The state of the temporary object is \"captured\"\n                            // by the rvalue reference, without which the\n                            // temporary object will be destroyed.\nstd::cout &lt;&lt; rr &lt;&lt; '\\n'; // Now we can use `rr` just like a normal string.\n</code></pre> <p>Golden rule: Anything that has a name is an lvalue.</p> <ul> <li>The rvalue reference has a name, so it is an lvalue.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#nrvo-move-and-copy-elision","title":"NRVO, Move and Copy Elision","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#returning-a-temporary-pure-rvalue","title":"Returning a Temporary (pure rvalue)","text":"<pre><code>std::string foo(const std::string &amp;a, const std::string &amp;b) {\n  return a + b; // a temporary\n}\nstd::string s = foo(a, b);\n</code></pre> <ul> <li>First, a temporary is generated to store the result of <code>a + b</code>.</li> <li>How is this temporary returned?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#returning-a-temporary-pure-rvalue_1","title":"Returning a Temporary (pure rvalue)","text":"<pre><code>std::string foo(const std::string &amp;a, const std::string &amp;b) {\n  return a + b; // a temporary\n}\nstd::string s = foo(a, b);\n</code></pre> <p>Since C++17, no copy or move is made here. The initialization of <code>s</code> is the same as</p> <pre><code>std::string s(a + b);\n</code></pre> <p>This is called copy elision.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#returning-a-named-object","title":"Returning a Named Object","text":"<pre><code>Dynarray concat(const Dynarray &amp;a, const Dynarray &amp;b) {\n  Dynarray result(a.size() + b.size());\n  for (std::size_t i = 0; i != a.size(); ++i)\n    result.at(i) = a.at(i);\n  for (std::size_t i = 0; i != b.size(); ++i)\n    result.at(a.size() + i) = b.at(i);\n  return result;\n}\na = concat(b, c);\n</code></pre> <ul> <li><code>result</code> is a local object of <code>concat</code>.</li> <li>Since C++11, <code>return result</code> performs a move initialization of a temporary object, say <code>tmp</code>.</li> <li>Then a move assignment to <code>a</code> is performed.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#named-return-value-optimization-nrvo","title":"Named Return Value Optimization, NRVO","text":"<pre><code>Dynarray concat(const Dynarray &amp;a, const Dynarray &amp;b) {\n  Dynarray result(a.size() + b.size());\n  // ...\n  return result;\n}\nDynarray a = concat(b, c); // Initialization\n</code></pre> <p>NRVO transforms this code to</p> <pre><code>// Pseudo C++ code.\nvoid concat(Dynarray &amp;result, const Dynarray &amp;a, const Dynarray &amp;b) {\n  // Pseudo C++ code. For demonstration only.\n  result.Dynarray::Dynarray(a.size() + b.size()); // construct in-place\n  // ...\n}\nDynarray a@; // Uninitialized.\nconcat(a@, b, c);\n</code></pre> <p>so that no copy or move is needed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#named-return-value-optimization-nrvo_1","title":"Named Return Value Optimization, NRVO","text":"<p>Note:</p> <ul> <li>NRVO was invented decades ago (even before C++98).</li> <li>NRVO is an optimization, but not mandatory.</li> <li>Even if NRVO is performed, the move constructor should still be available.</li> <li>Because the compiler can choose not to perform NRVO.</li> <li>The program should be syntactically correct (\"well-formed\"), no matter how the compiler treats it.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#summary","title":"Summary","text":"<p>Rvalue references</p> <ul> <li>are bound to rvalues, and extends the lifetime of the rvalue.</li> <li>Functions accepting <code>X &amp;&amp;</code> and <code>const X &amp;</code> can be overloaded.</li> <li>An rvalue reference is an lvalue.</li> </ul> <p>Move operations</p> <ul> <li>take ownership of resources from the other object.</li> <li>After a move operation, the moved-from object should be in a valid state that can be safely assigned to or destroyed.</li> <li><code>=default</code></li> <li>The rule of five: Define zero or five of the special member functions.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#summary_1","title":"Summary","text":"<p><code>std::move</code></p> <ul> <li>does not move anything. It only performs an lvalue-to-rvalue cast.</li> <li><code>std::move(x)</code> makes a promise that <code>x</code> can be safely moved from.</li> </ul> <p>In modern C++, unnecessary copies are greatly avoided by:</p> <ul> <li>copy-elision, which avoids the move or copy of temporary objects, and</li> <li>move, with the <code>return</code>ed lvalue treated as an rvalue, and</li> <li>NRVO, which constructs in-place the object to be initialized.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l17/l17.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) We seldom delete move operations. In most cases, we want rvalues to be copied if move is not possible. An explicitly deleted move operation will make rvalues not copyable, because deleted functions still participate in overload resolution.</p> <p>\\({}^{\\textcolor{red}{2}}\\) In that case, the move operations are implicitly deleted. But as noted by \\(\\textcolor{red}{1}\\), this will make copy operations not applicable to rvalues. The defect report CWG 1402 addressed this and was applied retroactively to C++11, making the implicitly deleted move operations ignored in overload resolution. Note that this change of behavior did not come into effect when the book C++ Primer, 5e was published.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html","title":"CS100 Lecture 18","text":"<p>Smart Pointers</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#contents","title":"Contents","text":"<ul> <li>Ideas</li> <li><code>std::unique_ptr</code></li> <li><code>std::shared_ptr</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#ideas","title":"Ideas","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#memory-management-is-difficult","title":"Memory management is difficult!","text":"<p>For raw pointers obtained from <code>new</code> / <code>new[]</code> expressions, a manual <code>delete</code> / <code>delete[]</code> is required.</p> <pre><code>void runGame(const std::vector&lt;Option&gt; &amp;options, const Settings &amp;settings) {\n  auto pWindow = new Window(settings.width, settings.height, settings.mode);\n  auto pGame = new Game(options, settings, pWindow);\n  // Run the game ...\n  while (true) {\n    auto key = getUserKeyAction();\n    // ...\n  }\n  delete pGame;   // You must not forget this.\n  delete pWindow; // You must not forget this.\n}\n</code></pre> <p>Will you always remember to <code>delete</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#will-you-always-remember-to-delete","title":"Will you always remember to <code>delete</code>?","text":"<pre><code>void runGame(const std::vector&lt;Option&gt; &amp;options, const Settings &amp;settings) {\n  auto pWindow = new Window(settings.width, settings.height, settings.mode);\n  auto pGame = new Game(options, settings, pWindow);\n  if (/* condition1 */) {\n    // ...\n    return; // `pWindow` and `pGame` should also be `delete`d here!\n  }\n  // Run the game ...\n  while (true) {\n    auto key = getUserKeyAction();\n    // ...\n    if (/* condition2 */) {\n      // ...\n      return; // `pWindow` and `pGame` should also be `delete`d here!\n    }\n  }\n  delete pGame;\n  delete pWindow;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#idea-make-use-of-destructors","title":"Idea: Make use of destructors.","text":"<pre><code>struct WindowPtr { // A \"smart pointer\".\n  Window *ptr;\n  WindowPtr(Window *p) : ptr(p) {}\n  ~WindowPtr() { delete ptr; } // The destructor will `delete` the object.\n};\n</code></pre> <p>When the control reaches the end of the scope in which the <code>WindowPtr</code> lives, the destructor of <code>WindowPtr</code> will be called automatically.</p> <pre><code>void runGame(const std::vector&lt;Option&gt; &amp;options, const Settings &amp;settings) {\n  WindowPtr pWindow(new Window(settings.width, settings.height, settings.mode));\n  if (/* condition1 */) {\n    // ...\n    return; // `pWindow` is destroyed automatically, with its destructor called.\n  }\n  // ...\n  // `pWindow` is destroyed automatically, with its destructor called.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#what-if-windowptr-is-copied","title":"What if <code>WindowPtr</code> is copied?","text":"<p>Now <code>WindowPtr</code> only has a compiler-generated copy constructor, which copies the value of <code>ptr</code>.</p> <pre><code>{\n  WindowPtr pWindow(new Window(settings.width, settings.height, settings.mode));\n  auto copy = pWindow; // `copy.ptr` and `pWindow.ptr` point to the same object!\n} // The object is deleted twice! Disaster!\n</code></pre> <p>What should be the behavior of <code>auto copy = pWindow;</code>? Possible designs are:</p> <ol> <li>Copy the object, as if <code>WindowPtr copy(new Window(*pWindow.ptr));</code>.</li> <li>Copy the pointer, as if <code>WindowPtr copy(pWindow.ptr);</code>.</li> <li>To avoid disasters caused by multiple <code>delete</code>s, some special design is needed.</li> <li>Disable it. If there is no unique reasonable design, disable that operation.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#what-if-windowptr-is-copied_1","title":"What if <code>WindowPtr</code> is copied?","text":"<p>What should be the behavior of <code>auto copy = pWindow;</code>? Possible designs are:</p> <ol> <li>Copy the object, as if <code>WindowPtr copy(new Window(*pWindow.ptr));</code>.</li> <li>\"Value semantics\"</li> <li>Typical example: Standard library containers. When you copy a <code>std::string</code>, a new string is created, with the contents copied.</li> <li>May be referred to as \"deep copy\" in some other languages.</li> <li>Copy the pointer, as if <code>WindowPtr copy(pWindow.ptr);</code>.</li> <li>To avoid disasters caused by multiple <code>delete</code>s, some special design is needed.</li> <li>\"Pointer semantics\", or \"Reference semantics\"</li> <li>\"shallow copy\" in some other languages.</li> <li>Disable it. If there is no unique reasonable design, disable that operation.</li> <li>In this case, <code>pWindow</code> exclusively owns the <code>Window</code> object.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#overview-of-smart-pointers","title":"Overview of smart pointers","text":"<p>A \"smart pointer\" is a pointer that manages its resources.</p> <p>Possible behaviors of copy of a smart pointer:</p> <ol> <li>Copy the object. (Value semantics)</li> <li>Standard library containers. e.g. <code>std::string</code>, <code>std::vector</code>, <code>std::set</code>, ...</li> <li>Copy the pointer, but with some special design. (Pointer semantics)</li> <li><code>std::shared_ptr&lt;T&gt;</code>. Defined in standard library file <code>&lt;memory&gt;</code>.</li> <li>Disable it. (Unique ownership)</li> <li><code>std::unique_ptr&lt;T&gt;</code>. Defined in standard library file <code>&lt;memory&gt;</code>.</li> </ol> <p>The smart pointers <code>std::shared_ptr&lt;T&gt;</code>, <code>std::unique_ptr&lt;T&gt;</code> and <code>std::weak_ptr&lt;T&gt;</code> are the C++'s answer to garbage collection.</p> <ul> <li><code>std::weak_ptr</code> is not covered in CS100.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#overview-of-smart-pointers_1","title":"Overview of smart pointers","text":"<p>The smart pointers <code>std::shared_ptr&lt;T&gt;</code>, <code>std::unique_ptr&lt;T&gt;</code> and <code>std::weak_ptr&lt;T&gt;</code> are the C++'s answer to garbage collection.</p> <p>Smart pointers support the similar operations as raw pointers: - <code>*sp</code> returns reference to the pointed-to object. - <code>sp-&gt;mem</code> is equivalent to <code>(*sp).mem</code>. - <code>sp</code> is contextually convertible to <code>bool</code>: It can be treated as a \"condition\".   - It can be placed at the \"condition\" part of <code>if</code>, <code>for</code>, <code>while</code>, <code>do</code> statements.   - It can be used as operands of <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> or the first operand of <code>?:</code>.   - In all cases, the conversion result is <code>true</code> iff <code>sp</code> holds an object (not \"null\").</p> <p>[Best practice] In modern C++, prefer smart pointers to raw pointers.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr","title":"<code>std::unique_ptr</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#design-unique-ownership-of-the-object","title":"Design: Unique ownership of the object","text":"<pre><code>class WindowPtr {\n  Window *ptr;\npublic:\n  WindowPtr(Window *p = nullptr) : ptr(p) {}\n  ~WindowPtr() { delete ptr; }\n\n\n\n};\n</code></pre> <p>A \"unique-pointer\" saves a raw pointer internally, pointing to the object it owns.</p> <p>When the unique-pointer is destroyed, it disposes of the object it owns.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#design-unique-ownership-of-the-object_1","title":"Design: Unique ownership of the object","text":"<pre><code>class WindowPtr {\n  Window *ptr;\npublic:\n  WindowPtr(Window *p = nullptr) : ptr(p) {}\n  ~WindowPtr() { delete ptr; }\n  WindowPtr(const WindowPtr &amp;) = delete;\n  WindowPtr &amp;operator=(const WindowPtr &amp;) = delete;\n\n\n};\n</code></pre> <p>The unique-pointer exclusively owns the object. Copying a unique-pointer is not allowed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#design-unique-ownership-of-the-object_2","title":"Design: Unique ownership of the object","text":"<pre><code>class WindowPtr {\n  Window *ptr;\npublic:\n  WindowPtr(Window *p = nullptr) : ptr(p) {}\n  ~WindowPtr() { delete ptr; }\n  WindowPtr(const WindowPtr &amp;) = delete;\n  WindowPtr &amp;operator=(const WindowPtr &amp;) = delete;\n  WindowPtr(WindowPtr &amp;&amp;other) noexcept : ptr(other.ptr) { other.ptr = nullptr; }\n  WindowPtr &amp;operator=(WindowPtr &amp;&amp;other) noexcept {\n    if (&amp;other != this) {\n      delete ptr; ptr = other.ptr; other.ptr = nullptr;\n    }\n    return *this;\n  }\n};\n</code></pre> <p>Move of a unique-pointer: transfer of ownership.</p> <ul> <li>Move-only type</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr_1","title":"<code>std::unique_ptr</code>","text":"<p>Like <code>std::vector</code>, <code>std::unique_ptr</code> is also a class template. It is not a type itself.</p> <ul> <li><code>std::unique_ptr&lt;PointeeType&gt;</code> is the complete type name, where <code>PointeeType</code> is the type of the object that it points to.</li> <li>For <code>T</code> \\(\\neq\\) <code>U</code>, <code>std::unique_ptr&lt;T&gt;</code> and <code>std::unique_ptr&lt;U&gt;</code> are two different and independent types.</li> </ul> <p>Same for <code>std::shared_ptr</code>, which we will talk about later.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#creating-a-stdunique_ptr-two-common-ways","title":"Creating a <code>std::unique_ptr</code>: Two common ways","text":"<ul> <li>Pass a pointer created by <code>new</code> to the constructor:</li> </ul> <p><code>cpp   std::unique_ptr&lt;Student&gt; p(new Student(\"Bob\", 2020123123));</code></p> <ul> <li>Here <code>&lt;Student&gt;</code> can be omitted. The compiler is able to deduce it.</li> <li> <p>Use <code>std::make_unique&lt;T&gt;</code>, and pass the initializers to it.   <code>cpp   std::unique_ptr&lt;Student&gt; p1 = std::make_unique&lt;Student&gt;(\"Bob\", 2020123123);   auto p2 = std::make_unique&lt;Student&gt;(\"Alice\", 2020321321);</code></p> </li> <li> <p><code>std::make_unique&lt;T&gt;(args...)</code> perfectly forwards the arguments <code>args...</code> to the constructor of <code>T</code>, as if the object were created by <code>new T(args...)</code>.</p> </li> <li><code>std::make_unique&lt;T&gt;</code> returns a <code>std::unique_ptr&lt;T&gt;</code> to the created object.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#default-initialization-of-a-stdunique_ptr","title":"Default initialization of a <code>std::unique_ptr</code>","text":"<pre><code>std::unique_ptr&lt;T&gt; up;\n</code></pre> <p>The default constructor of <code>std::unique_ptr&lt;T&gt;</code> initializes <code>up</code> to be a \"null pointer\".</p> <p><code>up</code> is in the state that does not own any object.</p> <ul> <li>This is a defined and deterministic behavior! It is not holding some indeterminate value.</li> <li>The standard library hates indeterminate values, just as we do.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-automatic-memory-management","title":"<code>std::unique_ptr</code>: Automatic memory management","text":"<pre><code>void foo() {\n  auto pAlice = std::make_unique&lt;Student&gt;(\"Alice\", 2020321321);\n  // Do something...\n  if (some_condition()) {\n    auto pBob = std::make_unique&lt;Studnet&gt;(\"Bob\", 2020123123);\n    // ...\n  } // `Student::~Student()` is called for Bob,\n    // because the lifetime of `pBob` ends.\n} // `Student::~Student()` is called for Alice,\n  // because the lifetime of `pAlice` ends.\n</code></pre> <p>A <code>std::unique_ptr</code> automatically calls the destructor once it gets destroyed or assigned a new value. - No manual <code>delete</code> needed!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-move-only","title":"<code>std::unique_ptr</code>: Move-only","text":"<pre><code>auto p = std::make_unique&lt;std::string&gt;(5, 'c');\nstd::cout &lt;&lt; *p &lt;&lt; std::endl;                  // Prints \"ccccc\".\nauto q = p;                                    // Error. Copy is not allowed.\nauto r = std::move(p);                         // Correct.\n// Now the ownership of this string has been transferred to `r`.\nstd::cout &lt;&lt; *r &lt;&lt; std::endl; // Prints \"ccccc\".\nif (!p) // true\n  std::cout &lt;&lt; \"p is \\\"null\\\" now.\" &lt;&lt; std::endl;\n</code></pre> <p><code>std::unique_ptr</code> is not copyable, but only movable. - Remember, only one <code>std::unique_ptr</code> can point to the managed object. - Move of a <code>std::unique_ptr</code> is the transfer of ownership of the managed object.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-move-only_1","title":"<code>std::unique_ptr</code>: Move-only","text":"<pre><code>auto p = std::make_unique&lt;std::string&gt;(5, 'c');\nstd::cout &lt;&lt; *p &lt;&lt; std::endl;                  // Prints \"ccccc\".\nauto q = p;                                    // Error. Copy is not allowed.\nauto r = std::move(p);                         // Correct.\n// Now the ownership of this string has been transferred to `r`.\nstd::cout &lt;&lt; *r &lt;&lt; std::endl; // Prints \"ccccc\".\nif (!p) // true\n  std::cout &lt;&lt; \"p is \\\"null\\\" now.\" &lt;&lt; std::endl;\n</code></pre> <p>After <code>auto up2 = std::move(up1);</code>, <code>up1</code> becomes \"null\". The object that <code>up1</code> used to manage now belongs to <code>up2</code>.</p> <p>The assignment <code>up2 = std::move(up1)</code> destroys the object that <code>up2</code> used to manage, and lets <code>up2</code> take over the object managed by <code>up1</code>. After that, <code>up1</code> becomes \"null\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#express-your-intent-precisely","title":"Express your intent precisely.","text":"<p>You may accidentally write the following code:</p> <pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre> <p>The compiler gives an error, complaining about the use of deleted copy constructor.</p> <p>What are you going to do?</p> <p>A. Change it to <code>auto p = std::move(pWindow);</code>. B. Give up on smart pointers, and switch back to raw pointers. C. Copy-and-paste the compiler output and ask ChatGPT.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#express-your-intent-precisely_1","title":"Express your intent precisely.","text":"<p>You may accidentally write the following code:</p> <pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre> <p>The compiler gives an error, complaining about the use of deleted copy constructor.</p> <ol> <li>Syntactically, a <code>std::unique_ptr</code> is not copyable, but you are copying it. (Direct cause of the error)</li> <li>Logically, a <code>std::unique_ptr</code> must exclusively manage the pointed-to object. Why would you copy a <code>std::unique_ptr</code>?</li> <li>The root cause of the error is related to your intent: What are you going to do with <code>p</code>?</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#express-your-intent-precisely_2","title":"Express your intent precisely.","text":"<pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre> <p>What are you going to do with <code>p</code>?</p> <ul> <li>If you want to copy the pointed-to object, change it to <code>auto p = std::make_unique&lt;Window&gt;(*pWindow);</code>.</li> <li>If you want <code>p</code> to be just an observer, write <code>auto p = pWindow.get();</code>.</li> <li><code>pWindow.get()</code> returns a raw pointer to the object, which is of type <code>Window *</code>.</li> <li>Be careful! As an observer, <code>p</code> should never interfere in the lifetime of the object. A simple <code>delete p;</code> will cause disaster.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#express-your-intent-precisely_3","title":"Express your intent precisely.","text":"<pre><code>// Given that `pWindow` is a `std::unique_ptr&lt;Window&gt;`.\nauto p = pWindow; // Oops, attempting to copy a `std::unique_ptr`.\n</code></pre> <p>What are you going to do with <code>p</code>?</p> <ul> <li>If you want <code>p</code> to take over the object managed by <code>pWindow</code>, change it to <code>auto p = std::move(pWindow);</code>.</li> <li>Be careful! <code>pWindow</code> will no longer own that object.</li> <li>If you want to <code>p</code> to be another smart pointer that shares the ownership with <code>pWindow</code>, <code>std::unique_ptr</code> is not suitable here. \\(\\Rightarrow\\) See <code>std::shared_ptr</code> later.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#returning-a-stdunique_ptr","title":"Returning a <code>std::unique_ptr</code>","text":"<pre><code>struct Window {\n  // A typical \"factory\" function.\n  static std::unique_ptr&lt;Window&gt; create(const Settings &amp;settings) {\n    auto pW = std::make_unique&lt;Window&gt;(/* some arguments */);\n    logWindowCreation(pW);\n    // ...\n    return pW;\n  }\n};\nauto state = Window::create(my_settings);\n</code></pre> <p>A temporary is move-constructed from <code>pW</code>, and then is used to move-construct <code>state</code>.</p> <ul> <li>These two moves can be optimized out by NRVO.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#other-operations-on-stdunique_ptr","title":"Other operations on <code>std::unique_ptr</code>","text":"<p><code>up.reset()</code>, <code>up.release()</code>, <code>up1.swap(up2)</code>, <code>up1 == up2</code>, etc.</p> <p>Full list of operations supported on a <code>std::unique_ptr</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-for-array-type","title":"<code>std::unique_ptr</code> for array type","text":"<p>By default, the destructor of <code>std::unique_ptr&lt;T&gt;</code> uses a <code>delete</code> expression to destroy the object it holds.</p> <p>What happens if <code>std::unique_ptr&lt;T&gt; up(new T[n]);</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-for-array-type_1","title":"<code>std::unique_ptr</code> for array type","text":"<p>By default, the destructor of <code>std::unique_ptr&lt;T&gt;</code> uses a <code>delete</code> expression to destroy the object it holds.</p> <p>What happens if <code>std::unique_ptr&lt;T&gt; up(new T[n]);</code>?</p> <ul> <li>The memory is obtained using <code>new[]</code>, but deallocated by <code>delete</code>! Undefined behavior.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-for-array-type_2","title":"<code>std::unique_ptr</code> for array type","text":"<p>A template specialization: <code>std::unique_ptr&lt;T[]&gt;</code>.</p> <ul> <li>Specially designed to represent pointers that point to a \"dynamic array\" of objects.</li> <li>It has some array-specific operators, e.g. <code>operator[]</code>. In contrast, it does not support <code>operator*</code> and <code>operator-&gt;</code>.</li> <li>It uses <code>delete[]</code> instead of <code>delete</code> to destroy the objects.</li> </ul> <pre><code>auto up = std::make_unique&lt;int[]&gt;(n);\nstd::unique_ptr&lt;int[]&gt; up2(new int[n]{}); // equivalent\nfor (auto i = 0; i != n; ++i)\n  std::cout &lt;&lt; up[i] &lt;&lt; ' ';\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-for-array-type_3","title":"~~<code>std::unique_ptr</code> for array type~~","text":"<p>~~A template specialization: <code>std::unique_ptr&lt;T[]&gt;</code>.~~</p> <p>~~- Specially designed to represent pointers that point to a \"dynamic array\" of objects.~~ ~~- It has some array-specific operators, e.g. <code>operator[]</code>. In contrast, it does not support <code>operator*</code> and <code>operator-&gt;</code>.~~ ~~- It uses <code>delete[]</code> instead of <code>delete</code> to destroy the objects.~~</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#use-standard-library-containers-instead","title":"Use standard library containers instead!","text":"<p>They almost always do a better job. <code>std::unique_ptr&lt;T[]&gt;</code> is seldom needed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdunique_ptr-is-zero-overhead","title":"<code>std::unique_ptr</code> is zero-overhead.","text":"<p><code>std::unique_ptr</code> stores nothing more than a raw pointer. \\({}^{\\textcolor{red}{1}}\\)</p> <p>It does nothing more than better copy / move control and automatic object destruction.</p> <p>Zero-overhead: Using a <code>std::unique_ptr</code> does not cost more time or space than using raw pointers.</p> <p>[Best practice] Use <code>std::unique_ptr</code> for exclusive-ownership resource management.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdshared_ptr","title":"<code>std::shared_ptr</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#motivation","title":"Motivation","text":"<p>A <code>std::unique_ptr</code> exclusively owns an object, but sometimes this is not convenient.</p> <pre><code>struct WindowManager {\n  void addWindow(const std::unique_ptr&lt;Window&gt; &amp;pW) {\n    mWindows.push_back(pW); // Error. Attempts to copy a `std::unique_ptr`.\n  }\nprivate:\n  std::vector&lt;std::unique_ptr&lt;Window&gt;&gt; mWindows;\n};\n\nstruct Window {\n  static std::unique_ptr&lt;Window&gt; create(const Settings &amp;settings) {\n    auto pW = std::make_unique&lt;Window&gt;(/* some arguments */);\n    logWindowCreation(pW);\n    settings.getWindowManager().addWindow(pW);\n    return pW;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#motivation_1","title":"Motivation","text":"<p>Design a \"shared-pointer\" that allows the object it manages to be shared.</p> <p>When should the object be destroyed?</p> <ul> <li>A <code>std::unique_ptr</code> destroys the object it manages when the pointer itself is destroyed.</li> <li>If we allow many shared-pointers to point to the same object, how can we know when to destroy that object?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#idea-reference-counting","title":"Idea: Reference counting","text":"<p>Set a counter that counts how many <code>WindowPtr</code>s are pointing to it:</p> <pre><code>struct WindowWithCounter {\n  Window theWindow;\n  int refCount = 1;\n};\n</code></pre> <p>When a new object is created by a <code>WindowPtr</code>, set the <code>refCount</code> to <code>1</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#idea-reference-counting_1","title":"Idea: Reference counting","text":"<p>When a <code>WindowPtr</code> is copied, let it point to the same object, and increment the counter.</p> <pre><code>class WindowPtr {\n  WindowWithCounter *ptr;\npublic:\n  WindowPtr(const WindowPtr &amp;other) : ptr(other.ptr) { ++ptr-&gt;refCount; }\n\n\n\n\n\n\n\n\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#idea-reference-counting_2","title":"Idea: Reference counting","text":"<p>For copy assignment: the counter of the old object should be decremented.</p> <ul> <li>If it reaches zero, destroy that object!</li> </ul> <pre><code>class WindowPtr {\n  WindowWithCounter *ptr;\npublic:\n  WindowPtr(const WindowPtr &amp;other) : ptr(other.ptr) { ++ptr-&gt;refCount; }\n  WindowPtr &amp;operator=(const WindowPtr &amp;other) {\n    if (--ptr-&gt;refCount == 0)\n      delete ptr;\n    ptr = other.ptr;\n    ++ptr-&gt;refCount;\n    return *this;\n  }\n};\n</code></pre> <p>* Is this correct?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#idea-reference-counting_3","title":"Idea: Reference counting","text":"<p>Self-assignment safe!!!</p> <pre><code>class WindowPtr {\n  WindowWithCounter *ptr;\npublic:\n  WindowPtr(const WindowPtr &amp;other) : ptr(other.ptr) { ++ptr-&gt;refCount; }\n  WindowPtr &amp;operator=(const WindowPtr &amp;other) {\n    ++other.ptr-&gt;refCount;\n    if (--ptr-&gt;refCount == 0)\n      delete ptr;\n    ptr = other.ptr;\n    return *this;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#idea-reference-counting_4","title":"Idea: Reference counting","text":"<p>Destructor: decrement the counter, and destroy the object if the counter reaches zero.</p> <pre><code>class WindowPtr {\n  WindowWithCounter *ptr;\npublic:\n  WindowPtr(const WindowPtr &amp;other) : ptr(other.ptr) { ++ptr-&gt;refCount; }\n  WindowPtr &amp;operator=(const WindowPtr &amp;other) {\n    ++other.ptr-&gt;refCount;\n    if (--ptr-&gt;refCount == 0)\n      delete ptr;\n    ptr = other.ptr;\n    return *this;\n  }\n  ~WindowPtr() {\n    if (--ptr-&gt;refCount == 0)\n      delete ptr;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#idea-reference-counting_5","title":"Idea: Reference counting","text":"<p>Move: Just \"steal\" the object. It is also the transfer of ownership.</p> <pre><code>class WindowPtr {\n  WindowWithCounter *ptr;\npublic:\n  WindowPtr(WindowPtr &amp;&amp;other) noexcept : ptr(other.ptr) { other.ptr = nullptr; }\n  WindowPtr &amp;operator=(WindowPtr &amp;&amp;other) noexcept {\n    if (this != &amp;other) {\n      if (--ptr-&gt;refCount == 0)\n        delete ptr;\n      ptr = other.ptr; other.ptr = nullptr;\n    }\n    return *this;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#reference-counting","title":"Reference counting","text":"<p>By maintaining a variable that counts how many shared-pointers are pointing to the object, we can know when to destroy the object.</p> <p>This strategy is adopted by Python.</p> <p>It can prevent memory leak in many cases, but not all cases! \\(\\Rightarrow\\) See the question in the end of this lecture's slides.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#stdshared_ptr_1","title":"<code>std::shared_ptr</code>","text":"<p>A smart pointer that uses reference counting to manage shared objects.</p> <p>Create a <code>shared_ptr</code>:</p> <pre><code>std::shared_ptr&lt;Type&gt; sp2(new Type(args));\nauto sp = std::make_shared&lt;Type&gt;(args); // equivalent, but better\n</code></pre> <p>For example:</p> <pre><code>// sp points to a string \"cccccccccc\".\nauto sp = std::make_shared&lt;std::string&gt;(10, 'c');\n\nauto pWindow = std::make_shared&lt;Window&gt;(80, 24, my_settings.mode);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#create-a-shared_ptr","title":"Create a <code>shared_ptr</code>","text":"<p>Note: For <code>std::unique_ptr</code>, both of the following ways are ok (since C++17):</p> <pre><code>auto up = std::make_unique&lt;Type&gt;(args);\nstd::unique_ptr&lt;Type&gt; up2(new Type(args));\n</code></pre> <p>For <code>std::shared_ptr</code>, <code>std::make_shared</code> is preferable to directly using <code>new</code>.</p> <pre><code>auto sp = std::make_shared&lt;Type&gt;(args);    // preferred\nstd::shared_ptr&lt;Type&gt; sp2(new Type(args)); // ok, but less preferred\n</code></pre> <p>Read Effective Modern C++ Item 21. (Note that this book is based on C++14.)</p> <p>[Best practice] Prefer <code>std::make_shared</code> to directly using <code>new</code> when creating a <code>std::shared_ptr</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#operations","title":"Operations","text":"<p><code>*</code> and <code>-&gt;</code> can be used as if it is a raw pointer:</p> <pre><code>auto sp = std::make_shared&lt;std::string&gt;(10, 'c');\nstd::cout &lt;&lt; *sp &lt;&lt; std::endl;        // \"cccccccccc\"\nstd::cout &lt;&lt; sp-&gt;size() &lt;&lt; std::endl; // \"10\"\n</code></pre> <p><code>sp.use_count()</code>: The value of the reference counter.</p> <pre><code>auto sp = std::make_shared&lt;std::string&gt;(10, 'c');\n{\n  auto sp2 = sp;\n  std::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl; // 2\n} // `sp2` is destroyed, but the managed object is not destroyed.\nstd::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl;   // 1\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#operations_1","title":"Operations","text":"<p>Full list of supported operations on <code>std::shared_ptr</code>.</p> <p><code>std::shared_ptr</code> is relatively easy to use, since you are free to create many <code>std::shared_ptr</code>s pointing to one object.</p> <p>However, <code>std::shared_ptr</code> has time and space overhead. Copy of a <code>std::shared_ptr</code> requires maintenance of reference counter.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#summary","title":"Summary","text":"<p><code>std::unique_ptr</code> - Exclusive-ownership. - Move-only. Move is the transfer of ownership. - Zero-overhead.</p> <p><code>std::shared_ptr</code> - Shared-ownership. - Uses reference counting.   - Copy increments the reference counter.   - When the counter is decremented to zero, the object is destroyed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#question","title":"Question","text":"<p>Does <code>std::shared_ptr</code> prevent memory leak in all cases? Think about what happens in the following code.</p> <pre><code>struct Node {\n  int value;\n  std::shared_ptr&lt;Node&gt; next;\n  Node(int x, std::shared_ptr&lt;Node&gt; p) : value{x}, next{std::move(p)} {}\n};\nvoid foo() {\n  auto p = std::make_shared&lt;Node&gt;(1, nullptr);\n  p-&gt;next = std::make_shared&lt;Node&gt;(2, p);\n  p.reset();\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l18/l18.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) The deleter that a <code>std::unique_ptr</code> uses is customizable, which also has to be stored in a <code>std::unique_ptr</code>. By default, <code>std::default_delete</code> is used that performs <code>delete ptr;</code> to destroy the object and release the memory. <code>std::unique_ptr</code> often uses some space-saving tricks to store the deleter. If the deleter is \"stateless\" (e.g. an object with no non-<code>static</code> data members), it may be stored with no unique address so that no extra space is required. <code>std::default_delete</code> belongs to this kind. Therefore, <code>sizeof(std::unique_ptr&lt;T&gt;)</code> is often reasonably equal to <code>sizeof(T *)</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html","title":"CS100 Lecture 19","text":"<p>Operator Overloading</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#contents","title":"Contents","text":"<ul> <li>Basics</li> <li>Example: <code>Rational</code></li> <li>Arithmetic and relational operators</li> <li>Increment and decrement operators (<code>++</code>, <code>--</code>)</li> <li>IO operators (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>)</li> <li>Example: <code>Dynarray</code></li> <li>Subscript operator (<code>[]</code>)</li> <li>Example: <code>WindowPtr</code></li> <li>Dereference (indirection) operator (<code>*</code>)</li> <li>Member access through pointer (<code>-&gt;</code>)</li> <li>User-defined type conversions</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#basics","title":"Basics","text":"<p>Operator overloading: Provide the behaviors of operators for class types.</p> <p>We have already seen some:</p> <ul> <li>The copy assignment operator and the move assignment operator are two special overloads for <code>operator=</code>.</li> <li>The IOStream library provides overloaded <code>operator&lt;&lt;</code> and <code>operator&gt;&gt;</code> to perform input and output.</li> <li>The string library provides <code>operator+</code> for concatenation of strings, and <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code> for comparison in lexicographical order.</li> <li>Standard library containers and <code>std::string</code> have <code>operator[]</code>.</li> <li>Smart pointers have <code>operator*</code> and <code>operator-&gt;</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#basics_1","title":"Basics","text":"<p>Overloaded operators can be defined in two forms:</p> <ul> <li> <p>as a member function, in which the leftmost operand is bound to <code>this</code>:</p> </li> <li> <p><code>a[i]</code> \\(\\Leftrightarrow\\) <code>a.operator[](i)</code></p> </li> <li><code>a = b</code> \\(\\Leftrightarrow\\) <code>a.operator=(b)</code></li> <li><code>*a</code> \\(\\Leftrightarrow\\) <code>a.operator*()</code></li> <li> <p><code>f(arg1, arg2, arg3, ...)</code> \\(\\Leftrightarrow\\) <code>f.operator()(arg1, arg2, arg3, ...)</code></p> </li> <li> <p>as a non-member function:</p> </li> <li> <p><code>a == b</code> \\(\\Leftrightarrow\\) <code>operator==(a, b)</code></p> </li> <li><code>a + b</code> \\(\\Leftrightarrow\\) <code>operator+(a, b)</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#basics_2","title":"Basics","text":"<p>Some operators cannot be overloaded:</p> <p><code>obj.mem</code>, <code>::</code>, <code>?:</code>, <code>obj.*memptr</code> (not covered in CS100)</p> <p>Some operators can be overloaded, but are strongly not recommended:</p> <p><code>cond1 &amp;&amp; cond2</code>, <code>cond1 || cond2</code></p> <ul> <li>Reason: Since <code>x &amp;&amp; y</code> would become <code>operator&amp;&amp;(x, y)</code>, there is no way to overload <code>&amp;&amp;</code> (or <code>||</code>) that preserves the short-circuit evaluation property.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#basics_3","title":"Basics","text":"<ul> <li>At least one operand should be a class type. Modifying the behavior of operators on built-in types is not allowed.</li> </ul> <p><code>cpp   int operator+(int, int);   // Error.   MyInt operator-(int, int); // Still error.</code> - Inventing new operators is not allowed.</p> <p><code>cpp   double operator**(double x, double exp); // Error.</code> - Overloading does not modify the associativity, precedence and the operands' evaluation order.   <code>cpp   std::cout &lt;&lt; a + b; // Equivalent to `std::cout &lt;&lt; (a + b)`.</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#example-rational","title":"Example: <code>Rational</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#a-class-for-rational-numbers","title":"A class for rational numbers","text":"<pre><code>class Rational {\n  int m_num;        // numerator\n  unsigned m_denom; // denominator\n  void simplify() { // Private, because this is our implementation detail.\n    int gcd = std::gcd(m_num, m_denom); // std::gcd in &lt;numeric&gt; (since C++17)\n    m_num /= gcd; m_denom /= gcd;\n  }\npublic:\n  Rational(int x = 0) : m_num{x}, m_denom{1} {} // Also a default constructor.\n  Rational(int num, unsigned denom) : m_num{num}, m_denom{denom} { simplify(); }\n  double to_double() const {\n    return static_cast&lt;double&gt;(m_num) / m_denom;\n  }\n};\n</code></pre> <p>We want to have arithmetic operators supported for <code>Rational</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-arithmetic-operators","title":"<code>Rational</code>: arithmetic operators","text":"<p>A good way: define <code>operator+=</code> and the unary <code>operator-</code>, and then define other operators in terms of them.</p> <pre><code>class Rational {\n  friend Rational operator-(const Rational &amp;); // Unary `operator-` as in `-x`.\npublic:\n  Rational &amp;operator+=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom) // Be careful with `unsigned`!\n            + static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this; // `x += y` should return a reference to `x`.\n  }\n};\nRational operator-(const Rational &amp;x) {\n  return {-x.m_num, x.m_denom};\n  // The above is equivalent to `return Rational(-x.m_num, x.m_denom);`.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-arithmetic-operators_1","title":"<code>Rational</code>: arithmetic operators","text":"<p>Define the arithmetic operators in terms of the compound assignment operators.</p> <pre><code>class Rational {\npublic:\n  Rational &amp;operator-=(const Rational &amp;rhs) {\n    // Makes use of `operator+=` and the unary `operator-`.\n    return *this += -rhs;\n  }\n};\nRational operator+(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return Rational(lhs) += rhs; // Makes use of `operator+=`.\n}\nRational operator-(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return Rational(lhs) -= rhs; // Makes use of `operator-=`.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#best-practice-avoid-repetition","title":"[Best practice] Avoid repetition.","text":"<pre><code>class Rational {\npublic:\n  Rational &amp;operator+=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom)\n           + static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this;\n  }\n};\n</code></pre> <p>The arithmetic operators for <code>Rational</code> are simple yet requires carefulness. - Integers with different signed-ness need careful treatment. - Remember to <code>simplify()</code>.</p> <p>Fortunately, we only need to pay attention to these things in <code>operator+=</code>. Everything will be right if <code>operator+=</code> is right.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#best-practice-avoid-repetition_1","title":"[Best practice] Avoid repetition.","text":"<p>The code would be very error-prone if you implement every function from scratch!</p> <pre><code>class Rational {\npublic:\n  Rational &amp;operator+=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom)\n           + static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this;\n  }\n  Rational &amp;operator-=(const Rational &amp;rhs) {\n    m_num = m_num * static_cast&lt;int&gt;(rhs.m_denom)\n           - static_cast&lt;int&gt;(m_denom) * rhs.m_num;\n    m_denom *= rhs.m_denom;\n    simplify();\n    return *this;\n  }\n  friend Rational operator+(const Rational &amp;,\n                            const Rational &amp;);\n  friend Rational operator-(const Rational &amp;,\n                            const Rational &amp;);\n};\n</code></pre> <pre><code>Rational operator+(const Rational &amp;lhs,\n                   const Rational &amp;rhs) {\n  return {\n    lhs.m_num * static_cast&lt;int&gt;(rhs.m_denom)\n        + static_cast&lt;int&gt;(lhs.m_denom) * rhs.lhs,\n    lhs.m_denom * rhs.m_denom\n  };\n}\nRational operator-(const Rational &amp;lhs,\n                   const Rational &amp;rhs) {\n  return {\n    lhs.m_num * static_cast&lt;int&gt;(rhs.m_denom)\n        - static_cast&lt;int&gt;(lhs.m_denom) * rhs.lhs,\n    lhs.m_denom * rhs.m_denom\n  };\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-arithmetic-operators_2","title":"<code>Rational</code>: arithmetic operators","text":"<p>Exercise: Define <code>operator*</code> (multiplication) and <code>operator/</code> (division) as well as <code>operator*=</code> and <code>operator/=</code> for <code>Rational</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-arithmetic-and-relational-operators","title":"<code>Rational</code>: arithmetic and relational operators","text":"<p>What if we define them (say, <code>operator+</code>) as member functions?</p> <pre><code>class Rational {\npublic:\n  Rational(int x = 0) : m_num{x}, m_denom{1} {}\n  Rational operator+(const Rational &amp;rhs) const {\n    return {\n      m_num * static_cast&lt;int&gt;(rhs.m_denom)\n          + static_cast&lt;int&gt;(m_denom) * rhs.m_num,\n      m_denom * rhs.m_denom\n    };\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-arithmetic-and-relational-operators_1","title":"<code>Rational</code>: arithmetic and relational operators","text":"<p>What if we define them (say, <code>operator+</code>) as member functions?</p> <pre><code>class Rational {\npublic:\n  Rational(int x = 0) : m_num{x}, m_denom{1} {}\n  Rational operator+(const Rational &amp;rhs) const {\n    // ...\n  }\n};\n</code></pre> <pre><code>Rational r = some_value();\nauto s = r + 0; // OK, `r.operator+(0)`, effectively `r.operator+(Rational(0))`\nauto t = 0 + r; // Error! `0.operator+(r)` ???\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-arithmetic-and-relational-operators_2","title":"<code>Rational</code>: arithmetic and relational operators","text":"<p>To allow implicit conversions on both sides, the operator should be defined as non-member functions.</p> <pre><code>Rational r = some_value();\nauto s = r + 0; // OK, `operator+(r, 0)`, effectively `operator+(r, Rational(0))`\nauto t = 0 + r; // OK, `operator+(0, r)`, effectively `operator+(Rational(0), r)`\n</code></pre> <p>[Best practice] The \"symmetric\" operators, whose operands are often exchangeable, often should be defined as non-member functions.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-relational-operators","title":"<code>Rational</code>: relational operators","text":"<p>Define <code>&lt;</code> and <code>==</code>, and define others in terms of them. (Before C++20)</p> <ul> <li>Since C++20: Define <code>==</code> and <code>&lt;=&gt;</code>, and the compiler will generate others.</li> </ul> <p>A possible way: Use <code>to_double</code> and compare the floating-point values.</p> <pre><code>bool operator&lt;(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return lhs.to_double() &lt; rhs.to_double();\n}\n</code></pre> <ul> <li>This does not require <code>operator&lt;</code> to be a <code>friend</code>.</li> <li>However, this is subject to floating-point errors.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-ralational-operators","title":"<code>Rational</code>: ralational operators","text":"<p>Another way (possibly better):</p> <pre><code>class Rational {\n  friend bool operator&lt;(const Rational &amp;, const Rational &amp;);\n  friend bool operator==(const Rational &amp;, const Rational &amp;);\n};\nbool operator&lt;(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return static_cast&lt;int&gt;(rhs.m_denom) * lhs.m_num\n        &lt; static_cast&lt;int&gt;(lhs.m_denom) * rhs.m_num;\n}\nbool operator==(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return lhs.m_num == rhs.m_num &amp;&amp; lhs.m_denom == rhs.m_denom;\n}\n</code></pre> <p>If there are member functions to obtain the numerator and the denominator, these functions don't need to be <code>friend</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-relational-operators_1","title":"<code>Rational</code>: relational operators","text":"<p>[Best practice] Avoid repetition.</p> <p>Define others in terms of <code>&lt;</code> and <code>==</code>:</p> <pre><code>bool operator&gt;(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return rhs &lt; lhs;\n}\nbool operator&lt;=(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return !(lhs &gt; rhs);\n}\nbool operator&gt;=(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return !(lhs &lt; rhs);\n}\nbool operator!=(const Rational &amp;lhs, const Rational &amp;rhs) {\n  return !(lhs == rhs);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#relational-operators","title":"Relational operators","text":"<p>Define relational operators in a consistent way:</p> <ul> <li><code>a != b</code> should mean <code>!(a == b)</code></li> <li><code>!(a &lt; b)</code> and <code>!(a &gt; b)</code> should imply <code>a == b</code></li> </ul> <p>C++20 has devoted some efforts to the design of consistent comparison: P0515r3.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#relational-operators_1","title":"Relational operators","text":"<p>Avoid abuse of relational operators:</p> <pre><code>struct Point2d { double x, y; };\nbool operator&lt;(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x; // Is this the unique, best behavior?\n}\n// Much better design: Use a named function.\nbool less_in_x(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x;\n}\n</code></pre> <p>[Best practice] Operators should be used for operations that are likely to be unambiguous to users. - If an operator has plausibly more than one interpretation, use named functions instead. Function names can convey more information.</p> <p><code>std::string</code> has <code>operator+</code> for concatenation. Why doesn't <code>std::vector</code> have one?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#and-","title":"<code>++</code> and <code>--</code>","text":"<p><code>++</code> and <code>--</code> are often defined as members, because they modify the object.</p> <p>To differentiate the postfix version <code>x++</code> and the prefix version <code>++x</code>: The postfix version has a parameter of type <code>int</code>.</p> <ul> <li>The compiler will translate <code>++x</code> to <code>x.operator++()</code>, <code>x++</code> to <code>x.operator++(0)</code>.</li> </ul> <pre><code>class Rational {\npublic:\n  Rational &amp;operator++() { ++m_num; simplify(); return *this; }\n  Rational operator++(int) { // This `int` parameter is not used.\n    // The postfix version is almost always defined like this.\n    auto tmp = *this;\n    ++*this; // Makes use of the prefix version.\n    return tmp;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#and-_1","title":"<code>++</code> and <code>--</code>","text":"<pre><code>class Rational {\npublic:\n  Rational &amp;operator++() { ++m_num; simplify(); return *this; }\n  Rational operator++(int) { // This `int` parameter is not used.\n    // The postfix version is almost always defined like this.\n    auto tmp = *this;\n    ++*this; // Make use of the prefix version.\n    return tmp;\n  }\n};\n</code></pre> <p>The prefix version returns reference to <code>*this</code>, while the postfix version returns a copy of <code>*this</code> before incrementation.</p> <ul> <li>Same as the built-in behaviors.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#io-operators","title":"IO operators","text":"<p>Implement <code>std::cin &gt;&gt; r</code> and <code>std::cout &lt;&lt; r</code>.</p> <p>Input operator:</p> <pre><code>std::istream &amp;operator&gt;&gt;(std::istream &amp;, Rational &amp;);\n</code></pre> <p>Output operator:</p> <pre><code>std::ostream &amp;operator&lt;&lt;(std::ostream &amp;, const Rational &amp;);\n</code></pre> <ul> <li><code>std::cin</code> is of type <code>std::istream</code>, and <code>std::cout</code> is of type <code>std::ostream</code>.</li> <li>The left-hand side operand should be returned, so that we can write</li> </ul> <p><code>cpp   std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; std::cout &lt;&lt; a &lt;&lt; b &lt;&lt; c;</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-output-operator","title":"<code>Rational</code>: output operator","text":"<pre><code>class Rational {\n  friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;, const Rational &amp;);\n};\nstd::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Rational &amp;r) {\n  return os &lt;&lt; r.m_num &lt;&lt; '/' &lt;&lt; r.m_denom;\n}\n</code></pre> <p>If there are member functions to obtain the numerator and the denominator, it don't have to be a <code>friend</code>.</p> <pre><code>std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Rational &amp;r) {\n  return os &lt;&lt; r.get_numerator() &lt;&lt; '/' &lt;&lt; r.get_denominator();\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#rational-input-operator","title":"<code>Rational</code>: input operator","text":"<p>Suppose the input format is <code>a b</code> for the rational number \\(\\dfrac ab\\), where <code>a</code> and <code>b</code> are integers.</p> <pre><code>std::istream &amp;operator&gt;&gt;(std::istream &amp;is, Rational &amp;r) {\n  int x, y; is &gt;&gt; x &gt;&gt; y;\n  if (!is) { // Pay attention to input failures!\n    x = 0;\n    y = 1;\n  }\n  if (y &lt; 0) { y = -y; x = -x; }\n  r = Rational(x, y);\n  return is;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#example-dynarray","title":"Example: <code>Dynarray</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#operator","title":"<code>operator[]</code>","text":"<pre><code>class Dynarray {\npublic:\n  int &amp;operator[](std::size_t n) {\n    return m_storage[n];\n  }\n  const int &amp;operator[](std::size_t n) const {\n    return m_storage[n];\n  }\n};\n</code></pre> <p>The use of <code>a[i]</code> is interpreted as <code>a.operator[](i)</code>.</p> <p>(C++23 allows <code>a[i, j, k]</code>!)</p> <p>Homework: Define <code>operator[]</code> and relational operators for <code>Dynarray</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#example-windowptr","title":"Example: <code>WindowPtr</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#windowptr-indirection-dereference-operator","title":"<code>WindowPtr</code>: indirection (dereference) operator","text":"<p>Recall the <code>WindowPtr</code> class we defined in the previous lecture.</p> <pre><code>struct WindowWithCounter {\n  Window theWindow;\n  int refCount = 1;\n};\nclass WindowPtr {\n  WindowWithCounter *m_ptr;\npublic:\n  Window &amp;operator*() const { // Why should it be const?\n    return m_ptr-&gt;theWindow;\n  }\n};\n</code></pre> <p>We want <code>*sp</code> to return reference to the managed object.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#windowptr-indirection-derefernce-operator","title":"<code>WindowPtr</code>: indirection (derefernce) operator","text":"<p>Why should <code>operator*</code> be <code>const</code>?</p> <pre><code>class WindowPtr {\n  WindowWithCounter *m_ptr;\npublic:\n  Window &amp;operator*() const {\n    return m_ptr-&gt;theWindow;\n  }\n};\n</code></pre> <p>On a <code>const WindowPtr</code> (\"top-level\" <code>const</code>), obtaining a non-<code>const</code> reference to the managed object may still be allowed.</p> <ul> <li>The (smart) pointer is <code>const</code>, but the managed object is not.</li> <li><code>this</code> is <code>const WindowPtr *</code>, so <code>m_ptr</code> is <code>WindowWithCounter *const</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#windowptr-member-access-through-pointer","title":"<code>WindowPtr</code>: member access through pointer","text":"<p>To make <code>operator-&gt;</code> consistent with <code>operator*</code> (make <code>ptr-&gt;mem</code> equivalent to <code>(*ptr).mem</code>), <code>operator-&gt;</code> is almost always defined like this:</p> <pre><code>class WindowPtr {\npublic:\n  Window *operator-&gt;() const {\n    return std::addressof(operator*());\n  }\n};\n</code></pre> <p><code>std::addressof(x)</code> is almost always equivalent to <code>&amp;x</code>, but the latter may not return the address of <code>x</code> if <code>operator&amp;</code> for <code>x</code> has been overloaded!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#user-defined-type-conversions","title":"User-defined type conversions","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#type-conversions","title":"Type conversions","text":"<p>A type conversion is a function \\(f:T\\mapsto U\\) for two different types \\(T\\) and \\(U\\).</p> <p>Type conversions can happen either implicitly or explicitly. A conversion is explicit if and only if the target type <code>U</code> is written explicitly in the conversion expression.</p> <p>Explicit conversions can happen in one of the following forms:</p>   | expression           | explanation                   | example                               | | -------------------- | ----------------------------- | ------------------------------------- | | `what_cast(expr)` | through named casts           | `static_cast(3.14)`              | | `U(expr)`            | looks like a constructor call | `std::string(\"xx\")`, `int(3.14)`      | | `(U)expr`            | old C-style conversion        | Not recommended. Don't use it. |"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#type-conversions_1","title":"Type conversions","text":"<p>A type conversion is a function \\(f:T\\mapsto U\\) for two different types \\(T\\) and \\(U\\).</p> <p>Type conversions can happen either implicitly or explicitly. A conversion is explicit if and only if the target type <code>U</code> is written explicitly in the conversion expression.</p> <ul> <li>Arithmetic conversions are often allowed to happen implicitly:</li> </ul> <p><code>cpp   int sum = /* ... */, n = /* ... */;   auto average = 1.0 * sum / n; // `sum` and `n` are converted to `double`,                                 // so `average` has type `double`.</code> - The dangerous conversions for built-in types must be explicit:</p> <p><code>cpp   const int *cip = something();   auto ip = const_cast&lt;int *&gt;(cip);       // int *   auto cp = reinterpret_cast&lt;char *&gt;(ip); // char *</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#type-conversions_2","title":"Type conversions","text":"<p>A type conversion is a function \\(f:T\\mapsto U\\) for two different types \\(T\\) and \\(U\\).</p> <p>Type conversions can happen either implicitly or explicitly. A conversion is explicit if and only if the target type <code>U</code> is written explicitly in the conversion expression.</p> <ul> <li>This is also a type conversion, isn't it?</li> </ul> <p><code>cpp   std::string s = \"hello\"; // from `const char [6]` to `std::string`</code> - This is also a type conversion, isn't it?</p> <p><code>cpp   std::size_t n = 1000;   std::vector&lt;int&gt; v(n); // from `std::size_t` to `std::vector&lt;int&gt;`</code></p> <p>How do these type conversions happen? Are they implicit or explicit?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#type-conversions_3","title":"Type conversions","text":"<p>We can define a type conversion for our class <code>X</code> in one of the following ways:</p> <ol> <li> <p>A constructor with exactly one parameter of type <code>T</code> is a conversion from <code>T</code> to <code>X</code>.</p> </li> <li> <p>Example: <code>std::string</code> has a constructor accepting a <code>const char *</code>. <code>std::vector</code> has a constructor accepting a <code>std::size_t</code>.</p> </li> <li>A type conversion operator: a conversion from <code>X</code> to some other type.</li> </ol> <p><code>cpp    class Rational {    public:      // conversion from `Rational` to `double`.      operator double() const { return 1.0 * m_num / m_denom; }    };    Rational r(3, 4);    double dval = r;  // 0.75</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#type-conversion-operator","title":"Type conversion operator","text":"<p>A type conversion operator is a member function of class <code>X</code>, which defines the type conversion from <code>X</code> to some other type <code>T</code>.</p> <pre><code>class Rational {\npublic:\n  // conversion from `Rational` to `double`.\n  operator double() const { return 1.0 * m_num / m_denom; }\n};\nRational r(3, 4);\ndouble dval = r;  // 0.75\n</code></pre> <ul> <li>The name of the function is <code>operator T</code>.</li> <li>The return type is <code>T</code>, which is not written before the name.</li> <li>A type conversion is usually a read-only operation, so it is usually <code>const</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#explicit-type-conversion","title":"Explicit type conversion","text":"<p>Some conversions should be allowed to happen implicitly:</p> <pre><code>void foo(const std::string &amp;str) { /* ... */ }\nfoo(\"hello\"); // implicit conversion from `const char [6]` to `const char *`,\n              // and then to `std::string`.\n</code></pre> <p>Some should never happen implicitly!</p> <pre><code>void bar(const std::vector&lt;int&gt; &amp;vec) { /* ...*/ }\nbar(1000);                  // ??? Too weird!\nbar(std::vector&lt;int&gt;(1000)) // OK.\nstd::vector&lt;int&gt; v1(1000);  // OK.\nstd::vector&lt;int&gt; v2 = 1000; // No! This should never happen. Too weird!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#explicit-type-conversion_1","title":"Explicit type conversion","text":"<p>To disallow the implicit use of a constructor as a type conversion, write <code>explicit</code> before the return type:</p> <pre><code>class string { // Suppose this is the `std::string` class.\npublic:\n  string(const char *cstr); // Not marked `explicit`. Implicit use is allowed.\n};\n\ntemplate &lt;typename T&gt; class vector { // Suppose this is the `std::vector` class.\npublic:\n  explicit vector(std::size_t n); // Implicit use is not allowed.\n};\n\nclass Dynarray {\npublic:\n  explicit Dynarray(std::size_t n) : m_length{n}, m_storage{new int[n]{}} {}\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#explicit-type-conversion_2","title":"Explicit type conversion","text":"<p>To disallow the implicit use of a type conversion operator, also write <code>explicit</code>:</p> <pre><code>class Rational {\npublic:\n  explicit operator double() const { return 1.0 * m_num / m_denom; }\n};\nRational r(3, 4);\ndouble d = r;                     // Error.\nvoid foo(double x) { /* ... */ }\nfoo(r);                           // Error.\nfoo(double(r));                   // OK.\nfoo(static_cast&lt;double&gt;(r));      // OK.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#best-practice-avoid-the-abuse-of-type-conversion-operators","title":"[Best practice] Avoid the abuse of type conversion operators.","text":"<p>Type conversion operators can lead to unexpected results!</p> <pre><code>class Rational {\npublic:\n  operator double() const { return 1.0 * m_num / m_denom; }\n  operator std::string() const {\n    return std::to_string(m_num) + \" / \" + std::to_string(m_denom);\n  }\n};\nint main() {\n  Rational r(3, 4);\n  std::cout &lt;&lt; r &lt;&lt; '\\n'; // Ooops! Is it `0.75` or `3 / 4`?\n}\n</code></pre> <p>In the code above, either mark the type conversions as <code>explicit</code>, or remove them and define named functions like <code>to_double()</code> and <code>to_string()</code> instead.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#contextual-conversion-to-bool","title":"Contextual conversion to <code>bool</code>","text":"<p>A special rule for conversion to <code>bool</code>.</p> <p>Suppose <code>expr</code> is an expression of a class type <code>X</code>, and suppose <code>X</code> has an <code>explicit</code> type conversion operator to <code>bool</code>. In the following contexts, that conversion is applicable even if it is not written as <code>bool(expr)</code> or <code>static_cast&lt;bool&gt;(expr)</code>:</p> <ul> <li><code>if (expr)</code>, <code>while (expr)</code>, <code>for (...; expr; ...)</code>, <code>do ... while (expr)</code></li> <li>as the operand of <code>!</code>, <code>&amp;&amp;</code>, <code>||</code></li> <li>as the first operand of <code>?:</code>: <code>expr ? something : something_else</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#contextual-conversion-to-bool_1","title":"Contextual conversion to <code>bool</code>","text":"<p>Exercise: We often test whether a pointer is non-null like this:</p> <pre><code>if (ptr) {\n  // ...\n}\nauto val = ptr ? ptr-&gt;some_value : 0;\n</code></pre> <p>Define a conversion from <code>WindowPtr</code> to <code>bool</code>, so that we can test whether a <code>WindowPtr</code> is non-null in the same way.</p> <ul> <li>Should this conversion be allowed to happen implicitly? If not, mark it <code>explicit</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#summary","title":"Summary","text":"<p>Operator overloading</p> <ul> <li>As a non-member function: <code>@a</code> \\(\\Leftrightarrow\\) <code>operator@(a)</code>,  <code>a @ b</code> \\(\\Leftrightarrow\\) <code>operator@(a, b)</code></li> <li>As a member function: <code>@a</code> \\(\\Leftrightarrow\\) <code>a.operator@()</code>, <code>a @ b</code> \\(\\Leftrightarrow\\) <code>a.operator@(b)</code></li> <li>The postfix <code>++</code> and <code>--</code> are special: They have a special <code>int</code> parameter to make them different from the prefix ones.</li> <li>The arrow operator <code>-&gt;</code> is special: Although it looks like a binary operator in <code>ptr-&gt;mem</code>, it is unary and involves special rules.<ul> <li>You don't need to understand the exact rules for <code>-&gt;</code>.</li> </ul> </li> <li>Avoid repetition.</li> <li>Avoid abuse of operator overloading.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l19/l19.html#summary_1","title":"Summary","text":"<p>Type conversions</p> <ul> <li>Implicit vs explicit</li> <li>User-defined type conversions: either through a constructor or through a type conversion operator.</li> <li>To disable the implicit use of the user-defined type conversion: <code>explicit</code></li> <li>Avoid abuse of type conversion operators.</li> <li>Conversion to <code>bool</code> has some special rules (contextual conversion).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html","title":"L2","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#cs100-lecture-2","title":"CS100 Lecture 2","text":"<p>Variables I and Arithmetic Types</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#contents","title":"Contents","text":"<ul> <li>Variable declaration</li> <li>Arithmetic types</li> <li>Bits and bytes</li> <li>Integer types</li> <li>Real floating types</li> <li>Character types</li> <li>Boolean type</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#variable-declaration","title":"Variable declaration","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#type-of-a-variable","title":"Type of a variable","text":"<p>Every variable in C has a type.</p> <ul> <li>The type is fully deterministic and cannot be changed.</li> <li>The type is known even when the program is not run.</li> <li>\\(\\Leftrightarrow\\) The type is known at compile-time.</li> <li>\\(\\Leftrightarrow\\) C is statically-typed \\({}^{\\textcolor{red}{1}}\\). \\(\\Leftrightarrow\\) C has a static type system.</li> <li>In contrast, Python is dynamically-typed.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#statically-typed-vs-dynamically-typed","title":"Statically-typed vs dynamically-typed","text":"Python: dynamically typed   <pre><code>a = 42       # Type of a is int.\na = \"hello\"  # Type of a becomes str.\n</code></pre>   The type of a variable  - can be changed, and - is not necessarily known until we run the program.       C: statically-typed   <pre><code>int a = 42;  // Type of a is int.\na = \"hello\"; // Error! Types mismatch!\n</code></pre>   The type of a variable  - is explicitly written on declaration, and - is known at compile-time, and - cannot be changed.    <p>A type-related error in C is (usually) a compile error: - It stops the compiler. The executable will not be generated.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#declare-a-variable","title":"Declare a variable","text":"<p>To declare a variable, we need to specify its type and name.</p> <pre><code>Type name;\n</code></pre> <p>Example:</p> <pre><code>int x;    // Declares a variable named `x`, whose type is `int`.\ndouble y; // Declares a variable named `y`, whose type is `double`.\n</code></pre> <p>We may declare multiple variables of a same type in one declaration statement, separated by <code>,</code>:</p> <pre><code>int x, y; // Declares two variables `x` and `y`, both having type `int`.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#declare-a-variable_1","title":"Declare a variable","text":"<p>A variable declaration can be placed</p> <ul> <li>inside a function, which declares a local variable, or</li> <li>outside of any functions, which declares a global variable.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\nint x, y; // global variables\n\nint main(void) {\n  scanf(\"%d%d\", &amp;x, &amp;y);\n  printf(\"%d\\n\", x + y);\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  // local variables in `main`\n  int x, y;\n  scanf(\"%d%d\", &amp;x, &amp;y);\n  printf(\"%d\\n\", x + y);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#local-variables-vs-global-variables","title":"Local variables vs global variables","text":"<p>Which one do you prefer?</p> <pre><code>#include &lt;stdio.h&gt;\n\nint x, y; // global variables\n\nint main(void) {\n  scanf(\"%d%d\", &amp;x, &amp;y);\n  printf(\"%d\\n\", x + y);\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  // local variables in `main`\n  int x, y;\n  scanf(\"%d%d\", &amp;x, &amp;y);\n  printf(\"%d\\n\", x + y);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#what-are-these-variables-used-for","title":"What are these variables used for?","text":"<pre><code>#include &lt;stdio.h&gt;\n// Other #includes\n\nint x, y; // What are these two variables used for?\n\nint moveSpaceShuttle(SpaceShuttle *shuttle, Coord to, Vehicle *by) {\n  // 109 lines\n}\nint makePreparations(Environment *env, Task tasks[], Time time) {\n  // 73 lines\n}\nLaunchResult launchSpaceShuttle(SpaceShuttle *shuttle, Task tasks[]) {\n  // 35 lines\n}\n// Other 136 functions, 3325 lines in total\nint main(void) {\n  // 120 lines\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#readability-matters","title":"Readability matters","text":"<p>[Best practice] Declare the variable when you first use it!</p> <ul> <li>If the declaration and use of the variable are too separated, it will become much more difficult to figure out what they are used for as the program goes longer.</li> </ul> <p>[Best practice] Use meaningful names!</p> <ul> <li>The program would be a mess if polluted with names like <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>x</code>, <code>y</code>, <code>cnt</code>, <code>cnt_2</code>, <code>flag1</code>, <code>flag2</code>, <code>flag3</code> everywhere.</li> <li>Use meaningful names: <code>sumOfScore</code>, <code>student_cnt</code>, <code>open_success</code>, ...</li> </ul> <p>Readability is very important. Many students debug day and night simply because their programs are not human-readable.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#use-of-global-variables","title":"Use of global variables","text":"<p>One reason for using global variables is to have them shared between functions:</p> <pre><code>int input;\nvoid work(void) {\n  printf(\"%d\\n\", input);\n}\nint main(void) {\n  scanf(\"%d\", &amp;input);\n  work();\n}\n</code></pre> <pre><code>void work(void) {\n  // Error: `input` was not decared\n  // in this scope.\n  printf(\"%d\\n\", input);\n}\nint main(void) {\n  int input;\n  scanf(\"%d\", &amp;input);\n  work();\n}\n</code></pre> <p>\\(\\Rightarrow\\) More about scopes and name lookup in later lectures / recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#initialize-a-variable","title":"Initialize a variable","text":"<p>A variable can be initialized on declaration.</p> <pre><code>int x = 42; // Declares the variable `x` of type `int`,\n            // and initializes its value to 42.\nint a = 0, b, c = 42; // Declares three `int` variables, with `a` initialized\n                      // to 0, `c` initialized to 42, and `b` uninitialized.\n</code></pre> <p>This is syntactically different (though seems equivalent) to</p> <pre><code>int x;  // Declares `x`, uninitialized.\nx = 42; // Assigns 42 to `x`.\n</code></pre> <p>[Best practice] Initialize the variable if possible. Prefer initialization to later assignment.</p> <p>\\(\\Rightarrow\\) More on initialization in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#arithmetic-types","title":"Arithmetic types","text":"<p>Refer to this page for a complete, detailed and standard documentation.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#integer-types","title":"Integer types","text":"<p>Is <code>int</code> equivalent to \\(\\mathbb Z\\)?</p> <ul> <li>Is there a limitation on the numbers that <code>int</code> can represent?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#integer-types_1","title":"Integer types","text":"<p>Is <code>int</code> equivalent to \\(\\mathbb Z\\)?</p> <ul> <li>Is there a limitation on the numbers that <code>int</code> can represent?</li> </ul> <p>Experiment:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  int x = 1;\n  while (1) {\n    printf(\"%d\\n\", x);\n    x *= 2; // x = x * 2\n    getchar();\n  }\n}\n</code></pre>   - On 64-bit Ubuntu 22.04 and compiled with GCC 13, after printing `1073741824` ($2^{30}$), the output becomes negative, and then `0`.    ```   1073741824   -2147483648   0   0   ```"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#bits-and-bytes","title":"Bits and bytes","text":"<p>Information is stored in computers in binary.</p> <ul> <li>\\(42_{\\text{ten}}=101010_{\\text{two}}\\).</li> </ul> <p>A bit is either \\(0\\) or \\(1\\).</p> <ul> <li>The binary representation of \\(42\\) consists of \\(6\\) bits.</li> </ul> <p>A byte is \\(8\\) bits \\({}^{\\textcolor{red}{2}}\\) grouped together like \\(10001001\\).</p> <ul> <li>At least \\(1\\) byte is needed to store \\(42\\).</li> <li>At least \\(3\\) bytes are needed to store \\(142857_{\\text{ten}}=100010111000001001_{\\text{two}}\\)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#bits-and-bytes_1","title":"Bits and bytes","text":"<p>A 32-bit number: \\(2979269462_{\\text{ten}}=10110001100101000000101101010110_{\\text{two}}\\).</p> <p> </p> <p>Suppose now we have \\(n\\) bits.</p> <ul> <li>How many different values can be represented?</li> <li>What is the largest integer that can be represented?</li> <li>How do we represent negative numbers? Non-integer values? ...</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#bits-and-bytes_2","title":"Bits and bytes","text":"<p>Suppose now we have \\(n\\) bits.</p> <ul> <li>How many different values can be represented?</li> <li>\\(2^n\\).</li> <li>What is the largest integer that can be represented?</li> <li>\\(2^n-1=\\underbrace{111\\dots 1}_{n}{}_{\\text{two}}\\).</li> <li>How do we represent negative numbers? Non-integer values? ...</li> <li>There are several different signed number representations, among which two's complement is widely used.</li> <li>About floating-point numbers: IEEE754</li> <li>Details are not covered in CS100.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#integer-types_2","title":"Integer types","text":"<p>An integer type in C is either signed or unsigned, and has a width denoting the number of bits that can be used to represent values.</p> <p>Suppose we have an integer type of \\(n\\) bits in width.</p> <ul> <li>If the type is signed \\({}^{\\textcolor{red}{3}}\\), the range of values that can be represented is \\(\\left[-2^{n-1},2^{n-1}-1\\right]\\).</li> <li>If the type is unsigned, the range of values that can be represented is \\(\\left[0, 2^n-1\\right]\\).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#integer-types_3","title":"Integer types","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#integer-types_4","title":"Integer types","text":"<ul> <li>The keyword <code>int</code> is optional in types other than <code>int</code>:</li> <li>e.g. <code>short int</code> and <code>short</code> name the same type.</li> <li> <p>e.g. <code>unsigned int</code> and <code>unsigned</code> name the same type.</p> </li> <li> <p>\"Unsigned-ness\" needs to be written explicitly: <code>unsigned int</code>, <code>unsigned long</code>, ...</p> </li> <li>Types without the keyword <code>unsigned</code> are signed by default:</li> <li>e.g. <code>signed int</code> and <code>int</code> name the same type.</li> <li>e.g. <code>signed long int</code>, <code>signed long</code>, <code>long int</code> and <code>long</code> name the same type.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#width-of-integer-types","title":"Width of integer types","text":"| type        | width (at least) | width (usually) | | ----------- | ---------------- | --------------- | | `short`     | 16 bits          | 16 bits         | | `int`       | 16 bits          | 32 bits         | | `long`      | 32 bits          | 32 or 64 bits   | | `long long` | 64 bits          | 64 bits         |  <ul> <li>A signed type has the same width as its <code>unsigned</code> counterpart.</li> <li>It is also guaranteed that <code>sizeof(short)</code> \\(\\leqslant\\) <code>sizeof(int)</code> \\(\\leqslant\\) <code>sizeof(long)</code> \\(\\leqslant\\) <code>sizeof(long long)</code>.</li> <li><code>sizeof(T)</code> is the number of bytes that <code>T</code> holds.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#implementation-defined-behaviors","title":"Implementation-defined behaviors","text":"<p>The standard states that the exact width of the integer types is implementation-defined.</p> <ul> <li>Implementation: The compiler and the standard library.</li> <li>An implementation-defined behavior depends on the compiler and the standard library, and is often also related to the hosted environment (e.g. the operating system).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#which-one-should-i-use","title":"Which one should I use?","text":"<p><code>int</code> is the most optimal integer type for the platform.</p> <ul> <li>Use <code>int</code> for integer arithmetic by default.</li> <li>Use <code>long long</code> if the range of <code>int</code> is not large enough.</li> <li>Use smaller types (<code>short</code>, or even <code>unsigned char</code>) for memory-saving or other special purposes.</li> <li>Use <code>unsigned</code> types for special purposes. We will see some in later lectures.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#which-one-is-the-real-world-the-integer-types-or-mathbb-z","title":"Which one is the real world, the integer types or \\(\\mathbb Z\\)?","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#real-floating-types","title":"Real floating types","text":"<p>\"Floating-point\": The number's radix point can \"float\" anywhere to the left, right, or between the significant digits of the number.</p> <p>Real floating-point types can be used to represent some real values.</p> <ul> <li>Real floating-point types \\(\\neq\\mathbb R\\).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#real-floating-types_1","title":"Real floating types","text":"<p>C has three types for representing real floating-point values:</p> <ul> <li><code>float</code>: single precision. Matches IEEE754 binary32 format if supported.</li> <li><code>double</code>: double precision. Matches IEEE754 binary64 format if supported.</li> <li><code>long double</code>: extended precision. A floating-point type whose precision and range are at least as good as those of <code>double</code>.</li> </ul> <p>Details of IEEE754 formats are not required in CS100.</p> <p>Range of values can be found in this table.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#which-one-should-i-use_1","title":"Which one should I use?","text":"<p>Use <code>double</code> for real floating-point arithmetic by default.</p> <ul> <li>In some cases the precision of <code>float</code> is not enough.</li> <li>Don't worry about efficiency! <code>double</code> arithmetic is not necessarily slower than <code>float</code>.</li> </ul> <p>Do not use floating-point types for integer arithmetic!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#scanfprintf","title":"<code>scanf</code>/<code>printf</code>","text":"<p>Refer to the table in this page.</p>   | type        | format specifier | | ----------- | ---------------- | | `short`     | `%hd`            | | `int`       | `%d`             | | `long`      | `%ld`            | | `long long` | `%lld`           |      | type                 | format specifier | | -------------------- | ---------------- | | `unsigned short`     | `%hu`            | | `unsigned`           | `%u`             | | `unsigned long`      | `%lu`            | | `unsigned long long` | `%llu`           |    <ul> <li><code>%f</code> for <code>float</code>, <code>%lf</code> for <code>double</code>, and <code>%Lf</code> for <code>long double</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#exercise","title":"Exercise","text":"<p>Write the \"A+B\" program for real numbers. Which type do you decide to use? How do you read and print the values?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#exercise_1","title":"Exercise","text":"<p>Write the \"A+B\" program for real numbers. Which type do you decide to use? How do you read and print the values?</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  double a, b;\n  scanf(\"%lf%lf\", &amp;a, &amp;b);\n  printf(\"%lf\\n\", a + b);\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#character-types","title":"Character types","text":"<p>The C standard provides three different character types: <code>signed char</code>, <code>unsigned char</code> and <code>char</code>.</p> <p>Let <code>T</code> \\(\\in\\{\\)<code>signed char</code>, <code>unsigned char</code>, <code>char</code>\\(\\}\\). It is guaranteed that</p> <p><code>1 == sizeof(T) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code>. - <code>T</code> takes exactly 1 byte.</p> <p>Question: What is the valid range of <code>signed char</code>? <code>unsigned char</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#character-types_1","title":"Character types","text":"<p>Question: What is the valid range of <code>signed char</code>? <code>unsigned char</code>?</p> <ul> <li><code>signed char</code>: \\([-128, 127]\\).</li> <li><code>unsigned char</code>: \\([0, 255]\\).</li> </ul> <p>What? A character is an integer?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#ascii-american-standard-code-for-information-interchange","title":"ASCII (American Standard Code for Information Interchange)","text":"<p>A character is represented in computers as its ASCII code, which is a small integer.</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#ascii-american-standard-code-for-information-interchange_1","title":"ASCII (American Standard Code for Information Interchange)","text":"<p>A character is represented in computers as its ASCII code, which is a small integer.</p> <ul> <li>We only consider the so-called ASCII characters here.</li> </ul> <p> </p> <p>A character is nothing but an integer! In C, there is no \"conversion\" between characters and ASCII code!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#ascii-american-standard-code-for-information-interchange_2","title":"ASCII (American Standard Code for Information Interchange)","text":"<p>Important things to remember:</p> <ul> <li>\\([\\)<code>'0'</code>\\(,\\)<code>'9'</code>\\(]=[48, 57]\\).</li> <li>\\([\\)<code>'A'</code>\\(,\\)<code>'Z'</code>\\(]=[65, 90]\\).</li> <li>\\([\\)<code>'a'</code>\\(,\\)<code>'z'</code>\\(]=[97, 122]\\).</li> </ul> <p>Example: Given a lowercase letter, return its uppercase form.</p> <pre><code>char to_uppercase(char x) {\n  return x - 32;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#best-practice-avoid-magic-numbers","title":"[Best practice] Avoid magic numbers","text":"<p>What is the meaning of <code>32</code> here? \\(\\Rightarrow\\) a magic number.</p> <pre><code>char to_uppercase(char x) {\n  return x - 32;\n}\n</code></pre> <p>Write it in a more human-readable way:</p> <pre><code>char to_uppercase(char x) {\n  return x - ('a' - 'A');\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#escape-sequence","title":"Escape sequence","text":"<p>Some special characters are not directly representable: newline, tab, quote, ...</p> <p>We use escape sequences, e.g.</p>   | escape sequence | description  | | --------------- | ------------ | | `\\'`            | single quote | | `\\\"`            | double quote | | `\\\\`            | backslash    |      | escape sequence | description     | | --------------- | --------------- | | `\\n`            | newline         | | `\\r`            | carriage return | | `\\t`            | horizontal tab  |"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#character-types_2","title":"Character types","text":"<p><code>char</code>, <code>signed char</code> and <code>unsigned char</code> are three different types.</p> <ul> <li>Whether <code>char</code> is signed or unsigned is implementation-defined.</li> <li>If <code>char</code> is signed (unsigned), it represents the same set of values as the type <code>signed char</code> (<code>unsigned char</code>), but they are not the same type.</li> <li>In contrast, <code>T</code> and <code>signed T</code> are the same type for <code>T</code> \\(\\in\\{\\)<code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>\\(\\}\\).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#character-types_3","title":"Character types","text":"<p>For almost all cases, use <code>char</code> (or, sometimes <code>int</code>) to represent characters.</p> <p><code>signed char</code> and <code>unsigned char</code> are used for other purposes.</p> <p>To read/print a <code>char</code> using <code>scanf</code>/<code>printf</code>, use <code>%c</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#sad-story-handling-non-ascii-characters","title":"Sad story: Handling non-ASCII characters? ...","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#sad-story-handling-non-ascii-characters_1","title":"Sad story: Handling non-ASCII characters? ...","text":"<p>Even though the standard provides <code>wchar_t</code>, <code>char8_t</code> (since C23), <code>char16_t</code> and <code>char32_t</code> to handle wide/Unicode characters, there are still a lot of problems.</p> <p>C++23 has some improvement.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#thats-why-python-people-laugh-at-us","title":"That's why Python people laugh at us ...","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#boolean-type-bool-since-c99","title":"Boolean type: <code>bool</code> (since C99)","text":"<p>A type that represents true/false, 0/1, yes/no, ...</p> <p>To access the name <code>bool</code>, <code>true</code> and <code>false</code>, <code>&lt;stdbool.h&gt;</code> is needed. (until C23)</p> <p>Example: Define a function that accepts a character and returns whether that character is a lowercase letter.</p>   Before C99, using `int`, `0` and `1`:   <pre><code>int is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return 1;\n  else\n    return 0;\n}\n</code></pre>   Since C99, using `bool`, `false` and `true`:   <pre><code>bool is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return true;\n  else\n    return false;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#boolean-type-bool-since-c99_1","title":"Boolean type: <code>bool</code> (since C99)","text":"Before C99, using `int`, `0` and `1`:   <pre><code>int is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return 1;\n  else\n    return 0;\n}\n</code></pre>   Since C99, using `bool`, `false` and `true`:   <pre><code>bool is_lowercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return true;\n  else\n    return false;\n}\n</code></pre> <p>Both return values can be used as follows:</p> <pre><code>char c; scanf(\"%c\", &amp;c);\nif (is_lowercase(c)) {\n  // do something when c is lowercase ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#best-practice-simplify-your-code","title":"[Best practice] Simplify your code","text":"<p>Just return the result of the condition expression.</p> <pre><code>int is_lowercase(char c) {\n  return c &gt;= 'a' &amp;&amp; c &lt;= 'z';\n}\n</code></pre> <pre><code>bool is_lowercase(char c) {\n  return c &gt;= 'a' &amp;&amp; c &lt;= 'z';\n}\n</code></pre> <p>We will introduce the operators (<code>&amp;&amp;</code>, <code>&lt;=</code>, <code>&gt;=</code>) involved here in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#summary","title":"Summary","text":"<ul> <li>Variable declaration</li> <li>Type + name</li> <li>Multiple variables in one declaration statement</li> <li>Global vs local</li> <li>Initialization</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#summary_1","title":"Summary","text":"<ul> <li>Arithmetic types</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#summary_2","title":"Summary","text":"<ul> <li>Arithmetic types</li> <li>Width, signed-ness, valid range</li> <li>Which type to choose</li> <li>Characters: ASCII code, escape sequence</li> <li>Boolean</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#exercise_2","title":"Exercise","text":"<p>Write a simple calculator that handles input of the form <code>x op y</code>, where <code>x</code> and <code>y</code> are floating-point numbers and <code>op</code> \\(\\in\\{\\) <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, <code>'/'</code> \\(\\}\\). You may use a group of <code>if</code>-<code>else</code> statements like this:</p> <pre><code>if (op == '+') {\n  // ...\n} else if (op == '-') {\n  // ...\n} else if (op == '*') {\n  // ...\n} else if (op == '/') {\n  // ...\n} else {\n  // report an error\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l2/l2.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) The type of every expression in C is determined at compile-time except for variable-length arrays (since C99).</p> <p>\\({}^{\\textcolor{red}{2}}\\) A byte is 8 bits on most platforms, but we do have exceptions: 36-bit computing.</p> <p>\\({}^{\\textcolor{red}{3}}\\) There are several different signed number representations, but all popular machines and almost all compilers use two's complement. Before C23 and C++20, the C/C++ standards allow for all possible representations, so the minimal valid range for a \\(n\\)-bit integer is \\(\\left[-2^{n-1}+1,2^{n-1}-1\\right]\\), which is the range for one's complement and sign-and-magnitude. Since C23 and C++20, the only representation allowed is two's complement, so the valid range is guaranteed to be \\(\\left[-2^{n-1},2^{n-1}-1\\right]\\). In CS100 we still assume that two's complement is used, even though we are based on C17/C++17.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html","title":"CS100 Lecture 20","text":"<p>Iterators and Algorithms</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#contents","title":"Contents","text":"<ul> <li>Iterators</li> <li>Algorithms</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators","title":"Iterators","text":"<p>A generalized \"pointer\" used for accessing elements in different containers.</p> <p>Every container has its iterator, whose type is <code>Container::iterator</code>.</p> <p>e.g. <code>std::vector&lt;int&gt;::iterator</code>, <code>std::forward_list&lt;std::string&gt;::iterator</code></p> <ul> <li><code>auto</code> comes to our rescue!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators_1","title":"Iterators","text":"<p>For any container object <code>c</code>,</p> <ul> <li><code>c.begin()</code> returns the iterator to the first element of <code>c</code>.</li> <li><code>c.end()</code> returns the iterator to the position following the last element of <code>c</code> (\"off-the-end\", \"past-the-end\").</li> </ul> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators_2","title":"Iterators","text":"<p>A pair of iterators (<code>b</code>, <code>e</code>) is often used to indicate a range <code>[b, e)</code>.</p> <p>Such ranges are left-inclusive. Benefits:</p> <ul> <li><code>e - b</code> is the length (size) of the range, i.e. the number of elements. There is no extra <code>+1</code> or <code>-1</code> in this expression.</li> <li>If <code>b == e</code>, the range is empty. In other words, to check whether the range is empty, we only need to do an equality test, which is easily supported by all kinds of iterators.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators_3","title":"Iterators","text":"<p>Basic operations, supported by almost all kinds of iterators:</p> <ul> <li><code>*it</code>: returns a reference to the element that <code>it</code> refers to.</li> <li><code>it-&gt;mem</code>: equivalent to <code>(*it).mem</code>.</li> <li><code>++it</code>, <code>it++</code>: moves <code>it</code> one step forward, so that <code>it</code> refers to the \"next\" element.</li> <li><code>++it</code> returns a reference to <code>it</code>, while <code>it++</code> returns a copy of <code>it</code> before incrementation.</li> <li><code>it1 == it2</code>: checks whether <code>it1</code> and <code>it2</code> refer to the same position in the container.</li> <li><code>it1 != it2</code>: equivalent to <code>!(it1 == it2)</code>.</li> </ul> <p>These are supported by the iterators of all sequence containers, as well as <code>std::string</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators_4","title":"Iterators","text":"<p>Use the basic operations to traverse a sequence container:</p> <pre><code>void swapcase(std::string &amp;str) {\n  for (auto it = str.begin(); it != str.end(); ++it) {\n    if (std::islower(*it))\n      *it = std::toupper(*it);\n    else if (std::isupper(*it))\n      *it = std::tolower(*it);\n  }\n}\nvoid print(const std::vector&lt;int&gt; &amp;vec) {\n  for (auto it = vec.begin(); it != vec.end(); ++it)\n    std::cout &lt;&lt; *it &lt;&lt; ' ';\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators_5","title":"Iterators","text":"<p>Built-in pointers are also iterators: They are the iterator for built-in arrays.</p> <p>For an array <code>Type a[N]</code>:</p> <ul> <li>The \"begin\" iterator is <code>a</code>.</li> <li>The \"end\" (off-the-end) iterator is <code>a + N</code>.</li> </ul> <p>The standard library functions <code>std::begin(c)</code> and <code>std::end(c)</code> (defined in <code>&lt;iterator&gt;</code> and many other header files):</p> <ul> <li>return <code>c.begin()</code> and <code>c.end()</code> if <code>c</code> is a container;</li> <li>return <code>c</code> and <code>c + N</code> if <code>c</code> is an array of length <code>N</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#range-for-demystified","title":"Range-for demystified","text":"<p>The range-based for loop</p> <pre><code>for (@declaration : container)\n  @loop_body\n</code></pre> <p>is equivalent to </p> <pre><code>{\n  auto b = std::begin(container);\n  auto e = std::end(container);\n  for (; b != e; ++b) {\n    @declaration = *b;\n    @loop_body\n  }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators-dereferenceable","title":"Iterators: dereferenceable","text":"<p>Like pointers, an iterator can be dereferenced (<code>*it</code>) only when it refers to an existing element. (\"dereferenceable\")</p> <ul> <li><code>*v.end()</code> is undefined behavior.</li> <li><code>++it</code> is undefined behavior if <code>it</code> is not dereferenceable. In other words, moving an iterator out of the range <code>[begin, off_the_end]</code> is undefined behavior.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#iterators-invalidation","title":"Iterators: invalidation","text":"<pre><code>Type *storage = new Type[n];\nType *iter = storage;\ndelete[] storage;\n// Now `iter` does not refer to any existing element.\n</code></pre> <p>Some operations on some containers will invalidate some iterators: - make these iterators not refer to any existing element.</p> <p>For example: - <code>push_back(x)</code> on a <code>std::vector</code> may cause the reallocation of storage. All iterators obtained previously are invalidated. - <code>pop_back()</code> on a <code>std::vector</code> will invalidate the iterators that points to the deleted element.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#never-use-invalidated-iterators-or-references","title":"Never use invalidated iterators or references!","text":"<pre><code>void foo(std::vector&lt;int&gt; &amp;vec) {\n  auto it = vec.begin();\n  while (some_condition(vec))\n    vec.push_back(*it++); // Undefined behavior.\n}\n</code></pre> <p>After several calls to <code>push_back</code>, <code>vec</code> may reallocate a larger chunk of memory to store its elements. This will invalidate all pointers, references and iterators that point to somewhere in the previous memory block.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#more-operations-on-iterators","title":"More operations on iterators","text":"<p>The iterators of containers that support <code>*it</code>, <code>it-&gt;mem</code>, <code>++it</code>, <code>it++</code>, <code>it1 == it2</code> and <code>it1 != it2</code> are ForwardIterators.</p> <p>BidirectionalIterator: a ForwardIterator that can be moved in both directions - supports <code>--it</code> and <code>it--</code>.</p> <p>RandomAccessIterator: a BidirectionalIterator that can be moved to any position in constant time. - supports <code>it + n</code>, <code>n + it</code>, <code>it - n</code>, <code>it += n</code>, <code>it -= n</code> for an integer <code>n</code>. - supports <code>it[n]</code>, equivalent to <code>*(it + n)</code>. - supports <code>it1 - it2</code>, returns the distance of two iterators. - supports <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#more-operations-on-iterators_1","title":"More operations on iterators","text":"<p>The iterators of containers that support <code>*it</code>, <code>it-&gt;mem</code>, <code>++it</code>, <code>it++</code>, <code>it1 == it2</code> and <code>it1 != it2</code> are ForwardIterators.</p> <p>BidirectionalIterator: a ForwardIterator that can be moved in both directions - supports <code>--it</code> and <code>it--</code>.</p> <p>RandomAccessIterator: a BidirectionalIterator that can be moved to any position in constant time. - supports <code>it + n</code>, <code>n + it</code>, <code>it - n</code>, <code>it += n</code>, <code>it -= n</code>, <code>it[n]</code>, <code>it1 - it2</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>. - <code>std::string::iterator</code> and <code>std::vector&lt;T&gt;::iterator</code> are in this category.</p> <p>Which category is the built-in pointer in?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#more-operations-on-iterators_2","title":"More operations on iterators","text":"<p>The iterators of containers that support <code>*it</code>, <code>it-&gt;mem</code>, <code>++it</code>, <code>it++</code>, <code>it1 == it2</code> and <code>it1 != it2</code> are ForwardIterators.</p> <p>BidirectionalIterator: a ForwardIterator that can be moved in both directions - supports <code>--it</code> and <code>it--</code>.</p> <p>RandomAccessIterator: a BidirectionalIterator that can be moved to any position in constant time. - supports <code>it + n</code>, <code>n + it</code>, <code>it - n</code>, <code>it += n</code>, <code>it -= n</code>, <code>it[n]</code>, <code>it1 - it2</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>. - <code>std::string::iterator</code> and <code>std::vector&lt;T&gt;::iterator</code> are in this category.</p> <p>Which category is the built-in pointer in? - RandomAccessIterator.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#initialization-from-iterator-range","title":"Initialization from iterator range","text":"<p><code>std::string</code>, <code>std::vector</code>, as well as other standard library containers, support the initialization from an iterator range:</p> <pre><code>std::vector&lt;char&gt; v = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'};\nstd::vector v2(v.begin() + 2, v.end() - 3);  // {'c', 'd', 'e', 'f'}\nstd::string s(v.begin(), v.end()); // \"abcdefghi\"\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#algorithms","title":"Algorithms","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#algorithms_1","title":"Algorithms","text":"<p>Full list of standard library algorithms can be found here.</p> <p>No one can remember all of them, but some are quite commonly used.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#algorithms-interfaces","title":"Algorithms: interfaces","text":"<p>Parameters: The STL algorithms accept pairs of iterators to represent \"ranges\":</p> <pre><code>int a[N], b[N]; std::vector&lt;int&gt; v;\nstd::sort(a, a + N);\nstd::sort(v.begin(), v.end());\nstd::copy(a, a + N, b); // copies elements in [a, a+N) to [b, b+N)\nstd::sort(v.begin(), v.begin() + 10); // Only the first 10 elements are sorted.\n</code></pre> <p>Since C++20, <code>std::ranges::xxx</code> can be used, which has more modern interfaces</p> <pre><code>std::ranges::sort(a);\nstd::ranges::copy(a, b);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#algorithms-interfaces_1","title":"Algorithms: interfaces","text":"<p>Parameters: The algorithms suffixed <code>_n</code> use a beginning iterator <code>begin</code> and an integer <code>n</code> to represent a range <code>[begin, begin + n)</code>.</p> <p>Example: Use STL algorithms to rewrite the constructors of <code>Dynarray</code>:</p> <pre><code>Dynarray::Dynarray(const int *begin, const int *end)\n    : m_storage{new int[end - begin]}, m_length(end - begin) {\n  std::copy(begin, end, m_storage);\n}\nDynarray::Dynarray(const Dynarray &amp;other)\n    : m_storage{new int[other.size()]}, m_length{other.size()} {\n  std::copy_n(other.m_storage, other.size(), m_storage);\n}\nDynarray::Dynarray(std::size_t n, int x = 0)\n    : m_storage{new int[n]}, m_length{n} {\n  std::fill_n(m_storage, m_length, x);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#algorithms-interfaces_2","title":"Algorithms: interfaces","text":"<p>Return values: \"Position\" is typically represented by an iterator. For example:</p> <pre><code>std::vector&lt;int&gt; v = someValues();\nauto pos = std::find(v.begin(), v.end(), 42);\nassert(*pos == 42);\nauto maxPos = std::max_element(v.begin(), v.end());\n</code></pre> <ul> <li><code>pos</code> is an iterator pointing to the first occurrence of <code>42</code> in <code>v</code>.</li> <li><code>maxPos</code> is an iterator pointing to the max element in <code>v</code>.</li> </ul> <p>\"Not found\" / \"No such element\" is often indicated by returning <code>end</code>.</p> <pre><code>if (std::find(v.begin(), v.end(), something) != v.end()) {\n  // ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#if-new-syntax-in-c17","title":"<code>if</code>: new syntax in C++17","text":"<p>\"Not found\" / \"No such element\" is often indicated by returning <code>end</code>.</p> <pre><code>if (std::find(v.begin(), v.end(), something) != v.end()) { /* (*) */ }\n</code></pre> <p>If we want to use the returned iterator in (*):</p> <pre><code>if (auto pos = std::find(v.begin(), v.end(), something); pos != v.end())\n  std::cout &lt;&lt; *pos &lt;&lt; '\\n';\n</code></pre> <p>The new syntax of <code>if</code> in C++17: <code>if (init_expr; condition)</code>.</p> <ul> <li><code>init_expr</code> is just like the first part of the <code>for</code> statement.</li> <li>The scope of the variable declared in <code>init_expr</code> is within this <code>if</code> statement (containing the <code>else</code> clause, if present).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#algorithms-requirements","title":"Algorithms: requirements","text":"<p>An algorithm may have requirements on - the iterator categories of the passed-in iterators, and - the type of elements that the iterators point to.</p> <p>Typically, <code>std::sort</code> requires RandomAccessIterators, while <code>std::copy</code> allows any InputIterators.</p> <p>Typically, all algorithms that need to compare elements rely only upon <code>operator&lt;</code> and <code>operator==</code> of the elements. - You don't have to define all the six comparison operators of <code>X</code> in order to <code>sort</code> a <code>vector&lt;X&gt;</code>. <code>sort</code> only requires <code>operator&lt;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#algorithms_2","title":"Algorithms","text":"<p>Since we pass iterators instead of containers to algorithms, the standard library algorithms never modify the length of the containers.</p> <ul> <li>STL algorithms never insert or delete elements in the containers (unless the iterator passed to them is some special iterator adapter).</li> </ul> <p>For example: <code>std::copy</code> only copies elements, instead of inserting elements.</p> <pre><code>std::vector&lt;int&gt; a = someValues();\nstd::vector&lt;int&gt; b(a.size());\nstd::vector&lt;int&gt; c{};\nstd::copy(a.begin(), a.end(), b.begin()); // OK\nstd::copy(a.begin(), a.end(), c.begin()); // Undefined behavior!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#some-common-algorithms-algorithm","title":"Some common algorithms (<code>&lt;algorithm&gt;</code>)","text":"<p>Non-modifying sequence operations:</p> <ul> <li><code>count(begin, end, x)</code>, <code>find(begin, end, x)</code>, <code>find_end(begin, end, x)</code>, <code>find_first_of(begin, end, x)</code>, <code>search(begin, end, pattern_begin, pattern_end)</code></li> </ul> <p>Modifying sequence operations:</p> <ul> <li><code>copy(begin, end, dest)</code>, <code>fill(begin, end, x)</code>, <code>reverse(begin, end)</code>, ...</li> <li><code>unique(begin, end)</code>: drop duplicate elements.</li> <li>requires the elements in the range <code>[begin, end)</code> to be sorted (in ascending order by default).</li> <li>It does not remove any elements! Instead, it moves all the duplicated elements to the end of the sequence, and returns an iterator <code>pos</code>, so that <code>[begin, pos)</code> has no duplicate elements.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#some-common-algorithms-algorithm_1","title":"Some common algorithms (<code>&lt;algorithm&gt;</code>)","text":"<p>Example: <code>unique</code></p> <pre><code>std::vector v{1, 1, 2, 2, 2, 3, 5};\nauto pos = std::unique(v.begin(), v.end());\n// Now [v.begin(), pos) contains {1, 2, 3, 5}.\n// [pos, v.end()) has the values {1, 2, 2}, but the exact order is not known.\nv.erase(pos, v.end()); // Typical use with the container's `erase` operation\n// Now v becomes {1, 2, 3, 5}.\n</code></pre> <p><code>unique</code> does not remove the duplicate elements! To remove them, use the container's <code>erase</code> operation.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#some-common-algorithms-algorithm_2","title":"Some common algorithms (<code>&lt;algorithm&gt;</code>)","text":"<p>Partitioning, sorting and merging algorithms:</p> <ul> <li><code>partition</code>, <code>is_partitioned</code>, <code>stable_partition</code></li> <li><code>sort</code>, <code>is_sorted</code>, <code>stable_sort</code></li> <li><code>nth_element</code></li> <li><code>merge</code>, <code>inplace_merge</code></li> </ul> <p>Binary search on sorted ranges:</p> <ul> <li><code>lower_bound</code>, <code>upper_bound</code>, <code>binary_search</code>, <code>equal_range</code></li> </ul> <p>Heap algorithms:</p> <ul> <li><code>is_heap</code>, <code>make_heap</code>, <code>push_heap</code>, <code>pop_heap</code>, <code>sort_heap</code></li> </ul> <p>Learn the underlying algorithms and data structures of these functions in CS101!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#some-common-algorithms","title":"Some common algorithms","text":"<p>Min/Max and comparison algorithms: (<code>&lt;algorithm&gt;</code>)</p> <ul> <li><code>min_element(begin, end)</code>, <code>max_element(begin, end)</code>, <code>minmax_element(begin, end)</code></li> <li><code>equal(begin1, end1, begin2)</code>, <code>equal(begin1, end1, begin2, end2)</code></li> <li><code>lexicographical_compare(begin1, end1, begin2, end2)</code></li> </ul> <p>Numeric operations: (<code>&lt;numeric&gt;</code>)</p> <ul> <li><code>accumulate(begin, end, initValue)</code>: Sum of elements in <code>[begin, end)</code>, with initial value <code>initValue</code>.</li> <li><code>accumulate(v.begin(), v.end(), 0)</code> returns the sum of elements in <code>v</code>.</li> <li><code>inner_product(begin1, end1, begin2, initValue)</code>: Inner product of two vectors \\(\\mathbf{a}^T\\mathbf{b}\\), added with the initial value <code>initValue</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#predicates","title":"Predicates","text":"<p>Consider the <code>Point2d</code> class:</p> <pre><code>struct Point2d {\n  double x, y;\n};\nstd::vector&lt;Point2d&gt; points = someValues();\n</code></pre> <p>Suppose we want to sort <code>points</code> in ascending order of the <code>x</code> coordinate.</p> <ul> <li><code>std::sort</code> requires <code>operator&lt;</code> in order to compare the elements,</li> <li>but it is not recommended to overload <code>operator&lt;</code> here! (What if we want to sort some <code>Point2d</code>s in another way?)</li> </ul> <p>(C++20 modern way: <code>std::ranges::sort(points, {}, &amp;Point2d::x);</code>)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#predicates_1","title":"Predicates","text":"<p><code>std::sort</code> has another version that accepts another argument <code>cmp</code>:</p> <pre><code>bool cmp_by_x(const Point2d &amp;lhs, const Point2d &amp;rhs) {\n  return lhs.x &lt; rhs.x;\n}\nstd::sort(points.begin(), points.end(), cmp_by_x);\n</code></pre> <p><code>sort(begin, end, cmp)</code></p> <ul> <li><code>cmp</code> is a Callable object. When called, it accepts two arguments whose type is the same as the element type, and returns <code>bool</code>.</li> <li><code>std::sort</code> will use <code>cmp(x, y)</code> instead of <code>x &lt; y</code> to compare elements.</li> <li>After sorting, <code>cmp(v[i], v[i + 1])</code> is true for every <code>i</code> \\(\\in\\) <code>[0, v.size()-1)</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#predicates_2","title":"Predicates","text":"<p>To sort numbers in reverse (descending) order:</p> <pre><code>bool greater_than(int a, int b) { return a &gt; b; }\nstd::sort(v.begin(), v.end(), greater_than);\n</code></pre> <p>To sort them in ascending order of absolute values:</p> <pre><code>bool abs_less(int a, int b) { return std::abs(a) &lt; std::abs(b); } // &lt;cmath&gt;\nstd::sort(v.begin(), v.end(), abs_less);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#predicates_3","title":"Predicates","text":"<p>Many algorithms accept a Callable object. For example, <code>find_if(begin, end, pred)</code> finds the first element in <code>[begin, end)</code> such that <code>pred(element)</code> is true.</p> <pre><code>bool less_than_10(int x) {\n  return x &lt; 10;\n}\nstd::vector&lt;int&gt; v = someValues();\nauto pos = std::find_if(v.begin(), v.end(), less_than_10);\n</code></pre> <p><code>for_each(begin, end, operation)</code> performs <code>operation(element)</code> for each element in the range <code>[begin, end)</code>.</p> <pre><code>void print_int(int x) { std::cout &lt;&lt; x &lt;&lt; ' '; }\nstd::for_each(v.begin(), v.end(), print_int);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#predicates_4","title":"Predicates","text":"<p>Many algorithms accept a Callable object. For example, <code>find_if(begin, end, pred)</code> finds the first element in <code>[begin, end)</code> such that <code>pred(element)</code> is true.</p> <p>What if we want to find the first element less than <code>k</code>, where <code>k</code> is determined at run-time?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#predicates_5","title":"Predicates","text":"<p>What if we want to find the first element less than <code>k</code>, where <code>k</code> is determined at run-time?</p> <pre><code>struct LessThan {\n  int k_;\n  LessThan(int k) : k_{k} {}\n  bool operator()(int x) const {\n    return x &lt; k_;\n  }\n};\nauto pos = std::find_if(v.begin(), v.end(), LessThan(k));\n</code></pre> <ul> <li><code>LessThan(k)</code> constructs an object of type <code>LessThan</code>, with the member <code>k_</code> initialized to <code>k</code>.</li> <li>This object has an <code>operator()</code> overloaded: the function-call operator.</li> <li><code>LessThan(k)(x)</code> is equivalent to <code>LessThan(k).operator()(x)</code>, which is <code>x &lt; k</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#function-objects","title":"Function objects","text":"<p>Modern way:</p> <pre><code>struct LessThan {\n  int k_; // No constructor is needed, and k_ is public.\n  bool operator()(int x) const { return x &lt; k_; }\n};\nauto pos = std::find_if(v.begin(), v.end(), LessThan{k}); // {} instead of ()\n</code></pre> <p>A function object (aka \"functor\") is an object <code>fo</code> with <code>operator()</code> overloaded.</p> <ul> <li><code>fo(arg1, arg2, ...)</code> is equivalent to <code>fo.operator()(arg1, arg2, ...)</code>. Any number of arguments is allowed.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#function-objects_1","title":"Function objects","text":"<p>Exercise: use a function object to compare integers by their absolute values.</p> <pre><code>struct AbsCmp {\n  bool operator()(int a, int b) const {\n    return std::abs(a) &lt; std::abs(b);\n  }\n};\nstd::sort(v.begin(), v.end(), AbsCmp{});\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#lambda-expressions","title":"Lambda expressions","text":"<p>Defining a function or a function object is not good enough:</p> <ul> <li>These functions or function objects are almost used only once, but</li> <li>too many lines of code is needed, and</li> <li>you have to add names to the global scope.</li> </ul> <p>Is there a way to define an unnamed, immediate callable object?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#lambda-expressions_1","title":"Lambda expressions","text":"<p>To sort by comparing absolute values:</p> <pre><code>std::sort(v.begin(), v.end(),\n          [](int a, int b) -&gt; bool { return std::abs(a) &lt; std::abs(b); });\n</code></pre> <p>To sort in reverse order:</p> <pre><code>std::sort(v.begin(), v.end(),\n          [](int a, int b) -&gt; bool { return a &gt; b; });\n</code></pre> <p>To find the first element less than <code>k</code>:</p> <pre><code>auto pos = std::find_if(v.begin(), v.end(),\n                        [k](int x) -&gt; bool { return x &lt; k; });\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#lambda-expressions_2","title":"Lambda expressions","text":"<p>The return type can be omitted and deduced by the compiler.</p> <pre><code>std::sort(v.begin(), v.end(),\n          [](int a, int b) { return std::abs(a) &lt; std::abs(b); });\n</code></pre> <pre><code>std::sort(v.begin(), v.end(), [](int a, int b) { return a &gt; b; });\n</code></pre> <pre><code>auto pos = std::find_if(v.begin(), v.end(), [k](int x) { return x &lt; k; });\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#lambda-expressions_3","title":"Lambda expressions","text":"<p>A lambda expression has the following syntax:</p> <pre><code>[capture_list](params) -&gt; return_type { function_body }\n</code></pre> <p>The compiler will generate a function object according to it.</p> <pre><code>int k = 42;\nauto f = [k](int x) -&gt; bool { return x &lt; k; };\nbool b1 = f(10); // true\nbool b2 = f(100); // false\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#lambda-expressions_4","title":"Lambda expressions","text":"<pre><code>[capture_list](params) -&gt; return_type { function_body }\n</code></pre> <p>It is allowed to write complex statements in <code>function_body</code>, just as in a function.</p> <pre><code>struct Point2d { double x, y; };\nstd::vector&lt;Point2d&gt; points = somePoints();\n// prints the l2-norm of every point\nstd::for_each(points.begin(), points.end(),\n              [](const Point2d &amp;p) {\n                auto norm = std::sqrt(p.x * p.x + p.y * p.y);\n                std::cout &lt;&lt; norm &lt;&lt; std::endl;\n              });\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#lambda-expressions-capture","title":"Lambda expressions: capture","text":"<p>To capture more variables:</p> <pre><code>auto pos = std::find_if(v.begin(), v.end(),\n                    [lower, upper](int x) { return lower &lt;= x &amp;&amp; x &lt;= upper;});\n</code></pre> <p>To capture by reference (so that copy is avoided)</p> <pre><code>std::string str = someString();\nstd::vector&lt;std::string&gt; wordList;\n// finds the first string that is lexicographically greater than `str`,\n// but shorter than `str`.\nauto pos = std::find_if(wordList.begin(), wordList.end(),\n     [&amp;str](const std::string &amp;s) { return s &gt; str &amp;&amp; s.size() &lt; str.size();});\n</code></pre> <p>Here <code>&amp;str</code> indicates that <code>str</code> is captured by referece. <code>&amp;</code> here is not the address-of operator!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#more-on-lambda-expressions","title":"More on lambda expressions","text":"<ul> <li>C++ Primer Section 10.3</li> <li>Effective Modern C++ Chapter 6 (Item 31-34)</li> </ul> <p>Note that C++ Primer (5th edition) is based on C++11 and Effective Modern C++ is based on C++14. Lambda expressions are evolving at a very fast pace in modern C++, with many new things added and many limitations removed.</p> <p>More fancy ways of writing lambda expressions are not covered in CS100.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#back-to-algorithms","title":"Back to algorithms","text":"<p>So many things in the algorithm library! How can we remember them?</p> <ul> <li>Remember the conventions:</li> <li>No insertion/deletion of elements</li> <li>Iterator range <code>[begin, end)</code></li> <li>Functions named with the suffix <code>_n</code> uses <code>[begin, begin + n)</code></li> <li>Pass functions, function objects, and lambdas for customized operations</li> <li>Functions named with the suffix <code>_if</code> requires a boolean predicate</li> <li>Remember the common ones: <code>copy</code>, <code>find</code>, <code>for_each</code>, <code>sort</code>, ...</li> <li>Look them up in cppreference before use.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#summary","title":"Summary","text":"<p>Iterators</p> <ul> <li>A generalized \"pointer\" used for accessing elements in different containers.</li> <li>Iterator range: a left-inclusive interval <code>[b, e)</code>.</li> <li><code>c.begin()</code>, <code>c.end()</code></li> <li>Basic operations: <code>*it</code>, <code>it-&gt;mem</code>, <code>++it</code>, <code>it++</code>, <code>it1 == it2</code>, <code>it1 != it2</code>.</li> <li>Range-based <code>for</code> loops are in fact traversal using iterators.</li> <li>More operations: BidirectionalIterator supports <code>it--</code> and <code>--it</code>. RandomAccessIterator supports all pointer arithmetics.</li> <li>Initialization of standard library containers from an iterator range.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l20/l20.html#summary_1","title":"Summary","text":"<p>Algorithms</p> <ul> <li>Normal functions accept iterator range <code>[b, e)</code>. Functions with <code>_n</code> accept an iterator and an integer, representing the range <code>[begin, begin + n)</code>.</li> <li>Position is represented by an iterator.</li> <li>STL algorithms never insert or delete elements in the containers.</li> <li>Some algorithms accept a predicate argument, which is a callable object. It can be a function, a pointer to function, an object of some type that has an overloaded <code>operator()</code>, or a lambda.</li> <li>Lambda: <code>[capture_list][params] -&gt; return_type { function_body }</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html","title":"CS100 Lecture 21","text":"<p>Inheritance and Polymorphism I</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#contents","title":"Contents","text":"<ul> <li>Inheritance</li> <li>Dynamic binding and polymorphism</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#inheritance","title":"Inheritance","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#example-an-item-for-sale","title":"Example: An item for sale","text":"<pre><code>class Item {\n  std::string m_name;\n  double m_price = 0.0;\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price)\n      : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return m_name; }\n  auto netPrice(int cnt) const {\n    return cnt * m_price;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#defining-a-subclass","title":"Defining a subclass","text":"<p>A discounted item is an item, and has more information: - <code>std::size_t m_minQuantity;</code> - <code>double m_discount;</code></p> <p>The net price for such an item is</p> \\[ \\text{netPrice}(n)=\\begin{cases} n\\cdot\\text{price},&amp;\\text{if }n&lt;\\text{minQuantity},\\\\ n\\cdot\\text{discount}\\cdot\\text{price},&amp;\\text{otherwise}. \\end{cases} \\]"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#defining-a-subclass_1","title":"Defining a subclass","text":"<p>Use inheritance to model the \"is-a\" relationship:</p> <ul> <li>A discounted item is an item.</li> </ul> <pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\npublic:\n  // constructors\n  // netPrice\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#protected-members","title":"<code>protected</code> members","text":"<p>A <code>protected</code> member is private, except that it is accessible in subclasses.</p> <ul> <li><code>m_price</code> needs to be <code>protected</code>, of course.</li> <li>Should <code>m_name</code> be <code>protected</code> or <code>private</code>?</li> <li><code>private</code> is ok if the subclass does not modify it. It is accessible through the public <code>getName</code> interface.</li> <li><code>protected</code> is also reasonable.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#protected-members_1","title":"<code>protected</code> members","text":"<pre><code>class Item {\n  std::string m_name;\nprotected:\n  double m_price = 0.0;\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price)\n      : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return m_name; }\n  auto netPrice(int cnt) const {\n    return cnt * m_price;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#inheritance_1","title":"Inheritance","text":"<p>By defining <code>DiscountedItem</code> to be a subclass of <code>Item</code>, every <code>DiscountedItem</code> object contains a subobject of type <code>Item</code>.</p> <ul> <li>Every data member and member function, except the ctors and dtors, is inherited, no matter what access level they have.</li> </ul> <p>What can be inferred from this?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#inheritance_2","title":"Inheritance","text":"<p>By defining <code>DiscountedItem</code> to be a subclass of <code>Item</code>, every <code>DiscountedItem</code> object contains a subobject of type <code>Item</code>.</p> <ul> <li>Every data member and member function, except the ctors and dtors, is inherited, no matter what access level they have.</li> </ul> <p>What can be inferred from this?</p> <ul> <li>A constructor of <code>DiscountedItem</code> must first initialize the base class subobject by calling a constructor of <code>Item</code>'s.</li> <li>The destructor of <code>DiscountedItem</code> must call the destructor of <code>Item</code> after having destroyed its own members (<code>m_minQuantity</code> and <code>m_discount</code>).</li> <li><code>sizeof(Derived) &gt;= sizeof(Base)</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#inheritance_3","title":"Inheritance","text":"<p>Key points of inheritance:</p> <ul> <li>Every object of the derived class (subclass) contains a base class subobject.</li> <li>Inheritance should not break the encapsulation of the base class.</li> <li>e.g. To initialize the base class subobject, we must call a constructor of the base class. It is not allowed to initialize data members of the base class subobject directly.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#constructor-of-discounteditem","title":"Constructor of <code>DiscountedItem</code>","text":"<pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\npublic:\n  DiscountedItem(const std::string &amp;name, double price,\n                 int minQ, double disc)\n      : Item(name, price), m_minQuantity(minQ), m_discount(disc) {}\n};\n</code></pre> <p>It is not allowed to write this:</p> <pre><code>DiscountedItem(const std::string &amp;name, double price,\n               int minQ, double disc)\n    : m_name(name), m_price(price), m_minQuantity(minQ), m_discount(disc) {}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#constructor-of-derived-classes","title":"Constructor of derived classes","text":"<p>Before the initialization of the derived class's own data members, the base class subobject must be initialized by having one of its ctors called.</p> <ul> <li>What if we don't call the base class's ctor explicitly?</li> </ul> <p><code>cpp   DiscountedItem(...)     : /* ctor of Item is not called */ m_minQuantity(minQ), m_discount(d) {}</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#constructor-of-derived-classes_1","title":"Constructor of derived classes","text":"<p>Before the initialization of the derived class's own data members, the base class subobject must be initialized by having one of its ctors called.</p> <ul> <li>What if we don't call the base class's ctor explicitly?</li> <li>The default constructor of the base class is called.</li> <li>If the base class is not default-constructible, an error.</li> <li>What does this constructor do?</li> </ul> <p><code>cpp   DiscountedItem() = default;</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#constructor-of-derived-classes_2","title":"Constructor of derived classes","text":"<p>Before the initialization of the derived class's own data members, the base class subobject must be initialized by having one of its ctors called.</p> <ul> <li>What if we don't call the base class's ctor explicitly?</li> <li>The default constructor of the base class is called.</li> <li>If the base class is not default-constructible, an error.</li> <li>What does this constructor do?</li> </ul> <p><code>cpp   DiscountedItem() = default;</code></p> <ul> <li>Calls <code>Item::Item()</code> to default-initialize the base class subobject before initializing <code>m_minQuantity</code> and <code>m_discount</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#constructor-of-derived-classes_3","title":"Constructor of derived classes","text":"<p>In the following code, does the constructor of <code>DiscountedItem</code> compile?</p> <pre><code>class Item {\nprotected:\n  std::string m_name;\n  double m_price;\npublic:\n  Item(const std::string &amp;name, double p) : m_name(name), m_price(p) {}\n};\nclass DiscountedItem : public Item {\n  int m_minQuantity;\n  double m_discount;\npublic:\n  DiscountedItem(const std::string &amp;name, double p, int mq, double disc) {\n    m_name = name; m_price = p; m_minQuantity = mq; m_discount = disc;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#constructor-of-derived-classes_4","title":"Constructor of derived classes","text":"<p>In the following code, does the constructor of <code>DiscountedItem</code> compile?</p> <pre><code>class Item {\n  // ...\npublic:\n  // Since `Item` has a user-declared constructor, it does not have\n  // a default constructor.\n  Item(const std::string &amp;name, double p) : m_name(name), m_price(p) {}\n};\nclass DiscountedItem : public Item {\n  // ...\npublic:\n  DiscountedItem(const std::string &amp;name, double p, int mq, double disc)\n  // Before entering the function body, `Item::Item()` is called --&gt; Error!\n  { /* ... */ }\n};\n</code></pre> <p>[Best practice] Use constructor initializer lists whenever possible.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#dynamic-binding","title":"Dynamic binding","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#upcasting","title":"Upcasting","text":"<p>If <code>D</code> is a subclass of <code>B</code>: - A <code>B*</code> can point to a <code>D</code>, and - A <code>B&amp;</code> can be bound to a <code>D</code>.</p> <pre><code>DiscountedItem di = someValue();\nItem &amp;ir = di; // correct\nItem *ip = &amp;di; // correct\n</code></pre> <p>Reason: The is-a relationship! A <code>D</code> is a <code>B</code>.</p> <p>But on such references or pointers, only the members of <code>B</code> can be accessed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#upcasting-example","title":"Upcasting: Example","text":"<pre><code>void printItemName(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName() &lt;&lt; std::endl;\n}\nDiscountedItem di(\"A\", 10, 2, 0.8);\nItem i(\"B\", 15);\nprintItemName(i); // \"Name: B\"\nprintItemName(di); // \"Name: A\"\n</code></pre> <p><code>const Item &amp;item</code> can be bound to either an <code>Item</code> or a <code>DiscountedItem</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#static-type-and-dynamic-type","title":"Static type and dynamic type","text":"<ul> <li>static type of an expression: The type known at compile-time.</li> <li>dynamic type of an expression: The real type of the object that the expression is representing. This is known at run-time.</li> </ul> <pre><code>void printItemName(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName() &lt;&lt; std::endl;\n}\n</code></pre> <p>The static type of the expression <code>item</code> is <code>const Item</code>, but its dynamic type is not known until run-time. (It may be <code>const Item</code> or <code>const DiscountedItem</code>.)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#virtual-functions","title":"<code>virtual</code> functions","text":"<p><code>Item</code> and <code>DiscountedItem</code> have different ways of computing the net price.</p> <pre><code>void printItemInfo(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName()\n            &lt;&lt; \", price: \" &lt;&lt; item.netPrice(1) &lt;&lt; std::endl;\n}\n</code></pre> <ul> <li>Which <code>netPrice</code> should be called?</li> <li>How do we define two different <code>netPrice</code>s?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#virtual-functions_1","title":"<code>virtual</code> functions","text":"<pre><code>class Item {\npublic:\n  virtual double netPrice(int cnt) const {\n    return m_price * cnt;\n  }\n  // other members\n};\nclass DiscountedItem : public Item {\npublic:\n  double netPrice(int cnt) const override {\n    return cnt &lt; m_minQuantity ? cnt * m_price : cnt * m_price * m_discount;\n  }\n  // other members\n};\n</code></pre> <p>Note: <code>auto</code> cannot be used to deduce the return type of <code>virtual</code> functions.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#dynamic-binding_1","title":"Dynamic binding","text":"<pre><code>void printItemInfo(const Item &amp;item) {\n  std::cout &lt;&lt; \"Name: \" &lt;&lt; item.getName()\n            &lt;&lt; \", price: \" &lt;&lt; item.netPrice(1) &lt;&lt; std::endl;\n}\n</code></pre> <p>The dynamic type of <code>item</code> is determined at run-time.</p> <p>Since <code>netPrice</code> is a <code>virtual</code> function, which version is called is also determined at run-time: - If the dynamic type of <code>item</code> is <code>Item</code>, it calls <code>Item::netPrice</code>. - If the dynamic type of <code>item</code> is <code>DiscountedItem</code>, it calls <code>DiscountedItem::netPrice</code>.</p> <p>late binding, or dynamic binding</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#virtual-override","title":"<code>virtual</code>-<code>override</code>","text":"<p>To override (\u8986\u76d6/\u8986\u5199) a <code>virtual</code> function, - The function parameter list must be the same as that of the base class's version. - The return type should be identical to (or covariant with) that of the corresponding function in the base class.   - We will talk about \"covariant with\" in later lectures or recitations. - The <code>const</code>ness should be the same!</p> <p>To make sure you are truly overriding the <code>virtual</code> function (instead of making a overloaded version), use the <code>override</code> keyword.</p> <p>* Not to be confused with \"overloading\"\uff08\u91cd\u8f7d\uff09.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#virtual-override_1","title":"<code>virtual</code>-<code>override</code>","text":"<p>An overriding function is also <code>virtual</code>, even if not explicitly declared.</p> <pre><code>class DiscountedItem : public Item {\n  virtual double netPrice(int cnt) const override; // correct, explicitly virtual\n};\nclass DiscountedItem : public Item {\n  double netPrice(int cnt) const; // also correct, but not recommended\n};\n</code></pre> <p>The <code>override</code> keyword lets the compiler check and report if the function is not truly overriding.</p> <p>[Best practice] To override a virtual function, write the <code>override</code> keyword explicitly. The <code>virtual</code> keyword can be omitted.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#virtual-destructors","title":"<code>virtual</code> destructors","text":"<pre><code>Item *ip = nullptr;\nif (some_condition)\n  ip = new Item(/* ... */);\nelse\n  ip = new DiscountedItem(/* ... */);\n// ...\ndelete ip;\n</code></pre> <p>Whose destructor should be called?</p> <ul> <li>Only looking at the static type of <code>*ip</code> is not enough.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#virtual-destructors_1","title":"<code>virtual</code> destructors","text":"<pre><code>Item *ip = nullptr;\nif (some_condition)\n  ip = new Item(/* ... */);\nelse\n  ip = new DiscountedItem(/* ... */);\n// ...\ndelete ip;\n</code></pre> <p>Whose destructor should be called? - It needs to be determined at run-time! - To use dynamic binding correctly, you almost always need a <code>virtual</code> destructor.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#virtual-destructors_2","title":"<code>virtual</code> destructors","text":"<pre><code>Item *ip = nullptr;\nif (some_condition)\n  ip = new Item(/* ... */);\nelse\n  ip = new DiscountedItem(/* ... */);\n// ...\ndelete ip;\n</code></pre> <ul> <li>The implicitly-defined (compiler-generated) destructor is non-<code>virtual</code>, but we can explicitly require a <code>virtual</code> one:</li> </ul> <p><code>cpp   virtual ~Item() = default;</code> - If the dtor of the base class is <code>virtual</code>, the compiler-generated dtor for the derived class is also <code>virtual</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#almost-completed-item-and-discounteditem","title":"(Almost) completed <code>Item</code> and <code>DiscountedItem</code>","text":"<pre><code>class Item {\n  std::string m_name;\n\nprotected:\n  double m_price = 0.0;\n\npublic:\n  Item() = default;\n  Item(const std::string &amp;name, double price) : m_name(name), m_price(price) {}\n  const auto &amp;getName() const { return name; }\n  virtual double net_price(int n) const {\n    return n * price;\n  }\n  virtual ~Item() = default;\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#almost-completed-item-and-discounteditem_1","title":"(Almost) completed <code>Item</code> and <code>DiscountedItem</code>","text":"<pre><code>class DiscountedItem : public Item {\n  int m_minQuantity = 0;\n  double m_discount = 1.0;\n\npublic:\n  DiscountedItem(const std::string &amp;name, double price,\n                 int minQ, double disc)\n      : Item(name, price), m_minQuantity(minQ), m_discount(disc) {}\n  double netPrice(int cnt) const override {\n    return cnt &lt; m_minQuantity ? cnt * m_price : cnt * m_price * m_discount;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#usage-with-smart-pointers","title":"Usage with smart pointers","text":"<p>Smart pointers are implemented by wrapping the raw pointers, so they can also be used for dynamic binding.</p> <pre><code>std::vector&lt;std::shared_ptr&lt;Item&gt;&gt; myItems;\nfor (auto i = 0; i != n; ++i) {\n  if (someCondition) {\n    myItems.push_back(std::make_shared&lt;Item&gt;(someParams));\n  } else {\n    myItems.push_back(std::make_shared&lt;DiscountedItem&gt;(someParams));\n  }\n}\n</code></pre> <p>A <code>std::unique_ptr&lt;Derived&gt;</code> can be implicitly converted to a <code>std::unique_ptr&lt;Base&gt;</code>.</p> <p>A <code>std::shared_ptr&lt;Derived&gt;</code> can be implicitly converted to a <code>std::shared_ptr&lt;Base&gt;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#copy-control","title":"Copy-control","text":"<p>Remember to copy/move the base subobject! One possible way:</p> <pre><code>class Derived : public Base {\npublic:\n  Derived(const Derived &amp;other)\n      : Base(other), /* Derived's own members */ { /* ... */ }\n  Derived &amp;operator=(const Derived &amp;other) {\n    Base::operator=(other); // call Base's operator= explicitly\n    // copy Derived's own members\n    return *this;\n  }\n  // ...\n};\n</code></pre> <p>Why <code>Base(other)</code> and <code>Base::operator=(other)</code> work?</p> <ul> <li>The parameter type is <code>const Base &amp;</code>, which can be bound to a <code>Derived</code> object.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#synthesized-copy-control-members","title":"Synthesized copy-control members","text":"<p>Guess!</p> <ul> <li>What are the behaviors of the compiler-generated copy-control members?</li> <li>In what cases will they be <code>delete</code>d?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#synthesized-copy-control-members_1","title":"Synthesized copy-control members","text":"<p>Remeber that the base class's subobject is always handled first.</p> <p>These rules are quite natural:</p> <ul> <li>What are the behaviors of the compiler-generated copy-control members?</li> <li>First, it calls the base class's corresponding copy-control member.</li> <li>Then, it performs the corresponding operation on the derived class's own data members.</li> <li>In what cases will they be <code>delete</code>d?</li> <li>If the base class's corresponding copy-control member is not accessible (e.g. non-existent, or <code>private</code>),</li> <li>or if any of the data members' corresponding copy-control member is not accessible.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#slicing","title":"Slicing","text":"<p>Dynamic binding only happens on references or pointers to base class.</p> <pre><code>DiscountedItem di(\"A\", 10, 2, 0.8);\nItem i = di; // What happens?\nauto x = i.netPrice(3); // Which netPrice?\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#slicing_1","title":"Slicing","text":"<p>Dynamic binding only happens on references or pointers to base class.</p> <pre><code>DiscountedItem di(\"A\", 10, 2, 0.8);\nItem i = di; // What happens?\nauto x = i.netPrice(3); // Which netPrice?\n</code></pre> <p><code>Item i = di;</code> calls the copy constructor of <code>Item</code> - but <code>Item</code>'s copy constructor handles only the base part. - So <code>DiscountedItem</code>'s own members are ignored, or \"sliced down\". - <code>i.netPrice(3)</code> calls <code>Item::netPrice</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#downcasting","title":"Downcasting","text":"<pre><code>Base *bp = new Derived{};\n</code></pre> <p>If we only have a <code>Base</code> pointer, but we are quite sure that it points to a <code>Derived</code> object - Accessing the members of <code>Derived</code> through <code>bp</code> is not allowed. - How can we perform a \"downcasting\"?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#polymorphic-class","title":"Polymorphic class","text":"<p>A class is said to be polymorphic if it has (declares or inherits) at least one virtual function.</p> <ul> <li>Either a <code>virtual</code> normal member function or a <code>virtual</code> dtor is ok.</li> </ul> <p>If a class is polymorphic, all classes derived from it are polymorphic.</p> <ul> <li>There is no way to \"refuse\" to inherit any member functions, so <code>virtual</code> member functions must be inherited.</li> <li>The dtor must be <code>virtual</code> if the dtor of the base class is <code>virtual</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#downcasting-for-polymorphic-class-only","title":"Downcasting: For polymorphic class only","text":"<p><code>dynamic_cast&lt;Target&gt;(expr)</code>.</p> <pre><code>Base *bp = new Derived{};\nDerived *dp = dynamic_cast&lt;Derived *&gt;(bp);\nDerived &amp;dr = dynamic_cast&lt;Derived &amp;&gt;(*bp);\n</code></pre> <ul> <li><code>Target</code> must be a reference or a pointer type.</li> <li><code>dynamic_cast</code> will perform runtime type identification (RTTI) to check the dynamic type of the expression.</li> <li>If the dynamic type is <code>Derived</code>, or a derived class (direct or indirect) of <code>Derived</code>, the downcasting succeeds.</li> <li>Otherwise, the downcasting fails. If <code>Target</code> is a pointer, returns a null pointer. If <code>Target</code> is a reference, throws an exception <code>std::bad_cast</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#dynamic_cast-can-be-very-slow","title":"<code>dynamic_cast</code> can be very slow","text":"<p><code>dynamic_cast</code> performs a runtime check to see whether the downcasting should succeed, which uses runtime type information.</p> <p>This is much slower than other types of casting, e.g. <code>const_cast</code>, or arithmetic conversions.</p> <p>[Best practice] Avoid <code>dynamic_cast</code> whenever possible.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#guaranteed-successful-downcasting-use-static_cast","title":"Guaranteed successful downcasting: Use <code>static_cast</code>.","text":"<p>If the downcasting is guaranteed to be successful, you may use <code>static_cast</code></p> <pre><code>auto dp = static_cast&lt;Derived *&gt;(bp); // quicker than dynamic_cast,\n// but performs no checks. If the dynamic type is not Derived, UB.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#avoiding-dynamic_cast","title":"Avoiding <code>dynamic_cast</code>","text":"<p>Typical abuse of <code>dynamic_cast</code>:</p> <pre><code>struct A {\n  virtual ~A() {}\n};\nstruct B : A {};\nstruct C : A {};\n</code></pre> <pre><code>std::string getType(const A *ap) {\n  if (dynamic_cast&lt;const B *&gt;(ap))\n    return \"B\";\n  else if (dynamic_cast&lt;const C *&gt;(ap))\n    return \"C\";\n  else\n    return \"A\";\n}\n</code></pre> <p>Click here to see how large and slow the generated code is: https://godbolt.org/z/3367efGd7</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#avoiding-dynamic_cast_1","title":"Avoiding <code>dynamic_cast</code>","text":"<p>Use a group of <code>virtual</code> functions!</p> <pre><code>struct A {\n  virtual ~A() {}\n  virtual std::string name() const {\n    return \"A\";\n  }\n};\nstruct B : A {\n  std::string name()const override{\n    return \"B\";\n  }\n};\nstruct C : A {\n  std::string name()const override{\n    return \"C\";\n  }\n};\n</code></pre> <pre><code>auto getType(const A *ap) {\n  return ap-&gt;name();\n}\n</code></pre>   - This time: https://godbolt.org/z/KosbcaGnT    The generated code is much simpler!"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#summary","title":"Summary","text":"<p>Inheritance</p> <ul> <li>Every object of type <code>Derived</code> contains a subobject of type <code>Base</code>.</li> <li>Every member of <code>Base</code> is inherited, no matter whether it is accessible or not.</li> <li>Inheritance should not break the base class's encapsulation.</li> <li>The access control of inherited members is not changed.</li> <li>Every constructor of <code>Derived</code> calls a constructor of <code>Base</code> to initialize the base class subobject before initializing its own data members.</li> <li>The destructor of <code>Derived</code> calls the destructor of <code>Base</code> to destroy the base class subobject after destroying its own data members.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l21/l21.html#summary_1","title":"Summary","text":"<p>Dynamic binding</p> <ul> <li>Upcasting: A pointer, reference or smart pointer to <code>Base</code> can be bound to an object of type <code>Derived</code>.</li> <li>static type and dynamic type</li> <li><code>virtual</code> functions: A function that can be overridden by derived classes.</li> <li>The base class and the derived class can provide different versions of this function.</li> <li>Dynamic (late) binding</li> <li>A call to a virtual function on a pointer or reference to <code>Base</code> will actually call the corresponding version of that function according to the dynamic type.</li> <li>Avoid downcasting if possible.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html","title":"CS100 Lecture 22","text":"<p>Inheritance and Polymorphism II</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#contents","title":"Contents","text":"<ul> <li>Abstract base class</li> <li>More on the \"is-a\" relationship (Effective C++ Item 32)</li> <li>Inheritance of interface vs inheritance of implementation (Effective C++ Item 34)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#abstract-base-class","title":"Abstract base class","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#shapes","title":"Shapes","text":"<p>Define different shapes: Rectangle, Triangle, Circle, ...</p> <p>Suppose we want to draw things like this:</p> <pre><code>void drawThings(ScreenHandle &amp;screen,\n                const std::vector&lt;std::shared_ptr&lt;Shape&gt;&gt; &amp;shapes) {\n  for (const auto &amp;shape : shapes)\n    shape-&gt;draw(screen);\n}\n</code></pre> <p>and print information:</p> <pre><code>void printShapeInfo(const Shape &amp;shape) {\n  std::cout &lt;&lt; \"Area: \" &lt;&lt; shape.area()\n            &lt;&lt; \"Perimeter: \" &lt;&lt; shape.perimeter() &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#shapes_1","title":"Shapes","text":"<p>Define a base class <code>Shape</code> and let other shapes inherit it.</p> <pre><code>class Shape {\npublic:\n  Shape() = default;\n  virtual void draw(ScreenHandle &amp;screen) const;\n  virtual double area() const;\n  virtual double perimeter() const;\n  virtual ~Shape() = default;\n};\n</code></pre> <p>Different shapes should define their own <code>draw</code>, <code>area</code>  and <code>perimeter</code>, so these functions should be <code>virtual</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#shapes_2","title":"Shapes","text":"<pre><code>class Rectangle : public Shape {\n  Point2d mTopLeft, mBottomRight;\n\npublic:\n  Rectangle(const Point2d &amp;tl, const Point2d &amp;br)\n      : mTopLeft(tl), mBottomRight(br) {} // Base is default-initialized\n  void draw(ScreenHandle &amp;screen) const override { /* ... */ }\n  double area() const override {\n    return (mBottomRight.x - mTopLeft.x) * (mBottomRight.y - mTopLeft.y);\n  }\n  double perimeter() const override {\n    return 2 * (mBottomRight.x - mTopLeft.x + mBottomRight.y - mTopLeft.y);\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#shapes_3","title":"Shapes","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#pure-virtual-functions","title":"Pure <code>virtual</code> functions","text":"<p>How should we define <code>Shape::draw</code>, <code>Shape::area</code> and <code>Shape::perimeter</code>?</p> <ul> <li>For the general concept \"Shape\", there is no way to determine the behaviors of these functions.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#pure-virtual-functions_1","title":"Pure <code>virtual</code> functions","text":"<p>How should we define <code>Shape::draw</code>, <code>Shape::area</code> and <code>Shape::perimeter</code>?</p> <ul> <li>For the general concept \"Shape\", there is no way to determine the behaviors of these functions.</li> <li>Direct call to <code>Shape::draw</code>, <code>Shape::area</code> and <code>Shape::perimeter</code> should be forbidden.</li> <li>We shouldn't even allow an object of type <code>Shape</code> to be instantiated! The class <code>Shape</code> is only used to define the concept \"Shape\" and required interfaces.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#pure-virtual-functions_2","title":"Pure <code>virtual</code> functions","text":"<p>If a <code>virtual</code> function does not have a reasonable definition in the base class, it should be declared as pure <code>virtual</code> by writing <code>=0</code>.</p> <pre><code>class Shape {\npublic:\n  virtual void draw(ScreenHandle &amp;) const = 0;\n  virtual double area() const = 0;\n  virtual double perimeter() const = 0;\n  virtual ~Shape() = default;\n};\n</code></pre> <p>Any class that has a pure <code>virtual</code> function is an abstract class. Pure <code>virtual</code> functions (usually) cannot be called \\({}^{\\textcolor{red}{1}}\\), and abstract classes cannot be instantiated.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#pure-virtual-functions-and-abstract-classes","title":"Pure <code>virtual</code> functions and abstract classes","text":"<p>Any class that has a pure <code>virtual</code> function is an abstract class. Pure <code>virtual</code> functions (usually) cannot be called \\({}^{\\textcolor{red}{1}}\\), and abstract classes cannot be instantiated.</p> <pre><code>Shape shape; // Error.\nShape *p = new Shape; // Error.\nauto sp = std::make_shared&lt;Shape&gt;(); // Error.\nstd::shared_ptr&lt;Shape&gt; sp2 = std::make_shared&lt;Rectangle&gt;(p1, p2); // OK.\n</code></pre> <p>We can define pointer or reference to an abstract class, but never an object of that type!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#pure-virtual-functions-and-abstract-classes_1","title":"Pure <code>virtual</code> functions and abstract classes","text":"<p>An impure <code>virtual</code> function must be defined. Otherwise, the compiler will fail to generate necessary runtime information (the virtual table), which leads to an error.</p> <pre><code>class X {\n  virtual void foo(); // Declaration, without a definition\n  // Even if `foo` is not used, this will lead to an error.\n};\n</code></pre> <p>Linkage error:</p> <pre><code>/usr/bin/ld: /tmp/ccV9TNfM.o: in function `main':\na.cpp:(.text+0x1e): undefined reference to `vtable for X'\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#make-the-interface-robust-not-error-prone","title":"Make the interface robust, not error-prone.","text":"<p>Is this good?</p> <pre><code>class Shape {\npublic:\n  virtual double area() const {\n    return 0;\n  }\n};\n</code></pre> <p>What about this?</p> <pre><code>class Shape {\npublic:\n  virtual double area() const {\n    throw std::logic_error{\"area() called on Shape!\"};\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#make-the-interface-robust-not-error-prone_1","title":"Make the interface robust, not error-prone.","text":"<pre><code>class Shape {\npublic:\n  virtual double area() const {\n    return 0;\n  }\n};\n</code></pre> <p>If <code>Shape::area</code> is called accidentally, the error will happen silently!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#make-the-interface-robust-not-error-prone_2","title":"Make the interface robust, not error-prone.","text":"<pre><code>class Shape {\npublic:\n  virtual double area() const {\n    throw std::logic_error{\"area() called on Shape!\"};\n  }\n};\n</code></pre> <p>If <code>Shape::area</code> is called accidentally, an exception will be raised.</p> <p>However, a good design should make errors fail to compile.</p> <p>[Best practice] If an error can be caught in compile-time, don't leave it until run-time.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#polymorphism","title":"Polymorphism (\u591a\u6001)","text":"<p>Polymorphism: The provision of a single interface to entities of different types, or the use of a single symbol to represent multiple different types.</p> <ul> <li>Run-time polymorphism: Achieved via dynamic binding.</li> <li>Compile-time polymorphism: Achieved via function overloading, templates, concepts (since C++20), etc.</li> </ul>   Run-time polymorphism:   <pre><code>struct Shape {\n  virtual void draw() const = 0;\n};\nvoid drawStuff(const Shape &amp;s) {\n  s.draw();\n}\n</code></pre>   Compile-time polymorphism:   <pre><code>template &lt;typename T&gt;\nconcept Shape = requires(const T x) {\n  x.draw();\n};\nvoid drawStuff(Shape const auto &amp;s) {\n  s.draw();\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#more-on-the-is-a-relationship","title":"More on the \"is-a\" relationship","text":"<p>Effective C++ Item 32</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#public-inheritance-the-is-a-relationship","title":"Public inheritance: The \"is-a\" relationship","text":"<p>By writing that class <code>D</code> publicly inherits from class <code>B</code>, you are telling the compiler (as well as human readers of your code) that</p> <ul> <li>Every object of type <code>D</code> is also an object of type <code>B</code>, but not vice versa.</li> <li><code>B</code> represents a more general concept than <code>D</code>, and that <code>D</code> represents a more specialized concept than <code>B</code>.</li> </ul> <p>More specifically, you are asserting that anywhere an object of type <code>B</code> can be used, an object of type <code>D</code> can be used just as well. - On the other hand, if you need an object of type <code>D</code>, an object of type <code>B</code> won't do.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#example-every-student-is-a-person","title":"Example: Every student is a person.","text":"<pre><code>class Person { /* ... */ };\nclass Student : public Person { /* ... */ };\n</code></pre> <ul> <li>Every student is a person, but not every person is a student.</li> <li> <p>Anything that is true of a person is also true of a student:</p> </li> <li> <p>A person has a date of birth, so does a student.</p> </li> <li> <p>Something is true of a student, but not true of people in general.</p> </li> <li> <p>A student is entrolled in a particular school, but a person may not.</p> </li> </ul> <p>The notion of a person is more general than is that of a student; a student is a specialized type of person.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#example-every-student-is-a-person_1","title":"Example: Every student is a person.","text":"<p>The is-a relationship: Anywhere an object of type <code>Person</code> can be used, an object of type <code>Student</code> can be used just as well, but not vice versa.</p> <pre><code>void eat(const Person &amp;p);    // Anyone can eat.\nvoid study(const Student &amp;s); // Only students study.\nPerson p;\nStudent s;\neat(p);   // Fine. `p` is a person.\neat(s);   // Fine. `s` is a student, and a student is a person.\nstudy(s); // Fine.\nstudy(p); // Error! `p` isn't a student.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#your-intuition-can-mislead-you","title":"Your intuition can mislead you.","text":"<ul> <li>A penguin is a bird.</li> <li>A bird can fly.</li> </ul> <p>If we naively try to express this in C++, our effort yields:</p> <pre><code>class Bird {\npublic:\n  virtual void fly();         // Birds can fly.\n  // ...\n};\nclass Penguin : public Bird { // A penguin is a bird.\n  // ...\n};\n</code></pre> <pre><code>Penguin p;\np.fly();    // Oh no!! Penguins cannot fly, but this code compiles!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#no-not-every-bird-can-fly","title":"No. Not every bird can fly.","text":"<p>In general, birds have the ability to fly.</p> <ul> <li>Strictly speaking, there are several types of non-flying birds.</li> </ul> <p>Maybe the following hierarchy models the reality much better?</p> <pre><code>class Bird { /* ... */ };\nclass FlyingBird : public Bird {\n  virtual void fly();\n};\nclass Penguin : public Bird {   // Not FlyingBird\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#no-not-every-bird-can-fly_1","title":"No. Not every bird can fly.","text":"<p>Maybe the following hierarchy models the reality much better?</p> <pre><code>class Bird { /* ... */ };\nclass FlyingBird : public Bird {\n  virtual void fly();\n};\nclass Penguin : public Bird {   // Not FlyingBird\n  // ...\n};\n</code></pre> <ul> <li>Not necessarily. If your application has much to do with beaks and wings, and nothing to do with flying, the original two-class hierarchy might be satisfactory.</li> <li>There is no one ideal design for every software. The best design depends on what the system is expected to do.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#what-about-report-a-runtime-error","title":"What about report a runtime error?","text":"<pre><code>void report_error(const std::string &amp;msg); // defined elsewhere\nclass Penguin : public Bird {\npublic:\n  virtual void fly() {\n    report_error(\"Attempt to make a penguin fly!\");\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#what-about-report-a-runtime-error_1","title":"What about report a runtime error?","text":"<pre><code>void report_error(const std::string &amp;msg); // defined elsewhere\nclass Penguin : public Bird {\npublic:\n  virtual void fly() { report_error(\"Attempt to make a penguin fly!\"); }\n};\n</code></pre> <p>No. This does not say \"Penguins can't fly.\" This says \"Penguins can fly, but it is an error for them to actually try to do it.\"</p> <p>To actually express the constraint \"Penguins can't fly\", you should prevent the attempt from compiling.</p> <pre><code>Penguin p;\np.fly(); // This should not compile.\n</code></pre> <p>[Best practice] Good interfaces prevent invalid code from compiling.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#example-a-square-is-a-rectangle","title":"Example: A square is a rectangle.","text":"<p>Should class <code>Square</code> publicly inherit from class <code>Rectangle</code>?</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#example-a-square-is-a-rectangle_1","title":"Example: A square is a rectangle.","text":"<p>Consider this code.</p> <pre><code>class Rectangle {\npublic:\n  virtual void setHeight(int newHeight);\n  virtual void setWidth(int newWidth);\n  virtual int getHeight() const;\n  virtual int getWidth() const;\n  // ...\n};\nvoid makeBigger(Rectangle &amp;r) {\n  r.setWidth(r.getWidth() + 10);\n}\n</code></pre> <pre><code>class Square : public Rectangle {\n  // A square is a rectangle,\n  // where height == width.\n  // ...\n};\n\nSquare s(10);  // A 10x10 square.\nmakeBigger(s); // Oh no!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#is-this-really-an-is-a-relationship","title":"Is this really an \"is-a\" relationship?","text":"<p>We said before that the \"is-a\" relationship means that anywhere an object of type <code>B</code> can be used, an object of type <code>D</code> can be used just as well.</p> <p>However, something applicable to a rectangle is not applicable to a square!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#conclusion-public-inheritance-means-is-a-everything-that-applies-to-base-classes-must-also-apply-to-derived-classes-because-every-derived-class-object-is-a-base-class-object","title":"Conclusion: Public inheritance means \"is-a\". Everything that applies to base classes must also apply to derived classes, because every derived class object is a base class object.","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#inheritance-of-interface-vs-inheritance-of-implementation","title":"Inheritance of interface vs inheritance of implementation","text":"<p>Effective C++ Item 34</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#example-airplanes-for-xyz-airlines","title":"Example: Airplanes for XYZ Airlines.","text":"<p>Suppose XYZ has only two kinds of planes: the Model A and the Model B, and both are flown in exactly the same way.</p> <pre><code>class Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    // Default code for flying an airplane to the given destination.\n  }\n};\nclass ModelA : public Airplane { /* ... */ };\nclass ModelB : public Airplane { /* ... */ };\n</code></pre> <ul> <li><code>Airplane::fly</code> is declared <code>virtual</code> because in principle, different airplanes should be flown in different ways.</li> <li><code>Airplane::fly</code> is defined, to avoid copy-and-pasting code in the <code>ModelA</code> and <code>ModelB</code> classes.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#example-airplanes-for-xyz-airlines_1","title":"Example: Airplanes for XYZ Airlines.","text":"<p>Now suppose that XYZ decides to acquire a new type of airplane, the Model C, which is flown differently from the Model A and the Model B.</p> <p>XYZ's programmers add the class <code>ModelC</code> to the hierarchy, but forget to redefine the <code>fly</code> function!</p> <pre><code>class ModelC : public Airplane {\n  // `fly` is not overridden.\n  // ...\n};\n</code></pre> <p>This surely leads to a disaster:</p> <pre><code>auto pc = std::make_unique&lt;ModelC&gt;();\npc-&gt;fly(PVG); // No! Attempts to fly Model C in the Model A/B way!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#impure-virtual-function-interface-default-implementation","title":"Impure virtual function: Interface + default implementation","text":"<p>The problem here is not that <code>Airplane::fly</code> has default behavior, but that <code>ModelC</code> was allowed to inherit that behavior without explicitly saying that it wanted to.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#by-defining-an-impure-virtual-function-we-have-the-derived-class-inherit-a-function-interface-as-well-as-a-default-implementation","title":"* By defining an impure virtual function, we have the derived class inherit a function interface as well as a default implementation.","text":"<ul> <li>Interface: Every class inheriting from <code>Airplane</code> can <code>fly</code>.</li> <li>Default implementation: If <code>ModelC</code> does not override <code>Airplane::fly</code>, it will have the inherited implementation automatically.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#separate-default-implementation-from-interface","title":"Separate default implementation from interface","text":"<p>To sever the connection between the interface of the virtual function and its default implementation:</p> <pre><code>class Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) = 0; // pure virtual\n  // ...\nprotected:\n  void defaultFly(const Airport &amp;destination) {\n    // Default code for flying an airplane to the given destination.\n  }\n};\n</code></pre> <ul> <li>The pure virtual function <code>fly</code> provides the interface: Every derived class can <code>fly</code>.</li> <li>The default implementation is written in <code>defaultFly</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#separate-default-implementation-from-interface_1","title":"Separate default implementation from interface","text":"<p>If <code>ModelA</code> and <code>ModelB</code> want to adopt the default way of flying, they simply make a call to <code>defaultFly</code>.</p> <pre><code>class ModelA : public Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    defaultFly(destination);\n  }\n  // ...\n};\nclass ModelB : public Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    defaultFly(destination);\n  }\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#separate-default-implementation-from-interface_2","title":"Separate default implementation from interface","text":"<p>For <code>ModelC</code>:</p> <ul> <li>Since <code>Airplane::fly</code> is pure virtual, <code>ModelC</code> must define its own version of <code>fly</code>.</li> <li>If it does want to use the default implementation, it must say it explicitly by making a call to <code>defaultFly</code>.</li> </ul> <pre><code>class ModelC : public Airplane {\npublic:\n  virtual void fly(const Airport &amp;destination) {\n    // The \"Model C way\" of flying.\n    // Without the definition of this function, `ModelC` remains abstract,\n    // which does not compile if we create an object of such type.\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#still-not-satisfactory","title":"Still not satisfactory?","text":"<p>Some people object to the idea of having separate functions for providing the interface and the default implementation, such as <code>fly</code> and <code>defaultFly</code> above.</p> <ul> <li> <p>For one thing, it pollutes the class namespace with closely related function names.</p> </li> <li> <p>This really matters, especially in complicated projects. Extra mental effort might be required to distinguish the meaning of overly similar names.</p> </li> </ul> <p>Read the rest part of Effective C++ Item 34 for another solution to this problem.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#inheritance-of-interface-vs-inheritance-of-implementation_1","title":"Inheritance of interface vs inheritance of implementation","text":"<p>We have come to the conclusion that</p> <ul> <li>Pure virtual functions specify inheritance of interface only.</li> <li>Simple (impure) virtual functions specify inheritance of interface + a default implementation.</li> <li>The default implementation can be overridden.</li> </ul> <p>Moreover, non-virtual functions specify inheritance of interface + a mandatory implementation.</p> <p>Note: In public inheritance, interfaces are always inherited.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#summary","title":"Summary","text":"<p>Pure virtual function and abstract class</p> <ul> <li>A pure virtual function is a virtual function declared <code>= 0</code>.</li> <li>Call to a pure virtual function is not allowed. \\({}^{\\textcolor{red}{1}}\\)</li> <li>Pure virtual functions define the interfaces and force the derived classes to override it.</li> <li>A class that has a pure virtual function is an abstract class.</li> <li>We cannot create an object of an abstract class type.</li> <li>Abstract classes are often used to represent abstract, general concepts.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#summary_1","title":"Summary","text":"<p>Public inheritance models the \"is-a\" relationship.</p> <ul> <li>Everything that applies to base classes must also apply to derived classes.</li> <li>The \"Birds can fly, and a penguin is a bird\" example.</li> <li>The \"A square is a rectangle\" example.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#summary_2","title":"Summary","text":"<p>Inheritance of interface vs inheritance of implementation</p> <ul> <li>In public inheritance, interfaces are always inherited.</li> <li>Pure virtual functions: inheritance of interface only.</li> <li>Simple (impure) virtual functions: inheritance of interface + a default implementation.</li> <li>The default implementation can be overridden.</li> <li>non-virtual functions: inheritance of interface + a mandatory implementation.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l22/l22.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) A pure virtual function can have a definition. In that case, it can be called via the syntax <code>ClassName::functionName(args)</code>, not via a virtual function call (dynamic binding).</p> <p>In some cases, we want a class to be made abstract, but it does not have any pure virtual function. A possible workaround is to declare the destructor to be pure virtual, and then provide a definition for it:</p> <pre><code>struct Foo {\n  virtual ~Foo() = 0;\n};\nFoo::~Foo() = default; // Provide a definition outside the class.\n</code></pre> <p>The \"another solution\" mentioned in page 36 is also related to this.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html","title":"CS100 Lecture 23","text":"<p>More on STL: Sequence containers and associative containers</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#contents","title":"Contents","text":"<p>More on STL: Sequence containers and associative containers</p> <ul> <li>Overview of STL</li> <li>Sequence containers</li> <li>Associative containers</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#overview-of-stl","title":"Overview of STL","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#standard-template-library","title":"Standard Template Library","text":"<p>Added into C++ in 1994.</p> <ul> <li>Containers</li> <li>Iterators (In Lecture 20)</li> <li>Algorithms (In Lecture 20)</li> <li>Function objects</li> <li>Some other adaptors, like container adaptors and iterator adaptors</li> <li>Allocators</li> </ul> <p>The next generation: C++20 Ranges</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#containers","title":"Containers","text":"<ul> <li>Sequence containers</li> <li><code>vector</code>, <code>list</code>, <code>deque</code>, <code>array</code> (since C++11), <code>forward_list</code> (since C++11)</li> <li>Associative containers</li> <li><code>set</code>, <code>map</code>, <code>multiset</code>, <code>multimap</code> (often implemented with binary search trees)</li> <li>Unordered associative containers (since C++11)</li> <li><code>unordered_set</code>, <code>unordered_map</code>, <code>unordered_multiset</code>, <code>unordered_multimap</code> (implemented with hash tables)</li> <li>Container adaptors: provide a different interface for sequential containers, but they are not containers themselves.</li> <li><code>stack</code>, <code>queue</code>, <code>priority_queue</code></li> <li>(since C++23) <code>flat_set</code>, <code>flat_map</code>, <code>flat_multiset</code>, <code>flat_multimap</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#iterators","title":"Iterators","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#without-iterators","title":"Without iterators:","text":"<ul> <li>Traverse an array   <code>cpp   for (int i = 0; i != sizeof(a) / sizeof(a[0]); ++i)     do_something(a[i]);</code></li> <li>Traverse a <code>vector</code> <code>cpp   for (std::size_t i = 0; i != v.size(); ++i)     do_something(v[i]);</code></li> <li>Traverse a linked-list?   <code>cpp   for (ListNode *p = l.head(); p; p = p-&gt;next)     do_something(p-&gt;data);</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#iterators_1","title":"Iterators","text":"<p>A generalization of pointers, used to access elements in different containers in a uniform manner.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#with-iterators","title":"With iterators:","text":"<p>The following works no matter whether <code>c</code> is an array, a <code>std::string</code>, or any container.</p> <pre><code>for (auto it = std::begin(c); it != std::end(c); ++it)\n  do_something(*it);\n</code></pre> <p>Equivalent way: range-based for loops</p> <pre><code>for (auto &amp;x : c) do_something(x);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#algorithms","title":"Algorithms","text":"<p>The algorithms library defines functions for a variety of purposes: - searching, sorting, counting, manipulating, ...</p> <p>Examples:</p> <pre><code>// assign every element in `a` with the value `x`.\nstd::fill(a.begin(), a.end(), x);\n// sort the elements in `b` in ascending order.\nstd::sort(b.begin(), b.end());\n// find the first element in `b` that is equal to `x`.\nauto pos = std::find(b.begin(), b.end(), x);\n// reverse the elements in `c`.\nstd::reverse(c.begin(), c.end());\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#algorithms_1","title":"Algorithms","text":"<p>Example: Obtain the rank of each number in a sequence.</p> <pre><code>auto getRank(const std::vector&lt;int&gt; &amp;data) {\n  auto tmp = data;\n  std::sort(tmp.begin(), tmp.end()); // sort\n  auto pos = std::unique(tmp.begin(), tmp.end()); // drop duplicates\n  auto ret = data;\n  for (auto &amp;x : ret)\n    x = std::lower_bound(tmp.begin(), pos, x) - tmp.begin(); // binary search\n  return ret;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#function-objects","title":"Function objects","text":"<p>Things that look like \"functions\": Callable - functions, and also function pointers - objects of a class type that has an overloaded <code>operator()</code> (the function-call operator) - lambda expressions</p> <p>The standard library has defined some common function objects: <code>std::less</code>, <code>std::greater</code>, ...</p> <pre><code>std::sort(a.begin(), a.end(), std::greater&lt;&gt;{}); // Sort in descending order.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#adaptors","title":"Adaptors","text":"<p>Container adaptors: <code>std::stack</code>, <code>std::queue</code>, <code>std::priority_queue</code> - Represent the stack, queue and the priority-queue data structures respectively. - They are not containers themselves. They are based on some underlying container, and provide the interfaces of the corresponding data structures.</p> <pre><code>std::stack&lt;int&gt; stk; // By default, uses `std::deque&lt;int&gt;` as\n                     // the underlying container.\nstd::stack&lt;int, std::vector&lt;int&gt;&gt; stk2; // Uses `std::vector&lt;int&gt;`.\n</code></pre> <p>Iterator adaptors: To be discussed in recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#sequence-containers","title":"Sequence containers","text":"<p>Note: <code>std::string</code> is not treated as a container but behaves much like one.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#sequence-containers_1","title":"Sequence containers","text":"<ul> <li><code>std::vector&lt;T&gt;</code>: dynamic contiguous array (we are quite familiar with)</li> </ul> <ul> <li><code>std::deque&lt;T&gt;</code>: double-ended queue (often pronounced as \"deck\")</li> <li><code>std::deque&lt;T&gt;</code> supports fast insertion and deletion at both its beginning and its end. (<code>push_front</code>, <code>pop_front</code>, <code>push_back</code>, <code>pop_back</code>)</li> </ul> <ul> <li><code>std::array&lt;T, N&gt;</code>: same as <code>T[N]</code>,but it is a container</li> <li>It will never decay to <code>T *</code>.</li> <li>Container interfaces are provided: <code>.at(i)</code>, <code>.front()</code>, <code>.back()</code>, <code>.size()</code>, ..., as well as iterators.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#sequence-containers_2","title":"Sequence containers","text":"<ul> <li><code>std::list&lt;T&gt;</code>: doubly-linked list</li> <li><code>std::list&lt;T&gt;</code> supports fast insertion and deletion anywhere in the container,</li> <li>but fast random access is not supported (i.e. no <code>operator[]</code>).</li> <li>Bidirectional traversal is supported.</li> </ul> <ul> <li><code>std::forward_list&lt;T&gt;</code>: singly-linked list</li> <li>Intended to save time and space (compared to <code>std::list</code>).</li> <li>Only forward traversal is supported.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#interfaces","title":"Interfaces","text":"<p>STL containers have consistent interfaces. See here for a full list.</p> <p>Element access:</p> <ul> <li><code>c.at(i)</code>, <code>c[i]</code>: access the element indexed <code>i</code>. <code>at</code> performs bounds checking, and throws <code>std::out_of_range</code> if <code>i</code> exceeds the valid range.</li> <li><code>c.front()</code>, <code>c.back()</code>: access the front/back element.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#interfaces_1","title":"Interfaces","text":"<p>Size and capacity: <code>c.size()</code> and <code>c.empty()</code> are what we already know.</p> <ul> <li><code>c.resize(n)</code>, <code>c.resize(n, x)</code>: adjust the container to be with exactly <code>n</code> elements. If <code>n &gt; c.size()</code>, <code>n - c.size()</code> elements will be appended.</li> <li><code>c.resize(n)</code>: Appended elements are value-initialized.</li> <li><code>c.resize(n, x)</code>: Appended elements are copies of <code>x</code>.</li> <li><code>c.capacity()</code>, <code>c.reserve(n)</code>, <code>c.shrink_to_fit()</code>: only for <code>string</code> and <code>vector</code>.</li> <li><code>c.capacity()</code> returns the capacity (number of elements that can be stored in the current storage)</li> <li><code>c.reserve(n)</code>: reserves space for at least <code>n</code> elements.</li> <li><code>c.shrink_to_fit()</code>: requests to remove the unused capacity, so that <code>c.capacity() == c.size()</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#interfaces_2","title":"Interfaces","text":"<p>Modifiers:</p> <ul> <li><code>c.push_back(x)</code>, <code>c.emplace_back(args...)</code>, <code>c.pop_back()</code>: insert/delete elements at the end of the container.</li> <li><code>c.push_front(x)</code>, <code>c.emplace_front(args...)</code>, <code>c.pop_front()</code>: insert/delete elements at the beginning of the container.</li> <li><code>c.clear()</code> removes all the elements in <code>c</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#interfaces_3","title":"Interfaces","text":"<p>Modifiers:</p> <ul> <li><code>c.insert(...)</code>, <code>c.emplace(...)</code>, <code>c.erase(...)</code>: insert/delete elements at a specified location.</li> <li>Warning: For containers that need to maintain contiguous storage (<code>string</code>, <code>vector</code>, <code>deque</code>), insertion and deletion somewhere in the middle can be very slow (\\(O(n)\\)).</li> <li>These functions have a lot of overloads. Remember a few common ones, and STFW (Search The Friendly Web) when you need to use them.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#interfaces_4","title":"Interfaces","text":"<p>Some of these member functions are not supported on some containers, depending on the underlying data structure. For example: - Any operation that modifies the length of the container is not allowed for <code>array</code>. - <code>push_front</code>, <code>emplace_front</code> and <code>pop_front</code> are not supported on <code>string</code>, <code>vector</code> and <code>array</code>. - <code>size</code> is not supported on <code>forward_list</code> in order to save time and space. - <code>operator[]</code> and <code>at</code> are not supported on linked-lists.</p> <p>This table tells you everything.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#iterators_2","title":"Iterators","text":"<p>Every container has its iterator: <code>Container::iterator</code>. e.g. <code>std::vector&lt;int&gt;::iterator</code>, <code>std::forward_list&lt;std::string&gt;::iterator</code></p> <ul> <li><code>auto</code> comes to our rescue!</li> </ul> <p><code>c.begin()</code> returns the iterator to the first element of <code>c</code>.</p> <p><code>c.end()</code> returns the iterator to the element following the last element of <code>c</code>.</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#iterator-categories","title":"Iterator categories","text":"<p>ForwardIterators: supports <code>*it</code>, <code>it-&gt;mem</code>, <code>++it</code>, <code>it++</code>, <code>it1 == it2</code>, <code>it1 != it2</code></p> <p>BidirectionalIterator: a ForwardIterator that can be moved in both directions - supports <code>--it</code> and <code>it--</code>.</p> <p>RandomAccessIterator: a BidirectionalIterator that can be moved to point to any element in constant time. - supports <code>it + n</code>, <code>n + it</code>, <code>it - n</code>, <code>it += n</code>, <code>it -= n</code> for an integer <code>n</code>. - supports <code>it[n]</code>, equivalent to <code>*(it + n)</code>. - supports <code>it1 - it2</code>, returns the distance of two iterators. - supports <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#iterator-categories_1","title":"Iterator categories","text":"<p>ForwardIterators: an iterator that can be moved forward. - <code>forward_list&lt;T&gt;::iterator</code></p> <p>BidirectionalIterator: a ForwardIterator that can be moved in both directions - <code>list&lt;T&gt;::iterator</code></p> <p>RandomAccessIterator: a BidirectionalIterator that can be moved to point to any element in constant time. - <code>string::iterator</code>, <code>vector&lt;T&gt;::iterator</code>, <code>deque&lt;T&gt;::iterator</code>, <code>array&lt;T,N&gt;::iterator</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#iterator-categories_2","title":"Iterator categories","text":"<p>To know the category of an iterator of a container, consult its type alias member <code>iterator_category</code>.</p> <pre><code>using vec_iter = std::vector&lt;int&gt;::iterator;\nusing category = vec_iter::iterator_category;\n</code></pre> <p>Put your mouse on <code>category</code>, and the IDE will tell you what it is.</p> <p>It is one of the following tags: <code>std::forward_iterator_tag</code>, <code>std::bidirectional_iterator_tag</code>, <code>std::random_access_iterator_tag</code>.</p> <p>Note: Two other categories InputIterator and OutputIterator will be discussed in recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#constructors-of-containers","title":"Constructors of containers","text":"<p>All sequence containers can be constructed in the following ways:</p> <ul> <li><code>Container c(b, e)</code>, where <code>[b, e)</code> is an iterator range.</li> <li>Copies elements from the iterator range <code>[b, e)</code>.</li> <li><code>Container c(n, x)</code>, where <code>n</code> is a nonnegative integer and <code>x</code> is a value.</li> <li>Initializes the container with <code>n</code> copies of <code>x</code>.</li> <li><code>Container c(n)</code>, where <code>n</code> is a nonnegative integer.</li> <li>Initializes the container with <code>n</code> elements. All elements are value-initialized.</li> <li>This is not supported by <code>string</code>. (Why?)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#constructors-of-containers_1","title":"Constructors of containers","text":"<p>All sequence containers can be constructed in the following ways:</p> <ul> <li><code>Container c(b, e)</code>, where <code>[b, e)</code> is an iterator range.</li> <li>Copies elements from the iterator range <code>[b, e)</code>.</li> <li><code>Container c(n, x)</code>, where <code>n</code> is a nonnegative integer and <code>x</code> is a value.</li> <li>Initializes the container with <code>n</code> copies of <code>x</code>.</li> <li><code>Container c(n)</code>, where <code>n</code> is a nonnegative integer.</li> <li>Initializes the container with <code>n</code> elements. All elements are value-initialized.</li> <li>This is not supported by <code>string</code>, because it is meaningless to have <code>n</code> value-initializes <code>char</code>s (all of them will be <code>'\\0'</code>)!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#associative-containers","title":"Associative containers","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#motivation-set","title":"Motivation: set","text":"<p>Represent a \"set\": - Quick insertion, lookup and deletion of elements. - Order does not matter.</p> <p>Sequence containers do not suffice: - Lookup of elements is \\(O(n)\\). - Quick insertion/deletion only happens at certain positions for some containers.   - e.g. <code>vector</code> only supports quick insertion/deletion at the end. - The order of elements is preserved, which is not important.</p> <p>You will learn the appropriate data structures in CS101.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset","title":"<code>std::set</code>","text":"<p>Defined in <code>&lt;set&gt;</code>.</p> <ul> <li><code>std::set&lt;T&gt;</code> is a set whose elements are of type <code>T</code>. <code>operator&lt;(const T, const T)</code> should be supported, because it is usually implemented as Red-black trees.</li> <li><code>std::set&lt;T, Cmp&gt;</code> is also available. <code>x &lt; y</code> will be replaced with <code>cmp(x, y)</code>, where <code>cmp</code> is a function object of type <code>Cmp</code>.</li> </ul> <pre><code>std::set&lt;int&gt; s1; // An empty set of ints\nstd::set&lt;std::string&gt; s2{\"hello\", \"world\"}; // A set of strings,\n                                            // initialized with two elements\nstruct Student { std::string name; int id; };\nstd::set&lt;Student&gt; s3; // No operator&lt; for Student is available.\n                      // This line alone does not cause error, but you cannot\n                      // insert elements into it.\ns3.insert(Student{\"Alice\", 42}); // Error: No operator&lt; available.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset_1","title":"<code>std::set</code>","text":"<p>Defined in <code>&lt;set&gt;</code>.</p> <ul> <li><code>std::set&lt;T&gt;</code> is a set whose elements are of type <code>T</code>. <code>operator&lt;(const T, const T)</code> should be supported, because <code>set</code> is usually implemented as Red-black trees.</li> <li><code>std::set&lt;T, Cmp&gt;</code> is also available. <code>x &lt; y</code> will be replaced with <code>cmp(x, y)</code>, where <code>cmp</code> is a function object of type <code>Cmp</code>.</li> </ul> <pre><code>struct Student { std::string name; int id; };\nstruct CmpStudentByName {\n  bool operator()(const Student &amp;a, const Student &amp;b) const {\n    return a.name &lt; b.name;\n  }\n};\nstd::set&lt;Student, CmpStudentByName&gt; students; // OK\nstudents.insert(Student{\"Alice\", 42}); // OK\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset_2","title":"<code>std::set</code>","text":"<p>Constructors</p> <pre><code>std::set&lt;Type&gt; s1{a, b, c, ...};\nstd::set&lt;Type&gt; s2(begin, end); // An iterator range [begin, end)\n</code></pre> <p>C++17 CTAD (Class Template Argument Deduction) also applies:</p> <pre><code>std::set s1{a, b, c, ...}; // Element type is deduced according to the list\nstd::set s2(begin, end); // Element type is deduced according to\n                         // the type of elements pointed by `begin` and `end`.\n</code></pre> <p>Besides, <code>std::set</code> is copy-constructible, copy-assignable, move-constructible and move-assignable, just as the sequence containers we have learned.</p> <p><code>std::set</code> does not contain duplicate elements. These constructors will ignore duplicate elements.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-operations","title":"<code>std::set</code>: operations","text":"<p>Common operations: <code>s.empty()</code>, <code>s.size()</code>, <code>s.clear()</code>.</p> <p>Insertion: <code>insert</code> and <code>emplace</code>. Duplicate elements will not be inserted. - <code>s.insert(x)</code>, <code>s.insert({a, b, ...})</code>, <code>s.insert(begin, end)</code>.</p> <pre><code>std::set s{3, 2, 5, 5, 1}; // {1, 2, 3, 5}. The duplicate 5 is removed.\nstd::cout &lt;&lt; s.size() &lt;&lt; std::endl; // 4\ns.insert(42); // {1, 2, 3, 5, 42}\ns.insert(42); // Nothing is inserted. (No errors.)\nint a[]{10, 20, 30};\ns.insert(a, a + 3); // An iterator range.\n                    // s now contains {1, 2, 3, 5, 10, 20, 30, 42}.\ns.insert({11, 12}); // {1, 2, 3, 5, 10, 11, 12, 20, 30, 42}.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-insertion","title":"<code>std::set</code>: insertion","text":"<p>Insertion: <code>insert</code> and <code>emplace</code>. Duplicate elements will not be inserted. - <code>s.emplace(args...)</code>. Forwards the arguments <code>args...</code> to the constructor of the element type, and constructs the element in-place.</p> <pre><code>std::set&lt;std::string&gt; s;\ns.emplace(10, 'c'); // inserts a string \"cccccccccc\"\n</code></pre> <p><code>s.insert(x)</code> and <code>s.emplace(args...)</code> returns <code>std::pair&lt;iterator, bool&gt;</code>: - On success, <code>.first</code> is an <code>iterator</code> pointing to the inserted element, and <code>.second</code> is <code>true</code>. - On failure, <code>.first</code> is an <code>iterator</code> pointing to the element that prevented the insertion, and <code>.second</code> is <code>false</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-iterators","title":"<code>std::set</code>: iterators","text":"<p><code>s.begin()</code>, <code>s.end()</code>: Begin and off-the-end iterators.</p> <p>The iterator of <code>std::set</code> is BidirectionalIterator: - Supports <code>*it</code>, <code>it-&gt;mem</code>, <code>++it</code>, <code>it++</code>, <code>--it</code>, <code>it--</code>, <code>it1 == it2</code>, <code>it1 != it2</code>.</p> <p>The elements are in ascending order: The following assertion always succeeds (if both <code>tmp</code> and <code>iter</code> are dereferenceable).</p> <pre><code>auto tmp = iter;\n++iter;\nassert(*tmp &lt; *iter);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-iterators_1","title":"<code>std::set</code>: iterators","text":"<p>Elements in a <code>set</code> cannot be modified directly: <code>*iter</code> returns a reference-to-<code>const</code>. - The elements are stored in specific positions in the red-black tree, according to their values. - You cannot change their values arbitrarily.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-traversal","title":"<code>std::set</code>: traversal","text":"<p>Range-for still works!</p> <pre><code>std::set&lt;int&gt; s{5, 5, 7, 3, 20, 12, 42};\nfor (auto x : s)\n  std::cout &lt;&lt; x &lt;&lt; ' ';\nstd::cout &lt;&lt; std::endl;\n</code></pre> <p>Output: <code>3, 5, 7, 12, 20, 42</code>. The elements are in ascending order.</p> <p>Equivalent way: Use iterators</p> <pre><code>for (auto it = s.begin(); it != s.end(); ++it)\n  std::cout &lt;&lt; *it &lt;&lt; ' ';\nstd::cout &lt;&lt; std::endl;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-deletion","title":"<code>std::set</code>: deletion","text":"<p>Delete elements: <code>erase</code> - <code>s.erase(x)</code>, <code>s.erase(pos)</code>, <code>s.erase(begin, end)</code>, where <code>pos</code> is an iterator pointing to some element in <code>s</code>, and <code>[begin, end)</code> is an iterator range in <code>s</code>. - <code>s.erase(x)</code> removes the element that is equivalent to <code>x</code>, if any.   - returns <code>0</code> or <code>1</code>, indicating the number of elements removed.</p> <pre><code>std::set&lt;int&gt; s{5, 5, 7, 3, 20, 12, 42};\nstd::cout &lt;&lt; s.erase(42) &lt;&lt; std::endl; // 42 is removed. output: 1\n// s is now {3, 5, 7, 12, 20}.\ns.erase(++++s.begin()); // 7 is removed.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-element-lookup","title":"<code>std::set</code>: element lookup","text":"<p><code>s.find(x)</code>, <code>s.count(x)</code>, and some other functions.</p> <p><code>s.find(x)</code> returns an iterator pointing to the element equivalent to <code>x</code> (if found), or <code>s.end()</code> (if not found).</p> <pre><code>std::set&lt;int&gt; s = someValues();\nif (s.find(x) != s.end()) // x is found\n  // ...\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdset-pros-and-cons","title":"<code>std::set</code>: pros and cons","text":"<p>The time complexity of insertion, deletion, and lookup of elements in a <code>std::set</code>: logarithmic in the size of the container. (\\(O(\\log n)\\)) - Compared to sequence containers, this is (almost) a huge improvement.</p> <p>Elements are sorted automatically.</p> <p>Fast random access like <code>v[i]</code> is not supported.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#other-kinds-of-sets","title":"Other kinds of sets:","text":"<p>Sets based on red-black trees: - <code>std::set</code> - <code>std::multiset</code>: allows duplicate elements</p> <p>Sets based on hash-tables: (since C++11) - <code>std::unordered_set</code>: hash-table version of <code>std::set</code> - <code>std::unordered_multiset</code>: allows duplicate elements</p> <p>Sets based on hash-tables provides (average-case) \\(O(1)\\) time operations, but requires the data to be hashable.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#motivation-map","title":"Motivation: map","text":"<p>Represent a map: \\(f:S\\to T\\).</p> <ul> <li>For sequence containers <code>Container&lt;Type&gt;</code>: \\(S=\\{0,1,2,\\cdots,N-1\\}\\) (index), \\(T\\) is the set of values of type <code>Type</code>.</li> <li>For <code>std::set&lt;Type&gt;</code>: \\(T=\\{\\text{exist}, \\text{not-exist}\\}\\), \\(S\\) is the set of values of type <code>Type</code>.</li> </ul> <p><code>std::map&lt;Key, Value&gt;</code>: defined in <code>&lt;map&gt;</code> - <code>Key</code> is the type of elements in \\(S\\), and <code>Value</code> is the type of elements in \\(T\\). - Stores \"key-value\" pairs.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#motivation-map_1","title":"Motivation: map","text":"<p>Example: Count the occurrences of strings.</p> <pre><code>std::map&lt;std::string, int&gt; counter; // maps every string to an integer\nstd::string word;\nwhile (std::cin &gt;&gt; word)\n  ++counter[word]; // !!\n</code></pre> <p>Now for any string <code>str</code>, <code>counter[str]</code> is an integer indicating how many times <code>str</code> has occurred.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdmap-comparison-with-stdset","title":"<code>std::map</code>: comparison with <code>std::set</code>","text":"<p><code>std::map&lt;Key, Value&gt;</code> has two template parameters: <code>Key</code> and <code>Value</code>. - If we ignore <code>Value</code>, it is a <code>std::set&lt;Key&gt;</code>.   - Duplicate keys are not allowed.   - <code>operator&lt;(const Key, const Key)</code> is required.   - Elements are stored in ascending order of keys.   - Keys cannot be modified directly. - The element type of <code>std::map&lt;Key, Value&gt;</code> is <code>std::pair&lt;const Key, Value&gt;</code>.   - <code>*iter</code> returns <code>std::pair&lt;const Key, Value&gt; &amp;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdmap-comparison-with-stdset_1","title":"<code>std::map</code>: comparison with <code>std::set</code>","text":"<p>Constructors: - <code>std::map&lt;Key, Value&gt; m{{key1, value1}, {key2, value2}, ...};</code> - <code>std::map&lt;Key, Value&gt; m(begin, end)</code>, but the elements should be pairs:</p> <p><code>cpp   std::vector&lt;std::pair&lt;int, int&gt;&gt; v{{1, 2}, {3, 4}};   std::map&lt;int, int&gt; m(v.begin(), v.end());</code></p> <p>Insertion: - <code>m.insert({key, value})</code> - <code>m.insert({{key1, value1}, {key2, value2}, ...})</code> - <code>m.insert(begin, end)</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdmap-comparison-with-stdset_2","title":"<code>std::map</code>: comparison with <code>std::set</code>","text":"<p>Deletion: - <code>m.erase(pos)</code>, <code>m.erase(begin, end)</code>: same as <code>std::set&lt;T&gt;::erase</code>. - <code>m.erase(key)</code>: Removes the element whose key is <code>key</code>.</p> <p>Iterators: BidirectionalIterator, pointing to <code>std::pair&lt;const Key, Value&gt;</code>.</p> <pre><code>std::map&lt;std::string, int&gt; counter = someValues();\nfor (auto it = counter.begin(); it != counter.end(); ++it)\n  std::cout &lt;&lt; it-&gt;first &lt;&lt; \" occurred \" &lt;&lt; it-&gt;second &lt;&lt; \" times.\\n\";\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdmap-traversal","title":"<code>std::map</code>: traversal","text":"<p>Use range-for:</p> <pre><code>for (const auto &amp;kvpair : counter)\n  std::cout &lt;&lt; kvpair.first &lt;&lt; \" occurred \" &lt;&lt; kvpair.second &lt;&lt; \" times.\\n\";\n</code></pre> <p>It's so annoying to deal with the <code>pair</code> stuff...</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdmap-traversal_1","title":"<code>std::map</code>: traversal","text":"<p>Use range-for:</p> <pre><code>for (const auto &amp;kvpair : counter)\n  std::cout &lt;&lt; kvpair.first &lt;&lt; \" occurred \" &lt;&lt; kvpair.second &lt;&lt; \" times.\\n\";\n</code></pre> <p>It's so annoying to deal with the <code>pair</code> stuff...</p> <p>C++17 structured binding kills the game!</p> <pre><code>for (const auto &amp;[word, occ] : counter)\n  std::cout &lt;&lt; word &lt;&lt; \" occurred \" &lt;&lt; occ &lt;&lt; \" times.\\n\";\n</code></pre> <p>(Looks very much like Python unpacking.)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdmap-specific-operator","title":"<code>std::map</code>-specific: <code>operator[]</code>","text":"<p><code>m[key]</code> finds the key-value pair whose key is equivalent to <code>key</code>. - If such key does not exist, inserts <code>{key, Value{}}</code> - the value is value-initialized. - Then, returns reference to the value.</p> <pre><code>std::map&lt;std::string, int&gt; counter;\nstd::string word;\nwhile (std::cin &gt;&gt; word)\n  ++counter[word]; // If `word` does not exist in `counter`,\n                   // a pair {word, 0} is inserted first.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#stdmap-element-lookup","title":"<code>std::map</code>: element lookup","text":"<p><code>m.find(key)</code>, <code>m.count(key)</code>, and some other member functions.</p> <p>Note: <code>m.find(key)</code> does not insert elements. <code>m[key]</code> will insert an element if that key does not exist.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#other-kinds-of-maps","title":"Other kinds of maps:","text":"<p>Maps based on red-black trees: - <code>std::map</code> - <code>std::multimap</code>: allows duplicate keys</p> <p>Maps based on hash-tables: (since C++11) - <code>std::unordered_map</code>: hash-table version of <code>std::map</code> - <code>std::unordered_multimap</code>: allows duplicate keys</p> <p>Maps based on hash-tables provides (average-case) \\(O(1)\\) time operations, but requires the key to be hashable.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#summary","title":"Summary","text":"<p>Sequence containers</p> <ul> <li><code>std::vector&lt;T&gt;</code>: dynamic contiguous array (we are quite familiar with)</li> </ul> <p> </p> <ul> <li><code>std::deque&lt;T&gt;</code>: double-ended queue (often pronounced as \"deck\")</li> </ul> <p> </p> <ul> <li><code>std::array&lt;T, N&gt;</code>: same as <code>T[N]</code>, but it is a container</li> <li><code>std::list&lt;T&gt;</code>: doubly-linked list</li> </ul> <p> </p> <ul> <li><code>std::forward_list&lt;T&gt;</code>: singly-linked list</li> </ul> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l23/l23.html#summary_1","title":"Summary","text":"<p>Associative containers</p> <ul> <li><code>std::set&lt;T&gt;</code>: A finite set \\(\\{e_1,e_2,\\cdots,e_n\\}\\) where elements are of type <code>T</code>.</li> <li><code>std::map&lt;Key, Value&gt;</code>: A map \\(f:S\\mapsto T\\), where \\(S\\) and \\(T\\) are the sets of values of type <code>Key</code> and <code>Value</code> respectively.</li> <li><code>std::set</code> and <code>std::map</code> are ordered: <code>T</code> and <code>Key</code> need to have an ordering, either in the form of <code>operator&lt;</code> or some user-supplied comparator.</li> <li><code>std::unordered_set</code> and <code>std::unordered_map</code> are unordered and hash-based.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html","title":"CS100 Lecture 25","text":"<p>Templates I</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#contents","title":"Contents","text":"<ul> <li>Function templates</li> <li>Class templates</li> <li>Alias templates, variable templates and non-type template parameters</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#function-templates","title":"Function templates","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#motivation-function-template","title":"Motivation: function template","text":"<pre><code>int compare(int a, int b) {\n  if (a &lt; b) return -1;\n  if (b &lt; a) return 1;\n  return 0;\n}\nint compare(double a, double b) {\n  if (a &lt; b) return -1;\n  if (b &lt; a) return 1;\n  return 0;\n}\nint compare(const std::string &amp;a, const std::string &amp;b) {\n  if (a &lt; b) return -1;\n  if (b &lt; a) return 1;\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#motivation-function-template_1","title":"Motivation: function template","text":"<pre><code>template &lt;typename T&gt;\nint compare(const T &amp;a, const T &amp;b) {\n  if (a &lt; b) return -1;\n  if (b &lt; a) return 1;\n  return 0;\n}\n</code></pre> <ul> <li>Type parameter: <code>T</code></li> <li>A template is a guideline for the compiler:</li> <li>When <code>compare(42, 40)</code> is called, <code>T</code> is deduced to be <code>int</code>, and the compiler generates a version of the function for <code>int</code>.</li> <li>When <code>compare(s1, s2)</code> is called, <code>T</code> is deduced to be <code>std::string</code>, ....</li> <li>The generation of a function based on a function template is called the instantiation (\u5b9e\u4f8b\u5316) of that function template.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#type-parameter","title":"Type parameter","text":"<pre><code>template &lt;typename T&gt;\nint compare(const T &amp;a, const T &amp;b) {\n  if (a &lt; b) return -1;\n  if (b &lt; a) return 1;\n  return 0;\n}\n</code></pre> <ul> <li>The keyword <code>typename</code> indicates that <code>T</code> is a type.</li> <li>Here <code>typename</code> can be replaced with <code>class</code>. They are totally equivalent here. Using <code>class</code> doesn't mean that <code>T</code> should be a class type.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#type-parameter_1","title":"Type parameter","text":"<pre><code>template &lt;typename T&gt;\nint compare(const T &amp;a, const T &amp;b) {\n  if (a &lt; b) return -1;\n  if (b &lt; a) return 1;\n  return 0;\n}\n</code></pre> <ul> <li>Why do we use <code>const T &amp;</code>? Why do we use <code>b &lt; a</code> instead of <code>a &gt; b</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#type-parameter_2","title":"Type parameter","text":"<pre><code>template &lt;typename T&gt;\nint compare(const T &amp;a, const T &amp;b) {\n  if (a &lt; b) return -1;\n  if (b &lt; a) return 1;\n  return 0;\n}\n</code></pre> <ul> <li>Why do we use <code>const T &amp;</code>? Why do we use <code>b &lt; a</code> instead of <code>a &gt; b</code>?</li> <li>Because we are dealing with an unknown type!</li> <li><code>T</code> may not be copyable, or copying <code>T</code> may be costly.</li> <li><code>T</code> may only support <code>operator&lt;</code> but does not support <code>operator&gt;</code>.</li> </ul> <p>* Template programs should try to minimize the number of requirements placed on the argument types.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction","title":"Template argument deduction","text":"<p>To instantiate a function template, every template argument must be known, but not every template argument has to be specified.</p> <p>When possible, the compiler will deduce the missing template arguments from the function arguments.</p> <pre><code>template &lt;typename To, typename From&gt;\nTo my_special_cast(From f);\n\ndouble d = 3.14;\nint i = my_special_cast&lt;int&gt;(d);   // calls my_special_cast&lt;int, double&gt;(double)\nchar c = my_special_cast&lt;char&gt;(d); // calls my_special_cast&lt;char, double&gt;(double)\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction_1","title":"Template argument deduction","text":"<p>Suppose we have the following function</p> <pre><code>template &lt;typename P&gt;\nvoid fun(P p);\n</code></pre> <p>and a call <code>fun(a)</code>, where the type of <code>a</code> (ignoring references) is <code>A</code>.</p> <ul> <li><code>A</code> is never considered to be a reference. For example,</li> </ul> <p><code>cpp   const int &amp;cr = 42;   fun(cr); // A is considered to be const int, not const int &amp;</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction_2","title":"Template argument deduction","text":"<p>Suppose we have the following function</p> <pre><code>template &lt;typename P&gt;\nvoid fun(P p);\n</code></pre> <p>and a call <code>fun(a)</code>, where the type of <code>a</code> (ignoring references) is <code>A</code>.</p> <ul> <li>Passing-by-value ignores references and top-level <code>const</code> qualifications. For example,</li> </ul> <p><code>cpp   const int ci = 42; const int &amp;cr = ci;   fun(ci); // A = const int, P = int   fun(cr); // A = const int, P = int</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction_3","title":"Template argument deduction","text":"<p>Suppose we have the following function</p> <pre><code>template &lt;typename P&gt;\nvoid fun(P p);\n</code></pre> <p>and a call <code>fun(a)</code>, where the type of <code>a</code> (ignoring references) is <code>A</code>.</p> <ul> <li>If <code>A</code> is an array or a function type, the decay to the corresponding pointer types takes place:</li> </ul> <p><code>cpp   int a[10]; int foo(double, double);   fun(a); // A = int[10], P = int *   fun(foo); // A = int(double, double), P = int(*)(double, double)</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction_4","title":"Template argument deduction","text":"<p>Suppose we have the following function</p> <pre><code>template &lt;typename P&gt;\nvoid fun(P p);\n</code></pre> <p>and a call <code>fun(a)</code>, where the type of <code>a</code> (ignoring references) is <code>A</code>.</p> <ul> <li>If <code>A</code> is <code>const</code>-qualified, the top-level <code>const</code> is ignored;</li> <li>otherwise <code>A</code> is an array or a function type, the decay to the corresponding pointer types takes place.</li> </ul> <p>This is exactly the same thing as in <code>auto p = a;</code>!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction_5","title":"Template argument deduction","text":"<p>Let <code>T</code> be the type parameter of the template.</p> <ul> <li>The deduction for the parameter <code>T x</code> with argument <code>a</code> is the same as that in <code>auto x = a;</code>.</li> <li>The deduction for the parameter <code>T &amp;x</code> with argument <code>a</code> is the same as that in <code>auto &amp;x = a;</code>. <code>a</code> must be an lvalue expression.</li> <li>The deduction for the parameter <code>const T x</code> with the argument <code>a</code> is the same as that in <code>const auto x = a;</code>.</li> </ul> <p>The deduction rule that <code>auto</code> uses is totally the same as the rule used here!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction_6","title":"Template argument deduction","text":"<p>Deduction forms can be nested:</p> <pre><code>template &lt;typename T&gt;\nvoid fun(const std::vector&lt;T&gt; &amp;vec);\n\nstd::vector&lt;int&gt; vi;\nstd::vector&lt;std::string&gt; vs;\nstd::vector&lt;std::vector&lt;int&gt;&gt; vvi;\n\nfun(vi); // T = int\nfun(vs); // T = std::string\nfun(vvi); // T = std::vector&lt;int&gt;\n</code></pre> <p>Exercise: Write a function <code>map(func, vec)</code>, where <code>func</code> is any unary function and <code>vec</code> is any vector. Returns a vector obtained from <code>vec</code> by replacing every element <code>x</code> with <code>func(x)</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#template-argument-deduction_7","title":"Template argument deduction","text":"<p>Exercise: Write a function <code>map(func, vec)</code>, where <code>func</code> is any unary function and <code>vec</code> is any vector. Returns a vector obtained from <code>vec</code> by replacing every element <code>x</code> with <code>func(x)</code>.</p> <pre><code>template &lt;typename Func, typename T&gt;\nauto map(Func func, const std::vector&lt;T&gt; &amp;vec) {\n  std::vector&lt;T&gt; result;\n  for (const auto &amp;x : vec)\n    result.push_back(func(x));\n  return result;\n}\n</code></pre> <p>Usage:</p> <pre><code>std::vector v{1, 2, 3, 4};\nauto v2 = map([](int x) { return x * 2; }, v); // v2 == {2, 4, 6, 8}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#forwarding-reference","title":"Forwarding reference","text":"<p>Also known as \"universal reference\" (\u4e07\u80fd\u5f15\u7528).</p> <p>Suppose we have the following function</p> <pre><code>template &lt;typename T&gt;\nvoid fun(T &amp;&amp;x);\n</code></pre> <p>A call <code>fun(a)</code> happens for an expression <code>a</code>.</p> <ul> <li>If <code>a</code> is an rvalue expression of type <code>E</code>, <code>T</code> is deduced to be <code>E</code> so that the type of <code>x</code> is <code>E &amp;&amp;</code>, an rvalue reference.</li> <li>If <code>a</code> is an lvalue expression of type <code>E</code>, <code>T</code> will be deduced to <code>E &amp;</code>.</li> <li>The type of <code>x</code> is <code>T &amp; &amp;&amp;</code>??? (We know that there are no \"references to references\" in C++.)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#reference-collapsing","title":"Reference collapsing","text":"<p>If a \"reference to reference\" is formed through type aliases or templates, the reference collapsing (\u5f15\u7528\u6298\u53e0) rule applies:</p> <ul> <li><code>&amp; &amp;</code>, <code>&amp; &amp;&amp;</code> and <code>&amp;&amp; &amp;</code> collapse to <code>&amp;</code>;</li> <li><code>&amp;&amp; &amp;&amp;</code> collapses to <code>&amp;&amp;</code>.</li> </ul> <pre><code>using lref = int &amp;;\nusing rref = int &amp;&amp;;\nint n;\n\nlref&amp;  r1 = n; // type of r1 is int&amp;\nlref&amp;&amp; r2 = n; // type of r2 is int&amp;\nrref&amp;  r3 = n; // type of r3 is int&amp;\nrref&amp;&amp; r4 = 1; // type of r4 is int&amp;&amp;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#forwarding-reference_1","title":"Forwarding reference","text":"<p>Suppose we have the following function</p> <pre><code>template &lt;typename T&gt;\nvoid fun(T &amp;&amp;x);\n</code></pre> <p>A call <code>fun(a)</code> happens for an expression <code>a</code>.</p> <ul> <li>If <code>a</code> is an rvalue expression of type <code>E</code>, <code>T</code> is deduced to be <code>E</code> so that the type of <code>x</code> is <code>E &amp;&amp;</code>, an rvalue reference.</li> <li>If <code>a</code> is an lvalue expression of type <code>E</code>, <code>T</code> will be deduced to <code>E &amp;</code> and the reference collapsing rule applies, so that the type of <code>x</code> is <code>E &amp;</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#forwarding-reference_2","title":"Forwarding reference","text":"<p>Suppose we have the following function</p> <pre><code>template &lt;typename T&gt;\nvoid fun(T &amp;&amp;x);\n</code></pre> <p>A call <code>fun(a)</code> happens for an expression <code>a</code>.</p> <ul> <li>If <code>a</code> is an rvalue expression of type <code>E</code>, <code>T</code> is <code>E</code> and <code>x</code> is of type <code>E &amp;&amp;</code>.</li> <li>If <code>a</code> is an lvalue expression of type <code>E</code>, <code>T</code> is <code>E &amp;</code> and <code>x</code> is of type <code>E &amp;</code>.</li> </ul> <p>As a result, <code>x</code> is always a reference depending on the value category of <code>a</code>! Such reference is called a universal reference or forwarding reference.</p> <p>The same thing happens for <code>auto &amp;&amp;x = a;</code>!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#perfect-forwarding","title":"Perfect forwarding","text":"<p>A forwarding reference can be used for perfect forwarding:</p> <ul> <li>The value category is not changed.</li> <li>If there is a <code>const</code> qualification, it is not lost.</li> </ul> <p>Example: Suppose we design a <code>std::make_unique</code> for one argument:</p> <ul> <li><code>make_unique&lt;Type&gt;(arg)</code> forwards the argument <code>arg</code> to the constructor of <code>Type</code>.</li> <li>The value category must not be changed: <code>make_unique&lt;std::string&gt;(s1 + s2)</code> must move <code>s1 + s2</code> instead of copying it.</li> <li>The <code>const</code>-qualification must not be changed: No <code>const</code> is added if <code>arg</code> is non-<code>const</code>, and <code>const</code> should be preserved if <code>arg</code> is <code>const</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#perfect-forwarding_1","title":"Perfect forwarding","text":"<ul> <li>The value category must not be changed: <code>make_unique&lt;std::string&gt;(s1 + s2)</code> must move <code>s1 + s2</code> instead of copying it.</li> <li>The <code>const</code>-qualification must not be changed: No <code>const</code> is added if <code>arg</code> is non-<code>const</code>, and <code>const</code> should be preserved if <code>arg</code> is <code>const</code>.</li> </ul> <p>The following does not meet our requirements: An rvalue will become an lvalue, and <code>const</code> is added.</p> <pre><code>template &lt;typename T, typename U&gt;\nauto make_unique(const U &amp;arg) {\n  return std::unique_ptr&lt;T&gt;(new T(arg));\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#perfect-forwarding_2","title":"Perfect forwarding","text":"<ul> <li>The value category must not be changed: <code>make_unique&lt;std::string&gt;(s1 + s2)</code> must move <code>s1 + s2</code> instead of copying it.</li> <li>The <code>const</code>-qualification must not be changed: No <code>const</code> is added if <code>arg</code> is non-<code>const</code>, and <code>const</code> should be preserved if <code>arg</code> is <code>const</code>.</li> </ul> <p>We need to do this:</p> <pre><code>template &lt;typename T, typename U&gt;\nauto make_unique(U &amp;&amp;arg) {\n  // For an lvalue argument, U=E&amp; and arg is E&amp;.\n  // For an rvalue argument, U=E  and arg is E&amp;&amp;.\n  if (/* U is an lvalue reference type */)\n    return std::unique_ptr&lt;T&gt;(new T(arg));\n  else\n    return std::unique_ptr&lt;T&gt;(new T(std::move(arg)));\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#perfect-forwarding_3","title":"Perfect forwarding","text":"<p><code>std::forward&lt;T&gt;(arg)</code>: defined in <code>&lt;utility&gt;</code>.</p> <ul> <li>If <code>T</code> is an lvalue reference type, returns an lvalue reference to <code>arg</code>.</li> <li>Otherwise, returns an rvalue reference to <code>std::move(arg)</code>.</li> </ul> <pre><code>template &lt;typename T, typename U&gt;\nauto make_unique(U &amp;&amp;arg) {\n  return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;U&gt;(arg))).\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#variadic-templates","title":"Variadic templates","text":"<p>To support an unknown number of arguments of unknown types:</p> <pre><code>template &lt;typename... Types&gt;\nvoid foo(Types... params);\n</code></pre> <p>It can be called with any number of arguments, of any types:</p> <pre><code>foo();         // OK: `params` contains no arguments\nfoo(42);       // OK: `params` contains one argument: int\nfoo(42, 3.14); // OK: `params` contains two arguments: int and double\n</code></pre> <p><code>Types</code> is a template parameter pack, and <code>params</code> is a function parameter pack.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#parameter-pack","title":"Parameter pack","text":"<p>The types of the function parameters can also contain <code>const</code> or references:</p> <pre><code>// All arguments are passed by reference-to-const\ntemplate &lt;typename... Types&gt;\nvoid foo(const Types &amp;...params);\n// All arguments are passed by forwarding reference\ntemplate &lt;typename... Types&gt;\nvoid foo(Types &amp;&amp;...params);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#pack-expansion","title":"Pack expansion","text":"<p>A pattern followed by <code>...</code>, in which the name of at least one parameter pack appears at least once, is expanded into zero or more comma-separated instantiations of the pattern. - The name of the parameter pack is replaced by each of the elements from the pack, in order.</p> <pre><code>template &lt;typename... Types&gt;\nvoid foo(Types &amp;&amp;...params) {\n  // Suppose Types is T1, T2, T3 and params is p1, p2, p3.\n  // &amp;params... is expanded to &amp;p1, &amp;p2, &amp;p3.\n  // func(params)... is expanded to func(p1), func(p2), func(p3).\n  // func(params...) is expanded to func(p1, p2, p3)\n  // std::forward&lt;Types&gt;(params)... is expanded to\n  //   std::forward&lt;T1&gt;(p1), std::forward&lt;T2&gt;(p2), std::forward&lt;T3&gt;(p3)\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#perfect-forwarding-final-version","title":"Perfect forwarding: final version","text":"<p>Perfect forwarding for any number of arguments of any types:</p> <pre><code>template &lt;typename T, typename... Ts&gt; auto make_unique(Ts &amp;&amp;...params) {\n  return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Ts&gt;(params)...));\n}\n</code></pre> <p>This is also how <code>std::vector&lt;T&gt;::emplace_back</code> forward arguments.</p> <pre><code>template &lt;typename T&gt; class vector {\npublic:\n  template &lt;typename... Types&gt; reference emplace_back(Types &amp;&amp;...args) {\n    if (size() == capacity())\n      reallocate(capacity() == 0 ? 1 : capacity() * 2);\n    construct_at(m_end_of_elems, std::forward&lt;Types&gt;(args)...);\n    ++m_end_of_elems;\n    return *(m_end_of_elems - 1);\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#auto-and-template-argument-deduction","title":"<code>auto</code> and template argument deduction","text":"<p>We have seen that the deduction rule that <code>auto</code> uses is exactly the template argument deduction rule.</p> <p>If we declare the parameter types in an lambda expression with <code>auto</code>, it becomes a generic lambda:</p> <pre><code>auto less = [](const auto &amp;lhs, const auto &amp;rhs) { return lhs &lt; rhs; };\nstd::string s1, s2;\nbool b1 = less(10, 15); // 10 &lt; 15\nbool b2 = less(s1, s2); // s1 &lt; s2\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#auto-and-template-argument-deduction_1","title":"<code>auto</code> and template argument deduction","text":"<p>We have seen that the deduction rule that <code>auto</code> uses is exactly the template argument deduction rule.</p> <p>Since C++20: Function parameter types can be declared with <code>auto</code>.</p> <pre><code>auto add(const auto &amp;a, const auto &amp;b) {\n  return a + b;\n}\n// Equialent way: template\ntemplate &lt;typename T, typename U&gt;\nauto add(const T &amp;a, const U &amp;b) {\n  return a + b;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#class-templates","title":"Class templates","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#define-a-class-template","title":"Define a class template","text":"<p>Let's make our <code>Dynarray</code> a template <code>Dynarray&lt;T&gt;</code> to support any element type <code>T</code>.</p> <pre><code>template &lt;typename T&gt;\nclass Dynarray {\n  std::size_t m_length;\n  T *m_storage;\n\npublic:\n  Dynarray();\n  Dynarray(const Dynarray&lt;T&gt; &amp;);\n  Dynarray(Dynarray&lt;T&gt; &amp;&amp;) noexcept;\n  // other members ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#define-a-class-template_1","title":"Define a class template","text":"<p>A class template is a guideline for the compiler: When a type <code>Dynarray&lt;T&gt;</code> is used for a certain type <code>T</code>, the compiler will instantiate that class type according to the class template.</p> <p>For different types <code>T</code> and <code>U</code>, <code>Dynarray&lt;T&gt;</code> and <code>Dynarray&lt;U&gt;</code> are different types.</p> <pre><code>template &lt;typename T&gt;\nclass X {\n  int x = 42; // private\n\npublic:\n  void foo(X&lt;double&gt; xd) {\n    x = xd.x; // access a private member of X&lt;double&gt;\n    // This is valid only when T is double.\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#define-a-class-template_2","title":"Define a class template","text":"<p>Inside the class template, the template parameters can be omitted when we are referring to the self type:</p> <pre><code>template &lt;typename T&gt;\nclass Dynarray {\n  std::size_t m_length;\n  T *m_storage;\n\npublic:\n  Dynarray();\n  Dynarray(const Dynarray &amp;); // Parameter type is const Dynarray&lt;T&gt; &amp;\n  Dynarray(Dynarray &amp;&amp;) noexcept; // Parameter type is Dynarray&lt;T&gt; &amp;&amp;\n  // other members ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#member-functions-of-a-class-template","title":"Member functions of a class template","text":"<p>If we want to define a member function outside the template class, a template declaration is also needed.</p> <pre><code>class Dynarray {\npublic:\n  int &amp;at(std::size_t n);\n};\n\nint &amp;Dynarray::at(std::size_t n) {\n  return m_storage[n];\n}\n</code></pre> <pre><code>template &lt;typename T&gt;\nclass Dynarray {\npublic:\n  int &amp;at(std::size_t n);\n};\ntemplate &lt;typename T&gt;\nint &amp;Dynarray&lt;T&gt;::at(std::size_t n) {\n  return m_storage[n];\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#member-functions-of-a-class-template_1","title":"Member functions of a class template","text":"<p>A member function will not be instantiated if it is not used!</p> <pre><code>template &lt;typename T&gt;\nstruct X {\n  T x;\n  void foo() { x = 42; }\n  void bar() { x = \"hello\"; }\n};\n</code></pre> <pre><code>X&lt;int&gt; xi; // OK\nxi.foo();  // OK\nX&lt;std::string&gt; xs; // OK\nxs.bar();          // OK\n</code></pre> <p>No compile-error occurs: <code>X&lt;int&gt;::bar()</code> and <code>X&lt;std::string&gt;::foo()</code> are not instantiated because they are not called.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#member-functions-of-a-class-template_2","title":"Member functions of a class template","text":"<p>A member function itself can also be a template:</p> <pre><code>template &lt;typename T&gt;\nclass Dynarray {\npublic:\n  template &lt;typename Iterator&gt;\n  Dynarray(Iterator begin, Iterator end)\n      : m_length(std::distance(begin, end)), m_storage(new T[m_length]) {\n    std::copy(begin, end, m_storage);\n  }\n};\nstd::vector&lt;std::string&gt; vs = someValues();\nDynarray&lt;std::string&gt; ds(vs.begin(), vs.end()); // Values are copied from vs.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#member-functions-of-a-class-template_3","title":"Member functions of a class template","text":"<p>A member function itself can also be a template. To define it outside the class, two template declarations are needed:</p> <pre><code>// This cannot be written as `template &lt;typename T, typename Iterator&gt;`\ntemplate &lt;typename T&gt;\ntemplate &lt;typename Iterator&gt;\nDynarray&lt;T&gt;::Dynarray(Iterator begin, Iterator end)\n    : m_length(std::distance(begin, end)), m_storage(new T[m_length]) {\n  std::copy(begin, end, m_storage);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#alias-templates-variable-templates-and-non-type-template-parameters","title":"Alias templates, variable templates and non-type template parameters","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#alias-templates","title":"Alias templates","text":"<p>The <code>using</code> declaration can also declare alias templates:</p> <pre><code>template &lt;typename T&gt;\nusing pii = std::pair&lt;T, T&gt;;\npii&lt;int&gt; p1(2, 3); // std::pair&lt;int, int&gt;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#variable-templates-since-c14","title":"Variable templates (since C++14)","text":"<p>Variables can also be templates. Typical example: the C++20 <code>&lt;numbers&gt;</code> library:</p> <pre><code>namespace std::numbers {\n  template &lt;typename T&gt;\n  inline constexpr T pi_v = /* unspecified */;\n}\nauto pi_d = std::numbers::pi_v&lt;double&gt;; // The `double` version of \u03c0\nauto pi_f = std::numbers::pi_v&lt;float&gt;;  // The `float` version of \u03c0\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#non-type-template-parameters","title":"Non-type template parameters","text":"<p>Apart from types, a template parameter can also be an integer, an lvalue reference, a pointer, ...</p> <p>Since C++20, floating-point types and literal class types with certain properties are also allowed.</p> <pre><code>template &lt;typename T, std::size_t N&gt;\nclass array {\n  T data[N];\n  // ...\n};\narray&lt;int, 10&gt; a;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#non-type-template-parameters_1","title":"Non-type template parameters","text":"<p>Define a function that accepts an array of any length, any type:</p> <pre><code>template &lt;typename T, std::size_t N&gt;\nvoid print_array(T (&amp;a)[N]) {\n  for (const auto &amp;x : a)\n    std::cout &lt;&lt; x &lt;&lt; ' ';\n  std::cout &lt;&lt; std::endl;\n}\nint a[10]; double b[20];\nprint_array(a); // T=int, N=10\nprint_array(b); // T=double, N=20\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#summary","title":"Summary","text":"<p>Idea of templates: Generic programming.</p> <ul> <li>Write code that can deal with different types. e.g. Containers parameterized on element types.</li> <li>The compiler generates (instantiates) the actual code in terms of the template code.</li> </ul> <p>Function template:</p> <ul> <li>Template argument deduction:</li> <li>Pass-by-value: Reference and top-level <code>const</code>-qualification are ignored. Decay happens.</li> <li>Pass-by-reference: Reference collapsing happens.</li> <li>Same as the deduction rule of <code>auto</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#summary_1","title":"Summary","text":"<p>Perfect forwarding:</p> <ul> <li>Forwarding reference: <code>auto &amp;&amp;</code>, or <code>T &amp;&amp;</code> where <code>T</code> is a template type parameter.</li> <li>Deduced to lvalue-reference if the argument is an lvalue, and rvalue-reference if the argument is an rvalue.</li> <li><code>const</code> qualifications are preserved.</li> <li><code>std::forward&lt;T&gt;(x)</code>: Casts <code>x</code> to <code>T &amp;&amp;</code>.</li> </ul> <p>Variadic template and pack expansion: Used to accept an unknown number of arguments of unknown types, and perform some operations on them. - \"unknown\" is for the author of the templates. The compiler generates the required versions of them.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l25/l25.html#summary_2","title":"Summary","text":"<p>Class templates:</p> <ul> <li>The class is parameterized on some template parameter. Different template arguments yield different classes.</li> <li>The member functions are instantiated only when they are called.</li> </ul> <p>Other things:</p> <ul> <li>Alias templates</li> <li>Variable templates</li> <li>Non-type template parameters</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html","title":"CS100 Lecture 26","text":"<p>Templates II</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#contents","title":"Contents","text":"<ul> <li>Template specialization</li> <li>Variadic templates: an example</li> <li>Curiously Recurring Template Pattern (CRTP)</li> <li>Introduction to template metaprogramming</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#template-specialization","title":"Template specialization","text":"<p>Templates are for generic programming, but some things need special treatments.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#specialization-for-a-function-template","title":"Specialization for a function template","text":"<pre><code>template &lt;typename T&gt;\nint compare(T const &amp;lhs, T const &amp;rhs) {\n  if (lhs &lt; rhs) return -1;\n  else if (rhs &lt; lhs) return 1;\n  else return 0;\n}\n</code></pre> <p>What happens for C-style strings?</p> <pre><code>const char *a = \"hello\", *b = \"world\";\nauto x = compare(a, b);\n</code></pre> <p>This is comparing two pointers, instead of comparing the strings!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#specialization-for-a-function-template_1","title":"Specialization for a function template","text":"<pre><code>template &lt;typename T&gt;\nint compare(T const &amp;lhs, T const &amp;rhs) {\n  if (lhs &lt; rhs) return -1;\n  else if (rhs &lt; lhs) return 1;\n  else return 0;\n}\ntemplate &lt;&gt; // specialized version for T = const char *\nint compare&lt;const char *&gt;(const char *const &amp;lhs, const char *const &amp;rhs) {\n  return std::strcmp(lhs, rhs);\n}\n</code></pre> <p>Write a specialized version of that function with the template parameters taking a certain group of values.</p> <p>The type <code>const T &amp;</code> with <code>T = const char *</code> is <code>const char *const &amp;</code>: A reference bound to a <code>const</code> pointer which points to <code>const char</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#specialization-for-a-function-template_2","title":"Specialization for a function template","text":"<p>It is also allowed to omit <code>&lt;const char *&gt;</code> following the name:</p> <pre><code>template &lt;typename T&gt;\nint compare(T const &amp;lhs, T const &amp;rhs) {\n  if (lhs &lt; rhs) return -1;\n  else if (rhs &lt; lhs) return 1;\n  else return 0;\n}\ntemplate &lt;&gt;\nint compare(const char *const &amp;lhs, const char *const &amp;rhs) {\n  return std::strcmp(lhs, rhs);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#specialization-for-a-function-template_3","title":"Specialization for a function template","text":"<p>Is this a specialization?</p> <pre><code>template &lt;typename T&gt;\nint compare(T const &amp;lhs, T const &amp;rhs);\ntemplate &lt;typename T&gt;\nint compare(const std::vector&lt;T&gt; &amp;lhs, const std::vector&lt;T&gt; &amp;rhs);\n</code></pre> <p>No! These functions constitute overloading (allowed).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#specialization-for-a-function-template_4","title":"Specialization for a function template","text":"<p>Is this a specialization?</p> <pre><code>template &lt;typename T&gt;\nint compare(T const &amp;lhs, T const &amp;rhs);\ntemplate &lt;typename T&gt;\nint compare&lt;std::vector&lt;T&gt;&gt;(const std::vector&lt;T&gt; &amp;lhs,\n                            const std::vector&lt;T&gt; &amp;rhs);\n</code></pre> <ul> <li>Since we write <code>int compare&lt;std::vector&lt;T&gt;&gt;(...)</code>, this is a specialization.</li> <li> <p>However, such specialization is a partial specialization: The specialized function is still a function template.</p> </li> <li> <p>Partial specialization for function templates is not allowed.</p> </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#specialization-for-a-class-template","title":"Specialization for a class template","text":"<p>It is allowed to write a specialization for class templates.</p> <pre><code>template &lt;typename T&gt;\nstruct Dynarray { /* ... */ };\ntemplate &lt;&gt; // specialization for T = bool\nstruct Dynarray&lt;bool&gt; { /* ... */ };\n</code></pre> <p>Partial specialization is also allowed:</p> <pre><code>template &lt;typename T, typename Alloc&gt;\nclass vector { /* ... */ };\n// specialization for T = bool, while Alloc remains a template parameter.\ntemplate &lt;typename Alloc&gt;\nclass vector&lt;bool, Alloc&gt; { /* ... */ };\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#variadic-templates-an-example","title":"Variadic templates: an example","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#a-print-function","title":"A <code>print</code> function","text":"<pre><code>template &lt;typename First, typename... Rest&gt;\nvoid print(std::ostream &amp;os, const First &amp;first, const Rest &amp;...rest) {\n  os &lt;&lt; first;\n  if (/* `rest` is not empty */) // How to test this?\n    print(os, rest...);\n}\nint i = 42; double d = 3.14; std::string s = \"hello\";\nprint(std::cout, s, d, i);\n</code></pre> <p>First, understand the different meanings of <code>...</code>.</p> <ul> <li><code>typename... Rest</code> indicates that <code>Rest</code> is a template parameter pack.</li> <li><code>const Rest &amp;...rest</code> indicates that <code>rest</code> is a function parameter pack.</li> <li><code>rest...</code> in <code>print(os, rest...)</code> is pack expansion.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#compile-time-recurrence","title":"Compile-time recurrence","text":"<pre><code>template &lt;typename First, typename... Rest&gt;\nvoid print(std::ostream &amp;os, const First &amp;first, const Rest &amp;...rest) {\n  os &lt;&lt; first;\n  if (/* `rest` is not empty */) // How to test this?\n    print(os, rest...);\n}\nstd::string s = \"hello\"; double d = 3.14; int i = 42;\nprint(std::cout, s, d, i);\n</code></pre> <p><code>print(std::cout, s, d, i)</code> leads to the instantiation of the following functions:</p> <pre><code>void print(std::ostream &amp;os, const std::string &amp;first, const double &amp;rest0,\n           const int &amp;rest1);\nvoid print(std::ostream &amp;os, const double &amp;first, const int &amp;rest0);\nvoid print(std::ostream &amp;os, const int &amp;first);\n</code></pre> <p>Note: <code>first</code> is not a parameter pack, so <code>print</code> must have at least two arguments.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#sizeofpack","title":"<code>sizeof...(pack)</code>","text":"<p>How many arguments are there in a pack? Use the <code>sizeof...</code> operator, which is evaluated at compile-time.</p> <pre><code>template &lt;typename First, typename... Rest&gt;\nvoid print(std::ostream &amp;os, const First &amp;first, const Rest &amp;...rest) {\n  os &lt;&lt; first;\n  if (sizeof...(Rest) &gt; 0)\n    print(os, rest...);\n}\nstd::string s = \"hello\"; double d = 3.14; int i = 42;\nprint(std::cout, s, d, i);\n</code></pre> <p>Looks good ... But a compile-error?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#sizeofpack_1","title":"<code>sizeof...(pack)</code>","text":"<p>Looks good ... But a compile-error?</p> <pre><code>b.cpp: In instantiation of \u2018void print(std::ostream&amp;, const First&amp;, const Rest&amp; ...)\n[with First = int; Rest = {}; std::ostream = std::basic_ostream&lt;char&gt;]\u2019:\nb.cpp:11:8:   required from here\nb.cpp:7:10: error: no matching function for call to \u2018print(std::ostream&amp;)\u2019\n    7 |     print(os, rest...);\n</code></pre> <p>It says that when <code>First = int, Rest = {}</code>, we are trying to call <code>print(os)</code> (with nothing to print).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#compile-time-if","title":"Compile-time <code>if</code>","text":"<p>Let's see what the function looks like when <code>Rest = {}</code>:</p> <pre><code>template &lt;typename First&gt;\nvoid print(std::ostream &amp;os, const First &amp;first) {\n  os &lt;&lt; first;\n  if (false)   // sizeof... (Rest) == 0\n    print(os); // Ooops! `print` needs at least two arguments!\n}\n</code></pre> <p>The problem is that <code>if</code> is a run-time control flow statement! The statements must compile even if the condition is 100% <code>false</code>!</p> <p>We need a compile-time <code>if</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#compile-time-if-if-constexpr","title":"Compile-time <code>if</code>: <code>if constexpr</code>","text":"<pre><code>if constexpr (condition)\n  statement1\n</code></pre> <pre><code>if constexpr (condition)\n  statement1\nelse\n  statement2\n</code></pre> <p><code>condition</code> must be a compile-time constant.</p> <p>Only when <code>condition</code> is <code>true</code> will <code>statement1</code> be compiled.</p> <p>Only when <code>condition</code> is <code>false</code> will <code>statement2</code> be compiled.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#use-if-constexpr","title":"Use <code>if constexpr</code>","text":"<pre><code>template &lt;typename First, typename... Rest&gt;\nvoid print(std::ostream &amp;os, const First &amp;first, const Rest &amp;...rest) {\n  os &lt;&lt; first;\n  if constexpr (sizeof...(Rest) &gt; 0)\n    print(os, rest...);\n}\n</code></pre> <p>Solution without <code>if constexpr</code>: overloading.</p> <pre><code>template &lt;typename T&gt;\nvoid print(std::ostream &amp;os, const T &amp;x) { os &lt;&lt; x; }\ntemplate &lt;typename First, typename... Rest&gt;\nvoid print(std::ostream &amp;os, const First &amp;first, const Rest &amp;...rest) {\n  print(os, first);\n  print(os, rest...);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#curiously-recurring-template-pattern-crtp","title":"Curiously Recurring Template Pattern (CRTP)","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#example-1-uncopyable","title":"Example 1: Uncopyable","text":"<p>We have seen this <code>Uncopyable</code> in Homework 6:</p> <pre><code>class Uncopyable {\n  Uncopyable(const Uncopyable &amp;) = delete;\n  Uncopyable &amp;operator=(const Uncopyable &amp;) = delete;\n\npublic:\n  Uncopyable() = default;\n};\n\nclass ComplexDevice : public Uncopyable { /* ... */ };\n</code></pre> <p>A class can be made uncopyable by inheriting <code>Uncopyable</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#example-1-uncopyable_1","title":"Example 1: Uncopyable","text":"<p>But if two classes inherit from <code>Uncopyable</code> publicly, odd things may happen ...</p> <pre><code>class Uncopyable {\n  Uncopyable(const Uncopyable &amp;) = delete;\n  Uncopyable &amp;operator=(const Uncopyable &amp;) = delete;\n\npublic:\n  Uncopyable() = default;\n};\n\nclass Airplane : public Uncopyable {}; // Copying an airplane is too costly.\nclass MonaLisa : public Uncopyable {}; // An artwork is not copyable.\n\nUncopyable *foo1 = new Airplane();\nUncopyable *foo2 = new MonaLisa();\n</code></pre> <p>Ooops ... A <code>Uncopyable*</code> can point to two things that are totally unrelated to each other!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#example-1-uncopyable_2","title":"Example 1: Uncopyable","text":"<pre><code>template &lt;typename Derived&gt;\nclass Uncopyable {\n  Uncopyable(const Uncopyable &amp;) = delete;\n  Uncopyable &amp;operator=(const Uncopyable &amp;) = delete;\n\npublic:\n  Uncopyable() = default;\n};\n\nclass Airplane : public Uncopyable&lt;Airplane&gt; {};\nclass MonaLisa : public Uncopyable&lt;MonaLisa&gt; {};\n</code></pre> <p>Now <code>Airplane</code> and <code>MonaLisa</code> inherit from different bases: <code>Uncopyable&lt;Airplane&gt;</code> and <code>Uncopyable&lt;MonaLisa&gt;</code> are different types.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#example-2-incrementable","title":"Example 2: Incrementable","text":"<pre><code>template &lt;typename T&gt;\nclass Iterator {\n  T *cur;\n\npublic:\n  auto &amp;operator++() {\n    ++cur;\n    return *this;\n  }\n  auto operator++(int) {\n    auto tmp = *this;\n    ++*this;\n    return tmp;\n  }\n};\n</code></pre> <pre><code>class Rational {\n  int num;\n  unsigned denom;\n\npublic:\n  auto &amp;operator++() {\n    num += denom;\n    return *this;\n  }\n  auto operator++(int) {\n    auto tmp = *this;\n    ++*this;\n    return tmp;\n  }\n};\n</code></pre> <pre><code>class AtomicCounter {\n  int cnt;\n  std::mutex m;\n\npublic:\n  auto &amp;operator++() {\n    std::lock_guard l(m);\n    ++cnt;\n    return *this;\n  }\n  auto operator++(int) {\n    auto tmp = *this;\n    ++*this;\n    return tmp;\n  }\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#example-2-incrementable_1","title":"Example 2: Incrementable","text":"<p>With the prefix incrementation operator <code>operator++</code> defined, the postfix version is always defined as follows:</p> <pre><code>auto operator++(int) {\n  auto tmp = *this;\n  ++*this;\n  return tmp;\n}\n</code></pre> <p>How can we avoid repeating ourselves?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#example-2-incrementable_2","title":"Example 2: Incrementable","text":"<pre><code>template &lt;typename Derived&gt;\nclass Incrementable {\npublic:\n  auto operator++(int) {\n    // Since we are sure that the dynamic type of `*this` is `Derived`,\n    // we can use `static_cast` here to perform the downcasting.\n    auto real_this = static_cast&lt;Derived *&gt;(this);\n    auto tmp = *real_this;\n    ++*real_this;\n    return tmp;\n  }\n};\nclass A : public Incrementable&lt;A&gt; {\npublic:\n  A &amp;operator++() { /* ... */ }\n  // The operator++(int) is inherited from Incrementable&lt;A&gt;.\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#curiously-recurring-template-pattern","title":"Curiously Recurring Template Pattern","text":"<p>By writing the common parts of <code>X</code>, <code>Y</code>, <code>Z</code>, ... in a base class <code>Base</code>,</p> <ul> <li>we can avoid repeating ourselves.</li> <li>However, <code>X</code>, <code>Y</code> and <code>Z</code> have a common base (which may lead to weird things), and <code>Base</code> does not know who is inheriting from it.</li> </ul> <p>By letting <code>X</code>, <code>Y</code>, <code>Z</code>, ... inherit from <code>Base&lt;X&gt;</code>, <code>Base&lt;Y&gt;</code>, <code>Base&lt;Z&gt;</code>, ... respectively,</p> <ul> <li>each class inherits from a unique base class, and</li> <li>the base class knows what the derived class is, so a safe downcast can be performed.</li> </ul> <p>CRTP idiom adopted in the standard library: <code>std::enable_shared_from_this</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#introduction-to-template-metaprogramming","title":"Introduction to template metaprogramming","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#know-whether-two-types-are-the-same","title":"Know whether two types are the same?","text":"<pre><code>template &lt;typename T, typename U&gt;\nstruct is_same {\n  static const bool result = false;\n};\ntemplate &lt;typename T&gt; // specialization for U = T\nstruct is_same&lt;T, T&gt; {\n  static const bool result = true;\n};\n</code></pre> <ul> <li><code>is_same&lt;int, double&gt;::result</code> is false.</li> <li><code>is_same&lt;int, int&gt;::result</code> is true.</li> <li>Are <code>int</code> and <code>signed</code> the same type? Let <code>is_same</code> tell you!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#know-whether-a-type-is-a-pointer","title":"Know whether a type is a pointer?","text":"<pre><code>template &lt;typename T&gt;\nstruct is_pointer {\n  static const bool result = false;\n};\ntemplate &lt;typename T&gt;\nstruct is_pointer&lt;T *&gt; { // specialization for &lt;T *&gt; for some T.\n  static const bool result = true;\n};\n</code></pre> <ul> <li><code>is_pointer&lt;int *&gt;::result</code> is true.</li> <li><code>is_pointer&lt;int&gt;::result</code> is false.</li> <li>Is <code>std::vector&lt;int&gt;::iterator</code> actually a pointer? Is <code>int[10]</code> the same thing as <code>int *</code>? Consult these \"functions\"!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#type_traits","title":"<code>&lt;type_traits&gt;</code>","text":"<p><code>std::is_same</code>, <code>std::is_pointer</code>, as well as a whole bunch of other \"functions\": Go to this standard library.</p> <p>This is part of the metaprogramming library.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#compute-n-in-compile-time","title":"Compute \\(n!\\) in compile-time?","text":"<pre><code>template &lt;unsigned N&gt;\nstruct Factorial {\n  static const unsigned long long value = N * Factorial&lt;N - 1&gt;::value;\n};\ntemplate &lt;&gt;\nstruct Factorial&lt;0u&gt; {\n  static const unsigned long long value = 1;\n};\n\nint main() {\n  int a[Factorial&lt;5&gt;::value]; // 120, which is a compile-time constant.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#check-whether-an-integer-is-a-prime-in-compile-time","title":"Check whether an integer is a prime in compile-time?","text":"<pre><code>template &lt;unsigned N, unsigned Div&gt; struct PrimeTest {\n  static const bool result = (N % Div != 0) &amp;&amp; PrimeTest&lt;N, Div + 1&gt;::result;\n};\ntemplate &lt;unsigned N&gt; struct PrimeTest&lt;N, N&gt; { // end\n  static const bool result = true;\n};\ntemplate &lt;unsigned N&gt; struct IsPrime {\n  static const bool result = PrimeTest&lt;N, 2&gt;::result;\n};\ntemplate &lt;&gt; struct IsPrime&lt;1u&gt; {\n  static const bool result = false;\n};\n\nstatic_assert(IsPrime&lt;197&gt;::result); // 197 is a prime\nstatic_assert(!IsPrime&lt;42&gt;::result); // 42 is not\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#seven-basic-quantities-in-physics","title":"Seven basic quantities in physics","text":"<p>When performing computations in physics, the correctness in dimensions is important.</p> <pre><code>double mass = getMass();\ndouble acceleration = getAcc();\ndouble force = mass + acceleration; // Ooops! A mistake here!\n</code></pre> <p>Can we avoid such mistakes in compile-time? That is, to make mistakes in dimensions a compile error.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#seven-basic-quantities-in-physics_1","title":"Seven basic quantities in physics","text":"<p>Each of the seven basic quantities corresponds to a template parameter:</p> <pre><code>template &lt;int mass, int length, int time, int charge,\n          int temperature, int intensity, int amount_of_substance&gt;\nstruct quantity { /* ... */ };\n\nusing mass = quantity&lt;1, 0, 0, 0, 0, 0, 0&gt;;\nusing force = quantity&lt;1, 1, -2, 0, 0, 0, 0&gt;;\nusing pressure = quantity&lt;1, -1, -2, 0, 0, 0, 0&gt;;\nusing acceleration = quantity&lt;0, 1, -2, 0, 0, 0, 0, 0&gt;;\n\nmass m = getMass();\nacceleration a = getAcc();\nforce f = m + a; // Error! No match operator+ for 'mass' and 'acceleration'!\nforce f = m * a; // Correct.\n</code></pre> <p>If the arithmetic operations of different <code>quantity</code>s are defined correctly, we can avoid dimension mistakes in compile-time!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#template-metaprogramming","title":"Template metaprogramming","text":"<p>Template metaprogramming is a very special and powerful technique that makes use of the compile-time computation of C++ compilers. (It is Turing-complete and pure functional programming.)</p> <p>Learn a little bit more in recitations.</p> <p>In modern C++, there are many more things that facilitate compile-time computations: <code>constexpr</code>, <code>consteval</code>, <code>constinit</code>, <code>concept</code>, <code>requires</code>, ...</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#summary","title":"Summary","text":"<p>Template specialization</p> <ul> <li>Specializes the template function / class when the template argument satisfies certain properties.</li> <li>Partial specialization: The specialization still has template parameters.</li> <li>Full specialization: The specialization no longer has no template parameters.</li> <li>Function templates cannot have partial specializations.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#summary_1","title":"Summary","text":"<p>Variadic template example: A <code>print</code> function.</p> <ul> <li><code>pack...</code>: pack expansion.</li> <li><code>sizeof...(pack)</code> returns the number of arguments in a parameter pack. It is compile-time evaluated.</li> <li><code>if constexpr</code>: compile-time <code>if</code>: compile statements conditioned on a compile-time boolean expression.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l26/l26.html#summary_2","title":"Summary","text":"<p>Curiously Recurring Template Pattern (CRTP)</p> <ul> <li>Let <code>X</code> inherit from <code>Base&lt;X&gt;</code>.</li> <li>Each class inherits from a unique base class.</li> <li>The base class knows what the derived class is, so a safe downcast can be performed.</li> </ul> <p>Template metaprogramming (TMP)</p> <ul> <li>TMP can shift work from runtime to compile-time, thus enabling earlier error detection and higher runtime performance.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html","title":"CS100 Lecture 27","text":"<p>Other Facilities in the Standard Library</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#contents","title":"Contents","text":"<ul> <li>C++17 library facilities</li> <li><code>function</code></li> <li><code>optional</code></li> <li><code>string_view</code></li> <li><code>pair</code> and <code>tuple</code></li> <li>Going into C++20:</li> <li>Ranges library</li> <li>Formatting library</li> <li>Future</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#c17-library-facilities","title":"C++17 library facilities","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#function","title":"<code>function</code>","text":"<p>Defined in <code>&lt;functional&gt;</code></p> <p><code>std::function&lt;Ret(Args...)&gt;</code> is a general-purpose function wrapper that stores any callable object that can be called with arguments of types <code>Args...</code> and returns <code>Ret</code>.</p> <pre><code>Polynomial poly({3, 2, 1}); // `Polynomial` in homework 5\nstd::function&lt;double(double)&gt; f1(poly);\nstd::cout &lt;&lt; f1(0) &lt;&lt; '\\n';\n\nstd::function&lt;void()&gt; f2 = []() { std::cout &lt;&lt; 42 &lt;&lt; '\\n'; };\nf2(); // prints 42\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#recap-callable","title":"Recap: callable","text":"<p>A callable object in C++ might be a function, a pointer-to-function, or an object of class type that has an overloaded <code>operator()</code> \\({}^{\\textcolor{red}{1}}\\).</p> <ul> <li>Lambdas belong to the last category, whose type is compiler-generated.</li> </ul> <p>A function has an address! When the program is executed, the program instructions (machine code) are loaded into the memory.</p> <pre><code>int add(int a, int b) { return a + b; }\nint main() {\n  auto *padd = &amp;add;\n  std::cout &lt;&lt; (*padd)(3, 4) &lt;&lt; '\\n';\n  std::cout &lt;&lt; padd(3, 4) &lt;&lt; '\\n'; // Also correct.\n}\n</code></pre> <p>A pointer-to-function itself is also callable. <code>pfunc(...)</code> is the same as <code>(*pfunc)(...)</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#example-calculator","title":"Example: Calculator","text":"<p>A more fancy way of implementing a calculator:</p> <pre><code>std::map&lt;char, std::function&lt;double(double, double)&gt;&gt; funcMap{\n  {'+', std::plus&lt;&gt;{}},\n  {'-', std::minus&lt;&gt;{}},\n  {'*', std::multiplies&lt;&gt;{}},\n  {'/', std::divides&lt;&gt;{}}\n};\ndouble lhs, rhs; char op;\nstd::cin &gt;&gt; lhs &gt;&gt; op &gt;&gt; rhs;\nstd::cout &lt;&lt; funcMap[op](lhs, rhs) &lt;&lt; '\\n';\n</code></pre> <p><code>std::plus</code>, <code>std::minus</code>, etc. are defined in the standard library header <code>&lt;functional&gt;</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#example-calculator_1","title":"Example: Calculator","text":"<p>Combining different ways of using <code>std::function</code>:</p> <pre><code>double add(double a, double b) { return a + b; }\nstruct Divides {\n  double operator/(double a, double b) const { return a / b; }\n};\nint main() {\n  std::map&lt;char, std::function&lt;double(double, double)&gt;&gt; funcMap{\n    {'+', add}, // A function (in fact, a pointer-to-function)\n    {'-', std::minus&lt;&gt;{}}, // An object of type `std::minus&lt;&gt;`\n    {'*', [](double a, double b) { return a * b; }}, // A lambda\n    {'/', Divides{}} // An object of type `Divides`\n  };\n  double lhs, rhs; char op;\n  std::cin &gt;&gt; lhs &gt;&gt; op &gt;&gt; rhs;\n  std::cout &lt;&lt; funcMap[op](lhs, rhs) &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#optional","title":"<code>optional</code>","text":"<p>Defined in the header <code>&lt;optional&gt;</code>.</p> <p><code>std::optional&lt;T&gt;</code> manages either an object of type <code>T</code>, or nothing.</p> <ul> <li>Algebraically: Let \\(\\mathcal T\\) be the value set of <code>T</code>, and let \\(\\mathcal O\\) be the value set of <code>std::optional&lt;T&gt;</code>. We have</li> </ul> <p> </p> <p>where <code>std::nullopt</code> is a special object that represents the state of nothing.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#example-solving-quadratic-equation-in-mathbb-r","title":"Example: Solving quadratic equation in \\(\\mathbb R\\).","text":"<p>A typical example: Use <code>std::optional&lt;Solution&gt;</code> when there may be no solutions.</p> <pre><code>std::optional&lt;std::pair&lt;double, double&gt;&gt; solve(double a, double b, double c) {\n  auto delta = b * b - 4 * a * c;\n  if (delta &lt; 0)\n    return std::nullopt; // No solution.\n  auto sqrtDelta = std::sqrt(delta);\n  // An `std::optional&lt;T&gt;` can be initialized directly from `T`.\n  return std::pair{(-b - sqrtDelta) / (2 * a), (-b + sqrtDelta) / (2 * a)};\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#example-solving-quadratic-equation-in-mathbb-r_1","title":"Example: Solving quadratic equation in \\(\\mathbb R\\).","text":"<pre><code>void printSolution(const std::optional&lt;std::pair&lt;double, double&gt;&gt; &amp;sln) {\n  if (sln) { // conversion to bool tests whether it contains an object\n    auto [x1, x2] = sln.value(); // .value() returns the contained object.\n    std::cout &lt;&lt; \"The solutions are \" &lt;&lt; x1 &lt;&lt; \" and \" &lt;&lt; x2 &lt;&lt; '.'\n              &lt;&lt; std::endl;\n  } else\n    std::cout &lt;&lt; \"No solutions.\" &lt;&lt; std::endl;\n}\nint main() {\n  auto sln1 = solve(1, -2, -3);\n  printSolution(sln1);\n  auto sln2 = solve(1, 0, 1);\n  printSolution(sln2);\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#how-will-you-implement-stdoptionalt","title":"How will you implement <code>std::optional&lt;T&gt;</code>?","text":"<p>Is this good?</p> <pre><code>template &lt;typename T&gt;\nstruct Optional {\n  T object;\n  bool hasObject;\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#how-will-you-implement-stdoptionalt_1","title":"How will you implement <code>std::optional&lt;T&gt;</code>?","text":"<p>Is this good?</p> <pre><code>template &lt;typename T&gt;\nstruct Optional {\n  T object;\n  bool hasObject;\n  // ...\n};\n</code></pre> <p>NO! It models \\(\\mathcal O=\\mathcal T\\times\\{\\text{true},\\text{false}\\}\\). The <code>object</code> is alive even when <code>hasObject</code> is <code>false</code>!</p> <ul> <li>This also requires the \"nothing\" state to be represented by default-initializing <code>object</code>, but the default-initialization of <code>T</code> may be expensive or disabled!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#how-will-you-implement-stdoptionalt_2","title":"How will you implement <code>std::optional&lt;T&gt;</code>?","text":"<p>Is this good?</p> <pre><code>template &lt;typename T&gt;\nstruct Optional {\n  std::unique_ptr&lt;T&gt; pObject; // \"Nothing\" is represented by nullptr.\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#how-will-you-implement-stdoptionalt_3","title":"How will you implement <code>std::optional&lt;T&gt;</code>?","text":"<p>Is this good?</p> <pre><code>template &lt;typename T&gt;\nstruct Optional {\n  std::unique_ptr&lt;T&gt; pObject; // \"Nothing\" is represented by nullptr.\n  // ...\n};\n</code></pre> <p>It does model \\(\\mathcal O=\\mathcal T\\cup\\{\\text{std::nullopt}\\}\\), but it requires dynamic memory allocation.</p> <p>If I just need something to represent \"no solution\", why would I have to store the solution on dynamic memory?</p> <ul> <li>Such overhead is not acceptable!</li> </ul> <p>An <code>std::optional</code> models an object, not a pointer!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#how-will-you-implement-stdoptionalt_4","title":"How will you implement <code>std::optional&lt;T&gt;</code>?","text":"<p>The implementation is not trivial. See this page if you are interested.</p> <ul> <li>It requires careful treatment of memory, possibly using a <code>union</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#other-member-functions-of-stdoptional","title":"Other member functions of <code>std::optional</code>","text":"<p>Some common ones:</p> <ul> <li><code>*o</code>: returns the stored object. The behavior is undefined if it does not contain one.</li> <li><code>o-&gt;mem</code>: equivalent to <code>(*o).mem</code>.</li> </ul> <p><code>std::optional&lt;T&gt;</code> does not model a pointer, although it provides <code>*</code> and <code>-&gt;</code>. - <code>o.value_or(x)</code>: returns the stored object, or <code>x</code> if it does not contain one. - <code>o1.swap(o2)</code> - <code>o.reset()</code>: destroys any contained object - <code>o.emplace(args...)</code>: constructs the contained object in-place.</p> <p>Refer to cppreference for a full list.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#string_view","title":"<code>string_view</code>","text":"<p>The old question: How do you pass a string?</p> <pre><code>void some_operation(const std::string &amp;str) {\n  // ...\n}\n</code></pre> <p>Pass-by-reference-to-<code>const</code> seems to be quite good: It accepts both lvalues and rvalues, whether <code>const</code>-qualified or not, and avoids copy.</p> <ul> <li>Wait ... Does it really avoid copy?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#string_view_1","title":"<code>string_view</code>","text":"<p>The old question: How do you pass a string?</p> <pre><code>void some_operation(const std::string &amp;str) {\n  // ...\n}\n</code></pre> <pre><code>std::string s = something();\nsome_operation(s); // Copy is avoided, of course.\nsome_operation(\"The quick red fox jumps over the slow red turtle.\"); // Ooops!\n</code></pre> <ul> <li>When we pass a string literal, a temporary <code>std::string</code> is created first, during which the content of the string is still copied!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#string_view_2","title":"<code>string_view</code>","text":"<p>What do <code>char[N]</code>, <code>\"hello\"</code>, <code>std::string</code>, <code>str = new char[N]{...}</code> have in common?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#string_view_3","title":"<code>string_view</code>","text":"<p>What do <code>char[N]</code>, <code>\"hello\"</code>, <code>std::string</code>, <code>str = new char[N]{...}</code> have in common?</p> <ul> <li>A pointer to the first position, and a length!</li> </ul> <pre><code>struct StringView {\n  const char *start;\n  std::size_t length;\n\n  StringView(const char *cstr) : start{cstr}, length{std::strlen(cstr)} {}\n  StringView(const std::string &amp;str) : start{str.data()}, length{str.size()} {}\n\n  std::size_t size() const { return length; }\n  const char &amp;operator[](std::size_t n) const { return start[n]; }\n\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#string_view_4","title":"<code>string_view</code>","text":"<p>Defined in header <code>&lt;string_view&gt;</code>.</p> <p><code>std::string_view</code>: An non-owning reference to a string. It is often used to refer to a string that we don't modify.</p> <pre><code>// `std::string_view` is usually passed by value directly,\n// since it is light-weighted and models a \"pointer\".\nvoid some_operation(std::string_view str);\nint main() {\n  std::string s1 = something(), s2 = something_else();\n  some_operation(s1);\n  some_operation(s1 + s2);\n  some_operation(\"hello\");\n}\n</code></pre> <ul> <li>No copy is performed, even for <code>\"hello\"</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#avoid-dangling-string_view","title":"Avoid dangling <code>string_view</code>!","text":"<p>Let's use <code>std::string_view</code> everywhere, shall we?</p> <pre><code>struct Student {\n  std::string_view name;\n  // ...\n\n  Student(std::string_view name_) : name{name_} {}\n};\n\nint main() {\n  std::string s1 = something(), s2 = something_else();\n  Student stu(s1 + s2);\n  std::cout &lt;&lt; stu.name &lt;&lt; '\\n'; // Undefined behavior!\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#avoid-dangling-string_view_1","title":"Avoid dangling <code>string_view</code>!","text":"<p>Let's use <code>std::string_view</code> everywhere, shall we?</p> <pre><code>struct Student {\n  std::string_view name;\n  // ...\n\n  Student(std::string_view name_) : name{name_} {}\n};\n\nint main() {\n  std::string s1 = something(), s2 = something_else();\n  Student stu(s1 + s2); // `s1 + s2` is a temporary!\n  std::cout &lt;&lt; stu.name &lt;&lt; '\\n'; // Undefined behavior! `stu.name` is dangling!\n}\n</code></pre> <p><code>stu.name</code> refers to a temporary created by <code>s1 + s2</code>! It is destroyed immediately when the initialization of <code>stu</code> ends.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#avoid-dangling-string_view_2","title":"Avoid dangling <code>string_view</code>!","text":"<p>The same thing happens if you try to use reference-to-<code>const</code> as a member:</p> <pre><code>struct Student {\n  const std::string &amp;name;\n  // ...\n\n  Student(const std::string &amp;name_) : name{name_} {}\n};\n\nint main() {\n  std::string s1 = something(), s2 = something_else();\n  Student stu(s1 + s2); // `s1 + s2` is a temporary!\n  std::cout &lt;&lt; stu.name &lt;&lt; '\\n'; // Undefined behavior! `stu.name` is dangling!\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#string_view_5","title":"<code>string_view</code>","text":"<p>Using a <code>string_view</code> parameter can accept strings of any form, and avoid copy.</p> <ul> <li>The use of <code>string_view</code> as a parameter is often safe, because the lifetime of the argument should be longer than the execution of the function.</li> <li>In other cases, be extremely careful to avoid dangling <code>string_view</code>s!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#pair-and-tuple","title":"<code>pair</code> and <code>tuple</code>","text":"<p><code>pair</code> and <code>tuple</code> can be thought of as a \"quick and dirty\" data structure.</p> <ul> <li><code>std::pair&lt;T, U&gt;</code>: defined in <code>&lt;utility&gt;</code>. It models</li> </ul> <p>  - <code>std::tuple&lt;T1, T2, ...&gt;</code>: defined in <code>&lt;tuple&gt;</code>. It models</p> <p> </p> <p>where \\(n\\) is compile-time known non-negative constant integer.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#pair-and-tuple_1","title":"<code>pair</code> and <code>tuple</code>","text":"<p><code>std::pair&lt;T, U&gt;</code> is defined almost just like this:</p> <pre><code>template &lt;typename T, typename U&gt;\nstruct pair {\n  T first;\n  U second;\n};\n</code></pre> <p>It comes from C++98. At that time, there was no variadic templates which is necessary for building a <code>tuple</code>.</p> <p><code>std::tuple&lt;Types...&gt;</code> is an extension of <code>std::pair&lt;T1, T2&gt;</code>, which can contain an arbitrary number of things.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#pair-and-tuple-in-modern-c","title":"<code>pair</code> and <code>tuple</code> in modern C++","text":"<p>With the increasing support for aggregates and structured binding in modern C++, <code>pair</code> and <code>tuple</code> are seldom needed now.</p> <p>A user-defined type can also be used conveniently:</p> <pre><code>template &lt;typename T&gt; struct Set {\n  struct InsertResult {\n    bool success;\n    Iterator position;\n  };\n  InsertResult insert(const T &amp;);\n};\n\n// structured binding\nauto [ok, pos] = mySet.insert(something);\nif (ok)\n  do_something(pos);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#pair-and-tuple-in-modern-c_1","title":"<code>pair</code> and <code>tuple</code> in modern C++","text":"<p>Which one do you prefer?</p> <pre><code>template &lt;typename T&gt; struct Set {\n  struct InsertResult {\n    bool success;\n    Iterator position;\n  };\n  InsertResult insert(const T &amp;);\n};\n\nauto result = mySet.insert(x);\nif (result.success)\n  do_something(result.position);\n</code></pre> <pre><code>template &lt;typename T&gt; struct Set {\n  std::pair&lt;bool, Iterator&gt;\n  insert(const T &amp;);\n};\n\nauto result = mySet.insert(x);\nif (result.first)\n  do_something(result.second);\n</code></pre> <p>[Best practice] Prefer a self-defined type with meaningfully named members to <code>pair</code> and <code>tuple</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#others","title":"Others","text":"<p>Other things in the C++17 standard library we have not touched:</p> <ul> <li><code>std::variant&lt;T1, T2, ...&gt;</code>: A type-safe <code>union</code> that models</li> </ul> <p>  - <code>std::any</code>: A type-safe container that contains a single object of any copy-constructible type. - <code>&lt;regex&gt;</code>: Standard library support for regular expressions. - <code>&lt;filesystem&gt;</code>: Standard library support for filesystem operations. - Concurrency support: <code>&lt;thread&gt;</code>, <code>&lt;atomic&gt;</code>, <code>&lt;mutex&gt;</code>, ...</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#going-into-c20","title":"Going into C++20","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#c20-is-historic","title":"C++20 is historic!","text":"<p>CppCon2021 Talk by Bjarne Stroustrup: C++20: Reaching the aims of C++</p> <p>C++20 is the first C++ standard that delivers on virtually all the features that Bjarne Stroustrup dreamed of in The Design and Evolution of C++ in 1994.</p> <ul> <li>Coroutines (Talk)</li> <li>Concepts and requirements (<code>concept</code>, <code>requires</code>) (Talk)</li> <li>Modules (Talk) (Talk on the implementation by MSVC)</li> <li>Ranges library</li> <li>Formatting library</li> <li>Three-way comparison (<code>operator&lt;=&gt;</code>, <code>std::partial_ordering</code>, ...)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#ranges-library-the-next-generation-of-stl","title":"Ranges library: The next generation of STL.","text":"<p>An extension and generalization of the algorithms and iterator libraries that makes them more powerful by making them composable and less error-prone.</p> <p>A range is represented by one object, instead of <code>(begin, end)</code> or <code>(begin, n)</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#c20-constrained-algorithms","title":"C++20 constrained algorithms","text":"<p>Given <code>Student</code> defined as</p> <pre><code>struct Student { std::string name; int id; };\n</code></pre> <p>C++17:</p> <pre><code>void sortStudentsByID(std::vector&lt;Student&gt; &amp;students) {\n  std::sort(students.begin(), students.end(),\n            [](const Student &amp;a, const Student &amp;b) { return a.id &lt; b.id; });\n}\n</code></pre> <p>C++20:</p> <pre><code>void sortStudentsByID(std::vector&lt;Student&gt; &amp;students) {\n  std::ranges::sort(students, {}, &amp;Student::id);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#ranges-are-composable","title":"Ranges are composable","text":"<p>Enumerate the last \\(10\\) even numbers in a vector in reverse order:</p> <pre><code>using namespace std::views;\nfor (auto x : vec | filter([](auto x) { return x % 2 == 0; }) | take(10)\n              | reverse)\n  do_something(x);\n</code></pre> <p>It looks very much like the Unix pipes: The following Linux shell command will list all the installed packages related with LaTeX, sort them, and display the first five lines.</p> <pre><code>apt list --installed | grep latex | sort | head --lines 5\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#formatting-library","title":"Formatting library","text":"<p>Some may think that</p> <pre><code>printf(\"%d + %d == %d\\n\", a, b, a + b)\n</code></pre> <p>is better than</p> <pre><code>cout &lt;&lt; a &lt;&lt; \" + \" &lt;&lt; b &lt;&lt; \" == \" &lt;&lt; a + b &lt;&lt; '\\n';\n</code></pre> <p>However, the existing <code>printf</code> family of functions have at least three drawbacks:</p> <ol> <li>The format string is parsed at runtime, which could have been done in compile-time. An error in the format string should be a compile-error.</li> <li>Not type-safe. Arguments are passed via <code>__VA_ARGS__</code>, which should have been done via variadic templates in modern C++.</li> <li>Not extensible. We cannot use <code>printf</code> to print objects of our self-defined types.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#formatting-library_1","title":"Formatting library","text":"<p>The text formatting library offers a safe and extensible alternative to the printf family of functions. It is intended to complement the existing C++ I/O streams library.</p> <pre><code>std::cout &lt;&lt; std::format(\"{} + {} == {}.\\n\", a, b, a + b);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#the-c23-print-library","title":"The C++23 <code>print</code> library","text":"<p>With C++23 <code>print</code>, we can print a formatted string directly:</p> <pre><code>std::print(\"{} + {} == {}.\\n\", a, b, a + b);\nstd::println(\"{} + {} == {}.\", a, b, a + b); // equivalent way\n</code></pre> <p>Furthermore, the C++23 <code>print</code> functions are able to handle Unicode! The following should never produce garbled characters.</p> <pre><code>std::print(\"\u4f60\u597d\uff0c\u4e16\u754c\uff01\");\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#future","title":"Future","text":"<ul> <li>The graph library (Talk) (P1709R3), which may be in C++26?</li> <li>Standard library support for linear algebra algorithms: <code>&lt;linalg&gt;</code> in C++26.</li> <li>Debugging support: <code>&lt;debugging&gt;</code> in C++26.</li> <li>......</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#summary","title":"Summary","text":"<ul> <li><code>function</code>: A function wrapper that stores a callable object.s</li> <li><code>optional</code>: Either a value or nothing.</li> <li><code>string_view</code>: A reference to a string of any form, which is often used as a parameter.</li> <li><code>pair</code> and <code>tuple</code>: A \"quick and dirty\" data structure, which should be seldomly used in modern C++.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l27/l27.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) A pointer-to-member is also a callable.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html","title":"CS100 Lecture 28","text":"<p>Compile-time Computations and Metaprogramming</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#contents","title":"Contents","text":"<ul> <li>Example: Binary literals</li> <li><code>constexpr</code> and <code>consteval</code></li> <li><code>concept</code> and constraints</li> <li>Summary</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#example-binary-literals","title":"Example: Binary literals","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#binary-literals","title":"Binary literals","text":"<p>Built-in binary literals support: C++14 and C23.</p> <pre><code>switch (rv32inst.opcode) { // 32-bit RISC-V instruction opcode\n  case 0b0110011: /* R-format */\n  case 0b0010011: /* I-format (not load) */\n  case 0b0000011: /* I-format: load */\n  case 0b0100011: /* S-format */\n  // ...\n}\n</code></pre> <p>How do people write binary literals when there is no built-in support?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#runtime-solution-no","title":"Runtime solution? No!","text":"<p>This is not satisfactory: The value is computed at run-time!</p> <pre><code>int dec2bin(int x) {\n  int result = 0, pow_two = 1;\n  while (x &gt; 0) {\n    result += (x % 10) * pow_two;\n    x /= 10;\n    pow_two *= 2;\n  }\n  return result;\n}\n\nvoid foo(const RV32Inst &amp;inst) {\n  const int forty_two = dec2bin(101010); // correct, but slow.\n  switch (inst.opcode) {\n    case dec2bin(110011): // Error! 'case' label must be compile-time constant!\n        // ...\n  }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#preprocessor-metaprogramming-solution","title":"Preprocessor metaprogramming solution","text":"<p><code>#</code> and <code>##</code> operators: Both are used in function-like macros.</p> <p><code>#x</code>: stringify <code>x</code>.</p> <pre><code>#define SHOW_VALUE(x) std::cout &lt;&lt; #x &lt;&lt; \" == \" &lt;&lt; x\n\nint ival = 42;\nSHOW_VALUE(ival); // std::cout &lt;&lt; \"ival\" &lt;&lt; \" == \" &lt;&lt; ival;\n</code></pre> <p><code>a##b</code>: Concatenate <code>a</code> and <code>b</code>.</p> <pre><code>#define DECLARE_HANDLER(name) void handler_##name(int err_code)\n\nDECLARE_HANDLER(overflow); // void handler_overflow(int err_code);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#preprocessor-metaprogramming-solution_1","title":"Preprocessor metaprogramming solution","text":"<p>https://stackoverflow.com/a/68931730/8395081</p> <pre><code>#define BX_0000 0\n#define BX_0001 1\n#define BX_0010 2\n// ......\n#define BX_1110 E\n#define BX_1111 F\n\n#define BIN_A(x) BX_##x\n\n#define BIN_B(x, y) 0x##x##y\n#define BIN_C(x, y) BIN_B(x, y)\n\n#define BIN(x, y) BIN_C(BIN_A(x), BIN_A(y))\n\nconst int x = BIN(0010, 1010); // 0x##BX_0010##BX_1010 ==&gt; 0x2a ==&gt; 42\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#template-metaprogramming-solution","title":"Template metaprogramming solution","text":"<pre><code>template &lt;unsigned N&gt; struct Binary {\n  static const unsigned value = Binary&lt;N / 10&gt;::value * 2 + (N % 10);\n};\ntemplate &lt;&gt; struct Binary&lt;0u&gt; {\n  static const unsigned value = 0;\n};\n\nvoid foo(const RV32Inst &amp;inst) {\n  const auto x = Binary&lt;101010&gt;::value; // 42\n  switch (inst.opcode) {\n    case Binary&lt;110011&gt;::value: // OK.\n      // ...\n  }\n}\n</code></pre> <p>Compared to preprocessor metaprogramming, template metaprogramming is more powerful, and less error-prone.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#modern-c-constexpr-function","title":"Modern C++: <code>constexpr</code> function","text":"<p>Just mark the function <code>constexpr</code>, and the compiler will be able to execute it!</p> <pre><code>constexpr int dec2bin(int x) {\n  int result = 0, pow_two = 1;\n  while (x &gt; 0) {\n    result += (x % 10) * pow_two; x /= 10; pow_two *= 2;\n  }\n  return result;\n}\nvoid foo(const RV32Inst &amp;inst) {\n  switch (inst.opcode) {\n    case dec2bin(101010): // OK. Since 101010 is a compile-time constant,\n                          // the function is executed at compile-time and\n                          // produces a compile-time constant.\n      // ...\n  }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#metaprogramming","title":"Metaprogramming","text":"<p>Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data.</p> <ul> <li>Read, generate, analyze or transform other programs, and even itself.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#typical-problems-that-needs-metaprogramming","title":"Typical problems that needs metaprogramming","text":"<p>Write a function that selects different behaviors at compile-time according to the argument?</p> <ul> <li>e.g. The <code>std::distance</code> function (in this week's recitation).</li> </ul> <p>Generate some code according to the members of my class, without too much manual modification?</p> <ul> <li>e.g. Serialization: Generate <code>operator&gt;&gt;</code> automatically for my class that prints the members one-by-one?</li> <li>e.g. \"Metaclasses\": Generate the getters and setters automatically for each of my data members?</li> </ul> <p>......</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#compile-time-computations","title":"Compile-time computations","text":"<p>How much work can be done in compile-time?</p> <ul> <li>Call to numeric functions with compile-time known arguments?</li> <li>e.g. Can <code>std::acos(-1)</code> be computed in compile-time?</li> <li>Manipulation of compile-time known strings?</li> <li>e.g. Preparation of compile-time known regular expressions: CTRE</li> <li>Even crazier: Compile-time raytracer?!</li> <li>The computations are done entirely in compile-time. At run-time, the only work is to output the image.</li> </ul> <p>Anything can be computed in compile-time, provided that the arguments are compile-time known!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#constexpr-and-consteval","title":"<code>constexpr</code> and <code>consteval</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#constexpr","title":"<code>constexpr</code>","text":"<p>Constant expressions: expressions that are evaluated at compile-time.</p> <p><code>constexpr</code> variables:</p> <pre><code>constexpr double dval = 5.2;\nconst int ival = 42;\n</code></pre> <p>By declaring a variable <code>constexpr</code>, we mean that its value is compile-time known, and will not change.</p> <ul> <li>A <code>constexpr</code> variable is implicitly <code>const</code>.</li> <li>It must be initialized from a constant expression. Otherwise, an compile-error.</li> </ul> <p>A <code>const</code> variable initialized from a constant expression is also a constant expression.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#constexpr-functions","title":"<code>constexpr</code> functions","text":"<p><code>constexpr</code> functions are potentially executed at compile-time:</p> <ul> <li>When the arguments are constant expressions, it is run at compile-time and produces a constant expression.</li> <li>When the arguments are not constant expressions, it is run at run-time just like a normal function.</li> </ul> <pre><code>constexpr int gcd(int a, int b) {\n  while (b != 0) { a = std::exchange(b, a % b); }\n  return a;\n}\nint main() {\n  const int x = 10, y = 16;\n  constexpr auto result = gcd(x, y); // OK. The result is a constant expression.\n  int n, m; std::cin &gt;&gt; n &gt;&gt; m;\n  std::cout &lt;&lt; gcd(n, m) &lt;&lt; '\\n'; // OK. It is computed at run-time.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#constexpr-member-functions","title":"<code>constexpr</code> member functions","text":"<p>Member functions may also be <code>constexpr</code>. This is particularly useful for some very simple classes:</p> <pre><code>class StringView { // The 'StringView' class in lecture 27.\n  const char *mStart{nullptr};\n  std::size_t mLength{0};\npublic:\n  // constructors\n  constexpr StringView(const char *cstr);\n  constexpr StringView(const std::string &amp;str);\n  // length\n  constexpr std::size_t size() const { return mLength; }\n  constexpr bool empty() const { return mStart; }\n  // searching\n  constexpr std::size_t find(char c, std::size_t pos = 0) const;\n  // ...\n};\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#evolution-of-constexpr-functions","title":"Evolution of <code>constexpr</code> functions","text":"<p><code>constexpr</code> was first introduced in C++11, with many restrictions:</p> <ul> <li>A single <code>return</code> statement only. No loops or branches.</li> <li><code>constexpr</code> member functions are implicitly <code>const</code>: They cannot modify the data members.</li> <li><code>virtual</code> functions cannot be <code>constexpr</code>.</li> <li>Very little standard library support. </li> <li>......</li> </ul> <p>At that time, it was almost Turing-complete.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#evolution-of-constexpr-functions_1","title":"Evolution of <code>constexpr</code> functions","text":"<p>In C++14:</p> <ul> <li>Multiple statements, loops and branches are allowed.</li> <li><code>constexpr</code> member functions are no longer implicitly <code>const</code>.</li> <li><code>constexpr</code> lambdas are still not yet allowed.</li> <li>Definitely Turing-complete.</li> </ul> <p>In C++17:</p> <ul> <li>Much more standard library support: A lot more functions are made <code>constexpr</code> since C++17.</li> <li>Lambdas are automatically <code>constexpr</code> when it can be.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#evolution-of-constexpr-functions_2","title":"Evolution of <code>constexpr</code> functions","text":"<p>C++20: A huge step!</p> <ul> <li><code>constexpr</code> functions can perform dynamic memory allocations!</li> <li>Memory allocated at compile-time must also be released at compile-time.</li> <li>Destructors can be <code>constexpr</code>!</li> <li>Standard library containers like <code>std::vector</code>, <code>std::string</code> can be <code>constexpr</code>!</li> <li>Standard library algorithms are <code>constexpr</code>!</li> <li><code>virtual</code> functions can be <code>constexpr</code>!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#c20-constexpr-support-in-the-standard-library","title":"C++20: <code>constexpr</code> support in the standard library","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nconstexpr int find_or_42(const std::vector&lt;int&gt; &amp;vec, int target) {\n  auto found = std::ranges::find(vec, target); // compile-time search\n  return found == vec.end() ? 42 : *found;\n}\n\nint main() {\n  // 'vec' is initialized in compile-time!\n  constexpr auto result_1 = find_or_42({1, 4, 2, 8, 5, 7}, 10); // 42\n  constexpr auto result_2 = find_or_42({2, 3, 5, 7}, 3);        // 3\n  static_assert(result_1 == 42);\n  static_assert(result_2 == 3);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#constexpr-numeric-functions","title":"<code>constexpr</code> numeric functions","text":"<p>Since C++23, some simple numeric functions in <code>&lt;cmath&gt;</code>, like <code>abs</code>, <code>ceil</code>, <code>floor</code>, <code>trunc</code>, <code>round</code>, ... are <code>constexpr</code>.</p> <p>Since C++26, the power, square/cubic root, trigonometric, hyperbolic, exponential and logarithmic functions are all <code>constexpr</code>!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#constexpr-functions-are-pure","title":"<code>constexpr</code> functions are pure","text":"<p>Pure functions (mathematical functions):</p> <ul> <li>Produce the same result when given the same arguments.</li> <li>Have no side effects. They cannot modify the value of variables outside them.</li> <li>Don't change the state of the program.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#consteval-immediate-functions","title":"<code>consteval</code>: Immediate functions","text":"<p><code>consteval</code> generates an immediate function.</p> <ul> <li>Every call of an immediate function generates a constant expression that is executed at compile-time.</li> </ul> <p><code>consteval</code></p> <ul> <li>cannot be applied to destructors.</li> <li>has the same requirements as a <code>constexpr</code> function.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#consteval-immediate-functions_1","title":"<code>consteval</code>: Immediate functions","text":"<ul> <li><code>constexpr</code>: potentially executed at compile-time.</li> <li><code>consteval</code>: must be executed at compile-time.</li> </ul> <pre><code>consteval int sqr(int n) { return n * n; }\nconstexpr int r = sqr(100); // OK.\nint x = 100;     // 'x' is not a constant expression!\nint r2 = sqr(x); // Error: 'sqr' must be called with constant expressions.\n</code></pre> <p>Note: A non-<code>const</code> variable is not treated as a constant expression, even if initialized from a constant expression.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#concept-and-constraints","title":"<code>concept</code> and constraints","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#motivating-example-sorting-a-stdlist","title":"Motivating example: sorting a <code>std::list</code>.","text":"<p>How should we sort a <code>std::list</code>?</p> <pre><code>std::list&lt;int&gt; l = some_list();\nstd::sort(l.begin(), l.end());  // Is this correct?\n</code></pre> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#motivating-example-sorting-a-stdlist_1","title":"Motivating example: sorting a <code>std::list</code>.","text":"<p>How should we sort a <code>std::list</code>?</p> <pre><code>std::list&lt;int&gt; l = some_list();\nstd::sort(l.begin(), l.end());  // No! We should use 'l.sort()'.\n</code></pre> <p>Ooops! <code>std::sort</code> requires a pair of RandomAccessIterators, but <code>std::list&lt;T&gt;::iterator</code> is not.</p> <ul> <li>But how can I understand the output of the compiler? It is complaining about \"Invalid operands to <code>operator-</code>\" ......</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#motivating-example-sorting-a-stdlist_2","title":"Motivating example: sorting a <code>std::list</code>.","text":"<p>Let's look at how <code>std::sort</code> is declared:</p> <pre><code>template &lt;typename Iterator, typename Pred&gt;\nvoid sort(Iterator begin, Iterator end, Pred compare);\n</code></pre> <p><code>Iterator</code> is just a type deduced from the argument without any restrictions!</p> <ul> <li>In fact, this declaration accepts anything we pass to it.</li> <li>Errors can only be reported inside the function body, which might be in the form of \"no match for ......\".</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#constraining-the-template-arguments","title":"Constraining the template arguments","text":"<pre><code>template &lt;typename Iterator, typename Pred&gt;\nvoid sort(Iterator begin, Iterator end, Pred compare);\n</code></pre> <p>Can we declare the function with some constraints on the type <code>Iterator</code>?</p> <ul> <li>We need something like</li> </ul> <p><code>cpp   template &lt;RandomAccessIterator Iterator, typename Pred&gt;   void sort(Iterator begin, Iterator end, Pred compare);</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#concept","title":"<code>concept</code>","text":"<p>A <code>concept</code> is a named set of requirements often used to constrain the template arguments.</p> <p>Examples:</p> <pre><code>template &lt;typename T&gt;\nconcept movable = std::is_object_v&lt;T&gt; &amp;&amp;\n                  std::move_constructible&lt;T&gt; &amp;&amp;\n                  std::assignable_from&lt;T &amp;, T&gt; &amp;&amp;\n                  std::swappable&lt;T&gt;;\n\ntemplate &lt;typename T&gt;\nconcept Incrementable = requires (T x) {\n  { x++ } -&gt; std::same_as&lt;T&gt;;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#example-constrained-algorithms","title":"Example: Constrained algorithms","text":"<p>The C++20 algorithms in <code>std::ranges</code> have well-defined constraints on the arguments:</p> <pre><code>template &lt;std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,\n          typename Comp = ranges::less, class Proj = std::identity&gt;\n  requires std::sortable&lt;I, Comp, Proj&gt;\nconstexpr I sort(I first, S last, Comp comp = {}, Proj proj = {});\n\ntemplate&lt;ranges::random_access_range R, typename Comp = ranges::less,\n          class Proj = std::identity&gt;\n  requires std::sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;\nconstexpr ranges::borrowed_iterator_t&lt;R&gt;\n    sort(R&amp;&amp; r, Comp comp = {}, Proj proj = {});\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#example-constrained-algorithms_1","title":"Example: Constrained algorithms","text":"<p>This time, the compiler will produce some human-readable output on violation of the requirements:</p> <pre><code>std::list&lt;int&gt; l = some_list();\nstd::ranges::sort(l);\n</code></pre> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#example-compile-time-polymorphism","title":"Example: Compile-time polymorphism","text":"Run-time polymorphism:  - \"Shape\" is a general concept, so we define an abstract base class.   <pre><code>struct Shape {\n  virtual void draw() const = 0;\n  virtual ~Shape() = default;\n};\nstruct Rectangle : Shape {\n  void draw() const override;\n};\nstruct Circle : Shape {\n  void draw() const override;\n};\nvoid drawStuff(const Shape &amp;s) {\n  s.draw();\n}\n</code></pre>   Compile-time polymorphism:  - `Shape` is a `concept`!   <pre><code>template &lt;typename T&gt;\nconcept Shape = requires(const T x) {\n  x.draw();\n};\nstruct Rectangle {\n  void draw() const; // non-virtual\n};\nstruct Circle {\n  void draw() const; // non-virtual\n};\ntemplate &lt;Shape T&gt;\nvoid drawStuff(const T &amp;s) {\n  s.draw();\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#how-concept-and-requires-benefit-template-code","title":"How <code>concept</code> and <code>requires</code> benefit template code","text":"<p>Without the C++20 <code>concept</code> and <code>requires</code>, we need to write the requirements in a \"hacky\" way through SFINAE (Substitution Failure Is Not An Error):</p> <pre><code>template &lt;typename T, typename = std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;&gt;\nvoid increment(T &amp;x) { ++x; }\n</code></pre> <p>With C++20:</p> <pre><code>template &lt;std::integral T&gt;\nvoid increment(T &amp;x) { ++x; }\n</code></pre> <p>Or even simpler:</p> <pre><code>void increment(std::integral auto &amp;x) { ++x; }\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#summary","title":"Summary","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#the-past","title":"The past","text":"<p>Back to 1979, the Bell Labs: C with Classes made by Bjarne Stroustrup.</p> <ul> <li>An object-oriented C with the ideas of \"class\" from Simula (and several other languages).</li> <li>Member functions, derived classes, constructors and destructors, protection mechanisms (<code>public</code>, <code>private</code>, <code>friend</code>), copy control through <code>operator=</code>, ...</li> <li>Better syntax, better type checking, ...</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#the-past_1","title":"The past","text":"<p>After C with Classes was seen as a \"medium success\" by Stroustrup, he moved on to make a better new language - C++ was born (1983).</p> <ul> <li>Virtual functions, overloading, references, <code>const</code>, type checking, ...</li> <li>Templates, exceptions, RTTI, namespaces, STL were added in the 1990s.</li> </ul> <p>By the year 1998, C++ had become matured and standardized with the four major parts (Effective C++ Item 1):</p> <ul> <li>C</li> <li>Object-Oriented C++</li> <li>Template C++</li> <li>The STL</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#entering-modern-c","title":"Entering Modern C++","text":"<p>A huge step since 2011:</p> <ul> <li>Rvalue references, move semantics, variadic templates, perfect forwarding</li> <li>Better template metaprogramming support</li> <li>Smart pointers</li> <li><code>auto</code> and <code>decltype</code>: More benefit from the static type system</li> <li>Lambdas, <code>std::function</code> and <code>std::bind</code>: Functional support</li> <li>The concurrency library (<code>std::thread</code>, <code>std::mutex</code>, <code>std::atomic</code>, ...)</li> <li><code>constexpr</code>: Support for more straightforward compile-time computations.</li> <li>......</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#evolution-since-c11","title":"Evolution since C++11","text":"<p>More specialized library facilities:</p> <ul> <li><code>optional</code>, <code>any</code>, <code>variant</code>, <code>tuple</code></li> <li><code>filesystem</code>: Standardized filesystem library</li> <li><code>regex</code>: The regular expression library</li> <li><code>string_view</code>: Heading towards the C++20 <code>views</code> and <code>ranges</code></li> </ul> <p>More compile-time computation support:</p> <ul> <li>More restrictions on <code>constexpr</code> functions and  <code>auto</code> deduction are removed.</li> <li>Class Template Argument Deduction (CTAD)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#c20-is-historic","title":"C++20 is historic!","text":"<p>CppCon2021 Talk by Bjarne Stroustrup: C++20: Reaching the aims of C++</p> <p>C++20 is the first C++ standard that delivers on virtually all the features that Bjarne Stroustrup dreamed of in The Design and Evolution of C++ in 1994.</p> <ul> <li>Coroutines (Talk)</li> <li>Concepts and requirements (<code>concept</code>, <code>requires</code>) (Talk)</li> <li>Modules (Talk) (Talk on the implementation by MSVC)</li> <li>Ranges library</li> <li>Formatting library</li> <li>Three-way comparison (<code>operator&lt;=&gt;</code>, <code>std::partial_ordering</code>, ...)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#future","title":"Future","text":"<ul> <li>Static reflection and metaprogramming (Talk) (P2237R0) (P1240R1) (P2320R0)</li> <li>Metaclasses: Generative C++ (P0707R3)</li> <li>Pattern matching (Talk) (Herb Sutter's <code>cppfront</code> project)</li> <li>Structured concurrency support (executors) (Talk) (P2300R6)</li> <li>Internal representation of C++ code suitable for analysis (Talk) (GitHub Page)</li> <li>......</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l28/l28.html#goodbye-cs100","title":"Goodbye CS100","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html","title":"CS100 Lecture 3","text":"<p>Operators and Control Flow I</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#contents","title":"Contents","text":"<ul> <li>Operators</li> <li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></li> <li>Compound assignment operators</li> <li>Signed integer overflow</li> <li><code>++</code> and <code>--</code></li> <li>Control flow</li> <li><code>if</code>-<code>else</code></li> <li><code>while</code></li> <li><code>for</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#operators","title":"Operators","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#the-calculator","title":"The calculator","text":"<p>Accept input of the form <code>x op y</code>, where <code>x</code> and <code>y</code> are floating-point numbers and <code>op</code> \\(\\in\\{\\) <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, <code>'/'</code> \\(\\}\\). Print the result.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  double x, y;\n  char op;\n  scanf(\"%lf %c %lf\", &amp;x, &amp;op, &amp;y);\n  if (op == '+')\n    printf(\"%lf\\n\", x + y);\n  else if (op == '-')\n    printf(\"%lf\\n\", x - y);\n</code></pre> <pre><code>  else if (op == '*')\n    printf(\"%lf\\n\", x * y);\n  else if (op == '/')\n    printf(\"%lf\\n\", x / y);\n  else\n    printf(\"Invalid operator.\\n\");\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#overview-of-arithmetic-operators","title":"Overview of arithmetic operators","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#-","title":"<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>","text":"<ul> <li><code>+</code> and <code>-</code> have two versions: unary (<code>+a</code>, <code>-a</code>) and binary (<code>a+b</code>, <code>a-b</code>).</li> <li>The unary <code>+</code>/<code>-</code> and binary <code>+</code>/<code>-</code> are different operators, although they use the same notation.</li> <li>Operator precedence:</li> </ul> <p>\\(\\{\\) unary <code>+</code>, unary <code>-</code> \\(\\}&gt;\\{\\) <code>*</code>, <code>/</code>, <code>%</code> \\(\\}&gt;\\{\\) binary <code>+</code>, binary <code>-</code> \\(\\}\\)</p> <p>e.g. <code>a + b * c</code> is interpreted as <code>a + (b * c)</code>, instead of <code>(a + b) * c</code>.</p> <p>\\(\\Rightarrow\\) We will talk more about operator precedence later.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#binary-and","title":"Binary <code>+</code>, <code>-</code> and <code>*</code>, <code>/</code>","text":"<p><code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code></p> <p>Before the evaluation of such an expression, the operands (<code>a</code>, <code>b</code>) undergo a sequence of type conversions.</p> <ul> <li>The detailed rules of the conversions are very complex,</li> <li>including promotions, conversions between <code>signed</code> and <code>unsigned</code> types, conversions between integers and floating-point types, etc.</li> <li>We only need to remember some common ones.</li> <li>In the end, the operands will be converted to a same type, denoted <code>T</code>. The result type is also <code>T</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#binary-and_1","title":"Binary <code>+</code>, <code>-</code> and <code>*</code>, <code>/</code>","text":"<p><code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code></p> <p>If any one operand is of floating-point type and the other is an integer, the integer will be implicitly converted to that floating-point type.</p> <p>Example:</p> <pre><code>double pi = 3.14;\nint diameter = 20;\nWhatType c = pi * diameter; // What is the type of this result?\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#binary-and_2","title":"Binary <code>+</code>, <code>-</code> and <code>*</code>, <code>/</code>","text":"<p><code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code></p> <p>If any one operand is of floating-point type and the other is an integer, the integer will be implicitly converted to that floating-point type.</p> <p>Example:</p> <pre><code>double pi = 3.14;\nint diameter = 20;\ndouble c = pi * diameter; // 62.8\n</code></pre> <p>The value of <code>diameter</code> is implicitly converted to a value of type <code>double</code>. Then, a floating-point multiplication is performed, yielding a result of type <code>double</code>.</p> <p>* Does this rule make sense?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#binary-and_3","title":"Binary <code>+</code>, <code>-</code> and <code>*</code>, <code>/</code>","text":"<p><code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code></p> <p>If any one operand is of floating-point type and the other is an integer, the integer will be implicitly converted to that floating-point type.</p> <p>Example:</p> <pre><code>double pi = 3.14;\nint diameter = 20;\ndouble c = pi * diameter; // 62.8\n</code></pre> <p>The value of <code>diameter</code> is implicitly converted to a value of type <code>double</code>. Then, a floating-point multiplication is performed, yielding a result of type <code>double</code>.</p> <p>* Does this rule make sense? - Yes, because \\(\\mathbb Z\\subseteq\\mathbb R\\).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#binary-and_4","title":"Binary <code>+</code>, <code>-</code> and <code>*</code>, <code>/</code>","text":"<p><code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code></p> <p>If any one operand is of floating-point type and the other is an integer, the integer will be implicitly converted to that floating-point type, and the result type is that floating-point type.</p> <p>Similarly, if the operands are of types <code>int</code> and <code>long long</code>, the <code>int</code> value will be implicitly converted to <code>long long</code>, and the result type is <code>long long</code>. \\({}^{\\textcolor{red}{1}}\\)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#division-a-b","title":"Division: <code>a / b</code>","text":"<p>Assume <code>a</code> and <code>b</code> are of the same type <code>T</code> (after conversions as mentioned above). - Then, the result type is also <code>T</code>.</p> <p>Two cases:</p> <ul> <li>If <code>T</code> is a floating-point type, this is a floating-point division.</li> <li>If <code>T</code> is an integer type, this is an integer division.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#division-a-b_1","title":"Division: <code>a / b</code>","text":"<p>Two cases:</p> <ul> <li>If <code>T</code> is a floating-point type, this is a floating-point division.</li> <li>The result is no surprising.</li> <li>If <code>T</code> is an integer type, this is an integer division.</li> <li>The result is truncated towards zero (since C99 and C++11) \\({}^{\\textcolor{red}{2}}\\).</li> <li>What is the result of <code>3 / -2</code>?</li> </ul> <p>Let <code>a</code> and <code>b</code> be two integers.</p> <ul> <li>What is the difference between <code>a / 2</code> and <code>a / 2.0</code>?</li> <li>What does <code>(a + 0.0) / b</code> mean? What about <code>1.0 * a / b</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#division-a-b_2","title":"Division: <code>a / b</code>","text":"<p>If <code>T</code> is an integer type, this is an integer division.   - The result is truncated towards zero (since C99 and C++11) \\({}^{\\textcolor{red}{2}}\\).   - What is the result of <code>3 / -2</code>?     - <code>-1.5</code> truncated towards zero, which is <code>-1</code>.</p> <p>What is the difference between <code>a / 2</code> and <code>a / 2.0</code>?   - <code>a / 2</code> yields an integer, while <code>a / 2.0</code> yields a <code>double</code>.</p> <p>What does <code>(a + 0.0) / b</code> mean? What about <code>1.0 * a / b</code>?   - Both use floating-point division to compute \\(\\dfrac ab\\). The floating-point numbers <code>0.0</code> and <code>1.0</code> here cause the conversion of the other operands.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#remainder-a-b","title":"Remainder: <code>a % b</code>","text":"<p>Example: <code>15 % 4 == 3</code>.</p> <p><code>a</code> and <code>b</code> must have integer types.</p> <p>If <code>a</code> is negative, is the result negative? What if <code>b</code> is negative? What if both are negative?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#remainder-a-b_1","title":"Remainder: <code>a % b</code>","text":"<p>Example: <code>15 % 4 == 3</code>.</p> <p><code>a</code> and <code>b</code> must have integer types.</p> <p>~~If <code>a</code> is negative, is the result negative? What if <code>b</code> is negative? What if both are negative?~~</p> <p>For any integers <code>a</code> and <code>b</code>, the following always holds:</p> <pre><code>(a / b) * b + (a % b) == a\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#compound-assignment-operators","title":"Compound assignment operators","text":"<p><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></p> <ul> <li><code>a op= b</code> is equivalent to <code>a = a op b</code>.</li> <li>e.g. <code>x *= 2</code> is equivalent to <code>x = x * 2</code>.</li> <li>[Best practice] Learn to use these operators, to make your code clear and simple.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#signed-integer-overflow","title":"Signed integer overflow","text":"<p>If a signed integer type holds a value that is not in the valid range, overflow is caused.</p> <p>Suppose <code>int</code> is 32-bit and <code>long long</code> is 64-bit.</p> <p>Do the following computations cause overflow?</p> <pre><code>int ival = 100000; long long llval = ival;\nint result1 = ival * ival;\nlong long result2 = ival * ival;\nlong long result3 = llval * ival;\nlong long result4 = llval * ival * ival;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#signed-integer-overflow_1","title":"Signed integer overflow","text":"<p>Suppose <code>int</code> is 32-bit and <code>long long</code> is 64-bit.</p> <p>Do the following computations cause overflow?</p> <pre><code>int ival = 100000; long long llval = ival;\nint result1 = ival * ival;               // (1) overflow\nlong long result2 = ival * ival;         // (2) overflow\nlong long result3 = llval * ival;        // (3) not overflow\nlong long result4 = llval * ival * ival; // (4) not overflow\n</code></pre> <p>(1) \\(\\left(10^5\\right)^2=10^{10}&gt;2^{31}-1\\).</p> <p>(2) The result type of the multiplication <code>ival * ival</code> is <code>int</code>, which causes overflow. This is not affected by the type of <code>result2</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#signed-integer-overflow_2","title":"Signed integer overflow","text":"<p>Suppose <code>int</code> is 32-bit and <code>long long</code> is 64-bit.</p> <p>Do the following computations cause overflow?</p> <pre><code>int ival = 100000; long long llval = ival;\nint result1 = ival * ival;               // (1) overflow\nlong long result2 = ival * ival;         // (2) overflow\nlong long result3 = llval * ival;        // (3) not overflow\nlong long result4 = llval * ival * ival; // (4) not overflow\n</code></pre> <p>(3) Since <code>llval</code> is of type <code>long long</code>, the value of <code>ival</code> will be implicitly converted to <code>long long</code>, and then the multiplication yields a <code>long long</code> value.</p> <p>(4) <code>*</code> is left-associative, so the expression <code>a * b * c</code> is interpreted as <code>(a * b) * c</code>.</p> <p>\\(\\Rightarrow\\) We will talk about associativity in later lectures.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#undefined-behavior","title":"Undefined behavior","text":"<p>Signed integer overflow is undefined behavior: There are no restrictions on the behavior of the program. Compilers are not required to diagnose undefined behavior (although many simple situations are diagnosed), and the compiled program is not required to do anything meaningful.</p> <ul> <li>It may yield some garbage values, or zero, or anything else;</li> <li>or, this statement may be removed if the compiler is clever enough;</li> <li>or, the program may crash;</li> <li>or, any other results beyond imagination.</li> </ul> <p>\\(\\Rightarrow\\) More on undefined behaviors in recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#unsigned-integers-never-overflow","title":"Unsigned integers never overflow","text":"<p>Unsigned integer arithmetic is always performed modulo \\(2^n\\), where \\(n\\) is the number of bits in that integer type.</p> <p>For example, for <code>unsigned int</code> (assuming it is 32-bit) - adding one to \\(2^{32}-1\\) gives \\(0\\) because \\(2^{32}\\equiv 0\\pmod{2^{32}}\\), and - subtracting one from \\(0\\) gives \\(2^{32}-1\\) because \\(-1\\equiv 2^{32}-1\\pmod{2^{32}}\\).</p> <p>* \"wrap-around\"</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#incrementdecrement-operators","title":"Increment/decrement operators","text":"<p>Unary operators that increment/decrement the value of a variable by <code>1</code>.</p> <p>Postfix form: <code>a++</code>, <code>a--</code></p> <p>Prefix form: <code>++a</code>, <code>--a</code></p> <ul> <li><code>a++</code> and <code>++a</code> increment the value of <code>a</code> by <code>1</code>.</li> <li><code>a--</code> and <code>--a</code> decrement the value of <code>a</code> by <code>1</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#incrementdecrement-operators_1","title":"Increment/decrement operators","text":"<p>Unary operators that increment/decrement the value of a variable by <code>1</code>.</p> <p>Postfix form: <code>a++</code>, <code>a--</code></p> <p>The result of the postfix increment/decrement operators is the value of <code>a</code> before incrementation/decrementation.</p> <p>* What does \"result\" mean?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#incrementdecrement-operators_2","title":"Increment/decrement operators","text":"<p>Unary operators that increment/decrement the value of a variable by <code>1</code>.</p> <p>Postfix form: <code>a++</code>, <code>a--</code></p> <p>The result of the postfix increment/decrement operators is the value of <code>a</code> before incrementation/decrementation.</p> <pre><code>int x = 42;\nprintf(\"%d\\n\", x++); // x becomes 43, but 42 is printed.\nint y = x++; // y is initialized with 43. x becomes 44.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#incrementdecrement-operators_3","title":"Increment/decrement operators","text":"<p>Unary operators that increment/decrement the value of a variable by <code>1</code>.</p> <p>Prefix form: <code>++a</code>, <code>--a</code></p> <p>The result of the prefix increment/decrement operators is the value of <code>a</code> after incrementation/decrementation.</p> <pre><code>int x = 42;\nprintf(\"%d\\n\", ++x); // x becomes 43, and 43 is printed.\nint y = ++x; // y is initialized with 44. x becomes 44.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#control-flow","title":"Control flow","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#if-else","title":"<code>if</code>-<code>else</code>","text":"<p>Conditionally executes some code.</p> <p>Syntax:</p> <ul> <li>(1) <code>if (condition) statementT</code></li> <li>(2) <code>if (condition) statementT else statementF</code></li> </ul> <p>where <code>condition</code> is an expression of arithmetic type or pointer type.</p> <p>\\(\\Rightarrow\\) We will talk about pointers in later lectures.</p> <p>If <code>condition</code> compares not equal to the integer zero, <code>statementT</code> is executed.</p> <p>In (2), if <code>condition</code> compares equal to the integer zero, <code>statementF</code> is executed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#if-else_1","title":"<code>if</code>-<code>else</code>","text":"<ul> <li>(1) <code>if (condition) statementT</code></li> <li>(2) <code>if (condition) statementT else statementF</code></li> </ul> <p><code>statementT</code>, <code>statementF</code>: Either a statement or a block (any number of statements surrounded by <code>{}</code>). - If more than one statements are to be executed, they must be surrounded with a pair of braces <code>{}</code>.</p> <pre><code>int i = 42;\nif (i == 42)\n  printf(\"hello\");\n  printf(\"world\\n\"); // This is NOT a part of statementT!\n                     // This code is incorrectly indented.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#if-else_2","title":"<code>if</code>-<code>else</code>","text":"<ul> <li>(1) <code>if (condition) statementT</code></li> <li>(2) <code>if (condition) statementT else statementF</code></li> </ul> <p><code>statementT</code>, <code>statementF</code>: Either a statement or a block (any number of statements surrounded by <code>{}</code>). - If more than one statements are to be executed, they must be surrounded with a pair of braces <code>{}</code>.</p> <pre><code>int i = 42;\nif (i == 42) {\n  printf(\"hello\");\n  printf(\"world\\n\");\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#the-calculator-example","title":"The calculator example","text":"<pre><code>double x, y;\nchar op;\nscanf(\"%lf %c %lf\", &amp;x, &amp;op, &amp;y);\nif (op == '+') {\n  printf(\"%lf + %lf == %lf\\n\", x, y, x + y);\n} else if (op == '-') {\n  printf(\"%lf - %lf == %lf\\n\", x, y, x - y);\n} else if (op == '*') {\n  printf(\"%lf * %lf == %lf\\n\", x, y, x * y);\n} else if (op == '/') {\n  printf(\"%lf / %lf == %lf\\n\", x, y, x / y);\n} else {\n  printf(\"Unknown operator!\\n\");\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#the-calculator-example_1","title":"The calculator example","text":"<p>If there is only one statement, the braces can be omitted.</p> <pre><code>double x, y;\nchar op;\nscanf(\"%lf %c %lf\", &amp;x, &amp;op, &amp;y);\nif (op == '+')\n  printf(\"%lf + %lf == %lf\\n\", x, y, x + y);\nelse if (op == '-')\n  printf(\"%lf - %lf == %lf\\n\", x, y, x - y);\nelse if (op == '*')\n  printf(\"%lf * %lf == %lf\\n\", x, y, x * y);\nelse if (op == '/')\n  printf(\"%lf / %lf == %lf\\n\", x, y, x / y);\nelse\n  printf(\"Unknown operator!\\n\");\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#the-calculator-example_2","title":"The calculator example","text":"<p>Nested <code>if</code> statements are possible:</p> <pre><code>double x, y;\nchar op;\nscanf(\"%lf %c %lf\", &amp;x, &amp;op, &amp;y);\nif (op == '+')\n  printf(\"%lf + %lf == %lf\\n\", x, y, x + y);\nelse if (op == '-')\n  printf(\"%lf - %lf == %lf\\n\", x, y, x - y);\nelse if (op == '*')\n  printf(\"%lf * %lf == %lf\\n\", x, y, x * y);\nelse if (op == '/') {\n  if (y == 0)\n    printf(\"Error: division by zero.\\n\");\n  else\n    printf(\"%lf / %lf == %lf\\n\", x, y, x / y);\n} else\n  printf(\"Unknown operator!\\n\");\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#dangling-else","title":"Dangling <code>else</code>","text":"<p>The <code>else</code> is always associated with the closest preceding <code>if</code>.</p> <pre><code>if (i == 1)\n  if (j == 2)\n    printf(\"aaa\\n\");\nelse // Incorrectly indented! This `else` is associated with `if (j == 2)`.\n  printf(\"bbb\\n\");\n</code></pre> <p>If you want this <code>else</code> to be associated with <code>if (i == 1)</code>, add a pair of braces.</p> <pre><code>if (i == 1) {\n  if (j == 2)\n    printf(\"aaa\\n\");\n} else\n  printf(\"bbb\\n\");\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#the-formatter-tells-you-the-truth","title":"The formatter tells you the truth.","text":"<p>Unlike Python, indentations are not part of the C syntax. The following code is completely legal, but with extremely low readability.</p> <pre><code>int a,b;scanf(\"%d%d\",&amp;a,&amp;b);int s=a+b;printf(\"%d\\n\",\ns);if(a==1)if(b==2)printf(\"aaa\\n\");else printf(\"b\\n\");\n</code></pre> <p>[Best practice] Use a formatter! If you use VSCode, press Shift+Alt+F (Windows), \u21e7\u2325F (MacOS) or Ctrl+Shift+I (Linux) to format the code. - Other editors may also have this functionality.</p> <p>The formats are customizable. Explore it on your own if you are interested.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#while","title":"<code>while</code>","text":"Executes some code repeatedly under certain condition.  Syntax:  ```while (condition) loop_body```  where `condition` is an expression of arithmetic type or pointer type, and `loop_body` is a statement or a block."},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#while_1","title":"<code>while</code>","text":"<p>Read an integer <code>n</code>, followed by <code>n</code> integers. Print the sum of the <code>n</code> integers.</p> <pre><code>int n;\nscanf(\"%d\", &amp;n);\nint sum = 0;\nwhile (n &gt; 0) {\n  int x;\n  scanf(\"%d\", &amp;x);\n  sum += x;\n  --n;\n}\nprintf(\"%d\\n\", sum);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#while_2","title":"<code>while</code>","text":"<pre><code>while (n &gt; 0) {\n  // loop body\n  --n;\n}\n</code></pre> <p>How many times is this loop body executed?</p> <p>After the loop, what is the value of <code>n</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#while_3","title":"<code>while</code>","text":"<pre><code>while (n &gt; 0) {\n  // loop body\n  --n;\n}\n</code></pre> <p>How many times is this loop body executed? - <code>n</code>.</p> <p>After the loop, what is the value of <code>n</code>? - <code>0</code>, which makes <code>n &gt; 0</code> not satisfied.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#while_4","title":"<code>while</code>","text":"<p>A simpler and common way to write this loop:</p> <pre><code>while (n--) {\n  // loop body\n}\n</code></pre> <p>How many times is this loop body executed?</p> <p>After the loop, what is the value of <code>n</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#while_5","title":"<code>while</code>","text":"<p>A simpler and common way to write this loop:</p> <pre><code>while (n--) {\n  // loop body\n}\n</code></pre> <p>How many times is this loop body executed? - <code>n</code>.</p> <p>After the loop, what is the value of <code>n</code>? - <code>-1</code>. When <code>n == 0</code>, the result of <code>n--</code> is <code>0</code>, which not only makes the loop terminated but also decrements <code>n</code> by <code>1</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#break","title":"<code>break</code>","text":"<p><code>break;</code> causes the enclosing loop to terminate.</p> <pre><code>while (n--) {\n  int x;\n  scanf(\"%d\", &amp;x);\n  // If x == 42, the loop is terminated and control goes to (*).\n  if (x == 42)\n    break;\n  sum += x;\n}\n// (*)\nprintf(\"%d\\n\", sum);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#continue","title":"<code>continue</code>","text":"<p><code>continue;</code> causes the remaining portion of the enclosing loop body to be skipped (in the current iteration).</p> <pre><code>while (n--) {\n  int x;\n  scanf(\"%d\", &amp;x);\n  // If x == 42, the rest of the loop body is skipped and control goes to (*).\n  if (x == 42)\n    continue;\n  sum += x;\n  // (*)\n}\nprintf(\"%d\\n\", sum);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#break-vs-continue","title":"<code>break</code> vs <code>continue</code>","text":"`break`: terminates the loop.   <pre><code>while (n--) {\n  int x;\n  scanf(\"%d\", &amp;x);\n  if (x == 42)\n    break; // goto (*)\n  sum += x;\n}\n// (*)\nprintf(\"%d\\n\", sum);\n</code></pre>   `continue`: skips the rest of the loop body.   <pre><code>while (n--) {\n  int x;\n  scanf(\"%d\", &amp;x);\n  if (x == 42)\n    continue; // goto (*)\n  sum += x;\n  // (*)\n}\nprintf(\"%d\\n\", sum);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#for","title":"<code>for</code>","text":"<p>Syntax: <code>for (init_clause; condition; iteration_expr) loop_body</code></p>   - `init_clause` may be an expression or a declaration (since C99). - `condition` is an expression of arithmetic type or pointer type. It is evaluated before the loop body. - `iteration_expr` is an expression evaluated after the loop body. - `loop_body` is either a statement or a block."},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#for_1","title":"<code>for</code>","text":"<p>Typical usage: execute the body for <code>n</code> times.</p> <p>The following are equivalent.</p> <pre><code>while (n--) {\n  int x;\n  scanf(\"%d\", &amp;x);\n  sum += x;\n}\n</code></pre> <pre><code>for (int i = 0; i &lt; n; ++i) {\n  int x;\n  scanf(\"%d\", &amp;x);\n  sum += x;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#for_2","title":"<code>for</code>","text":"<p>Syntax: <code>for (init_clause; condition; iteration_expr) loop_body</code></p> <p>It is equivalent to</p> <pre><code>{\n  init_clause;\n  while (condition) {\n    loop_body\n    iteration_expr;\n  }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#for_3","title":"<code>for</code>","text":"<p>A loop with iteration variable <code>i</code> incremented by <code>2</code> every time:</p> <pre><code>for (int i = 0; i &lt; n; i += 2)\n  // ...\n</code></pre> <p>Loop until \\(\\left\\lfloor\\sqrt n\\right\\rfloor\\):</p> <pre><code>for (int i = 0; i * i &lt;= n; ++i) // We don't need sqrt.\n  // ...\n</code></pre> <p>A loop with iteration variable <code>i</code> going downward from <code>n</code> to <code>0</code>:</p> <pre><code>for (int i = n; i &gt;= 0; --i)\n  // ...\n</code></pre> <p>* Can we use <code>unsigned</code> here?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#for_4","title":"<code>for</code>","text":"<p>What will happen?</p> <pre><code>for (unsigned i = n; i &gt;= 0; --i)\n  // ...\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#for_5","title":"<code>for</code>","text":"<p>What will happen?</p> <pre><code>for (unsigned i = n; i &gt;= 0; --i)\n  // ...\n</code></pre> <p><code>i</code> is an <code>unsigned</code> integer, so <code>i &gt;= 0</code> holds forever. - When <code>i == 0</code>, <code>--i</code> makes the value of <code>i</code> become <code>4294967295</code> (if <code>unsigned</code> is 32-bit). - An unsigned integer never overflows. Unsigned integer arithmetic is performed modulo \\(2^n\\).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#for_6","title":"<code>for</code>","text":"<p>[Best practice] Always declare and initialize the iteration variable inside the <code>for</code> statement, if possible.</p>   Do not write code of the last century:   <pre><code>main() {\n  int i, j;\n  /* ... */\n  for (i = 0; i &lt; n; ++i)\n    for (j = 0; j &lt; m; ++j)\n      /* ... */\n}\n</code></pre>   Write it in a modern, standard way:   <pre><code>int main(void) {\n  // ...\n  for (int i = 0; i &lt; n; ++i)\n    for (int j = 0; j &lt; m; ++j)\n      // ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#summary","title":"Summary","text":"<p>Operators</p> <ul> <li><code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code>: <code>a</code> and <code>b</code> are converted to a common type <code>T</code> according to some rules, and the result type is also <code>T</code>.</li> <li>Integer division: The result is truncated towards zero.</li> <li>Remainder: <code>(a / b) * b + (a % b) == a</code> always holds.</li> <li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>: <code>a op= b</code> \\(\\Leftrightarrow\\) <code>a = a op b</code></li> <li>Signed integer overflow: undefined behavior.</li> <li>Unsigned integer arithmetic: modulo \\(2^n\\), never overflows.</li> <li><code>a++</code> and <code>a--</code> return the original value. <code>++a</code> and <code>--a</code> return the new value.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#summary_1","title":"Summary","text":"<p>Control flow</p> <ul> <li><code>if</code>-<code>else</code></li> <li><code>while</code>, <code>break</code>, <code>continue</code></li> <li><code>for</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#exercises","title":"Exercises","text":"<ol> <li>Write a program that reads an unknown number of integers from input until <code>0</code> is entered. Print the sum of these integers.</li> <li>Make the calculator a loop that runs repeatedly, instead of handling only one input.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l3/l3.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) Similar conversions also happen for operands with types <code>int</code> + <code>long</code>, <code>long</code> + <code>long long</code>, <code>unsigned</code> + <code>unsigned long long</code>, etc. However, if any operand is of type with rank less than rank of <code>int</code>, integer promotion is first applied. For example, if <code>a</code> is of type <code>signed char</code> and <code>b</code> is of type <code>short</code>, both of them are converted to <code>int</code> first and the result type is <code>int</code>, not <code>short</code>.</p> <p>Integer promotion is also applied to the operand of unary <code>+</code> and <code>-</code>. For example, <code>+x</code> is of type <code>int</code> if <code>x</code> is a <code>short</code> variable.</p> <p>\\({}^{\\textcolor{red}{2}}\\) Before C99 and C++11, the result of integer division is rounded in an implementation-defined direction.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html","title":"CS100 Lecture 4","text":"<p>Operators and Control Flow II, Functions</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#contents","title":"Contents","text":"<ul> <li>Operators</li> <li>Operator precedence, associativity and evaluation order</li> <li>Comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code></li> <li>Logical operators <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li> <li>Conditional operator <code>?:</code></li> <li>Assignment operator <code>=</code></li> <li>Control Flow</li> <li><code>do</code>-<code>while</code></li> <li><code>switch</code>-<code>case</code></li> <li>Functions</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#operators","title":"Operators","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#operator-precedence","title":"Operator precedence","text":"<p>Operator precedence defines the order in which operators are bound to their arguments.</p> <p>Example: <code>*</code> and <code>/</code> have higher precedence than <code>+</code> and <code>-</code>, so <code>a + b * c</code> is interpreted as <code>a + (b * c)</code> instead of <code>(a + b) * c</code>.</p> <p>Operator precedence does not determine evaluation order.</p> <ul> <li><code>f() + g() * h()</code> is interpreted as <code>f() + (g() * h())</code>, but the order in which <code>f</code>, <code>g</code> and <code>h</code> are called is unspecified.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#associativity","title":"Associativity","text":"<p>Each operator is either left-associative or right-associative.</p> <p>Operators with the same precedence have the same associativity.</p> <p>Example: <code>+</code> and <code>-</code> are left-associative, so <code>a - b + c</code> is interpreted as <code>(a - b) + c</code>, instead of <code>a - (b + c)</code>.</p> <p>Associativity does not determine evaluation order.</p> <ul> <li><code>f() - g() + h()</code> is interpreted as <code>(f() - g()) + h()</code>, but the order in which <code>f</code>, <code>g</code> and <code>h</code> are called is unspecified.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#evaluation-order","title":"Evaluation order","text":"<p>Unless otherwise stated, the order in which the operands are evaluated is unspecified. - We will see that <code>&amp;&amp;</code>, <code>||</code> and <code>?:</code> (and also <code>,</code>, in recitations) have specified evaluation order of their operands.</p> <p>Examples: In the following expressions, it is unspecified whether <code>f</code> is called before <code>g</code>.</p> <ul> <li><code>f() + g()</code></li> <li><code>f() == g()</code></li> <li><code>some_function(f(), g())</code> (Note that the <code>,</code> here is not the comma operator.)</li> <li>...</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#evaluation-order-and-undefined-behavior","title":"Evaluation order and undefined behavior","text":"<p>Let <code>A</code> and <code>B</code> be two expressions. The behavior is undefined if</p> <ul> <li>the order in which <code>A</code> and <code>B</code> are evaluated is unspecified \\({}^{\\textcolor{red}{1}}\\), and</li> <li>both <code>A</code> and <code>B</code> modify an object, or one modifies an object and the other uses its value \\({}^{\\textcolor{red}{2}}\\).</li> </ul> <p>Examples:</p> <pre><code>i = ++i + i++; // undefined behavior\ni = i++ + 1;   // undefined behavior\nprintf(\"%d, %d\\n\", i, i++); // undefined behavior\n</code></pre> <p>Recall that undefined behavior means \"everything is possible\". We cannot make any assumptions about the behavior of the program.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#terminology-return-typevalue-of-an-operator","title":"Terminology: Return type/value of an operator","text":"<p>When it comes to \"the return type/value of an operator\", we are actually viewing the operator as a function:</p> <pre><code>int operator_plus(int a, int b) {\n  return a + b;\n}\nint operator_postfix_inc(int &amp;x) { // We must use a C++ notation here.\n  int old = x;\n  x += 1;\n  return old;\n}\n</code></pre> <p>The \"return value\" of an operator is the value of the expression it forms.</p> <p>The \"return type\" of an operator is the type of its return value.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#comparison-operators","title":"Comparison operators","text":"<p>Comparison operators are binary operators that test a condition and return <code>1</code> if that condition is logically true and <code>0</code> if it is logically false.</p>   | Operator | Operator name | | -------- | ------------- | | `a == b` | equal to      | | `a != b` | not equal to  | | `a &lt; b`  | less than     |       | Operator | Operator name            | | -------- | ------------------------ | | `a &gt; b`  | greater than             | | `a &lt;= b` | less than or equal to    | | `a &gt;= b` | greater than or equal to |     <p>For most cases, the operands <code>a</code> and <code>b</code> are also converted to a same type, just as what happens for <code>a + b</code>, <code>a - b</code>, ...</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#comparison-operators_1","title":"Comparison operators","text":"<p>Note: Comparison operators in C cannot be chained.</p> <p>Example: <code>a &lt; b &lt; c</code> is interpreted as <code>(a &lt; b) &lt; c</code> (due to left-associativity), which means to</p> <ul> <li>compare <code>(a &lt; b)</code> first, whose result is either <code>0</code> or <code>1</code>, and then</li> <li>compare <code>0 &lt; c</code> or <code>1 &lt; c</code>.</li> </ul> <p>To test \\(a&lt;b&lt;c\\), use <code>a &lt; b &amp;&amp; b &lt; c</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#logical-operators","title":"Logical operators","text":"<p>Logical operators apply standard  boolean algebra operations to their operands.</p>   | Operator | Operator name | Example    | | -------- | ------------- | ---------- | | `!`      | logical NOT   | `!a`       | | `&amp;&amp;`     | logical AND   | `a &amp;&amp; b`   | | `\\|\\|`   | logical OR    | `a \\|\\| b` |"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#logical-operators_1","title":"Logical operators","text":"<p><code>!a</code>, <code>a &amp;&amp; b</code>, <code>a || b</code></p>   Recall the boolean algebra:    | $A$   | $B$   | $\\neg A$ | $A\\land B$ | $A\\lor B$ | | ----- | ----- | -------- | ---------- | --------- | | True  | True  | False    | True       | True      | | True  | False | False    | False      | True      | | False | True  | True     | False      | True      | | False | False | True     | False      | False     |    For C logical operators:    | `a`    | `b`    | `!a` | `a &amp;&amp; b` | `a \\|\\| b` | | ------ | ------ | ---- | -------- | ---------- | | `!= 0` | `!= 0` | `0`  | `1`      | `1`        | | `!= 0` | `== 0` | `0`  | `0`      | `1`        | | `== 0` | `!= 0` | `1`  | `0`      | `1`        | | `== 0` | `== 0` | `1`  | `0`      | `0`        |"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#logical-operators_2","title":"Logical operators","text":"<p>Precedence: <code>!</code> \\(&gt;\\) comparison operators \\(&gt;\\) <code>&amp;&amp;</code> \\(&gt;\\) <code>||</code>.</p> <p>Typical example: lexicographical comparison of two pairs \\((a_1, b_1)\\) and \\((a_2,b_2)\\)</p> <pre><code>int less(int a1, int b1, int a2, int b2) {\n  return a1 &lt; a2 || (a1 == a2 &amp;&amp; b1 &lt; b2);\n}\n</code></pre> <p>The parentheses are optional here, but it improves readability.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#avoid-abuse-of-parentheses","title":"Avoid abuse of parentheses","text":"<p>Too many parentheses reduce readability:</p> <pre><code>int less(int a1, int b1, int a2, int b2) {\n  return (((a1) &lt; (a2)) || (((a1) == (a2)) &amp;&amp; ((b1) &lt; (b2))));\n  // Is this a1 &lt; b1 || (a1 == b1 &amp;&amp; a2 &lt; b2)\n  //      or (a1 &lt; b1 || a1 == b1) &amp;&amp; a2 &lt; b2 ?\n}\n</code></pre> <p>[Best practice] Use one pair of parentheses when two binary logical operators meet.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#short-circuit-evaluation","title":"Short-circuit evaluation","text":"<p><code>a &amp;&amp; b</code> and <code>a || b</code> perform short-circuit evaluation:</p> <ul> <li>For <code>a &amp;&amp; b</code>, <code>a</code> is evaluated first. If <code>a</code> compares equal to zero (is logically false), <code>b</code> is not evaluated.</li> <li>\\(\\mathrm{False}\\land p\\equiv\\mathrm{False}\\)</li> <li>For <code>a || b</code>, <code>a</code> is evaluated first. If <code>a</code> compares not equal to zero (is logically true), <code>b</code> is not evaluated.</li> <li>\\(\\mathrm{True}\\lor p\\equiv\\mathrm{True}\\)</li> </ul> <p>The evaluation order is specified!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#conditional-operator","title":"Conditional operator <code>?:</code>","text":"<p>Syntax: <code>condition ? expressionT : expressionF</code>,</p> <p>where <code>condition</code> is an expression of scalar type.</p> <p>The evaluation order is specified!</p> <ul> <li>First, <code>condition</code> is evaluated.</li> <li>If <code>condition</code> compares not equal to zero (is logically true), <code>expressionT</code> is evaluated, and the result is the value of <code>expressionT</code>.</li> <li>Otherwise (if <code>condition</code> compares equal to zero, which is logically false), <code>expressionF</code> is evaluated, and the result is the value of <code>expressionF</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#conditional-operator_1","title":"Conditional operator <code>?:</code>","text":"<p>Syntax: <code>condition ? expressionT : expressionF</code>,</p> <p>Example: <code>to_uppercase(c)</code> returns the uppercase form of <code>c</code> if <code>c</code> is a lowercase letter, or <code>c</code> itself if it is not.</p> <pre><code>char to_uppercase(char c) {\n  if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')\n    return c - ('a' - 'A');\n  else\n    return c;\n}\n</code></pre> <p>Use <code>?:</code> to rewrite it:</p> <pre><code>char to_uppercase(char c) {\n  return c &gt;= 'a' &amp;&amp; c &lt;= 'z' ? c - ('a' - 'A') : c;\n}\n</code></pre> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#conditional-operator_2","title":"Conditional operator <code>?:</code>","text":"<p>Syntax: <code>condition ? expressionT : expressionF</code></p> <p>Use it to replace some simple and short <code>if</code>-<code>else</code> statement.</p> <p>Avoid abusing it! Nested conditional operators reduces readability significantly.</p> <pre><code>int result = a &lt; b ? (a &lt; c ? a : c) : (b &lt; c ? b : c); // Um ...\n</code></pre> <p>[Best practice] Avoid more than two levels of nested conditional operators.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#assignment-operator","title":"Assignment operator <code>=</code>","text":"<p><code>lhs = rhs</code></p> <p>The assignment operator returns the value of <code>lhs</code> after assignment.</p> <p>Moreover, the assignment operator is right-associative, making it possible to write \"chained\" assignments:</p> <pre><code>int a = 0, b = 1, c = 2;\na = b = c; // interpreted as a = (b = c)\n           // Both a and b are assigned with 2.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#control-flow","title":"Control Flow","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#do-while","title":"<code>do</code>-<code>while</code>","text":"Syntax: `do loop_body while (condition);`  Executes `loop_body` repeatedly until the value of `condition` compares equal to zero (is logically **false**).  Example:   <pre><code>int i = 0;\ndo {\n  printf(\"%d\", i++);\n} while (i &lt; 5);\n</code></pre>   Output: `01234`"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#do-while_1","title":"<code>do</code>-<code>while</code>","text":"<p>Note that in each iteration, the condition is tested after the body is executed.</p> <pre><code>int i = 0;\ndo {\n  printf(\"%d\", i++);\n} while (i &lt; n);\n</code></pre> <p>Even if <code>n == 0</code>, <code>0</code> is printed. The loop body is always executed at least once.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#do-while_2","title":"<code>do</code>-<code>while</code>","text":"<p>Exercise: Rewrite a <code>do</code>-<code>while</code> loop using a <code>while</code> loop.</p> <pre><code>do {\n  // loop_body\n} while (condition);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#do-while_3","title":"<code>do</code>-<code>while</code>","text":"<p>Exercise: Rewrite a <code>do</code>-<code>while</code> loop using a <code>while</code> loop.</p> <pre><code>do {\n  // loop_body\n} while (condition);\n</code></pre> <p>Use <code>while (1)</code> and <code>break</code>:</p> <pre><code>while (1) {\n  // loop_body\n  if (!condition)\n    break;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#switch-case","title":"<code>switch</code>-<code>case</code>","text":"<p>The calculator example:</p> <pre><code>int main(void) {\n  double a, b;\n  char op;\n  scanf(\"%lf %c %lf\", &amp;a, &amp;op, &amp;b);\n  if (op == '+')\n    printf(\"%lf\\n\", a + b);\n  else if (op == '-')\n    printf(\"%lf\\n\", a - b);\n  else if (op == '*')\n    printf(\"%lf\\n\", a * b);\n  else if (op == '/')\n    printf(\"%lf\\n\", a / b);\n  else\n    printf(\"Invalid operator!\\n\");\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#switch-case_1","title":"<code>switch</code>-<code>case</code>","text":"<p>Rewrite it using <code>switch</code>-<code>case</code>:</p> <pre><code>if (op == '+')\n  printf(\"%lf\\n\", a + b);\nelse if (op == '-')\n  printf(\"%lf\\n\", a - b);\nelse if (op == '*')\n  printf(\"%lf\\n\", a * b);\nelse if (op == '/')\n  printf(\"%lf\\n\", a / b);\nelse\n  printf(\"Invalid operator: %c\\n\", op);\n</code></pre> <pre><code>switch (op) {\ncase '+':\n  printf(\"%lf\\n\", a + b); break;\ncase '-':\n  printf(\"%lf\\n\", a - b); break;\ncase '*':\n  printf(\"%lf\\n\", a * b); break;\ncase '/':\n  printf(\"%lf\\n\", a / b); break;\ndefault:\n  printf(\"Invalid operator!\\n\");\n  break;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#switch-case_2","title":"<code>switch</code>-<code>case</code>","text":"<p><code>switch (expression) { ... }</code></p> <pre><code>switch (op) {\ncase '+':\n  printf(\"%lf\\n\", a + b); break;\ncase '-':\n  printf(\"%lf\\n\", a - b); break;\ncase '*':\n  printf(\"%lf\\n\", a * b); break;\ncase '/':\n  printf(\"%lf\\n\", a / b); break;\ndefault:\n  printf(\"Invalid operator!\\n\");\n  break;\n}\n</code></pre>   - First, `expression` is evaluated. - Control finds the `case` label to which `expression` compares equal, and then goes to that label. - Starting from the selected label, **all subsequent statements are executed until a `break;` or the end of the `switch` statement is reached.** - Note that `break;` here has a special meaning."},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#switch-case_3","title":"<code>switch</code>-<code>case</code>","text":"<p><code>switch (expression) { ... }</code></p> <pre><code>switch (op) {\ncase '+':\n  printf(\"%lf\\n\", a + b); break;\ncase '-':\n  printf(\"%lf\\n\", a - b); break;\ncase '*':\n  printf(\"%lf\\n\", a * b); break;\ncase '/':\n  printf(\"%lf\\n\", a / b); break;\ndefault:\n  printf(\"Invalid operator!\\n\");\n  break;\n}\n</code></pre>   - If no `case` label is selected and `default:` is present, the control goes to the `default:` label. - `default:` is optional, and often appears in the end, though not necessarily. - `break;` is often needed. Modern compilers often warn against a missing `break;`."},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#switch-case_4","title":"<code>switch</code>-<code>case</code>","text":"<p>The expression in a <code>case</code> label must be an integer constant expression, whose value is known at compile-time, such as <code>42</code>, <code>'a'</code>, <code>true</code>, ...</p> <pre><code>int n; scanf(\"%d\", &amp;n);\nint x = 42;\nswitch (value) {\n  case 3.14: // Error: It must have an integer type.\n    printf(\"It is pi.\\n\");\n  case n:    // Error: It must be a constant expression (known at compile-time)\n    printf(\"It is equal to n.\\n\");\n  case 42:   // OK.\n    printf(\"It is equal to 42.\\n\");\n  case x:    // Error: `x` is a variable, not treated as \"constant expression\".\n    printf(\"It is equal to x.\\n\");\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#switch-case_5","title":"<code>switch</code>-<code>case</code>","text":"<p>Another example: Determine whether a letter is vowel or consonant.</p> <pre><code>switch (letter) {\n  case 'a':\n  case 'e':\n  case 'i':\n  case 'o':\n  case 'u':\n    printf(\"%c is vowel.\\n\", letter);\n    break;\n  default:\n    printf(\"%c is consonant.\\n\", letter);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#functions","title":"Functions","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#call-and-return","title":"Call and return","text":"<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\ndouble divide(int a, int b) {\n  if (b == 0) {\n    fprintf(stderr, \"Division by zero!\\n\");\n    exit(EXIT_FAILURE);\n  }\n  return 1.0 * a / b;\n}\n\nint main(void) {\n  int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n  double result = divide(x, y);\n  printf(\"%lf\\n\", result);\n  // ...\n}\n</code></pre>   - For the *call expression* `divide(x, y)`: First the arguments `x` and `y` are passed into `divide` as if the parameters are initialized ${}^{\\textcolor{red}{3}}$ as follows:    ```c   int a = x;   int b = y;   ```    Then control is transferred into the function `divide`, starting from the first statement."},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#call-and-return_1","title":"Call and return","text":"<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\ndouble divide(int a, int b) {\n  if (b == 0) {\n    fprintf(stderr, \"Division by zero!\\n\");\n    exit(EXIT_FAILURE);\n  }\n  return 1.0 * a / b;\n}\n\nint main(void) {\n  int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n  double result = divide(x, y);\n  printf(\"%lf\\n\", result);\n  // ...\n}\n</code></pre>   `return` does two things: - passes a value out to the *call site*.   - This value is the result of the **call expression**.   - Such a value does not exist if the function return type is `void`. - transfers the control to the *call site*."},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#call-and-return_2","title":"Call and return","text":"<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\ndouble divide(int a, int b) {\n  if (b == 0) {\n    fprintf(stderr, \"Division by zero!\\n\");\n    exit(EXIT_FAILURE);\n  }\n  return 1.0 * a / b;\n}\n\nint main(void) {\n  int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n  double result = divide(x, y);\n  printf(\"%lf\\n\", result);\n  // ...\n}\n</code></pre>   - The parentheses `()` in the expression `divide(x, y)` is the **function-call operator**. - Even if the function accepts no parameters, the function-call operator should not be omitted. - A statement like `f;` without the function-call operator is **valid**.   - It is a statement that has no effect, just like `5;`, `2+3;`, `;` or `{}`."},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#call-and-return_3","title":"Call and return","text":"<p>If a function has return type <code>void</code>, the function does not pass a value to the call site.</p> <p>For a non-<code>void</code> function: - A <code>return something;</code> statement must be executed to return something. - If control reaches the end of the function without a <code>return</code> statement, the return value is undefined. The behavior is undefined if such value is used.</p> <pre><code>int do_something(int i) {\n  printf(\"%d\\n\", i);\n}\n</code></pre> <pre><code>a.c: In function \u2018do_something\u2019:\na.c:5:1: warning: control reaches end of non-void function [-Wreturn-type]\n    5 | }\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#best-practice-avoid-unnecessary-if","title":"[Best practice] Avoid unnecessary <code>if</code>","text":"<pre><code>int abs_int(int x) {\n  if (x &lt; 0)\n    return -x;\n  else if (x == 0)\n    return 0;\n  else if (x &gt; 0)\n    return x;\n}\n</code></pre> <pre><code>a.c: In function abs_int:\na.c:8:1: warning: control reaches end of non-void function [-Wreturn-type]\n    8 | }\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#best-practice-avoid-unnecessary-if_1","title":"[Best practice] Avoid unnecessary <code>if</code>","text":"<p>The last <code>if (x &gt; 0)</code> is not needed:</p> <pre><code>int abs_int(int x) {\n  if (x &lt; 0)\n    return -x;\n  else if (x == 0)\n    return 0;\n  else // x &gt; 0 must hold. No need to test it\n    return x;\n}\n</code></pre> <p>It can be simplified as</p> <pre><code>int abs_int(int x) {\n  return x &lt; 0 ? -x : x;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#function-declaration-and-definition","title":"Function declaration and definition","text":"<p>A definition of a function contains the function body.</p> <pre><code>int sum(int a, int b) {\n  return a + b;\n}\n</code></pre> <p>A declaration of a function contains only its return type, its name and the types of its parameters, ended with <code>;</code>.</p> <p>The following statements declare the same function:</p> <pre><code>int sum(int, int);\nint sum(int x, int y);\nint sum(int a, int);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#function-declaration-and-definition_1","title":"Function declaration and definition","text":"<ul> <li>A function should have only one definition, but can be declared many times.</li> <li>A definition is also a declaration, since it contains all the information that a declaration has.</li> <li>When a function is called, its declaration must be present.</li> </ul> <pre><code>int sum(int, int);      // declares the function\nint main(void) {\n  int x = sum(2, 3);    // ok\n}\nint sum(int x, int y) { // gives its definition afterwards\n  return x + y;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#scopes","title":"Scopes","text":"<pre><code>int add(int x, int y) {\n  return x + y;\n}\nint square(int x) {\n  return x * x;\n}\nint main(void) {\n  int x; scanf(\"%d\", &amp;x);\n  printf(\"%d\\n\", square(x));\n  if (x == 42) {\n    int x = 35;\n    printf(\"%d\\n\", square(square(x)));\n  }\n  for (int x = 1; x &lt;= 10; ++x)\n    printf(\"%d\\n\", square(x + 1));\n  return 0;\n}\n</code></pre>   - The scopes form a tree structure: - ```   global---add          |-square          |-main---if                 |-for   ```"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#name-lookup","title":"Name lookup","text":"![](img/scopes.png)      - The scopes form a tree structure: - ```   global---add          |-square          |-main---if                 |-for   ``` - When a name `x` is referenced, the **name lookup** for `x` is performed:   - Only the declarations before the current position can be seen.   - Lookup is performed from the innermost scope to the outer scopes, until a declaration is found."},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#name-lookup_1","title":"Name lookup","text":"![](img/scopes.png)      - The scopes form a tree structure: - ```   global---add          |-square          |-main---if                 |-for   ``` - A declaration in an inner scope may hide a declaration in an outer scope that introduces the same name."},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#scopes-and-name-lookup","title":"Scopes and name lookup","text":"<p>[Best practice] Declare a variable right before the use of it. Declare it in a scope as small as possible.</p> <p>[Best practice] Don't worry about the same names in different scopes.</p> <pre><code>// The three `i`'s are local to the three loops. They will not collide.\nfor (int i = 0; i &lt; n; ++i)\n  do_something(i);\nfor (int i = 0; i &lt; n; ++i)\n  do_another_thing(i);\nif (condition()) {\n  for (int i = 0; i &lt; n; ++i)\n    do_something_else(i);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#summary","title":"Summary","text":"<p>Operators</p> <ul> <li>Precedence, associativity</li> <li>Precedence and associativity do not determine the evaluation order of operands.</li> <li>Things like <code>i = i++</code> is undefined behavior.</li> <li>Comparison operators</li> <li><code>a &lt; b &lt; c</code> is not \\(a&lt;b&lt;c\\). Use <code>a &lt; b &amp;&amp; b &lt; c</code> instead.</li> <li>Logical operators</li> <li><code>&amp;&amp;</code> and <code>||</code> are short-circuited.</li> <li>Conditional operator</li> <li>Assignment operator</li> <li>Chained assignment is allowed: <code>a = b = c</code> is interpreted as <code>a = (b = c)</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#summary_1","title":"Summary","text":"<p>Control Flow</p> <ul> <li><code>do</code>-<code>while</code> tests the condition after the body is executed.</li> <li><code>switch</code>-<code>case</code></li> <li>Don't forget to write <code>break;</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#summary_2","title":"Summary","text":"<p>Functions</p> <ul> <li>call and return</li> <li><code>()</code> is the function-call operator.</li> <li>Non-<code>void</code> function must return something.</li> <li>declaration vs definition</li> <li>scope and name lookup</li> <li>Only the declarations before the current position can be seen.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#exercise","title":"Exercise","text":"<p>Write a function <code>yes_or_no</code> that asks if the user agrees (<code>Y</code>/<code>y</code>, <code>N</code>/<code>n</code>). Repeat until the input is valid. Returns <code>1</code> if the user agrees, <code>0</code> otherwise.</p> <pre><code>int main(void) {\n  int response = yes_or_no();\n  if (response)\n    printf(\"Your response is yes.\\n\");\n  else\n    printf(\"Your response is no.\\n\");\n  return 0;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) If the evaluation order of <code>A</code> and <code>B</code> is unspecified, there are two possibilities:</p> <ol> <li>evaluations of <code>A</code> and <code>B</code> are unsequenced: they may be performed in any order and may overlap.</li> <li>evaluations of <code>A</code> and <code>B</code> are indeterminably-sequenced: they may be performed in any order but may not overlap: either <code>A</code> will be complete before <code>B</code>, or <code>B</code> will be complete before <code>A</code>.</li> </ol> <p>To constitute undefined behavior, the evaluations of <code>A</code> and <code>B</code> should be unsequenced. An example is <code>f() + g()</code> where both <code>f</code> and <code>g</code> modify a global variable: The C standard says that two functions calls are indeterminably sequenced, so <code>f() + g()</code> is not undefined behavior.</p> <p>\\({}^{\\textcolor{red}{2}}\\) Here \"an object\" is a scalar object. For example, it is okay if two unsequenced operations modify two different members of a <code>struct</code> object.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l4/l4.html#notes_1","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{3}}\\) The standard says that</p> <p>Assignment is performed to copy the value of each argument to the corresponding function parameter, ignoring any type qualifiers on the parameter type and its possibly recursive elements of members, if any.</p> <p>In short, argument passing is an assignment with type qualifiers on the parameter type ignored, instead of initialization. A post-C11 defect report DR427 proposed change of such semantics from assignment to initialization, but was closed as not-a-defect.</p> <p>In C++, this is initialization undoubtedly.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html","title":"CS100 Lecture 5","text":"<p>Variables II, Pointers and Arrays I</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#contents","title":"Contents","text":"<ul> <li>Variables</li> <li>Local <code>static</code> variables</li> <li>Initialization</li> <li><code>const</code> type qualifier</li> <li>Pointers</li> <li>Arrays</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#variables","title":"Variables","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#an-only-once-function","title":"An \"only-once\" function","text":"<p>Suppose we want to design a function that can only be called once.</p> <ul> <li>When it is called for the second time, report an error.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#an-only-once-function_1","title":"An \"only-once\" function","text":"<p>Suppose we want to design a function that should be called only once.</p> <ul> <li>When it is called for the second time, report an error.</li> </ul> <pre><code>bool start_game_called = false;\n\nvoid start_game(Player *p1, Player *p2, int difficulty, GameWorld *world) {\n  if (start_game_called)\n    report_an_error(\"You cannot start the game twice!\");\n  start_game_called = true;\n  // ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#an-only-once-function_2","title":"An \"only-once\" function","text":"<p>What if there are many such functions?</p> <pre><code>bool start_game_called = false;\nbool end_game_called = false;\nbool magic_power_used = false;\nbool special_skill_used = false;\n// ...\n</code></pre> <p>The global name space is polluted with these variables.</p> <ul> <li>Is there a way to declare these variables inside the corresponding functions?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#an-only-once-function_3","title":"An \"only-once\" function","text":"<p>This does not work. Why?</p> <pre><code>void start_game(Player *p1, Player *p2, int difficulty, GameWorld *world) {\n  bool called = false; // Note that we can use a shorter name,\n                       // because it is local to this function.\n  if (called)\n    report_an_error(\"You cannot start the game twice!\");\n  called = true;\n  // ...\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#an-only-once-function_4","title":"An \"only-once\" function","text":"<p>This does not work. Why?</p> <pre><code>void start_game(Player *p1, Player *p2, int difficulty, GameWorld *world) {\n  bool called = false; // Note that we can use a shorter name,\n                  // because it is local to this function.\n  if (called)\n    report_an_error(\"You cannot start the game twice!\");\n  called = true;\n  // ...\n}\n</code></pre> <ul> <li>Every time <code>start_game</code> is called, <code>called</code> is created and initialized to zero.</li> <li>Every time <code>start_game</code> returns, <code>called</code> is destroyed.</li> <li>We need a \"local\" variable whose lifetime is longer!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#local-static-variables","title":"Local <code>static</code> variables","text":"<pre><code>void start_game(Player *p1, Player *p2, int difficulty, GameWorld *world) {\n  static bool called = false;\n  if (called)\n    report_an_error(\"You cannot start the game twice!\");\n  called = true;\n  // ...\n}\n</code></pre> <p>The lifetime of a local <code>static</code> variable is as long as that of a global variable. (They both have static storage duration.)</p> <ul> <li>A local <code>static</code> variable is initialized during program startup, and is destroyed on program termination.</li> </ul> <p>It behaves just like a global variable, but its name is inside a function, which does not pollute the global name space.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#initialization","title":"Initialization","text":"<p>If we declare a variable without explicit initialization, what is the value of it?</p> <p>Experiment:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint global;\n\nint main(void) {\n  int local;\n  static int local_static;\n  printf(\"%d, %d, %d\\n\", global, local,\n         local_static);\n  return 0;\n}\n</code></pre>   - Compiled without `-O2` (a kind of optimization):    ```   0, 22031, 0   ``` - Compiled with `-O2`:    ```   0, 0, 0   ```"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#implicit-initialization-very-important","title":"Implicit initialization [Very important]","text":"<p>If a variable is declared without explicit initialization:</p> <ul> <li>For local non-<code>static</code> variables, they are initialized to indeterminate values. In other words, they are uninitialized.</li> <li>For global or local <code>static</code> variables, they are empty-initialized \\({}^{\\textcolor{red}{1}}\\):</li> <li>Pointers are initialized to null pointer values of their types. (later in this lecture)</li> <li>Objects of integral types are initialized to <code>0</code>.</li> <li>Objects of floating types are initialized to positive zero (<code>0.0</code>).</li> <li>Other cases will be discussed in later lectures.</li> </ul> <p>* Intuitively, such variables are initialized to some kind of \"zero\" \\({}^{\\textcolor{red}{2}}\\). This is called zero-initialization in C++.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#uninitialized-garbage-can-be-deadly","title":"Uninitialized garbage can be deadly!","text":"<p>The behavior is undefined if the value of an object is used while it is indeterminate.</p>   [Example: Schr\u00f6dinger's `bool`](https://en.cppreference.com/w/c/language/behavior#Uninitialized_scalar)   <pre><code>int main(void) {\n  bool p;\n  if (p)\n    printf(\"p is true.\\n\");\n  if (!p)\n    printf(\"p is false.\\n\");\n}\n</code></pre>   - Possible output (observed with an older version of gcc):    ```   p is true.   p is false.   ```  - `p` is in a \"superposition state\" of true and false?"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#uninitialized-garbage-can-be-deadly_1","title":"Uninitialized garbage can be deadly!","text":"<p>Example: For a local variable declared with <code>int n;</code> (uninitialized), <code>n</code> may not compare equal to itself and it may appear to change its value on subsequent reads.</p> <pre><code>// in some function\nint n; // uninitialized\n// n == n is not necessarily true and involves undefined behavior.\nint m = n;\n// m == n is not necessarily true and involves undefined behavior.\n</code></pre> <p>Uninitialized variables may also have trap representations, which on some architectures can cause serious problems.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#uninitialized-garbage-can-be-deadly_2","title":"Uninitialized garbage can be deadly!","text":"<p>[Best practice] Always initialize the variable.</p> <p>Except in certain cases, e.g.</p> <pre><code>// in some function\nint n;           // uninitialized\nscanf(\"%d\", &amp;n); // A value is assigned to `n` immediately. This is OK.\n// Now the value of `n` is not indeterminate. It can be used normally.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#const-type-qualifier","title":"<code>const</code> type qualifier","text":"<p>Each type <code>T</code> (not <code>const</code>-qualified) has a <code>const</code>-qualified version of that type, written as <code>T const</code> or <code>const T</code>.</p> <p>Any direct modification of variables with <code>const</code>-qualified types is not allowed:</p> <pre><code>const int n = 100; // Type of `n` is `const int`.\n++n; // Error.\n</code></pre> <p>(Any indirect modification of <code>const</code> variables is undefined behavior; see in later lectures.)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#const-type-qualifier_1","title":"<code>const</code> type qualifier","text":"<p>A <code>const</code> variable cannot be modified after initialization.</p> <p>Therefore, an uninitialized <code>const</code> local non-<code>static</code> variable is almost a non-stop ticket to undefined behavior.</p> <pre><code>// in some function\nconst int n; // `n` has indeterminate values\nn = 42; // Error: cannot modify a const variable.\nscanf(\"%d\", &amp;n); // Error: cannot modify a const variable.\n</code></pre> <p>In C++, <code>const</code> variables of built-in types must be initialized.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#pointers","title":"Pointers","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#pointers_1","title":"Pointers","text":"<p>A pointer points to a variable. The value of a pointer is the address of the variable that it points to.</p> <pre><code>int i = 42;\nint* pi = &amp;i;\nprintf(\"%d\\n\", *pi);\n</code></pre> <ul> <li><code>int* pi;</code> declares a pointer named <code>pi</code>.</li> <li>The type of <code>pi</code> is <code>int*</code>.</li> <li>The type of the variable that <code>pi</code> points to (\"pointee\") is <code>int</code>.</li> <li><code>&amp;</code> is the address-of operator, used for taking the address of a variable.</li> <li><code>*</code> in the expression <code>*pi</code> is the indirection (dereference) operator, used for obtaining the variable that a pointer points to.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#pointers_2","title":"Pointers","text":"<p>A pointer points to a variable.</p> <p>We can access and modify a variable through its address (or a pointer pointing to it).</p> <pre><code>int num = 3;\nint* ptr = &amp;num;\nprintf(\"%d\\n\", *ptr);  // 3\n*ptr = 10;\nprintf(\"%d\\n\", num);   // 10\n++num;\nprintf(\"%d\\n\", *ptr);  // 11\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#declare-a-pointer","title":"Declare a pointer","text":"<p>To declare a pointer: <code>PointeeType* ptr;</code></p> <ul> <li>The type of <code>ptr</code> is <code>PointeeType*</code>.</li> <li>Pointer types with different pointee types are different types: <code>int*</code> and <code>double*</code> are different.</li> <li>The asterisk <code>*</code> can be placed near either <code>PointeeType</code> or <code>ptr</code>:</li> <li><code>PointeeType* ptr;</code> and <code>PointeeType *ptr;</code> are the same declaration.</li> <li><code>PointeeType * ptr;</code>, <code>PointeeType       *   ptr;</code> and <code>PointeeType*ptr;</code> are also correct.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#declare-a-pointer_1","title":"Declare a pointer","text":"<p>The asterisk <code>*</code> can be placed near either <code>PointeeType</code> or <code>ptr</code>: - <code>PointeeType* ptr;</code> may be more intuitive?</p> <p>However, when declaring more than one pointers in one declaration statement, an asterisk is needed for every identifier:</p> <pre><code>int* p1, p2, p3;   // `p1` is of type `int*`, but `p2` and `p3` are ints.\nint *q1, *q2, *q3; // `q1`, `q2` and `q3` all have the type `int*`.\nint* r1, r2, *r3;  // `r1` and `r3` are of the type `int*`,\n                   // while `r2` is an int.\n</code></pre> <p>[Best practice] Either <code>PointeeType *ptr</code> or <code>PointeeType* ptr</code> is ok. Choose one style and stick to it. But if you choose the second one, never declare more than one pointers in one declaration statement.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#and","title":"<code>&amp;</code> and <code>*</code>","text":"<p><code>&amp;var</code> returns the address of the variable <code>var</code>. - The result type is <code>Type *</code>, where <code>Type</code> is the type of <code>var</code>. - <code>var</code> must be an object that has an identity (an lvalue) \\({}^{\\textcolor{red}{3}}\\): <code>&amp;42</code> or <code>&amp;(a + b)</code> are not allowed.</p> <p><code>*expr</code> returns the variable whose address is the value of <code>expr</code>. - <code>expr</code> must have a pointer type <code>PointeeType *</code>. The result type is <code>PointeeType</code>. - The variable is returned, not only its value. This means that we can modify the returned variable: <code>++*ptr</code> is allowed.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#_1","title":"<code>*</code>","text":"<p>In a declaration <code>PointeeType *ptr</code>, <code>*</code> is a part of the pointer type <code>PointeeType *</code>.</p> <p>In an expression like <code>*ptr</code>, <code>*</code> is the indirection (dereference) operator used to obtain the variable whose address is the value of <code>ptr</code>.</p> <p>Do not mix them up!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#the-null-pointer","title":"The null pointer","text":"<p>The null pointer value is the \"zero\" value for pointer types \\({}^{\\textcolor{red}{4}}\\).</p> <ul> <li>It can be obtained from the macro <code>NULL</code>, which is available from many standard library header files (e.g. <code>&lt;stddef.h&gt;</code>, <code>&lt;stdio.h&gt;</code>, <code>&lt;stdlib.h&gt;</code>):</li> </ul> <p><code>c   int *ptr = NULL; // `ptr` is a null pointer.</code></p> <ul> <li>It can also be obtained from the integer literal <code>0</code>.</li> </ul> <p><code>c   double *ptr = 0; // same as `double *ptr = NULL;`</code></p> <ul> <li>Conversion from a null pointer to an integer type results in <code>0</code>.</li> </ul> <p>Note: Better null pointer values (<code>nullptr</code>) are available in C23 and in C++11.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#the-null-pointer_1","title":"The null pointer","text":"<p>The null pointer value is the \"zero\" value for pointer types \\({}^{\\textcolor{red}{4}}\\).</p> <p>A null pointer compares unequal to any pointer pointing to an object.</p> <p>It is used for representing a pointer that \"points nowhere\".</p> <p>Dereferencing a null pointer is undefined behavior, and often causes severe runtime errors!</p> <ul> <li>Because it is not pointing to an object.</li> </ul> <pre><code>int *ptr = NULL;\nprintf(\"%d\\n\", *ptr); // undefined behavior\n*ptr = 42; // undefined behavior\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#implicit-initialization-of-pointers","title":"Implicit initialization of pointers","text":"<p>If a pointer is not explicitly initialized:</p> <ul> <li>Global or local <code>static</code>: Initialized to the null pointer value.</li> <li>Local non-<code>static</code>: Initialized to indeterminate values, or in other words, uninitialized.</li> <li>Uninitialized pointers are often called wild pointers.</li> </ul> <p>A wild pointer do not point to a specific object, and is not a null pointer either.</p> <p>Dereferencing a wild pointer is undefined behavior, and often causes severe runtime errors.</p> <p>[Best practice] Avoid wild pointers.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#pointers-that-are-not-dereferenceable","title":"Pointers that are not dereferenceable","text":"<p>A pointer <code>ptr</code> is dereferenceable. \\(\\Leftrightarrow\\) <code>*ptr</code> has no undefined behavior. \\(\\Leftrightarrow\\) <code>ptr</code> points to an existing object.</p> <p>A pointer that does not point to an existing object may be</p> <ul> <li>uninitialized (wild), or</li> <li>a null pointer, or</li> <li>dangling (We will discuss this in later lectures.), or</li> <li>holding some other meaningless address: <code>int *p = 123;</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#pointers-that-are-not-dereferenceable_1","title":"Pointers that are not dereferenceable","text":"<p>Dereferencing such a pointer is undefined behavior, and usually causes severe runtime errors.</p> <ul> <li>Recall the \"short-circuit\" evaluation of binary logical operators:</li> </ul> <p><code>c   if (ptr != NULL &amp;&amp; *ptr == 42) { /* ... */ }</code></p> <p>When <code>ptr</code> is a null pointer, the right-hand side operand <code>*ptr == 42</code> won't be evaluated, so <code>ptr</code> is not dereferenced.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#argument-passing","title":"Argument passing","text":"<p>What is the output? Is the value of <code>i</code> changed to <code>42</code>?</p> <pre><code>void fun(int x) {\n  x = 42;\n}\nint main(void) {\n  int i = 30;\n  fun(i);\n  printf(\"%d\\n\", i);\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#argument-passing_1","title":"Argument passing","text":"<pre><code>void fun(int x) {\n   x = 42;\n }\n int main(void) {\n   int i = 30;\n   fun(i);\n   printf(\"%d\\n\", i); // 30\n }  \n</code></pre> <p>The output is still <code>30</code>. <code>i</code> is not changed.</p> <ul> <li>The parameter <code>x</code> is initialized as if <code>int x = i;</code>, thus obtaining the value of <code>i</code>.</li> <li><code>x</code> and <code>i</code> are two independent variables.</li> <li>Modification on <code>x</code> does not influence <code>i</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#argument-passing_2","title":"Argument passing","text":"<p>To make the modification happen on a variable outside, pass its address into the function.</p> <pre><code>void fun(int x) {\n  x = 42;\n}\nint main(void) {\n  int i = 30;\n  fun(i); // int x = i;\n  printf(\"%d\\n\", i); // 30\n}\n</code></pre> <pre><code>void fun(int *px) {\n  *px = 42;\n}\nint main(void) {\n  int i = 30;\n  fun(&amp;i); // int *px = &amp;i\n  printf(\"%d\\n\", i); // 42\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#exercise-swap","title":"Exercise: <code>swap</code>","text":"<p>Write a <code>swap</code> function to exchange the values of two integers. How do you design the parameters and the return type?</p> <p>This does not work:</p> <pre><code>void swap(int a, int b) {\n  int tmp = a;\n  a = b;\n  b = tmp;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#exercise-swap_1","title":"Exercise: <code>swap</code>","text":"<p>Write a <code>swap</code> function to exchange the values of two integers. How do you design the parameters and the return type?</p> <pre><code>void swap(int *pa, int *pb) {\n  int tmp = *pa;\n  *pa = *pb;\n  *pb = tmp;\n}\nint main(void) {\n  int i = 42, j = 35;\n  swap(&amp;i, &amp;j);\n  // Now i = 35, j = 42.\n}\n</code></pre> <p>* Why do we need to write <code>&amp;</code> when calling <code>scanf</code>, but not in <code>printf</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#exercise-swap_2","title":"Exercise: <code>swap</code>","text":"<p>Write a <code>swap</code> function to exchange the values of two integers. How do you design the parameters and the return type?</p> <pre><code>void swap(int *pa, int *pb) {\n  int tmp = *pa;\n  *pa = *pb;\n  *pb = tmp;\n}\nint main(void) {\n  int i = 42, j = 35;\n  swap(&amp;i, &amp;j);\n  // Now i = 35, j = 42.\n}\n</code></pre> <p>* Why do we need to write <code>&amp;</code> when calling <code>scanf</code>, but not in <code>printf</code>?</p> <ul> <li><code>scanf</code> needs to modify the variable, but <code>printf</code> doesn't.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#arrays","title":"Arrays","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#arrays_1","title":"Arrays","text":"<p>An array is a sequence of <code>N</code> objects of an element type <code>ElemType</code> stored contiguously in memory, where <code>N</code> \\(\\in\\mathbb Z_+\\) is the length of it.</p> <pre><code>ElemType arr[N];\n</code></pre> <p><code>N</code> must be a constant expression whose value is known at compile-time.</p> <pre><code>int a1[10];      // OK. A literal is a constant expression.\n#define MAXN 10\nint a2[MAXN];    // OK. `MAXN` is replaced with `10` by the preprocessor.\nint n; scanf(\"%d\", &amp;n);\nint a[n];        // A C99 VLA (Variable-Length Array), whose length is\n                 // determined at runtime.\n</code></pre> <p>For now, we do not recommend the use of VLAs. We will talk more about it in recitations.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#array-type","title":"Array type","text":"<p>An array is a sequence of <code>N</code> objects of an element type <code>ElemType</code> stored contiguously in memory, where <code>N</code> \\(\\in\\mathbb Z_+\\) is the length of it.</p> <pre><code>ElemType arr[N]; // The type of `arr` is `ElemType [N]`.\n</code></pre> <p>The type of an array consists of two parts:</p> <ol> <li>the element type <code>ElemType</code>, and</li> <li>the length of the array <code>[N]</code>.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#array-subscript","title":"Array subscript","text":"<pre><code>ElemType arr[N];\n</code></pre> <p>Use <code>arr[i]</code> to obtain the <code>i</code>-th element of <code>arr</code>, where <code>i</code> \\(\\in[0,N)\\).</p> <pre><code>int a[10];\n\nbool find(int value) {\n  for (int i = 0; i &lt; 10; ++i)\n    if (a[i] == value)\n      return true;\n  return false;\n}\n</code></pre> <pre><code>int main(void) {\n  int n; scanf(\"%d\", &amp;n);\n  for (int i = 0; i &lt; n; ++i)\n    scanf(\"%d\", &amp;a[i]);\n  for (int i = 0; i &lt; n; ++i)\n    a[i] *= 2;\n  // ...\n}\n</code></pre> <p>The subscript <code>i</code> is an integer within the range \\([0,N)\\). Array subscript out of range is undefined behavior, and usually causes severe runtime errors.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#array-subscript_1","title":"Array subscript","text":"<p>The subscript <code>i</code> is an integer within the range \\([0,N)\\). Array subscript out of range is undefined behavior, and usually causes severe runtime errors.</p> <p>The compiler may assume that the program is free of undefined behaviors:</p> <pre><code>int a[4];\n\nbool find(int value) {\n  for (int i = 0; i &lt;= 4; ++i)\n    if (a[i] == value)\n      return true;\n  return false;\n}\n</code></pre>   - This code may be compiled as if it is    ```c   bool find(int value) {     return true;   }   ```    [demo](https://godbolt.org/z/48bn19Tsb)"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#array-initialization","title":"Array initialization","text":"<p>If an array is declared without explicit initialization:</p> <ul> <li>Global or local <code>static</code>: Empty-initialization \\(\\Rightarrow\\) Every element is empty-initialized.</li> <li>Local non-<code>static</code>: Every element is initialized to indeterminate values (uninitialized).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#array-initialization_1","title":"Array initialization","text":"<p>Arrays can be initialized from brace-enclosed lists:</p> <ul> <li>Initialize the beginning few elements:</li> </ul> <p><code>c   int a[10] = {2, 3, 5, 7}; // Correct: Initializes a[0], a[1], a[2], a[3]   int b[2] = {2, 3, 5};     // Error: Too many initializers   int c[] = {2, 3, 5};      // Correct: 'c' has type int[3].   int d[100] = {};          // Correct in C++ and since C23.</code> - Initialize designated elements (since C99):</p> <p><code>c   int e[10] = {[0] = 2, 3, 5, [7] = 7, 11, [4] = 13};</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#array-initialization_2","title":"Array initialization","text":"<p>If an array is explicitly initialized, all the elements that are not explicitly initialized are empty-initialized.</p> <pre><code>int main(void) {\n  int a[10] = {1, 2, 3}; // a[3], a[4], ... are all initialized to zero.\n  int b[100] = {0};      // All elements of b are initialized to zero.\n  int c[100] = {1};      // c[0] is initialized to 1,\n                         // and the rest are initialized to zero.\n}\n</code></pre> <p><code>= {x}</code> is not initializing all elements to <code>x</code>!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#nested-arrays","title":"Nested arrays","text":"<p>The C answer to \"multidimensional arrays\" is nested arrays, which is in fact arrays of arrays:</p> <p> </p> <pre><code>int a[10][20];\n\nbool find(int value) {\n  for (int i = 0; i &lt; 10; ++i)\n    for (int j = 0; j &lt; 20; ++j)\n      if (a[i][j] == value)\n        return true;\n  return false;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#initialization-of-nested-arrays","title":"Initialization of nested arrays","text":"<p>Things have been stated quite clearly on cppreference.</p> <pre><code>int a[4][3] = { // array of 4 arrays of 3 ints each (4x3 matrix)\n    { 1 },      // row 0 initialized to {1, 0, 0}\n    { 0, 1 },   // row 1 initialized to {0, 1, 0}\n    { [2]=1 },  // row 2 initialized to {0, 0, 1}\n};              // row 3 initialized to {0, 0, 0}\nint b[4][3] = {    // array of 4 arrays of 3 ints each (4x3 matrix)\n  1, 3, 5, 2, 4, 6, 3, 5, 7 // row 0 initialized to {1, 3, 5}\n};                          // row 1 initialized to {2, 4, 6}\n                            // row 2 initialized to {3, 5, 7}\n                            // row 3 initialized to {0, 0, 0}\nint y[4][3] = {[0][0]=1, [1][1]=1, [2][0]=1};  // row 0 initialized to {1, 0, 0}\n                                               // row 1 initialized to {0, 1, 0}\n                                               // row 2 initialized to {1, 0, 0}\n                                               // row 3 initialized to {0, 0, 0}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#summary","title":"Summary","text":"<p>Variables</p> <ul> <li>Local <code>static</code> variables: A variable whose name is local to a function but whose lifetime is as long as that of a global variable.</li> <li>Implicit initialization:</li> <li>Global or local <code>static</code>: empty-initialization (some kind of \"zero\" value)</li> <li>Local non-<code>static</code>: initialized to indeterminate values (uninitialized)</li> <li>Use of indeterminate values is undefined behavior.</li> <li><code>const</code>: not modifiable.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#summary_1","title":"Summary","text":"<p>Pointers</p> <ul> <li>Type of a pointer: <code>PointeeType *</code></li> <li><code>&amp;var</code> returns the address of <code>var</code>.</li> <li><code>*expr</code> returns the variable whose address is the value of <code>expr</code>.</li> <li>Null pointer value: The \"zero\" value for pointer types.</li> <li>Obtained from <code>NULL</code> or the integer literal <code>0</code>.</li> <li>Representing a pointer that \"points nowhere\".</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#summary_2","title":"Summary","text":"<p>Pointers</p> <ul> <li>Implicit initialization:</li> <li>Global or local <code>static</code>: null pointer</li> <li>Local non-<code>static</code>: \"wild pointer\"</li> <li>Dereferencing such pointers is undefined behavior.</li> <li>Used for argument passing</li> <li>To modify a variable outside the function, pass its address into the function.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#summary_3","title":"Summary","text":"<p>Arrays</p> <ul> <li>Type of an array: <code>ElemType [N]</code></li> <li><code>a[i]</code> returns the <code>i</code>-th element in in the array <code>a</code>.</li> <li><code>i</code> \\(\\in[0,N)\\). Out-of-range access is undefined behavior.</li> <li>Implicit initialization: performed recursively on each element.</li> <li>Initialization from brace-enclosed lists: <code>int a[10] = {2, 3, 5};</code></li> <li>The rest elements are initialized to zero.</li> <li>Nested arrays: Arrays of arrays</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#exercises","title":"Exercises","text":"<ol> <li>The <code>swap</code> function on page 33 swaps the values of two integers. What if we want to swap the values of two pointers?</li> </ol> <p><code>c    void swap(/* ??? */, /* ??? */) {      // ???    }    int main(void) {      int i = 42, j = 50;      int *p1 = &amp;i, *p2 = &amp;j;      swap(/* ??? */);      // Now `p1` should point to `j`, and `p2` should point to `i`.    }</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#exercises_1","title":"Exercises","text":"<ol> <li>Write a program that reads a matrix \\(M\\in\\mathbb Z^{n\\times m}\\) and prints its transpose \\(M^T\\). You may assume \\(n,m\\leqslant 100\\) and the entries are representable by <code>int</code>.</li> </ol> <p>Sample input:</p> <p><code>3 5    1 2 3 4 5    6 7 8 9 10    11 12 13 14 15</code></p> <p>Sample output:</p> <p><code>1 6 11    2 7 12    3 8 13    4 9 14    5 10 15</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l5/l5.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) The cppreference page for empty-initialization does not mark the term \"empty-initialization\" as C23, but in fact it does not appear in any standards prior to C23. Looking through the edit history of this page, we can see that this term was not introduced until the C23 things were added. For convenience, we use this term to represent this kind of initialization.</p> <p>\\({}^{\\textcolor{red}{2}}\\) The \"zero\" value is not necessarily all-bits zero. For example, the floating-point positive zero <code>+0.0</code> may not be all-bits zero in a special representation used by the CCS C compiler. The null pointer value is not all-bits zero on some platforms either, details of which are available on comp.lang.c FAQ.</p> <p>\\({}^{\\textcolor{red}{3}}\\) We will not talk about the concepts related to value categories until we meet them in C++, although C also has value categories.</p> <p>\\({}^{\\textcolor{red}{4}}\\) See \\(\\textcolor{red}{2}\\).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html","title":"CS100 Lecture 6","text":"<p>Pointers and Arrays II</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#contents","title":"Contents","text":"<p>Pointers and Arrays</p> <ul> <li>Pointer arithmetic</li> <li>Array-to-pointer conversion</li> <li>Pass an array to a function</li> <li>Pass a nested array to a function</li> <li>Do we need an array?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pointers-and-arrays","title":"Pointers and Arrays","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#recap-pointers","title":"Recap: Pointers","text":"<p>A pointer points to an object. The value of a pointer is the address of the object that it points to.</p> <pre><code>int i = 42;\nint *pi = &amp;i;\n</code></pre> <p>To declare a pointer: <code>PointeeType *ptr;</code></p> <ul> <li>What is the type of <code>ptr</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#recap-pointers_1","title":"Recap: Pointers","text":"<p>A pointer points to an object. The value of a pointer is the address of the object that it points to.</p> <pre><code>int i = 42;\nint *pi = &amp;i;\n</code></pre> <p>To declare a pointer: <code>PointeeType *ptr;</code></p> <ul> <li>What is the type of <code>ptr</code>? <code>PointeeType *</code></li> </ul> <p>How can we make <code>ptr</code> point to <code>var</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#recap-pointers_2","title":"Recap: Pointers","text":"<p>A pointer points to an object. The value of a pointer is the address of the object that it points to.</p> <pre><code>int i = 42;\nint *pi = &amp;i;\n</code></pre> <p>To declare a pointer: <code>PointeeType *ptr;</code></p> <ul> <li>What is the type of <code>ptr</code>? <code>PointeeType *</code></li> </ul> <p>How can we make <code>ptr</code> point to <code>var</code>?</p> <ul> <li>First, <code>var</code> should be of type <code>PointeeType</code>.</li> <li><code>PointeeType *ptr = &amp;var;</code> (initialize)</li> <li><code>ptr = &amp;var;</code> (assign)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#recap-arrays","title":"Recap: Arrays","text":"<p>An array is a sequence of <code>N</code> objects of type <code>ElemType</code> stored contiguously.</p> <p>To declare an array: <code>ElemType arr[N];</code></p> <ul> <li>What is the type of <code>arr</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#recap-arrays_1","title":"Recap: Arrays","text":"<p>An array is a sequence of <code>N</code> objects of type <code>ElemType</code> stored contiguously.</p> <p>To declare an array: <code>ElemType arr[N];</code></p> <ul> <li>What is the type of <code>arr</code>? <code>ElemType [N]</code></li> </ul> <p>To access the <code>i</code>-th element: <code>arr[i]</code></p> <ul> <li>What is the valid range of <code>i</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#recap-arrays_2","title":"Recap: Arrays","text":"<p>An array is a sequence of <code>N</code> objects of type <code>ElemType</code> stored contiguously.</p> <p>To declare an array: <code>ElemType arr[N];</code></p> <ul> <li>What is the type of <code>arr</code>? <code>ElemType [N]</code></li> </ul> <p>To access the <code>i</code>-th element: <code>arr[i]</code></p> <ul> <li>What is the valid range of <code>i</code>? \\([0,N)\\)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pointer-arithmetic","title":"Pointer arithmetic","text":"<p>Let <code>p</code> be a pointer of type <code>T *</code> and let <code>i</code> be an integer.</p> <ul> <li><code>p + i</code> returns the address equal to the value of <code>(char *)p + i * sizeof(T)</code>. In other words, pointer arithmetic uses the unit of the pointed-to type.</li> </ul> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pointer-arithmetic_1","title":"Pointer arithmetic","text":"<p>Let <code>p</code> be a pointer of type <code>T *</code> and let <code>i</code> be an integer.</p> <ul> <li><code>p + i</code> returns the address equal to the value of <code>(char *)p + i * sizeof(T)</code>. In other words, pointer arithmetic uses the unit of the pointed-to type.</li> <li>If we let <code>p = &amp;a[0]</code> (where <code>a</code> is an array of type <code>T [N]</code>), then</li> <li><code>p + i</code> is equivalent to <code>&amp;a[i]</code>, and</li> <li><code>*(p + i)</code> is equivalent to <code>a[i]</code>.</li> </ul> <p> </p> <ul> <li>Arithmetic operations <code>i + p</code>, <code>p += i</code>, <code>p - i</code>, <code>p -= i</code>, <code>++p</code>, <code>p++</code>, <code>--p</code>, <code>p--</code> are defined in the same way.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#array-to-pointer-conversion","title":"Array-to-pointer conversion","text":"<p>If we let <code>p = &amp;a[0]</code> (where <code>a</code> is an array of type <code>T [N]</code>), then - <code>p + i</code> is equivalent to <code>&amp;a[i]</code>, and - <code>*(p + i)</code> is equivalent to <code>a[i]</code>.</p> <p> </p> <p>Considering the close relationship between arrays and pointers, an array can be implicitly converted to a pointer to the first element: <code>a</code> \\(\\rightarrow\\) <code>&amp;a[0]</code>, <code>T [N]</code> \\(\\rightarrow\\) <code>T *</code>.</p> <ul> <li><code>p = &amp;a[0]</code> can be written as <code>p = a</code> directly.</li> <li><code>*a</code> is equivalent to <code>a[0]</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#array-to-pointer-conversion_1","title":"Array-to-pointer conversion","text":"<p>We can use pointers to traverse an array:</p> <pre><code>int a[10];\n\nbool find(int value) {\n  for (int *p = a; p &lt; a + 10; ++p)\n    if (*p == value)\n      return true;\n  return false;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#subtraction-of-pointers","title":"Subtraction of pointers","text":"<p>Let <code>a</code> be an array of length <code>N</code>. If <code>p1 == a + i</code> and <code>p2 == a + j</code> (where <code>i</code> and <code>j</code> are nonnegative integers), the expression <code>p1 - p2</code></p> <ul> <li>has the value equal to <code>i - j</code>, and</li> <li>has the type <code>ptrdiff_t</code>, which is a signed integer type declared in <code>&lt;stddef.h&gt;</code>.</li> <li>The size of <code>ptrdiff_t</code> is implementation-defined. For example, it might be 64-bit on a 64-bit machine, and 32-bit on a 32-bit machine.</li> <li>Here <code>i</code>, <code>j</code> \\(\\in[0,N]\\) (closed interval), i.e. <code>p1</code> or <code>p2</code> may point to the \"past-the-end\" position of <code>a</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pointer-arithmetic_2","title":"Pointer arithmetic","text":"<p>Pointer arithmetic can only happen within the range of an array and its \"past-the-end\" position (indexed \\([0,N]\\)). For other cases, the behavior is undefined.</p> <p>Examples of undefined behaviors:</p> <ul> <li><code>p1 - p2</code>, where <code>p1</code> and <code>p2</code> point to the positions of two different arrays.</li> <li><code>p + 2 * N</code>, where <code>p</code> points to some element in an array of length <code>N</code>.</li> <li><code>p - 1</code>, where <code>p</code> points to the first element <code>a[0]</code> of some array <code>a</code>.</li> </ul> <p>Note that the evaluation of the innocent-looking expression <code>p - 1</code>, without dereferencing it, is still undefined behavior and may fail on some platforms.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-an-array-to-a-function","title":"Pass an array to a function","text":"<p>The only way \\({}^{\\textcolor{red}{1}}\\) of passing an array to a function is to pass the address of its first element.</p> <p>The following declarations are equivalent:</p> <pre><code>void fun(int *a);\nvoid fun(int a[]);\nvoid fun(int a[10]);\nvoid fun(int a[2]);\n</code></pre> <p>In all these declarations, the type of the parameter <code>a</code> is <code>int *</code>.</p> <ul> <li>How do you verify that?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-an-array-to-a-function_1","title":"Pass an array to a function","text":"<pre><code>void fun(int a[100]);\n</code></pre> <p>The type of the parameter <code>a</code> is <code>int *</code>. How do you verify that?</p> <pre><code>void fun(int a[100]) {\n  printf(\"%d\\n\", (int)sizeof(a));\n}\n</code></pre> <p>Output: (On 64-bit Ubuntu 22.04, GCC 13)</p> <pre><code>8\n</code></pre> <ul> <li>If the type of <code>a</code> is <code>int[100]</code> as declared, the output should be <code>400</code> (assuming <code>int</code> is 32-bit).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-an-array-to-a-function_2","title":"Pass an array to a function","text":"<p>Even if you declare the parameter as an array (either <code>T a[N]</code> or <code>T a[]</code>), its type is still a pointer <code>T*</code>: You are allowed to pass anything of type <code>T*</code> to it.</p> <ul> <li>Array of element type <code>T</code> with any length is allowed to be passed to it.</li> </ul> <pre><code>void print(int a[10]) {\n  for (int i = 0; i &lt; 10; ++i)\n    printf(\"%d\\n\", *(a + i));\n}\nint main(void) {\n  int x[20] = {0}, y[10] = {0}, z[5] = {0}, w = 42;\n  print(x);  // OK\n  print(y);  // OK\n  print(z);  // Allowed by the compiler, but undefined behavior!\n  print(&amp;w); // Still allowed by the compiler, also undefined behavior!\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-an-array-to-a-function_3","title":"Pass an array to a function","text":"<p>Even if you declare the parameter as an array (either <code>T a[N]</code> or <code>T a[]</code>), its type is still a pointer <code>T*</code>: You are allowed to pass anything of type <code>T*</code> to it.</p> <ul> <li>Array of element type <code>T</code> with any length is allowed to be passed to it.</li> </ul> <p>The length <code>n</code> of the array is often passed explicitly as another argument, so that the function can know how long the array is.</p> <pre><code>void print(int *a, int n) {\n  for (int i = 0; i &lt; n; ++i)\n    printf(\"%d\\n\", *(a + i));\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#subscript-on-pointers","title":"Subscript on pointers","text":"<pre><code>void print(int *a, int n) {\n  for (int i = 0; i &lt; n; ++i)\n    printf(\"%d\\n\", a[i]); // Look at this!\n}\n</code></pre> <p>Subscript on pointers is also allowed! <code>a[i]</code> is equivalent to <code>*(a + i)</code>. \\({}^{\\textcolor{red}{2}}\\)</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#return-an-array","title":"Return an array?","text":"<p>There is no way of returning an array from the function.</p> <p>Returning the address of its first element is ok, but be careful:</p>   This is OK:   <pre><code>int a[10];\n\nint *foo(void) {\n  return a;\n}\n</code></pre>   This returns an **invalid address**! (Why?)   <pre><code>int *foo(void) {\n  int a[10] = {0};\n  return a;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#return-an-array_1","title":"Return an array?","text":"<p>These two functions have made the same mistake: returning the address of a local variable.</p> <pre><code>int *foo(void) {\n  int a[10] = {0};\n  return a;\n}\nint main(void) {\n  int *a = foo();\n  a[0] = 42; // undefined behavior\n}\n</code></pre> <pre><code>int *fun(void) {\n  int x = 42;\n  return &amp;x;\n}\nint main(void) {\n  // undefined behavior\n  printf(\"%d\\n\", *fun());\n}\n</code></pre> <ul> <li>When the function returns, all the parameters and local objects are destroyed.</li> <li><code>a</code> and <code>x</code> no longer exist.</li> <li>The objects on the returned addresses are \"dead\" when the function returns!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#exercise","title":"Exercise","text":"<p>Write a function that accepts an array of <code>int</code>s, and copies the odd numbers to another array in reverse order.</p> <pre><code>int main(void) {\n  int a[5] = {1, 2, 3, 5, 6}, b[5];\n  copy_odd_reversed(/* ... */); // your function\n  // Now `a` is unchanged, and the values in `b` are {5, 3, 1}.\n}\n</code></pre> <p>Design the usage of your function (parameters and return values) on your own.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#exercise_1","title":"Exercise","text":"<p>Write a function that accepts an array of <code>int</code>s, and copies the odd numbers to another array in reverse order.</p> <pre><code>int copy_odd_reversed(int *from, int n, int *to) {\n  int cnt = 0;\n  for (int i = n - 1; i &gt;= 0; --i)\n    if (from[i] % 2 == 1)\n      to[cnt++] = from[i]; // What does this mean?\n  return cnt;\n}\nint main(void) {\n  int a[5] = {1, 2, 3, 5, 6}, b[5];\n  int b_length = copy_odd_reversed(a, 5, b); // b_length == 3.\n  // Now `a` is unchanged, and the values in `b` are {5, 3, 1}.\n}\n</code></pre> <p>Since arrays cannot be returned, we often create the result array on our own, and pass it to the function.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pointer-type-revisited","title":"Pointer type (revisited)","text":"<p>The type of a pointer is <code>PointeeType *</code>.</p> <p>For two different types <code>T1</code> and <code>T2</code>, the pointer types <code>T1 *</code> and <code>T2 *</code> are different types, although they may point to the same location.</p> <pre><code>int i = 42;\nfloat *fp = &amp;i;\n++*fp; // Undefined behavior. It is not ++i.\n</code></pre> <p>In C, pointers of different types can be implicitly converted to each other (with possibly a warning). This is extremely unsafe and an error in C++.</p> <p>Dereferencing a pointer of type <code>T1 *</code> when it is actually pointing to a <code>T2</code> is almost always undefined behavior.</p> <ul> <li>We will see one exception in the next lecture. \\({}^{\\textcolor{red}{3}}\\)</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-a-nested-array-to-a-function","title":"Pass a nested array to a function","text":"<p>When passing an array to a function, we make use of the array-to-pointer conversion:</p> <ul> <li><code>Type [N]</code> will be implicitly converted to <code>Type *</code>.</li> </ul> <p>What about nested arrays?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-a-nested-array-to-a-function_1","title":"Pass a nested array to a function","text":"<p>When passing an array to a function, we make use of the array-to-pointer conversion:</p> <ul> <li><code>Type [N]</code> will be implicitly converted to <code>Type *</code>.</li> </ul> <p>A \"2d-array\" is an \"array of array\":</p> <ul> <li><code>Type [N][M]</code> is an array of <code>N</code> elements, where each element is of type <code>Type [M]</code>.</li> <li>What is the conversion result of <code>Type [N][M]</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-a-nested-array-to-a-function_2","title":"Pass a nested array to a function","text":"<p>When passing an array to a function, we make use of the array-to-pointer conversion:</p> <ul> <li><code>Type [N]</code> will be implicitly converted to <code>Type *</code>.</li> </ul> <p>A \"2d-array\" is an \"array of array\":</p> <ul> <li><code>Type [N][M]</code> is an array of <code>N</code> elements, where each element is of type <code>Type [M]</code>.</li> <li><code>Type [N][M]</code> should be implicitly converted to a \"pointer to <code>Type[M]</code>\".</li> </ul> <p>What is a \"pointer to <code>Type[M]</code>\"?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pointer-to-array","title":"Pointer to array","text":"A pointer to an array of `N` `int`s:   <pre><code>int (*parr)[N];\n</code></pre>   An array of `N` pointers (pointing to `int`):   <pre><code>int *arrp[N];\n</code></pre> <p>Too confusing! How can I remember them?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pointer-to-array_1","title":"Pointer to array","text":"A pointer to an array of `N` `int`s:   <pre><code>int (*parr)[N];\n</code></pre>   An array of `N` pointers (pointing to `int`):   <pre><code>int *arrp[N];\n</code></pre> <p>Too confusing! How can I remember them?</p> <ul> <li><code>int (*parr)[N]</code> has a pair of parentheses around <code>*</code> and <code>parr</code>, so</li> <li><code>parr</code> is a pointer (<code>*</code>), and</li> <li>points to something of type <code>int[N]</code>.</li> <li>Then the other one is different:</li> <li><code>arrp</code> is an array, and</li> <li>stores <code>N</code> pointers, with pointee type <code>int</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-a-nested-array-to-a-function_3","title":"Pass a nested array to a function","text":"<p>The following declarations are equivalent: The parameter is of type <code>int (*)[N]</code>, which is a pointer to <code>int[N]</code>.</p> <pre><code>void fun(int (*a)[N]);\nvoid fun(int a[][N]);\nvoid fun(int a[2][N]);\nvoid fun(int a[10][N]);\n</code></pre> <p>We can pass an array of type <code>int[K][N]</code> to <code>fun</code>, where <code>K</code> is arbitrary.</p> <ul> <li>The size for the second dimension must be <code>N</code>.</li> <li><code>T[10]</code> and <code>T[20]</code> are different types, so the pointer types <code>T(*)[10]</code> and <code>T(*)[20]</code> are not compatible.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-a-nested-array-to-a-function_4","title":"Pass a nested array to a function","text":"<pre><code>void print(int (*a)[5], int n) {\n  for (int i = 0; i &lt; n; ++i) {\n    for (int j = 0; j &lt; 5; ++j)\n      printf(\"%d \", a[i][j]);\n    printf(\"\\n\");\n  }\n}\nint main(void) {\n  int a[2][5] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}};\n  int b[3][5] = {0};\n  print(a, 2); // OK\n  print(b, 3); // OK\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-a-nested-array-to-a-function_5","title":"Pass a nested array to a function","text":"<p>In each of the following declarations, what is the type of <code>a</code>? Does it accept an argument of type <code>int[N][M]</code>?</p> <ol> <li><code>void fun(int a[N][M])</code></li> <li><code>void fun(int (*a)[M])</code></li> <li><code>void fun(int (*a)[N])</code></li> <li><code>void fun(int **a)</code></li> <li><code>void fun(int *a[])</code></li> <li><code>void fun(int *a[N])</code></li> <li><code>void fun(int a[100][M])</code></li> <li><code>void fun(int a[N][100])</code></li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#pass-a-nested-array-to-a-function_6","title":"Pass a nested array to a function","text":"<p>In each of the following declarations, what is the type of <code>a</code>? Does it accept an argument of type <code>int[N][M]</code>?</p> <ol> <li><code>void fun(int a[N][M])</code>: A pointer to <code>int[M]</code>. Yes.</li> <li><code>void fun(int (*a)[M])</code>: Same as 1.</li> <li><code>void fun(int (*a)[N])</code>: A pointer to <code>int[N]</code>. Yes iff <code>N == M</code>.</li> <li><code>void fun(int **a)</code>: A pointer to <code>int *</code>. No.</li> <li><code>void fun(int *a[])</code>: Same as 4.</li> <li><code>void fun(int *a[N])</code>: Same as 4.</li> <li><code>void fun(int a[100][M])</code>: Same as 1.</li> <li><code>void fun(int a[N][100])</code>: A pointer to <code>int[100]</code>. Yes iff <code>M == 100</code>.</li> </ol>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#exercise_2","title":"Exercise","text":"<p>We wrote a \"transpose\" program in last lecture's exercise, which accepts a matrix from input and prints its transpose.</p> <p>Rewrite this functionality as a function. Suppose the size of the given matrix is \\(3\\times 4\\).</p> <pre><code>int main(void) {\n  int a[3][4];\n  for (int i = 0; i &lt; 3; ++i)\n    for (int j = 0; j &lt; 4; ++j)\n      scanf(\"%d\", &amp;a[i][j]);\n  int b[4][3];\n  transpose(a, b); // Your function\n  for (int i = 0; i &lt; 4; ++i) {\n    for (int j = 0; j &lt; 3; ++j)\n      printf(\"%d \", b[i][j]);\n    printf(\"\\n\");\n  }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#do-we-need-an-array","title":"Do we need an array?","text":"<p>Write a program that reads an integer \\(n\\) and prints the \\(n\\)-th Fibonacci number. Assume that the numbers are representable by <code>int</code>.</p> \\[ F_n=\\begin{cases}   0,&amp;n=0,\\\\   1,&amp;n=1,\\\\   F_{n-1}+F_{n-2},&amp;n&gt;1. \\end{cases} \\]"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#do-we-need-an-array_1","title":"Do we need an array?","text":"<p>Write a program that reads an integer \\(n\\) and prints the \\(n\\)-th Fibonacci number. Assume that the numbers are representable by <code>int</code>.</p>   $$ F_n=\\begin{cases}   0,&amp;n=0,\\\\   1,&amp;n=1,\\\\   F_{n-1}+F_{n-2},&amp;n&gt;1. \\end{cases} $$    <pre><code>int calc_fib(int n) {\n  int fib[100] = {0, 1};\n  for (int i = 2; i &lt;= n; ++i)\n    fib[i] = fib[i - 1] + fib[i - 2];\n  return fib[n];\n}\n</code></pre> <p>Is this array necessary?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#do-we-need-an-array_2","title":"Do we need an array?","text":"Is this array necessary?   <pre><code>int calc_fib(int n) {\n  int fib[100] = {0, 1};\n  for (int i = 2; i &lt;= n; ++i)\n    fib[i] = fib[i - 1] + fib[i - 2];\n  return fib[n];\n}\n</code></pre>   We only need two (three) variables!   <pre><code>int calc_fib(int n) {\n  int a = 0, b = 1;\n  for (int i = 2; i &lt;= n; ++i) {\n    int new = a + b;\n    a = b;\n    b = new;\n  }\n  return b;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#do-we-need-an-array_3","title":"Do we need an array?","text":"<p>In the following cases, do we need an array?</p> <ul> <li>Read \\(n\\) integers, then print the sum of them.</li> <li>Read \\(n\\) integers, then print them in reverse order.</li> <li>Read \\(n\\) integers, then print the maximum of them.</li> <li>Read \\(n\\) integers, then print the second maximum of them.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#do-we-need-an-array_4","title":"Do we need an array?","text":"<p>In the following cases, do we need an array?</p> <ul> <li>Read \\(n\\) integers, then print the sum of them. No</li> <li>Read \\(n\\) integers, then print them in reverse order. Yes</li> <li>Read \\(n\\) integers, then print the maximum of them. No</li> <li>Read \\(n\\) integers, then print the second maximum of them. No</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#summary","title":"Summary","text":"<p>Pointer arithmetic</p> <ul> <li>can only happen within the range of an array and its \"past-the-end\" position. Other cases are undefined behaviors.</li> <li><code>p + i</code> returns the address <code>(char *)p + i * sizeof(T)</code>, i.e. <code>i * sizeof(T)</code> bytes away from <code>p</code>.</li> <li><code>p1 - p2</code> is equal to <code>i - j</code>.</li> </ul> <p>Array-to-pointer conversion</p> <ul> <li>An array <code>a</code> can be implicitly converted to <code>&amp;a[0]</code>.</li> <li><code>T [N]</code> \\(\\to\\) <code>T *</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#summary_1","title":"Summary","text":"<p>Pass an array to a function</p> <ul> <li>You cannot declare an array parameter. It is always a pointer.</li> <li>We often use another parameter to indicate the length of the array.</li> <li>Instead of returning an array, we create the result array and pass it to the function.</li> <li><code>T[N][M]</code> \\(\\to\\) <code>T (*)[M]</code></li> </ul> <p>Avoid unnecessary arrays.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) In fact, you can pass the address of an array:</p> <pre><code>void print_array_10(int (*pa)[10]) {\n  for (int i = 0; i &lt; 10; ++i)\n    printf(\"%d\\n\", (*pa)[i]);\n}\nint main(void) {\n  int a[10], b[100], c = 42;\n  print_array_10(&amp;a); // OK\n  print_array_10(&amp;b); // Error\n  print_array_10(&amp;c); // Error\n}\n</code></pre> <p>In the function <code>print_array_10</code> above, the parameter type is <code>int (*)[10]</code>, a pointer to an array of 10 <code>int</code>s. The pointee type must be <code>int[10]</code>. Passing the address of anything else to it would not work.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l6/l6.html#notes_1","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{2}}\\) In fact, the subscript operator is defined by the standard for pointers. In expressions like <code>a[i]</code> where <code>a</code> is an array, <code>a</code> undergoes the implicit array-to-pointer conversion. Such implicit conversion is so common that some people even treat arrays and pointers as the same thing, which is a common misunderstanding.</p> <p>\\({}^{\\textcolor{red}{3}}\\) See strict aliasing for detailed rules.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html","title":"CS100 Lecture 7","text":"<p>Pointers and Arrays III, Dynamic memory, Strings</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#contents","title":"Contents","text":"<ul> <li>Pointers and Arrays</li> <li>Pointers and <code>const</code></li> <li>The <code>void *</code> type</li> <li>Dynamic memory</li> <li>Strings</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#pointers-and-arrays","title":"Pointers and Arrays","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#recap-const-variables","title":"Recap: <code>const</code> variables","text":"<p>A <code>const</code> variable cannot be modified after initialization.</p> <ul> <li>It has type <code>const T</code> (or equivalently <code>T const</code>), where <code>T</code> is its original (unqualified) type.</li> <li>Any direct modification to a <code>const</code> variable is not allowed.</li> </ul> <p>The type of the expression <code>&amp;x</code>, where <code>x</code> is of type <code>const T</code>, is <code>const T *</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#pointer-to-const","title":"Pointer to <code>const</code>","text":"<p>A pointer to <code>const</code> is a pointer whose pointee type is <code>const</code>-qualified:</p> <pre><code>const int x = 42;\nint *pi = &amp;x; // Dangerous: It discards the const qualifier.\nconst int *cpi = &amp;x; // Better.\n</code></pre> <p>The type of <code>cpi</code> is <code>const int *</code> (or equivalently, <code>int const *</code>), which is a pointer to <code>const int</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#const-is-a-lock","title":"<code>const</code> is a \"lock\"","text":"<p><code>const</code> is like a lock, guarding against modifications to the variable.</p> <p>It is very dangerous to let a pointer to non-<code>const</code> point to a <code>const</code> variable: It is an attempt to remove the lock!</p> <ul> <li>Warning in C, error in C++.</li> </ul> <pre><code>const int x = 42;\nint *pi = &amp;x; // Dangerous: It discards the const qualifier.\nconst int *cpi = &amp;x; // Better.\n++*pi; // No error is generated by the compiler, but actually undefined behavior.\n</code></pre> <p>Any indirect modification to a <code>const</code> variable is undefined behavior.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#const-is-a-lock_1","title":"<code>const</code> is a \"lock\"","text":"<p><code>const</code> is like a lock, guarding against modifications to the variable.</p> <p>A pointer to <code>const</code> can point to a non-<code>const</code> variable: This is adding a lock.</p> <pre><code>int x = 42;\nint *pi = &amp;x;\nconst int *cpi = &amp;x; // OK.\n++*pi; // Correct, same as ++x.\n++*cpi; // Error!\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#const-is-a-lock_2","title":"<code>const</code> is a \"lock\"","text":"<p>A pointer to <code>const</code> can also point to a non-<code>const</code> variable: This is adding a lock.</p> <ul> <li>A pointer to <code>const</code> thinks that it is pointing to a <code>const</code> variable. Therefore, it does not allow you to modify the variable through it.</li> </ul> <pre><code>int x = 42;\nint *pi = &amp;x;\nconst int *cpi = &amp;x; // OK.\n++*pi; // Correct, same as ++x.\n++*cpi; // Error!\n</code></pre> <p>Such <code>const</code>ness on the pointee type is often called \"low-level <code>const</code>ness\".</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#const-can-be-helpful","title":"<code>const</code> can be helpful","text":"<p>It tells the compiler \"this variable should not be modified!\".</p> <pre><code>int count(const int *a, int n, int value) {\n  int cnt = 0;\n  for (int i = 0; i &lt; n; ++i)\n    if (a[i] = value) // Error: cannot modify a[i]\n      ++cnt;\n  return cnt;\n}\n</code></pre> <p>[Best practice] Use <code>const</code> whenever possible.</p> <p>We will see more usage of <code>const</code> in C++.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#top-level-constness","title":"Top-level <code>const</code>ness","text":"<p>A pointer itself can also be <code>const</code>. The type of such pointer is <code>PointeeType *const</code>.</p> <ul> <li>Such <code>const</code>ness is often called \"top-level <code>const</code>ness\".</li> </ul> <pre><code>int x = 42;\nint *const pc = &amp;x;\n++*pc; // OK.\nint y = 30;\npc = &amp;y; // Error.\n</code></pre> <p>A <code>const</code> pointer cannot switch to point to other variables after initialization.</p> <p>A pointer can have both low-level and top-level <code>const</code>ness:</p> <pre><code>const int *const cipc = &amp;x;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#void","title":"<code>void *</code>","text":"<p>A special pointer type:</p> <ul> <li>Any pointer can be implicitly converted to that type.</li> <li>A pointer of type <code>void *</code> can be implicitly converted to any pointer type.</li> <li>This must happen explicitly in C++.</li> <li>Use <code>printf(\"%p\", ptr);</code> to print the value of a pointer <code>ptr</code> of type <code>void *</code>.</li> <li> <p>If <code>ptr</code> is a pointer of some other type, a conversion is needed:</p> <p><code>c printf(\"%p\", (void *)ptr);</code></p> </li> </ul> <p>The C type system is weak. Many kinds of implicit conversions are very dangerous, although allowed by C.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#void_1","title":"<code>void *</code>","text":"<p>C does not have a static type system as powerful as C++'s. <code>void *</code> is often used to represent \"pointer to anything\", \"location of some memory\", or even \"any object\".</p> <ul> <li>Typically, the memory allocation function <code>malloc</code> (see below) returns <code>void *</code>, the address of the block of memory allocated.</li> <li>Memory does not have types. - We say \"a disk of 1TB\" instead of \"a disk that can hold \\(2^{38}\\) <code>int</code>s\".</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#dynamic-memory","title":"Dynamic memory","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#a-dynamic-array","title":"A \"dynamic array\"","text":"<p>Create an \"array\" whose size is determined at runtime?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#a-dynamic-array_1","title":"A \"dynamic array\"","text":"<p>Create an \"array\" whose size is determined at runtime?</p> <ul> <li>We need a block of memory, the size of which can be determined at runtime.</li> <li>If we run out of memory, we need to know.</li> <li>We may require a pretty large chunk of memory.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#stack-memory-vs-heap-dynamic-memory","title":"Stack memory vs heap (dynamic) memory","text":"- Stack memory is generally smaller than heap memory. - Stack memory is often used for storing local and temporary objects. - Heap memory is often used for storing large objects, and objects with long lifetime. - Operations on stack memory is faster than on heap memory. - Stack memory is allocated and deallocated automatically, while heap memory needs manual management."},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Declared in <code>&lt;stdlib.h&gt;</code>.</p> <pre><code>void *malloc(size_t size);\n</code></pre> <p>Allocates <code>size</code> bytes of uninitialized storage on heap.</p> <p>If allocation succeeds, returns the starting address of the allocated memory block.</p> <p>If allocation fails, a null pointer is returned.</p> <ul> <li><code>size_t</code>: A type that can hold the size (number of bytes) of any object. It is</li> <li>declared in <code>&lt;stddef.h&gt;</code>, and</li> <li>is an unsigned integer type,</li> <li>whose size is implementation-defined. For example, it may be 64-bit on a 64-bit machine, and 32-bit on a 32-bit machine.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free_1","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Declared in <code>&lt;stdlib.h&gt;</code>.</p> <pre><code>void *malloc(size_t size);\n</code></pre> <pre><code>T *ptr = malloc(sizeof(T) * n); // sizeof(T) * n bytes\nfor (int i = 0; i != n; ++i)\n  ptr[i] = /* ... */\n// Now you can use `ptr` as if it points to an array of `n` objects of type `T`\n// ...\nfree(ptr);\n</code></pre> <p>To avoid memory leaks, the starting address of that block memory must be passed to <code>free</code> when the memory is not used anymore.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free_2","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Declared in <code>&lt;stdlib.h&gt;</code>.</p> <pre><code>void free(void *ptr);\n</code></pre> <p>Deallocates the space previously allocated by an allocation function (such as <code>malloc</code>).</p> <p>If <code>ptr</code> is a null pointer, this function does nothing.</p> <ul> <li>There is no need to do a null check before calling <code>free</code>!</li> </ul> <p>The behavior is undefined if <code>ptr</code> is not equal to an address previously returned by an allocation function.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free_3","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Declared in <code>&lt;stdlib.h&gt;</code>.</p> <pre><code>void free(void *ptr);\n</code></pre> <p>Deallocates the space previously allocated by an allocation function (such as <code>malloc</code>).</p> <p>The behavior is undefined if the memory area referred to by <code>ptr</code> has already been deallocated.</p> <ul> <li>In other words, \"double <code>free</code>\" is undefined behavior (and often causes severe runtime errors).</li> </ul> <p>After <code>free(ptr)</code>, <code>ptr</code> no longer points to an existing object, so it is no longer dereferenceable.</p> <ul> <li>Often called a \"dangling pointer\".</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free_4","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>We can also create one single object dynamically (on heap):</p> <pre><code>int *ptr = malloc(sizeof(int));\n*ptr = 42;\nprintf(\"%d\\n\", *ptr);\n// ...\nfree(ptr);\n</code></pre> <p>But why? Why not just create one normal variable like <code>int ival = 42;</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free_5","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Benefit: The lifetime of a dynamically allocated object goes beyond a local scope.</p> <p>It is not destroyed until we <code>free</code> it.</p> <pre><code>int *create_array(void) {\n  int a[N];\n  return a; // Returns the address of the local object `a`.\n            // When the function returns, `a` will be destroyed, so that\n            // the returned address becomes invalid.\n            // Dereferencing the returned address is undefined behavior.\n}\nint *create_dynamic_array(int n) {\n  return malloc(sizeof(int) * n); // OK. The allocated memory is valid until\n                                  // we free it.\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free_6","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Create a \"2-d array\" on heap?</p> <pre><code>int **p = malloc(sizeof(int *) * n);\nfor (int i = 0; i &lt; n; ++i)\n  p[i] = malloc(sizeof(int) * m);\nfor (int i = 0; i &lt; n; ++i)\n  for (int j = 0; j &lt; m; ++j)\n    p[i][j] = /* ... */\n// ...\nfor (int i = 0; i &lt; n; ++i)\n  free(p[i]);\nfree(p);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-malloc-and-free_7","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Create a \"2-d array\" on heap? - Another way: Create a 1-d array of length <code>n * m</code>.</p> <pre><code>int *p = malloc(sizeof(int) * n * m);\nfor (int i = 0; i &lt; n; ++i)\n  for (int j = 0; j &lt; m; ++j)\n    p[i * m + j] = /* ... */ // This is the (i, j)-th entry.\n// ...\nfree(p);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#use-calloc","title":"Use <code>calloc</code>","text":"<p>Declared in <code>&lt;stdlib.h&gt;</code></p> <pre><code>void *calloc(size_t num, size_t each_size);\n</code></pre> <p>Allocates memory for an array of <code>num</code> objects (each of size <code>each_size</code>), and initializes all bytes in the allocated storage to zero \\({}^{\\textcolor{red}{1}}\\).</p> <p>Similar as <code>malloc(num * each_size)</code>. \\({}^{\\textcolor{red}{2}}\\) Returns a null pointer on failure.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#malloc-calloc-and-free","title":"<code>malloc</code>, <code>calloc</code> and <code>free</code>","text":"<p>The behaviors of <code>malloc(0)</code>, <code>calloc(0, N)</code> and <code>calloc(N, 0)</code> are implementation-defined:</p> <ul> <li>They may or may not allocate memory.</li> <li>If no memory is allocated, a null pointer is returned.</li> <li>They may allocate some memory, for some reasons. In that case, the address of the allocated memory is returned.</li> <li>You cannot dereference the returned pointer.</li> <li>It still constitutes memory leak if such memory is not <code>free</code>d.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#arrays-vs-malloc","title":"Arrays vs <code>malloc</code>","text":"<ul> <li>An array has limited lifetime (unless it is global or <code>static</code>). It is destroyed when control reaches the end of its scope.</li> <li>Objects allocated by <code>malloc</code> are not destroyed until their address is passed to <code>free</code>.</li> <li>The program crashes if the size of an array is too large (running out of stack memory). There is no way of recovery.</li> <li>Attempt to <code>malloc</code> a block of memory that is too large results in a null pointer. We can know if there is no enough heap memory by doing a null check.</li> </ul> <p><code>c   int *ptr = malloc(1ull &lt;&lt; 60); // unrealistic size   if (!ptr)     report_an_error(\"Out of memory.\");</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#summary","title":"Summary","text":"<p>Pointer to <code>const</code></p> <ul> <li>A pointer to <code>const</code> thinks that it is pointing to a <code>const</code> variable (though it may not), so it prevents you from modifying the pointed-to variable through it.</li> <li>Use <code>const</code> whenever possible.</li> </ul> <p><code>void *</code></p> <ul> <li>A pointer type that can contain anything.</li> <li>Often used for representing \"any pointer\", \"any object\", or memory address.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#summay","title":"Summay","text":"<p>Dynamic memory</p> <pre><code>void *malloc(size_t size);\nvoid *calloc(size_t num, size_t each_size);\nvoid free(void *ptr);\n</code></pre> <p><code>malloc</code>: Allocates <code>size</code> bytes of uninitialized memory and returns its starting address.</p> <p><code>calloc</code>: Allocates <code>num * each_size</code> bytes of memory \\({}^{\\textcolor{red}{2}}\\), each byte initialized to zero, and returns its starting address.</p> <p>Both <code>malloc</code> and <code>calloc</code> return a null pointer on failure.</p> <p><code>free</code>: Deallocates the memory block starting at <code>ptr</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#strings","title":"Strings","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#c-style-strings","title":"C-style strings","text":"<p>C does not have a special construct for \"string\".</p> <p>A string is a sequence of characters stored contiguously. We often use an array or a pointer to the first character to represent a string.</p> <ul> <li>It can be stored in an array, or in dynamically allocated memory.</li> <li>It must be null-terminated: There should be a null character <code>'\\0'</code> at the end.</li> </ul> <pre><code>char s[10] = \"abcde\";  // s = {'a', 'b', 'c', 'd', 'e', '\\0'}\nprintf(\"%s\\n\", s);     // prints abcde\nprintf(\"%s\\n\", s + 1); // prints bcde\ns[2] = ';';            // s = \"ab;de\"\nprintf(\"%s\\n\", s);     // prints ab;de\ns[2] = '\\0';\nprintf(\"%s\\n\", s);     // prints ab\n</code></pre> <p>The position of the first <code>'\\0'</code> is the end of the string. Anything after that is discarded.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#the-null-character-0","title":"The null character <code>'\\0'</code>","text":"<p><code>'\\0'</code> is the \"null character\" whose ASCII value is 0.</p> <p>It is the only way to mark the end of a C-style string.</p> <p>Every standard library function that handles strings will search for <code>'\\0'</code> in that string.</p> <ul> <li>If there is no <code>'\\0'</code>, they will search nonstop, and eventually go out of range (undefined behavior).</li> </ul> <pre><code>char s[5] = \"abcde\"; // OK, but no place for '\\0'.\nprintf(\"%s\\n\", s);   // undefined behavior (missing '\\0')\n</code></pre> <p>Remember to allocate one more byte storage for <code>'\\0'</code>!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#empty-string","title":"Empty string","text":"<p>An empty string contains no characters before the null character.</p> <pre><code>char empty[] = \"\"; // `empty` is of type char[1], which contains only '\\0'.\nprintf(\"%s\\n\", empty); // Prints only a newline.\nprintf(\"\"); // Nothing is printed\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-io","title":"String I/O","text":"<p><code>scanf</code>/<code>printf</code>: <code>\"%s\"</code> - <code>%s</code> in <code>scanf</code> matches a sequence of non-whitespace characters.   - Leading whitespaces are discarded.   - Reading starts from the first non-whitespace character, and stops right before the next whitespace character.   - <code>'\\0'</code> will be placed at the end.</p> <p>Suppose the input is <code>123  456</code>:</p> <pre><code>char str[100] = \"abcdef\";\nscanf(\"%s\", str); // Reads \"123\". `str` becomes {'1', '2', '3', '\\0', 'e', 'f'}\nprintf(\"%s\\n\", str); // Prints \"123\".\n                     // 'e' and 'f' are not considered as part of the string.\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-io_1","title":"String I/O","text":"<p><code>scanf</code> is not memory safe:</p> <pre><code>char str[10];\nscanf(\"%s\", str);\n</code></pre> <ul> <li><code>str</code> is decayed (implicitly converted) to <code>char *</code> when passed as an argument.</li> <li><code>scanf</code> receives only a pointer <code>char *</code>. It has no idea how big the array is.</li> <li>If the input content has more than 9 characters, it causes disaster!</li> </ul> <p>That's why it is banned by MSVC. An alternative is to use <code>scanf_s</code>, but not necessarily supported by every compiler.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-io_2","title":"String I/O","text":"<p><code>gets</code> reads a string without bounds checking. It has been removed since C11.</p> <ul> <li>An alternative for <code>gets</code> that does bounds checking is <code>gets_s</code>, but not supported by every compiler.</li> </ul> <p>The best alternative: <code>fgets</code>. It is more portable, more generic, and safer (with bounds checking).</p> <pre><code>char str[100];\nfgets(str, 100, stdin);\n</code></pre> <p><code>puts(str)</code>: Prints the string <code>str</code>, followed by a newline.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-io_3","title":"String I/O","text":"<p>Homework Read the cppreference documentation for <code>fgets</code>. Answer the following questions:</p> <ul> <li>How many characters does it read at most?</li> <li>When does it stop?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-manipulation-examination","title":"String manipulation / examination","text":"<p>Some common standard library functions: declared in <code>&lt;string.h&gt;</code>.</p> <ul> <li><code>strlen(str)</code>: Returns the length of the string <code>str</code>.</li> <li><code>strcpy(dest, src)</code>: Copies the string <code>src</code> to <code>dest</code>.</li> <li><code>strcat(dest, src)</code>: Appends a copy of <code>src</code> to the end of <code>dest</code>.</li> <li><code>strcmp(s1, s2)</code>: Compares two strings in lexicographical order.</li> <li><code>strchr(str, ch)</code>: Finds the first occurrence of <code>ch</code> in <code>str</code>.</li> </ul> <p>This page is only a brief introduction which cannot be relied on. The detailed documentations can be found here.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-manipulation-examination_1","title":"String manipulation / examination","text":"<p>Read the documentation of a function before using it.</p> <ul> <li>Is <code>'\\0'</code> counted in <code>strlen</code>?</li> <li>Does <code>strcpy</code> put a null character at the end? What about <code>strncpy</code>?</li> <li>For <code>strcpy(dest, src)</code>, what will happen if <code>dest</code> and <code>src</code> refer to the same memory address? What if they overlap? What about <code>strcat</code>?</li> <li>What is the result of <code>strcmp</code>? Is it \\(\\in\\{-1,0,1\\}\\)? Is it <code>true</code>/<code>false</code>?</li> </ul> <p>If you use the function without making these clear, you are heading for late-night debugging sessions!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#exercise-implement-strlen","title":"Exercise: Implement <code>strlen</code>","text":"<p>Implement your own <code>strlen</code>, which accepts a pointer to the first character of a string and returns its length.</p> <p>The length of a string does not count the null character <code>'\\0'</code> in.</p> <ul> <li><code>strlen(\"hello\")</code> is <code>5</code>, not <code>6</code>.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#exercise-implement-strlen_1","title":"Exercise: Implement <code>strlen</code>","text":"<p>Implement your own <code>strlen</code>, which accepts a pointer to the first character of a string and returns its length.</p> <pre><code>size_t my_strlen(const char *str) {\n  size_t ans = 0;\n  while (*str != '\\0') {\n    ++ans;\n    ++str;\n  }\n  return ans;\n}\n</code></pre> <pre><code>size_t my_strlen(const char *str) {\n  const char *end = str;\n  while (*end != '\\0')\n    ++end;\n  return end - str;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#exercise-implement-strlen_2","title":"Exercise: Implement <code>strlen</code>","text":"<p>Implement your own <code>strlen</code>, which accepts a pointer to the first character of a string and returns its length.</p> <pre><code>size_t my_strlen(const char *str) {\n  size_t ans = 0;\n  while (*str++ != '\\0') // Understand and learn to use this.\n    ++ans;\n  return ans;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#strlen","title":"<code>strlen</code>","text":"<p>There is no magic in <code>strlen</code>. It traverses the entire string and counts the characters, which is very slow.</p> <p>Do not call <code>strlen</code> repeatedly!</p> <pre><code>for (size_t i = 0; i &lt; strlen(s); ++i) // very slow\n  // ...\n</code></pre> <ul> <li>At the end of each iteration, the condition <code>i &lt; strlen(s)</code> is evaluated, which causes the entire string to be traversed.</li> <li>The time complexity of this loop is \\(O\\left(n^2\\right)\\).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#strlen_1","title":"<code>strlen</code>","text":"<p>There is no magic in <code>strlen</code>. It traverses the entire string and counts the characters, which is very slow.</p> <p>Do not call <code>strlen</code> repeatedly!</p> <pre><code>for (size_t i = 0; i &lt; strlen(s); ++i) // very slow\n  // ...\n</code></pre> <p>Change it to:</p> <pre><code>int n = strlen(s);\nfor (int i = 0; i &lt; n; ++i)\n  // ...\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#conversions-to-and-from-numeric-formats","title":"Conversions to and from numeric formats","text":"<p>Full list can be found here.</p> <p><code>strtol</code>, <code>strtoll</code>, <code>strtoul</code>, <code>strtoull</code>, <code>strtof</code>, <code>strtod</code>, <code>strtold</code>: Extracts the numeric value from a string.</p> <ul> <li>These are better alternatives to <code>atoi</code>, <code>atol</code>, ...: The base can be customized, and they have better error-reporting mechanisms.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-literals","title":"String literals","text":"<p>A string literal is something like <code>\"abcde\"</code>, surrounded by double quotes <code>\"</code>.</p> <ul> <li>The type of a string literal is <code>char [N+1]</code>, where <code>N</code> is the length of the string.</li> <li><code>+1</code> is for the terminating null character.</li> <li>But a string literal will be placed in read-only memory!!</li> <li>In C++, its type is <code>const char [N+1]</code>, which is more reasonable.</li> </ul> <p>When initializating a pointer with a string literal,</p> <pre><code>char *p = \"abcde\";\n</code></pre> <p>we are actually letting <code>p</code> point to the address of the string literal.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#string-literals_1","title":"String literals","text":"<p>Using a pointer to non-<code>const</code> to point to a string literal is allowed in C (not allowed in C++), but very dangerous:</p> <pre><code>char *p = \"abcde\"; // OK\np[3] = 'a'; // No compile-error, but undefined behavior,\n            // and possibly severe runtime-error.\n</code></pre> <p>Correct ways:</p>   Use low-level `const`ness to protect it:   <pre><code>const char *str = \"abcde\";\nstr[3] = 'a'; // compile-error\n</code></pre>   **Copy** the contents into an array:   <pre><code>char arr[] = \"abcde\";\narr[3] = 'a'; // OK.\n// `arr` contains a copy of \"abcde\".\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#array-of-strings","title":"Array of strings","text":"<pre><code>const char *translations[] = {\n  \"zero\", \"one\", \"two\", \"three\", \"four\",\n  \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n};\n</code></pre>   - `translations` is an array of pointers, where each pointer points to a string literal. - `translations` **is not a 2-d array!**"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#summary_1","title":"Summary","text":"<p>A C-style string is a sequence of characters stored contiguously, with <code>'\\0'</code> at the end.</p> <ul> <li>Never forget the null character <code>'\\0'</code>.</li> <li>String literals are not modifiable, even though their types are not <code>const</code>.</li> <li>It's better to use a pointer to <code>const</code> to point to a string literal.</li> <li>I/O: <code>scanf</code>/<code>printf</code>, <code>fgets</code>, <code>puts</code></li> <li>String manipulation / examination functions like <code>strlen</code>, <code>strcmp</code>, <code>strcpy</code>, ...</li> <li>Conversions to and from numeric formats: <code>strtol</code>, <code>strtoll</code>, ...</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#exercises","title":"Exercises","text":"<p>Implement your own <code>strlen</code>, <code>strchr</code>, <code>strcmp</code>, <code>strcpy</code> and <code>strcat</code>. This will be in homework.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l7/l7.html#notes","title":"Notes","text":"<p>\\({}^{\\textcolor{red}{1}}\\) \"All bytes zero\" does not necessarily mean <code>0.0</code> for floating point or null pointer value for pointers, although it does for most modern computers and compilers.</p> <p>\\({}^{\\textcolor{red}{2}}\\) Due to the alignment requirements, the number of allocated bytes is not necessarily equal to <code>num * each_size</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html","title":"CS100 Lecture 8","text":"<p>Dynamic Memory and Strings Revisited</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#contents","title":"Contents","text":"<ul> <li>Recap</li> <li>Command line arguments</li> <li>Example: Read a string of unknown length</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#recap","title":"Recap","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#stack-memory-vs-heap-dynamic-memory","title":"Stack memory vs heap (dynamic) memory","text":"- Stack memory is generally smaller than heap memory. - Stack memory is often used for storing local and temporary objects. - Heap memory is often used for storing large objects, and objects with long lifetime. - Operations on stack memory is faster than on heap memory. - Stack memory is allocated and deallocated automatically, while heap memory needs manual management."},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-malloc","title":"Use <code>malloc</code>","text":"<ul> <li>Allocate memory for an <code>int</code>?</li> <li>Allocate memory for \\(100\\) <code>int</code>s?</li> <li>Allocate memory for a \"2-d\" array with \\(n\\) rows and \\(m\\) columns?</li> <li>Test allocation failure?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-malloc_1","title":"Use <code>malloc</code>","text":"<ul> <li>Allocate memory for an <code>int</code>?</li> </ul> <p><code>c   int *p = malloc(sizeof(int));   *p = 42;   printf(\"%d\\n\", *p);</code> - Allocate memory for \\(n\\) <code>int</code>s?</p> <p><code>c   int *p = malloc(sizeof(int) * n);   for (int i = 0; i &lt; n; ++i)     scanf(\"%d\", p + i); // What does `p + i` mean?</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-malloc_2","title":"Use <code>malloc</code>","text":"<ul> <li>Allocate memory for a \"2-d\" array with \\(n\\) rows and \\(m\\) columns?</li> </ul> <pre><code>int **p = malloc(sizeof(int *) * n);\nfor (int i = 0; i &lt; n; ++i)\n  p[i] = malloc(sizeof(int) * m);\n\nfor (int i = 0; i &lt; n; ++i)\n  for (int j = 0; j &lt; m; ++j)\n    scanf(\"%d\", &amp;p[i][j]);\n</code></pre>   `p` is a pointer to pointer to `int`, - pointing to a sequence of pointers, - each pointing to a sequence of `int`s."},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-malloc_3","title":"Use <code>malloc</code>","text":"<ul> <li>Allocate memory for a \"2-d\" array with \\(n\\) rows and \\(m\\) columns?</li> </ul> <p>Another way: Allocate a \"1-d\" array of \\(nm\\) elements:</p> <p><code>c   int *p = malloc(sizeof(int) * n * m);   for (int i = 0; i &lt; n; ++i)     for (int j = 0; j &lt; m; ++j)       scanf(\"%d\", &amp;a[i * m + j]); // a[i * m + j] is the (i, j)-th entry</code></p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-free","title":"Use <code>free</code>","text":"<ul> <li>What pointer should be passed to <code>free</code>?</li> <li>What does <code>free(NULL)</code> do?</li> <li>What if we forget to <code>free</code>?</li> <li>After a call to <code>free(ptr)</code>, what is the value of <code>ptr</code>?</li> <li>What will happen if we <code>free</code> an address twice?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-free_1","title":"Use <code>free</code>","text":"<ul> <li> <p>What pointer should be passed to <code>free</code>?</p> </li> <li> <p>The pointer must be either null or equal to a value returned earlier by an allocation function (one of <code>malloc</code>, <code>calloc</code>, <code>aligned_alloc</code> and <code>realloc</code>).</p> </li> <li> <p>What does <code>free(NULL)</code> do?</p> </li> <li> <p>Nothing.</p> </li> <li> <p>What if we forget to <code>free</code>?</p> </li> <li> <p>Memory leak.</p> </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-free_2","title":"Use <code>free</code>","text":"<ul> <li> <p>After a call to <code>free(ptr)</code>, what is the value of <code>ptr</code>?</p> </li> <li> <p><code>ptr</code> becomes a dangling pointer, which cannot be dereferenced.</p> </li> <li> <p>What will happen if we <code>free</code> an address twice?</p> </li> <li> <p>Undefined behavior (and is often severe runtime error).</p> </li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-malloc-and-free","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Which of the following pieces of code deallocate(s) the memory correctly?</p> <pre><code>int *p = malloc(sizeof(int) * 100);\n</code></pre> <ul> <li><code>free(p);</code></li> <li><code>for (int i = 0; i &lt; 100; ++i) free(p + i);</code></li> <li><code>free(p + 50); free(p);</code></li> <li><code>for (int i = 0; i &lt; 10; ++i) free(p + i * 10);</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use-malloc-and-free_1","title":"Use <code>malloc</code> and <code>free</code>","text":"<p>Which of the following pieces of code deallocate(s) the memory correctly?</p> <pre><code>int *p = malloc(sizeof(int) * 100);\n</code></pre> <ul> <li><code>free(p);</code> Yes</li> <li><code>for (int i = 0; i &lt; 100; ++i) free(p + i);</code> No</li> <li><code>free(p + 50); free(p);</code> No</li> <li><code>for (int i = 0; i &lt; 10; ++i) free(p + i * 10);</code> No</li> </ul> <p>You cannot deallocate only a part of the memory block!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#strings","title":"Strings","text":"<ul> <li>What is a string in C?</li> <li>How can we obtain the length of a string?</li> <li>How do we read / write a string?</li> <li>How does a function accept and handle a string?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#strings_1","title":"Strings","text":"<ul> <li>What is a string in C?</li> <li>A sequence of characters stored contiguously, with <code>'\\0'</code> at the end.</li> <li>How can we obtain the length of a string?</li> <li><code>strlen(s)</code></li> <li>How do we read / write a string?</li> <li><code>scanf</code> / <code>printf</code> with <code>\"%s\"</code></li> <li><code>fgets</code>, <code>puts</code></li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#strings_2","title":"Strings","text":"<ul> <li> <p>How does a function accept and handle a string?</p> </li> <li> <p>The function accepts a <code>char *</code>, indicating the start of the string.</p> </li> <li>The end of the string is found by searching for the first appearance of <code>'\\0'</code>.</li> <li>What is the result of <code>printf(NULL)</code>?</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#strings_3","title":"Strings","text":"<ul> <li> <p>How does a function accept and handle a string?</p> </li> <li> <p>The function accepts a <code>char *</code>, indicating the start of the string.</p> </li> <li>The end of the string is found by searching for the first appearance of <code>'\\0'</code>.</li> <li>What is the result of <code>printf(NULL)</code>?<ul> <li>Undefined behavior! <code>printf</code> expects a string for the first argument, which should contain at least a character <code>'\\0'</code>.</li> </ul> </li> </ul> <p>* Differentiate between the null character <code>'\\0'</code>, the empty string <code>\"\"</code> and the null pointer <code>NULL</code>.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#command-line-arguments","title":"Command line arguments","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#command-line-arguments_1","title":"Command line arguments","text":"<p>The following command executes <code>gcc.exe</code>, and tells it the file to be compiled and the name of the output:</p> <pre><code>gcc hello.c -o hello\n</code></pre> <p>How are the arguments <code>hello.c</code>, <code>-o</code> and <code>hello</code> passed to <code>gcc.exe</code>?</p> <ul> <li>It is definitely different from \"input\".</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#a-new-signature-of-main","title":"A new signature of <code>main</code>","text":"<pre><code>int main(int argc, char **argv) { /* body */ }\n</code></pre> <p>Run this program with some arguments: <code>.\\program one two three</code></p> <pre><code>int main(int argc, char **argv) {\n  for (int i = 0; i &lt; argc; ++i)\n    puts(argv[i]);\n}\n</code></pre> <p>Output:</p> <pre><code>.\\program\none\ntwo\nthree\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#a-new-signature-of-main_1","title":"A new signature of <code>main</code>","text":"<pre><code>int main(int argc, char **argv) { /* body */ }\n</code></pre> <p>where</p> <ul> <li><code>argc</code> is a non-negative value representing the number of arguments passed to the program from the environment in which the program is run.</li> <li><code>argv</code> is a pointer to the first element of an array of <code>argc + 1</code> pointers, of which</li> <li>the last one is null, and</li> <li>the previous ones (if any) point to strings that represent the arguments.</li> </ul> <p>If <code>argv[0]</code> is not null (or equivalently, if <code>argc &gt; 0</code>), it points to a string representing the program name.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#command-line-arguments_2","title":"Command line arguments","text":"<pre><code>int main(int argc, char **argv) { /* body */ }\n</code></pre> <p><code>argv</code> is an array of pointers that point to the strings representing the arguments:</p> <p> </p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#example-read-a-string-of-unknown-length","title":"Example: Read a string of unknown length","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#read-a-string","title":"Read a string","text":"<p><code>fgets(str, count, stdin)</code> reads a string, but at most <code>count - 1</code> characters.</p> <p><code>scanf(\"%s\", str)</code> reads a string, but not caring about whether the input content is too long to fit into the memory that <code>str</code> points to.</p> <p>For example, the following code is likely to crash if the input is <code>responsibility</code>:</p> <pre><code>char word[6];\nscanf(\"%s\", word);\n</code></pre> <p><code>scanf</code> does nothing to prevent the disaster.</p> <ul> <li>It does not even know how long the array <code>word</code> is!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#read-a-string-of-unknown-length","title":"Read a string of unknown length","text":"<p>Suppose we want to read a sequence of non-whitespace characters, the length of which is unknown.</p> <ul> <li>Use <code>malloc</code> / <code>free</code> to allocate and deallocate memory dynamically.</li> <li>When the current buffer is not large enough, we allocate a larger one and copies the stored elements to it!</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#ignore-leading-whitespaces","title":"Ignore leading whitespaces:","text":"<pre><code>char *read_string(void) {\n  char c = getchar();\n  while (isspace(c))\n    c = getchar();\n\n\n\n\n\n\n\n\n\n\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#set-a-buffer-with-initial-capacity","title":"Set a buffer with initial capacity.","text":"<pre><code>char *read_string(void) {\n  char c = getchar();\n  while (isspace(c))\n    c = getchar();\n\n  char *buffer = malloc(INITIAL_SIZE);\n  int capacity = INITIAL_SIZE;\n  int cur_pos = 0; // The index at which we store the input character.\n\n\n\n\n\n\n\n\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#write-a-loop-to-read-and-store-characters","title":"Write a loop to read and store characters.","text":"<pre><code>char *read_string(void) {\n  // ignore leading whitespaces\n\n  char *buffer = malloc(INITIAL_SIZE);\n  int capacity = INITIAL_SIZE;\n  int cur_pos = 0; // The index at which we store the input character.\n\n  while (!isspace(c)) {\n    if (cur_pos == capacity - 1) { // `-1` is for '\\0'.\n\n\n    }\n    buffer[cur_pos++] = c;\n    c = getchar();\n  }\n\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#when-the-buffer-is-full-allocate-a-new-one-twice-as-large","title":"When the buffer is full, allocate a new one twice as large.","text":"<pre><code>char *read_string(void) {\n  // ...\n  while (!isspace(c)) {\n    if (cur_pos == capacity - 1) { // `-1` is for '\\0'.\n      char *new_buffer = malloc(capacity * 2);\n      memcpy(new_buffer, buffer, cur_pos); // copy everything we have stored\n                                           // to the new buffer\n      capacity *= 2;\n      buffer = new_buffer;\n    }\n    buffer[cur_pos++] = c;\n    c = getchar();\n  }\n\n}\n</code></pre> <p>* Are we done?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#do-not-forget-to-free","title":"Do not forget to <code>free</code>!","text":"<pre><code>char *read_string(void) {\n  // ...\n  while (!isspace(c)) {\n    if (cur_pos == capacity - 1) { // `-1` is for '\\0'.\n      char *new_buffer = malloc(capacity * 2);\n      memcpy(new_buffer, buffer, cur_pos); // copy everything we have stored\n                                           // to the new buffer\n      free(buffer);  // !!!!!!!!!!!\n      capacity *= 2;\n      buffer = new_buffer;\n    }\n    buffer[cur_pos++] = c;\n    c = getchar();\n  }\n\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#dont-consume-more-than-what-we-need-from-the-input","title":"Don't consume more than what we need from the input.","text":"<pre><code>char *read_string(void) {\n  // ...\n  while (!isspace(c)) {\n    if (cur_pos == capacity - 1) { // `-1` is for '\\0'.\n      // ...\n    }\n    buffer[cur_pos++] = c;\n    c = getchar();\n  }\n\n  // Now, `c` is a whitespace. This is not part of the contents we need.\n  ungetc(c, stdin); // Put that whitespace back to the input.\n\n  return buffer;\n}\n</code></pre> <p>* Are we done?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#dont-forget-the-null-character","title":"Don't forget the null character!","text":"<pre><code>char *read_string(void) {\n  // ...\n  while (!isspace(c)) {\n    if (cur_pos == capacity - 1) { // `-1` is for '\\0'.\n      // ...\n    }\n    buffer[cur_pos++] = c;\n    c = getchar();\n  }\n\n  // Now, `c` is a whitespace. This is not part of the contents we need.\n  ungetc(c, stdin); // Put that whitespace back to the input.\n\n  buffer[cur_pos] = '\\0'; // Remember this!!!\n\n  return buffer;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l8/l8.html#use","title":"Use","text":"<pre><code>int main(void) {\n  char *content = read_string();\n  puts(content);\n  free(content);\n}\n</code></pre> <p>Remember to <code>free</code> it after use!</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html","title":"CS100 Lecture 9","text":"<p><code>struct</code>, Recursion</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#contents","title":"Contents","text":"<ul> <li><code>struct</code></li> <li> <p>Recursion</p> </li> <li> <p>Factorial</p> </li> <li>Print a non-negative integer</li> <li>Selection-sort</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#struct","title":"<code>struct</code>","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#struct-type","title":"<code>struct</code> type","text":"<p>The name of the type defined by a <code>struct</code> is <code>struct Name</code>.</p> <ul> <li>Unlike C++, the keyword <code>struct</code> here is necessary.</li> </ul> <pre><code>struct Student stu; // `stu` is an object of type `struct Student`\nstruct Point3d polygon[1000]; // `polygon` is an array of 1000 objects,\n                              // each being of type `struct Point3d`.\nstruct TreeNode *pNode; // `pNode` is a pointer to `struct TreeNode`.\n</code></pre> <p>* The term \"object\" is used interchangeably with \"variable\".</p> <ul> <li>Objects often refer to variables of <code>struct</code> (or <code>class</code> in C++) types.</li> <li>But in fact, there's nothing wrong to say \"an <code>int</code> object\".</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#members-of-a-struct","title":"Members of a <code>struct</code>","text":"<p>Use <code>obj.mem</code>, the member-access operator <code>.</code> to access a member.</p> <pre><code>struct Student stu;\nstu.name = \"Alice\";\nstu.id = \"2024533000\";\nstu.entrance_year = 2024;\nstu.dorm = 8;\nprintf(\"%d\\n\", student.dorm);\n++student.entrance_year;\nputs(student.name);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#dynamic-allocation","title":"Dynamic allocation","text":"<p>Create an object of <code>struct</code> type dynamically: Just allocate <code>sizeof(struct Student)</code> bytes of memory.</p> <pre><code>struct Student *pStu = malloc(sizeof(struct Student));\n</code></pre> <p>Member access through a pointer: <code>ptr-&gt;mem</code>, or <code>(*ptr).mem</code> (not <code>*ptr.mem</code>!).</p> <pre><code>pStu-&gt;name = \"Alice\";\npStu-&gt;id = \"2024533000\";\n(*pStu).entrance_year = 2024; // equivalent to pStu-&gt;entrance_year = 2024;\nprintf(\"%d\\n\", pStu-&gt;entrance_year);\nputs(pStu-&gt;name);\n</code></pre> <p>As usual, don't forget to <code>free</code> after use.</p> <pre><code>free(pStu);\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#size-of-a-struct","title":"Size of a <code>struct</code>","text":"<pre><code>struct Student {\n  const char *name;\n  const char *id;\n  int entrance_year;\n  int dorm;\n};\n</code></pre> <pre><code>struct Student *pStu = malloc(sizeof(struct Student));\n</code></pre> <p>What is the value of <code>sizeof(struct Student)</code>?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#size-of-struct","title":"Size of <code>struct</code>","text":"<p>It is guaranteed that</p> \\[ \\mathtt{sizeof(struct\\ \\ X)}\\geqslant\\sum_{\\mathtt{member}\\in\\mathtt{X}}\\mathtt{sizeof(member)}. \\] <p>The inequality is due to memory alignment requirements, which is beyond the scope of CS100.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#implicit-initialization","title":"Implicit initialization","text":"<p>What happens if an object of <code>struct</code> type is not explicitly initialized?</p> <pre><code>struct Student gStu;\n\nint main(void) {\n  struct Student stu;\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#implicit-initialization_1","title":"Implicit initialization","text":"<p>What happens if an object of <code>struct</code> type is not explicitly initialized?</p> <pre><code>struct Student gStu;\n\nint main(void) {\n  struct Student stu;\n}\n</code></pre> <ul> <li>Global or local <code>static</code>: \"empty-initialization\", which performs member-wise empty-initialization.</li> <li>Local non-<code>static</code>: every member is initialized to indeterminate values (in other words, uninitialized).</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#explicit-initialization","title":"Explicit initialization","text":"<p>Use an initializer list:</p> <pre><code>struct Student stu = {\"Alice\", \"2024533000\", 2024, 8};\n</code></pre> <p>Use C99 designators: (highly recommended)</p> <pre><code>struct Student stu = {.name = \"Alice\", .id = \"2024533000\",\n                      .entrance_year = 2024, .dorm = 8};\n</code></pre> <p>The designators greatly improve the readability.</p> <p>[Best practice] Use designators, especially for <code>struct</code> types with lots of members.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#compound-literals","title":"Compound literals","text":"<pre><code>struct Student *student_list = malloc(sizeof(struct Student) * n);\nfor (int i = 0; i != n; ++i) {\n  student_list[i].name = A(i); // A, B, C and D are some functions\n  student_list[i].id = B(i);\n  student_list[i].entrance_year = C(i);\n  student_list[i].dorm = D(i);\n}\n</code></pre> <p>Use a compound literal to make it clear and simple:</p> <pre><code>struct Student *student_list = malloc(sizeof(struct Student) * n);\nfor (int i = 0; i != n; ++i) {\n  student_list[i] = (struct Student){.name = A(i), .id = B(i),\n                                     .entrance_year = C(i), .dorm = D(i)};\n}\n\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#struct-typed-parameters","title":"<code>struct</code>-typed parameters","text":"<p>The semantic of argument passing is copy:</p> <pre><code>void print_student(struct Student s) {\n  printf(\"Name: %s, ID: %s, dorm: %d\\n\", s.name, s.id, s.dorm);\n}\n\nprint_student(student_list[i]);\n</code></pre> <p>In a call <code>print_student(student_list[i])</code>, the parameter <code>s</code> of <code>print_student</code> is initialized as follows:</p> <pre><code>struct Student s = student_list[i];\n</code></pre> <p>The copy of a <code>struct</code>-typed object: Member-wise copy.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#struct-typed-parameters_1","title":"<code>struct</code>-typed parameters","text":"<p>In a call <code>print_student(student_list[i])</code>, the parameter <code>s</code> of <code>print_student</code> is initialized as follows:</p> <pre><code>struct Student s = student_list[i];\n</code></pre> <p>The copy of a <code>struct</code>-typed object: Member-wise copy. It is performed as if</p> <pre><code>s.name = student_list[i].name;\ns.id = student_list[i].id;\ns.entrance_year = student_list[i].entrance_year;\ns.dorm = student_list[i].dorm;\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#return-a-struct-typed-object","title":"Return a <code>struct</code>-typed object","text":"<p>Strictly speaking, returning is also a copy:</p> <pre><code>struct Student fun(void) {\n  struct Student s = something();\n  some_operations(s);\n  return s;\n}\nstudent_list[i] = fun();\n</code></pre> <p>The object <code>s</code> is returned as if</p> <pre><code>student_list[i] = s;\n</code></pre> <p>But in fact, the compiler is more than willing to optimize this process. We will talk more about this in C++.</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#array-member","title":"Array member","text":"<pre><code>struct A {\n  int array[10];\n  // ...\n};\n</code></pre> <p>Although an array cannot be copied, an array member can be copied.</p> <p>The copy of an array is element-wise copy.</p> <pre><code>int a[10];\nint b[10] = a; // Error!\n</code></pre> <pre><code>struct A a;\nstruct A b = a; // OK\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#summary","title":"Summary","text":"<p>A <code>struct</code> is a type consisting of a sequence of members.</p> <ul> <li>Member access: <code>obj.mem</code>, <code>ptr-&gt;mem</code> (equivalent to <code>(*ptr).mem</code>, but better)</li> <li> <p><code>sizeof(struct A)</code>, no less than the sum of size of every member.</p> </li> <li> <p>But not necessarily equal, due to memory alignment requirements.</p> </li> <li>Implicit initialization: recursively performed on every member.</li> <li>Initializer-lists, designators, compound literals.</li> <li>Copy of a <code>struct</code>: member-wise copy.</li> <li>Argument passing and returning: copy.</li> </ul>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#recursion","title":"Recursion","text":""},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#problem-1-calculate-n","title":"Problem 1. Calculate \\(n!\\)","text":"<pre><code>int factorial(int n) {\n  return n == 0 ? 1 : n * factorial(n - 1);\n}\n</code></pre> <p>This is perfectly valid and reasonable C code!</p> <ul> <li>The function <code>factorial</code> recursively calls itself.Problem 2. Print a non-negative integer</li> </ul> <p>If we only have <code>getchar</code>, how can we read an integer?</p> <ul> <li>We have solved this in recitations.</li> </ul> <p>If we only have <code>putchar</code>, how can we print an integer?</p> <ul> <li>Declared in <code>&lt;stdio.h&gt;</code>.</li> <li><code>putchar(c)</code> prints a character <code>c</code>. That's it.</li> </ul> <p>For convenience, suppose the integer is non-negative (unsigned).</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#print-a-non-negative-integer","title":"Print a non-negative integer","text":"<p>To print \\(x\\):</p> <ul> <li>If \\(x &lt; 10\\), just print the digit and we are done.</li> <li>Otherwise (\\(x\\geqslant 10\\)), we first print \\(\\displaystyle\\left\\lfloor\\frac{x}{10}\\right\\rfloor\\), and then print the digit on the last place.</li> </ul> <pre><code>void print(unsigned x) {\n  if (x &lt; 10)\n    putchar(x + '0'); // Remember ASCII?\n  else {\n    print(x / 10);\n    putchar(x % 10 + '0');\n  }\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#simplify-the-code","title":"Simplify the code","text":"<p>To print \\(x\\):</p> <ol> <li>If \\(x\\geqslant 10\\), we first print \\(\\displaystyle\\left\\lfloor\\frac{x}{10}\\right\\rfloor\\). Otherwise, do nothing.</li> <li>Print \\(x\\bmod 10\\).</li> </ol> <pre><code>void print(unsigned x) {\n  if (x &gt;= 10)\n    print(x / 10);\n  putchar(x % 10 + '0');\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#print-a-non-negative-integer_1","title":"Print a non-negative integer","text":"<p>To print \\(x\\):</p> <ol> <li>If \\(x\\geqslant 10\\), we first print \\(\\displaystyle\\left\\lfloor\\frac{x}{10}\\right\\rfloor\\). Otherwise, do nothing.</li> <li>Print \\(x\\bmod 10\\).</li> </ol> <pre><code>void print(unsigned x) {\n  if (x &gt;= 10)\n    print(x / 10);\n  putchar(x % 10 + '0');\n}\n</code></pre>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#design-a-recursive-algorithm","title":"Design a recursive algorithm","text":"<p>Suppose we are given a problem of scale \\(n\\).</p> <ol> <li>Divide the problem into one or more subproblems, which are of smaller scales.</li> <li>Solve the subproblems recursively by calling the function itself.</li> <li>Generate the answer to the big problem from the answers to the subproblems.</li> </ol> <p>* Feels like mathematical induction?</p>"},{"location":"CS100%28C%26C%2B%2B%29/slides/l9/l9.html#problem-3-selection-sort","title":"Problem 3. Selection-sort","text":"<p>How do you sort a sequence of \\(n\\) numbers? (In ascending order)</p> <p>Do it recursively.</p> <p>How do you sort a sequence of \\(n\\) numbers \\(\\langle a_0,\\cdots,a_{n-1}\\rangle\\)? (In ascending order)</p> <p>Do it recursively: Suppose we are going to sort \\(\\langle a_k,a_{k+1},\\cdots,a_{n-1}\\rangle\\), for some \\(k\\).</p> <ul> <li>If \\(k=n-1\\), we are done.</li> <li>Otherwise (\\(k&lt;n-1\\)):</li> <li>Find the minimal number \\(a_m=\\min\\left\\{a_k,a_{k+1},\\cdots,a_{n-1}\\right\\}\\).</li> <li>Put \\(a_m\\) at the first place by swapping it with \\(a_k\\).</li> <li>Now \\(a_k\\) is the smallest number in \\(\\langle a_k,\\cdots,a_{n-1}\\rangle\\). All we have to do is to sort the rest part \\(\\langle a_{k+1},\\cdots,a_{n-1}\\rangle\\) recursively.</li> </ul> <pre><code>void sort_impl(int *a, int k, int n) {\n  if (k == n - 1) return;\n\n  int m = k;\n  for (int i = k + 1; i &lt; n; ++i)\n    if (a[i] &lt; a[m]) m = i;\n\n  swap(&amp;a[m], &amp;a[k]); // the \"swap\" function we defined in previous lectures\n\n  sort_impl(a, k + 1, n); // sort the rest part recursively\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html","title":"\u57fa\u672c\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790","text":"<p>\u6570\u7ec4\uff0c\u94fe\u8868\uff0c\u6808\uff0c\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff0c\u6811\uff0c\u5806\uff0c\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5e76\u67e5\u96c6</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_2","title":"\u6570\u636e\u7ed3\u6784\u7b97\u6cd5\u590d\u6742\u5ea6\u4ecb\u7ecd","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#brief-intro","title":"Brief Intro","text":"<p>\u6570\u636e\u7ed3\u6784: \u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u6216\u8005\u591a\u79cd\u7279\u5b9a\u5173\u7cfb\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408. \u5728\u903b\u8f91\u4e0a\u53ef\u4ee5\u5206\u4e3a\u7ebf\u6027\u7ed3\u6784, \u6563\u5217\u7ed3\u6784, \u6811\u5f62\u7ed3\u6784, \u56fe\u5f62\u7ed3\u6784\u7b49\u7b49</p> <p>\u7b97\u6cd5: \u6c42\u89e3\u5177\u4f53\u95ee\u9898\u7684\u6b65\u9aa4\u63cf\u8ff0, \u4ee3\u7801\u4e0a\u8868\u73b0\u51fa\u6765\u662f\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u7684\u4e00\u7ec4\u6709\u9650\u7684\u6307\u4ee4\u5e8f\u5217</p> <p>\u7b97\u6cd5\u590d\u6742\u5ea6: \u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6, \u8861\u91cf\u7b97\u6cd5\u6548\u7387, \u7b97\u6cd5\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d, \u968f\u7740\u6570\u636e\u89c4\u6a21n\u7684\u589e\u957f, \u7b97\u6cd5\u6267\u884c\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u7684\u589e\u957f\u901f\u5ea6. </p> <p>\u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5173\u7cfb: </p> <p></p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\\(O(n!)\\)\u662f\u6700\u5927\u7684\uff0c\u800c\\(O(nlogn) &lt; O(n^i)\\)\u5982\u679c\\(i&gt;1\\)\uff0c\u8fd9\u4e00\u7ed3\u8bba\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u4f5c\u5546\u6c42\u6781\u9650\u8bf4\u660e\uff08\u6d1b\u5fc5\u8fbe\u6cd5\u5219\uff09\u3002</p> <p>\u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6: </p> <p></p> <p></p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#algorithm-analysis","title":"Algorithm Analysis","text":"<p>Landau Symbols\u89c4\u5b9a\uff1a</p> <ul> <li>\\(\\Theta\\) notation: A function \\(f(n) = \\Theta(g(n))\\) if there exist positive \\(k, c_1, c_2\\) such that: \\(c_1 g(n) &lt; f(n) &lt; c_2 g(n)\\) whenever \\(n&gt;k\\)</li> <li>Big O notation: \\(f(n) = O(g(n))\\) if there exists k and c such that \\(f(n) &lt; cg(n)\\) whenever \\(n&gt;k\\)</li> </ul> <p>\u6211\u4eec\u4ece\u6781\u9650\u7684\u89d2\u5ea6\u6765\u770b\\(\\Theta\\)\uff0c\u5982\u679cf(n) g(n)\u90fd\u662f\u6700\u9ad8\u6307\u6570\u76f8\u540c\u7684\u591a\u9879\u5f0f\uff0c\u4e14\u7cfb\u6570\u76f8\u540c\uff0c\u5982\u679c\u8bf4\uff1a</p> <p>\\(\\lim_{n \\to \\infty} \\frac{f(n)}{g(n)} = c \\quad \\text{where} \\quad 0 &lt; c &lt; \\infty\\)\uff0c\u90a3\u4e48\u6211\u4efb\u53d6\\(c &gt; \\varepsilon &gt; 0\\)\uff0c\u90a3\u4e48\u603b\u4f1a\u5b58\u5728\u6b63\u6570k\uff0c\u4f7f\u5f97\uff1a</p> <p>\\(\\left| \\frac{f(n)}{g(n)} - c \\right| &lt; \\varepsilon \\ \\text{whenever} \\ n &gt; k\\)\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\uff1a  \u4e8e\u662f\u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u6781\u9650\u5f62\u5f0f\u91cd\u65b0\u5b9a\u4e49\u4e0a\u9762\u4e24\u4e2a\u7b26\u53f7\uff0c\u987a\u4fbf\u518d\u5982\u4e0b\u56fe\u5b9a\u4e49\uff1a\\(o, \\omega, \\Omega\\)</p> <p></p> <p></p> <p>Tip\uff1a\u7b97\u6cd5\u6709\u6ca1\u6709\u53ef\u80fdbest case\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Omega(n)\\)\u800cworst case\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n)\\)\u5462\uff1f\u5f53\u7136\u6709\u53ef\u80fd\uff01\u6bd4\u5982\u8bf4\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u603b\u662f\uff08\u6ca1\u9519\uff0c\u201c\u603b\u662f\u201d\u4e5f\u80fd\u62e5\u6709\u6700\u597d\u548c\u6700\u574f\u60c5\u51b5\uff09\\(\\Theta(n)\\)\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_3","title":"\u5f15\u8a00","text":"<p>\u8003\u8651\u4e00\u79cd\u95ee\u9898\uff1acompute the summation for a polynomial at a fixed value x.\u5bf9\u4e8e\u4e00\u4e2a\u591a\u9879\u5f0f\uff1a\\(f(x)=a_0+a_1x+a_2x^2+\u22ef+a_{n\u22121}x^{n\u22121}+a_nx^n\\)\u6765\u8bf4\uff0c\u4ee3\u5165x\u4e4b\u540e\u5982\u4f55\u8ba1\u7b97\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6570\u7ec4\u53bb\u50a8\u5b58\u7cfb\u6570\uff0c\u7528\u5f15\u7d22\u4ee3\u8868\u5e42\uff0c\u5373\uff1aa[i] = \\(a_i\\)</p> <pre><code>double fpoly1 ( int n, double a[ ], double x )\n{ int i;\n  double p = a[0];\n  for (i = 1; i &lt;=n; i++)\n       p += (a[i] * pow( x, i) );\n  return p;\n}\n</code></pre> <p>\u6216\u8005\uff0c\u53e6\u4e00\u79cd\u8868\u8fbe\u65b9\u5f0f\u7684\u591a\u9879\u5f0f\uff1a\\(f(x)=a_0+x(a_1+x(a_2+\u22efx(a_n\u22121+x(a_n))\u22ef))\\):</p> <pre><code>double fpoly2 ( int n, double a[ ], double x )\n{ int i;\n  double p = a[n];\n  for (i = n; i &gt; 0; i-- )\n       p = a[i-1]  + x* p;\n  return p;\n}\n</code></pre> <p>\u4f46\u662f\uff0c\u5f53\\(f(x)=4+3x^{2024}\\)\u5462\uff1f\u96be\u9053\u9700\u8981\u5f00\u4e00\u4e2a2025\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5417\uff1f\u5f88\u660e\u663e\u4e0d\u73b0\u5b9e\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u7ec4\u91cc\u9762\u5b58\u50a8\u4e00\u4e2astructure\uff1a\\((a_i, i)\\)\u3002\u8fd9\u6837\u5c31\u5f88\u5b8c\u7f8e\u7684\u8282\u7701\u4e86\u7a7a\u95f4\u3002\u4f46\u662f\u8fd9\u79cd\u8868\u793a\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u8ba1\u7b97\u591a\u9879\u5f0f\u7684\u76f8\u52a0\u7684\uff1f\u6211\u4eec\u6309\u6307\u6570\u9012\u51cf\u7684\u987a\u5e8f\u5b58\u50a8\u4e24\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u5f00\u59cb\u9010\u4e2a\u6bd4\u8f83\uff1a\u6307\u6570\u5982\u679c\u4e0d\u4e00\u6837\uff0c\u8f83\u5927\u7684\u4f18\u5148\u8fdb\u5165\u6570\u7ec4\uff0c\u4e14\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\uff1b\u5982\u679c\u76f8\u540c\uff0c\u7cfb\u6570\u76f8\u52a0\uff0c\u50a8\u5b58\u8fdb\u65b0\u7684\u6570\u7ec4\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u6307\u5411\u4e0b\u4e00\u4e2a\u3002\u8fd9\u6837\u4e5f\u80fd\u5f88\u597d\u5730\u8868\u793a\u591a\u9879\u5f0f\u7684\u76f8\u52a0\u3002</p> <p>\u4ece\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u80fd\u770b\u51fa\uff1a</p> <ul> <li>Different data types can be used for the same type of problem.</li> <li>There exists a common problem: the organization and management of ordered linear data.</li> </ul> <p>\u56e0\u6b64\u5f15\u51fa\u4e86\u7b2c\u4e00\u4e2a\u5173\u952e\u7684\u6982\u5ff5\uff1aList ADT(Abstract Data Type)\u3002An Abstract List (or List ADT) is linearly ordered data (with same data type)\u3002</p> <ul> <li>The number of elements in the List denotes the length of the List.</li> <li>When there is no element, it is an empty List.</li> <li>The beginning of a List is called the List head; the end of a List is called the List tail.</li> <li>The same value may occur more than once.</li> </ul> <p>\u5bf9\u4e8e\u8fd9\u79cd\u6570\u636e\u7ed3\u6784,\u4e00\u822c\u8981\u80fd\u591f\u652f\u6301\u4e00\u4e9b\u57fa\u672c\u7684\u64cd\u4f5c: Access; Erasing; Insertion; Replacement. \u800c\u5bf9\u4e8e\u4e24\u4e2aADT\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u5e0c\u671b\u53bb\u64cd\u4f5c\uff1aConcatenation; Determine if sublist. \u56e0\u6b64\u4e00\u822c\u7a0b\u5e8f\u4e2d\u6709\u5982\u4e0b\u7ed3\u6784\uff1a</p> <ul> <li>For L\u2208List, i denotes the indices, X\u2208ElementType, the basic operations includes but not limited to:</li> <li>ListEmpty(): initialize an empty list.</li> <li>ElementType FindKt\u210e(int K, List L): find the K_t\u210e element and return it.</li> <li>int Find(ElementType X, int I, List L): find the location for X.</li> <li>void Insert(ElementType X, int i, List L): insert a new element before the i_t\u210e element.</li> <li>void Delete(int i, List L): delete the i_t\u210e element.</li> <li>int Lengt\u210e(List L): return the length of a list.</li> </ul> <p>\u5177\u4f53\u6709\u54ea\u4e9b\u7ebf\u6027\u8868\u7684\u6570\u636e\u7ed3\u6784\u5462\uff1f\u89c1\u4e0b\u9762\u7684\u5185\u5bb9\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_4","title":"\u6570\u7ec4","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_5","title":"\u57fa\u672c\u4fe1\u606f","text":"<p>\u6570\u7ec4\u7684\u7279\u70b9: \u5185\u5b58\u662f\u8fde\u7eed\u7684(\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6570\u7ec4\u79f0\u4e3a\u7ebf\u6027\u8868). \u90a3\u4e48\u6570\u7ec4\u6709\u4ec0\u4e48\u4f18\u7f3a\u70b9\u5462\uff1f</p> <p>\u4f18\u70b9: </p> <ul> <li>\u4e0b\u6807\u8bbf\u95ee(\u968f\u673a\u8bbf\u95ee)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)</li> <li>\u672b\u5c3e\u4f4d\u7f6e\u589e\u52a0\u5220\u9664\u5143\u7d20\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)</li> <li>\u8bbf\u95ee\u5143\u7d20\u524d\u540e\u76f8\u90bb\u4f4d\u7f6e\u7684\u5143\u7d20\u975e\u5e38\u65b9\u4fbf </li> </ul> <p>\u7f3a\u70b9:</p> <ul> <li>\u975e\u672b\u5c3e\u4f4d\u7f6e\u589e\u52a0\u5220\u9664\u5143\u7d20\u9700\u8981\u8fdb\u884c\u5927\u91cf\u7684\u6570\u636e\u79fb\u52a8</li> <li>\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6: \u5982\u679c\u662f\u65e0\u5e8f\u6570\u7ec4, \u90a3\u4e48\u7ebf\u6027\u641c\u7d22O(n); \u5982\u679c\u662f\u6709\u5e8f\u6570\u7ec4, \u90a3\u4e48\u5c31\u662f\u4e8c\u5206\u641c\u7d22O(logn)</li> <li>\u6570\u7ec4\u6269\u5bb9\u6d88\u8017\u6bd4\u8f83\u5927(\u5982\u4f55\u6269\u5bb9? \u4e4b\u540e\u4f1a\u6709\u5177\u4f53\u7684\u7ec6\u8282\u5b9e\u73b0)</li> </ul> <p>\u6ce8\u610f! </p> <ol> <li>\u968f\u673a\u8bbf\u95ee \u2260 \u67e5\u627e or \u641c\u7d22</li> <li>\u7ebf\u6027\u641c\u7d22\u6307\u7684\u662f\u4e0b\u6807\u4ece0\u5f00\u59cb\u4e00\u76f4\u5230n-1\u6765\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u968f\u673a\u8bbf\u95ee</li> <li>\"\u6570\u7ec4\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u5341\u5206\u4e0d\u65b9\u4fbf\"\u5176\u5b9e\u8981\u5206\u60c5\u51b5, \u662f\u672b\u5c3e\u4f4d\u7f6e\u52a0\u5165\u5143\u7d20\u8fd8\u662f\u4e2d\u95f4\u4f4d\u7f6e? </li> </ol> <pre><code>int arr[10];\n// c/c++\u4e2d, \u4e0d\u80fd\u7528\u53d8\u91cf\u6765\u521d\u59cb\u5316\u6570\u7ec4, \u5fc5\u987b\u8981\u7528\u5e38\u91cf\n// \u5982\u679c\u8bbf\u95eearr[10], \u90a3\u4e48\u5c31\u662f\u8d8a\u754c\u8bbf\u95ee\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#expand","title":"Expand","text":"<p>\u5728\u63d2\u5165\u5143\u7d20\u7684\u65f6\u5019\uff0c\u9700\u8981\u5224\u65ad\u6570\u7ec4\u5185\u5b58\u6ee1\u4e86\u6ca1\u6709\uff1b\u5982\u679c\u6ee1\u4e86\uff0c\u9700\u8981\u5f00\u8f9f\u65b0\u7684\u66f4\u5927\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u628a\u539f\u6765\u7684\u6570\u636e\u62f7\u8d1d\u8fc7\u53bb\u3002\u90a3\u4e48\u662f\u4e58\u4ee52\u597d\uff0c\u8fd8\u662f\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570\u5462\uff1f\u6211\u4eec\u5148\u5b9a\u4e49amortized time\u5747\u644a\u65f6\u95f4\uff1aIf n operations requires \\(\\Theta(f(n))\\), we will say that an individual operation has an amortized run time of \\(\\Theta(f(n)/n)\\). \u90a3\u4e48\u5206\u6790double\u7684\u60c5\u51b5\uff1a\u5047\u8bbe\u5728\u4e00\u6b21\u6269\u5bb9\u4e2d\uff0cInserting n objects would require 1, 2, 4, 8, ..., all the way up to the largest \\(2^k &lt; n\\) or \\(k=\\lfloor lg(n) \\rfloor\\)  \u90a3\u4e48double\u7684\u5747\u644a\u65f6\u95f4\u5c31\u662f\\(\\Theta(1)\\), \u800c\u5982\u679c\u662f\u4e00\u6b21\u5185\u5b58\u52a0m\u5462\uff1f  \u90a3\u4e48\u5747\u644a\u65f6\u95f4\u5c31\u662f\\(\\Theta(n)\\)\u4e86\uff0c\u56e0\u6b64\u6700\u597d\u7684\u7b56\u7565\u662fdouble\u5185\u5b58\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_6","title":"\u589e\u5220\u6539\u67e5\u2014\u2014\u57fa\u672c\u63a5\u53e3","text":"<p>\u9996\u5148\u56de\u987e: \u5185\u5b58\u5206\u533a. </p> <ul> <li>\u6570\u636e\u6bb5(data): \u5b58\u653e\u5168\u5c40\u53d8\u91cf\u7684\u5730\u65b9, \u7cfb\u7edf\u5206\u914d\u7cfb\u7edf\u91ca\u653e, \u751f\u547d\u5468\u671f\u662f\u6574\u4e2a\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f</li> <li>\u5806(heap): \u81ea\u5df1\u5f00\u8f9f\u81ea\u5df1\u91ca\u653e(new delete)</li> <li>\u6808(stack): \u51fd\u6570\u8fdb\u6765, \u81ea\u52a8\u5206\u914d; \u51fd\u6570\u51fa\u53f3\u62ec\u53f7, \u7cfb\u7edf\u91ca\u653e</li> </ul> <p>\u6240\u4ee5\u5e0c\u671b\u81ea\u5df1\u63a7\u5236\u6269\u5bb9\u7b49, \u5fc5\u987b\u8981\u5c06\u5185\u5b58\u653e\u5728\u5806\u533a: </p> <pre><code>// array.cpp\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nusing namespace std; // \u5efa\u8bae\u4e4b\u540e\u653e\u5f03\u8fd9\u4e00\u884c, \u547d\u540d\u7a7a\u95f4\u90fd\u5e26\u4e0astd\nclass Array\n{\npublic:\n    // \u5982\u679c\u6ca1\u6709\u4f20, \u9ed8\u8ba4capacity\u662f10\n    Array(int size = 10): mCur(0), mCap(size) // \u521d\u59cb\u5316\u5217\u8868\u7684\u987a\u5e8f\u4e00\u5b9a\u8981\u662f\u6210\u5458\u5b9a\u4e49\u7684\u987a\u5e8f\n    {\n        mpArr = new int[mCap]();\n    }\n    ~Array()\n    {\n        delete []mpArr; // \u4ec5\u4ec5\u662f\u5806\u4e0a\u9762\u7684\u6570\u636e\u91ca\u653e\u4e86\n        // \u6ca1\u5fc5\u8981\u5224\u65admpArr\u539f\u6765\u662f\u4e0d\u662f\u7a7a\u6307\u9488, \u56e0\u4e3a\u4e0d\u77e5\u9053\u662f\u91ce\u6307\u9488\u8fd8\u662f\u6307\u5411\u7684\u5185\u5b58\u88ab\u91ca\u653e\n        // \u5373\u4f7f\u539f\u672c\u5c31\u662f\u7a7a\u6307\u9488, \u90a3\u4e48delete\u5c31\u76f8\u5f53\u4e8e\u662f\u7a7a\u64cd\u4f5c\n        mpArr = nullptr; // \u9632\u6b62\u91ce\u6307\u9488\u7684\u51fa\u73b0\n    }\n\n    // \u672b\u5c3e\u589e\u52a0\u5143\u7d20\n    void push_back(int val){\n        // \u5982\u679c\u6570\u7ec4\u6ee1\u4e86, \u9700\u8981\u6269\u5bb9\n        if (mCur == mCap){\n            expand(2 * mCap);\n        }\n        mpArr[mCur] = val;\n        mCur++;\n    }\n    // \u672b\u5c3e\u5220\u9664\u5143\u7d20\n    void pop_back(){\n        if (mCur == 0){\n            return;\n        }\n        mCur--;\n    }\n    // \u6309\u4f4d\u7f6e\u589e\u52a0\u5143\u7d20\n    void insert(int pos, int val){\n        // \u597d\u4e60\u60ef: \u5224\u65ad\u4f20\u5165\u53c2\u6570\u7684\u6709\u6548\u6027\n        if (pos &lt; 0 || pos &gt; mCur){\n            return; // invalid position\n        }\n        // \u5982\u679c\u6570\u7ec4\u6ee1\u4e86, \u9700\u8981\u6269\u5bb9\n        if (mCur == mCap){\n            expand(2 * mCap);\n        }\n        for (int i = mCur - 1; i &gt;= pos; i--){\n            mpArr[i+1] = mpArr[i];\n        }\n        mpArr[pos] = val;\n    }\n    // \u6309\u4f4d\u7f6e\u5220\u9664\n    void erase(int pos){\n        if (pos &lt; 0 || pos &gt;= mCur){\n            return; // invalid operation\n        }\n        for (int i = pos + 1; i &lt; mCur; i++){\n            mpArr[i-1] = mpArr[i];\n        }\n        mCur--; // \u4ee3\u8868\u6570\u7ec4\u5c11\u4e86\u4e00\u4e2a\u5143\u7d20\n    }\n    // \u5143\u7d20\u67e5\u8be2\n    int find(int val){\n        for (int i = 0; i &lt; mCur; i++){\n            if (mpArr[i] == val){\n                return i;\n            }\n        }\n        return -1;\n    }\n    void show() const{\n        for (int i = 0; i &lt; mCur; i++){\n            cout &lt;&lt; mpArr[i] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\nprivate: // \u4e00\u5b9a\u8981\u5148\u7406\u6e05\u54ea\u4e9b\u662f\u79c1\u6709\u6210\u5458\u90a3\u4e9b\u4e8b\u516c\u5f00\u6210\u5458\n    int *mpArr; // \u6307\u5411\u53ef\u6269\u5bb9\u7684\u6570\u7ec4\u5185\u5b58\n    int mCur; // \u6570\u7ec4\u6709\u6548\u5143\u7d20\u7684\u4e2a\u6570, \u8fd9\u91cc\u6709\u5999\u7528\n    int mCap; // \u6570\u7ec4\u7684\u5bb9\u91cf\n    // \u5185\u90e8\u6570\u7ec4\u6269\u5bb9\u63a5\u53e3\n    void expand(int size){\n        // \u5f00\u8f9f\u66f4\u957f\u5185\u5b58, \u590d\u5236\u6570\u636e, \u7136\u540e\u91ca\u653e\u539f\u6765\u7684\u6570\u636e\n        int *p = new int[size];\n        memcpy(p, mpArr, sizeof(int) * mCap);\n        delete[]mpArr; \n        mpArr = p;\n        mCap = size;\n    }\n};\n\nint main(){\n    Array arr;\n    srand(time(0));\n    for (int i = 0; i &lt; 10; i++){\n        arr.push_back(rand() % 100);\n    }\n    arr.show();\n    arr.pop_back();\n    arr.show();\n    arr.insert(0, 100);\n    arr.show();\n    arr.insert(10, 200);\n    arr.show();\n    int pos = arr.find(100);\n    if (pos != -1){\n        arr.erase(pos);\n        arr.show();\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_7","title":"\u5e38\u89c1\u9898\u76ee","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_8","title":"\u5143\u7d20\u9006\u5e8f\u95ee\u9898","text":"<p>\u95ee\u9898\uff1a\u9006\u5e8f\u5b57\u7b26\u4e32\u2014\u2014\u5f15\u5165\u5341\u5206\u91cd\u8981\u7684\u53cc\u6307\u9488\u601d\u60f3! </p> <pre><code>// reverse.cpp\n#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\nvoid Reverse(char arr[], int size){ // \u4f20\u5165size\u662f\u56e0\u4e3a\u6570\u7ec4\u4f20\u5165\u4e4b\u540e\u4f1a\u9000\u5316\u4e3a\u6307\u9488, \u6240\u4ee5\u9700\u8981\u77e5\u9053\u4e2a\u6570\n    char *p = arr;\n    char *q = arr + size - 1;\n    while (p &lt; q){\n        char ch = *p;\n        *p = *q;\n        *q = ch;\n        p++;\n        q--;\n    }\n}\nint main(){\n    char arr[] = \"hello world\";\n    cout &lt;&lt; arr &lt;&lt; endl;\n    Reverse(arr, strlen(arr)); // strlen()\u9700\u8981\u7528&lt;string.h&gt;\n    cout &lt;&lt; arr &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u53cc\u6307\u9488\u662f\u4e00\u7c7b\u975e\u5e38\u91cd\u8981\u7684\u95ee\u9898, \u53cc\u6307\u9488\u601d\u60f3\u8981\u719f\u7ec3!</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_9","title":"\u53cc\u6307\u9488\u5b9e\u6218\u2014\u2014\u5947\u5076\u6570\u8c03\u6574\u95ee\u9898","text":"<p>\u95ee\u9898\u63cf\u8ff0: \u6574\u578b\u6570\u7ec4, \u628a\u5076\u6570\u8c03\u6574\u5230\u6570\u7ec4\u7684\u5de6\u8fb9, \u628a\u5947\u6570\u8c03\u6574\u5230\u6570\u7ec4\u7684\u53f3\u8fb9</p> <p>\u601d\u8def: \u5c1d\u8bd5\u5229\u7528\u53cc\u6307\u9488! \u8ba9p\u6307\u9488\u4ece\u5de6\u5f00\u59cb\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u5947\u6570, \u7136\u540eq\u6307\u9488\u4ece\u53f3\u8fb9\u5f00\u59cb\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u5076\u6570, \u7136\u540ep q\u4e24\u4e2a\u6307\u9488\u7684\u6570\u5b57\u8fdb\u884c\u4ea4\u6362, \u4ea4\u6362\u5b8c\u6210\u4e4b\u540e, <code>p++ q--</code>; \u540c\u65f6, more specifically, \u5982\u679cp\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u5947\u6570, \u90a3\u4e48\u5c31\u505c\u6b62, \u4e0d\u518d<code>p++</code>, \u5426\u5219\u6307\u9488\u4f1a\u4e00\u6b65\u4e00\u6b65\u5411\u53f3\u8fb9\u79fb\u52a8; q\u540c\u7406. \u76f4\u5230p q\u4e24\u4e2a\u6307\u9488\u90fd\u52a8\u4e0d\u4e86\u7684\u65f6\u5019, \u4ea4\u6362, \u7136\u540e\u90fd\u8d70\u52a8, \u5224\u65ad\u6761\u4ef6\u662f<code>while(p &lt; q)</code></p> <pre><code>// odd_even.cpp\n#include &lt;iostream&gt;\n#include &lt;time.h&gt;\nusing namespace std;\n\nvoid AdjustArray(int arr[], int size){\n    int * p = arr;\n    int * q = arr + size - 1;\n    while (p &lt; q){\n        if (*p % 2 == 0){ // p\u6307\u9488\u5bf9\u5e94\u7684\u662f\u5076\u6570, \u90a3\u4e48\u5c31\u53f3\u8fb9\u79fb\u52a8\n            p++; // \u5426\u5219, \u90a3\u5c31\u4e0d\u4f1a\u79fb\u52a8\n        }\n        if (*q % 2 == 1){ // q\u6307\u9488\u5bf9\u5e94\u7684\u662f\u5947\u6570, \u90a3\u4e48\u5c31\u5de6\u79fb\u52a8\n            q--; // \u5426\u5219, \u90a3\u5c31\u4e0d\u4f1a\u79fb\u52a8\n        }\n        // \u5148\u5904\u7406\u5b8c\u79fb\u52a8\u7684\u7a0b\u5e8f, \u7136\u540e\u5224\u65ad\u65f6\u5019\u4ea4\u6362p q\u6307\u9488\u7684\u6570\u5b57\n        if ((*p % 2 == 1) &amp;&amp; (*q % 2 == 0)){ // \u5982\u679cp\u5bf9\u5e94\u5947\u6570\u800cq\u5bf9\u5e94\u5076\u6570, \u4ea4\u6362!\n            int temp = *p;\n            *p = *q;\n            *q = temp;\n        }\n    }\n}\nint main(){\n    int arr[10] = {0};\n    srand(time(0));\n    for (int i = 0; i &lt; 10; i++){\n        arr[i] = rand()%100;\n    }\n    // trick : \u57fa\u4e8e\u8303\u56f4\u7684for\u5faa\u73af\n    for (int v : arr){\n        cout &lt;&lt; v &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    AdjustArray(arr, 10);\n    for (int v : arr){\n        cout &lt;&lt; v &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre> <p>\u6211\u89c9\u5f97, \u53cc\u6307\u9488\u7684\u7075\u9b42\u5c31\u5728\u4e8e: p\u6307\u9488\u5de6\u8fb9\u4e00\u5b9a\u662f\u5904\u7406\u5b8c\u6210\u7684, \u800cq\u6307\u9488\u53f3\u8fb9\u4e00\u5b9a\u662f\u5904\u7406\u5b8c\u6210\u7684!  \u540c\u65f6, \u5728\u5224\u65adp(q)\u6307\u9488\u7684\u6570\u5b57\u662f\u4e0d\u662f\u5076\u6570(\u5947\u6570)\u7684\u65f6\u5019, \u6709\u4e0b\u9762\u8fd9\u4e2a\u4f4d\u8fd0\u7b97\u7684trick, \u901f\u5ea6\u4e0a\u4f1a\u66f4\u5feb: </p> <pre><code>if (*p &amp; 0x1 == 0){}; // \u5982\u679cp\u6307\u9488\u5bf9\u5e94\u7684\u662f\u5076\u6570\nif (*q &amp; 0x1 == 1){}; // \u5982\u679cq\u6307\u9488\u5bf9\u5e94\u7684\u662f\u5947\u6570\n</code></pre> <p>\u5173\u4e8e\u8fd9\u79cd\u65b9\u6cd5\u7684\u89e3\u91ca, <code>ChatGPT</code>\u5982\u4e0b\u89e3\u91ca: </p> <p>\u8fd9\u662f\u901a\u8fc7\u4f4d\u8fd0\u7b97\u6765\u5224\u65ad\u4e00\u4e2a\u6307\u9488\u5bf9\u5e94\u7684\u503c\u662f\u5426\u4e3a\u5076\u6570\u3002\u4ee3\u7801\u4e2d\u7684\u8868\u8fbe\u5f0f <code>(*p &amp; 0x1 == 0)</code> \u4f7f\u7528\u4e86\u6309\u4f4d\u4e0e\u64cd\u4f5c\u7b26 (<code>&amp;</code>) \u6765\u68c0\u67e5\u6570\u503c\u7684\u6700\u4f4e\u6709\u6548\u4f4d\uff08least significant bit, LSB). \u5177\u4f53\u5730\u8bf4\uff1a</p> <ul> <li> <p><code>*p</code> \u8868\u793a\u901a\u8fc7\u6307\u9488 <code>p</code> \u8bbf\u95ee\u7684\u503c\u3002</p> </li> <li> <p><code>0x1</code> \u662f\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff0c\u7b49\u540c\u4e8e\u4e8c\u8fdb\u5236\u7684 <code>0001</code>\uff0c\u53ea\u5173\u6ce8\u6570\u503c\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u3002</p> </li> <li> <p><code>*p &amp; 0x1</code>\u662f\u6309\u4f4d\u4e0e\u64cd\u4f5c\uff0c\u7528\u6765\u68c0\u6d4b <code>*p</code></p> </li> </ul> <p>\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u662f\u5426\u4e3a 1\u3002</p> <ul> <li>\u5982\u679c <code>*p &amp; 0x1</code> \u7ed3\u679c\u662f 0\uff0c\u8fd9\u610f\u5473\u7740\u6700\u4f4e\u6709\u6548\u4f4d\u662f 0\uff0c\u90a3\u4e48 <code>*p</code> \u5c31\u662f\u4e00\u4e2a\u5076\u6570\u3002</li> <li>\u5982\u679c <code>*p &amp; 0x1</code> \u7ed3\u679c\u662f 1\uff0c\u8fd9\u610f\u5473\u7740\u6700\u4f4e\u6709\u6548\u4f4d\u662f 1\uff0c\u90a3\u4e48 <code>*p</code> \u5c31\u662f\u4e00\u4e2a\u5947\u6570\u3002</li> </ul> <p>\u5f53\u7136\u4e0a\u9762\u8fd9\u79cd\u89e3\u6cd5\u5f88straight forward, \u80fd\u4e0d\u80fd\u4f18\u5316\u5462? \u5728\u6bcf\u4e00\u6b21\u7684\u5faa\u73af\u4e2d, \u5047\u5982\u8bf4p\u6307\u9488\u4e0d\u52a8\u4e86, \u800cq\u4e00\u76f4\u5728\u52a8, \u90a3\u4e48\u76f8\u5f53\u4e8eq\u7684\u5faa\u73af\u79fb\u52a8\u8fc7\u7a0b\u4e2d, p\u767d\u767d\u591a\u5224\u65ad\u4e86\u5f88\u591a\u6b21. \u90a3\u4e48\u4e00\u79cd\u5f88\u597d\u7684\u903b\u8f91\u662f: \u6211\u4e00\u6b21\u8ba9p q\u6307\u9488\u4e00\u6b21\u6027\u52a8\u5230\u4f4d: </p> <pre><code>while (p &lt; q){\n    while (p &lt; q){\n        if ((*p &amp; 0x1) == 0){\n            break;\n        }\n        p++\n    }\n    while (p &lt; q){\n        if ((*q &amp; 0x1) == 1){\n            break;\n        }\n        q--;\n    }\n    // \u6ce8\u610f: \u80fd\u8df3\u51fa\u4e0a\u9762\u4e24\u4e2a\u5faa\u73af\u7684\u60c5\u51b5\u9664\u4e86p\u5bf9\u5e94\u5947\u6570, q\u5bf9\u5e94\u5076\u6570, \u8fd8\u80fd\u662f\u4ec0\u4e48corner case? \n    // \u90a3\u5c31\u662farr\u4e2d\u5168\u662f\u5076\u6570(for example), \u90a3\u4e48p == q, \u610f\u5473\u7740: \u6ca1\u6709\u5fc5\u8981\u4ea4\u6362\n    if (p &lt; q){ // \u5982\u679c\u662fp == q, \u90a3\u4e48\u5c31\u6ca1\u6709\u5fc5\u8981\u4ea4\u6362\u4e86\n        int tmp = *p;\n        *p = *q;\n        *q = tmp;\n        p++;\n        q--;\n    } \n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_10","title":"\u53cc\u6307\u9488\u5b9e\u6218\u2014\u2014\u79fb\u9664\u5143\u7d20\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0: </p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u503c <code>val</code>\uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e <code>val</code> \u7684\u5143\u7d20\u3002\u5143\u7d20\u7684\u987a\u5e8f\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u3002\u7136\u540e\u8fd4\u56de <code>nums</code> \u4e2d\u4e0e <code>val</code> \u4e0d\u540c\u7684\u5143\u7d20\u7684\u6570\u91cf\u3002</p> <p>\u5047\u8bbe <code>nums</code> \u4e2d\u4e0d\u7b49\u4e8e <code>val</code> \u7684\u5143\u7d20\u6570\u91cf\u4e3a <code>k</code>\uff0c\u8981\u901a\u8fc7\u6b64\u9898\uff0c\u60a8\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>\u66f4\u6539 <code>nums</code> \u6570\u7ec4\uff0c\u4f7f <code>nums</code> \u7684\u524d <code>k</code> \u4e2a\u5143\u7d20\u5305\u542b\u4e0d\u7b49\u4e8e <code>val</code> \u7684\u5143\u7d20\u3002<code>nums</code> \u7684\u5176\u4f59\u5143\u7d20\u548c <code>nums</code> \u7684\u5927\u5c0f\u5e76\u4e0d\u91cd\u8981\u3002</li> <li>\u8fd4\u56de <code>k</code>\u3002</li> </ul> <p>\u7528\u6237\u8bc4\u6d4b\uff1a</p> <p>\u8bc4\u6d4b\u673a\u5c06\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6d4b\u8bd5\u60a8\u7684\u89e3\u51b3\u65b9\u6848\uff1a</p> <pre><code>int[] nums = [...]; // \u8f93\u5165\u6570\u7ec4\nint val = ...; // \u8981\u79fb\u9664\u7684\u503c\nint[] expectedNums = [...]; // \u957f\u5ea6\u6b63\u786e\u7684\u9884\u671f\u7b54\u6848\u3002\n                            // \u5b83\u4ee5\u4e0d\u7b49\u4e8e val \u7684\u503c\u6392\u5e8f\u3002\n\nint k = removeElement(nums, val); // \u8c03\u7528\u4f60\u7684\u5b9e\u73b0\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // \u6392\u5e8f nums \u7684\u524d k \u4e2a\u5143\u7d20\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</code></pre> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,2,2,3], val = 3\n\u8f93\u51fa\uff1a2, nums = [2,2,_,_]\n\u89e3\u91ca\uff1a\u4f60\u7684\u51fd\u6570\u51fd\u6570\u5e94\u8be5\u8fd4\u56de k = 2, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a 2\u3002\n\u4f60\u5728\u8fd4\u56de\u7684 k \u4e2a\u5143\u7d20\u4e4b\u5916\u7559\u4e0b\u4e86\u4ec0\u4e48\u5e76\u4e0d\u91cd\u8981\uff08\u56e0\u6b64\u5b83\u4eec\u5e76\u4e0d\u8ba1\u5165\u8bc4\u6d4b\uff09\u3002\n</code></pre> <p>\u90a3\u4e48\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d, \u53cc\u6307\u9488\u53c8\u88ab\u8d4b\u4e88\u4e86\u65b0\u7684\u542b\u4e49: \u56e0\u4e3a\u53cc\u6307\u9488\u53ef\u4ee5\u4e0d\u518d\u662f\u4e00\u5934\u4e00\u5c3e\u7684\u8bbe\u8ba1\u610f\u4e49\u4e86. \u6211\u5e0c\u671b\u7528<code>i</code>\u4ece\u5934\u5f00\u59cb\u904d\u5386, \u7528<code>j</code>\u8bb0\u5f55\u653e\u4e0b\u6570\u5b57\u7684\u5f15\u7d22(\u4e0d\u7b49\u4e8eval\u7684\u4e0b\u4e00\u4e2a\u5f15\u7d22), \u8fd9\u662f\u4e24\u5957\u7684\"\u8bb0\u53f7\": \u5982\u679c\u8fd9\u4e2a<code>nums[i]</code>\u662f<code>val</code>, \u90a3\u4e48<code>j</code>\u4e0d\u52a8, \u7b49\u5f85\u4e4b\u540e\u4e0d\u662f<code>val</code>\u7684<code>nums[i]</code>, \u628a\u8fd9\u4e2a\u503c\u653e\u8fc7\u6765; \u5982\u679c<code>nums[i]</code>\u4e0d\u662f<code>val</code>, \u90a3\u4e48<code>j++</code>, \u4ee3\u8868\u521a\u521a\u90a3\u4e2a\u5730\u65b9\u5c31\u653e\u539f\u6765\u90a3\u4e2a\u5730\u65b9\u7684\u5143\u7d20. \u4e3a\u4ec0\u4e48\u80fd\u8fd9\u6837\u8bbe\u8ba1? \u5c31\u662f\u56e0\u4e3a\u9898\u76ee\u53ea\u8981\u6c42\u4fdd\u8bc1\u524dk\u4e2a\u5143\u7d20\u4e0d\u662fval, \u540e\u9762\u7684\u6839\u672c\u4e0d\u7528\u7ba1, \u6240\u4ee5\u8bf4, \u6211\u53ea\u9700\u8981\u7528<code>j</code>\u8fd9\u4e2a\u8bbe\u8ba1\u6765\u66f4\u65b0\u6570\u7ec4\u91cc\u9762\u7684\u5143\u7d20, \u8ba9\u540e\u9762\u7684\u975e<code>val</code>\u5143\u7d20\u653e\u5230\u524d\u9762\u6765: </p> <pre><code>// [27] \u79fb\u9664\u5143\u7d20\n// @lc code=start\nclass Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int j = 0; // \u6307\u5411\u4e0d\u7b49\u4e8eval\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        for (int i = 0; i &lt; nums.size(); i++){\n            if (nums[i] != val){\n                nums[j] = nums[i];\n                j++;\n            }\n        }\n        return j;\n    }\n};\n// @lc code=end\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_11","title":"\u94fe\u8868","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_12","title":"\u57fa\u672c\u77e5\u8bc6","text":"<p>\u7279\u70b9\uff1a \u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u5728\u5806\u5185\u5b58\u4e0a\u72ec\u7acbnew\u51fa\u6765\u7684, \u8282\u70b9\u5185\u5b58\u4e0d\u8fde\u7eed.</p> <p>\u4f18\u70b9: </p> <ul> <li>\u5185\u5b58\u5229\u7528\u7387\u9ad8, \u4e0d\u9700\u8981\u5927\u5757\u8fde\u7eed\u5185\u5b58</li> <li>\u63d2\u5165\u548c\u5220\u9664\u8282\u70b9\u4e0d\u9700\u8981\u79fb\u52a8\u5176\u4ed6\u8282\u70b9, \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(1)</code></li> <li>\u4e0d\u9700\u8981\u4e13\u95e8\u8fdb\u884c\u6269\u5bb9\u64cd\u4f5c</li> </ul> <p>\u7f3a\u70b9: </p> <ul> <li>\u5185\u5b58\u5360\u7528\u91cf\u5927, \u56e0\u4e3a\u6bcf\u4e00\u4e2a\u8282\u70b9\u591a\u51fa\u5b58\u653e\u5730\u5740\u7684\u7a7a\u95f4</li> <li>\u8282\u70b9\u5185\u5b58\u4e0d\u8fde\u7eed, \u65e0\u6cd5\u8fdb\u884c\u5185\u5b58\u968f\u673a\u8bbf\u95ee </li> <li>\u94fe\u8868\u641c\u7d22\u6548\u7387\u4e0d\u9ad8, \u53ea\u80fd\u4ece\u5934\u8282\u70b9\u5f00\u59cb\u9010\u8282\u70b9\u904d\u5386</li> </ul> <p>\u90a3\u4e48\u5c31\u6709\u7591\u95ee\u4e86: \u6bcf\u4e00\u4e2a\u8282\u70b9\u4e4b\u95f4\u90fd\u662f\u72ec\u7acb\u7684, \u90a3\u4e48\u5728\u4e00\u4e2a\u8282\u70b9\u5982\u4f55\u77e5\u9053\u4e0a\u4e0b\u8282\u70b9\u5728\u54ea\u91cc? \u4e4b\u524d\u6570\u7ec4\u91cc\u9762, \u7528<code>p++ p--</code>\u5c31\u80fd\u79fb\u52a8\u6307\u9488, \u627e\u5230\u4e0a\u9762\u4e0b\u9762\u7684\u6570\u636e, \u56e0\u4e3a\u6570\u7ec4\u50a8\u5b58\u662f\u8fde\u7eed\u7684. \u6240\u4ee5\u8bf4, \u94fe\u8868\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7b80\u5355\u50a8\u5b58\u6570\u636e\u7684, \u8fd8\u8981\u5b58\u653e\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740. </p> <p>\u56e0\u6b64, \u4e00\u4e2anode\u91cc\u9762, \u5206\u4e3a\u6570\u636e\u57dfdata \u548c \u5730\u5740\u57dfnext, \u5176\u4e2d\u5730\u5740\u57df\u50a8\u5b58\u7684\u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740. \u901a\u8fc7\u8fd9\u6837\u7684\u8bbe\u8ba1\u4ee5\u5b9e\u73b0: 1. \u94fe\u8868\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u72ec\u7acb\u5206\u914d\u51fa\u6765\u7684  2. \u4ece\u5f53\u524d\u8282\u70b9\u80fd\u591f\u627e\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9. \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\u57df\u5b58\u653e\u7684\u662f<code>nullptr</code>.</p> <p>\u9644\uff1a\u5728\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u4e2d\uff0c\u4ee3\u7801\u5b9a\u4e49\u7684\u4e0d\u50a8\u5b58\u6570\u5b57\u3001\u7528\u6765\u65b9\u4fbf\u904d\u5386\u7684\u8282\u70b9\u79f0\u4e3a\u4e86\u5934\u7ed3\u70b9head_\u3002\u4f46\u662f\u4e0d\u662f\u6240\u6709\u7684notational convention\u90fd\u662f\u4f7f\u7528\u201c\u5934\u7ed3\u70b9\u201d\u79f0\u547c\u5b83\uff01\u6709\u7684\u65f6\u5019\uff0chead\u5c31\u662f\u4ee3\u8868\u7b2c\u4e00\u4e2a\u6709\u5730\u5740\u57df\u548c\u6570\u636e\u57df\u7684\u6709\u6548\u8282\u70b9\uff0c\u800c\u6709\u7684\u65f6\u5019\u90a3\u4e2a\u6240\u8c13\u7684\u201c\u5934\u7ed3\u70b9\u201d\u6709\u53e6\u5916\u7684\u540d\u79f0\uff0c\u4f8b\u5982dummy \u54d1\u7ed3\u70b9\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_13","title":"\u4ee3\u7801\u5b9e\u73b0\u2014\u2014\u5355\u94fe\u8868","text":"<p>\u5355\u94fe\u8868, \u987e\u540d\u601d\u4e49, \u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u80fd\u627e\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9, \u4f46\u662f\u627e\u4e0d\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9. \u5728\u5177\u4f53\u5b9e\u73b0\u4e2d, \u6211\u4eec\u8bbe\u8ba1\u5934\u8282\u70b9, \u5176\u4e2d\u5934\u8282\u70b9\u7684\u5730\u5740\u57df\u4e3a\u7a7a\u6307\u9488, \u4e3a\u4e86\u9632\u6b62\u94fe\u8868\u91cc\u9762\u6ca1\u6709\u6709\u6548\u8282\u70b9\u800c\u4e0d\u597d\u64cd\u4f5c\u7684\u60c5\u51b5. \u7528head\u6307\u9488\u6307\u5411\u5934\u8282\u70b9, \u521d\u59cb\u5316\u7684\u65f6\u5019, \u5934\u8282\u70b9\u7684\u5730\u5740\u57df\u4e3a\u7a7a, \u7136\u540e\u5728\u52a0\u5165\u6709\u6548\u8282\u70b9\u7684\u65f6\u5019, new\u4e00\u5757\u65b0\u5185\u5b58, \u7136\u540e\u628a\u5730\u5740\u5199\u8fdb\u5934\u8282\u70b9\u7684\u5730\u5740\u57df\u4e2d. \u5f53\u7136\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u7684\u52a0\u5165, \u6211\u4eec\u90fd\u8bbe\u8ba1\u6210: \u521d\u59cb\u5316\u7684\u65f6\u5019\u5730\u5740\u5b58\u653e\u7684\u662f\u7a7a, \u7136\u540e\u4e0b\u4e00\u4e2a\u8282\u70b9\u52a0\u5165\u7684\u65f6\u5019, \u628a\u5b83\u7684\u5730\u5740\u653e\u5728\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\u57df\u4e2d.</p> <p>\u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd: \u5c3e\u90e8\u63d2\u5165, \u5934\u90e8\u63d2\u5165, \u8282\u70b9\u5220\u9664, \u5220\u9664\u591a\u4e2a\u8282\u70b9, \u641c\u7d22, \u6253\u5370, \u6784\u9020\u6790\u6784</p> <pre><code>// clink.cpp\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nusing namespace std;\n\nstruct Node{\n    Node(int data = 0): data_(data), next_(nullptr){}\n    int data_;\n    Node* next_;\n};\n/*\n\u5982\u679c\u5e0c\u671bNode\u5206\u88c5\u6027\u66f4\u5f3a\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684class\u5b9a\u4e49\uff1a\nclass Node(){\nprivate:\n    int element;\n    Node *next_node;\npublic:\n    Node(int data = 0):\n        element(data),\n        next_node(nullptr){}\n    int retrieve() const{\n        return element;\n    }\n    Node *next() const{\n        return next_node;\n    }\n    friend class Clink;\n    \u8fd9\u91cc\u53cb\u5143\u662f\u4e3a\u4e86\u65b9\u4fbf\u5728Clink\u4e2d\u76f4\u63a5\u4fee\u6539\u8bbf\u95ee\u8282\u70b9\u7684\u6570\u636e\u57df\u548c\u6307\u9488\u57df\n    \u56e0\u4e3a\u539f\u5148\u662f\u7ed3\u6784\u4f53\uff0c\u9ed8\u8ba4\u662fpublic\uff1b\u4f46\u662f\u73b0\u5728\u662fprivate\uff0c\u800c\u4e14\u63d0\u4f9b\u7684\u63a5\u53e3\u662fconst\n    \u5982\u679c\u8003\u8651\u8bbe\u7f6e\u4e00\u4e2a\u51fd\u6570\u53bb\u4fee\u6539\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u5fc5\u987b\u662fpublic\uff0c\u90a3\u4e48\u5168\u5c40\u90fd\u53ef\u4ee5\u8c03\u7528\u4e86\n};\n*/\nclass Clink{\npublic:\n    Clink(){\n        // \u521d\u59cb\u5316\u7684\u65f6\u5019, \u6307\u5411\u5934\u8282\u70b9; new Node()\u5728\u5f00\u8f9f\u7684\u65f6\u5019, \u540c\u65f6\u4e5f\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\n        head_ = new Node();\n    }\n    ~Clink(){ // \u4e00\u5b9a\u4e0d\u662f\u7b80\u7b80\u5355\u5355\u7684\u91ca\u653e\u5934\u6307\u9488\u5c31\u5b8c\u4e86! \u7406\u89e3\u4e3a\u4ec0\u4e48\u9700\u8981p head_\u4e24\u4e2a\u6307\u9488\u5b8c\u6210\u64cd\u4f5c!\n        Node *p = head_;\n        while (p != nullptr){\n            head_ = head_-&gt;next_;\n            delete p;\n            p = head_;\n        }\n        head_ = nullptr;\n    }\n\n    void InsertTail(int val){ // \u94fe\u8868\u5c3e\u63d2\u6cd5\n        // \u5148\u627e\u5230\u5f53\u524d\u94fe\u8868\u7684\u672b\u5c3e\u8282\u70b9, \u7136\u540e\u751f\u6210\u65b0\u8282\u70b9; \u5982\u4f55\u627e\u5230\u5c3e\u8282\u70b9\u5462? \u5224\u65ad\u5730\u5740\u57df\u662f\u4e0d\u662f\u7a7a\u6307\u9488!\n        Node *p = head_;\n        while (p-&gt;next_ != nullptr){\n            p = p-&gt;next_;\n        }\n        Node *node = new Node(val);\n        p-&gt;next_ = node;        \n    }\n\n    void InsertHead(int val){ // \u94fe\u8868\u5934\u63d2\u6cd5; \u6ce8\u610f\u4fee\u6539\u7684\u987a\u5e8f!!\n        Node *node = new Node(val);\n        node-&gt;next_ = head_-&gt;next_;\n        head_-&gt;next_ = node;\n    }\n\n    void Remove(int val){ // \u5220\u9664\u8282\u70b9; \u7406\u89e3\u4e3a\u4ec0\u4e48p q\u8981\u4e24\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u6765\u64cd\u4f5c!\n        Node *p = head_-&gt;next_;\n        Node *q = head_;\n        while (p != nullptr){\n            if (p-&gt;data_ == val){\n                q-&gt;next_ = p-&gt;next_;\n                delete p; // \u91ca\u653ep\u5bf9\u5e94\u7684node\n                return;\n            }\n            else{\n                q = p;\n                p = p-&gt;next_;\n            }\n        }\n    }\n\n    bool Find(int val){\n        Node *p = head_-&gt;next_;\n        while (p != nullptr){\n            if (p-&gt;data_ == val){\n                return true;\n            }\n            else{\n                p = p-&gt;next_;\n            }\n        }\n        return false;\n    }\n\n    void RemoveAll(int val){\n        Node *p = head_-&gt;next_;\n        Node *q = head_;\n        while (p != nullptr){\n            if (p-&gt;data_ == val){\n                q-&gt;next_ = p-&gt;next_;\n                delete p;\n                p = q-&gt;next_;\n            }\n            else{\n                q = p;\n                p = p-&gt;next_;\n            }\n        }\n    }\n\n    void Show(){\n        // \u6ce8\u610f\u8fd9\u91cc\u6307\u9488\u7684\u8bbe\u8ba1! \u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u5c3e\u8282\u70b9\u7684\u6570\u636e\u5fd8\u8bb0\u88ab\u6253\u5370! \n        Node *p = head_-&gt;next_;\n        while (p != nullptr){\n            cout &lt;&lt; p-&gt;data_ &lt;&lt; \" \";\n            p = p-&gt;next_;\n        }\n        cout &lt;&lt; endl;\n    }\nprivate:\n    Node *head_;\n    // \u8c03\u7528\u51fd\u6570\u5185\u7684\u51fd\u6570\u65f6\u5408\u4e00\u8bbf\u95eeprivate\u6210\u5458\uff0c\u4f46\u662f\u5982\u679c\u5916\u90e8\u5e0c\u671b\u83b7\u53d6\u5230\u7684\u8bdd\uff0c\u53ef\u4ee5\u5199\u4e00\u4e2a\u63a5\u53e3\n};\n\nint main(){\n    Clink link;\n    srand(time(0));\n    for (int i = 0; i &lt; 10; i++){\n        int val = rand()%100;\n        link.InsertTail(val);\n        cout &lt;&lt; val &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    link.InsertTail(200);\n    link.Show();\n    link.Remove(200);\n    link.Show();\n    link.InsertHead(233);\n    link.InsertHead(233);\n    link.InsertTail(233);\n    link.Show();\n    link.RemoveAll(233);\n    link.Show();\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_14","title":"\u5e38\u89c1\u9898\u76ee","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_15","title":"\u5355\u94fe\u8868\u9006\u5e8f","text":"<p>Eg: head -&gt; 25 -&gt; 67 -&gt; 32 -&gt; 18   \u7ecf\u8fc7\u9006\u5e8f\u4e4b\u540e: head -&gt; 18 -&gt; 32 -&gt; 67 -&gt; 25</p> <p>\u601d\u8def: \u5934\u8282\u70b9\u7684\u5730\u5740\u57df\u53d8\u6210\u7a7a, \u7136\u540e\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u5934\u63d2. \u5934\u63d2\u7684\u65f6\u5019, \u9700\u8981\u7528\u4e24\u4e2a\u6307\u9488, \u4e00\u4e2a\u7528\u6765\u8bb0\u5f55\u987a\u5e8f\u4e0b\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740(q), \u4e00\u4e2a\u7528\u6765\u5b9e\u73b0\u5934\u63d2(p). </p> <pre><code>struct Node{\n    Node(int data = 0): data_(data), next_(nullptr){}\n    int data_;\n    Node* next_;\n};\nclass Clink{\n    //...\nprivate:\n    Node *head_;\n    // \u65b9\u4fbf\u51fd\u6570\u8bbf\u95ee\u5b83\u7684\u79c1\u6709\u6210\u5458\n    friend void ReverseLink(Clink &amp;link);\n}\nvoid ReverseLink(Clink &amp;link){\u3001\n    // \u5f15\u7528\u4f20\u9012\uff1b\u800c\u4e14\u53ef\u4ee5\u8f7b\u677e\u8bbf\u95eehead_\u5143\u7d20\n    Node *p = link.head_-&gt;next_;\n    if (p == nullptr){return;}\n    link.head_-&gt;next_ = nullptr;\n    while (p != nullptr){\n        Node *q = p-&gt;next_;\n        p-&gt;next_ = link.head_-&gt;next_;\n        link.head_-&gt;next_ = p;\n        p = q;\n    }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#k","title":"\u5355\u94fe\u8868\u6c42\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9","text":"<p>\u95ee\u9898\u63cf\u8ff0: \u5728\u5b9e\u6218\u4e2d, \u8282\u70b9\u6570\u91cf\u662f\u5f88\u591a\u7684. \u5982\u679c\u6211\u9700\u8981\u77e5\u9053\u5355\u94fe\u8868\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u7684\u6570\u5b57\u662f\u591a\u5c11\u5462? </p> <p>\u4e00\u79cd\u66b4\u529b\u7684\u65b9\u6cd5\u662f: \u5148\u904d\u5386\u4e00\u904d, \u76f4\u5230\u5c3e\u8282\u70b9, \u76f4\u5230\u5168\u90e8\u7684\u8282\u70b9\u6570\u91cf; \u7136\u540e\u518d\u904d\u5386\u4e00\u8fb9. \u8fd9\u5f53\u7136\u662f\u53ef\u4ee5\u7684, \u4f46\u662f\u65f6\u95f4\u590d\u6742\u7684\u662f<code>O(n)</code>; \u6240\u4ee5\u8bf4\u8fd9\u79cd\u65b9\u6cd5\u662f\u4e0d\u53ef\u53d6\u7684, \u800c\u4e14\u4e00\u65e6\u8282\u70b9\u6570\u91cf\u975e\u5e38\u5927, \u90a3\u4e48\u5c31\u4f1a\u77ac\u95f4\u7206\u70b8. </p> <p>\u66f4\u597d\u7684\u65b9\u6cd5\u662f: \u8bbe\u8ba1\u53cc\u6307\u9488p &amp; q, \u7136\u540e\u4e24\u8005\u90fd\u4ece\u5934\u8282\u70b9\u51fa\u53d1, \u4f46\u662f\u5148\u8ba9p\u8d70k\u6b65, \u7136\u540e\u4e4b\u540ep q\u4e00\u8d77\u8d70. \u76f4\u5230p\u6307\u9488\u53d8\u6210\u4e86\u7a7a\u6307\u9488, \u90a3\u4e48q\u81ea\u52a8\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u4e86. </p> <pre><code>struct Node{\n    Node(int data = 0): data_(data), next_(nullptr){}\n    int data_;\n    Node* next_;\n};\nclass Clink{\n    //...\nprivate:\n    Node *head_;\n    // \u65b9\u4fbf\u51fd\u6570\u8bbf\u95ee\u5b83\u7684\u79c1\u6709\u6210\u5458\n    friend bool GetLastKNode(Clink &amp;link, int k, int &amp;val);\n}\nbool GetLastKNode(Clink &amp;link, int k, int &amp;val){\n    // \u6ce8\u610f\u662f\u5f15\u7528\u4f20\u9012, \u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06\u503c\u8d4b\u7ed9val\n    Node* head = link.head_;\n    Node* q = head;\n    Node* p = head;\n    // \u597d\u4e60\u60ef: \u5224\u65ad\u53c2\u6570\u6709\u6548\u6027!! \u4e3a\u4ec0\u4e48\u5c0f\u5fc3k=0? \u56e0\u4e3ap\u6700\u540e\u5f00\u59cb\u8d700\u6b65, \u7136\u540e\u548cq\u4e00\u8d77\u5230\u7a7a\u6307\u9488\n    // \u60b2\u5267\u5c31\u662f: \u8bbf\u95ee\u4e86\u7a7a\u6307\u9488. \n    if (k &lt; 1){return false;} \n    for (int i = 0; i &lt; k; i++){\n        p = p-&gt;next_;\n        if (p == nullptr){\n            return false;\n        }\n    }\n    while (p != nullptr){\n        q = q-&gt;next_;\n        p = p-&gt;next_;\n    }\n    val = q-&gt;data_;\n    return true;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_16","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5355\u5217\u8868","text":"<p>\u5df2\u7ecf\u6709\u4e00\u4e2a\u94fe\u88681\u548c2, \u4e24\u4e2a\u4ece\u5c0f\u5230\u5927\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86, \u7136\u540e\u5e0c\u671b2\u8fde\u63a5\u52301\u4e0a. \u5e76\u4e14\u6700\u540e\u4f9d\u7136\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f.</p> <p>\u6211\u4eec\u9700\u8981\u57281 2\u4e24\u4e2a\u94fe\u8868\u4e0a\u9762\u5404\u81ea\u6709\u4e00\u4e2a\u6307\u9488, p q\u6765\u5224\u65ad\u4e24\u4e2a\u6570\u5b57\u8c01\u6253\u8c01\u5c0f; \u540c\u65f6, \u4e0d\u96be\u60f3\u5230, \u6211\u4eec\u5e0c\u671b\u7528\u4e00\u4e2alast\u6307\u9488\u6765\u50a8\u5b58\u4e0a\u4e00\u6b21\u64cd\u4f5c\u5b8c\u4e4b\u540e\u6240\u505c\u7559\u5728\u7684\u8282\u70b9\u4fe1\u606f. \u5904\u7406\u5b8c\u4e4b\u540e, \u5047\u5982\u8bf4p\u5bf9\u5e94\u6570\u5b57\u66f4\u5927, \u90a3\u4e48\u5c31: </p> <pre><code>last-&gt;next_ = p;\np = p-&gt;next_;\nlast = last-&gt;next_;\n</code></pre> <p>\u5f53\u7136, \u80af\u5b9a\u6709\u4e00\u4e2a\u6307\u9488\u4f1a\u5148\u8d70\u5230nullptr\u7684, \u90a3\u4e48\u5047\u5982\u8bf4p\u53d8\u6210\u4e86\u7a7a\u6307\u9488, \u8bf4\u660ep\u6240\u5728\u76841\u94fe\u8868\u6ca1\u6709\u8282\u70b9\u8981\u4e32\u8d77\u6765\u4e86, \u76f4\u63a5\u5c06q\u6307\u5411\u7684\u8282\u70b9\u53ca\u5176\u540e\u9762\u7684\u4e00\u7cfb\u5217\u8282\u70b9\u5f52\u5e76\u5230last\u4e0a\u9762: </p> <pre><code>struct Node{\n    Node(int data = 0): data_(data), next_(nullptr){}\n    int data_;\n    Node* next_;\n};\nclass Clink{\n    //...\nprivate:\n    Node *head_;\n    // \u65b9\u4fbf\u51fd\u6570\u8bbf\u95ee\u5b83\u7684\u79c1\u6709\u6210\u5458\n    friend bool MergeLink(Clink&amp; link1, Clink&amp; link2);\n}\nbool MergeLink(Clink&amp; link1, Clink&amp; link2){\n    Node* p = link1.head_-&gt;next_;\n    Node* q = link2.head_-&gt;next_;\n    Node* last = link1.head_;\n    link2.head_-&gt;next_ = nullptr;\n    while (p != nullptr &amp;&amp; q != nullptr){\n        if (p-&gt;data_ &lt; q-&gt;data_){\n            last-&gt;next_ = p;\n            p = p-&gt;next_;\n            last = last-&gt;next_;\n        }\n        else{\n            last-&gt;next_ = q;\n            q = q-&gt;next_;\n            last = last-&gt;next_;\n        }\n    }\n    if (p != nullptr){\n        last-&gt;next_ = p;\n    }\n    else{\n        last-&gt;next_ = q;\n    }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_17","title":"\u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u5b58\u5728\u73af\u4ee5\u53ca\u5165\u53e3\u8282\u70b9","text":"<p>\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd, \u90a3\u4e48\u5047\u5982\u8bf4\u5f00\u59cb\u904d\u5386\u7684\u8bdd, \u6839\u672c\u904d\u5386\u4e0d\u5b8c! \u4ec0\u4e48\u65f6\u5019\u5b58\u5728\u73af? \u6253\u4e2a\u6bd4\u65b9, \u5730\u5740\u4e0a\u6765\u770b\u6709: A -&gt; B -&gt; C -&gt; D -&gt; A, \u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u73af, \u800c\u4e14\u904d\u5386\u662f\u5341\u5206\u5371\u9669\u7684. </p> <p>\u4e0d\u5047\u601d\u7d22\u5730: \u53ef\u4ee5\u904d\u5386\u7684\u65f6\u5019, \u628a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\u5355\u72ec\u50a8\u5b58\u8d77\u6765, \u6bcf\u904d\u5386\u4e00\u6b65\u4e4b\u540e, \u770b\u8fd9\u4e2a\u5730\u5740\u5728\u4e0d\u5728\u4e4b\u524d\u50a8\u5b58\u7684\u5730\u5740\u5e93\u91cc\u9762. \u4f46\u662f, \u4f9d\u7136\u662f\u5e0c\u671b\u80fd\u591f\u539f\u5730\u89e3\u51b3\u95ee\u9898. </p> <p>\u73af\u7684\u7279\u70b9\u6709\u4ec0\u4e48? \u9664\u4e86\u6211\u603b\u662f\u80fd\u56de\u5230\u6211\u4e4b\u524d\u8dd1\u8fc7\u7684\u5730\u65b9, \u8fd8\u6709\u4e00\u4e2a\u7279\u70b9: \u4e24\u4e2a\u901f\u5ea6\u4e0d\u4e00\u6837\u7684\u4eba\u8dd1\u5708, \u603b\u662f\u80fd\u5feb\u7684\u4ece\u540e\u9762\u8ffd\u4e0a\u6162\u7684! \u56e0\u6b64, \u8fd9\u4e2a\u95ee\u9898\u6d89\u53ca\u5230\u4e86\u53cc\u6307\u9488\u7684\u5e94\u7528\u2014\u2014\u5feb\u6162\u6307\u9488. </p> <p>\u8fd9\u6837\u4e00\u6765, \u5224\u65ad\u51fa\u662f\u5426\u5b58\u5728\u73af\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86. \u5c31\u6bd4\u5982, slow\u6307\u9488\u8dd1\u7684\u6162, \u4e00\u6b21\u8d70\u4e00\u4e2a\u8282\u70b9; fast\u6307\u9488\u8d70\u5f97\u5feb, \u4e00\u6b21\u8d70\u4e24\u4e2a\u8282\u70b9; fast == slow, \u90a3\u4e48\u5c31\u6210\u73af, \u800c\u5982\u679cfast\u53d8\u6210\u4e86\u7a7a\u6307\u9488, \u90a3\u4e48\u5c31\u8bf4\u660e\u6ca1\u6709\u73af. \u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u6709\u4e00\u4e2a\u7075\u6027\u7684\u95ee\u9898\u4e86: \u4f1a\u4e0d\u4f1afast\u6307\u9488\u8de8\u8d8a\u8fc7slow\u6307\u9488? \u5176\u5b9e\u8fd9\u662f\u4f2a\u547d\u9898. \u552f\u4e00\u80fd\u53d1\u751f\u8fd9\u6837\u7684\u60c5\u51b5\u5c31\u662ffast == slow! </p> <p>\u4f46\u662f\u5982\u4f55\u5bfb\u627e\u8282\u70b9\u5462? \u5982\u4e0b\u56fe : </p> <p></p> <p>\u5982\u679c\u5728\u8fd9\u4e2a\u65f6\u5019, fast slow\u4e0d\u518d\u4ee3\u8868\u5feb\u6162, \u800c\u662f\u4ec5\u4ec5\u662f\u8bb0\u53f7, \u90a3\u4e48\u628afast\u6307\u9488\u653e\u56de\u5230head, \u6bcf\u6b21\u8d70\u4e00\u6b65. \u90a3\u4e48fast\u548cslow\u540c\u65f6\u5f00\u59cb\u8d70, \u6700\u540e\u518d\u6b21\u76f8\u9047\u7684\u5730\u65b9\u6b63\u597d\u5c31\u662f\u5165\u53e3\u7684\u5730\u65b9!</p> <pre><code>bool IsLinkHasCircle(Node* head, int&amp; val){\n    Node* fast = head;\n    Node* slow = head;\n    while (fast != nullptr &amp;&amp; fast-&gt;next_ != nullptr){ // fast\u8d70\u4e24\u6b65, \u6240\u4ee5\u5224\u65ad\u4e24\u4e2a\u662f\u4e0d\u662fnullptr, \u9632\u6b62\u8bbf\u95ee\u7a7a\u6307\u9488\n        slow = slow-&gt;next_;\n        fast = fast-&gt;next_-&gt;next_;\n        if (fast == slow){\n            fast = head;\n            while (fast != slow){\n                slow = slow-&gt;next_;\n                fast = fast-&gt;next_;\n            }\n            val = slow-&gt;data_;\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre> <p>\u9644: \u8fd9\u4e2a\u51fd\u6570\u4f20\u5165\u7684\u662f\u7ed3\u6784\u4f53(Node)\u6307\u9488, \u662f\u56e0\u4e3a\u8fd9\u6837\u65b9\u4fbf\u6d4b\u8bd5. \u6d4b\u8bd5\u4ee3\u7801, \u8be6\u89c1: <code>clink.cpp</code></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_18","title":"\u5224\u65ad\u4e24\u4e2a\u94fe\u8868\u662f\u5426\u76f8\u4ea4\u4ee5\u53ca\u76f8\u4ea4\u5165\u53e3","text":"<p>\u4e00\u79cd\u5f88\u76f4\u63a5\u7684\u601d\u8def: \u5148\u5404\u81ea\u904d\u5386\u4e24\u4e2a\u94fe\u8868, \u5f97\u5230a b\u4e24\u4e2a\u957f\u5ea6, \u7136\u540e\u5047\u8bbe\u94fe\u88681\u7684\u957f\u5ea6a\u66f4\u5927, \u90a3\u4e48\u5c311\u94fe\u8868\u6307\u9488\u5148\u8d70(a-b)\u6b65, \u7136\u540e1 2\u94fe\u8868\u7684\u4e24\u4e2a\u6307\u9488\u4e00\u8d77\u8d70, \u6700\u540e\u76f8\u9047\u7684\u5730\u65b9\u5c31\u662f\u5165\u53e3; \u5982\u679c\u6700\u540e\u4e24\u4e2a\u90fd\u5404\u81ea\u53d8\u6210\u4e86<code>nullptr</code>, \u90a3\u4e48\u5c31\u8bf4\u660e\u4e0d\u76f8\u4ea4. </p> <pre><code>bool IsLinkHasMerge(Node* head1, Node* head2, int&amp; val){\n    int cnt1 = 0, cnt2 = 0;\n    Node* p = head1-&gt;next_;\n    Node* q = head2-&gt;next_;\n    while (p != nullptr){\n        cnt1++;\n        p = p-&gt;next_;\n    }\n    while (q != nullptr){\n        cnt1++;\n        q = q-&gt;next_;\n    }\n    p = head1-&gt;next_;\n    q = head2-&gt;next_;\n    if (cnt1 &gt; cnt2){\n        int offset = cnt1 - cnt2;\n        while (offset-- &gt; 0){\n            p = p-&gt;next_;\n        }\n        while (p != nullptr &amp;&amp; q != nullptr){\n            if (p == q){\n                val = p-&gt;data_;\n                return true;\n            }\n            p = p-&gt;next_;\n            q = q-&gt;next_;\n        }\n        return false;\n    }\n    else {\n        int offset = cnt2 - cnt1;\n        while (offset-- &gt; 0){\n            q = q-&gt;next_;\n        }\n        while (p != nullptr &amp;&amp; q != nullptr){\n            if (p == q){\n                val = p-&gt;data_;\n                return true;\n            }\n            p = p-&gt;next_;\n            q = q-&gt;next_;\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_19","title":"\u5355\u5411\u5faa\u73af\u94fe\u8868","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_20","title":"\u57fa\u7840\u77e5\u8bc6","text":"<p>\u5355\u9879\u5faa\u73af\u94fe\u8868\u7684\u5faa\u73af\u5177\u4f53\u6765\u8bf4\u662f:\u5982\u679c\u6709\u5934\u8282\u70b9, \u5c3e\u8282\u70b9\u5b58\u50a8\u7740\u5934\u8282\u70b9\u7684\u5730\u5740; \u5982\u679c\u6ca1\u6709\u5934\u8282\u70b9, \u5c3e\u8282\u70b9\u5b58\u50a8\u7740\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740. \u6211\u4eec\u53ef\u4ee5\u4e13\u95e8\u4f7f\u7528tail\u6307\u9488, \u6765\u8bb0\u5f55\u5c3e\u8282\u70b9\u7684\u5730\u5740, \u90a3\u4e48<code>tail-&gt;next_</code>\u5c31\u662f\u5934\u8282\u70b9\u7684\u5730\u5740. \u6ce8\u610f, \u5168\u7a0btail\u7684\u4fe1\u606f\u5e94\u8be5\u5f97\u5230\u6b63\u786e\u7684\u66f4\u65b0! </p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_21","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>// circlelink.cpp\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nusing namespace std;\n\nstruct Node{\n    Node(int data = 0) : data_(data), next_(nullptr){}\n    int data_;\n    Node* next_;\n};\nclass CircleLink{\npublic:\n    CircleLink(){\n        head_ = new Node();\n        // tail\u6307\u9488\u7684\u4fe1\u606f\u5c06\u5728\u5c3e\u63d2\u7684\u8fc7\u7a0b\u4e2d\u5f97\u5230\u66f4\u65b0!\n        tail_ = head_;\n        head_-&gt;next_ = head_;\n    }\n    ~CircleLink(){\n        Node* p = head_-&gt;next_;\n        while (p != head_){\n            head_-&gt;next_ = p-&gt;next_;\n            delete p;\n            p = head_-&gt;next_;\n        }\n        delete head_;\n    }\n\npublic:\n    void InsertTail(int val){\n        Node* node = new Node(val);\n        node-&gt;next_=tail_-&gt;next_;\n        tail_-&gt;next_ = node;\n        // \u5728\u8fd9\u91cc, tail\u6307\u9488\u7684\u4fe1\u606f\u5f97\u5230\u66f4\u65b0! \n        tail_ = node;\n    }\n\n    void InsertHead(int val){\n        Node* node = new Node(val);\n        node-&gt;next_=head_-&gt;next_;\n        head_-&gt;next_ = node;\n        // \u5982\u679c\u53ea\u6709\u5934\u8282\u70b9, tail\u548chead\u4e00\u6837, \u90a3\u4e48\u5934\u63d2\u4e4b\u540e, tail\u6307\u9488\u9700\u8981\u79fb\u52a8\n        // \u4f46\u662f\u5bf9\u4e8e\u4e0d\u6b62\u5934\u8282\u70b9\u60c5\u51b5, tail\u6307\u9488\u4e0d\u9700\u8981\u79fb\u52a8. \u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u5bf9tail\u6307\u9488\u7684\u5904\u7406!\n        if (node-&gt;next_ == head_){\n            tail_ = node;\n        }\n    }\n\n    void Remove(int val){\n        Node* q = head_;\n        Node* p = head_-&gt;next_;\n        while (p != head_){ // \u6ce8\u610f\u4ec0\u4e48\u65f6\u5019\u9000\u51fa\u5faa\u73af! \u9664\u975e\u9700\u8981\u53ef\u4ee5\u5bfb\u627e\u5c3e\u8282\u70b9, \u5faa\u73af\u4e2d\u5c3d\u53ef\u80fd\u5c11\u7528-&gt;next_\u5224\u65ad\n            if (p-&gt;data_ == val){\n                q-&gt;next_ = p-&gt;next_;\n                delete p;\n                // \u5982\u679c\u5220\u9664\u7684\u662f\u4e3a\u8282\u70b9, \u90a3\u4e48tail\u6307\u9488\u9700\u8981\u5f97\u5230\u66f4\u65b0! \n                if (q-&gt;next_ == head_){\n                    tail_ = q;\n                }\n                return;\n            }\n            else {\n                q = p;\n                p = p-&gt;next_;\n            }\n        }\n        return;\n    }\n\n    bool Find(int val) const{\n        Node* p = head_-&gt;next_;\n        while (p != head_){\n            if (p-&gt;data_ == val){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    void Show() const{\n        Node* p = head_-&gt;next_;\n        while (p != head_){\n            cout &lt;&lt; p-&gt;data_ &lt;&lt; \" \";\n            p = p-&gt;next_;\n        }\n        cout &lt;&lt; endl;\n    }\n\nprivate:\n    Node* head_;\n    Node* tail_;\n };\n\nvoid TestBasic(CircleLink clink){\n    srand(time(NULL));\n    for (int i = 0; i &lt; 10; i++){\n        clink.InsertTail(rand()%100);\n    }\n    clink.Show();\n    clink.InsertHead(200);\n    clink.InsertTail(200);\n    clink.Show();\n    clink.Remove(200);\n    clink.Show();\n}\n\nint main(){\n    CircleLink clink;\n    TestBasic(clink);\n    return 0;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_22","title":"\u7ea6\u745f\u592b\u73af\u95ee\u9898","text":"<p>\u5df2\u77e5n\u4e2a\u4eba\u56f4\u5750\u5728\u4e00\u5f20\u5706\u684c\u5468\u56f4, \u4ece\u7f16\u53f7\u4e3ak\u7684\u4eba\u5f00\u59cb\u62a5\u6570, \u6570\u5230m\u7684\u90a3\u4e2a\u4eba\u51fa\u5217, \u5b83\u7684\u4e0b\u4e00\u4e2a\u4eba\u53c8\u5f00\u59cb\u4ece1\u62a5\u6570, \u6570\u5230m\u7684\u90a3\u4e2a\u4eba\u53c8\u51fa\u5217, \u4ee5\u6b64\u91cd\u590d\u4e0b\u53bb, \u76f4\u5230\u5706\u684c\u5468\u56f4\u7684\u4eba\u5168\u90e8\u51fa\u5217, \u8f93\u51fa\u4eba\u7684\u51fa\u5217\u987a\u5e8f.</p> <p>\u7531\u4e8e\u73af\u7684\u8bbe\u8ba1, \u8fd9\u4e2a\u95ee\u9898\u975e\u5e38\u9002\u5408\u7528\u5355\u5faa\u73af\u94fe\u8868\u6765\u89e3\u51b3. \u56e0\u4e3a\u6d89\u53ca\u5230\u4e86\u5220\u9664\u8282\u70b9, \u6240\u4ee5\u81ea\u7136\u60f3\u5230\u9700\u8981\u7528p q\u4e24\u4e2a\u6307\u9488(q\u5728p\u540e\u9762, \u7528\u6765\u65b9\u4fbf\u5220\u9664\u8282\u70b9). \u90a3\u4e48\u6700\u540e\u7ed3\u675f\u7684\u60c5\u51b5\u662f\u4ec0\u4e48\u5462? \u6700\u540e, p q\u6307\u9488\u4f1a\u91cd\u5408. </p> <pre><code>// circlelink.cpp\nvoid Joseph(Node* head, int k, int m){\n    Node* p = head;\n    Node* q = head;\n    // q\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8282\u70b9! \u56e0\u4e3a\u5728\u6211\u4eec\u6d4b\u8bd5\u7684\u65f6\u5019, \u6ca1\u6709\u5934\u8282\u70b9.\n    while (q-&gt;next_ != head){\n        q = q-&gt;next_;\n    }\n    // \u5230\u7b2ck\u4e2a\u4eba\n    for (int i = 1; i &lt; k; i++){\n        q = p;\n        p = p-&gt;next_;\n    }\n    for (;;){ // \u4e00\u76f4\u5faa\u73af, \u76f4\u5230p == q\n        for (int i = 1; i &lt; m; i++){\n            q = p;\n            p = p-&gt;next_;\n        }\n        cout &lt;&lt; p-&gt;data_ &lt;&lt; \" \";\n        if (p == q){\n            delete p;\n            break;\n        }\n        q-&gt;next_ = p-&gt;next_;\n        delete p;\n        p = q-&gt;next_;\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_23","title":"\u53cc\u5411\u94fe\u8868","text":"<ul> <li>\u6bcf\u4e00\u4e2a\u8282\u70b9\u9664\u4e86\u6570\u636e\u57df\uff0c\u8fd8\u6709next\u6307\u9488\u57df\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0cpre\u6307\u9488\u57df\u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9</li> <li>\u5934\u7ed3\u70b9\u7684pre\u662fNULL\uff0c\u672b\u5c3e\u8282\u70b9\u7684next\u662fNULL</li> </ul> <p>\u6ce8\u610f\uff01\u5f53\u7136\u662f\u53ef\u4ee5\u5728class\u91cc\u9762\u52a0\u5165tail\u8282\u70b9\u7684\u8bbe\u8ba1\u7684\uff0c\u7c7b\u4f3c\u4e8e\u5934\u90e8\u7684\u54d1\u7ed3\u70b9\uff08CS101\uff09\uff1b\u800c\u4e0b\u9762\u7684\u5b9e\u73b0\u4e2d\u5e76\u6ca1\u6709\u8bbe\u8ba1tail\u8282\u70b9\u3002</p> <p>\u6ce8\uff1a\u505a\u9898\u65f6\u8981\u5224\u65ad\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49\u7a76\u7adf\u662f\u5355\u5411\u8fd8\u662f\u53cc\u5411\uff08\u56e0\u4e3a\u53cc\u5411\u786e\u5b9e\u662f\u65b9\u4fbf\uff09</p> <pre><code>// doublelink.cpp\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Node{\n    Node(int data = 0) \n        : data_(data)\n        , next_(nullptr)\n        , pre_(nullptr) \n        {} // \u89c4\u8303\u5316\u7684\u521d\u59cb\u5316\u6784\u9020\u5217\u8868,\u4e00\u884c\u4e00\u4e2a\n    int data_;\n    Node *next_;\n    Node *pre_;\n};\n\nclass DoubleLink{\npublic:\n    DoubleLink(){\n        head_ = new Node();\n    }\n    ~DoubleLink(){\n        Node* p = head_;\n        while (p != nullptr){\n            head_ = head_-&gt;next_;\n            delete p;\n            p = head_;\n        }\n    }\n\nprivate:\n    Node* head_;\n\npublic:\n    void InsertHead(int val){\n        Node* node = new Node(val);\n        node-&gt;next_ = head_-&gt;next_;\n        node-&gt;pre_ = head_;\n        if (head_-&gt;next_ != nullptr){\n            head_-&gt;next_-&gt;pre_ = node;\n        }\n        head_-&gt;next_ = node;\n    }\n\n    void InsertTail(int val){\n        Node* p = head_;\n        while (p-&gt;next_ != nullptr){\n            p = p-&gt;next_;\n        }\n        Node* node = new Node(val);\n        node-&gt;pre_ = p;\n        p-&gt;next_ = node;\n    }\n\n    bool Find(int val){\n        Node* p = head_-&gt;next_;\n        while (p != nullptr){\n            if (p-&gt;data_ == val){\n                return true;\n            }\n            else{\n                p = p-&gt;next_;\n            }\n        }\n    }\n\n    void Remove(int val){\n        Node* p = head_-&gt;next_;\n        while (p != nullptr){\n            if (p-&gt;data_ == val){\n                p-&gt;pre_-&gt;next_ = p-&gt;next_;\n                if (p-&gt;next_ != nullptr){\n                    p-&gt;next_-&gt;pre_ = p-&gt;pre_;\n                }\n                Node* next = p-&gt;next_;\n                delete p;\n                p = next; // \u6709\u4e86\u8fd9\u4e00\u884c,\u8bf4\u660e\u662f\u5220\u9664\u5168\u90e8\u503c\u4e3aval\u7684\u8282\u70b9\n            }\n            else{\n                p = p-&gt;next_;\n            }\n        }\n    }\n\n    void Show(){\n        Node* p = head_-&gt;next_;\n        while (p != nullptr){\n            cout &lt;&lt; p-&gt;data_ &lt;&lt; \" \";\n            p = p-&gt;next_;\n        }\n        cout &lt;&lt; endl;\n     }\n};\n\nvoid TestBasic(DoubleLink&amp; dlink){\n    cout &lt;&lt; \"Testing Basics!\" &lt;&lt; endl;\n    dlink.InsertHead(11);\n    dlink.InsertHead(45);\n    dlink.InsertHead(14);\n    dlink.Show();\n    dlink.InsertTail(19);\n    dlink.InsertTail(19);\n    dlink.InsertTail(810);\n    dlink.Show();\n}\n\nvoid TestRemoval(DoubleLink&amp; dlink){\n    dlink.Remove(19);\n    dlink.Show();\n}\n\nint main(){\n    DoubleLink dlink;\n    TestBasic(dlink);\n    TestRemoval(dlink);\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_24","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u4e3a\u4ec0\u4e48\u8bf4\u5141\u8bb8\u4fee\u6539\u8282\u70b9\uff08\u800c\u4e0d\u662f\u5b9a\u6b7b\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u6570\u636e\u57df\u548c\u6307\u9488\u57df\u90fd\u4e0d\u53ef\u4ee5\u4fee\u6539\uff09\u80fd\u591f\u52a0\u5feb\u4e09\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5462\uff1f\u56e0\u4e3a\u5728\u524d\u9762\u63d2\u5165\u4e0d\u518d\u662f\u5fc5\u987b\u8981\u53e6\u8bbe\u6307\u9488\u4e0d\u65ad\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u524d\u4e00\u4e2a\u8282\u70b9\u4e86\uff1b\u800c\u662f\u6211\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u503c\u6362\u6210\u5b83\u7684\uff0c\u7136\u540e\u6307\u9488\u57df\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u5b83\u81ea\u5df1\u7684\u5730\u5740\u88ab\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7684\u6307\u9488\u57df\u6307\u5411\u3002</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_25","title":"\u6808","text":"<p>\u6808\u5341\u5206\u91cd\u8981\uff01\u7279\u70b9\uff1a\u5148\u8fdb\u540e\u51fa\uff0c\u540e\u8fdb\u5148\u51fa\u3002\u6808\u5e76\u4e0d\u662f\u4e00\u4e2a\u5168\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u662f\u5efa\u7acb\u5728\u6570\u7ec4\u548c\u94fe\u8868\u4e4b\u4e0a\u5b9e\u73b0\u7684\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u5728\u6570\u7ec4\u548c\u94fe\u8868\u4e2d\uff0c\u53ef\u4ee5\u5728\u672b\u5c3e\u548c\u5934\u90e8\u63d2\u5165\u5143\u7d20\uff0c\u4f46\u662f\u5728\u6808\u4e2d\u6709\u786c\u6027\u89c4\u5b9a\uff1a\u53ea\u80fd\u5728\u4e00\u4e2a\u4f4d\u7f6e\u52a0\u5165\u5143\u7d20\uff0c\u53ea\u80fd\u5728\u4e00\u4e2a\u4f4d\u7f6e\u5220\u9664\u5143\u7d20\u3002\u6808\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a\u987a\u5e8f\u6808\u548c\u94fe\u5f0f\u6808\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_26","title":"\u987a\u5e8f\u6808","text":"<p>\u987a\u5e8f\u6808\uff08Sequential Stack\uff09\uff1a\u5efa\u7acb\u5728\u6570\u7ec4\u4e4b\u4e0a\u3002\u987a\u5e8f\u6808\u4e2d\uff0c\u6808\u5e95\u5c42\u6570\u7ec4\u7684\u8d77\u59cb\u5730\u5740\u79f0\u4e3a\u6808\u5e95\uff0c\u800c\u53ea\u80fd\u5728\u6808\u9876\uff08top\uff09\u8fdb\u884c\u5143\u7d20\u7684\u8fdb\u51fa\u3002\u4e00\u5f00\u59cb\uff0c<code>top = 0 // top\u4ee3\u8868\u5143\u7d20\u7684\u6570\u7ec4\u4e0b\u6807</code>\uff0c\u4ee3\u8868\u6808\u7684\u521d\u59cb\u5316\uff0c\u6808\u662f\u7a7a\u7684\u3002\u4e4b\u540e\u5143\u7d20\u8fdb\u884c\u5165\u6808\uff0c\u800c\u53ea\u80fd\u4ece\u6808\u9876\u8fdb\u5165\uff0c\u56e0\u6b64\u662f\uff1a<code>arr[top] = val; top++;</code>\u90a3\u4e48\u8bbf\u95ee\u6808\u9876\u5143\u7d20\u5c31\u662f<code>arr[top-1]</code>\u4e86\u3002\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u51fa\u6808\u5462\uff1f\u5176\u5b9e<code>top--;</code>\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u53ea\u8981\u63a7\u5236\u597dtop\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4f7f\u5f97\u6808\u5916\u7684\u6570\u636e\u8bbf\u95ee\u4e0d\u5230\uff0c\u5c31\u80fd\u5b9e\u73b0\u51fa\u5165\u6808\u3002\u7c7b\u4f3c\u5730\uff0c\u60f3\u8981\u7a7a\u6808\u5c31\u76f4\u63a5<code>top = 0;</code>\u3002\u800c\u5f53\u6808\u6ee1\u7684\u65f6\u5019<code>top == sizeof(arr)/sizeof(arr[0])</code>\uff0c\u5c31\u4e0d\u80fd\u518d\u5728\u539f\u5730\u63d2\u5165\u5143\u7d20\u4e86\uff0c\u4e0d\u7136\u5c31\u6570\u7ec4\u8d8a\u754c\u8bbf\u95ee\u4e86\uff0c\u6240\u4ee5\u5c31\u8981\u8003\u8651\u81ea\u52a8\u6269\u5bb9\uff08\u548c\u6570\u7ec4\u5f88\u50cf\uff09\u3002</p> <pre><code>// sequential_stack.cpp\n#include &lt;iostream&gt;\nusing namespace std;\n\n// \u987a\u5e8f\u6808 C++\u5bb9\u5668\u9002\u914d\u5668 stack\nclass SeqStack{\npublic:\n    SeqStack(int size = 10)\n        : mtop(0)\n        , mcap(size)\n        {\n            mpStack = new int[mcap];\n        }\n    ~SeqStack(){\n        delete[] mpStack;\n        mpStack = nullptr; // \u9632\u6b62\u91ce\u6307\u9488\n    }\n\npublic:\n    // \u5165\u6808\n    void push(int val){\n        if (mtop == mcap){\n            // \u6269\u5bb9\n            expand(2*mcap);\n        }\n        mpStack[mtop++] = val; // \u8d4b\u503c\u540e,top++\n    }\n\n    void pop(){\n        if (mtop == 0){\n            // \u629b\u5f02\u5e38\u4e5f\u662f\u4e00\u79cdreturn\n            throw \"Stack is empty\";\n        }\n        mtop--;\n    }\n\n    int top() const{ // \u52a0const\u662f\u56e0\u4e3a,\u8fd9\u4e2a\u65b9\u6cd5\u662f\u53ea\u8bfb\u7684\n        if (mtop == 0){\n            throw \"Stack is empty\";\n        }\n        return mpStack[mtop-1];\n    }\n\n    bool empty(){\n        return mtop == 0;\n    }\n\n    int size() const{\n        return mtop;\n    }\n\nprivate:\n    int* mpStack;\n    int mtop; // \u6808\u9876\u4f4d\u7f6e\n    int mcap; // \u6808\u7a7a\u95f4\u5927\u5c0f\n\nprivate:\n    void expand(int size){\n        int* p = new int[size];\n        memcpy(p, mpStack, mtop*sizeof(int));\n        delete[] mpStack;\n        mpStack = p;\n        mcap = size;\n    }\n};\n\nint main(){\n    int arr[] = {12, 4, 56, 7, 89, 31, 53, 75};\n    SeqStack s;\n    for (int v : arr){\n        s.push(v);\n    }\n    while (!s.empty()){\n        cout &lt;&lt; s.top() &lt;&lt; \" \";\n        s.pop();\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_27","title":"\u94fe\u8868\u6808","text":"<p>\u5728\u987a\u5e8f\u6808\u4e2d\uff0c\u6570\u636e\u7684\u6269\u5bb9\u5341\u5206\u4f4e\u6548\uff0c\u56e0\u6b64\u8003\u8651\u5229\u7528\u94fe\u8868\u7684\u4f18\u52bf\u6765\u5f25\u8865\u8fd9\u4e00\u4e0d\u8db3\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass LinkStack{\npublic:\n    LinkStack() : size_(0){\n        head_ = new Node;\n    }\n    ~LinkStack(){\n        Node* p = head_;\n        while (p != nullptr){\n            head_ = head_-&gt;next_;\n            delete p;\n            p = head_;\n        }\n    }\n\npublic:\n    // \u5165\u6808 \u5934\u7ed3\u70b9\u7684\u540e\u9762\u7b2c\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u7684\u4f4d\u7f6e\u4f5c\u4e3a\u6808\u9876\n    void push(int val){\n        Node* node = new Node(val);\n        node-&gt;next_ = head_-&gt;next_;\n        head_-&gt;next_ = node;\n        size_++;\n    }\n    // \u51fa\u6808\n    void pop(){\n        if (head_-&gt;next_ == nullptr)\n            throw \"Stack is empty!\";\n        Node* p = head_-&gt;next_;\n        head_-&gt;next_ = p-&gt;next_;\n        delete p;\n        size_--;\n    }\n\n    int top() const{\n        if (head_-&gt;next_ == nullptr)\n            throw \"Stack is empty!\";\n        return head_-&gt;next_-&gt;data_;\n    } \n\n    bool empty(){\n        return head_-&gt;next_ == nullptr;\n    }\n\n    int size() const{\n        // \u8fd4\u56de\u6808\u5143\u7d20\u4e2a\u6570\uff0c\u5982\u679c\u904d\u5386\uff0c\u90a3\u4e48\u5c31\u662fO(n)\n        // \u4e3a\u4e86O(1),\u53ef\u4ee5\u5728\u6210\u5458\u91cc\u9762\u52a0\u5165\u8bb0\u5f55\u8fd9\u4e00\u53c2\u6570\u7684\u8bbe\u8ba1\n        return size_;\n    }\nprivate:\n    struct Node{\n        Node(int data = 0) : data_(data), next_(nullptr){}\n        int data_;\n        Node* next_;\n    };\n    Node* head_;\n    int size_;\n};\n\nint main(){\n    int arr[] = {12, 4, 56, 7, 89, 31, 53, 75};\n    LinkStack s;\n    for (int v : arr){\n        s.push(v);\n    }\n    cout &lt;&lt; \"The size of the stack is: \" &lt;&lt; s.size() &lt;&lt; endl;\n    while (!s.empty()){\n        cout &lt;&lt; s.top() &lt;&lt; \" \";\n        s.pop();\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_28","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_29","title":"\u62ec\u53f7\u5339\u914d\u95ee\u9898","text":"<p>\u601d\u8def\uff1a 1. \u904d\u5386s\u5b57\u7b26\u4e32\uff0c\u9047\u5230\u5de6\u62ec\u53f7\u76f4\u63a5\u5165\u6808  2. \u5982\u679c\u9047\u5230\u4e86\u53f3\u62ec\u53f7\uff0c\u4ece\u6808\u9876\u53d6\u51fa\u4e00\u4e2a\u5de6\u62ec\u53f7\uff0c\u5982\u679c\u5339\u914d\uff0c\u7ee7\u7eed\uff1b\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u7ed3\u675f\uff0c\u8fd4\u56defalse. </p> <p>\u4f46\u662f\u4f9d\u7136\u6709\u4e00\u4e9b\u7ec6\u8282: 1. \u5982\u679c\u662f<code>(</code>\u5462\uff1f \u5de6\u62ec\u53f7\u90fd\u653e\u8fdb\u4e86\u6808\u91cc\u9762\uff0c\u56e0\u6b64\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u56e0\u6b64\u9700\u8981\u6ce8\u610f\u5faa\u73af\u5916\u8981\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a    2. \u5982\u679c\u662f<code>)</code>\u5462\uff1f\u9047\u5230\u4e86\u53f3\u62ec\u53f7\uff0c\u4f46\u662f\u6808\u91cc\u9762\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u56e0\u6b64\u6ca1\u6709\u6b64\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u9700\u8981\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\u3002</p> <pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        stack&lt;char&gt; cs;\n        for (char ch : s){\n            if (ch == '(' || ch == '[' || ch == '{'){\n                cs.push(ch);\n            }\n            else{\n                if (cs.empty())\n                    return false;\n                char cmp = cs.top();\n                cs.pop();\n                if (ch == ')' &amp;&amp; cmp != '('\n                || ch == ']' &amp;&amp; cmp != '['\n                || ch == '}' &amp;&amp; cmp != '{'){\n                    return false;\n                }\n            }\n        }\n        // \u8fd8\u9700\u8981\u5224\u65ad\u6808\u91cc\u9762\u662f\u5426\u5904\u7406\u5b8c\u6bd5\n        return cs.empty();\n    }\n};\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_30","title":"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f","text":"<p>\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u6240\u8c13\u540e\u7f00\u5c31\u662f\u6307\u7b97\u7b26\u5199\u5728\u540e\u9762\u3002</p> <ul> <li>\u5e73\u5e38\u4f7f\u7528\u7684\u7b97\u5f0f\u5219\u662f\u4e00\u79cd\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u5982 <code>( 1 + 2 ) * ( 3 + 4 )</code> \u3002</li> <li>\u8be5\u7b97\u5f0f\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u5199\u6cd5\u4e3a <code>( ( 1 2 + ) ( 3 4 + ) * )</code> \u3002</li> </ul> <p>\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u4e2a\u4f18\u70b9\uff1a</p> <ul> <li>\u53bb\u6389\u62ec\u53f7\u540e\u8868\u8fbe\u5f0f\u65e0\u6b67\u4e49\uff0c\u4e0a\u5f0f\u5373\u4fbf\u5199\u6210 <code>1 2 + 3 4 + *</code>\u4e5f\u53ef\u4ee5\u4f9d\u636e\u6b21\u5e8f\u8ba1\u7b97\u51fa\u6b63\u786e\u7ed3\u679c\u3002</li> <li>\u9002\u5408\u7528\u6808\u64cd\u4f5c\u8fd0\u7b97\uff1a\u9047\u5230\u6570\u5b57\u5219\u5165\u6808\uff1b\u9047\u5230\u7b97\u7b26\u5219\u53d6\u51fa\u6808\u9876\u4e24\u4e2a\u6570\u5b57\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u5c06\u7ed3\u679c\u538b\u5165\u6808\u4e2d</li> </ul> <pre><code>\u8f93\u5165\uff1atokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n\u8f93\u51fa\uff1a22\n\u89e3\u91ca\uff1a\u8be5\u7b97\u5f0f\u8f6c\u5316\u4e3a\u5e38\u89c1\u7684\u4e2d\u7f00\u7b97\u672f\u8868\u8fbe\u5f0f\u4e3a\uff1a\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</code></pre> <p>\u601d\u8def\u5df2\u7ecf\u6e05\u6670\u5730\u8868\u8fbe\u5728\u9898\u76ee\u91cc\u9762\u4e86\u3002</p> <pre><code>class Solution {\npublic:\n    int calculate(int left, int right, char sign){\n        switch(sign){\n            case '+' : return left + right; \n            case '-' : return left - right; \n            case '*' : return left * right; \n            case '/' : return left / right; \n        }\n        throw \"\";\n        // throw\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u901a\u8fc7\u901a\u8fc7\u7f16\u8bd1\uff0c\u5e76\u4e14\u9632\u6b62case\u4e2d\u51fa\u73b0\u975e\u52a0\u51cf\u4e58\u9664\u7684char\n    }\n    int evalRPN(vector&lt;string&gt;&amp; tokens) {\n        stack&lt;int&gt; is;\n        for (string&amp; str : tokens){\n            if (str.size() == 1 &amp;&amp;\n            (str[0] == '+' || str[0] == '-'\n            || str[0] == '*' || str[0] == '/'))\n            {\n                int right = is.top();\n                is.pop();\n                int left = is.top();\n                is.pop();\n                is.push(calculate(left, right, str[0]));\n            }\n            else{\n                // string\u7684\u6570\u5b57\u8f6c\u5316\u4e3a\u6b63\u6574\u6570\uff0cc++\u63a5\u53e3\n                is.push(stoi(str));\n            }\n        }\n        return is.top();\n    }\n};\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_31","title":"\u4e2d\u7f00\u8f6c\u540e\u8868\u8fbe\u5f0f","text":"<p>\u90a3\u4e48\u5982\u4f55\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u5316\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u5462\uff1f\u5982\u679c\u80fd\u5b9e\u73b0\u8fd9\u4e2a\uff0c\u90a3\u4e48\u5c31\u80fd\u5f88\u597d\u5730\u5b9e\u73b0\u4e2d\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u3002</p> <p>\u90a3\u4e48\u4f8b\u5982<code>(1+2)*(3+4)</code>\u8fd9\u6837\u7684\u5f0f\u5b50\u5982\u4f55\u53d8\u6210 <code>1 2 + 3 4 + *</code>\u5462\uff1f</p> <p>\u6211\u4eec\u8981\u5355\u72ec\u8bbe\u8ba1\u7b26\u53f7\u6808\u3002\u9047\u5230\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa\uff0c\u800c\u9047\u5230\u7b26\u53f7\uff1a</p> <ul> <li>\u6808\u4e3a\u7a7a\uff0c\u90a3\u4e48\u7b26\u53f7\u76f4\u63a5\u5165\u6808</li> <li>\u5982\u679c\u662f(\uff0c\u76f4\u63a5\u5165\u6808</li> <li>\u7528\u5f53\u524d\u7b26\u53f7\u548c\u6808\u9876\u7b26\u53f7\u6bd4\u8f83\u4f18\u5148\u7ea7*</li> </ul> <p>\u4f18\u5148\u7ea7*\uff1a</p> <ul> <li>\u5f53\u524d\u7b26\u53f7&gt;\u6808\u9876\u7b26\u53f7\uff0c\u5f53\u524d\u7b26\u53f7\u5165\u6808\uff0c\u7ed3\u675f</li> <li>\u5f53\u524d\u7b26\u53f7&lt;=\u6808\u9876\u7b26\u53f7\uff0c\u6808\u9876\u7b26\u53f7\u51fa\u6808\u5e76\u8f93\u51fa\uff0c\u7ee7\u7eed\u6bd4\u8f83</li> </ul> <p>\u76f4\u5230\uff1a1. \u6808\u91cc\u9762\u7b26\u53f7\u51fa\u5b8c   2. \u9047\u5230)\uff0c\u8981\u4e00\u76f4\u51fa\u6808\uff0c\u76f4\u5230\u9047\u89c1(\u4e3a\u6b62</p> <pre><code>// MiddleToEndExpr.cpp\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nbool Priority(char ch, char topch){\n    if ((ch == '*' || ch == '/') &amp;&amp; \n    (topch == '+' || topch == '-')){\n        return true;\n    }\n    if (ch == ')'){return false;}\n    if (topch == '(' &amp;&amp; ch != ')'){return true;}\n    return false;\n}\n\n\nstring MiddleToEndExpr(string expr){\n    string result;\n    stack&lt;char&gt; s;\n\n    for (char ch : expr){\n        if (ch &gt;= '0' &amp;&amp; ch &lt;= '9'){\n            result.push_back(ch);\n        }\n        else{\n            if (s.empty() || ch == '('){\n                s.push(ch);\n            }\n            else{\n                while (!s.empty()){\n                    char topch = s.top();\n                    if (Priority(ch, topch)){\n                        s.push(ch);\n                        break;\n                    }\n                    else{\n                        s.pop();\n                        if (topch == '(')\n                            break;\n                        result.push_back(topch);\n                    }\n                }\n            }\n        }\n    }\n    // \u5982\u679c\u7b26\u53f7\u6808\u4ecd\u7136\u5b58\u7559\u7b26\u53f7\n    while (!s.empty()){\n        result.push_back(s.top());\n        s.pop();\n    }\n    return result;\n}\n\nint main(){\n    cout &lt;&lt; MiddleToEndExpr(\"(1+2)*(3+4)\") &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#stl","title":"STL\u5b9e\u73b0","text":"<p>queue\u5934\u6587\u4ef6\u4e2d\u7684STL\u6240\u652f\u6301\u7684\u51fd\u6570\uff1apush(), pop()(\u6ca1\u6709\u8fd4\u56de\u503c), top()(\u4e13\u95e8\u8fd4\u56de\u6808\u9876\u503c)\u3002\u6ce8\u610f\uff0c\u6ca1\u6709\u4e13\u95e8\u63d0\u4f9b\u6808\u5e95\u5143\u7d20\u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u961f\u5217\u662fLIFO\uff08last-in, first-out\uff09\uff0c\u6ca1\u6709\u8bbf\u95ee\u6808\u5e95\u5143\u7d20\u7684\u63a5\u53e3\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\nusing namespace std;\nint main() {\n    stack&lt;int&gt; istack;\n\n    istack.push( 13 );\n    istack.push( 42 );\n    cout &lt;&lt; \"Top: \" &lt;&lt; istack.top() &lt;&lt; endl;\n    istack.pop();                             // no return value\n    cout &lt;&lt; \"Top: \" &lt;&lt; istack.top() &lt;&lt; endl;\n    cout &lt;&lt; \"Size: \" &lt;&lt; istack.size() &lt;&lt; endl;\n\n    return 0;\n}\n\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_32","title":"\u961f\u5217","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_33","title":"\u57fa\u7840\u4e0e\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u7279\u70b9\uff1a\u5148\u8fdb\u5148\u51fa\uff0c\u540e\u8fdb\u540e\u51fa</p> <p>\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u9700\u8981\u4e24\u5957\u5f15\u7d22\uff0cfirst\u8bb0\u5f55\u5934\uff0crear\u8bb0\u5f55\u5c3e\u3002\u5165\u961f\u7684\u8fc7\u7a0b\u4e2d\uff0c<code>arr[rear] = val; rear++;</code>\uff0c\u90a3\u4e48\u548c\u6808\u7c7b\u4f3c\u5730\uff0c\u51fa\u961f\u7684\u65f6\u5019\u76f4\u63a5<code>first++\uff1b</code>\u5c31\u53ef\u4ee5\u4e86\u3002\u5f53\u7136\uff0crear\u6709\u8d8a\u754c\u8bbf\u95ee\u7684\u5371\u9669\uff08\u5982\u679c\u662f\u7528\u6570\u7ec4\u5b9e\u73b0\uff09\uff0c\u56e0\u4e3arear\u53ef\u80fd\u7b49\u4e8e<code>arr.length</code>\u3002\u800c\u4e14\u524d\u9762\u51fa\u961f\u7684\u5143\u7d20\u6839\u672c\u7528\u4e0d\u4e0a\uff0c\u5c31\u4f1a\u95f2\u7f6e\u5728\u90a3\u91cc\uff0c\u6d6a\u8d39\u7a7a\u95f4\u3002\u6240\u4ee5\u8bf4\u5728\u5c1d\u8bd5\u7528\u6570\u7ec4\u5b9e\u73b0\u961f\u5217\u7684\u65f6\u5019\uff0c\u903b\u8f91\u8981\u8fdb\u884c\u8f6c\u5316\uff1a</p> <p>\u903b\u8f91\u4e0a\uff0c\u5f53rear\u51c6\u5907\u8d8a\u754c\u7684\u65f6\u5019\uff0c\u76f4\u63a5<code>rear = (rear + 1) % arr.length</code>\uff0c\u90a3\u4e48\u6bcf\u4e00\u6b21\u5165\u961f\u90fd\u4f1a\u628a\u4e4b\u524d\u51fa\u961f\u7684\u4f4d\u7f6e\u7684\u5143\u7d20\u8986\u76d6\u6389\uff0c\u4ece\u800c\u91cd\u65b0\u5229\u7528\u5185\u5b58\u3002\u90a3\u4e48rear\u53ef\u80fd\u4f1a\u8ffd\u4e0afirst\u7684\u5440\uff01\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u662f\u7a7a\u8fd8\u662f\u6ee1\u5462\uff1f\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u80fd\u8ba9\u6570\u7ec4\u5b58\u6ee1\uff0c\u56e0\u6b64\u5f53\uff1a <code>(rear+1)%length == first</code>\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8ba4\u4e3a\u73af\u5f62\u961f\u5217\u6ee1\u4e86\uff08\u4f46\u4e8b\u5b9e\u4e0arear\u6307\u9488\u6240\u5728\u7684\u5730\u65b9\u5e76\u6ca1\u6709\u5b58\u6570\u636e\uff0c\u6216\u8005\u8bf4\u5b58\u7684\u662f\u5df2\u7ecf\u51fa\u961f\u7684\u6570\u636e\uff1b\u6362\u800c\u8a00\u4e4b\uff0cfirst\u5f15\u7d22\u6240\u5728\u7684\u4f4d\u7f6e\u6709\u6570\u636e\uff0c\u800crear\u5f15\u7d22\u6240\u5728\u7684\u4f4d\u7f6e\u6ca1\u6709\u6570\u636e\uff0c\u800c\u662frear\u7684\u524d\u9762\u4e00\u4e2a\u5730\u65b9\u6709\u6570\u636e\uff01\uff09\uff0c\u800c<code>first == rear</code>\u7684\u65f6\u5019\u73af\u5f62\u961f\u5217\u5c31\u662f\u7a7a\u7684\u3002</p> <p>\u961f\u5217\u7684\u5b9e\u73b0\u53ef\u4ee5\u4f9d\u9760\u6570\u7ec4\uff1a</p> <pre><code>// queue.cpp\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Queue{\npublic:\n    Queue(int size = 10)\n    : cap_(size)\n    , front_(0)\n    , rear_(0)\n    , size_(0){\n        pQue_ = new int[cap_];\n    }\n    ~Queue(){\n        delete[] pQue_;\n        pQue_ = nullptr;\n    }\n\npublic:\n    void push(int val){\n        if ((rear_ + 1) % cap_ == front_){\n            expand(2 * cap_);\n        }\n        pQue_[rear_] = val;\n        rear_ = (rear_ + 1) % cap_;\n        size_++;\n    }\n\n    void pop(){\n        if (front_ == rear_){\n            throw \"The Queue is empty!\";\n        }\n        front_ = (front_ + 1) % cap_;\n        size_--;\n    }\n\n    int front() const{\n        if (front_ == rear_){\n            throw \"The Queue is empty!\";\n        }\n        return pQue_[front_];\n    }\n\n    int back() const{\n        if (front_ == rear_){\n            throw \"The Queue is empty!\";\n        }\n        return pQue_[(rear_ - 1 + cap_) % cap_];\n        // \u4e0a\u9762\u8fd9\u4e2a\u5f0f\u5b50\u7684\u8bbe\u8ba1\u662f\u4e3a\u4e86\u5305\u62ecrear\u4e3a0\u7684\u60c5\u51b5\n    }\n\n    bool empty() const{\n        return front_ == rear_;\n    }\n\n    int size() const{\n        return size_;\n    }\nprivate:\n    void expand(int size){\n        int* p = new int[size];\n        int i = 0;\n        int j = front_;\n        for (;j != rear_; i++,j = (j+1) % cap_){\n            p[i] = pQue_[j];\n        }\n        delete[] pQue_;\n        pQue_ = p;\n        cap_ = size_;\n        front_ = 0;\n        rear_ = i;\n    }\nprivate:\n    int* pQue_;\n    int cap_; // \u7a7a\u95f4\u5bb9\u91cf\n    int front_; // \u961f\u5934\n    int rear_; //\u961f\u5c3e\n    int size_;\n};\n\nint main(){\n    int arr[] = {11, 45, 14, 19, 19, 8, 1, 0};\n    Queue que;\n    for (int v : arr){\n        que.push(v);\n    }\n    cout &lt;&lt; que.front() &lt;&lt; endl;\n    cout &lt;&lt; que.back() &lt;&lt; endl;\n    que.push(100);\n    que.push(200);\n    que.push(300);\n    cout &lt;&lt; que.front() &lt;&lt; endl;\n    cout &lt;&lt; que.back() &lt;&lt; endl;\n    while (!que.empty()){\n        cout &lt;&lt; que.front() &lt;&lt; \" \" &lt;&lt; que.back() &lt;&lt; endl;\n        que.pop();\n    }\n}\n</code></pre> <p>\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f9d\u9760\u94fe\u8868\u3002\u8fd9\u6837\u73af\u5f62\u7684\u590d\u6742\u7ed3\u6784\u5c31\u53ef\u4ee5\u5229\u7528\u53cc\u5411\u5faa\u73af\u94fe\u8868\u8868\u793a\u4e86\uff1a</p> <pre><code>// linkqueue.cpp\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass LinkQueue{\npublic:\n    LinkQueue(){\n        head_ = new Node();\n        head_-&gt;next_ = head_;\n        head_-&gt;pre_ = head_;\n    }\n\n    ~LinkQueue(){\n        Node* p = head_-&gt;next_;\n        while (p != head_){\n            head_-&gt;next_ = p-&gt;next_;\n            p-&gt;next_-&gt;pre_ = head_;\n            delete p;\n            p = head_-&gt;next_;\n        }\n        delete head_;\n        head_ = nullptr;\n    }\n\npublic:\n    void push(int val){\n        Node* p = head_-&gt;pre_;\n        Node* node = new Node(val);\n        node-&gt;next_ = head_;\n        node-&gt;pre_ = p;\n        head_-&gt;pre_-&gt;next_ = node;\n        head_-&gt;pre_ = node;\n    }\n\n    void pop(){\n        if (head_-&gt;next_ == head_){\n            throw \"queue is empty!\";\n        }\n        Node* p = head_-&gt;next_;\n        head_-&gt;next_ = p-&gt;next_;\n        p-&gt;next_-&gt;pre_ = head_;\n        delete p;\n    }\n\n    int front() const{\n        if (head_-&gt;next_ == head_){\n            throw \"queue is empty!\";\n        }\n        return head_-&gt;next_-&gt;data_;\n    }\n\n    int back() const{\n        if (head_-&gt;next_ == head_){\n            throw \"queue is empty!\";\n        }\n        return head_-&gt;pre_-&gt;data_;\n    }\n\n    bool empty() const{\n        return head_-&gt;next_ == head_;\n    }\nprivate:\n    struct  Node{\n        Node(int data = 0) \n        : data_(data)\n        , next_(nullptr)\n        , pre_(nullptr)\n        {}\n        int data_;\n        Node* next_;\n        Node* pre_;\n    };\n    Node* head_;\n};\n\nint main(){\n    int arr[] = {11, 45, 14, 19, 19, 8, 1, 0};\n    LinkQueue que;\n    for (int v : arr){\n        que.push(v);\n    }\n    cout &lt;&lt; que.front() &lt;&lt; endl;\n    cout &lt;&lt; que.back() &lt;&lt; endl;\n    que.push(100);\n    que.push(200);\n    que.push(300);\n    cout &lt;&lt; que.front() &lt;&lt; endl;\n    cout &lt;&lt; que.back() &lt;&lt; endl;\n    while (!que.empty()){\n        cout &lt;&lt; que.front() &lt;&lt; \" \" &lt;&lt; que.back() &lt;&lt; endl;\n        que.pop();\n    }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#stl_1","title":"STL\u5b9e\u73b0","text":"<p>queue\u5934\u6587\u4ef6\u4e2d\u7684STL\u6240\u652f\u6301\u7684\u51fd\u6570\uff1apush(), pop()(\u6ca1\u6709\u8fd4\u56de\u503c), front()(\u4e13\u95e8\u8fd4\u56de\u961f\u9996\u503c)\u3002\u6ce8\u610f\uff0c\u6ca1\u6709\u4e13\u95e8\u63d0\u4f9b\u961f\u5c3e\u5143\u7d20\u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u961f\u5217\u662fFIFO\uff08first-in, first-out\uff09\uff0c\u6ca1\u6709\u8bbf\u95ee\u961f\u5c3e\u5143\u7d20\u7684\u63a5\u53e3\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\nusing namespace std;\nint main()\n{\n    queue&lt;int&gt; iqueue;\n\n    iqueue.push(13);\n    iqueue.push(42);\n    cout &lt;&lt; \"Head: \" &lt;&lt; iqueue.front() &lt;&lt; endl;\n    iqueue.pop(); // no return value\n    cout &lt;&lt; \"Head: \" &lt;&lt; iqueue.front() &lt;&lt; endl;\n    cout &lt;&lt; \"Size: \" &lt;&lt; iqueue.size() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_34","title":"\u54c8\u5e0c\u8868","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#overview","title":"Overview","text":"<p>\u54c8\u5e0c\u8868\u53c8\u79f0\u6563\u5217\u8868\uff0c\u4e00\u79cd\u4ee5\u300ckey-value\u300d\u5f62\u5f0f\u5b58\u50a8\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\u3002\u6240\u8c13\u4ee5\u300ckey-value\u300d\u5f62\u5f0f\u5b58\u50a8\u6570\u636e\uff0c\u662f\u6307\u4efb\u610f\u7684\u952e\u503c key \u90fd\u552f\u4e00\u5bf9\u5e94\u5230\u5185\u5b58\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u53ea\u9700\u8981\u8f93\u5165\u67e5\u627e\u7684\u952e\u503c\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u5730\u627e\u5230\u5176\u5bf9\u5e94\u7684 value\u3002\u53ef\u4ee5\u628a\u54c8\u5e0c\u8868\u7406\u89e3\u4e3a\u4e00\u79cd\u9ad8\u7ea7\u7684\u6570\u7ec4\uff0c\u8fd9\u79cd\u6570\u7ec4\u7684\u4e0b\u6807\u53ef\u4ee5\u662f\u5f88\u5927\u7684\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u5b57\u7b26\u4e32\u751a\u81f3\u7ed3\u6784\u4f53\u3002</p> <p>reference: https://oi.wiki/ds/hash/</p> <p>\u6211\u4eec\u5f88\u5e0c\u671b\uff1aStore data so that all operations are \\(\\Theta\\)(1) time, and the memory requirement should be \\(\\Theta\\)(n). \u4e3e\u4e00\u4e2a\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u4e00\u4e2a\u73ed100\u4e2a\u4eba\uff0c\u90a3\u4e48\u5982\u4f55\u5b58\u50a8100\u4e2a\u4eba\u7684\u6210\u7ee9\u5462\uff1f\u5047\u8bbe\u6bcf\u4e00\u4e2a\u5b66\u751f\u90fd\u6709\u4e00\u4e2a8\u4f4d\u5b66\u53f7\uff0c\u5982\u679c\u5e0c\u671b\u5b9e\u73b0\u201c\u5f15\u7d22\u2014\u2014\u5b66\u751f\u201d\u4e00\u4e00\u5bf9\u5e94\uff0c\u96be\u9053\u6211\u9700\u8981\u521b\u5efa\u4e00\u4e2a\\(10^8\\)\u7684\u6570\u7ec4\u5417\uff1f \u5176\u5b9e\u4e0d\u5fc5\u3002\u540e\u6765\u53d1\u73b0\uff0c\u7edd\u5927\u90e8\u5206\u7684\u4eba\u6700\u540e\u4e09\u4f4d\u4e0d\u4e00\u6837\uff0c\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\uff1a\\(f(number) = number[:-3]\\)\uff0c\u90a3\u4e48\u521b\u5efa\u7684\u6570\u7ec4\u53ea\u9700\u8981\\(10^3\\)\u4e2a\u4f4d\u7f6e\u4e86\u3002\u90a3\u4e48\u95ee\u9898\u5728\u4e8e\uff1a\u4e07\u4e00\u6709\u4e24\u4e2a\u5b66\u751f\u6700\u540e\u4e09\u4f4d\u76f8\u540c\u5462\uff1f\u5176\u5b9e\u5f53\u7136\u6709\u53ef\u80fd\uff0c\u4f46\u662f\u6982\u7387\u5f88\u4f4e\u3002</p> <p>\u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff1aThe process of mapping an object or a number onto an integer in a given range is called hashing\uff0c\u5bf9\u5e94\u7684\u5c31\u662f\u201c\u901a\u8fc7\u5b66\u751f\u7684\u5b66\u53f7\u5f97\u5230\u4e00\u4e2a\u4e09\u4f4d\u6570\u5b57\u201d\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e5f\u79f0\u4e3a\u54c8\u5e0c\u51fd\u6570\uff1b\u540c\u65f6\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\uff1amultiple objects may hash to the same value\uff0c\u8fd9\u5bf9\u5e94\u7684\u5c31\u662f\u4e24\u4e2a\u5b66\u751f\u6700\u540e\u7684\u4e09\u4f4d\u6570\u76f8\u540c\uff0c\u8fd9\u79cd\u73b0\u8c61\u5c31\u662f\u54c8\u5e0c\u51b2\u7a81\uff08collision\uff09\u3002\u540e\u9762\u4e5f\u4f1a\u4ecb\u7ecd\u5230\uff1a  Hash tables use a hash function together with a mechanism for dealing with collisions.</p> <p>\u5bf9\u4e8e\u4e00\u4e2ahash process\u6765\u8bf4\uff0c\u4e3b\u8981\u6d41\u7a0b\u5982\u4e0b\u56fe\uff08\u5047\u8bbe\u6211\u4eec\u7684\u54c8\u5e0c\u51fd\u6570\u8bb2object\u8f6c\u5316\u4e3a\u4e8632\u4f4d\u7684\u4e8c\u8fdb\u5236\u6570\u5b57\uff09\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#hash-function","title":"Hash function","text":"<p>\u54c8\u5e0c\u7684\u5b9a\u4e49\uff1a\uff08From Merriam-Webster\uff09a restatement of something that is already known.  \u6211\u4eec\u5e0c\u671b\u54c8\u5e0c\u51fd\u6570\u6709\u4ee5\u4e0b\u7684\u6027\u8d28\uff1a</p> <ul> <li>The hash value must be deterministic\uff08It must always return the same 32-bit integer each time\uff09</li> <li>Equal objects hash to equal values</li> <li>Should be fast, like \\(\\Theta(1)\\)</li> <li>If two objects are randomly chosen, there should be only a one-in-\\(2^{32}\\) chance that they have the same hash value</li> </ul> <p>We will look at two classes of hash hunctions:</p> <ul> <li>Predetermined hash functions (explicit)</li> <li>Arithmetic hash functions (implicit)</li> </ul> <p>Predetermined hash functions\uff1a\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u7ed9\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u4e00\u4e2a\u72ec\u7279\u7684\u53f7\u7801\uff0c\u4f46\u662f\u5f53\u5f55\u5165\u4e86\u4e24\u4e2a\u76f8\u540c\u7684object\u4e4b\u540e\uff0c\u8f93\u5165\u8fd9\u4e2aobject\uff0c\u8fd4\u56de\u7684\u662f\u4e24\u4e2a\u53f7\u7801\u3002\u56e0\u6b64\uff1aThese hash values must depend on the member variables, usually this uses arithmetic functions.</p> <p>An arithmetic hash value is a deterministic function that is calculated from the relevant member variables of an object. We will look at arithmetic hash functions for strings. A string is simply an array of bytes, each byte stores a value from 0 to 255. \u56e0\u6b64\uff0c\u54c8\u5e0c\u51fd\u6570\u5fc5\u987b\u662f\u8fd9\u4e9b\u5b57\u8282\u7684\u51fd\u6570\u3002\u6253\u4e2a\u6bd4\u65b9\uff1a\u54c8\u5e0c\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u6240\u6709\u7684char\u7684\u5b57\u8282\u91cc\u9762\u50a8\u5b58\u7684\u6570\u5b57\u3002\u4f46\u662f\u8fd9\u79cd\u54c8\u5e0c\u51fd\u6570\u4e0d\u662f\u5f88\u597d\uff0c\u9996\u5148\u662f\uff1a\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n)\\)\uff0c\u800c\u4e14\u975e\u5e38\u6709\u53ef\u80fd\u4f1a\u53d1\u751f\u54c8\u5e0c\u51b2\u7a81\uff0c\u6bd4\u5982\u8bf4\"from\" \"form\"\u4e24\u4e2a\u5355\u8bcd\u3002</p> <p>\u6362\u4e00\u79cd\u54c8\u5e0c\u51fd\u6570\uff1aLet the individual characters represent the coefficients of a polynomial in x. Use Horner\u2019s rule to evaluate this polynomial at a prime number, e.g., x=12347:</p> <pre><code>unsigned int hash( string const &amp;str ) {\n    unsigned int hash_value = 0;\n    for ( int k = 0; k &lt; str.length(); ++k ) {\n        hash_value = 12347*hash_value + str[k];\n    }\n    return hash_value;\n}\n</code></pre> <p>In general, any member variables that are used to uniquely define an object may be used as coefficients in such a polynomial.</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#mapping-to-0-m-1","title":"Mapping to [0, M-1]","text":"<p>\u4e3a\u4ec0\u4e48\u9700\u8981\u628a32bit\u6620\u5c04\u5230\u8fd9\u4e2a\u533a\u95f4\u4e2d\uff1f\u56e0\u4e3a\u54c8\u5e0c\u8868\u5b9e\u9645\u4e0a\u662f\u6570\u7ec4\uff0c\u800c\u8fd9\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u4e3aM\u7684\uff0c\u56e0\u6b64\u624d\u9700\u8981mapping\u8fd9\u4e00\u6b65\uff0c\u4e0d\u7136\u7684\u8bdd\uff0c\u5185\u5b58\u8981\u6c42\u975e\u5e38\u7684\u9ad8\u3002\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff1a\u628a32bit\u7684\u6574\u6570\u6620\u5c04\u5230\u8fd9\u4e2a\u533a\u95f4\uff0c\u76f4\u63a5\u6a21M\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u4f46\u662f\u5b9e\u5219\u4e0d\u7136\uff0c\u8ba1\u7b97\u4f59\u6570\u975e\u5e38\u7684expensive\uff1b\u4f46\u662f\u597d\u6d88\u606f\u662f\uff0c\u5982\u679c\\(M=2^m\\)\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u7b80\u5316\u8ba1\u7b97\u3002</p> <p>bitwise operators\u6709\uff1a&amp; &lt;&lt; &gt;&gt;\u3002\u5982\u4f55\u7406\u89e3\u4f4d\u8fd0\u7b97\u5982\u4f55\u8282\u7701\u8ba1\u7b97\u5f00\u652f\uff1f\u5047\u5982\u8bf4\u6211\u60f3\u8ba1\u7b977985325 % 100\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u5341\u8fdb\u5236\u7684\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\\(100=10^2\\)\uff0c\u6240\u4ee5\u8bf4\u53d6\u6700\u540e\u4e24\u4f4d\u5c31\u53ef\u4ee5\u4e86\uff0c\u5c31\u80fd\u76f4\u89c2\u770b\u51fa\u6765\u6700\u540e\u4f59\u6570\u5e94\u8be5\u662f25.</p> <p>\u56e0\u6b64\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c\u5047\u5982\u8bf4\u8ba1\u7b97\uff1a\\(100011100101_2 \\% 10000_2\\)\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u77e5\u9053\uff1a\u4e8c\u8fdb\u5236\u4e2d\u768410000\u662f2\u7684\u56db\u6b21\u65b9\uff0c\u56e0\u6b64\u76f4\u63a5\u53d6\u6700\u540e\u56db\u4f4d\u5c31\u662f\u7ed3\u679c\uff1a0101\u3002\u53cd\u8fc7\u6765\uff0c\u5982\u679c\u8bf4\u662f\u4e58\u4ee5\u8fd9\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u662f\u539f\u6765\u8fd9\u4e2a\u6570\u5b57\u540e\u9762\u586b\u4e0a\u56db\u4f4d\u3002\u65e0\u8bba\u662f\u53d6\u51fa\u6700\u540e\u7684\u56db\u4f4d\u8fd8\u662f\u540e\u9762\u586b\u5145\u56db\u4f4d\uff0c\u5176\u5b9e\u90fd\u80fd\u901a\u8fc7\u4f4d\u8fd0\u7b97\u8fdb\u884c\u7b80\u4fbf\u7684\u8ba1\u7b97\uff1a</p> <pre><code>unsigned int hash_M( unsigned int n, unsigned int m ) {\n    return n &amp; ((1 &lt;&lt; m) \u2013 1);\n}\n</code></pre> <p></p> <p>\u4e0a\u9762\u5173\u4e8e\u4ee3\u7801\u7684\u89e3\u91ca\u6765\u81eaKimi\u3002\u4f46\u662f\u8fd9\u79cd\u54c8\u5e0c\u51fd\u6570\u4e5f\u6709\u5f0a\u7aef\uff1a\u5047\u5982\u8bf4\u54c8\u5e0c\u51fd\u6570\u8f93\u51fa\u7684\u603b\u662f\u5076\u6570\uff0c\u800c\u5076\u6570\u6a212\u7684\u591a\u5c11\u6b21\u5e42\u4e5f\u4f1a\u662f\u5076\u6570\uff0c\u56e0\u6b64\u5b83\u9650\u5236\u4e86\u6620\u5c04\u7684\u591a\u6837\u6027\uff0c\u5bfc\u81f4\u54c8\u5e0c\u78b0\u649e\u7684\u6982\u7387\u589e\u52a0\u3002</p> <p>\u56e0\u6b64\u4eba\u4eec\u53d1\u660e\u4e86multiplicative method\uff1aWe need to obfuscate the bits. \u800c\u6700\u7b80\u5355\u7684obsfucate\u5c31\u662f\u76f8\u4e58\uff1b\u5982\u679c\u5728\u81ea\u5df1\u4e58\u81ea\u5df1\u7684\u76f8\u4e58\u4e2d\uff0c\u4e2d\u95f4\u7684\u4e00\u4f4d\u6570\u5b57\u6240\u80fd\u9020\u6210\u7684\u5f71\u54cd\u4f1a\u653e\u5927\u3002\u56e0\u6b64\u4e58\u4ee5\u4e00\u4e2a\u6574\u6570\u5e38\u6570\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9009\u62e9:</p> <pre><code>// Take the middle m bits of Cn:\nunsigned int const C = 581869333;  // some number\nshift = 11; // some number\nunsigned int hash_M( unsigned int n, unsigned int m ) {\n    unsigned int shift = (32 \u2013 m)/2;\n    return ((C*n) &gt;&gt; shift) &amp; ((1 &lt;&lt; m) \u2013 1);\n}\n</code></pre> <p>\u5728shift = 11, m = 10, n = 42\u7684\u60c5\u51b5\u4e0b\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p>\\((C*n) &gt;&gt; shift\\)\u8fc7\u7a0b\uff1a</p> <p></p> <p>\\((1 &lt;&lt; m) \u2013 1\\)\u8fc7\u7a0b\uff1a</p> <p></p> <p>\\((C*n) &gt;&gt; shift) \\&amp; ((1 &lt;&lt; m) \u2013 1\\)\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u7ed3\u679c\u793a\u610f\u56fe\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#dealing-with-collisions","title":"Dealing with collisions","text":"<p>\u8fd9\u91cc\u4ecb\u7ecd\u4e24\u79cd\u5904\u7406\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\uff1aChained hash tables and Open addressing.</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#chained-hash-tables","title":"Chained hash tables","text":"<p>\u4e5f\u88ab\u79f0\u4e3a\u62c9\u94fe\u6cd5\uff0copen hashing\u3002\u62c9\u94fe\u6cd5\u662f\u5728\u6bcf\u4e2a\u5b58\u653e\u6570\u636e\u7684\u5730\u65b9\u5f00\u4e00\u4e2a\u94fe\u8868\uff0c\u5982\u679c\u6709\u591a\u4e2a\u952e\u503c\u7d22\u5f15\u5230\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u53ea\u7528\u628a\u4ed6\u4eec\u90fd\u653e\u5230\u90a3\u4e2a\u4f4d\u7f6e\u7684\u94fe\u8868\u91cc\u5c31\u884c\u4e86\u3002\u67e5\u8be2\u7684\u65f6\u5019\u9700\u8981\u628a\u5bf9\u5e94\u4f4d\u7f6e\u7684\u94fe\u8868\u6574\u4e2a\u626b\u4e00\u904d\uff0c\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u6bd4\u8f83\u5176\u952e\u503c\u4e0e\u67e5\u8be2\u7684\u952e\u503c\u662f\u5426\u4e00\u81f4\u3002\u5982\u679c\u7d22\u5f15\u7684\u8303\u56f4\u662f \uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u4e3a \uff0c\u90a3\u4e48\u4e00\u6b21\u63d2\u5165/\u67e5\u8be2\u9700\u8981\u8fdb\u884c\u671f\u671b\\(O(\\frac{N}{M})\\)\u6b21\u6bd4\u8f83\u3002</p> <p>Reference: oi.wiki</p> <p>\u5176\u4e2d\uff0c\\(\\lambda = \\frac{N}{M}\\)\u5b9a\u4e49\u4e3aload factor\u3002Load Factor is to describe the length of the linked lists and this is the average number of objects per bin\u3002\u5982\u679cload factor\u5f88\u5927\uff0c\u90a3\u4e48access times\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u589e\u5927\u5230\\(O(\\lambda)\\)\u3002\u5982\u679c\u5e0c\u671b\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u4e8c\u53c9\u6811\u6765\u50a8\u5b58linked list\uff08assuming that we can order the objects\uff09\uff0c\u4f46\u662f\uff1aThe memory requirements are increased by \\(\\Theta(n)\\), as each node will require two pointers.</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#open-addressing","title":"Open addressing","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#linear","title":"Linear","text":"<p>Chained hash tables \u9700\u8981\u7279\u6b8a\u7684\u5185\u5b58\u5206\u914d\uff0c\u80fd\u4e0d\u80fd\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u663e\u8457\u5185\u5b58\u5206\u914d\u7684\u54c8\u5e0c\u8868\u5462\uff1fWe can deal with collisions by storing collisions elsewhere by defining an implicit rule which tells us where to look next.</p> <p>\u5047\u5982\u8bf4\uff0c\u4e00\u4e2a\u7269\u4f53\u6700\u540e\u5bf9\u5e94\u7684\u6570\u5b57\u662f5\uff0c\u5982\u679c5\u5730\u65b9\u6ca1\u6709object\uff0c\u90a3\u4e48\u8fd9\u4e2aobject\u5c31\u4f1a\u50a8\u5b58\u57285\u91cc\u9762\u3002\u5982\u679c\u53c8\u4e00\u4e2a\u7269\u4f53\u5bf9\u5e94\u7684\u662f5\u5462\uff1f\u5982\u679c\u6ca1\u6709\u94fe\u8868\u7684\u8bdd\uff0c\u5b83\u5c31\u4e0d\u80fd\u50a8\u5b58\u57285\u91cc\u9762\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff1aWe need a rule to tells us where to look next, for example, look in the next bin to see if it is occupied.</p> <p>\u4f46\u662f\u8fd9\u4e2a\u89c4\u5219\u5fc5\u987b\u975e\u5e38\u5feb\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u53bbfollow\uff0c\u540c\u65f6should be general enough to deal with the fact that the next cell could also be occupied, e.g., continue searching until the first empty bin is found. \u5f53\u7136\uff0c\u5728\u641c\u7d22\u548c\u5220\u9664\u7684\u65f6\u5019\uff0c\u4e5f\u5fc5\u987b\u8981\u9075\u5b88\u8fd9\u4e00\u5957\u89c4\u5219\u3002</p> <p>There are numerous strategies for defining the order in which the bins should be searched\uff0c\u4f8b\u5982Linear probing\u7ebf\u6027\u63a2\u6d4b\uff0cQuadratic probing\u4e8c\u6b21\u63a2\u6d4b\uff0cDouble hashing\u53cc\u91cd\u6563\u5217\uff0c\u201cLast come, first served\u201d\uff0cCuckoo hashing. \u8fd9\u91cc\u4ecb\u7ecd\u5176\u4e2d\u7684\u4e24\u79cd\uff1a\u7ebf\u5f62\u63a2\u6d4b\u548c\u4e8c\u6b21\u63a2\u6d4b\u3002</p> <p>Linear probing: \u5047\u5982\u8bf4inserting an object into bin k, if k is empty, we occupy it, otherwise we check k+1, k+2, and so on, until an empty bin is found(If reaching the end of the array, we start at the front of the array). \u63d2\u5165insertion\u7684\u8fc7\u7a0b\u5f88\u597d\u7406\u89e3\uff0c\u90a3\u4e48\u641c\u7d22\u7684\u65f6\u5019\u5462\uff1f\u9996\u5148\u67e5\u770bappropriate bin\uff0c\u7136\u540e\u4e0d\u65ad\u5411\u524d\u641cbin\u76f4\u5230\uff1a\u8981\u4e48item\u88ab\u627e\u5230\uff0c\u8981\u4e48\u53d1\u73b0\u4e86\u7a7abin\uff0c\u8981\u4e48\u904d\u5386\u5b8c\u4e86\u5168\u90e8\u7684\u6570\u7ec4\u3002\u5176\u4e2d\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4ee3\u8868\u8981\u67e5\u627e\u7684\u7269\u4f53\u4e0d\u5728\u6570\u7ec4\u91cc\u9762\uff0c\u7b2c\u4e09\u79cd\u60c5\u51b5\u4ee3\u8868\u7269\u4f53\u4e0d\u5728\u6570\u7ec4\u91cc\u9762\u4e14\u6570\u7ec4\u662f\u6ee1\u7684\u3002</p> <p>\u6563\u5217\u51fd\u6570\u4e3a\uff1a\\(h(k,i)=(h_1(k)+i)modm\\)</p> <p>\u641c\u7d22\u4e0d\u662f\u4e00\u4ef6\u9ebb\u70e6\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\u5220\u9664erasing\u662f\u3002\u5982\u679c\u4ec5\u4ec5\u662f\u627e\u5230\u4e86item\u7136\u540e\u5220\u6389\u800c\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u7684\u8bdd\uff0c\u540e\u679c\u4f1a\u5f88\u4e25\u91cd\uff0c\u56e0\u4e3arule\u89c4\u5b9a\uff0c\u5f53\u521d\u5b58\u7269\u4f53\u7684\u65f6\u5019\u662f\u9047\u5230empty bin\u624d\u80fd\u9632\u6b62\u7269\u4f53\uff0c\u800c\u641c\u7d22\u7684\u65f6\u5019\u9047\u5230hole\u4ee3\u8868\u8fd9\u4e2a\u7269\u4f53\u4e0d\u5728\u6570\u7ec4\u91cc\u9762\u3002\u56e0\u6b64\u53ef\u89c1\uff0c\u5220\u9664\u7edd\u5bf9\u4e0d\u4ec5\u4ec5\u662f\u201c\u5220\u201d\u90a3\u4e48\u7b80\u5355\u3002</p> <p></p> <p></p> <p>\u4e0a\u9762\u4e00\u5171\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u5176\u4e2dhole\u4ee3\u8868\u5220\u9664\u5143\u7d20\u4e4b\u540e\u7559\u4e0b\u7684\u7a7a\u4f4d\uff0cpotential candidate\u8fd9\u4e2a\u4f4d\u7f6e\u5927\u6709\u8bb2\u7a76\uff1ahole\u548ccandidate\u4e2d\u95f4\u7684bin\u91cc\u9762\u90fd\u6709\u5143\u7d20\uff0c\u800c\u4e14\u8fd9\u4e9b\u5143\u7d20\u90fdcould not have been copied into the hole\uff08i.e.\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u4e2d\u7684\u5143\u7d20\u7684\u54c8\u5e0c\u503c\u6240\u5f15\u7d22\u51fa\u6765\u7684\u4f4d\u7f6e\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\uff09\u3002\u56e0\u6b64\u6709\u4e24\u79cd\u60c5\u51b5\u5982\u4e0a\u56fe\uff1a\u7b2c\u4e00\u79cd\u662fcandidate\u662fhole\u7684\u540e\u9762\uff0c\u5982\u679c\u8fd9\u4e2acandidate index\u5bf9\u5e94\u7684\u5143\u7d20\u7684\u54c8\u5e0c\u503c\u5728\u84dd\u52fe\u7684\u4f4d\u7f6e\u4e2d\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u4e2a\u5143\u7d20\u4e4b\u6240\u4ee5\u50a8\u5b58\u5728candidate\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u662f\u56e0\u4e3a\u5728\u63d2\u5165\u7684\u65f6\u5019\uff0clinear probing\u7684\u8fc7\u7a0b\u4e2d\u7ecf\u8fc7\u4e86hole\u548chole\u540e\u9762\u7684\u4e00\u4e9b\u4e0d\u53ef\u80fd\u79fb\u52a8\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff1awe move the object at index only if its hash value is either equal to or less than the hole or greater than the index of the potential candidate\u3002</p> <p>\u53cd\u4e4b\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5982\u679ccandidate\u5143\u7d20\u7684\u54c8\u5e0c\u503c\u662f\u5728\u84dd\u52fe\u7684\u4f4d\u7f6e\uff0c\u8bf4\u660e\u8fd9\u4e2a\u5143\u7d20\u4e4b\u6240\u4ee5\u4f4d\u4e8ecandidate bin\u662f\u56e0\u4e3alinear probing\u4e14\u7ecf\u8fc7\u4e86hole\uff0c\u56e0\u6b64\uff1aIn this case, we move the object at index only if its hash value is both greater than the index of the potential candidate and less than or equal to the hole. </p> <p>\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6210\u529f\u79fb\u52a8\u7684\u8bdd\uff0ccandidate\u53c8\u4f1a\u5f62\u6210\u4e00\u4e2a\u65b0\u7684hole\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5224\u65ad\u4f1a\u9012\u5f52\u8fdb\u884c\u3002</p> <p>\u4e0a\u9762\u8fd9\u79cd\u5220\u9664\u7684\u65b9\u6cd5\u8c8c\u4f3c\u5f88\u597d\uff0c\u4f46\u662f\u5b9e\u8bdd\u6765\u8bf4\u8fd8\u662f\u5f88\u590d\u6742\uff0c\u80fd\u4e0d\u80fd\u7528\u4e00\u79cd\u61d2\u7684\u65b9\u6cd5\uff1f\u5047\u5982\u8bf4\u5220\u6389\u4e86\u4e00\u4e2a\u5730\u65b9\u7684\u5143\u7d20\uff0c\u7136\u540e\u6807\u8bb0\u5b83\u4e3aERASED\uff0c\u5728\u641c\u7d22\u7684\u65f6\u5019\u89c6\u5b83\u4e3aoccupied\uff0c\u63d2\u5165\u7684\u65f6\u5019\u89c6\u5b83\u4e3aunoccupied\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u5728erased\u5730\u65b9\u63d2\u5165\u65b0\u5143\u7d20\u3002\u8fd9\u79cd\u65b9\u6cd5\u79f0\u4e3aLazy Erasing\u3002</p> <p>Run-time analysis\uff1aIt is possible to estimate the average number of probes for a successful search, where \\(\\lambda\\) is the load factor:  The number of probes for an unsuccessful search or for an insertion is higher:  \u6211\u4eec\u7684\u76ee\u6807\u662f\u5e0c\u671b\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\\(\\Theta(1)\\)\uff0c\u4f46\u662f\u53ef\u60dc\u7684\u662f\u968f\u7740lambda\u7684\u589e\u9ad8\uff0c\u8fd0\u884c\u65f6\u95f4\u4f1a\u4e0a\u5347\u3002\u540c\u65f6\uff0c\u7ebf\u6027\u63a2\u6d4b\u6709Primary clustering\u7684\u73b0\u8c61\uff0c\u5373\u50a8\u5b58\u7684\u5143\u7d20\u8fde\u6210\u6bb5\uff0c\u5bfc\u81f4\u6bcf\u4e00\u6b21\u63d2\u5165\u90fd\u9700\u8981probe\u5f88\u591a\u5143\u7d20\u3002\u56e0\u6b64\uff1a\u53ef\u4ee5\u5c1d\u8bd5Choose a different strategy than linear probing. </p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#quadratic","title":"Quadratic","text":"<p>\u4e8c\u6b21\u63a2\u6d4bQuadratic probing\uff1a\u8fd9\u91cc\u7684\u201c\u4e8c\u6b21\uff0cquadratic\u201d\u7684\u610f\u601d\u5176\u5b9e\u662f\u4e8c\u6b21\u65b9\uff0c\u4ee3\u8868\u7740Probing\u7684\u6b65\u957f\u4e0d\u662f1\uff0c\u800c\u662fk\u00d7k\u3002\u4f46\u662f\u901a\u5e38\u6765\u8bf4\uff0c\u91c7\u53d6\u7684\u89e3\u51b3\u65b9\u6848\u5982\u4e0b\uff1a</p> <pre><code>int initial = hash_M( x.hash(), M );\nfor ( int k = 0; k &lt; M; ++k ) {\n    bin = (initial + c1*k + c2*k*k) % M;\n}\n</code></pre> <p>\u6563\u5217\u51fd\u6570\u4e3a\uff1a\\(h(k,i)=(h_1(k)+c_1i+c_2i^2)modm\\)\u3002\u66f4\u5177\u4f53\u5730\uff1a</p> <p></p> <p>:warning:\u4e0a\u9762\u56fe\u7247\u4e2d\u6700\u540e\u4e00\u53e5\u8bdd\u7684\u7ed3\u8bba\uff0c\u53ea\u6709\u5728M\u4e3a2\u7684\u591a\u5c11\u6b21\u5e42\u7684\u65f6\u5019\uff0c\u624d\u80fd\u591f\u6210\u7acb\uff1b\u5426\u5219\uff0c\u662f\u6709\u53ef\u80fd\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u65e0\u6cd5\u904d\u5386\u6240\u6709\u7684\u5143\u7d20\uff01</p> <p></p> <p>\u5173\u4e8e\u201cThis guarantees that all M entries are visited before the pattern repeats\u201d\u7684\u7ed3\u8bba\uff0c\u8bc1\u660e\u5982\u4e0b\uff08\u6838\u5fc3\u601d\u60f3\uff1a\u8bc1\u660e\u4efb\u610f\u4e24\u6b21\u7684probing\u7684hash value\u503c\u90fd\u4e0d\u4e00\u6837\uff0c\u5229\u7528\u6570\u8bba\u77e5\u8bc6\u548c\\(M=2^m\\)\u6761\u4ef6\u4e88\u4ee5\u8bc1\u660e\uff09\uff1a</p> <p></p> <p>\u5728\u8fd9\u79cdprobing\u7b56\u7565\u4e0b\uff0cruntime\u7684\u8bc4\u4f30\u5982\u4e0b\uff1a </p> <p>Linear\u548cQuadratic\u4e24\u8005\u7684\u5bf9\u6bd4\u5982\u4e0b\u3002\u53ef\u89c1\u5728\u76f8\u540c\u7684load factor\u60c5\u51b5\u4e0b\uff0c\u65e0\u8bba\u662fsuccessful\u8fd8\u662funsuccessful search\uff0c\u4e8c\u6b21\u63a2\u6d4b\u6240\u68c0\u67e5\u7684bin\u6570\u91cf\u6bd4\u7ebf\u6027\u63a2\u6d4b\u7684\u5c11\uff0c\u8bf4\u660e\u662f\u4e00\u4e2a\u66f4\u4f18\u7684\u7b56\u7565\u3002</p> <p></p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cclustering\u4f9d\u7136\u53ef\u80fd\u53d1\u751f\uff08Objects placed in the same bin will follow the same sequence\uff09\u3002\u4f46\u662f\u5df2\u7ecf\u662f\u4e00\u4e2a\u8f83\u597d\u7684\u7b56\u7565\u4e86\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#double-hashing","title":"Double Hashing","text":"<p>Double hashing \u662f\u4e00\u79cd\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u5f00\u653e\u5730\u5740\u6cd5\uff08open addressing method\uff09\uff0c\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a\u54c8\u5e0c\u51fd\u6570\u6765\u51cf\u5c11\u51b2\u7a81\u53d1\u751f\u7684\u6982\u7387\u3002\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5728\u7b2c\u4e00\u6b21\u54c8\u5e0c\u51fd\u6570\u627e\u5230\u7684\u4f4d\u7f6e\u53d1\u751f\u51b2\u7a81\u65f6\uff0c\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u6b65\u957f\uff08\u589e\u91cf\uff09\uff0c\u4e0d\u65ad\u5c1d\u8bd5\u65b0\u7684\u4f4d\u7f6e\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u7a7a\u95f2\u7684\u4f4d\u7f6e\u3002</p> <p>\u53cc\u91cd\u54c8\u5e0c\u7684\u8fc7\u7a0b\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u7b2c\u4e00\u54c8\u5e0c\u51fd\u6570 \\(h_1(x)\\)\uff1a\u7528\u4e8e\u5c06\u5143\u7d20\u6620\u5c04\u5230\u54c8\u5e0c\u8868\u4e2d\u7684\u4e00\u4e2a\u521d\u59cb\u4f4d\u7f6e\u3002</li> <li>\u7b2c\u4e8c\u54c8\u5e0c\u51fd\u6570(secondary hashing function) \\(h_2(x)\\)\uff1a\u7528\u4e8e\u8ba1\u7b97\u6b65\u957f\uff0c\u5373\u5728\u53d1\u751f\u51b2\u7a81\u65f6\u4ece\u8be5\u4f4d\u7f6e\u8df3\u8f6c\u591a\u5c11\u4e2a\u4f4d\u7f6e\u3002</li> </ol> <p>\u6563\u5217\u51fd\u6570\u4e3a\uff1a\\(h(k,i)=(h_1(k)+ih_2(k))modm\\)\u3002\u6240\u4ee5\u8bf4\uff1a\u7ebf\u6027\u63a2\u6d4b\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7b2c\u4e8c\u54c8\u5e0c\u51fd\u6570\u4e3a1\u7684double hashing\uff0c\u4e8c\u6b21\u63a2\u6d4b\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7b2c\u4e8c\u54c8\u5e0c\u51fd\u6570\u4e3a\\((c_1+c_2i)\\)\u7684double hashing\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#linear-probe","title":"Linear Probe\u4e0b\u7684\u54c8\u5e0c\u5b9e\u73b0","text":"<p>\u4f7f\u7528<code>STATE_UNUSE; STATE_USING; STATE_DEL</code>\u4e09\u4e2a\u53c2\u6570\u6765\u4ee3\u8868bin(bucket)\u7684\u72b6\u6001\u3002</p> <p>\u589e\u52a0\uff1a\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u6570\u636e\u5b58\u653e\u7684\u5730\u65b9\uff1a\u5982\u679c\u8be5\u4f4d\u7f6e\u7a7a\u95f2\uff0c\u90a3\u4e48\u76f4\u63a5\u50a8\u5b58\u5143\u7d20\uff0c\u5b8c\u6210\uff1b\u800c\u5982\u679c\u8be5\u4f4d\u7f6e\u88ab\u5360\u7528\uff0c\u4ece\u5f53\u524d\u4f4d\u7f6e\u5411\u540e\u627e\u7a7a\u95f2\u7684\u4f4d\u7f6e\uff0c\u5b58\u653e\u8be5\u5143\u7d20\u3002</p> <p>\u67e5\u8be2\uff1a\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u6570\u636e\u5b58\u50a8\u7684\u5730\u65b9\uff0c\u4ece\u8be5\u4f4d\u7f6e\u53d6\u503c\uff0c\u5982\u679c\u662f\u5143\u7d20\u503c\u90a3\u4e48\u5c31\u67e5\u5230\u4e86\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u8bf4\u660e\u653e\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u91cc\u9762\u5df2\u7ecf\u6709\u5143\u7d20\u4e86\uff0c\u53d1\u751f\u4e86\u54c8\u5e0c\u51b2\u7a81\uff0c\u56e0\u6b64\u9700\u8981\u5f80\u540e\u9762\u5bfb\u627e\u5143\u7d20\u3002</p> <p>\u5220\u9664\uff1a\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u6570\u636e\u5b58\u653e\u7684\u5730\u65b9\uff0c\u4ece\u8be5\u4f4d\u7f6e\u53d6\u503c\uff0c\u5224\u65ad\u72b6\u6001STATE_USING\u3002\u5982\u679c\u662f\u8981\u5220\u9664\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u5f53\u524d\u4f4d\u7f6e\u4fee\u6539\u4e3aSTATE_DEL\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u8bf4\u660e\u4e4b\u524d\u53d1\u751f\u4e86\u54c8\u5e0c\u51b2\u7a81\uff0c\u4ece\u5f53\u524d\u4f4d\u7f6e\u5411\u540e\u904d\u5386\uff0c\u627e\u5230\u5143\u7d20\u4fee\u6539\u72b6\u6001\uff1b\u5982\u679c\u9047\u5230\u4e86STATE_UNUSE\uff0c\u7ed3\u675f\uff01</p> <pre><code>// linear_probe_hash.cpp\n#include &lt;iostream&gt;\nusing namespace std;\n\nenum State{\n    STATE_UNUSE, // \u4ece\u672a\u4f7f\u7528\u8fc7\u7684\u6876\n    STATE_USING, // \u6b63\u5728\u4f7f\u7528\u7684\u6876\n    STATE_DEL, // \u5143\u7d20\u88ab\u5220\u9664\u4e86\u7684\u6876\n};\n\nstruct Bucket{\n    Bucket(int key = 0, State state = STATE_UNUSE)\n        : key_(key)\n        , state_(state)\n    {}\n    int key_; // \u5b58\u50a8\u7684\u6570\u636e\n    State state_; // \u6876\u5f53\u524d\u7684\u72b6\u6001\n};\n\nclass HashTable{\npublic:\n    HashTable(int size = primes_[0], double loadFactor = 0.75)\n        : useBucketNum_(0)\n        , loadFactor_(loadFactor)\n        , primeIdx_(0)\n    {\n        // \u7528\u6237\u4f20\u5165\u7684size\u8c03\u6574\u5230\u6700\u8fd1\u7684\u6bd4\u8f83\u5927\u7684\u7d20\u6570\u4e0a\n        if (size != primes_[0]){\n            for (; primeIdx_ &lt; PRIME_SIZE; primeIdx_++){\n                if (primes_[primeIdx_] &gt; size){\n                    break;\n                }\n            }\n            // \u7528\u6237\u4f20\u5165\u7684size\u503c\u8fc7\u5927,\u5df2\u7ecf\u8d85\u8fc7\u6700\u540e\u4e00\u4e2a\u7d20\u6570,\u5219\u8c03\u6574\u5230\u6700\u540e\u4e00\u4e2a\u7d20\u6570\n            if (primeIdx_ == PRIME_SIZE){\n                primeIdx_--;\n            }\n        }\n        tableSize_ = primes_[primeIdx_];\n        table_ = new Bucket[tableSize_];\n    }\n\n    ~HashTable(){\n        delete[] table_;\n        table_ = nullptr;\n    }\npublic:\n    // \u63d2\u5165\u5143\u7d20\n    bool insert(int key){\n        // \u8003\u8651\u6269\u5bb9\n        double factor = useBucketNum_*1.0 / tableSize_; \n        // \u4e24\u4e2aint\u76f8\u9664\u5f97\u5230int, \u4f46\u662f\u5176\u4e2d\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7*1.0\u53d8\u6210\u6d6e\u70b9\u6570\n        cout &lt;&lt; \"factor: \" &lt;&lt; factor &lt;&lt; endl;\n        if (factor &gt; loadFactor_){\n            // \u54c8\u5e0c\u8868\u6269\u5bb9\n            expand();\n        }\n        // \u6b64\u5904\u7684\u54c8\u5e0c\u51fd\u6570\n        int idx = key % tableSize_;\n        if (table_[idx].state_ != STATE_USING){\n            table_[idx].state_ = STATE_USING;\n            table_[idx].key_ = key;\n            useBucketNum_++;\n            return true;\n        }\n        // Linear Probe\n        for (int i = (idx+1) % tableSize_; i != idx; i = (i+1) % tableSize_){\n            if (table_[i].state_ != STATE_USING){\n                table_[i].state_ = STATE_USING;\n                table_[i].key_ = key;\n                useBucketNum_++;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // \u5220\u9664\u5143\u7d20\n    bool erase(int key){\n        int idx = key % tableSize_;\n        int i = idx;\n        do{\n            if (table_[i].state_ == STATE_USING &amp;&amp; table_[i].key_ == key){\n                table_[i].state_ = STATE_DEL;\n                useBucketNum_--;\n            }\n            i = (i + 1) % tableSize_;\n        } while(table_[i].state_ != STATE_DEL &amp;&amp; i != idx);\n        return true;\n    }\n\n    // \u67e5\u8be2 \n    bool find(int key){\n        int idx = key % tableSize_;\n        int i = idx;\n        do{\n            if (table_[i].state_ == STATE_USING &amp;&amp; table_[i].key_ == key){\n                return true;\n            }\n            i = (i + 1) % tableSize_;\n        } while(table_[i].state_ != STATE_UNUSE &amp;&amp; i != idx);\n        return false;\n    }\nprivate:\n    void expand(){\n        ++primeIdx_;\n        if (primeIdx_ == PRIME_SIZE){\n            throw \"HashTable is too large! Can not expand anymore\";\n        }\n        Bucket *newTable = new Bucket[primes_[primeIdx_]];\n        for (int i = 0; i &lt; tableSize_; i++){\n            if (table_[i].state_ == STATE_USING){\n                // \u65e7\u8868\u6709\u6548\u7684\u6570\u636e,\u91cd\u65b0\u54c8\u5e0c\u653e\u5728\u6269\u5bb9\u540e\u7684\u65b0\u8868\n                int idx = table_[i].key_ % primes_[primeIdx_];\n                int k = idx;\n                // \u653e\u8fdb\u65b0\u8868\u7684\u65f6\u5019, \u4f9d\u7136\u8981\u8003\u8651\u54c8\u5e0c\u51b2\u7a81\u7684\u95ee\u9898!\n                do{\n                    if (newTable[k].state_ != STATE_USING){\n                        newTable[k].state_ = STATE_USING;\n                        newTable[k].key_ = table_[i].key_;\n                        break;\n                    }\n                    k++;\n                } while(k != idx);\n            }\n        }\n        delete[] table_;\n        table_ = newTable;\n        tableSize_ = primes_[primeIdx_];\n    }\nprivate:\n    Bucket *table_; // \u6307\u5411\u52a8\u6001\u5f00\u8f9f\u7684\u54c8\u5e0c\u8868\n    int tableSize_; // \u54c8\u5e0c\u8868\u5f53\u524d\u7684\u957f\u5ea6\n    int useBucketNum_; // \u5df2\u7ecf\u4f7f\u7528\u7684\u6876\u7684\u4e2a\u6570\n    double loadFactor_; // \u54c8\u5e0c\u8868\u7684\u88c5\u8f7d\u56e0\u5b50\n    static const int PRIME_SIZE = 10; // \u7d20\u6570\u8868\u7684\u5927\u5c0f\n    static int primes_[PRIME_SIZE]; // \u7d20\u6570\u8868\n    int primeIdx_; // \u5f53\u524d\u4f7f\u7528\u7684\u7d20\u6570\u7684\u4e0b\u6807\n};\n\nint HashTable::primes_[HashTable::PRIME_SIZE] = {3, 7, 23, 47, 97, 251, 443, 911, 1471, 42773};\n\n\nint main(){\n    HashTable htable;\n    htable.insert(14);\n    cout &lt;&lt; htable.find(14) &lt;&lt; endl;\n    htable.insert(32);\n    htable.insert(21);\n    htable.insert(15);\n    htable.insert(560);\n    cout &lt;&lt; htable.find(14) &lt;&lt; endl;\n    htable.erase(14);\n    cout &lt;&lt; htable.find(14) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#linked-list","title":"Linked list \u4e0b\u7684\u54c8\u5e0c\u5b9e\u73b0","text":"<p>\u8fd9\u91cc\u5143\u7d20\u63d2\u5165\u94fe\u8868\u91c7\u7528\u7684\u662f\u5934\u63d2\u6cd5\uff1b\u6ce8\u610f\u5982\u679c\u5728class\u5185\u90e8\u8c03\u7528algorithm\u7684find\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u524d\u9762\u8981\u52a0\u4e0a::\uff0c\u4ee3\u8868\u662f\u5728\u5168\u5c40\u7684find\u65b9\u6cd5\uff0c\u800c\u4e0d\u662fclass\u5185\u90e8\u81ea\u5df1\u7684find\u65b9\u6cd5\uff1b\u4e14\u8fd9\u4e2a\u7c7b\u6ca1\u5fc5\u8981\u5199\u6790\u6784\u51fd\u6570\uff0c\u56e0\u4e3a\u91cc\u9762\u7684\u5185\u5b58\u7ba1\u7406\u90fd\u662fc++ STL\u8bbe\u8ba1\u597d\u7684\u94fe\u8868\u548c\u6570\u7ec4\uff0c\u5b83\u4eec\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58\u7684\u3002</p> <pre><code>// hash_linked_list.cpp\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nclass HashTable{\npublic:\n    HashTable(int size = primes_[0], double loadFactor=0.75)\n        : useBucketNum_(0)\n        , loadFactor_(loadFactor)\n        , primeIdx_(0)\n    {\n        if (size != primes_[0]){\n            for (; primeIdx_ &lt; PRIME_SIZE; primeIdx_++){\n                if (primes_[primeIdx_] &gt; size){\n                    break;\n                }\n            }\n            // \u7528\u6237\u4f20\u5165\u7684size\u503c\u8fc7\u5927,\u5df2\u7ecf\u8d85\u8fc7\u6700\u540e\u4e00\u4e2a\u7d20\u6570,\u5219\u8c03\u6574\u5230\u6700\u540e\u4e00\u4e2a\u7d20\u6570\n            if (primeIdx_ == PRIME_SIZE){\n                primeIdx_--;\n            }\n        }\n        table_.resize(primes_[primeIdx_]);\n    }\npublic:\n    // \u589e\u52a0\u5143\u7d20 \u4e14\u4e0d\u80fd\u91cd\u590d\u63d2\u5165\n    void insert(int key){\n        // \u5224\u65ad\u662f\u5426\u6269\u5bb9\n        double factor = useBucketNum_ * 1.0 / table_.size();\n        cout &lt;&lt; \"factor:\" &lt;&lt; factor &lt;&lt; endl;\n        if (factor &gt; loadFactor_){\n            expand();\n        }\n        // \u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5f97\u5230idx\n        int idx = key % table_.size();\n        if (table_[idx].empty()){\n            useBucketNum_++;\n            table_[idx].emplace_front(key);\n        }\n        else{\n            // \u4f7f\u7528\u5168\u5c40\u7684::find\u6cdb\u578b\u7b97\u6cd5,\u800c\u4e0d\u662f\u8c03\u7528\u81ea\u5df1\u7684\u6210\u5458\u65b9\u6cd5find\n            auto it = ::find(table_[idx].begin(), table_[idx].end(), key);\n            if (it == table_[idx].end()){\n                // \u8bf4\u660e\u6ca1\u627e\u5230,\u53ef\u4ee5\u63d2\u5165\n                table_[idx].emplace_front(key);\n            } else{\n                cout &lt;&lt; \"This key has been inserted in the hash table!\" &lt;&lt; endl;\n            }\n        }\n    }\n    void erase(int key){\n        int idx = key % table_.size();\n        auto it = ::find(table_[idx].begin(), table_[idx].end(), key);\n        if (it != table_[idx].end()){\n            table_[idx].erase(it);\n            if (table_[idx].empty()){\n                useBucketNum_--;\n            }\n        }\n    }\n    bool find(int key){\n        int idx = key % table_.size();\n        auto it = ::find(table_[idx].begin(), table_[idx].end(), key);\n        return it != table_[idx].end();\n    }\nprivate:\n    void expand(){\n        if (primeIdx_ + 1 == PRIME_SIZE){\n            throw \"HashTable is too large! Can not expand anymore\";\n        }\n        primeIdx_++;\n        vector&lt;list&lt;int&gt;&gt; oldTable;\n        // swap\u4ec5\u4ec5\u662f\u53eb\u4ea4\u6362\u4e86\u4e24\u4e2a\u5bb9\u5668\u7684\u6210\u5458\u53d8\u91cf,\u56e0\u6b64\u8fd9\u91ccswap\u5176\u5b9e\u662f\u5f88\u9ad8\u6548\u7684\n        table_.swap(oldTable);\n        table_.resize(primes_[primeIdx_]);\n        for (auto list : oldTable){\n            for (auto key : list){\n                int idx = key % table_.size();\n                if (table_[idx].empty()){\n                    useBucketNum_++;\n                }\n                table_[idx].emplace_front(key);\n            }\n        }\n    }\nprivate:\n    vector&lt;list&lt;int&gt;&gt; table_; //\u54c8\u5e0c\u8868\u7684\u6570\u636e\u7ed3\u6784\n    int useBucketNum_; // \u8bb0\u5f55\u6876\u7684\u4e2a\u6570\n    double loadFactor_; // \u54c8\u5e0c\u8868\u88c5\u8f7d\u56e0\u5b50\n    static const int PRIME_SIZE = 10; // \u7d20\u6570\u8868\u7684\u5927\u5c0f\n    static int primes_[PRIME_SIZE]; // \u7d20\u6570\u8868\n    int primeIdx_; // \u5f53\u524d\u4f7f\u7528\u7684\u7d20\u6570\u7684\u4e0b\u6807\n};\n\nint HashTable::primes_[HashTable::PRIME_SIZE] = {3, 7, 23, 47, 97, 251, 443, 911, 1471, 42773};\n\nint main(){\n    HashTable htable;\n    htable.insert(14);\n    cout &lt;&lt; htable.find(14) &lt;&lt; endl;\n    htable.insert(32);\n    htable.insert(21);\n    htable.insert(15);\n    htable.insert(560);\n    cout &lt;&lt; htable.find(14) &lt;&lt; endl;\n    htable.erase(14);\n    cout &lt;&lt; htable.find(14) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#stl_2","title":"STL\u5b9e\u73b0","text":"<p>Reference: https://chatgpt.com</p> <p>\u5728 C++ \u4e2d\uff0c\u54c8\u5e0c\u8868\u7684 STL \u5b9e\u73b0\u662f\u901a\u8fc7 <code>unordered_map</code>\u8fd9\u4e2a\u5bb9\u5668\u7c7b\u6765\u5b9e\u73b0\u7684\u3002\u5728 C++ \u4e2d\uff0c<code>unordered_map</code> \u662f\u5e38\u7528\u7684\u65e0\u5e8f\u5173\u8054\u5bb9\u5668\uff0c\u5c5e\u4e8e C++ \u6807\u51c6\u5e93\u4e2d\u7684\u54c8\u5e0c\u8868\u5bb9\u5668\u3002\u5b83\u4e8e\u5b58\u50a8\u952e\u503c\u5bf9\uff08<code>unordered_map</code>\uff09\u3002\u4e24\u8005\u90fd\u57fa\u4e8e\u54c8\u5e0c\u8868\u5b9e\u73b0\uff0c\u56e0\u6b64\u5177\u6709 \u5e38\u6570\u65f6\u95f4\u590d\u6742\u5ea6 \u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002\u4e0b\u9762\u8be6\u7ec6\u4ecb\u7ecd\u5b83\u4eec\u7684\u521d\u59cb\u5316\u548c\u5e38\u7528\u65b9\u6cd5\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#unordered_map","title":"unordered_map","text":"<p><code>unordered_map</code> \u662f\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u54c8\u5e0c\u8868\u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7531\u4e00\u4e2a \u952e \u548c\u4e00\u4e2a \u503c \u7ec4\u6210\u3002\u952e\u662f\u552f\u4e00\u7684\uff0c\u503c\u53ef\u4ee5\u91cd\u590d\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n// about initialization\nvoid demo_initialize() {\n    // \u521d\u59cb\u5316\u7684\u65f6\u5019\u5728template\u91cc\u9762\u58f0\u660e\u7c7b\u578b\n    // 1. \u9ed8\u8ba4\u521d\u59cb\u5316\n    std::unordered_map&lt;int, std::string&gt; map1;\n    // 2. \u5217\u8868\u521d\u59cb\u5316\n    std::unordered_map&lt;int, std::string&gt; map2 = {\n        {1, \"apple\"},\n        {2, \"banana\"},\n        {3, \"cherry\"}\n    };\n    // 3. \u62f7\u8d1d\u521d\u59cb\u5316\n    std::unordered_map&lt;int, std::string&gt; map3(map2);\n    // 4. \u4f7f\u7528\u6307\u5b9a\u7684\u54c8\u5e0c\u51fd\u6570\u548c\u6bd4\u8f83\u51fd\u6570\uff08\u81ea\u5b9a\u4e49\u51fd\u6570\u8f83\u5c11\u7528\u5230\uff09\n    std::unordered_map&lt;int, std::string&gt; map4(10 /* bucket_count */, std::hash&lt;int&gt;(), std::equal_to&lt;int&gt;());\n}\n\nint main() {\n    std::unordered_map&lt;int, std::string&gt; map = {\n        {1, \"apple\"},\n        {2, \"banana\"},\n        {3, \"cherry\"}\n    };\n\n    // \u63d2\u5165\u952e\u503c\u5bf9\n    map.insert({4, \"date\"});\n    map[5] = \"elderberry\";  // \u53e6\u4e00\u79cd\u63d2\u5165\u65b9\u5f0f\uff0c\u5982\u679c\u952e5\u5df2\u5b58\u5728\uff0c\u66f4\u65b0\u503c\n\n    // \u67e5\u627e\u5143\u7d20\uff0c\u5176\u4e2d\u4e0b\u9762\u7684\u6761\u4ef6\u5224\u65ad\u662f\u7ecf\u5178\uff01\n    if (map.find(2) != map.end()) {\n        std::cout &lt;&lt; \"Key 2 found, value: \" &lt;&lt; map[2] &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"Key 2 not found\" &lt;&lt; std::endl;\n    }\n\n    // \u8bbf\u95ee\u5143\u7d20\n    std::cout &lt;&lt; \"Key 1's value: \" &lt;&lt; map.at(1) &lt;&lt; std::endl;  // map.at() \u8bbf\u95ee\u5143\u7d20\n    std::cout &lt;&lt; \"Key 3's value: \" &lt;&lt; map[3] &lt;&lt; std::endl;     // [] \u8fd0\u7b97\u7b26\u8bbf\u95ee\n\n    // \u5220\u9664\u5143\u7d20\n    map.erase(2);  // \u6839\u636e\u952e\u5220\u9664\u5143\u7d20\n    std::cout &lt;&lt; \"After erasing key 2, map size: \" &lt;&lt; map.size() &lt;&lt; std::endl;\n\n    // \u904d\u5386 map\n    for (const auto&amp; pair : map) {\n        std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre> <p><code>insert()</code>\uff1a\u63d2\u5165\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u63d2\u5165\u65f6\u4e0d\u4f1a\u8986\u76d6\u5df2\u6709\u952e\u7684\u503c\u3002</p> <p><code>[]</code>\uff08\u4e0b\u6807\u8fd0\u7b97\u7b26\uff09\uff1a\u65e2\u53ef\u7528\u4e8e\u8bbf\u95ee\u503c\uff0c\u4e5f\u53ef\u7528\u4e8e\u63d2\u5165\u65b0\u952e\u503c\u5bf9\u3002\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u4f1a\u9ed8\u8ba4\u63d2\u5165\u4e00\u4e2a\u503c\u521d\u59cb\u5316\u7684\u5143\u7d20\u3002</p> <p><code>find()</code>\uff1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u67d0\u4e2a\u952e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de <code>end()</code> \u8fed\u4ee3\u5668\u3002</p> <p><code>at()</code>\uff1a\u8bbf\u95ee\u67d0\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u5982\u679c\u952e\u4e0d\u5b58\u5728\u4f1a\u629b\u51fa\u5f02\u5e38\u3002</p> <p><code>erase()</code>\uff1a\u5220\u9664\u952e\u5bf9\u5e94\u7684\u5143\u7d20\u3002</p> <p><code>size()</code>\uff1a\u8fd4\u56de\u54c8\u5e0c\u8868\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u3002</p> <p><code>empty()</code>\uff1a\u5224\u65ad\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_35","title":"\u4f8b\uff1a\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p> <pre><code>\u8f93\u5165: s = \"abcabcbb\"\n\u8f93\u51fa: 3 \n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n    unordered_map&lt;char, int&gt; charIndexMap;  // \u54c8\u5e0c\u8868\uff0c\u8bb0\u5f55\u5b57\u7b26\u548c\u5b83\u4eec\u7684\u4e0b\u6807\n    int maxLength = 0;  // \u8bb0\u5f55\u6700\u957f\u5b50\u4e32\u957f\u5ea6\n    int left = 0;  // \u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\n\n    // \u904d\u5386\u5b57\u7b26\u4e32\uff0cright \u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u53f3\u8fb9\u754c\n    for (int right = 0; right &lt; s.size(); ++right) {\n        char currentChar = s[right];\n\n        // \u5982\u679c\u5f53\u524d\u5b57\u7b26\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u4e0b\u6807\u5927\u4e8e\u7b49\u4e8eleft\uff0c\u66f4\u65b0left\u6307\u9488\n        if (charIndexMap.find(currentChar) != charIndexMap.end() &amp;&amp; charIndexMap[currentChar] &gt;= left) {\n            left = charIndexMap[currentChar] + 1;  // \u5de6\u8fb9\u754c\u53f3\u79fb\uff0c\u8df3\u8fc7\u91cd\u590d\u5b57\u7b26\n        }\n\n        // \u66f4\u65b0\u5f53\u524d\u5b57\u7b26\u7684\u4e0b\u6807\n        charIndexMap[currentChar] = right;\n\n        // \u8ba1\u7b97\u7a97\u53e3\u957f\u5ea6\u5e76\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n        maxLength = max(maxLength, right - left + 1);\n    }\n\n    return maxLength;\n}\n</code></pre> <p>\u539f\u672c\u5728\u6ed1\u52a8\u7a97\u53e3\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u4e4b\u540e\uff0c\u53ef\u80fd\u9700\u8981\u904d\u5386\u5f53\u524d\u5b50\u4e32\u4ee5\u5224\u65ad\u65b0\u6765\u7684\u5143\u7d20\u662f\u5426\u5728\u5148\u524d\u51fa\u73b0\u8fc7\u3002\u4f46\u662f\u73b0\u5728\u80fd\u591f\u50a8\u5b58\u5373&lt;\u5b57\u7b26\uff0c\u4e0b\u6807&gt;\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u5728\u65b0\u5143\u7d20\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ee5\u5b83\u4e3a\u952e\u67e5\u770b\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u51fa\u73b0\u8fc7\u5e76\u4e14\u5982\u679c\u51fa\u73b0\u8fc7\u80fd\u591f\u8fd4\u56de\u4e0a\u4e00\u4e2a\u8be5\u5b57\u7b26\u7684\u4e0b\u6807\uff0c\u65b9\u4fbf\u6ed1\u52a8\u7a97\u53e3left\u8fb9\u754c\u7684\u8c03\u6574\u3002"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_36","title":"\u6811","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#tree-structure-terminology","title":"Tree Structure &amp; Terminology","text":"<p>A rooted tree data structure stores information in nodes. \u6700\u9876\u4e0a\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u88ab\u79f0\u4e3aroot\uff08\u6839\uff09\uff1b\u800c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u6709\u51e0\u4e2asuccessors\uff08\u7ee7\u627f\u8005\uff09\uff1b\u800c\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\uff0c\u90fd\u4f1a\u88ab\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u6307\u5411\uff01\u5728\u6811\u7684\u7ed3\u6784\u4e2d\uff0c\u6709\u5f88\u591a\u672f\u8bedTerminology\uff0c\u7edd\u5927\u90e8\u5206\u5728\u79bb\u6563\u6570\u5b66\u4e2d\u6709\u6240\u8986\u76d6\uff0c\u8fd9\u91cc\u518d\u6b21\u56de\u987e\uff1a</p> <ol> <li>\u5b50\u8282\u70b9\uff1aAll nodes will have zero or more child nodes or children.</li> <li>\u7236\u8282\u70b9\uff1aFor all nodes other than the root node, there is one parent node</li> <li>deg/\u5ea6\uff1a\u4e00\u4e2a\u8282\u70b9\u7684\u5ea6\uff08degree\uff09\u662f\u5b83\u5b50\u8282\u70b9\u7684\u6570\u91cf</li> <li>siblings/\u5144\u5f1f\u8282\u70b9\uff1a\u5bf9\u4e8e\u4e24\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u5b83\u4eec\u6709\u5171\u540c\u7684\u7236\u8282\u70b9\uff0c\u90a3\u4e48\u79f0\u4e3a\u5144\u5f1f\u8282\u70b9\uff08siblings\uff09</li> <li>leaf nodes/\u53f6\u5b50\u8282\u70b9\uff1a\u5ea6\u4e3a0\u7684\u8282\u70b9\u79f0\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff08leaf node\uff09</li> <li>Internal/\u5185\u90e8\u8282\u70b9\uff1a\u9664\u4e86\u53f6\u5b50\u7ed3\u70b9\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u5185\u90e8\u8282\u70b9\uff08internal node\uff09</li> <li>ordered tree/\u6709\u5e8f\u6811\uff1a\u6709\u5e8f\u6811\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u90fd\u6309\u7167\u7279\u5b9a\u7684\u987a\u5e8f\u6392\u5217\u3002\u8fd9\u79cd\u987a\u5e8f\u901a\u5e38\u5bf9\u6811\u7684\u64cd\u4f5c\u548c\u7b97\u6cd5\u6709\u5f71\u54cd</li> <li>unordered tree/\u65e0\u5e8f\u6811\uff1a\u65e0\u5e8f\u6811\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\u5176\u4e2d\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6ca1\u6709\u7279\u5b9a\u7684\u987a\u5e8f\u3002\u8fd9\u610f\u5473\u7740\u5b50\u8282\u70b9\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u6dfb\u52a0\u6216\u6392\u5217\uff0c\u4e0d\u50cf\u6709\u5e8f\u6811\u90a3\u6837\u6709\u660e\u786e\u7684\u987a\u5e8f\u8981\u6c42</li> <li>path/\u8def\u5f84\uff1aA path is a sequence of edges between nodes. The length of this path is number of edges in the path. For each node in a tree, there exists a unique path from the root node to that node</li> <li>depth/\u6df1\u5ea6\uff1aThe length of this path is the depth of the node</li> <li>height/\u9ad8\u5ea6\uff1aThe height of a tree is defined as the maximum depth of any node within the tree. The height of a tree with one node is 0. For convenience, we define the height of the empty tree to be  \u20131</li> <li>ancestor/\u7956\u5148\u8282\u70b9\uff1aany node y on the (unique) path from root r to node n is an ancestor of node n. </li> <li>descendent/\u540e\u4ee3\u8282\u70b9\uff1aany node y for which n is an ancestor of y. </li> </ol> <p>Thus, a node is both an ancestor and a descendant of itself.</p> <p>We can add the adjective strict to exclude equality: a is a strict descendant of b if a is a descendant of b but a \u2260 b</p> <p>The root node is an ancestor of all nodes</p> <ol> <li>A recursive definition of a tree: A degree-0 node is a tree and a node with degree n is a tree if it has n children and all of its children are disjoint trees (i.e., with no intersecting nodes)</li> <li>subtree\uff1aGiven any node \\(a\\) within a tree, the collection of \\(a\\) and all of its descendants is said to be a subtree of the tree with root \\(a\\).</li> </ol> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\u8fd9\u4e2a\u5b50\u6811\u7684\u5b9a\u4e49\u4e00\u5b9a\u4e0d\u80fd\u7406\u89e3\u9519\u4e86\uff01\u662f\u5168\u90e8\u7684descendants\uff01</p> <p></p> <p>\u8865\u5145\uff1a\u4e00\u4e2a\u542b\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u5b83\u7684ordered binary tree\u4e00\u5171\u6709\\(\\frac{2n!}{(n+1)!n!}\\)\u79cd\uff0c\u800c\u8fd9\u5c31\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u5361\u7279\u5170\u6570\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#implementation","title":"Implementation","text":"<p>\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u7684\u5173\u4e8e\u6570\u636e\u7ed3\u6784\u7684\u4ecb\u7ecd\uff0c\u9996\u5148\u6211\u4eec\u8981\u4e86\u89e3\u6811\u652f\u6301\u6211\u4eec\u4f7f\u7528\u4ec0\u4e48\u64cd\u4f5c\uff0c\u5982\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5bfb\u627e\u4e4b\u7c7b\u3002Operations on a tree include:</p> <ul> <li>Accessing the root</li> <li>Access the parent of the current object</li> <li>Find the degree of the current object</li> <li>Get a reference to a child</li> <li>Attach a new sub-tree to the current object</li> <li>Detach this tree from its parent</li> </ul> <p>We can implement a general tree by using a class which stores an element and stores the children in a list.</p> <p>\u5927\u4f53\u4e0a\uff0c\u6811\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u63a5\u53e3\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <pre><code>class Simple_tree {\n    private:\n        Type element;\n        Simple_tree *parent_node;\n        Single_list&lt;Simple_tree *&gt; children;\n\u00a0\n    public:\n        Simple_tree( Type const &amp; = Type(), Simple_tree * = nullptr );\n\u00a0\n        Type retrieve() const;\n        Simple_tree *parent() const;\n        int degree() const;\n        bool is_root() const;\n        bool is_leaf() const;\n        Simple_tree *child( int n ) const;\n      \u00a0 int height() const;\n\n        void insert( Type const &amp; );\n        void attach( Simple_tree * );\n        void detach();\n};\n</code></pre> <p>\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0b\u56fe\uff0c\u4e00\u4e2a\u542b\u6709\u516d\u4e2a\u8282\u70b9\u7684\u6811\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u6811\u7ed3\u6784\u8868\u793a\u3002\u5229\u7528node\u7c7b\u7684\u5730\u5740\u57df\u6765\u642d\u5efa\u8fb9\uff0c\u800c\u53f6\u5b50\u7ed3\u70b9\u7684\u5730\u5740\u57df\u662f\u7a7a\u6307\u9488\u3002</p> <p></p> <p>\u4e00\u4e2a\u7ecf\u5178\u7684implementation\u5982\u4e0b\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;stdexcept&gt;\n#include &lt;vector&gt;\n\n// \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6a21\u677f\u7c7b Single_list \u6765\u5b58\u50a8\u5b50\u8282\u70b9\ntemplate &lt;typename T&gt;\nclass Single_list {\nprivate:\n    std::vector&lt;T&gt; list;\n\npublic:\n    void insert(T const &amp;item) {\n        list.push_back(item);\n    }\n\n    // \u975e const \u7248\u672c\u7684 operator[]\n    T&amp; operator[](int index) {\n        if (index &lt; 0 || index &gt;= list.size()) {\n            throw std::out_of_range(\"Index out of range\");\n        }\n        return list[index];\n    }\n\n    // const \u7248\u672c\u7684 operator[]\uff0c\u4fdd\u8bc1\u4e0d\u4fee\u6539\u6210\u5458\u53d8\u91cf\n    const T&amp; operator[](int index) const {\n        if (index &lt; 0) {\n            throw std::out_of_range(\"Index cannot be negative\");\n        }\n        // \u5c06 index \u8f6c\u6362\u4e3a std::size_t \u4ee5\u907f\u514d\u7b26\u53f7\u4e0d\u5339\u914d\u7684\u6bd4\u8f83\n        if (static_cast&lt;std::size_t&gt;(index) &gt;= list.size()) {\n            throw std::out_of_range(\"Index out of range\");\n        }\n        return list[index];\n    }\n\n    int size() const {\n        return list.size();\n    }\n\n    void clear() {\n        list.clear();\n    }\n};\n\n\ntemplate &lt;typename Type&gt;\nclass Simple_tree {\nprivate:\n    Type element;\n    Simple_tree *parent_node;\n    Single_list&lt;Simple_tree *&gt; children;\n\npublic:\n    Simple_tree(Type const &amp;elem = Type(), Simple_tree *parent = nullptr)\n        : element(elem), parent_node(parent) {}\n\n    // \u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u5143\u7d20\n    Type retrieve() const {\n        return element;\n    }\n\n    // \u8fd4\u56de\u7236\u8282\u70b9\u7684\u6307\u9488\n    Simple_tree *parent() const {\n        return parent_node;\n    }\n\n    // \u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\n    int degree() const {\n        return children.size();\n    }\n\n    // \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u6839\u8282\u70b9\n    bool is_root() const {\n        return parent_node == nullptr;\n    }\n\n    // \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u8282\u70b9\n    bool is_leaf() const {\n        return children.size() == 0;\n    }\n\n    // \u8fd4\u56de\u7b2cn\u4e2a\u5b50\u8282\u70b9\u7684\u6307\u9488\n    Simple_tree *child(int n) const {\n        if (n &lt; 0 || n &gt;= children.size()) {\n            throw std::out_of_range(\"Invalid child index\");\n        }\n        return children[n];\n    }\n\n    // \u8ba1\u7b97\u6811\u7684\u9ad8\u5ea6\n    int height() const {\n        if (is_leaf()) {\n            return 0;\n        }\n        int max_child_height = 0;\n        for (int i = 0; i &lt; children.size(); ++i) {\n            max_child_height = std::max(max_child_height, children[i]-&gt;height());\n        }\n        return 1 + max_child_height;\n    }\n\n    // \u63d2\u5165\u4e00\u4e2a\u65b0\u8282\u70b9\n    void insert(Type const &amp;elem) {\n        Simple_tree *new_child = new Simple_tree(elem, this);\n        children.insert(new_child);\n    }\n\n    // \u6dfb\u52a0\u5df2\u7ecf\u5b58\u5728\u7684\u5b50\u6811\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u5b50\u8282\u70b9\n    void attach(Simple_tree *child_tree) {\n        if (child_tree == nullptr) {\n            throw std::invalid_argument(\"Cannot attach a null tree\");\n        }\n\n        // \u5982\u679c\u8be5\u5b50\u6811\u5df2\u7ecf\u6709\u7236\u8282\u70b9\uff0c\u5219\u5148\u4ece\u5176\u539f\u7236\u8282\u70b9\u5206\u79bb\n        if (child_tree-&gt;parent() != nullptr) {\n            child_tree-&gt;detach();\n        }\n\n        // \u5c06\u5f53\u524d\u6811\u4f5c\u4e3a\u5b50\u6811\u7684\u7236\u8282\u70b9\n        child_tree-&gt;parent_node = this;\n        children.insert(child_tree);\n    }\n\n    // \u4ece\u7236\u8282\u70b9\u5206\u79bb\u81ea\u5df1\uff08detach\uff09\n    void detach() {\n        if (parent_node != nullptr) {\n            for (int i = 0; i &lt; parent_node-&gt;children.size(); ++i) {\n                if (parent_node-&gt;children[i] == this) {\n                    parent_node-&gt;children[i] = parent_node-&gt;children[parent_node-&gt;children.size() - 1];\n                    parent_node-&gt;children.size()--;\n                    break;\n                }\n            }\n        }\n        parent_node = nullptr;\n    }\n\n    int size() const {\n    // \u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f\u81f3\u5c11\u4e3a1\n    int total_size = 1; \n\n    // \u904d\u5386\u6240\u6709\u5b50\u8282\u70b9\uff0c\u9012\u5f52\u8ba1\u7b97\u5b50\u6811\u5927\u5c0f\n    for (int i = 0; i &lt; children.size(); ++i) {\n        total_size += children[i]-&gt;size();  // \u9012\u5f52\u8c03\u7528\u5b50\u8282\u70b9\u7684 size()\n    }\n\n    return total_size;\n}\n};\n\nint main() {\n    // \u793a\u4f8b\u7528\u6cd5\n    Simple_tree&lt;int&gt; root(10);\n    root.insert(20);\n    root.insert(30);\n\n    Simple_tree&lt;int&gt; *child1 = root.child(0);\n    Simple_tree&lt;int&gt; *child2 = root.child(1);\n\n    std::cout &lt;&lt; \"Root: \" &lt;&lt; root.retrieve() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Child 1: \" &lt;&lt; child1-&gt;retrieve() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Child 2: \" &lt;&lt; child2-&gt;retrieve() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Root height: \" &lt;&lt; root.height() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Size: \" &lt;&lt; root.size() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>\u7279\u522b\u5730\uff0c\u5f53detach\u7684\u65f6\u5019\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u8981\u5206\u79bb\u7684\u662f\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u90fd\u4e0d\u505a\uff1b\u800c\u5426\u5219\uff0c\u628a\u8fd9\u4e2a\u5bf9\u8c61\u4ece\u7236\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5217\u8868\u5220\u9664\u6389\uff0c\u5e76\u628a\u7236\u8282\u70b9\u7684\u5730\u5740\u57df\u7f6e\u4e3aNULL\u3002</p> <p>\u5f53\u8ba1\u7b97\u6811\u7684size\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5b50\u8282\u70b9\uff0c\u90a3\u4e48size\u5c31\u662f1\uff1b\u5426\u5219\u904d\u5386\u6240\u6709\u7684children\u8282\u70b9\u5e76\u9012\u5f52\u5f0f\u5730\u8c03\u7528size\u65b9\u6cd5\uff0c\u6c42\u603bsize\u3002</p> <p>\u8ba1\u7b97\u6811\u7684height\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u9ad8\u5ea6\u5c31\u662f0\uff1b\u5426\u5219\u9ad8\u5ea6\u5c31\u662f1+\u4efb\u4f55\u5b50\u6811\u7684\u9ad8\u5ea6\u7684\u6700\u5927\u503c</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#tree-traversals","title":"Tree Traversals","text":"<p>\u79bb\u6563\u6570\u5b66\u4e2d\u5df2\u6709\u4ecb\u7ecd\uff1a\u6811\u7684\u641c\u7d22\u6709\u4e24\u79cd\uff0c\u5e7f\u5ea6\u4f18\u5148\u548c\u6df1\u5ea6\u4f18\u5148\u3002</p> <p>\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08Breadth-first traversals\uff09\u4f1a\u5728\u4e0b\u79fb\u81f3\u4e0b\u4e00\u5c42\u4e4b\u524d\u8bbf\u95ee\u7ed9\u5b9a\u6df1\u5ea6\u7684\u6240\u6709\u8282\u70b9\u3002\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u5229\u7528\u961f\u5217\uff08queue\uff09\uff1a</p> <ul> <li>Place the root node into a queue</li> <li>While the queue is not empty: Pop the node at the front of the queue and Push all of its children into the queue</li> </ul> <p>\u5bf9\u4e8e\u5e7f\u5ea6\u4f18\u5148\u6765\u8bf4\uff0c\u8fd0\u884c\u65f6\u95f4\u662f\\(\\Theta(n)\\)\uff0c\u800c\u9700\u8981\u7684\u7a7a\u95f4\u662f\\(\\Theta(n)\\)\uff08 maximum nodes at a given depth\uff09</p> <p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08Depth-first Traversal\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u904d\u5386\u6811\u7684\u56de\u6eaf\u7b97\u6cd5\u3002\u5728\u4efb\u4f55\u8282\u70b9\uff0c\u524d\u5f80\u5c1a\u672a\u8bbf\u95ee\u7684\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\uff1b</p> <p>\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u8bbf\u95ee\u4e86\u6240\u6709\u5b50\u8282\u70b9\uff08\u5176\u4e2d\u53f6\u5b50\u8282\u70b9\u662f\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff09\uff0c\u5219\u56de\u6eaf\u5230\u7236\u8282\u70b9\u5e76\u91cd\u590d\u6b64\u8fc7\u7a0b\u3002 \u6211\u4eec\u4e00\u65e6\u8bbf\u95ee\u4e86\u6839\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u904d\u5386\u5c31\u7ed3\u675f\u4e86\u3002\u793a\u4f8b\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u800c\u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\uff0c\u53ef\u4ee5\u4f7f\u7528\u6808stack\u3002Create a stack and push the root node onto the stack\u3002While the stack is not empty: Pop the top node and Push all of the children of that node to the top of the stack in reverse order. </p> <p>\u6808\u65b9\u6cd5\u5b9e\u73b0\u7684\u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5\uff0c\u8fd0\u884c\u65f6\u95f4\u662f\\(\\Theta(n)\\)\uff0c\u800c\u5185\u5b58\u9700\u6c42\uff1aIf each node has a maximum of two children, the memory required is \\(\\Theta(h)\\):  the height of the tree.</p> <p>The objects on the stack are all unvisited siblings from the root to the current node</p> <p>\u5173\u4e8e\u6df1\u5ea6\u4f18\u5148\u7684\u603b\u7ed3\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#monte-carlo-tree-search","title":"Monte Carlo Tree Search","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#in-a-nut-shell","title":"In a nut shell","text":"<p>Reference: ChatGPT o4 model</p> <p>Monte Carlo Tree Search\uff08\u8499\u7279\u5361\u7f57\u6811\u641c\u7d22\uff09\u662f\u4e00\u79cd\u57fa\u4e8e \u968f\u673a\u6a21\u62df \u548c \u6811\u7ed3\u6784\u641c\u7d22 \u7684\u7b97\u6cd5\u3002\u5b83\u7528\u4e8e\u89e3\u51b3\u5177\u6709\u4e0d\u786e\u5b9a\u6027\u6216\u590d\u6742\u6027\u7684\u95ee\u9898\uff0c\u901a\u8fc7\u5728\u53ef\u80fd\u7684\u51b3\u7b56\u7a7a\u95f4\u4e2d\u8fdb\u884c\u6a21\u62df\u6765\u8bc4\u4f30\u9009\u62e9\u7684\u6548\u679c\u3002</p> <p>MCTS \u7684\u57fa\u672c\u601d\u8def\u662f\u901a\u8fc7\u6784\u5efa\u4e00\u68f5\u641c\u7d22\u6811\u6765\u63a2\u7d22\u51b3\u7b56\u7a7a\u95f4\uff0c\u5e76\u57fa\u4e8e\u6a21\u62df\u7684\u7ed3\u679c\u6765\u5f15\u5bfc\u641c\u7d22\u3002\u5b83\u9010\u6b65\u6269\u5c55\u6811\u7684\u8282\u70b9\uff0c\u5e76\u901a\u8fc7\u968f\u673a\u91c7\u6837\uff08\u5373\u8499\u7279\u5361\u7f57\u65b9\u6cd5\uff09\u8bc4\u4f30\u6bcf\u4e2a\u8282\u70b9\u7684\u6f5c\u5728\u4ef7\u503c\u3002</p> <p>MCTS \u4e3b\u8981\u5305\u62ec\u56db\u4e2a\u6838\u5fc3\u6b65\u9aa4\uff1a</p> <ol> <li>\u9009\u62e9\uff08Selection\uff09</li> <li>\u6269\u5c55\uff08Expansion\uff09</li> <li>\u6a21\u62df\uff08Simulation\uff09</li> <li>\u53cd\u5411\u4f20\u64ad\uff08Backpropagation\uff09</li> </ol> <p>\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u6709\u7279\u5b9a\u7684\u89d2\u8272\uff0c\u4e14\u4f1a\u53cd\u590d\u8fdb\u884c\uff0c\u76f4\u5230\u8fbe\u5230\u8bbe\u5b9a\u7684\u65f6\u95f4\u9650\u5236\u6216\u8ba1\u7b97\u8d44\u6e90\u9650\u5236\u3002</p> <ol> <li>\u9009\u62e9\uff08Selection\uff09</li> </ol> <p>\u5728\u6811\u4e2d\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u6839\u636e\u67d0\u79cd\u9009\u62e9\u7b56\u7565\uff08\u5982\u57fa\u4e8e\u5df2\u77e5\u4fe1\u606f\u7684\u542f\u53d1\u5f0f\u7b97\u6cd5\uff09\uff0c\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u6269\u5c55\u3002\u901a\u5e38\u4f1a\u9009\u62e9\u90a3\u4e9b\u5177\u6709\u8f83\u9ad8\u63a2\u7d22\u4ef7\u503c\u7684\u8282\u70b9\u3002</p> <p>\u5e38\u7528\u7684\u9009\u62e9\u7b56\u7565\u662f UCB1 (Upper Confidence Bound for Trees)\uff0c\u5b83\u5e73\u8861\u4e86\u63a2\u7d22\u65b0\u8def\u5f84\u548c\u5229\u7528\u5df2\u6709\u77e5\u8bc6\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \\(UCB1 = \\overline{X_i} + C \\sqrt{\\frac{\\ln N}{n_i}}\\)</p> <ul> <li>\\(\\overline{X_i}\\)\u662f\u8282\u70b9\u7684\u5e73\u5747\u83b7\u80dc\u7387\u3002</li> <li>\\(N\\)\u662f\u7236\u8282\u70b9\u7684\u8bbf\u95ee\u6b21\u6570\u3002</li> <li>\\(n_i\\) \u662f\u8be5\u8282\u70b9\u7684\u8bbf\u95ee\u6b21\u6570\u3002</li> <li> <p>\\(C\\) \u662f\u5e73\u8861\u63a2\u7d22\u548c\u5229\u7528\u7684\u5e38\u6570\u3002</p> </li> <li> <p>\u6269\u5c55\uff08Expansion\uff09</p> </li> </ul> <p>\u4e00\u65e6\u9009\u62e9\u5230\u4e86\u9700\u8981\u6269\u5c55\u7684\u8282\u70b9\uff0c\u5982\u679c\u8be5\u8282\u70b9\u8fd8\u6ca1\u6709\u6240\u6709\u7684\u53ef\u80fd\u540e\u7eed\u52a8\u4f5c\u4f5c\u4e3a\u5b50\u8282\u70b9\uff0c\u5219\u53ef\u4ee5\u6269\u5c55\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u8282\u70b9\u3002\u6bcf\u4e2a\u5b50\u8282\u70b9\u4ee3\u8868\u5f53\u524d\u51b3\u7b56\u70b9\u540e\u7684\u67d0\u4e2a\u53ef\u80fd\u72b6\u6001\u3002</p> <ol> <li>\u6a21\u62df\uff08Simulation\uff09</li> </ol> <p>\u5728\u6269\u5c55\u7684\u8282\u70b9\u4e0a\u8fdb\u884c\u4e00\u6b21\u6216\u591a\u6b21\u6a21\u62df\uff0c\u968f\u673a\u5728\u8be5\u8282\u70b9\u4e4b\u540e\u7684\u72b6\u6001\u4e2d\u8fdb\u884c\u4e00\u7cfb\u5217\u884c\u52a8\uff0c\u76f4\u5230\u5230\u8fbe\u6e38\u620f\u7684\u7ed3\u675f\u72b6\u6001\u6216\u8bbe\u5b9a\u7684\u6df1\u5ea6\u3002\u8fd9\u79cd\u6a21\u62df\u901a\u5e38\u662f\u968f\u673a\u7684\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u67d0\u4e9b\u542f\u53d1\u5f0f\u89c4\u5219\u8fdb\u884c\u3002</p> <ul> <li> <p>\u6a21\u62df\u7684\u7ed3\u679c\u53ef\u4ee5\u662f \u80dc\u5229\u3001\u5931\u8d25 \u6216 \u5e73\u5c40 \u7b49\u7ec8\u7ed3\u72b6\u6001\u3002</p> </li> <li> <p>\u53cd\u5411\u4f20\u64ad\uff08Backpropagation\uff09</p> </li> </ul> <p>\u5728\u6a21\u62df\u7ed3\u675f\u540e\uff0c\u5c06\u6a21\u62df\u7ed3\u679c\uff08\u5982\u80dc\u5229\u3001\u5931\u8d25\uff09\u6cbf\u7740\u4ece\u65b0\u6269\u5c55\u7684\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0\u7ecf\u8fc7\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u7edf\u8ba1\u4fe1\u606f\uff08\u5982\u83b7\u80dc\u6b21\u6570\u3001\u8bbf\u95ee\u6b21\u6570\u7b49\uff09\uff0c\u4ee5\u4fbf\u540e\u7eed\u641c\u7d22\u65f6\u53ef\u4ee5\u66f4\u597d\u5730\u5f15\u5bfc\u51b3\u7b56\u3002</p> <p>\u4f18\u70b9\u4e0e\u7f3a\u70b9</p> <p>\u4f18\u70b9\uff1a</p> <ol> <li>\u65e0\u9700\u5927\u91cf\u624b\u5de5\u8bbe\u8ba1\u7684\u8bc4\u4f30\u51fd\u6570\uff1aMCTS \u901a\u8fc7\u968f\u673a\u6a21\u62df\u548c\u641c\u7d22\u6811\u81ea\u52a8\u8bc4\u4f30\u5c40\u9762\uff0c\u4e0d\u9700\u8981\u50cf\u4f20\u7edf\u6e38\u620fAI\u90a3\u6837\u624b\u52a8\u8bbe\u8ba1\u8bc4\u4f30\u51fd\u6570\u3002</li> <li>\u6e10\u8fdb\u6700\u4f18\uff1a\u968f\u7740\u6a21\u62df\u6b21\u6570\u7684\u589e\u52a0\uff0cMCTS \u7684\u51b3\u7b56\u6548\u679c\u4f1a\u8d8a\u6765\u8d8a\u597d\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u8fbe\u5230\u6700\u4f18\u89e3\u3002</li> <li>\u9002\u7528\u4e8e\u4e0d\u5b8c\u5168\u4fe1\u606f\u95ee\u9898\uff1aMCTS \u4e5f\u53ef\u4ee5\u5904\u7406\u90a3\u4e9b\u4e0d\u5b8c\u5168\u4fe1\u606f\u6216\u6709\u968f\u673a\u6027\u7684\u51b3\u7b56\u95ee\u9898\u3002</li> <li>\u63a2\u7d22\u4e0e\u5229\u7528\u7684\u5e73\u8861\uff1a\u901a\u8fc7\u50cf UCB1 \u8fd9\u6837\u7684\u9009\u62e9\u7b56\u7565\uff0cMCTS \u65e2\u80fd\u63a2\u7d22\u65b0\u7684\u53ef\u80fd\u51b3\u7b56\u8def\u5f84\uff0c\u53c8\u80fd\u5229\u7528\u5f53\u524d\u5df2\u6709\u7684\u4fe1\u606f\u3002</li> </ol> <p>\u7f3a\u70b9\uff1a</p> <ol> <li>\u8ba1\u7b97\u91cf\u8f83\u5927\uff1aMCTS \u4f9d\u8d56\u4e8e\u5927\u91cf\u7684\u6a21\u62df\uff0c\u56e0\u6b64\u5728\u8ba1\u7b97\u8d44\u6e90\u4e0d\u8db3\u6216\u65f6\u95f4\u7d27\u5f20\u7684\u60c5\u51b5\u4e0b\uff0c\u6548\u679c\u53ef\u80fd\u4e0d\u4f73\u3002</li> <li>\u6a21\u62df\u8d28\u91cf\u4f9d\u8d56\u4e8e\u7b56\u7565\uff1a\u5982\u679c\u6a21\u62df\u7b56\u7565\u8fc7\u4e8e\u968f\u673a\uff0c\u53ef\u80fd\u5bfc\u81f4\u6a21\u62df\u6548\u679c\u4e0d\u51c6\u786e\uff0c\u4ece\u800c\u5f71\u54cd\u6574\u4f53\u7b97\u6cd5\u6027\u80fd\u3002</li> </ol> <p>\u5e94\u7528\u9886\u57df\uff1aMCTS \u5df2\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u79cd\u9886\u57df\uff0c\u5c24\u5176\u662f\u5728 \u6e38\u620fAI \u548c \u89c4\u5212\u95ee\u9898 \u4e2d\u3002\u5b83\u6700\u8457\u540d\u7684\u5e94\u7528\u662f\u5728 \u56f4\u68cb \u4e2d\uff0c\u6bd4\u5982\u8c37\u6b4c\u7684 AlphaGo \u4f7f\u7528\u4e86\u57fa\u4e8e MCTS \u7684\u641c\u7d22\u7b97\u6cd5\u3002\u6b64\u5916\uff0cMCTS \u4e5f\u88ab\u7528\u4e8e\u673a\u5668\u4eba\u63a7\u5236\u3001\u81ea\u52a8\u89c4\u5212\u3001\u6570\u636e\u6316\u6398\u7b49\u591a\u4e2a\u9886\u57df\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#elaboration","title":"Elaboration","text":"<p>\u5047\u8bbe\u5728\u4e00\u4e2a\u6e38\u620f\u8fc7\u7a0b\u5efa\u6a21\u4e2d\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u53ef\u80fd\u7684\u6309\u7167\u987a\u5e8f\u53d1\u751f\u7684\u60c5\u51b5\u90fd\u7528\u6811\u7684\u7ed3\u6784\u5b58\u50a8\u4e0b\u6765\uff0c\u8fd9\u9897\u6811\u5c31\u53eb\u505agame tree\u3002\u5047\u8bbe\u73a9tic-tac-toe\uff0c\u90a3\u4e48\u6211\u4eec\u6309\u7167\u7b2c\u4e00\u6b65\u4e0b\u5728\u54ea\u91cc\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u80fd\u6a21\u62df\u51fa\u4e00\u7cfb\u5217\u7684\u53ef\u80fd\u573a\u666f\u3002\u66f4\u7279\u6b8a\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u8282\u70b9\u5c31\u662f\u4e00\u79cd\u72b6\u6001\uff0c\u800c\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\u5c31\u662f\u4ee3\u8868\u8fdb\u884c\u4e86\u4e00\u79cd\u64cd\u4f5c\u3002\u6211\u4eec\u5bf9\u6570\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u7136\u540e\u5c1d\u8bd5\u627e\u5230\u6700\u597d\u7684\u64cd\u4f5c\u7cfb\u5217\u3002</p> <p></p> <p>\u5bf9\u4e8e\u8fd9\u6837\u4e00\u4e2a\u6e38\u620f\u7684game tree\u6765\u8bf4\uff0c\u8282\u70b9\u7684\u6570\u91cf\u662f\\(O(n!)\\)\uff0cn\u5f88\u5927\u7684\u65f6\u5019\u77ac\u95f4\u7206\u70b8\u3002\u6240\u4ee5\u8bf4\uff1aDFS is infeasible to search all (leaf) nodes for the game tree in a limited time and computation budget. \u90a3\u4e48\u5982\u4f55\u7f29\u51cfgame tree\u7684\u641c\u7d22\u7a7a\u95f4\u5462\uff1f\u90a3\u4e48\u8499\u7279\u5361\u6d1b\u6811\u641c\u7d22\u5e94\u8fd0\u800c\u751f\uff08MCTS\uff09\u3002Selection, Expansion, Simulation, BackPropagation\u5982\u4e0a\u6587\u6240\u8ff0\u3002</p> <p>\u6211\u4eec\u60f3\u8981\u627e\u5230\u597d\u7684action\uff0c\u90a3\u4e48\u4ec0\u4e48\u6837\u7684action\u53ef\u80fd\u79f0\u4e3a\u597d\u7684action\u5462\uff1fAn action with high winning rate according to the history\uff1bAn action rarely searched\u3002We need to balance Exploration and Exploitation! A well-known exploration policy is Upper Confidence Bound (UCB). </p> <p></p> <p>Selection\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u76f4\u7528UCB\u7b56\u7565\u8bbf\u95ee\u8282\u70b9\uff0c\u76f4\u5230\u8bbf\u95ee\u53f6\u5b50\u7ed3\u70b9\u3002\u7136\u540e\u4ee5\u8be5\u53f6\u5b50\u7ed3\u70b9\u4e3a\u6839\uff0c\u521b\u5efa\u6570\u4e2a\u5b69\u5b50\u8282\u70b9\uff0c\u6269\u5efa\u6811\uff1b\u7136\u540e\u6a21\u62df\u968f\u673a\u7684action\uff0c\u6700\u540e\u6839\u636e\u7ed3\u679c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u6bcf\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5230\u6839\u8282\u70b9\u4e0a\u7684\u6570\u636e\u7684\u5206\u5b50\u5206\u6bcd\u90fd+1\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#forest","title":"Forest","text":"<p>A rooted forest is a data structure that is a collection of disjoint rooted trees. </p> <p>Note that:</p> <ul> <li> <p>Any tree can be converted into a forest by removing the root node</p> </li> <li> <p>Any forest can be converted into a tree by adding a root node that has the roots of all the trees in the forest as children</p> </li> </ul> <p>Traversals on forests can be achieved by treating the roots as children of a notional root. \u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#traversal-order","title":"Traversal Order","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#definition-and-methodology","title":"Definition and Methodology","text":"<p>Reference: kimi.moonshot.cn</p> <p>\u5f53\u7136\u53ef\u4ee5\u3002\u6811\u7684\u904d\u5386\u662f\u6307\u6309\u7167\u67d0\u79cd\u987a\u5e8f\u8bbf\u95ee\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u786e\u4fdd\u6bcf\u4e2a\u8282\u70b9\u90fd\u88ab\u8bbf\u95ee\u4e00\u6b21\u3002\u6811\u7684\u4e09\u79cd\u4e3b\u8981\u904d\u5386\u65b9\u5f0f\u662f\u524d\u5e8f\u904d\u5386\uff08Pre-order Traversal\uff09\u3001\u4e2d\u5e8f\u904d\u5386\uff08In-order Traversal\uff09\u548c\u540e\u5e8f\u904d\u5386\uff08Post-order Traversal\uff09\u3002\u8fd9\u4e9b\u904d\u5386\u65b9\u5f0f\u901a\u5e38\u7528\u4e8e\u4e8c\u53c9\u6811\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u6811\u7ed3\u6784\u3002\u4e0b\u9762\u6211\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff1a</p> <ol> <li>\u524d\u5e8f\u904d\u5386\uff08Pre-order Traversal\uff09\uff1a</li> <li>\u8bbf\u95ee\u987a\u5e8f\uff1a\u6839\u8282\u70b9 -&gt; \u5de6\u5b50\u6811 -&gt; \u53f3\u5b50\u6811</li> <li>\u8fc7\u7a0b\uff1a\u9996\u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u5730\u5bf9\u5de6\u5b50\u6811\u8fdb\u884c\u524d\u5e8f\u904d\u5386\uff0c\u6700\u540e\u9012\u5f52\u5730\u5bf9\u53f3\u5b50\u6811\u8fdb\u884c\u524d\u5e8f\u904d\u5386\u3002</li> <li>\u5e94\u7528\uff1a\u524d\u5e8f\u904d\u5386\u5e38\u7528\u4e8e\u521b\u5efa\u6811\u7684\u526f\u672c\u3001\u6253\u5370\u6811\u7ed3\u6784\u7b49\u3002</li> <li>\u4e2d\u5e8f\u904d\u5386\uff08In-order Traversal\uff09\uff1a</li> <li>\u8bbf\u95ee\u987a\u5e8f\uff1a\u5de6\u5b50\u6811 -&gt; \u6839\u8282\u70b9 -&gt; \u53f3\u5b50\u6811</li> <li>\u8fc7\u7a0b\uff1a\u9996\u5148\u9012\u5f52\u5730\u5bf9\u5de6\u5b50\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u7136\u540e\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u6700\u540e\u9012\u5f52\u5730\u5bf9\u53f3\u5b50\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u3002</li> <li>\u7279\u70b9\uff1a\u5bf9\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u7684\u8282\u70b9\u5e8f\u5217\u3002</li> <li>\u5e94\u7528\uff1a\u4e2d\u5e8f\u904d\u5386\u5e38\u7528\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6709\u5e8f\u904d\u5386\u3002</li> <li>\u540e\u5e8f\u904d\u5386\uff08Post-order Traversal\uff09\uff1a</li> <li>\u8bbf\u95ee\u987a\u5e8f\uff1a\u5de6\u5b50\u6811 -&gt; \u53f3\u5b50\u6811 -&gt; \u6839\u8282\u70b9</li> <li>\u8fc7\u7a0b\uff1a\u9996\u5148\u9012\u5f52\u5730\u5bf9\u5de6\u5b50\u6811\u8fdb\u884c\u540e\u5e8f\u904d\u5386\uff0c\u7136\u540e\u9012\u5f52\u5730\u5bf9\u53f3\u5b50\u6811\u8fdb\u884c\u540e\u5e8f\u904d\u5386\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9\u3002</li> <li>\u7279\u70b9\uff1a\u540e\u5e8f\u904d\u5386\u53ef\u4ee5\u7528\u4e8e\u5220\u9664\u6811\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5148\u8bbf\u95ee\u5b50\u8282\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u786e\u4fdd\u5728\u5220\u9664\u8282\u70b9\u65f6\u4e0d\u4f1a\u4e22\u5931\u5bf9\u5b50\u6811\u7684\u5f15\u7528\u3002</li> <li>\u5e94\u7528\uff1a\u540e\u5e8f\u904d\u5386\u5e38\u7528\u4e8e\u5220\u9664\u6811\u3001\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c\u7b49\u3002</li> </ol> <p>\u901a\u8fc7\u4e0a\u8ff0\u7684\u5b9a\u4e49\uff0c\u80fd\u591f\u5f88\u5bb9\u6613\u8ba4\u540c\u4e0b\u9762\u7684\u7ed3\u8bba\uff1a</p> <ol> <li>\u524d\u5e8f\u7684\u7b2c\u4e00\u4e2a\u662f <code>root</code>\uff0c\u540e\u5e8f\u7684\u6700\u540e\u4e00\u4e2a\u662f <code>root</code>\u3002</li> <li>\u5148\u786e\u5b9a\u6839\u8282\u70b9\uff0c\u7136\u540e\u6839\u636e\u4e2d\u5e8f\u904d\u5386\uff0c\u5728\u6839\u5de6\u8fb9\u7684\u4e3a\u5de6\u5b50\u6811\uff0c\u6839\u53f3\u8fb9\u7684\u4e3a\u53f3\u5b50\u6811\u3002</li> <li>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u5168\u65b0\u7684\u6811\uff0c\u4ecd\u7136\u9075\u5faa\u4e0a\u9762\u7684\u89c4\u5f8b\u3002</li> </ol> <p>Reference: oi.wiki</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#using-traversal-to-determine-tree","title":"Using Traversal to Determine Tree","text":"<p>Reference: [1] https://zhuanlan.zhihu.com/p/668057634</p> <p>[2] https://blog.csdn.net/qq_37437983/article/details/79613947</p> <p>[3] oi.wiki</p> <p>[4] https://www.cnblogs.com/lanhaicode/p/10390147.html</p> <p>\u5047\u5b9a\u5df2\u77e5\u904d\u5386\u7ed3\u679c\uff0c\u80fd\u5426\u786e\u5b9a\u4e8c\u53c9\u6811\u7ed3\u6784\uff1f\u5148\u8bf4\u7ed3\u8bba[1]\uff1a</p> \u5df2\u77e5\u5e8f\u5217 \u80fd\u5426\u786e\u5b9a \u5148\u5e8f+\u4e2d\u5e8f \u4e00\u5b9a\u53ef\u4ee5 \u4e2d\u5e8f+\u540e\u5e8f \u4e00\u5b9a\u53ef\u4ee5 \u5148\u5e8f+\u540e\u5e8f \u4e0d\u4e00\u5b9a"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_37","title":"\u5148\u5e8f+\u540e\u5e8f","text":"<p>\u65e2\u7136\u5148\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u65e0\u6cd5\u51b3\u5b9a\u539f\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u53cd\u4f8b\u5c31\u662f\u4e0a\u56fe\u30021\uff0c2\u56fe\u7684\u5148\u5e8f\u904d\u5386\u90fd\u662fAB\uff0c\u540e\u7eed\u904d\u5386\u90fd\u662fBA\uff0c\u8bf4\u660e\u540c\u4e00\u4e2a\u7ed3\u679c\u53ef\u4ee5\u5bf9\u5e94\u51fa\u4e24\u79cd\u6811\uff0c\u56e0\u6b64\u5148\u5e8f+\u540e\u7eed\u65e0\u6cd5\u51b3\u5b9a\u6811\u3002</p> <p>\u90a3\u4e48\u53d8\u6001\u7684\u51fa\u9898\u4eba\u5c31\u53ef\u4ee5\u51fa\u8fd9\u4e2a\u95ee\u9898\uff1a[2]</p> <p>\u8f93\u5165\u63cf\u8ff0 Input Description\uff1a\u8f93\u5165\u6587\u4ef6\u51712\u884c\uff0c\u7b2c\u4e00\u884c\u8868\u793a\u8be5\u6811\u7684\u524d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u7b2c\u4e8c\u884c\u8868\u793a\u8be5\u6811\u7684\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u3002\u8f93\u5165\u7684\u5b57\u7b26\u96c6\u5408\u4e3a{a-z}\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc726\u3002\u8f93\u51fa\u63cf\u8ff0 Output Description\uff1a\u8f93\u51fa\u6587\u4ef6\u53ea\u5305\u542b\u4e00\u4e2a\u4e0d\u8d85\u8fc7\u957f\u6574\u578b\u7684\u6574\u6570\uff0c\u8868\u793a\u53ef\u80fd\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u603b\u6570\u3002</p> <p>\u6211\u4eec\u77e5\u9053\uff1a\u524d\u5e8f\u904d\u5386\uff1a\u6839\u7ed3\u70b9 ---&gt; \u5de6\u5b50\u6811 ---&gt; \u53f3\u5b50\u6811\uff1b\u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u5b50\u6811---&gt; \u6839\u7ed3\u70b9 ---&gt; \u53f3\u5b50\u6811\uff1b\u540e\u5e8f\u904d\u5386\uff1a\u5de6\u5b50\u6811 ---&gt; \u53f3\u5b50\u6811 ---&gt; \u6839\u7ed3\u70b9\u3002\u7531\u4ee5\u4e0a\u7684\u524d\u4e2d\u540e\u904d\u5386\u987a\u5e8f\u53ef\u4ee5\u770b\u51fa\u5728\u5df2\u77e5\u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7684\u60c5\u51b5\u4e0b\uff0c\u4e2d\u5e8f\u904d\u5386\u4e0d\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002\u800c\u4e14\u4e2d\u5e8f\u904d\u5386\u7684\u4e0d\u786e\u5b9a\u6027\u662f\u7531\u4e00\u4e2a\u8282\u70b9\uff08\u53ea\u6709\u4e00\u8fb9\u5b50\u6811\uff09\u7684\u5de6\u53f3\u5b50\u6811\u7684\u4e0d\u786e\u5b9a\u6027\u51b3\u5b9a\u7684\u3002\u6240\u4ee5\u5f53\u8fd9\u79cd\u8282\u70b9\u6709n\u4e2a\u65f6\uff0c\u4e2d\u5e8f\u904d\u5386\u7684\u53ef\u80fd\u6027\u5c31\u6709:2^n\u3002</p> <p>\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u53d8\u4e3a\u5982\u679c\u786e\u5b9a\u8fd9\u79cd\u8282\u70b9\u7684\u6570\u91cf\u3002\u53ef\u4ee5\u603b\u7ed3\u51fa\u4e00\u4e2a\u89c4\u5f8b\uff0c\u5982\u4e0a\u4f8b\u3002\u524d\u5e8f\u904d\u5386\u4e3aab\uff0c\u540e\u5e8f\u904d\u5386\u4e3aba\uff0c\u6b64\u65f6\u65e0\u6cd5\u786e\u5b9ab\u662f\u4e3a\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u7279\u6b8a\u8282\u70b9\u3002\u6240\u4ee5\u89c4\u5f8b\u5c31\u662f(\u6b64\u65f6a,b\u5206\u522b\u4e3a\u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7684\u5b57\u7b26\u4e32)\uff1aa[i]==b[j]\u65f6\uff0ca[i+1]==b[j-1]\u5219\u4ea7\u751f\u4e00\u4e2a\u7279\u6b8a\u8282\u70b9\u3002\uff08\u5176\u4e2da\u5b57\u7b26\u4e32\u4ee3\u8868\u524d\u5e8f\u904d\u5386\uff0cb\u5b57\u7b26\u4ee3\u8868\u540e\u5e8f\u904d\u5386\uff09</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_38","title":"\u524d\u5e8f+\u4e2d\u5e8f","text":"<p>\u9996\u5148\u8981\u660e\u786e\uff1a\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\uff1b\u4e2d\u5e8f\u904d\u5386\u4e2d\u6839\u8282\u70b9\u7684\u5de6\u8fb9\u7684\u5143\u7d20\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u7684\u662f\u53f3\u5b50\u6811\uff1b\u540e\u5e8f\u904d\u5386\u5f97\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u3002</p> <p>\u5173\u4e8e\u4e0a\u8ff0\u7684\u7ed3\u8bba\uff0c\u4e0b\u9762\u8fd9\u5f20\u56fe[3]\u751f\u52a8\u5730\u8fdb\u884c\u4e86\u5c55\u73b0\uff1a </p> <p>\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\uff08\u90e8\u5206\u601d\u8def\u501f\u9274[4]\uff09\uff1a</p> <p>\u7b2c\u4e00\u6b65\uff1a\u770b\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5c31\u662f\u6839\u8282\u70b9</p> <p>\u7b2c\u4e8c\u6b65\uff1a\u627e\u5230\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\u786e\u5b9a\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u91cc\u9762\u6709\u54ea\u4e9b\u8282\u70b9</p> <p>\u7b2c\u4e09\u6b65\uff1a\u6b64\u65f6\u4e0d\u80fd\u5229\u7528\u4e2d\u5e8f\u904d\u5386\u7684\u7279\u70b9\u5f97\u51fa\u5de6\u5b50\u6811\u7684\u6837\u5b50\uff0c\u800c\u662f\u5e94\u8be5\u4f7f\u7528\u524d\u5e8f\u904d\u5386\u7684\u6761\u4ef6\uff0c\u627e\u51fa\u5de6\u5b50\u6811\u7684\u6839\u8282\u70b9\uff08\u5c31\u662f\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff09\uff0c\u7136\u540e\u5c31\u80fd\u77e5\u9053\u5bf9\u4e8e\u5de6\u5b50\u6811\u6765\u8bf4\uff0c\u6839\u8282\u70b9\u662f\u8c01\uff0c\u4ee5\u53ca\u5de6\u53f3\u90fd\u6709\u54ea\u4e9b\u5143\u7d20\u3002</p> <p>\u7b2c\u56db\u6b65\uff1a\u628a\u524d\u5e8f\u904d\u5386\u7ed3\u679c\u4e2d\u5de6\u5b50\u6811\u548c\u6839\u8282\u70b9\u7ed3\u679c\u906e\u4f4f\u4e0d\u770b\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u77e5\u9053\u4e86\u8fd9\u4e2a\u6839\u8282\u70b9\u4e4b\u540e\uff0c\u7ed3\u5408\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u5c31\u80fd\u77e5\u9053\u53f3\u5b50\u6811\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u6709\u4ec0\u4e48\u5143\u7d20\u4e86</p> <p>\u7b2c\u4e94\u6b65\uff1a\u5982\u6b64\u91cd\u590d\u4e0b\u53bb\uff0c\u5c31\u80fd\u77e5\u9053\u6700\u7ec8\u7684\u7ed3\u679c\u4e86\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_39","title":"\u540e\u5e8f+\u4e2d\u5e8f","text":"<p>\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u6839\u8282\u70b9\u3002\u601d\u8def\u548c\u4e0a\u4e00\u4e2a\u5341\u5206\u7684\u7c7b\u4f3c\uff08\u90e8\u5206\u601d\u8def\u501f\u9274[4]\uff09\uff1a</p> <p>\u7b2c\u4e00\u6b65\uff1a\u770b\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5c31\u662f\u6839\u8282\u70b9</p> <p>\u7b2c\u4e8c\u6b65\uff1a\u627e\u5230\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u786e\u5b9a\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u91cc\u9762\u6709\u54ea\u4e9b\u8282\u70b9</p> <p>\u7b2c\u4e09\u6b65\uff1a\u6b64\u65f6\u4e0d\u80fd\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u7684\u7279\u70b9\u5f97\u5230\u53f3\u5b50\u6811\u7684\u6837\u5b50\u3002\u540e\u5e8f\u904d\u5386\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u662f\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u518d\u4e2d\u5e8f\u904d\u5386\u7684\u53f3\u5b50\u6811\u5185\u7684\u8282\u70b9\u5143\u7d20\u4e2d\u627e\u5230\u6839\u8282\u70b9\uff0c\u5c31\u80fd\u786e\u5b9a\u53f3\u5b50\u6811\u7684\u5de6\u53f3\u5b50\u6811\u4e86\u3002</p> <p>\u7b2c\u56db\u6b65\uff1a\u5728\u540e\u5e8f\u904d\u5386\u4e2d\u906e\u4f4f\u6839\u8282\u70b9\u548c\u53f3\u5b50\u6811\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5e8f\u5217\u4e2d\u7684\u5012\u6570\u7b2c\u4e00\u4e2a\u5c31\u662f\u5de6\u5b50\u6811\u7684\u6839\u8282\u70b9\u4e86\u3002\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u5de6\u5b50\u6811\u5143\u7d20\u5e8f\u5217\u4e2d\u627e\u5230\u5de6\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u80fd\u77e5\u9053\u5de6\u5b50\u6811\u7684\u5de6\u53f3\u5b50\u6811\u91cc\u9762\u7684\u5143\u7d20\u6709\u54ea\u4e9b\u4e86\u3002</p> <p>\u7b2c\u4e94\u6b65\uff1a\u91cd\u590d\u4e0a\u8ff0\u7684\u6b65\u9aa4\uff0c\u5c31\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#tree-and-full-binary-tree","title":"Tree and Full Binary Tree","text":"<p>\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\uff1a\u4e8c\u53c9\u6811\u5176\u5b9e\u662f\u4e00\u79cd\u9650\u5236restriction\uff0c\u9650\u5236\u6bcf\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b69\u5b50\uff1b\u540c\u65f6\u6211\u4eec\u5b9a\u4e49\uff0ca full node\u662f\u5de6\u53f3\u5b50\u6811\u90fd\u4e0d\u662f\u7a7a\u6811\u7684\u8282\u70b9\u3002\u90a3\u4e48\u663e\u800c\u6613\u89c1\u5730\uff1a</p> <ol> <li>Each child is either empty or another binary tree  </li> <li>This restriction allows us to label the children as left and right subtrees</li> </ol> <p>\u4ee5\u53ca\u5173\u4e8efull node\u5b9a\u4e49\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1b\u540c\u65f6\u76f8\u5bf9\u5730\uff0c\u6211\u4eec\u628a\u80fd\u591f\u63d2\u5165\u53f6\u5b50\u8282\u70b9\u7684\u8282\u70b9\u79f0\u4e3aempty node</p> <p></p> <p>\u4e00\u4e2afull binary tree\uff08\u5b8c\u6574\u4e8c\u53c9\u6811\uff09\u662f\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u6ee1\u8282\u70b9\uff08\u5de6\u53f3\u5b50\u6811\u5747\u975e\u7a7a\uff09\uff0c\u8981\u4e48\u662f\u53f6\u5b50\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u3002</p> <p>\u6ce8\u610f\uff01\u4e00\u4e2a\u5b8c\u6574\u4e8c\u53c9\u6811\u5982\u679c\u6709n\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b8c\u6574\u4e8c\u53c9\u6811\u4e00\u5171\u67092n+1\u4e2a\u8282\u70b9</p> <p>\u800c\u5728\u4e8c\u53c9\u6811\u4e0a\u7684\u4e00\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u603b\u7ed3\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u4e8c\u53c9\u6811\u7684\u7ecf\u5178\u5e94\u7528\u5c31\u662fExpression Tree\u4e86\u3002\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5229\u7528\u4e8c\u53c9\u6811\u6765\u8868\u793a\uff0c\u7136\u540e\u9700\u8981\u7684\u5f97\u5230\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\uff0c\u904d\u5386\u4e00\u904d\u4e8c\u53c9\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\u4f8b\u5b50\u5982\u4e0b\uff1a\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e2d\u5e8f\u904d\u5386\u5373\u53ef\u5f97\u5230\u8868\u8fbe\u5f0f\uff0c\u800c\u540e\u5e8f\u904d\u5386\u80fd\u591f\u5f97\u5230\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#perfect-binary-tree","title":"Perfect Binary Tree","text":"<p>\u4e0a\u4e00\u8282\u4ecb\u7ecd\u4e86\u5b8c\u6574\u4e8c\u53c9\u6811\uff0c\u6b64\u5904\u4ecb\u7ecd\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff08\u53c8\u79f0\u6ee1\u4e8c\u53c9\u6811\uff09\u3002\u6240\u6709\u53f6\u7ed3\u70b9\u7684\u6df1\u5ea6\u5747\u76f8\u540c\uff0c\u4e14\u6240\u6709\u975e\u53f6\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u5747\u4e3a 2 \u7684\u4e8c\u53c9\u6811\u79f0\u4e3a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002\u5173\u4e8e\u5b8c\u7f8e\u4e8c\u53c9\u6811\u6709\u5982\u4e0b\u7684\u5b9a\u5f8b\uff1a</p> <ul> <li>A perfect binary tree of height \\(h\\) has \\(2^{h + 1} \u2013 1\\) nodes</li> <li>A perfect binary tree with n nodes has height \\(lg(n + 1) \u2013 1\\)</li> <li>The height is \\(\\Theta(ln(n))\\)</li> <li>There are \\(2^h\\) leaf nodes</li> <li>The average depth of a node is \\(\\Theta(ln(n))\\)</li> </ul> <p>\u5176\u4e2d\u503c\u5f97\u8865\u5145\u8bc1\u660e\u7684\u662f\u7b2c\u4e94\u6761\uff0c\u5176\u8bc1\u660e\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <p></p> <p>\u5b8c\u7f8e\u4e8c\u53c9\u6811\u88ab\u8ba4\u4e3a\u662f\u5341\u5206\u7406\u60f3\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6df1\u5ea6\u548c\u5e73\u5747\u6df1\u5ea6\u90fd\u662f\\(\\Theta(ln(n))\\)\u3002\u4f46\u662f\u8fd9\u7ec8\u7a76\u662f\u7406\u60f3\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6211\u4eec\u5f88\u662f\u5e0c\u671b\u5c3d\u53ef\u80fd\u627e\u5230\u63a5\u8fd1\u5b8c\u7f8e\u4e8c\u53c9\u6811\u7684\u4e8c\u53c9\u6811\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#complete-binary-tree","title":"Complete Binary Tree","text":"<p>\u5b8c\u5168\u4e8c\u53c9\u6811\uff08complete binary tree\uff09\uff1a\u53ea\u6709\u6700\u4e0b\u9762\u4e24\u5c42\u7ed3\u70b9\u7684\u5ea6\u6570\u53ef\u4ee5\u5c0f\u4e8e 2\uff0c\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u7ed3\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u8fde\u7eed\u4f4d\u7f6e\u4e0a\u3002\u90a3\u4e48\u6709\u4e00\u4e2a\u5bb9\u6613\u9057\u5fd8\u7684\u70b9\uff1a\u5982\u679c\u8981\u8ba1\u7b97\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u53f6\u8282\u70b9\uff0c\u90a3\u4e48\u9664\u4e86\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6700\u540e\u4e00\u5c42\u6709\u53f6\u8282\u70b9\uff0c\u5012\u6570\u7b2c\u4e8c\u5c42\u5176\u5b9e\u4e5f\u6709\u53ef\u80fd\u7531\u53f6\u8282\u70b9\uff01\uff08\u5012\u6570\u7b2c\u4e8c\u5c42\u6ca1\u6709\u6302\u4e0a\u5b69\u5b50\u7684\u8282\u70b9\uff0c\u6ce8\u610f\u53ef\u80fd\u6709\u4e00\u4e2a\u5012\u6570\u7b2c\u4e8c\u5c42\u7684\u8282\u70b9\u53ea\u6302\u4e86\u4e00\u4e2a\u5b69\u5b50\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7236\u8282\u70b9\u4e0d\u662f\u53f6\u8282\u70b9\uff09</p> <p>\u6ce8\u610f1\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u4e0d\u4e00\u5b9a\u662f\u5b8c\u6574\u4e8c\u53c9\u6811\uff0c\u56e0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u5012\u6570\u7b2c\u4e8c\u5c42\u53ef\u80fd\u6709\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u8282\u70b9\u3002</p> <p>\u6ce8\u610f2\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u4e00\u5b9a\u6709\u4e00\u4e2a\u5b50\u6811\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u4f46\u662f\u8fd9\u4e2a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u53ef\u80fd\u662fh-1\u4e5f\u53ef\u80fd\u662fh-2\uff01</p> <p></p> <p>\u4e4b\u524d\u63d0\u5230\uff0c\u6211\u4eec\u5f88\u662f\u5e0c\u671b\u5c3d\u53ef\u80fd\u627e\u5230\u63a5\u8fd1\u5b8c\u7f8e\u4e8c\u53c9\u6811\u7684\u4e8c\u53c9\u6811\u3002\u56e0\u6b64\u5bf9\u4e8en\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u4e0d\u80fd\u6446\u6210\u5b8c\u7f8e\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u90a3\u4e48\u6309\u7167\u987a\u5e8f\u5730\u3001\u5408\u4e4e\u903b\u8f91\u7684\u6446\u6cd5\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u4e86\u3002\u5173\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6027\u8d28\u548c\u5b9a\u7406\uff1a</p> <p>\\(Theorem1:\\) The height of a complete binary tree with n nodes is \\(h = \u230alg(n)\u230b\\)</p> <p>\u8bc1\u660e\uff1a\u5f53n=0\u7684\u65f6\u5019\uff0c\u660e\u663e\u662f\u6b63\u786e\u7684\u3002\u90a3\u4e48\u5047\u8bben\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u9ad8\u5ea6\u662f\\(h = \u230alg(n)\u230b\\)\u3002\u90a3\u4e48\u6b32\u8bc1\u660e\uff1a\\(h = \u230alg(n+1)\u230b\\)\u662fn+1\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u6811\u7684\u9ad8\u5ea6\u3002\u90a3\u4e48\u5f53\u8282\u70b9+1\u7684\u65f6\u5019\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u672c\u6765n\u7684\u65f6\u5019\uff0c\u6811\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff1b\u4ee5\u53can\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4f46\u4e0d\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002</p> <p>\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u539f\u6765\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\\(n=2^{h+1}-1\\)\u3002\u5f53n+1\u7684\u65f6\u5019\uff0c\u81ea\u7136\u77e5\u9053\uff1a\\(h = h+1\\)\uff0c\u7b26\u5408\uff1b</p> <p>\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u8bc1\u660e\u8fc7\u7a0b\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u53ef\u4ee5\u5229\u7528\u6570\u7ec4\u6765\u50a8\u5b58\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u7528\u5e7f\u5ea6\u4f18\u5148\u65b9\u5f0f\u904d\u5386\u6240\u6709\u7684\u8282\u70b9\uff0c\u7136\u540e\u628a\u8282\u70b9\u4eec\u4ee5\u6b64\u653e\u5165\u6570\u7ec4\u91cc\u9762\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u91cc\u9762\u52a0\u51cf\u8282\u70b9\uff0c\u5b8c\u5168\u7b49\u6548\u4e8e\u6570\u7ec4\u91cc\u9762\u589e\u52a0\u548c\u5220\u9664\u5143\u7d20\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6570\u5217\u50a8\u5b58\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u7a7a\u51fa\u6765\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6280\u5de7\uff0c\u56e0\u4e3a\u8fd9\u6837\u4e00\u6765\uff1aindex\u4e3ak\u7684\u8282\u70b9\u7684\u4e24\u4e2a\u5b69\u5b50\u7684\u6570\u7ec4\u7d22\u5f15\u6070\u597d\u5c31\u662f\\(2k,2k+1\\)\uff1b\u540c\u65f6index\u4e3ak\u7684\u8282\u70b9\u7684\u7236\u8282\u70b9\u5c31\u662f\\(k//2\\)\u3002</p> <p></p> <p>\u8fd9\u79cd\u548c2\u4e58\u9664\u5c31\u80fd\u5f97\u5230\u5b69\u5b50\u6216\u8005\u7236\u8282\u70b9\u7684\u65b9\u6cd5\u5728c++\u91cc\u9762\u53ef\u4ee5\u5229\u7528\u4f4d\u8fd0\u7b97\u7b80\u5316\u8ba1\u7b97\uff1a</p> <pre><code>parent = k &gt;&gt; 1;\nleft_child = k &lt;&lt; 1;\nright_child = left_child | 1;\n</code></pre> <p>\u90a3\u4e48\u8fd9\u5c31\u5f15\u4eba\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u7528\u6570\u7ec4\u50a8\u5b58\u4efb\u4f55\u7684\u4e8c\u53c9\u6811\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u4f1a\u6709\u5927\u91cf\u6d6a\u8d39\u7684\u5185\u5b58\u3002\u5982\u679c\u9700\u8981\u4fdd\u6301\u4e4b\u524d\u4e0a\u8ff0\u6240\u8bf4\u7684\u4f18\u5316\uff0cfor instance\uff0c\u4e00\u4e2a12\u4e2a\u8282\u70b9\u7684\u6811\u9700\u898132\u7684\u4f4d\u7f6e\u7528\u6765\u50a8\u5b58\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\uff0c\u9700\u8981\u7684\u5185\u5b58\u5c06\u4f1a\u662f\u6307\u6570\u7ea7\u589e\u957f\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#left-child-right-sibling-binary-tree","title":"Left-child Right-sibling Binary Tree","text":"<p>\u5bf9\u4e8e\u5e38\u89c4\u7684\u6811\u7ed3\u6784\uff0c\u6211\u4eec\u8c8c\u4f3c\u53ea\u80fd\u7528\u94fe\u8868\u6765\u50a8\u5b58\u7ed3\u6784\u3002\u90a3\u4e48\uff1a\u6709\u6ca1\u6709\u53ef\u80fd\u53ef\u4ee5\u628a\u5e38\u89c4\u7684\u6811\u5f53\u505a\u4e8c\u53c9\u6811\u6765\u5b58\u50a8\u5462\uff1f\u5982\u679c\u6211\u4eec\u8003\u8651\u5982\u4e0b\u7684\u50a8\u5b58\u601d\u8def\uff1a</p> <ul> <li>The first child of each node is its left sub-tree</li> <li>The next sibling of each node is in its right sub-tree</li> </ul> <p>\u90a3\u4e48\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f\u5c31\u662f\u4e00\u79cdLeft-Child Right-Sibling\uff08\u5de6\u5b69\u5b50\u53f3\u5144\u5f1f\uff09\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6709\u8282\u70b9\u90fd\u662f\u8fd9\u4e2a\u8282\u70b9\u7684sibling\uff0c\u800c\u5de6\u8282\u70b9\u5b58\u653e\u7684\u5168\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u5b69\u5b50\u8282\u70b9\uff1a</p> <p></p> <p>The transformation of a general tree into a left-child right-sibling binary tree has been called the Knuth transform\u3002\u7279\u522b\u5730\uff1a</p> <ul> <li>A pre-order traversal of the original tree is identical to the pre-order traversal of the Knuth transform</li> <li>A post-order traversal of the original tree is identical to the in-order traversal of the Knuth transform</li> </ul> <p></p> <p></p> <p>\u66f4\u6709\u610f\u601d\u7684\u662f\uff0c\u4e00\u4e2a\u68ee\u6797forest\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u884c\u50a8\u5b58\uff1a</p> <ul> <li>Choose one of the roots of the trees as the root of the binary tree</li> <li>Let each subsequent root of a tree be a right child of the previous root</li> <li>This is the binary-tree representation of this forest</li> <li>Think of the roots as siblings of each other</li> </ul> <p>\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#_40","title":"\u5806","text":"<p>Now we will look at a restriction on an implicit linear ordering.</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#priority-queue","title":"Priority Queue","text":"<p>\u961f\u5217\u9075\u5faaFIFO\uff0cfirst in first out\u7684\u89c4\u5219\u3002\u800c\u5728\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7269\u4f53\u90fd\u5173\u8054\u7740\u4e00\u4e2a\u4f18\u5148\u7ea7\uff1a</p> <ul> <li>\u503c\u4e3a0\u7684\u6709\u7740\u6700\u9ad8\u7684\u4f18\u5148\u7ea7</li> <li>\u5173\u8054\u6570\u5b57\u503c\u8d8a\u9ad8\uff0c\u4f18\u5148\u7ea7\u8d8a\u4f4e</li> </ul> <p>\u800c\u4f18\u5148\u961f\u5217\u7684\u7279\u522b\u652f\u51fa\u5c31\u5728\u4e8e\uff1a\u6bcf\u4e00\u6b21\u5f39\u51fa\u7684\u90fd\u662f\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u3002\u64cd\u4f5c\u4e0a\uff1a</p> <ul> <li>\u4f18\u5148\u961f\u5217\u7684\u5934\u90e8\u662f\u4f18\u5148\u7ea7\u6700\u9ad8\u7684</li> <li>\u5f39\u51fa\u4f1a\u628a\u961f\u5217\u4e2d\u5f53\u524d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u7269\u4f53\u5f39\u51fa</li> <li>\u800c\u5728push\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u6309\u7167\u4f18\u5148\u7ea7\u628aPush\u8fdb\u7684\u5143\u7d20\u653e\u5728\u5408\u9002\u7684\u4f4d\u7f6e</li> </ul> <p>\u6709\u7684\u65f6\u5019\u201c\u4f18\u5148\u7ea7\u201d\u89c4\u5219\u53ef\u4ee5\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u590d\u6742\u4e00\u70b9\u7684\uff0c\u6bd4\u5982\u8bf4\u53d6\u51b3\u4e8e\u591a\u4e2a\u53d8\u91cf\u3002\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e2a\u4f18\u5148\u961f\u5217\u5462\uff1f\u6211\u4eec\u5c06\u5c1d\u8bd5\u4f7f\u7528Multiple queues\u2014\u2014one for each priority\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u6709M\u4e2a\u56fa\u5b9a\u4f18\u5148\u987a\u5e8f\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u6211\u4eec\u64cd\u4f5c\uff1a</p> <ul> <li>\u521b\u5efaM\u4e2a\u961f\u5217(queues)</li> <li>push\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5e94\u653e\u5728\u5bf9\u5e94\u4f18\u5148\u7ea7\u7684\u961f\u5217\u91cc\u9762</li> <li>Top and Pop\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u627e\u5230\u7b2c\u4e00\u4e2anon-empty queue with highest priority</li> </ul> <p>\u8fd9\u79cd\u64cd\u4f5c\u4e0b\u7684\u8fd0\u884c\u65f6\u95f4\u975e\u5e38\u7684\u5408\u7406\uff1apush\u662f\\(\\Theta(1)\\)\uff0cTop and Pop\u90fd\u662f\\(\\Theta(M)\\)\u3002\u4f46\u662f\u4f9d\u7136\u6709\u70b9\u95ee\u9898\uff1a\u5b83\u9650\u5236\u4e86\u4f18\u5148\u7ea7\u7684\u8303\u56f4\uff0c\u800c\u4e14\u5185\u5b58\u6d88\u8017\u662f\\(\\Theta(M+n)\\)\u3002\u6211\u4eec\u53ef\u4ee5\u7528AVL\u6811\u7b80\u5316\u63d2\u5165\u7269\u4f53\u7684\u8fc7\u7a0b\uff0c\u4f46\u8fd9\u4e5f\u53ea\u662f\u540e\u8bdd\u4e86\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u95ee\u9898\u5728\u4e8e\uff1aThere is significant overhead for maintaining both the tree and the corresponding balance\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u975e\u5e38\u597d\u7684\u89e3\u51b3\u8fd9\u4e00\u65b9\u6cd5\u7684\u6570\u636e\u7ed3\u6784\u5462\uff1f\u5806\u5e94\u8fd0\u800c\u751f\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#heap","title":"Heap","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#basic-operation","title":"Basic Operation","text":"<p>Definition: A non-empty tree is a min-heap if\uff1a</p> <ul> <li> <p>The key associated with the root is less than or equal to the keys associated with the sub-trees (if any)</p> </li> <li> <p>The sub-trees (if any) are also min-heaps</p> </li> </ul> <p>Tip: \u7531\u4e0a\u8ff0\u5b9a\u4e49\u53ef\u77e5\uff1a\u5982\u679c\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u662f\u9012\u51cf\u5e8f\u5217\uff0c\u90a3\u4e48\u8fd9\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u5c31\u662fmin-heap\uff1b\u4f46\u662f\u53cd\u4e4b\u4e0d\u7136\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u662fmin-heap\uff0c\u5b83\u7684\u540e\u5e8f\u904d\u5386\u4e0d\u4e00\u5b9a\u662f\u9012\u51cf\u5e8f\u5217\u3002</p> <p>\u53ef\u89c1\u4e0a\u8ff0\u662f\u4e00\u4e2aRecursive Definition\u3002\u540c\u65f6\u518d\u6b21\u5f3a\u8c03subtree\u7684\u6982\u5ff5\uff1aGiven any node \\(a\\) within a tree, the collection of \\(a\\) and all of its descendants is said to be a subtree of the tree with root \\(a\\).</p> <p>\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49binary min heap\uff0c\u5c31\u662fmin heap\u7684\u57fa\u7840\u4e0a\u89c4\u5b9a\u7236\u8282\u70b9\u53ea\u80fd\u6709\u81f3\u591a\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u7c7b\u4f3c\u5730\u5b9a\u4e49Binary max-heap\uff1aA binary max-heap is identical to a binary min-heap except that the parent is always larger than either of the children\u3002</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u4e0a\u8ff0\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff1aThere is no other relationship between the elements in the subtrees!\u800c\u4e14Heap\u672c\u8d28\u4e0a\u662f\u6811\uff0c\u6811\u7684\u79cd\u7c7b\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u5176\u4e2d\u6700\u7ecf\u5178\u7684\u5c31\u662f\u4e8c\u53c9\u6811\u3002\u56e0\u6b64\u6b64\u5904\uff0c\u6700\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\u662f\u4e8c\u53c9\u5806\u3002</p> <p>\u4e0b\u56fe\u662f\u4e00\u4e2a\u7ecf\u5178\u7684(naive) binary min-heap\uff1a\u4e0d\u96be\u53d1\u73b0\uff0c\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u4e00\u76f4\u5230\u53f6\u8282\u70b9\u4e0a\u7684priority\u90fd\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u5b83\u7684ancestor\u4e00\u5b9a\u90fd\u6bd4\u5b83\u5927\u3002</p> <p></p> <p>\u63a5\u4e0b\u6765\u5c31\u8003\u8651\u4e09\u79cd\u64cd\u4f5c\uff1aTop Pop and Push</p> <p>\u5173\u4e8etop\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\\(\\Theta(1)\\)\u7684\u65f6\u95f4\u5c31\u80fd\u627e\u5230top\u5143\u7d20\u4e86\uff08\u56e0\u4e3a\u5c31\u662f\u6839\u8282\u70b9\uff09\u3002\u800c\u5173\u4e8epop\u64cd\u4f5c\uff0c\u6211\u4eec\u9996\u5148\u8981\u660e\u786e\u601d\u8def\uff1a\uff08\u6ce8\u610f\uff01\u8fd9\u91cc\u7684pop\u64cd\u4f5c\u8fd8\u4e0d\u6d89\u53ca\u5230\u4fdd\u6301\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff01\uff09</p> <ul> <li>Promote the node of the sub-tree which has the least value</li> <li>Recursively process the sub-tree from which we promoted the least value</li> </ul> <p>\u56e0\u4e3a\u6839\u8282\u70b9\u7684\u5143\u7d20pop\u6389\u4e86\uff0c\u90a3\u4e48\u5b83\u6709\u4e24\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u3002\u8c01\u7684\u6839\u8282\u70b9\u66f4\u5c0f\uff0c\u8c01\u4e0a\u4f4d\uff1b\u4f46\u662f\u540c\u65f6\u5b50\u6811\u6839\u8282\u70b9\u4e0a\u4f4d\u7684\u540c\u65f6\uff0c\u4e5f\u4f1a\u7559\u4e0b\u7a7a\u4f4d\uff0c\u56e0\u6b64\u76f8\u5f53\u4e8e\u662f\u5bf9\u4e8e\u8fd9\u4e2a\u6839\u8282\u70b9\u4e0a\u4e86\u4f4d\u7684\u5b50\u6811\u6765\u8bf4\uff0c\u53d1\u751f\u4e86pop\u64cd\u4f5c\uff0c\u56e0\u6b64\u9700\u8981recursive operation\u3002\u5f53\u7136\uff0c\u4e00\u76f4\u5904\u7406\u5230\u5b50\u6811\u662f\u4e00\u4e2a\u53f6\u8282\u70b9\u7684\u65f6\u5019\uff0c\u53f6\u8282\u70b9\u7684\u5143\u7d20\u4e0a\u4f4d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53f6\u8282\u70b9\u968f\u540e\u4e5f\u4f1a\u88ab\u5220\u9664\u3002</p> <p>\u90a3\u4e48\u5173\u4e8ePush\uff0c\u5c06\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u4e8c\u53c9\u5806\uff0c\u4e00\u822c\u6765\u8bf4\u6709\u4e24\u79cd\u65b9\u5f0f\uff1aAt a leaf or At the root\u3002\u5728\u6b64\u5904\u6211\u4eec\u4ecb\u7ecdAt a leaf\u65b9\u5f0f\uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u6765\u8bf4\uff0c\u5176\u4ed6\u90e8\u5206\u79cd\u7c7b\u7684\u5806\u4f1a\u4f7f\u7528\u5b83\u3002\u5728At a leaf\u64cd\u4f5c\u4e2d\uff0c\u53ea\u9700\u8981\u968f\u4fbf\u9009\u62e9\u4e00\u4e2a\u4efb\u610f\u7684\u8282\u70b9\u63d2\u5165\u8be5\u5143\u7d20\u7684\u65b0\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u7136\u540e\u8be5\u53f6\u5b50\u7ed3\u70b9\u548c\u5b83\u7684\u7236\u8282\u70b9\u8fdb\u884c\u6bd4\u8f83\uff1b\u5982\u679c\u5c0f\u4e8e\u5b83\uff0c\u5c31\u548c\u8fd9\u4e2a\u7236\u8282\u70b9\u5143\u7d20\u4e92\u6362\u4f4d\u7f6e\u3002\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\u4e00\u76f4\u5230\u5143\u7d20\u8282\u70b9\u65e0\u6cd5\u548c\u7236\u8282\u70b9\u4ea4\u6362\u4f4d\u7f6e\u3002\u4e0a\u8ff0\u8fc7\u7a0b\u79f0\u4e3apercolation\uff0c\u4e5f\u5c31\u662f\u8bf4\u8d8a\u5c0f\u7684\u7269\u4f53\u8d8a\u80fd\u4ece\u5e95\u90e8\u5411\u4e0a\u79fb\u52a8\u3002</p> <p>\u56e0\u6b64pop push\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)(\u6ce8\u610f\u8fd9\u4e0d\u662f\u4e8c\u53c9\u5806\u7684\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff01\u800c\u662f\u968f\u610f\u4e00\u4e2amin-heap\uff01)\uff0c\u800c\u5728\u4e8c\u53c9\u6811\u9ad8\u5ea6\u4e0d\u5e73\u8861\u7684\u65f6\u5019\uff0c\u4f1a\u8fbe\u5230worst case\u3002</p> <p>\u800c\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86balance\u7684\u6982\u5ff5\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u51b3\u5b9apush\u64cd\u4f5c\u4e00\u5f00\u59cb\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4fdd\u6301\u826f\u597d\u7684balance\u5462\uff1f\u6b64\u5904\u6211\u4eec\u4ecb\u7ecd\u5b8c\u5168\u4e8c\u53c9\u6811\u65b9\u5f0f\u2014\u2014It has optimal memory characteristics but sub-optimal run-time characteristics\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u8fd8\u652f\u6301array implementation\u3002</p> <p>:warning: Complete binary trees defines the actual \u201cbinary heap\u201d</p> <p>\u5982\u4f55\u64cd\u4f5c\u5462\uff1f\u5982\u4f55maintain the complete-tree shape of a heap\uff1fWe may store a complete tree using an array, and this array is filled using breadth-first traversal on the tree\u3002\u90a3\u4e48\u5728push pop\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u8003\u8651\u4fdd\u6301\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff01</p> <p>\u5728push\u7684\u65f6\u5019\uff0c\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u6700\u540e\u4e00\u5c42\u7d27\u63a5\u7740\u63d2\u5165\u53f6\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u7ecf\u8fc7percolation\u5373\u53ef\u3002</p> <p>:warning: \u4f46\u662f\u5728pop\u7684\u65f6\u5019\uff0c\u9700\u8981\u628a\u6700\u540e\u4e00\u5c42\u7684\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff08i.e., array\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff09copy\u5230\u6839\u8282\u70b9\uff0c\u5e76\u4e14\u5220\u9664\u8fd9\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u8fd9\u4e2a\u5143\u7d20\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u4e0b\u6c89\uff1a\u4e0b\u6c89\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5982\u679c\u5b83\u4eec\u90fd\u5c0f\u4e8e\u81ea\u5df1\uff0c\u5219\u548c\u76f8\u5bf9\u66f4\u5c0f\u7684\u5b50\u8282\u70b9\u4ea4\u6362\uff1b\u5982\u679c\u5b83\u4eec\u4e00\u4e2a\u5927\u4e8e\u81ea\u5df1\u4e00\u4e2a\u5c0f\u4e8e\u81ea\u5df1\uff0c\u90a3\u4e48\u548c\u5c0f\u4e8e\u81ea\u5df1\u7684\u8282\u70b9\u5143\u7d20\u4ea4\u6362\uff1b\u5982\u679c\u4e24\u4e2a\u5b50\u8282\u70b9\u5143\u7d20\u90fd\u6bd4\u81ea\u5df1\u5927\uff0c\u90a3\u4e48\u5c31\u505c\u6b62\u4e0b\u6c89\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#analysis","title":"Analysis","text":"<p>\u901a\u8fc7\u4ee5\u4e0a\u7684\u64cd\u4f5c\u89c4\u5219\uff0c\u6211\u4eec\u603b\u662f\u80fd\u4fdd\u6301\u4e8c\u53c9\u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u5bf9\u4e8e\u8fd9\u79cd\u64cd\u4f5c\u6765\u8bf4\uff0ctop\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(1\\))\uff0cPop\u64cd\u4f5c\u662f\\(O(ln(n))\\)\uff0c\u800cpush\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(ln(n))\\)\uff0c\u800c\u4e14\u975e\u5e38\u597d\u7684\u662f\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\\(O(n)\\)\u3002\u6240\u4ee5\u8bf4\u4e8c\u53c9\u5806\u662f\u4e00\u4e2a\u76f8\u6bd4\u4e8e\u4f18\u5148\u961f\u5217\u6765\u8bf4\u66f4\u597d\u7684\u5b9e\u73b0\u3002</p> <p>\u6ce8\u610f\uff0c\u4e0a\u8ff0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u63cf\u8ff0\u5168\u90e8\u90fd\u662fO\uff0c\u800c\u4e0d\u662f\\(\\Theta\\)\uff0c\u4e8b\u5b9e\u4e0a\u9a6c\u4e0a\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u66f4\u4e3a\u5177\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790</p> <p>More specifically, if we are inserting an object less than the root (at the front), then the run time will be \\(O(ln(n))\\); if we insert at the back (greater than any object) then the run time will be \\(O(1)\\).</p> <p>\u5173\u4e8epush\u64cd\u4f5c\uff0c\u5982\u679c\u6211\u4eec\u63d2\u5165\u4efb\u610f\u5143\u7d20\u5462\uff1f\u90a3\u4e48\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f</p> <p>With each percolation, it will move an object past half of the remaining entries in the tree. Therefore, after one percolation, it will probably be past half of the entries, and therefore on average will require no more percolations. \u5219\u5e73\u5747\u65f6\u95f4\u65f6\u95f4\u590d\u6742\u5ea6\u5982\u4e0b\uff1a  \u6240\u4ee5\u6211\u4eec\u77e5\u9053\u4e86\u6e17\u900f\u64cd\u4f5c\u7684\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u662fO(1)\uff0c\u5373arbitrary insert\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(1)\\)\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u5c06\u5206\u6790push\uff0cinsert\uff0caccess\uff08top\u662f\u7279\u6b8a\u7684access\uff09\u7684\u5143\u7d20\u4e0d\u540c\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1afront\uff08\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6240\u6709\u4e8c\u53c9\u5806\u4e2d\u7684\u5143\u7d20\u3001\u6216\u8005\u8bbf\u95ee\u4e8c\u53c9\u5806\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5143\u7d20\uff09\u3001arbitrary\uff08\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff09\u3001back\uff08\u4f18\u5148\u7ea7\u4f4e\u4e8e\u4e8c\u53c9\u5806\u4e2d\u6240\u6709\u5143\u7d20\u3001\u6216\u8005\u8bbf\u95ee\u4e8c\u53c9\u5806\u4e2d\u4f18\u5148\u7ea7\u6700\u4f4e\u7684\u5143\u7d20\uff09</p> <p>Push\uff0ci.e.\uff0cInsert</p> <p>\u5982\u679c\u8981\u63d2\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4e8c\u53c9\u5806\u4e2d\u6240\u6709\u5143\u7d20\u7684\u5143\u7d20\uff0ci.e.\uff0cfront\uff0c\u90a3\u4e48\u9700\u8981\u628a\u8fd9\u4e2a\u5143\u7d20\u653e\u5728root\uff0c\u7136\u540e\u540e\u9762\u8fdb\u884cpercolation\u3002\u7531\u4e8e\u6df1\u5ea6\u662f\\(\\Theta(log_2n)\\)\uff0c\u800c\u4e14\u4e00\u5b9a\u4f1a\u6240\u6709height\u90fd\u8fdb\u884c\u4e00\u6b21\u6362\u4f4d\u7f6e\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(ln(n))\\)\u3002\u800c\u5982\u679c\u662f\u63d2\u5165\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5e73\u5747\u4e00\u6b21\u7684percolation\u5982\u4e0a\u6587\u6240\u63a8\u5bfc\u7684\u90a3\u6837\uff0c\u662f\\(\\Theta(1)\\)\u3002\u90a3\u4e48\u5982\u679c\u662f\u63d2\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u5c0f\u4e8e\u4e8c\u53c9\u5806\u4e2d\u6240\u6709\u5143\u7d20\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u76f4\u63a5\u63d2\u5165array\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u5373\u53ef\u3002</p> <p>Access</p> <p>\u5982\u679c\u8981\u8bbf\u95ee\u4e8c\u53c9\u5806\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u8bbf\u95eetop\u5373\u53ef\uff1b\u800c\u5982\u679c\u662f\u4efb\u610f\u7684\u5143\u7d20\u6216\u8005\u662f\u4f18\u5148\u7ea7\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u90fd\u9700\u8981\u904d\u5386array\u624d\u80fd\u77e5\u9053\uff0c\u6240\u4ee5\u8bf4\u662f\\(\\Theta(n)\\)</p> <p>Delete</p> <p>\u5982\u679c\u662f\u8981\u5220\u9664\u4e8c\u53c9\u5806\u4e2d\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u4e0b\u9762\u4e00\u5b9a\u8981\u6709\u5143\u7d20\u4e0a\u4f4d\uff0c\u800c\u4e14\u4e0a\u4f4d\u7684\u6b21\u6570\u4e00\u5b9a\u662f\u4e8c\u53c9\u5806\u7684\u9ad8\u5ea6\uff0c\u6240\u4ee5\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(ln(n))\\)\uff1b\u5982\u679c\u662f\u5220\u9664\u4efb\u610f\u7684\u4e00\u4e2a\u3001\u6216\u8005\u662f\u4f18\u5148\u7ea7\u6700\u4f4e\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u8fd8\u662f\u9700\u8981\\(\\Theta(n)\\)\u904d\u5386\uff0c\u7136\u540epercolation\uff0c\u603b\u4f53\u4e0a\u6765\u8bf4\u662f\\(\\Theta(n)\\)\u3002</p> <p>\u56e0\u6b64\u4e0a\u8ff0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u603b\u8ba1\u5982\u4e0b\u56fe:\uff08\u91cd\u8981\uff01\uff09</p> <p></p> <p>\u540c\u65f6\u6211\u4eec\u4e5f\u53ef\u4ee5\u6709\u4ee5\u4e0b\u7684\u89c2\u5bdf\uff1b</p> <ul> <li>\u8fde\u7eed\u5728\u5806\u7684\u524d\u9762\u63d2\u5165\uff08\u5373\u65b0\u5bf9\u8c61\u6bd4\u5806\u4e2d\u6240\u6709\u5bf9\u8c61\u90fd\u5c0f\uff09\u5bfc\u81f4\u8fd0\u884c\u65f6\u95f4\u964d\u4f4e\u5230\\(\\Theta(ln(n))\\)</li> <li>\u5982\u679c\u5bf9\u8c61\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5230\u6765\uff0c\u4f7f\u7528\u5e26\u6709\u4ea4\u6362\u7684\u5e38\u89c4\u961f\u5217\u3002\u5982\u679c\u5143\u7d20\u662f\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\u6216\u4ece\u5927\u5230\u5c0f\uff09\u5230\u8fbe\u7684\uff0c\u90a3\u4e48\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c4\u7684\u961f\u5217\uff08\u5982\u6570\u7ec4\u5b9e\u73b0\u7684\u961f\u5217\uff09\u5e76\u7ed3\u5408\u4ea4\u6362\u64cd\u4f5c\u53ef\u80fd\u6bd4\u4f7f\u7528\u4e8c\u53c9\u5806\u66f4\u9ad8\u6548\u3002\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e8c\u53c9\u5806\u7684\u4f18\u52bf\uff08\u5feb\u901f\u63d2\u5165\u548c\u5220\u9664\u6700\u5927/\u6700\u5c0f\u5143\u7d20\uff09\u5e76\u4e0d\u660e\u663e\uff0c\u800c\u5e38\u89c4\u961f\u5217\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u90fd\u662f O(1) \u7684\uff0c\u53ea\u662f\u5728\u9700\u8981\u627e\u5230\u7279\u5b9a\u4f18\u5148\u7ea7\u7684\u5143\u7d20\u65f6\u53ef\u80fd\u9700\u8981\u904d\u5386\u961f\u5217\uff0c\u8fd9\u5728\u5143\u7d20\u987a\u5e8f\u5230\u6765\u7684\u60c5\u51b5\u4e0b\u662f\u4e0d\u5fc5\u8981\u7684\u3002</li> <li>\u5408\u5e76\u4e24\u4e2a\u5927\u5c0f\u4e3a n \u7684\u4e8c\u53c9\u5806\u662f\u4e00\u4e2a $\u0398(n) $\u64cd\u4f5c\uff1a</li> </ul> <p>\u5f53\u7136\uff0c\u4e0d\u540c\u7684heap\u7ed3\u6784\u53ef\u80fd\u4f1a\u5728\u67d0\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u7684\u4e0a\u8fdb\u884c\u4f18\u5316\uff0c\u4f8b\u5982\u7528\u6590\u6ce2\u90a3\u5951\u5806\uff0c\u90a3\u4e48\u63d2\u5165front\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u964d\u5230\\(\\Theta(1)\\)\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#build-heap-floyds-method","title":"Build Heap &amp; Floyd's Method","text":"<p>Task: Given a set of n keys, build a heap all at once\u3002</p> <p>\u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u7684\u91cd\u590d\u4e8c\u53c9\u5806\u7684push\u64cd\u4f5c\uff0c\u90a3\u4e48\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(nln(n))\\)\u3002\u53ef\u80fd\u4f1a\u6709\u6240\u56f0\u60d1: arbitrary insertion\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u96be\u9053\u4e0d\u662fO\uff081\uff09\u4e48\uff1f\u90a3\u4e48\u89e3\u91ca\u5982\u4e0b\uff1a</p> <p>Reference:kimi.moonshot.cn</p> <p></p> <p>\u6709\u6ca1\u6709\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f4e\u7684\u6784\u5efa\u65b9\u5f0f\u5462\uff1f\u4e0b\u9762\u4ecb\u7ecd\u6700\u5e38\u89c1\u7684\u4f18\u5316\u65b9\u5f0f\uff1aFloyd's Method</p> <p>\u6211\u4eec\u53ef\u4ee5\u62ff\u8fd9\u4e2aarray\u8fc7\u6765\u6784\u5efa\u4e8c\u53c9\u6811\uff0c\u7136\u540e\u5408\u7406\u5730\u4fee\u6539\u6210\u4e3a\u4e8c\u53c9\u5806\uff01\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p>\u76f8\u5f53\u4e8e\u662f\u4ece\u5c0fsub tree\u5f00\u59cb\u4e0d\u65ad\u8c03\u6574sub tree\u7684\u6839\u8282\u70b9\uff0c\u6839\u8282\u70b9\u5728\u8fd9\u9897\u5b50\u6811\u5185\u7684\u8c03\u6574\u89c4\u5219\u5982\u5148\u524d\u6240\u4ecb\u7ecd\u7684\u90a3\u6837\u3002\u7136\u540esub tree\u4e0d\u65ad\u53d8\u5927\uff0c\u77e5\u9053\u53d8\u6210\u4e86\u6574\u68f5\u6811\u3002\u6240\u4ee5\u5982\u56fe\u7247\u4e2d\u4ecb\u7ecd\u7684\u4ee3\u7801\u90a3\u6837\uff0c\u53ea\u7528\u5bf9\u524d\u4e00\u534a\u5f15\u7d22\u7684\u8282\u70b9\u8fdb\u884c\u5224\u65ad\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u4e9b\u8282\u70b9\u624d\u53ef\u80fd\u662f\u4e00\u9897\u5b50\u6811\u7684\u6839\u8282\u70b9\uff08\u8fd9\u5145\u5206\u5229\u7528\u4e86\u4e8c\u53c9\u6811\u7684\u7d22\u5f15\u6027\u8d28\uff1b\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e8c\u53c9\u5806\u7684array[0]\u4f9d\u7136\u662f\u7a7a\u51fa\u6765\u7684\uff0c\u4e3a\u7684\u5c31\u662f\u65b9\u4fbf\u8bbf\u95ee\u5b50\u8282\u70b9\u7684\u7d22\u5f15\uff09</p> <p>\u90a3\u4e48\u8fd9\u79cd\u64cd\u4f5c\u65b9\u5f0f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u5206\u6790\u5982\u4e0b\u56fe\uff1a </p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#heap-sort","title":"Heap sort","text":"<p>\u6709\u4e86\u4e0a\u8ff0\u6784\u5efaheap\u7684\u57fa\u7840\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u77e5\u9053\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2aarray\u6765\u8bf4\uff0c\u6784\u5efaheap\u53ea\u9700\u8981\\(\\Theta(n)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\u4e0d\u65ad\u5f39\u51fatop\u5143\u7d20\uff0c\u90a3\u4e48\u6700\u540e\u603b\u5171\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(nln(n))\\)\u3002\u8fd9\u542c\u8d77\u6765\u597d\u6781\u4e86\uff01\u4f46\u662f\u6709\u4e00\u4e2a\u5c0f\u7591\u95ee\uff1a\u8fd9\u4e2asolution\u9700\u8981\u989d\u5916\u7684\u5185\u5b58\\(\\Theta(n)\\)\uff0c\u90a3\u4e48\u5982\u679c\u5bf9\u4e8e\u8fd9\u4e2a\u6570\u7ec4\u6765\u8bf4\uff0c\u5b83\u4eec\u5df2\u7ecf\u5b58\u5728\u4e86array\u91cc\u9762\uff0c\u6211\u80fd\u4e0d\u80fd\u5c31\u5730\u64cd\u4f5c\u5462\uff1f</p> <p>\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u7684\u601d\u8def\u53ea\u9700\u8981\u6539\u53d8\u4e00\u4e0b\uff1aInstead of implementing a min-heap, consider a max-heap\uff0c\u8fd9\u6837\u6700\u5927\u7684\u5143\u7d20\u5c31\u662ftop\uff0c\u7136\u540etop\u51fa\u6765\u7684\u5143\u7d20\u5c31\u653e\u5728array\u4e2d\u7531\u4e8epop\u800c\u4ea7\u751f\u7684\u6700\u540e\u9762\u7684\u7a7a\u4f4d\u91cc\u9762\u3002</p> <p>\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u63a5\u4e0b\u6765\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e0b\u56fe\u4e2d\u4e3e\u4f8b\u7684\u662f\u6700\u540e\u4e00\u6b65\uff1a\u6811\u7684\u6839\u8282\u70b9\u5143\u7d20\u7684\u53d8\u5316\u3002</p> <p></p> <p>\u6700\u7ec8\u6211\u4eec\u5f97\u5230\u4e86max heap\uff1a</p> <p></p> <p>\u90a3\u4e48\u6309\u7167\u4e4b\u524d\u7684\u601d\u8def\u5c31\u80fd\u5f97\u5230\u6700\u7ec8\u7684sorted array\u4e86\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u5176\u5b9e\u662f\u5728\u5c31\u5730\u64cd\u4f5c\uff0c\u6240\u4ee5\u8bf4array\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u53730\u53f7\u7d22\u5f15\uff0c\u65e0\u6cd5\u7a7a\u51fa\u6765\uff0c\u6240\u4ee5\u8bf4\u5bf9\u4e8e\u7d22\u5f15\u4e3ai\u7684\u8282\u70b9\u6765\u8bf4\uff0c\u8bbf\u95ee\u7236\u8282\u70b9\u548c\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u903b\u8f91\u662f\u9700\u8981\u505a\u51fa\u7565\u5fae\u7684\u4fee\u6539\u7684\uff1a</p> <pre><code>int father = (i-1)/2;\nint left = 2*i + 1;\nint right = 2*i + 2;\n</code></pre> <p>\u6700\u540e\uff0c\u8fd8\u6709\u4e00\u4e2a\u5c0f\u7591\u95ee\uff1a\u5982\u679carray\u4e2d\u6709\u76f8\u540c\u7684\u5143\u7d20\u600e\u4e48\u529e\uff1f\u90a3\u4e48\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u91c7\u7528\u6df7\u5408\u4f18\u5148\u7ea7\uff1aHybrid Priority\u3002\u4f8b\u5982\\((n1, k1) &lt; (n2, k2)\\) if \\(n1 &lt; n2\\) or \\((n1 = n2\\) and \\(k1 &lt; k2)\\)\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5173\u4e8e\u76f8\u540c\u5143\u7d20\u5185\u90e8\u7684\u6b21\u4f18\u5148\u7ea7\u95ee\u9898\u5c31\u80fd\u8fce\u5203\u800c\u89e3\u4e86\u3002</p> <p>\u91cd\u8981\uff01\u5806\u6392\u5e8f\u7684\u6700\u597d\u60c5\u51b5\u548c\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(\\Theta(logn)\\)\uff0c\u800c\u4e14\u5806\u6392\u5e8f\u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\u7b97\u6cd5\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#applicationhuffman-coding","title":"Application\u2014\u2014Huffman Coding","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#in-a-nut-shell_1","title":"In a nut shell","text":"<p>Huffman Coding\uff08\u970d\u592b\u66fc\u7f16\u7801\uff09\u662f\u4e00\u79cd\u5e38\u7528\u4e8e\u6570\u636e\u538b\u7f29\u7684\u7b97\u6cd5\uff0c\u7531David A. Huffman\u4e8e1952\u5e74\u63d0\u51fa\u3002\u5b83\u662f\u4e00\u79cd\u65e0\u635f\u538b\u7f29\u6280\u672f\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u7f16\u7801\u6570\u636e\uff0c\u4f7f\u5f97\u5e38\u7528\u7684\u6570\u636e\uff08\u6bd4\u5982\u5b57\u6bcd\u3001\u5b57\u7b26\uff09\u5360\u7528\u8f83\u5c11\u7684\u6bd4\u7279\u4f4d\uff0c\u4ece\u800c\u51cf\u5c11\u603b\u4f53\u5b58\u50a8\u6216\u4f20\u8f93\u7684\u6570\u636e\u91cf\u3002\u970d\u592b\u66fc\u7f16\u7801\u5728\u6587\u4ef6\u538b\u7f29\u3001\u4f20\u8f93\u7b49\u9886\u57df\u5e94\u7528\u5e7f\u6cdb\uff0c\u5c24\u5176\u662f\u56fe\u50cf\u538b\u7f29\uff08\u5982JPEG\uff09\u548c\u6587\u672c\u538b\u7f29\u3002</p> <p>\u970d\u592b\u66fc\u7f16\u7801\u7684\u6838\u5fc3\u601d\u60f3</p> <p>\u970d\u592b\u66fc\u7f16\u7801\u7684\u4e3b\u8981\u76ee\u6807\u662f\u4f7f\u7528\u66f4\u77ed\u7684\u7f16\u7801\u8868\u793a\u9ad8\u9891\u51fa\u73b0\u7684\u6570\u636e\uff0c\u800c\u4f4e\u9891\u6570\u636e\u5219\u7528\u8f83\u957f\u7684\u7f16\u7801\u8868\u793a\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u538b\u7f29\uff0c\u56e0\u4e3a\u603b\u7f16\u7801\u957f\u5ea6\u88ab\u5927\u5927\u51cf\u5c11\u3002</p> <p>\u970d\u592b\u66fc\u7f16\u7801\u7684\u7279\u70b9</p> <ol> <li>\u524d\u7f00\u7f16\u7801\uff1a\u970d\u592b\u66fc\u7f16\u7801\u662f\u4e00\u79cd\u524d\u7f00\u7f16\u7801\uff08Prefix Code\uff09\uff0c\u5373\u4e0d\u4f1a\u51fa\u73b0\u67d0\u4e2a\u7f16\u7801\u662f\u53e6\u4e00\u4e2a\u7f16\u7801\u7684\u524d\u7f00\uff0c\u786e\u4fdd\u89e3\u7801\u8fc7\u7a0b\u552f\u4e00\u3002</li> <li>\u81ea\u9002\u5e94\u6027\uff1a\u970d\u592b\u66fc\u7f16\u7801\u6839\u636e\u6570\u636e\u7684\u9891\u7387\u6765\u751f\u6210\u7f16\u7801\uff0c\u56e0\u6b64\u4e0d\u540c\u7684\u6570\u636e\u96c6\u4f1a\u751f\u6210\u4e0d\u540c\u7684\u7f16\u7801\u6811\uff0c\u9002\u5e94\u6027\u5f88\u5f3a\u3002</li> <li>\u4e8c\u8fdb\u5236\u6811\u7ed3\u6784\uff1a\u970d\u592b\u66fc\u7f16\u7801\u901a\u8fc7\u6784\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811\u6765\u5b9e\u73b0\u7f16\u7801\u3002\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u53f6\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u6570\u636e\u6216\u5b57\u7b26\uff0c\u8def\u5f84\u4e0a\u7684\"0\"\u548c\"1\"\u6784\u6210\u4e86\u7f16\u7801\u3002</li> </ol> <p>\u970d\u592b\u66fc\u7f16\u7801\u7684\u6b65\u9aa4</p> <ol> <li>\u7edf\u8ba1\u5b57\u7b26\u9891\u7387\uff1a\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff08\u5982\u6587\u672c\u6587\u4ef6\uff09\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9891\u7387\u3002</li> <li>\u6784\u5efa\u970d\u592b\u66fc\u6811\uff1a</li> <li>\u5c06\u6bcf\u4e2a\u5b57\u7b26\u53ca\u5176\u9891\u7387\u4f5c\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u6709\u8282\u70b9\u7ec4\u6210\u4e00\u4e2a\u6700\u5c0f\u4f18\u5148\u961f\u5217\uff08\u9891\u7387\u8d8a\u4f4e\u7684\u8282\u70b9\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff09\u3002</li> <li>\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u4e24\u4e2a\u6700\u5c0f\u9891\u7387\u7684\u8282\u70b9\uff0c\u4f5c\u4e3a\u5b50\u8282\u70b9\u751f\u6210\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u5176\u9891\u7387\u4e3a\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u9891\u7387\u4e4b\u548c\u3002</li> <li>\u5c06\u65b0\u8282\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\uff0c\u91cd\u590d\u8be5\u6b65\u9aa4\uff0c\u76f4\u5230\u961f\u5217\u4e2d\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u970d\u592b\u66fc\u6811\u7684\u6839\u8282\u70b9\u3002</li> <li>\u751f\u6210\u7f16\u7801\u8868\uff1a\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u6cbf\u7740\u6bcf\u6761\u8def\u5f84\u751f\u6210\u7f16\u7801\u3002\u901a\u5e38\u7ea6\u5b9a\u5de6\u8fb9\u7684\u5206\u652f\u4e3a<code>0</code>\uff0c\u53f3\u8fb9\u7684\u5206\u652f\u4e3a<code>1</code>\u3002\u904d\u5386\u6811\u7684\u6bcf\u4e2a\u53f6\u8282\u70b9\uff0c\u8bb0\u5f55\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7684\u8def\u5f84\uff0c\u5373\u4e3a\u8be5\u5b57\u7b26\u7684\u7f16\u7801\u3002</li> <li>\u7f16\u7801\u6570\u636e\uff1a\u6839\u636e\u7f16\u7801\u8868\u5c06\u539f\u59cb\u6570\u636e\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u66ff\u6362\u4e3a\u5bf9\u5e94\u7684\u970d\u592b\u66fc\u7f16\u7801\u3002</li> <li>\u89e3\u7801\u6570\u636e\uff1a\u901a\u8fc7\u970d\u592b\u66fc\u6811\u6765\u89e3\u7801\u3002\u89e3\u7801\u65f6\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u8bfb\u53d6\u7f16\u7801\u4e32\u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u662f<code>0</code>\u5219\u8fdb\u5165\u5de6\u5b50\u8282\u70b9\uff0c<code>1</code>\u5219\u8fdb\u5165\u53f3\u5b50\u8282\u70b9\uff0c\u76f4\u5230\u5230\u8fbe\u53f6\u8282\u70b9\uff0c\u5f97\u5230\u76f8\u5e94\u5b57\u7b26\u3002</li> </ol> <p>\u793a\u4f8b</p> <p>\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u5b57\u7b26\u53ca\u5176\u51fa\u73b0\u9891\u7387\uff1a</p> \u5b57\u7b26 \u9891\u7387 A 5 B 9 C 12 D 13 E 16 F 45 <p>\u6309\u7167\u4e0a\u8ff0\u6784\u5efa\u970d\u592b\u66fc\u6811\u7684\u6b65\u9aa4\uff0c\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u5982\u4e0b\u7f16\u7801\uff1a</p> <ul> <li>F: 0</li> <li>C: 100</li> <li>D: 101</li> <li>A: 1100</li> <li>B: 1101</li> <li>E: 111</li> </ul> <p>\u901a\u8fc7\u8fd9\u6837\u7684\u7f16\u7801\uff0c\u5b57\u7b26<code>F</code>\u53ea\u75281\u6bd4\u7279\uff0c\u800c\u9891\u7387\u8f83\u4f4e\u7684\u5b57\u7b26<code>A</code>\u548c<code>B</code>\u5219\u7528\u8f83\u957f\u7684\u7f16\u7801\uff0c\u4f7f\u5f97\u6574\u4f53\u6570\u636e\u91cf\u964d\u4f4e\u3002</p> <p>\u4f18\u7f3a\u70b9</p> <p>\u4f18\u70b9\uff1a</p> <ul> <li>\u65e0\u635f\u538b\u7f29\uff0c\u9002\u5408\u9700\u8981\u7cbe\u786e\u8fd8\u539f\u7684\u6570\u636e\u3002</li> <li>\u80fd\u9002\u5e94\u4e0d\u540c\u7684\u6570\u636e\u96c6\uff0c\u7075\u6d3b\u6027\u9ad8\u3002</li> </ul> <p>\u7f3a\u70b9\uff1a</p> <ul> <li>\u9700\u8981\u4e8b\u5148\u7edf\u8ba1\u5b57\u7b26\u9891\u7387\uff0c\u9002\u5408\u9759\u6001\u6570\u636e\uff0c\u5bf9\u4e8e\u52a8\u6001\u6570\u636e\u5219\u4e0d\u592a\u5408\u9002\u3002</li> <li>\u6bcf\u6b21\u6784\u5efa\u6811\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u548c\u8ba1\u7b97\uff0c\u590d\u6742\u5ea6\u8f83\u9ad8\u3002</li> </ul> <p>\u970d\u592b\u66fc\u7f16\u7801\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u8d2a\u5fc3\u7b97\u6cd5\u7684\u5e94\u7528\uff0c\u5b83\u5728\u6570\u636e\u538b\u7f29\u3001\u6587\u4ef6\u4f20\u8f93\u7b49\u573a\u666f\u4e0b\u975e\u5e38\u6709\u6548\uff0c\u662f\u6570\u636e\u538b\u7f29\u6280\u672f\u4e2d\u7684\u57fa\u7840\u7b97\u6cd5\u4e4b\u4e00\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#elaboration_1","title":"Elaboration","text":"<p>\u5728in a nut shell\u4e2d\u4ecb\u7ecd\u5230\uff0c\u970d\u592b\u66fc\u7f16\u7801\u662f\u7528\u6765\u538b\u7f29\u6570\u636e\u7684\u3002\u90a3\u4e48\u9996\u5148\u6211\u4eec\u5c31\u8981\u5b9a\u4e49\u4ec0\u4e48\u662f\u538b\u7f29\uff1a\u538b\u7f29\u5c31\u662freduce the size of data, more specifically, the number of bits needed to represent data\u3002\u538b\u7f29\u597d\u5904\u591a\u591a\uff0c\u80fd\u591f\u51cf\u5c11\u5185\u5b58\uff0c\u80fd\u591f\u51cf\u5c11\u4f20\u8f93\u6210\u672c\u3001\u5e26\u5bbd\u7b49\u7b49\u3002</p> <p>\u970d\u592b\u66fc\u7f16\u7801\u7684\u6838\u5fc3idea\u662f\uff1a\u4e0d\u662f\u6240\u6709\u7684\u5b57\u7b26\u90fd\u6709\u7740\u76f8\u540c\u7684\u51fa\u73b0\u9891\u7387\u7684\uff01\u4f46\u662f\u6240\u6709\u7684\u5b57\u7b26\u5374\u90fd\u5360\u7528\u7740\u76f8\u540c\u7684byte\uff01\u6240\u4ee5\u57fa\u672c\u7684idea\u5c31\u662f\uff1a\u80fd\u4e0d\u80fd\u8d8a\u9891\u7e41\u7684\u5b57\u7b26\uff0c\u6211\u5c31\u7528\u8d8a\u5c11\u7684bits\u8868\u793a\uff1b\u800c\u9891\u7387\u8d8a\u4f4e\u7684\u5b57\u7b26\uff0c\u6211\u5c31\u7528\u66f4\u591a\u7684bits\u8868\u793a\u3002</p> <p>\u5c31\u968f\u4fbf\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u5c31\u80fd\u751f\u52a8\u7684\u5c55\u793a\u4e0a\u8ff0\u7684\u601d\u60f3\uff0c\u4ee5\u53ca\u601d\u60f3\u6240\u5e26\u6765\u7684\u597d\u5904\uff1a</p> <p></p> <p>\u970d\u592b\u66fc\u7f16\u7801\u603b\u7684algorithm\u6b65\u9aa4\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b\uff1a</p> <ul> <li>Scan text to be compressed and count frequencies of all characters.</li> <li>Prioritize characters based on their frequencies in text.</li> <li>Build Huffman code tree based on prioritized list.</li> <li>Perform a traversal of tree to determine all code words.</li> <li>Encode the text using the Huffman codes.</li> </ul> <p>\u9996\u5148\u662fscan the text\u3002\u5982\u4e0b\u56fe\u4e2d\u7684\u4f8b\u5b50\uff0c\u9996\u5148\u6211\u4eec\u80fd\u591f\u7edf\u8ba1text\u4e2d\u51fa\u73b0\u7684text\u79cd\u7c7b\uff0c\u7136\u540e\u6211\u4eec\u4e5f\u80fd\u591f\u7edf\u8ba1\u6240\u6709character\u51fa\u73b0\u7684\u6b21\u6570\uff0caka\uff0c\u9891\u7387\u3002</p> <p></p> <p></p> <p>\u7edf\u8ba1\u5b8c\u6210\u4e4b\u540e\uff1aCreate binary tree nodes with character and frequency of each character\u3002\u7136\u540e\u8bb2\u8282\u70b9\u653e\u8fdb\u4f18\u5148\u961f\u5217\u91cc\u9762\uff0c\u5176\u4e2d\u6211\u4eec\u5b9a\u4e49\u4f18\u5148\u7ea7\u4e3a\uff1a\u51fa\u73b0\u9891\u7387\u8d8a\u4f4e\uff0c\u5219\u961f\u5217\u4e2d\u7684\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u6784\u5efa\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u7136\u540e\u5229\u7528\u8fd9\u4e2a\u4f18\u5148\u961f\u5217\u521b\u5efa\u4e8c\u53c9\u6811\uff0c\u521b\u5efa\u7684\u89c4\u5219\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u4e0b\u9762\u5c55\u793a\u4e0a\u8ff0\u64cd\u4f5c\u4e86\u4e00\u6b65\u3001\u4e24\u6b65\u3001\u4e09\u6b65\u3001\u5012\u6570\u7b2c\u4e09\u6b65\u3001\u5012\u6570\u7b2c\u4e8c\u6b65\u3001\u6700\u540e\u4e00\u6b65\u4e4b\u540e\u7684\u793a\u610f\u56fe\uff1a</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u8fd9\u6837\u4e00\u6765\u6211\u4eec\u5c31\u5f97\u5230\u4e86Huffman code tree\u3002\u5f97\u5230\u4e86\u6700\u540e\u7684\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u53bb\u8bbf\u95ee\uff08traverse\uff09\u6700\u540e\u7684character\u4e86\u3002\u5982\u679c\u6211\u4eec\u89c4\u5b9a\uff1a\u9047\u5230\u4e86\u4e00\u4e2a\u8282\u70b9\u4e4b\u540e\uff0c\u9009\u62e9\u4e86\u5b83\u7684\u5de6\u5b69\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e00\u6b65\u5c31\u662f0\uff0c\u800c\u5982\u679c\u9009\u62e9\u4e86\u5b83\u7684\u53f3\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e00\u6b65\u5c31\u662f1\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6bcf\u4e00\u4e2acharacter\u5c31\u5bf9\u5e94\u7740\u4e00\u79cd\u7f16\u7801\uff1a</p> <p></p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u591f\u901a\u8fc7\u4e0a\u8ff0\u7684\u7f16\u7801\u89c4\u5219\uff0c\u91cd\u65b0\u7f16\u7801\u8fd9\u53e5\u8bdd\uff1a</p> <p></p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u53ea\u662f\u4e8673\u4e2abit\u53bb\u8868\u793a\u53e5\u5b50\u4e86\uff0c\u800c\u5982\u679c\u6b63\u5e38\u4f7f\u7528ASCII\u8fdb\u884c\u7f16\u7801\uff0c\u9700\u8981\u4f7f\u7528208\u4e2abit\u3002\u4e3a\u4ec0\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4efb\u610f\u4e24\u4e2acode\u4e4b\u95f4\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u52a0\u5206\u9694\u7b26\uff1f\u56e0\u4e3a\u8fd9\u4e9bcode\u6ca1\u6709\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2acode\u7684\u524d\u7f00\uff01</p> <p>\u91cd\u8981\uff01\u5982\u4f55\u5224\u65ad\u4e00\u4e2acode set\u662f\u4e0d\u662f\u4e00\u4e2avalid Huffman code\uff0c\u9700\u8981\u5224\u65ad\u4e24\u4e2a\u6761\u4ef6\uff1a\u7b2c\u4e00\uff0c\u662f\u5426\u6ca1\u6709\u4e00\u4e2acode\u662f\u53e6\u5916\u4e00\u4e2acode\u7684\u524d\u7f00\uff1b\u7b2c\u4e8c\uff0c\u6839\u636ecode set\u753b\u6811\uff0c\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u53f6\u8282\u70b9\u8981\u4e48\u662f\u6ee1\u8282\u70b9\u3002\u4e24\u4e2a\u6761\u4ef6\u90fd\u6ee1\u8db3\u4e86\uff0c\u5c31\u8bf4\u660ecode set\u662fvalid Huffman code\u3002</p> <p>\u90a3\u4e48\u5728\u5bf9\u65b9\u6536\u5230\u4e86\u8fd9\u4e2a\u7801\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u53d1\u7ed9\u5bf9\u65b9\u8fd9\u4e2aHuffman code tree\u3002\u8fd9\u6837decode\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u6309\u71670\u662fleft\uff0c1\u662fright\u7684traverse\u89c4\u5219\u5c31\u80fd\u591f\u6210\u529f\u5730\u627e\u5230\u4e00\u4e2a\u4e2acharacter\uff0c\u4ece\u800c\u5b9e\u73b0\u4fe1\u606f\u7684\u4f20\u9012\u3002</p> <p>Tip: \u970d\u592b\u66fc\u7f16\u7801\u51fa\u6765\u7684code set\u53ef\u4ee5\u505a\u5230\u6240\u6709\u7684character\u7684code length\u90fd\u4e00\u6837</p> <p>Tip:  For the same character set, if their frequencies differ, then the Huffman coding trees generated by them may be the same. For example, two characters of frequency 10 and 20, and two characters of frequency 100 and 200, will have the same Huffman Coding Trees</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#summary","title":"Summary","text":"<p>\u5bf9\u4e8eBinary Heap\u7684push pop access\u4e09\u79cd\u60c5\u51b5\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5982\u4e0b\uff1a</p> <p></p> <p>\u4e8c\u53c9\u5806\u7684\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u5176\u4e2dbuild method\u662fFloyd'd Method\uff09\u4ee5\u53ca\u5806\u6392\u5e8f\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\uff08\u6ce8\u610fPush\u662f\\(O(ln(n))\\)\uff0c\u66f4\u5177\u4f53\u7684\u8bf4\u662fworst case \\(\\Theta(ln(n))\\)\uff0caverage \\(\\Theta(1)\\)\uff09\u3002</p> <p>:warning:\u5806\u6392\u5e8f\u7684\u6700\u597d\u60c5\u51b5\u548c\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(\\Theta(logn)\\)\uff0c\u800c\u4e14\u5806\u6392\u5e8f\u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\u7b97\u6cd5\u3002</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#avl-tree","title":"\u5e73\u8861\u4e8c\u53c9\u6811\uff08AVL Tree\uff09","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#balance-matters","title":"Balance Matters","text":"<p>\u4e4b\u524d\u63d0\u5230\u8fc7\uff0c\u5728\u67e5\u627e\u4e8c\u53c9\u6811\u4e2d\uff0c\u76f8\u5173\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(h)\uff0c\u4f46\u662f\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u4f1a\u8fbe\u5230O(n)\uff0c\u800c\u8fd9\u4e2a\u6700\u574f\u7684\u60c5\u51b5\u5c31\u662f\u4e8c\u53c9\u6811\u6781\u5ea6\u4e0d\u5e73\u8861\u3002\u6211\u4eec\u5f88\u662f\u5e0c\u671b\u4e00\u9897\u6811\u80fd\u591f\u4fdd\u6301\u826f\u597d\u7684\u201c\u5e73\u8861\u201d\uff0c\u6bd4\u5982\u8bf4\uff0c\u6811\u7684\u9ad8\u5ea6\u662f\\(\\Theta(ln(n))\\)\u3002Balance\u7684\u5b9a\u4e49\u6b64\u5904\u518d\u6b21\u8865\u5145\uff1a</p> <p>:label:\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71\uff0c\u90a3\u4e48\u5c31\u79f0\u8fd9\u4e2a\u8282\u70b9\u662f\u5e73\u8861\u7684\u3002</p> <p>\u90a3\u4e48\u5982\u4f55\u4fdd\u6301\u5e73\u8861\u5462\uff1f\u63a5\u4e0b\u6765\u5c55\u793a\u51e0\u4e2a\u4fdd\u6301\u5e73\u8861\u7684\u601d\u60f3\uff1a</p> <p></p> <p>\u9996\u5148\u662f\u5982\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u60f3\u8981\u5728\u8fd9\u4e2a\u6811\u4e2d\u63d2\u51651\uff0c\u90a3\u4e48\u5982\u679c1\u4f5c\u4e3a2\u7684\u5de6\u5b69\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u68f5\u6811\u5f88\u660e\u663e\u5c31\u4e0d\u5e73\u8861\u4e86\u3002\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8003\u86512\u4e0a\u4f4d\uff0c3\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u3002</p> <p></p> <p>\u5176\u6b21\u5982\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u60f3\u8981\u5728\u6811\u4e2d\u63d2\u51652\uff0c\u5982\u679c\u4f5c\u4e3a1\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u90a3\u4e48\u5c31\u660e\u663e\u4e0d\u5e73\u8861\u4e86\u3002\u6240\u4ee5\u53ef\u4ee5\u8003\u86512\u4e0a\u4f4d\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e3\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u6811\u7684\u5e73\u8861\u5c31\u4fdd\u8bc1\u4e86\u3002</p> <p>\u8fd9\u4e9b\u4f8b\u5b50\u90fd\u663e\u5f97\u53ef\u80fd\u592a\u7279\u6b8a\u4e86\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u4e0d\u5177\u6709\u666e\u9002\u6027\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u4e9b\u5c31\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u4e2d\u4fdd\u6301\u5e73\u8861\u7684\u5173\u952e\u57fa\u7840\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#avl-tree_1","title":"AVL Tree","text":"<p>:label:\u4e00\u9897\u67e5\u627e\u4e8c\u53c9\u6811\u88ab\u8ba4\u4e3a\u662fAVL\u6811\u5982\u679c\uff1a\u6839\u8282\u70b9\u5de6\u53f3\u4e24\u68f5\u6811\u7684\u9ad8\u5ea6\u63d2\u4e0d\u8d85\u8fc71\uff0c\u800c\u4e14\u5de6\u53f3\u4e24\u5b50\u6811\u90fd\u662fAVL\u6811\u3002\uff08Recursive Definition\uff09</p> <p>:warning:\u5173\u4e8e\u9ad8\u5ea6\uff0c\u6709\u4e24\u70b9\u9700\u8981\u518d\u6b21\u5f3a\u8c03\uff1a\u4e00\u9897\u7a7a\u6811\u7684\u9ad8\u5ea6\u662f-1\uff0c\u800c\u4e00\u9897\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u7684\u9ad8\u5ea6\u662f0</p> <p>\u6839\u636e\u4e0a\u8ff0\u5b9a\u4e49\uff0c\u53ef\u4ee5\u9884\u89c1\u7684\u662f\uff1a\u5b8c\u6574\uff08complete\uff09\u4e8c\u53c9\u67e5\u627e\u6811\u4e00\u5b9a\u662fAVL\u6811\u3002\u56e0\u6b64\uff0cAVL\u6811\u5982\u679c\u9ad8\u5ea6\u662fh\uff0c\u90a3\u4e48\u8282\u70b9\u6570\u91cf\u7684\u4e0a\u9650\u662f\uff1a\\(2^{h+1}-1\\)\u3002\u90a3\u4e48\u4e0b\u9650\u5462\uff1f</p> <p></p> <p></p> <p></p> <p>:label: \u5bf9\u4e8e\u4e00\u4e2a\u9ad8\u5ea6\u4e3an\u7684AVL\u6811\uff0c\u6700\u5c11\u7684\u8282\u70b9\u6570\u91cf\u4e3a\uff1a  </p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#maintaining-balance","title":"Maintaining Balance","text":"<p>\u6ce8\u610f\u5230\uff1a\u63d2\u5165\u8282\u70b9\u53ef\u4ee5\u8ba9\u6811\u7684\u9ad8\u5ea6\u589e\u52a01\uff0c\u540c\u65f6\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u80fd\u591f\u8ba9\u6811\u7684\u9ad8\u5ea6\u51cf\u5c111\u3002\u8fd9\u4e24\u79cd\u64cd\u4f5c\u90fd\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u8282\u70b9\u4ea7\u751f\u4e0d\u5e73\u8861\u73b0\u8c61\uff0c\u6211\u4eec\u9700\u8981\u5728\u63d2\u5165\u6216\u8005\u5220\u9664\u4e4b\u540erebalance\u3002</p> <p>\u4e3a\u4e86\u8bb0\u5f55\u9ad8\u5ea6\u4e0a\u7684\u53d8\u5316\uff0cNode\u6210\u5458\u51fd\u6570<code>height()</code>\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987bO\uff081\uff09\uff0c\u56e0\u6b64\u6700\u597d\u6240\u6709\u7684Node\u6210\u5458\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf\u53eb\u505a<code>int tree_height;</code>\uff0c\u7136\u540e\u5728\u6211\u4eec\u63d2\u5165\u548c\u5220\u9664\u7684\u8fc7\u7a0b\u4e2d\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u66f4\u65b0\u3002</p> <p>\u4e0b\u9762\u5c06\u4f1a\u6309\u7167\u4e0d\u540c\u7684case\u6765\u4ecb\u7ecd\u4e0d\u540c\u7684\u64cd\u4f5c\u4ee5\u7ef4\u6301\u4e8c\u53c9\u6811\u7684\u5e73\u8861\uff1a</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#case-1-of-insertion","title":"Case 1 of Insertion","text":"<p>\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u201c\u53f3\u65cb\u201d\u3002b\u8282\u70b9\u5c06\u4f5c\u4e3a\u8fd9\u4e2a\u7cfb\u7edf\u7684\u6839\u8282\u70b9\uff0c\u7136\u540ef\u4f5c\u4e3a\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u540c\u65f6BR\u6811\u7684\u6839\u8282\u70b9\u5c06\u63a5\u5728f\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u5904\u3002</p> <p>\u53e6\u5916\uff0c\u5bfb\u627e\u8fd9\u4e2af\u8282\u70b9\u5176\u5b9e\u4e5f\u662f\u6709\u6280\u5de7\u7684\uff1a\u63d2\u5165\u4e86a\u8282\u70b9\u4e4b\u540e\uff0c\u5728\u63d2\u5165\u7684a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684path\u4e2d\uff08\u6ce8\u610f\u65b9\u5411\uff01\u8282\u70b9\u5230\u6839\u8282\u70b9\uff01\uff09\uff0c\u9010\u4e2a\u68c0\u67e5\u8282\u70b9\u7684\u5e73\u8861\u6027\uff0c\u7b2c\u4e00\u4e2a\u4e0d\u5e73\u8861\u7684\u70b9\u5c31\u662f\u4e0a\u8ff0case\u7684f\u8282\u70b9\u4e86\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#case-2-of-insertion","title":"Case 2 of Insertion","text":"<p>\u5982\u679c\u65b0\u63d2\u5165\u7684\u8282\u70b9c\u5728b\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0b\u9762\uff0c\u90a3\u4e48case1\u7684\u65b9\u6cd5\u5c31\u5e76\u4e0d\u594f\u6548\u4e86\u3002\u56e0\u6b64\u9700\u8981\u91cd\u65b0\u8bbe\u8ba1\u89e3\u51b3\u65b9\u6848\uff1a</p> <p></p> <p></p> <p>\u6b64\u5904\u6211\u4eec\u5bf9BR\u5b50\u6811\u7684\u63d2\u5165\u65b0\u8282\u70b9\u60c5\u51b5\u8fdb\u884c\u4e86\u8fdb\u4e00\u6b65\u7684\u7ec6\u5316\uff0c\u63d2\u5165\u5143\u7d20\u7684\u4f4d\u7f6e\u8981\u4e48\u5728c\u8981\u4e48\u5728e\uff0c\u5e76\u4e14\u5355\u72ec\u62ce\u51fa\u6765\u4e86b\u8282\u70b9\u7684\u53f3\u5b50\u6811\u6839\u8282\u70b9\u3002\u53ef\u4ee5\u770b\u5230\u89e3\u51b3\u65b9\u6848\u4e2d\uff0cd\u4e0a\u4f4df\u539f\u672c\u7684\u6839\u8282\u70b9\u5730\u4f4d\uff0c\u7136\u540ef\u4f5c\u4e3ad\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u4e4b\u540e\u539f\u672cd\u7684\u4e24\u9897\u5b50\u6811\u6839\u8282\u70b9\u5206\u522b\u4f5c\u4e3a\u4e86b\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u548cf\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#symmetric-cases-of-case-1-and-2","title":"Symmetric Cases of Case 1 and 2","text":"<p>\u4e0a\u8ff0\u7684case\u4e2d\u90fd\u662f\u53f3\u65cb\uff0c\u90a3\u4e48\u5f53\u7136\u6709\u5de6\u65cb\u7684case\uff0c\u601d\u8def\u5b8c\u5168\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u64cd\u4f5c\u662f\u955c\u50cf\u7684\u2014\u2014\u5de6\u65cb\u3002</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#comments-of-insertion","title":"Comments of Insertion","text":"<p>\u6240\u6709\u7684\u63d2\u5165\u4e4b\u540e\u7684\u5de6\u53f3\u65cb\u5e73\u8861\u64cd\u4f5c\uff0c\u5728\u4ee3\u7801\u4e2d\u7684\u5b9e\u73b0\u80fd\u591f\u505a\u5230\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff1b\u4f46\u662f\u5728\u5e73\u8861\u67e5\u627e\u4e8c\u53c9\u6811\u4e2d\u63d2\u5165\u5143\u7d20\u4f9d\u7136\u662f\\(\\Theta(ln(n))\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#erase","title":"Erase","text":"<p>\u5220\u9664\u4e00\u4e2a\u53f6\u8282\u70b9\u53ef\u80fd\u4f1a\u9020\u6210\u591a\u4e2a\u4e0d\u5e73\u8861\uff0c\u5f53\u7136\uff0c\u8fd9\u4e5f\u662f\u201c\u53ef\u80fd\u201d\uff0c\u56e0\u6b64\u9700\u8981\u5220\u9664\u4e4b\u540e\u68c0\u67e5\u662f\u5426\u6709\u4e0d\u5e73\u8861\u73b0\u8c61\u7684\u4ea7\u751f\u3002\u4f46\u662f\u4e0d\u5e78\u7684\u662f\uff0c\u5220\u9664\u53ef\u80fd\u4f1a\u9020\u6210O(h)\u7a0b\u5ea6\u4e0d\u5e73\u8861\uff0c\u800c\u5b83\u4eec\u53c8\u5fc5\u987b\u8981\u4fee\u6b63\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u63d2\u5165\u5c31\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e2a\u4e0d\u5e73\u8861\u73b0\u8c61\u5c31OK\u3002</p> <p>\u800c\u5982\u679c\u8981\u5220\u9664\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u6309\u7167\u67e5\u627e\u4e8c\u53c9\u6811\u4e2d\u7684\u5220\u9664\u64cd\u4f5c\u5373\u53ef\u3002</p> <p>\u800c\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u5728\u7834\u574f\u5e73\u8861\u6027\u4e0a\u6765\u770b\uff0c\u53ef\u4ee5\u7c7b\u4f3c\u4e8e\u53e6\u4e00\u4e2a\u5730\u65b9\u63d2\u5165\u8282\u70b9\uff0c\u6240\u4ee5\u8bf4\u5f88\u591a\u60c5\u51b5\u8fd8\u662f\u5de6\u53f3\u65cb\u64cd\u4f5c\uff0c\u4f46\u662f\u7279\u6b8a\u7684\u60c5\u51b5\u5982\u4e0b\uff1a\u4f46\u4f9d\u7136\uff0c\u53ef\u4ee5\u89c6\u4e3a\u63d2\u5165\u7684Case 1\u3002\u5728\u5220\u9664\u4e86\u8282\u70b9\u4e4b\u540e\uff0c\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u4e00\u8def\u4e0a\u7684\u8282\u70b9\u90fd\u8981\uff08\u4e0d\u662f\u7b2c\u4e00\u4e2a\uff01\uff09\u68c0\u67e5\u662f\u5426\u6709\u4e0d\u5e73\u8861\u73b0\u8c61\uff01</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#time-complexity","title":"Time Complexity","text":"<p>\u63d2\u5165\u53ef\u80fd\u53ea\u9700\u8981\u4e00\u6b21correction\u5c31\u80fd\u518d\u6b21\u7ef4\u6301\u5e73\u8861\uff0c\u800c\u6bcf\u6b21\u5e73\u8861\u53ea\u9700\u8981O(1)\u7684\u65f6\u95f4\u3002\u4f46\u662f\u5220\u9664\u53ef\u80fd\u9700\u8981O(h)\u6b21correction\uff0c\u6bcf\u6b21\u90fd\u662fO(1)\u65f6\u95f4\uff0c\u800ch\u5c31\u662f\u9ad8\u5ea6\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5220\u9664\u6765\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(ln(n))\\)\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#avl-tree-as-arrays","title":"AVL Tree as Arrays","text":"<p>\u4e4b\u524d\u6211\u4eec\u89c1\u5230\uff0c\u5b8c\u6574\u4e8c\u53c9\u6811\uff08complete\uff09\u53ef\u4ee5\u7528O(n)\u7684\u5185\u5b58\u53bb\u5728\u6570\u5217\u4e0a\u8fdb\u884c\u50a8\u5b58\uff0c\u800c\u4efb\u610f\u4e00\u4e2an\u4e2a\u8282\u70b9\u7684\u6811\u4e5f\u53ef\u4ee5\u901a\u8fc7\\(O(2^n)\\)\u7684\u5185\u5b58\u53bb\u5728\u5185\u5b58\u4e2d\u50a8\u5b58\u3002\u90a3\u4e48\u662f\u5426\u53ef\u80fd\u7528\u6570\u7ec4\u6765\u50a8\u5b58AVL\u6811\u5e76\u4e14\u4e0d\u7528\u9700\u8981\u6307\u6570\u7ea7\u522b\u7684\u5185\u5b58\u7a7a\u95f4\u5462\uff1f</p> <p></p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#disjoint-sets","title":"Disjoint Sets \u5e76\u67e5\u96c6","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#equivalence-relations","title":"Equivalence Relations","text":"<p>\"Equivalence Relations\" \u5728\u6570\u5b66\u4e2d\u88ab\u79f0\u4e3a\u201c\u7b49\u4ef7\u5173\u7cfb\u201d\u3002\u7b49\u4ef7\u5173\u7cfb\u662f\u96c6\u5408\u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6027\u8d28\uff1a</p> <ol> <li>\u81ea\u53cd\u6027\uff08Reflexivity\uff09\uff1a\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20 a\uff0ca \u4e0e\u81ea\u8eab\u662f\u7b49\u4ef7\u7684\uff0c\u5373 a\u223ca\u3002</li> <li>\u5bf9\u79f0\u6027\uff08Symmetry\uff09\uff1a\u5982\u679c\u96c6\u5408\u4e2d\u7684\u5143\u7d20 a \u4e0e\u5143\u7d20 b \u662f\u7b49\u4ef7\u7684\uff0c\u90a3\u4e48 b \u4e5f\u4e0e aa \u7b49\u4ef7\uff0c\u5373\u5982\u679c a\u223cb\uff0c\u5219 b\u223ca\u3002</li> <li>\u4f20\u9012\u6027\uff08Transitivity\uff09\uff1a\u5982\u679c\u96c6\u5408\u4e2d\u7684\u5143\u7d20 a \u4e0e\u5143\u7d20 b \u662f\u7b49\u4ef7\u7684\uff0c\u4e14 b \u4e0e\u5143\u7d20 c \u662f\u7b49\u4ef7\u7684\uff0c\u90a3\u4e48 a \u4e5f\u4e0e c \u7b49\u4ef7\uff0c\u5373\u5982\u679c a\u223cb \u4e14 b\u223cc\uff0c\u5219 a\u223cc\u3002</li> </ol> <p>An equivalence relation partitions a set into distinct equivalence classes. Each equivalence class may be represented by a single object:  the representative object. Another descriptive term for the sets in such a partition is disjoint sets.</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u7ecf\u5178Implicitly Defined Relations\u4f8b\u5b50\uff0c\u5728\u96c6\u5408\u4e2d\u901a\u8fc7\u4e00\u79cd\u7b49\u4ef7\u5173\u7cfb\u5bf9\u5143\u7d20\u8fdb\u884c\u5212\u5206\uff0c\u5212\u5206\u51fa\u4e0d\u540c\u7684\u96c6\u5408\u3002</p> <p></p> <p>\u4ee5\u4e0b\u662fExplicitly Defined Disjoint Sets\u7684\u4f8b\u5b50\uff0c\u5148\u5bf9\u96c6\u5408\u8fdb\u884c\u5212\u5206\uff0c\u7136\u540e\u518d\u7528\u8fd9\u4e2a\u5212\u5206\u89c4\u5b9a\u6bcf\u4e00\u4e2aset\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u7b49\u4ef7\u7684\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#disjoint-sets_1","title":"Disjoint Sets","text":"<p>:label: Definition: a set of elements partitioned into a number of disjoint subsets</p> <p>There are two operations we would like to perform on disjoint sets:</p> <ul> <li>Determine if two elements are in the same disjoint set, and</li> <li>Take the union of two disjoint sets creating a single set</li> </ul> <p>We will determine if two objects are in the same disjoint set by defining a find function\uff0c\u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\u5e94\u8be5\u5982\u4e0b\uff1a</p> <ul> <li>find(a): find the representative object of the disjoint set that a belongs to</li> <li>Given two elements a and b, they are in the same set if \\(find(a)==find(b)\\)</li> </ul> <p>\u90a3\u4e48\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\u65e2\u7136\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u8f93\u5165\u7684\u662f\u5143\u7d20\uff0c\u8fd4\u56de\u7684\u662f\u8be5\u5143\u7d20\u5c5e\u4e8e\u7684\u5e76\u67e5\u96c6\u4e2d\u7684\u4ee3\u8868\u5143\u7d20\uff0c\u90a3\u4e48\u4e00\u79cd\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u521b\u5efa\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\uff0c\u53e6\u4e00\u4e2a\u7684\u5bf9\u5e94\u4f4d\u7f6e\u50a8\u5b58\u7684\u662f\u5b83\u5bf9\u5e94\u7684\u5e76\u67e5\u96c6\u4e2d\u7684\u4ee3\u8868\u5143\u7d20\u3002\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\u8fd9\u79cd\u201c\u5e26\u7740\u4ee3\u8868\u5143\u7d20\u7684\u96c6\u5408\u201d\u5173\u7cfb\uff0c\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u4f7f\u7528\u6811\u8fdb\u884c\u8868\u793a\uff0c\uff08\u5b50\u6811\uff09\u6839\u8282\u70b9\u5c31\u662f\u4ee3\u8868\u5143\u7d20\uff0c\u800c\u5176\u4ed6\u5728\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u8be5\u8282\u70b9\u7684\u5b69\u5b50\u8282\u70b9\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>:warning:\u5f53\u7136\uff0c\u5728\u4e4b\u524d\u7684\u6811\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u8282\u70b9\u50a8\u5b58\u7684\u90fd\u662f\u5b69\u5b50\u8282\u70b9\u7684\u6307\u9488\uff0c\u4f46\u662f\u5728\u5e76\u67e5\u96c6\u7684\u60c5\u51b5\u4e2d\uff0c\u6211\u4eec\u5bf9\u201c\u8be5\u5143\u7d20\u6240\u5728\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff0ci.e.\uff0c\u8be5\u5143\u7d20\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u7684\u6307\u9488\u201d\u3002\u56e0\u6b64\uff0c\u7528\u6811\u7ed3\u6784\u5b9e\u73b0\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u5e94\u8be5\u50a8\u5b58\u7684\u662f\u7236\u4eb2\u8282\u70b9\u7684\u6307\u9488\u3002</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#operation-optimization-and-analysis","title":"Operation, Optimization and Analysis","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#operation","title":"Operation","text":"<p>\u9996\u5148\u662f<code>set_union(i,j)</code>\uff0c\u8868\u793a\u8981\u628aj\u5143\u7d20\u6240\u5728\u7684\u5e76\u67e5\u96c6\u52a0\u8fdb\u4ee5i\u5143\u7d20\u6240\u5728\u7684\u5e76\u67e5\u96c6\u3002\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\u5b50\uff1a\u5de6\u8fb9\u4e3a\u5f53\u524d\u72b6\u6001\u7684\u7ed3\u679c\uff0c\u5047\u5982\u8bf4\u6211\u60f3<code>set_union(5, 6);</code>\uff0c\u8bf4\u660e\u662f\u6211\u60f3\u8981\u628a6\u6240\u5728\u7684\u5e76\u67e5\u96c6\u52a0\u5165\u52305\u6240\u5728\u7684\u5e76\u67e5\u96c6\u4e2d\u3002\u90a3\u4e48\u6211\u5c31\u9700\u8981\u5bfb\u627e6\u6240\u5728\u7684\u5e76\u67e5\u96c6\u4e2d\u7684\u4ee3\u8868\u5143\u7d204\uff0c\u7136\u540e\u628a\u5b83\u7684\u7236\u4eb2\u8282\u70b9\u6307\u9488\u8bbe\u7f6e\u4e3a5\u6240\u5728\u7684\u5e76\u67e5\u96c6\u7684\u4ee3\u8868\u5143\u7d20\u8282\u70b9\u6307\u9488\uff0caka\uff0c1\u53f7\u5143\u7d20\u8282\u70b9\u3002\u6ce8\u610f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u539f\u6765\u7684set\u6765\u8bf4\uff0c\u5206\u6210\u7684\u4e00\u4e2a\u4e2a\u5e76\u67e5\u96c6\u4e2d\u4e0d\u80fd\u5d4c\u5957\u5e76\u67e5\u96c6\uff0ci.e.\uff0c4\u30016\u30018\u30019\u5728\u867d\u7136\u8bf4\u662f\u8fd9\u9897\u5b50\u6811\u7684\u9ad8\u5ea6\u662f2\uff0c\u4f46\u662f\u5176\u5b9e\u90fd\u662f\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\uff0c\u800c\u4e14\u90fd\u662f\u4ee54\u4e3a\u4ee3\u8868\u5143\u7d20\u7684\u3002</p> <p></p> <p>\u4e0a\u8ff0\u7684\u64cd\u4f5c\u5728\u903b\u8f91\u4e0a\u662f\u81ea\u6d3d\u7684\uff0c\u4f46\u662f\u5b9e\u8df5\u4e2d\u8fd8\u662f\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u90a3\u5c31\u662f\u6811\u7684\u9ad8\u5ea6\u4f1a\u975e\u5e38\u7684\u5927\uff0c\u5426\u5219\u5728find\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4ece\u53f6\u5b50\u7ed3\u70b9\u51fa\u53d1\uff0c\u8981\u7ecf\u8fc7O(h)\u64cd\u4f5c\u624d\u80fd\u8bbf\u95ee\u5230\u7236\u4eb2\u8282\u70b9\u6307\u9488\u4e3a\u7a7a\u6307\u9488\u7684\u5143\u7d20\uff0c\u4ee3\u8868\u5143\u7d20\u3002\u56e0\u6b64\u4e3a\u4e86\u4f18\u5316find and set_union\u65b9\u6cd5\uff0c\u5fc5\u987b\u8981\u60f3\u65b9\u6cd5\u964d\u4f4e\u6811\u7684\u9ad8\u5ea6\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#optimization-1","title":"Optimization 1: \u542f\u53d1\u5f0f\u5408\u5e76","text":"<p>:label:\u4f18\u5316\u7b56\u7565\u5982\u4e0b\uff1a</p> <ul> <li>point the root of the shorter tree to the root of the taller tree</li> <li>The height of the taller will increase if and only if the trees are equal in height</li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u52a0\u5165\u4e86\u5224\u65ad\u8c01\u52a0\u5230\u8c01\u8eab\u4e0a\u7684\u903b\u8f91\u3002\u5728\u4e4b\u524d\u201c\u6211\u60f3\u8981\u628a6\u6240\u5728\u7684\u5e76\u67e5\u96c6\u52a0\u5165\u52305\u6240\u5728\u7684\u5e76\u67e5\u96c6\u4e2d\u201d\u7684\u63cf\u8ff0\u4e2d\uff0c\u8fd9\u79cd\u8c01\u5bb6\u5230\u8c01\u8eab\u4e0a\u7684\u903b\u8f91\u8c8c\u4f3c\u662f\u56fa\u5b9a\u7684\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u6811\u7684\u9ad8\u5ea6\u53ef\u80fd\u4f1a\u589e\u957f\u4e0b\u53bb\u3002\u4f46\u662f\u5176\u5b9e\u8c01\u52a0\u5230\u8c01\u8eab\u4e0a\u5728<code>set_union();</code>\u8fd9\u4e2a\u65b9\u6cd5\u7684\u672c\u8d28\u4e0a\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u4e3a\u90fd\u662f\u8bb2\u5143\u7d20\u7684\u4ee3\u8868\u5143\u7d20\u8fdb\u884c\u7edf\u4e00\uff0c\u53ea\u4e0d\u8fc7\u662f\u7edf\u4e00\u5230\u8c01\u8eab\u4e0a\u7684\u533a\u522b\uff0c\u5728find\u5224\u65ad\u4e0a\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\u3002\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u201c\u6839\u8282\u70b9\u8c01\u52a0\u5230\u8c01\u8eab\u4e0a\u7684\u201d\u903b\u8f91\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u6765\u8003\u8651\u6700\u574f\u7684\u60c5\u51b5\uff08Worst-Case Scenario\uff09\uff0c\u90a3\u5c31\u662f\u6811\u7684\u9ad8\u5ea6\u5f88\u9ad8\uff0c\u4f46\u662f\u91cc\u9762\u7684\u8282\u70b9\u6570\u91cf\u5e94\u8be5\u8981\u5c3d\u53ef\u80fd\u7684\u5c11\u3002\u90a3\u4e48\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff0c\u5c31\u9700\u8981\u6bcf\u4e00\u6b21\u63d2\u5165\u5b50\u6811\u7684\u65f6\u5019\uff0c\u4e24\u68f5\u6811\u7684\u9ad8\u5ea6\u90fd\u662f\u4e00\u6837\u7684\u3002\u90a3\u4e48\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u521b\u5efa\u8fc7\u7a0b\u5c31\u5982\u4e0b\u56fe\u6240\u793a\uff1a </p> <p>\u4e0a\u56fe\u4e2d\u5b50\u6811\u7684\u5f62\u72b6\u5341\u5206\u6709\u89c4\u5f8b\uff0c\u603b\u7684\u6765\u8bf4\u8fd9\u4e2a\u5b50\u6811\u7684\u8bde\u751f\u53ef\u4ee5\u8fed\u4ee3\u5f0f\u5b9a\u4e49\uff1a\u5bf9\u4e8e\u4e00\u5f00\u59cb\u7684\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u65b0\u6765\u7684\u8282\u70b9\u76f4\u63a5\u52a0\u8f7d\u8fd9\u4e2a\u8282\u70b9\u4e0b\u9762\uff1b\u4e4b\u540e\uff0c\u8fd9\u9897\u5b50\u6811\u548c\u4e0e\u81ea\u5df1\u5f62\u72b6\u4e00\u6837\u7684\u5b50\u6811\u8fdb\u884cunion\u64cd\u4f5c\uff0c\u4f1a\u5f97\u5230\u65b0\u7684\u6811\uff1b\u91cd\u590d\u4e0a\u8ff0\u7684\u8fc7\u7a0b\u3002</p> <p>\u6211\u4eec\u60ca\u559c\u5730\u53d1\u73b0\uff0c\u5bf9\u5e94\u9ad8\u5ea6h\uff0c\u5e76\u67e5\u96c6\u6811\u6700\u5c0f\u7684\u8282\u70b9\u6570\u91cf\u8c8c\u4f3c\u597d\u50cf\u548c\u4e8c\u9879\u5f0f\u6709\u5173\u7cfb\uff0c\u56e0\u6b64\u6211\u4eec\u80fd\u591f\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u8bba\uff1a</p> <p></p> <p>:warning:\u4f18\u5316\u540e\u7684union\u64cd\u4f5c\u4e0b\uff0c\u5bf9\u4e8en\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u6c47\u5408\u6210\u4e00\u4e2a\u5e76\u67e5\u96c6\u6811\u7684\u7ed3\u6784\u7684\u9ad8\u5ea6\u548c\u5e73\u5747\u8282\u70b9\u6df1\u5ea6\u90fd\u662f\\(O(ln(n))\\)\u3002\u800c\u660e\u663e\u5730\uff0c\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0cn\u4e2a\u8282\u70b9\u7684\u6574\u4f53\u5e76\u67e5\u96c6\u6811\u7684\u9ad8\u5ea6\u662f1\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u90a3\u4e48\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5206\u6790\u4e86\u6700\u597d\u7684\u548c\u6700\u574f\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5e73\u5747\u60c5\u51b5\u5462\uff1f\u53ef\u80fd\u5bf9\u4e8e\u5e73\u5747\u60c5\u51b5\u7684\u5206\u6790\uff0c\u7406\u8bba\u5206\u6790\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u90a3\u4e48\u901a\u8fc7\u5b9e\u9a8c\u7ed3\u8bba\u53ef\u4ee5\u8bf4\u660e\uff1a :warning: \u5bf9\u4e8en\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u968f\u673a\u4ea7\u751f\u4e00\u4e2a\u6574\u4f53\u7684\u5e76\u67e5\u96c6\u6811\uff0c\u8fd9\u68f5\u6811\u7684\u5e73\u5747\u9ad8\u5ea6\u662f\\(o(ln(n))\\)</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#optimization-2","title":"Optimization 2: \u8def\u5f84\u538b\u7f29","text":"<p>:label:\u8fd8\u53ef\u4ee5\u8003\u8651\u53e6\u4e00\u79cd\u4f18\u5316\u7b56\u7565\uff1a\u6bcf\u5f53\u8c03\u7528\u4e00\u6b21<code>find</code>\u65b9\u6cd5\uff0c\u90a3\u5c31\uff1aupdate the object to point to the root</p> <p>\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5047\u5982\u8bf4\u8fdb\u884cfind\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece\u53f6\u5b50\u8282\u70b9\u4e00\u76f4\u8d70\u5230\u6839\u8282\u70b9\uff0cpath\u4e0a\u9762\u7684\u8282\u70b9\u5176\u5b9e\u90fd\u662f\u4ee5\u6839\u8282\u70b9\u4e3a\u4ee3\u8868\u5143\u7d20\uff0c\u4f46\u662f\u9664\u4e86\u7d27\u63a5\u7740\u6839\u8282\u70b9\u7684\u90a3\u4e2a\u5728path\u4e0a\u7684\u8282\u70b9\uff0c\u5176\u4ed6\u7684\u8282\u70b9\u5176\u5b9e\u90fd\u6ca1\u6709\u76f4\u63a5\u6307\u5411\u6839\u8282\u70b9\uff0c\u8fd9\u9020\u6210\u4e86\u9ad8\u5ea6\u7684\u589e\u52a0\u3002\u6240\u4ee5\u8bf4\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06path\u4e0a\u9762\u7684\u8282\u70b9\uff08\u9664\u4e86\u6839\u8282\u70b9\uff09\u7684\u7236\u4eb2\u8282\u70b9\u6307\u9488\u90fd\u8bbe\u7f6e\u6210\u6700\u540e\u7684\u8fd9\u4e2a\u6839\u8282\u70b9\uff0c\u4ece\u800c\u6709\u6548\u964d\u4f4e\u5e76\u67e5\u96c6\u6811\u7684\u9ad8\u5ea6\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#analysis_1","title":"Analysis","text":"<p>\u6709\u4e86\u4e0a\u8ff0\u7684\u4e24\u79cd\u4f18\u5316\u7b56\u7565\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u6ca1\u6709\u53ef\u80fd\u4f18\u4e8e\\(O(ln(n))\\)\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u540c\u65f6\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u4e4b\u540e\uff0c\u5e76\u67e5\u96c6\u7684\u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u65f6\u95f4\u4ec5\u4e3a\\(O(\\alpha (n))\\)\uff0c\u5176\u4e2d\\(\\alpha\\)\u4e3a\u963f\u514b\u66fc\u51fd\u6570\u7684\u53cd\u51fd\u6570\uff0c\u5176\u589e\u957f\u6781\u5176\u7f13\u6162\uff0c\u4e5f\u5c31\u662f\u8bf4\u5176\u5355\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e38\u6570\u3002</p> <p>Reference: oi.wiki</p> <p>\u603b\u7ed3\u56fe\u5982\u4e0b\uff1a </p> <p>\u90a3\u4e48\u8fd9\u4e2a\\(A(i,i)\\)\u591a\u5927\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684\u95ee\u9898\u4e86\u3002\u597d\u6d88\u606f\u662f\uff1a\\(A(4,4)\\)\u662f\u4e00\u4e2a19729\u4f4d\u7684\u6b63\u6574\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u5b9e\u8df5\u4e2d\u8ba4\u4e3a\uff1a</p> <p>:warning: \u5728\u540c\u65f6\u4f7f\u7528\u4e86\u8def\u5f84\u538b\u7f29\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u4e4b\u540e\uff0c\u5e76\u67e5\u96c6\u6bcf\u4e2a\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u4e3a\\(O(\\alpha (n))\\)\uff0c\u5176\u4e2d\\(\\alpha\\)\u4e00\u822c\u4e0d\u8d85\u8fc74\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u53ef\u4ee5\u89c6\u4e3an\u7684\u51fd\u6570\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#application","title":"Application","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#lotto-649-problem","title":"Lotto 6/49 Problem","text":"<p>\u5982\u4f55\u57281-49\u4e2a\u6570\u5b57\u4e2d\u968f\u673a\u9009\u53d66\u4e2a\u6570\u5b57\uff0c\u800c\u4e14\u4e0d\u4f1a\u9009\u51fa\u76f8\u540c\u7684\u6570\u5b57\uff1f\u53ef\u4ee5\u8003\u8651\u5148\u57281-49\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u537349\uff0c\u590d\u5236\u5230\u88ab\u9009\u4e2d\u7684\u8fd9\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\u4e0a\u9762\u3002\u4e4b\u540e\u518d\u4ece1-48\u4e2d\u968f\u673a\u9009\u53d6\u6570\u5b57\u3002\u4e0a\u8ff0\u7684\u64cd\u4f5c\u91cd\u590d\u516d\u6b21\u3002</p> <p>\u4e0b\u56fe\u4f8b\u5b50\u4e2d\u6f14\u793a\u4e86Lotto 2/20\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#maze-generation","title":"Maze Generation","text":"<p>\u5728\u8fd9\u91cc\u8bb2\u7684\u4e0d\u662f\u5982\u4f55\u89e3\u51b3\u4e00\u4e2a\u8ff7\u5bab\u95ee\u9898\uff0c\u800c\u662f\u5982\u4f55\u521b\u9020\u4e00\u4e2a\u8ff7\u5bab\u8ba9\u522b\u4eba\u73a9\u3002We will do as the followings:</p> <ul> <li>Start with the entire grid subdivided into squares</li> <li>Represent each square as a separate disjoint set</li> <li>Repeat the following algorithm: Randomly choose a wall; If that wall connects two disjoint sets of cells, then remove the wall and union the two sets</li> <li>To ensure that you do not randomly remove the same wall twice, we can have an array of unchecked walls</li> </ul> <p>\u603b\u7684\u6765\u8bf4\uff0c\u5c31\u662f\u9009\u62e9\u4e00\u4e2a\u5899\uff0c\u5408\u5e76\u4e24\u4e2a\u5e76\u67e5\u96c6\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u4e00\u5f00\u59cb\u5f15\u7d22\u4e3ai\u7684\u5730\u65b9\u4ee3\u8868\u7684\u662fi\u53f7\u6b63\u65b9\u5f62\u7684\u7236\u4eb2\u8282\u70b9\u7684\u6b63\u65b9\u5f62\u7f16\u53f7\uff0c\u56e0\u6b64\u5728\u5408\u5e76\u4e24\u4e2a\u5e76\u67e5\u96c6\u4e4b\u540e\uff0c\u9700\u8981\u66f4\u65b0\u8fd9\u4e2a\u88ab\u79fb\u52a8\u7684\u6b63\u65b9\u5f62\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u786e\u4fdd\u4e86\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u80fd\u591f\u901a\u8fc7\u4e0d\u65ad\u8bbf\u95ee\u7236\u4eb2\u8282\u70b9\u4ece\u800c\u6700\u7ec8\u8bbf\u95ee\u5230\u4ee3\u8868\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u6839\u8282\u70b9\u3002\u4e0b\u56fe\u4e2d\u5c55\u793a\u4e86\u4e00\u5f00\u59cb\u7684\u521d\u59cb\u5316\u72b6\u6001\uff08fig1\uff09\u3001\u4e2d\u95f4\u7684\u67d0\u4e00\u6b65\uff08fig2\u4e3a\u6b65\u9aa4\u524d\u72b6\u6001\uff0cfig3\u4e3a\u6b65\u9aa4\u540e\u72b6\u6001\uff09\u548c\u6700\u7ec8\u7684\u72b6\u6001\uff08fig4\uff09\u3002</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u800c\u4e14\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684\u73b0\u8c61\uff1a\u6700\u540e\u7684\u5e76\u67e5\u96c6\u6811\u7684\u5e73\u5747\u8282\u70b9\u6df1\u5ea6\u662f1.6\uff0c\u800c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u5e73\u5747\u8282\u70b9\u6df1\u5ea6\u662f2\u3002\u5b83\u7684\u4ee3\u7801\u5b9e\u73b0\u903b\u8f91\u5927\u81f4\u5982\u4e0b\uff1a</p> <p>Reference: kimi.moonshot.cn</p> <pre><code>#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstdlib&gt;\n#include &lt;ctime&gt;\n\n// \u5047\u8bbe DisjointSets \u662f\u4e00\u4e2a\u5df2\u7ecf\u5b9e\u73b0\u7684\u5e76\u67e5\u96c6\u7c7b\nclass DisjointSets {\npublic:\n    DisjointSets(int size) {\n        // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    }\n\n    int disjoint_sets() {\n        // \u8fd4\u56de\u96c6\u5408\u7684\u6570\u91cf\n    }\n\n    int find(int x) {\n        // \u67e5\u627e\u5143\u7d20 x \u6240\u5728\u7684\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\n    }\n\n    void set_union(int x, int y) {\n        // \u5408\u5e76 x \u548c y \u6240\u5728\u7684\u96c6\u5408\n    }\n};\n\n// \u5047\u8bbe Permutation \u662f\u4e00\u4e2a\u5df2\u7ecf\u5b9e\u73b0\u7684\u6392\u5217\u7c7b\nclass Permutation {\nprivate:\n    std::vector&lt;int&gt; data;\npublic:\n    Permutation(int n) {\n        // \u521d\u59cb\u5316\u6392\u5217\n    }\n\n    int next() {\n        // \u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u5e76\u4ece\u6392\u5217\u4e2d\u79fb\u9664\n    }\n};\n\nint main() {\n    int m, n; // \u8ff7\u5bab\u7684\u884c\u6570\u548c\u5217\u6570\n    DisjointSets rooms(m * n); // \u521b\u5efa\u5e76\u67e5\u96c6\u5b9e\u4f8b\n    int number_of_walls = 2 * m * n - m - n; // \u8ba1\u7b97\u5899\u7684\u6570\u91cf\n    bool is_wall[number_of_walls]; // \u6807\u8bb0\u5899\u662f\u5426\u88ab\u68c0\u67e5\u8fc7\n\n    // \u521d\u59cb\u5316\u5899\u7684\u72b6\u6001\uff0c\u521d\u59cb\u65f6\u6240\u6709\u5899\u90fd\u662f\u5b58\u5728\u7684\n    for (int i = 0; i &lt; number_of_walls; ++i) {\n        is_wall[i] = true;\n    }\n\n    Permutation untested_walls(number_of_walls); // \u521b\u5efa\u672a\u68c0\u67e5\u5899\u7684\u6392\u5217\n\n    // \u751f\u6210\u8ff7\u5bab\uff0c\u76f4\u5230\u6240\u6709\u623f\u95f4\u8fde\u901a\n    while (rooms.disjoint_sets() &gt; 1) {\n        int wall = untested_walls.next(); // \u968f\u673a\u9009\u62e9\u4e00\u5835\u5899\n        int room[2]; // \u5b58\u50a8\u76f8\u90bb\u623f\u95f4\u7684\u7d22\u5f15\n        find_adjacent_rooms(room, wall, n); // \u67e5\u627e\u5899\u4e24\u8fb9\u7684\u623f\u95f4\n\n        if (rooms.find(room[0]) != rooms.find(room[1])) {\n            is_wall[wall] = false; // \u6807\u8bb0\u5899\u4e3a\u5df2\u68c0\u67e5\uff0c\u5373\u79fb\u9664\u5899\n            rooms.set_union(room[0], room[1]); // \u5408\u5e76\u4e24\u4e2a\u623f\u95f4\u6240\u5728\u7684\u96c6\u5408\n        }\n    }\n\n    return 0;\n}\n\n// \u5047\u8bbe find_adjacent_rooms \u662f\u4e00\u4e2a\u5df2\u7ecf\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u67e5\u627e\u5899\u4e24\u8fb9\u7684\u623f\u95f4\nvoid find_adjacent_rooms(int room[2], int wall, int n) {\n    // \u5b9e\u73b0\u67e5\u627e\u903b\u8f91\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#painpoint","title":"Painpoint","text":"<ul> <li>The combination of path compression and union by rank ensures that both the time complexity of the Find and Union operations is nearly constant in practice.</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#graph","title":"Graph \u56fe","text":"<p>\u4ec0\u4e48\u662f\u56fe\uff1f\u8fd9\u4e2a\u6982\u5ff5\u5728\u79bb\u6563\u6570\u5b66\u4e2d\u5b66\u4e60\u8fc7\uff0c\u603b\u7684\u6765\u8bf4\uff1aA graph is an abstract data type for storing adjacency relations\u3002\u56fe\u4e2d\u4e24\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\uff0c\u5c31\u80fd\u591f\u4ee3\u8868\u4e00\u79cd\u76f8\u90bb\u5173\u8054\u3002\u5173\u4e8e\u56fe\uff0c\u6709\u5f88\u591a\u7684\u4e13\u4e1a\u672f\u8bed\u6765\u63cf\u8ff0\u5b83\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u56fe\u7684\u7ec4\u6210\u90e8\u5206\u7ecf\u5178\u7684\u6709\uff1aVertices, edges, degree and sub-graph, etc\uff08\u9876\u70b9\u3001\u8fb9\u3001\u5ea6\u3001\u5b50\u6811\uff09\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u53ef\u4ee5\u63cf\u8ff0\u56fe\u4e2d\u7684\u8def\u5f84\uff1a\u5b83\u4eec\u5927\u81f4\u5206\u4e3asimple paths and cycles\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#undirected-graph","title":"Undirected Graph","text":"<ul> <li>We will define an Undirected Graph ADT as a collection of vertices\uff1a\\(V = \\{v_1, v_2, ..., v_n\\}\\)\u3002The number of vertices is denoted by: \\(|V|=n\\)\u3002\u4e0e\u5b9a\u70b9\u914d\u5bf9\u7684\uff0c\u662f\uff1aa collection E of unordered pairs \\(\\{v_i, v_j\\}\\) termed edges which connect the vertices\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u65e0\u5411\u56fe\u7684\u4f8b\u5b50\uff1a</li> </ul> <p>\u90a3\u4e48\u5f88\u660e\u663e\u5730\u53ef\u4ee5\u60f3\u5230\uff1a\u5728\u4e00\u4e2a\\(|V|=n\\)\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u8fb9\u957f\u7684\u6570\u91cf\u6700\u591a\u662f\uff1a\\(\\frac{n(n-1)}{2} = O(|V|)^2\\)\u3002</p> <ul> <li> <p>The degree of a vertex is defined as the number of adjacent vertices\uff0cand those vertices adjacent to a given vertex are its neighbors\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u4e00\u4e2a\u70b9\u548c\u591a\u5c11\u4e2a\u5176\u4ed6\u7684\u70b9\u76f8\u8fde\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u5ea6\u5c31\u662f\u591a\u5c11\uff1b\u540c\u65f6\u90a3\u4e9b\u548c\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u70b9\uff0c\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u90bb\u5c45\u3002</p> </li> <li> <p>A sub-graph of a graph contains a subset of the vertices and a subset of the edges that connect the subset of the vertices in the original graph\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u5b50\u56fe\u4f8b\u5b50\uff1a\u5de6\u8fb9\u7684\u4e24\u4e2a\u56fe\u90fd\u662f\u53f3\u8fb9\u8fd9\u4e2a\u56fe\u7684\u5b50\u56fe\u3002\u6ce8\u610f\uff0c\u5b50\u56fe\u4e2d\u53ef\u4ee5\u51fa\u73b0\u5355\u72ec\u7684\u70b9\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u90bb\u5c45\uff1b\u4f46\u662f\u4e0d\u53ef\u4ee5\u51fa\u73b0\u4e00\u6761\u4e00\u6bb5\u6d88\u5931\u7684\u8fb9\u3002</p> </li> </ul> <p></p> <ul> <li>A path in an undirected graph is an ordered sequence of vertices \\((v0, v1, v2, ..., vk)\\)\uff0cwhere \\(\\{vj \u2013 1, vj\\}\\) is an edge for j = 1, ..., k\u3002\u5bf9\u4e8e\u4e0a\u8ff0\u5b9a\u4e49\u4e2d1\u7684\u8def\u5f84\uff0c\u6211\u4eec\u79f0\u4e3a\\(v_0 \\ to\\ v_k\\)\u7684\u8def\u5f84\uff0c\u800c\u4e14\u8def\u5f84\u7684\u957f\u5ea6\u662fk\u3002\u6ca1\u9519\uff0c\u8def\u5f84\u7684\u957f\u5ea6\u662fk\uff0c\u4e0d\u662fk-1\u3002</li> </ul> <p>\u7279\u522b\u5730\uff1a\u5bf9\u4e8e\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u7ec4\u6210\u7684\u8def\u5f84\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u8def\u5f84\u7684\u957f\u5ea6\u662f0</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u5173\u4e8e\u8def\u5f84\u7684\u5b9a\u4e49\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\uff1aA simple path has no repetitions (other than perhaps the first and last vertices)\u3002\u91cd\u8981\uff01simple path\u4e2d\u662f\u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u9876\u70b9\u51fa\u73b0\u7684\uff08\u80fd\u591f\u5141\u8bb8\u7684\u91cd\u590d\u9876\u70b9\u4ec5\u4ec5\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\uff01</p> <ul> <li>A simple cycle is a simple path of at least two vertices with the first and last vertices equal. \u6839\u636e\u8fd9\u4e2a\u5b9a\u4e49\uff1a\u8def\u5f84\u7684\u7ec8\u70b9\u548c\u8d77\u70b9\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u4e00\u6761\u8def\u5f84\u4e0a\u9762\u53ea\u6709\u4e24\u4e2a\u70b9\uff0c\u800c\u8fd9\u4e24\u4e2a\u70b9\u662f\u4e00\u6837\u7684\u3002</li> <li>Connectedness: \u4e24\u4e2a\u9876\u70b9\u53ef\u4ee5\u79f0\u4e3a\u201c\u76f8\u8fde\u7684\u201d\u5982\u679c\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u5206\u522b\u4e3a\u7ec8\u70b9\u548c\u8d77\u70b9\uff0c\u5b83\u4eec\u4e4b\u95f4\u6709\u4e00\u6761\u8def\u5f84\u3002</li> <li>Weighted Graphs\uff1aA weight may be associated with each edge in a graph\uff0cand such a graph is called a weighted graph\u3002\u8fd9\u4e2a\u6743\u91cd\u53ef\u4ee5\u5728\u591a\u79cd\u573a\u666f\u4e2d\u4ee3\u8868\u591a\u79cd\u542b\u4e49\uff0c\u4f8b\u5982\u8ddd\u79bb\u7b49\u3002\u800c\u5728weighted graph\u4e2d\uff0c\u8def\u5f84\u7684length\u662f\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u957f\u7684\u6743\u91cd\u603b\u548c\u3002</li> </ul> <p>\u9690\u85cf\u95ee\u9898\uff1a\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u79cd\u8def\u5f84\uff0c\u90a3\u4e48\u5982\u4f55\u627e\u5230length\u6700\u5c0f\u7684\u8def\u5f84\uff1f</p> <ul> <li>Tree: A graph is a tree if it is connected and there is a unique path between any two vertices</li> </ul> <p>\u56e0\u4e3a\u6811\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u56e0\u6b64\u6811\u8fd9\u79cd\u56fe\u4e5f\u6709\u7279\u6b8a\u7684\u6027\u8d28\uff1a</p> <ul> <li>The number of edges is \\(|E| = |V| \u2013 1\\)</li> <li>The graph is acyclic, that is, it does not contain any cycles</li> <li>Adding one more edge must create a cycle</li> <li>Removing any one edge creates two unconnected sub-graphs</li> </ul> <p>\u540c\u65f6\uff0c\u901a\u8fc7\u64cd\u4f5c\uff0c\u4efb\u4f55\u7684\u6811\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3arooted tree\uff1a\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u4f5c\u4e3a\u6839\uff0c\u7136\u540e\u5b9a\u4e49\u5b83\u7684\u90bb\u5c45\u5b9a\u70b9\u4e3a\u5b83\u7684\u5b69\u5b50\uff0c\u7136\u540e\u9012\u5f52\u5b9a\u4e49\u3002</p> <ul> <li>A forest is any graph that has no cycles\u3002\u6211\u4eec\u77e5\u9053forest\u542b\u6709\u8bb8\u591a\u5c0f\u6811\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u6811\u91cc\u9762\u53c8\u6ca1\u6709\u73af\uff0c\u56e0\u6b64\uff0cforest\u53ef\u4ee5\u7528\u201c\u6ca1\u6709\u73af\u7684\u56fe\u201d\u6765\u8fdb\u884c\u5b9a\u4e49\u3002\u56e0\u4e3aforest\u7684\u7279\u6b8a\u5b9a\u4e49\uff0c\u6709\u4ee5\u4e0b\u7ed3\u679c\uff1a</li> </ul> <ul> <li>The number of edges is \\(|E| &lt; |V|\\)</li> <li>The number of trees is \\(|V| \u2013 |E|\\)</li> <li>Removing any one edge adds one more tree to the forest</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#directed-graph","title":"Directed Graph","text":"<p>\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\u7684\u6700\u5927\u533a\u522b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u8fb9\u6709\u4e86\u65b9\u5411\uff0c\u800c\u56e0\u6b64\u5b9a\u4e49\u6709\u6240\u5dee\u5f02\u7684\u5c31\u6709\u8def\u5f84\u7b49\u3002</p> <ul> <li>In a directed graph, the edges on a graph are be associated with a direction</li> </ul> <ul> <li>Edges are ordered pairs (vj, vk) denoting a connection from vj to vk </li> <li>The edge (vj, vk) is different from the edge (vk, vj)</li> <li>The maximum number of directed edges in a directed graph is: \\(|V|(|V|-1)=O(|V|)^2\\)</li> </ul> <ul> <li>The degree of a vertex in a directed graph: </li> </ul> <ul> <li>The out-degree of a vertex is the number of outward edges from the vertex</li> <li>The in-degree of a vertex is the number of inward edges to the vertex</li> </ul> <p></p> <ul> <li>\u5173\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u9876\u70b9\uff0c\u6211\u4eec\u6709\u7279\u6b8a\u7684\u672f\u8bed\u6765\u63cf\u8ff0\u5b83\u4eec\uff1a\u5bf9\u4e8ein-degree\u4e3a0\u7684\u9876\u70b9\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3asources\uff1b\u5bf9\u4e8eout-degree\u4e3a0\u7684\u9876\u70b9\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3asinks\u3002</li> </ul> <p>\u4f8b\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cSources\u9876\u70b9\u67091 6 7\uff0cSinks\u67092 9.</p> <ul> <li>A path in a directed graph is an ordered sequence of vertices \\((v0, v1, v2, ..., vk)\\)\uff0cwhere \\(\\{vj \u2013 1, vj\\}\\) is an edge for j = 1, ..., k\u3002</li> <li>Correctedness\uff1a\u4e24\u4e2a\u9876\u70b9\u53ef\u4ee5\u79f0\u4e3a\u201c\u76f8\u8fde\u7684\u201d\u5982\u679c\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u5206\u522b\u4e3a\u7ec8\u70b9\u548c\u8d77\u70b9\uff0c\u5b83\u4eec\u4e4b\u95f4\u6709\u4e00\u6761\u8def\u5f84\uff08\u6ce8\u610f\u8fd9\u91cc\u7684\u8def\u5f84\u662f\u5e26\u7740\u65b9\u5411\u7684\uff09\u3002</li> </ul> <ul> <li>A graph is strongly connected if there exists a directed path between any two vertices</li> <li>A graph is weakly connected if there exists a path between any two vertices that ignores the direction</li> </ul> <ul> <li>Weighted Graphs\uff1aIn a weighted directed graphs, each edge is associated with a value\u3002</li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u5982\u679c\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u4e92\u76f8\u90fd\u6709\u4e00\u6761edge\uff0c\u90a3\u4e48\u8fd9\u4e24\u6761edge\u7684\u6743\u91cd\u6ca1\u6709\u786c\u6027\u89c4\u5b9a\u8981\u76f8\u540c\uff01</p> <ul> <li>A directed acyclic graph is a directed graph which has no cycle</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#representation","title":"Representation","text":"<p>\u5982\u4f55\u5b58\u50a8\u76f8\u90bb\u5173\u7cfb\u5462\uff1f\u5728\u79bb\u6563\u6570\u5b66\u4e2d\uff0c\u4ecb\u7ecd\u4e86adjacency matrix and adjacency list\u3002\u8fd9\u4e9b\u601d\u60f3\u90fd\u5bf9\u4e8e\u76f8\u90bb\u5173\u7cfb\u7684representation\u6709\u91cd\u8981\u7684\u4f5c\u7528\u3002\u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0bGraph ADT\u662f\u4ec0\u4e48\u3002</p> <p>Reference: kimi.moonshot.cn</p> <p>Graph ADT\uff08Abstract Data Type\uff09\u6307\u7684\u662f\u56fe\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0cADT\u662f\u4e00\u79cd\u6570\u636e\u6a21\u578b\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u7ec4\u64cd\u4f5c\uff0c\u4f46\u4e0d\u6307\u5b9a\u8fd9\u4e9b\u64cd\u4f5c\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u3002\u5bf9\u4e8e\u56fe\u6765\u8bf4\uff0cGraph ADT\u5b9a\u4e49\u4e86\u56fe\u7684\u57fa\u672c\u64cd\u4f5c\u548c\u5c5e\u6027\u3002\u4e00\u4e2a\u5178\u578b\u7684Graph ADT\u5305\u62ec\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ol> <li>\u521b\u5efa\u56fe\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u56fe\u3002</li> <li>\u6dfb\u52a0\u9876\u70b9\uff1a\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u9876\u70b9\u3002</li> <li>\u6dfb\u52a0\u8fb9\uff1a\u5728\u56fe\u4e2d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u53ef\u80fd\u5305\u62ec\u6709\u5411\u8fb9\u548c\u65e0\u5411\u8fb9\u3002</li> <li>\u83b7\u53d6\u9876\u70b9\uff1a\u6839\u636e\u9876\u70b9\u7684\u6807\u8bc6\u7b26\u627e\u5230\u56fe\u4e2d\u7684\u9876\u70b9\u3002</li> <li>\u83b7\u53d6\u6240\u6709\u9876\u70b9\uff1a\u8fd4\u56de\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u5217\u8868\u3002</li> <li>\u5224\u65ad\u9876\u70b9\u662f\u5426\u5728\u56fe\u4e2d\uff1a\u5224\u65ad\u4e00\u4e2a\u9876\u70b9\u662f\u5426\u5b58\u5728\u4e8e\u56fe\u4e2d\u3002</li> <li>\u5220\u9664\u9876\u70b9\uff1a\u4ece\u56fe\u4e2d\u5220\u9664\u4e00\u4e2a\u9876\u70b9\u53ca\u5176\u76f8\u5173\u7684\u8fb9\u3002</li> <li>\u5220\u9664\u8fb9\uff1a\u4ece\u56fe\u4e2d\u5220\u9664\u4e00\u6761\u8fb9\u3002</li> <li>\u83b7\u53d6\u90bb\u63a5\u9876\u70b9\uff1a\u83b7\u53d6\u4e0e\u6307\u5b9a\u9876\u70b9\u76f8\u90bb\u7684\u6240\u6709\u9876\u70b9\u3002</li> </ol> <p></p> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u51e0\u79cd\u5e38\u89c1\u7684\u76f8\u90bb\u5173\u7cfb\u8868\u8fbe\u5f62\u5f0f\uff1a</p> <ul> <li>Binary-relation list</li> </ul> <p></p> <ul> <li> </li> </ul> <p></p> <p></p> <p>\u5982\u679c\u662f\u65e0\u5411\u56fe\uff0c\u90a3\u4e48\u8fd9\u4e2a\u77e9\u9635\u5e94\u8be5\u662f\u5bf9\u79f0\u7684\uff1b\u4f46\u662f\u5982\u679c\u662f\u6709\u5411\u56fe\uff0c\u90a3\u4e48\u5c31\u4e0d\u5fc5\u662f\u5bf9\u79f0\u7684\uff08\u867d\u7136\u4e5f\u53ef\u4ee5\u505a\u5230\u5bf9\u79f0\uff09</p> <p>\u90a3\u4e48\u5728\u7a0b\u5e8f\u4e2d\u5982\u4f55\u8bbe\u8ba1\u6570\u636e\u7ed3\u6784\u6765\u50a8\u5b58\u8fd9\u4e2a\u77e9\u9635\u5462\uff1f\u9996\u5148\u6211\u4eec\u5fc5\u987b\u7ed9\u8fd9\u4e2a\u4e8c\u7ef4\u7684\u6570\u7ec4\u5206\u914d\u7a7a\u95f4\u3002C++\u4e2d\u5bf9\u4e8e\u975e1\u7ef4\u7684\u6570\u7ec4\u6ca1\u6709\u592a\u591a\u7684\u8bed\u6cd5\u652f\u6301\uff0c\u56e0\u6b64\u6211\u4eec\u6b64\u5904\u5fc5\u987b\u91c7\u7528\uff1a\"an array of arrays strategy\"\u3002\u5047\u5982\u8bf4\u6211\u4eec\u8981\u50a8\u5b58n\u00d7n\u4e2a\u6d6e\u70b9\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u77e9\u9635\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8868\u793a\uff0c\u800c\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u5fc5\u5b9a\u662f<code>double *</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628an\u4e2a\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u5168\u90e8\u6309\u7167\u987a\u5e8f\u50a8\u5b58\u8d77\u6765\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5fc5\u987b\u50a8\u5b58\u4e00\u4e2a\u6307\u5411\u4e00\u4e2a<code>double *</code>\u7c7b\u578b\u6307\u9488\u7684\u6307\u9488\uff1a<code>double **</code>\u3002\u6240\u4ee5\u903b\u8f91\u4e0a\uff1a\u901a\u8fc7\u8bbf\u95ee\u8fd9\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u5c31\u80fd\u591f\u8bbf\u95ee\u5230\u5bf9\u5e94\u6570\u7ec4\u7684\u9996\u5143\u7d20\u7684\u6307\u9488\uff0c\u7136\u540e\u5c31\u80fd\u975e\u5e38\u63a5\u8fd1\u7d22\u5f15\u64cd\u4f5c\u4e86\u3002</p> <p>\u56e0\u6b64\u53ef\u4ee5\u8bbe\u8ba1\u7c7b\u4f3c\u4e0b\u65b9\u7684\u4ee3\u7801\uff1a</p> <pre><code>int n = ?;\ndouble **matrix;\nmatrix = new double * [n];\nfor (int i = 0; i &lt; 16; i++){\n    matrix[i] = new double[16];\n}\nmatrix[3][4] = 3.14;\nfor (int i = 0; i &lt; 16; i++){\n    delete[] matrix[i];\n}\ndelete[] matrix;\n</code></pre> <p>\u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1aAbout default\uff1a\u5982\u679c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6ca1\u6709\u76f8\u8fde\uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u5e94\u8be5\u662f\u591a\u5c11\uff1f\u6700\u5408\u7406\u7684\u65b9\u5f0f\u662f\u8bbe\u7f6e\u4e3ainfinity\uff1b0\u662f\u4e0d\u7b26\u5408\u903b\u8f91\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u70b9\u5230\u81ea\u5df1\u672c\u8eab\u7684\u8ddd\u79bb\u662f0\u3002\u56e0\u6b64\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u53ef\u4ee5<code>matrix[i][j] = INF;</code>\uff0c\u5176\u4e2dINF\u4ee3\u8868\u65e0\u7a77\u3002\u4ee3\u7801\u5b9e\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>static const double INF;\nconst double Weighted_graph::INF = std::numeric_limits&lt;double&gt;::infinity(); \nfor ( int i = 0; i &lt; N; ++i ) {\n    for ( int j = 0; j &lt; N; ++j ) {\n        matrix[i][j] = INF;\n    }\n    matrix[i][i] = 0;\n}\n</code></pre> <p>\u5f53\u7136\uff0c\u5982\u679cadjacency\u4ee3\u8868\u7684\u4ec5\u4ec5\u662f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u662fconnected\uff0c\u90a3\u4e48\u4e0d\u540c\u9876\u70b9\u4e4b\u95f4\u521d\u59cb\u5316\u5c31\u4e3afalse\uff0c\u800c\u76f8\u540c\u9876\u70b9\u4e4b\u95f4\u5c31\u521d\u59cb\u5316\u4e3atrue\u3002\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a</p> <p>\u4e00\u4e2a\u9876\u70b9\u548c\u81ea\u5df1\u662fconnected\u7684\uff0c\u56e0\u4e3a\u6709\u8def\u5f84\uff08\u4ec5\u8be5\u70b9\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u8def\u5f84\uff09\u3002</p> <pre><code>for ( int i = 0; i &lt; N; ++i ) {\n    for ( int j = 0; j &lt; N; ++j ) {\n        matrix[i][j] = false;\n    }\n\n    matrix[i][i] = true;\n}\n</code></pre> <p>\u5185\u5b58\u8981\u6c42\u5f88\u660e\u663e\u662f\\(\\Theta(n^2)\\)\u3002\u53e6\u5916\u5730\uff1aMatrices where less than 5% of the entries are not the default value (either infinity or 0, or perhaps some other default value) are said to be sparse\u3002</p> <ul> <li>Adjacency list</li> </ul> <p>\u7528\u94fe\u8868\u4e32\u8054\u8d77\u8be5\u9876\u70b9\u7684\u6240\u6709\u7684\u90bb\u5c45</p> <p></p> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe\u6765\u8bf4\uff0c\u7528\u4e00\u4e2a\u7531\u94fe\u8868\u7ec4\u6210\u7684\u6570\u7ec4\u6765\u50a8\u5b58\u8fb9\u3002\u6bcf\u4e00\u4e2a\u9876\u70b9\u90fd\u6709\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u91cc\u9762\u50a8\u5b58\u4e86\u6240\u6709\u548c\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u9876\u70b9\uff1b\u540c\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u90fd\u5e94\u8be5\u5305\u542b\u4e86\u9876\u7ebf\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u4e24\u70b9\u4e4b\u95f4\u7684\u6743\u91cd\u6570\u503c\u3002\u56e0\u6b64\u5173\u4e8e\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a\u7136\u540e\u521b\u5efa\u6570\u7ec4\uff0c\u91cc\u9762\u50a8\u5b58\u7684\u90fd\u662f\u4e00\u4e2a\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002\u800c\u4e3a\u4e86\u51cf\u5c11\u5197\u4f59\u4fe1\u606f\u7684\u8bb0\u5f55\uff0c\u94fe\u8868\u4e2d\u542b\u6709\u7684\u8282\u70b9\uff0c\u5176\u4e2d\u7684\u9876\u70b9\u7d22\u5f15\u90fd\u6bd4\u5934\u7ed3\u70b9\u7684\u9ad8\uff0c\u56e0\u4e3a\u5426\u5219\u5728\u8fd9\u4e2a\u8f83\u9ad8\u7d22\u5f15\u8282\u70b9\u4e3a\u5934\u7ed3\u70b9\u7684\u94fe\u8868\u4e2d\uff0c\u8fd9\u4e2a\u8f83\u5c0f\u9876\u70b9\u7d22\u5f15\u7684\u8282\u70b9\u50a8\u5b58\u7684\u4fe1\u606fvice versa\u3002</p> <pre><code>class Pair {\n    private:\n        double edge_weight;\n        int adacent_vertex;\n    public:\n        Pair( int, double );\n        double weight() const;\n        int vertex() const;\n};\nSingleList&lt;Pair&gt; * array; // SingleList\u662f\u4e4b\u524d\u7684\u94fe\u8868\u76f8\u5173\u7684\u5c01\u88c5\u7684\u7c7b\narray = new SingleList&lt;Pair&gt;[16];\nvoid insert( int i, int j, double w ) {\n    if ( i &lt; j ) {\n        array[j].push_front( Pair(i, w) );\n    } else {\n        array[i].push_front( Pair(j, w) );\n    }\n}\n</code></pre> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u7684\u751f\u52a8\u53ef\u89c6\u5316\uff1a</p> <p></p> <p>\u800c\u5bf9\u4e8e\u65e0\u5411\u56fe\u6765\u8bf4\uff0c\u90a3\u4e48\u4e0a\u9762\u63d0\u5230\u7684\u201c\u51cf\u5c11\u5197\u4f59\u4fe1\u606f\u7684\u8bb0\u5f55\u201d\u5c31\u662f\u4f5c\u5e9f\u7684\u3002\u800c\u5176\u4ed6\u65b9\u9762\u90fd\u662f\u9ad8\u5ea6\u76f8\u4f3c\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u7684\u751f\u52a8\u53ef\u89c6\u5316\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#adjacency-matrix","title":"Adjacency matrix","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#graph-traversal","title":"Graph Traversal","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#overall","title":"Overall","text":"<p>\u4e00\u4e2a\u56fe\u7684\u904d\u5386\uff0ctraversal\uff0c\u662f\u4e00\u79cd\u904d\u5386\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u65b9\u5f0f\uff0c\u548c\u6811\u7684\u904d\u5386\u5341\u5206\u76f8\u4f3c\uff0c\u56fe\u4e2d\u7684\u904d\u5386\u4e5f\u6709\u5e7f\u5ea6\u4f18\u5148\u548c\u6df1\u5ea6\u4f18\u5148\uff0c\u800c\u4e14\u66f4\u5999\u7684\u662f\uff0c\u5b9e\u73b0\u65b9\u5f0f\u90fd\u662f\u9ad8\u5ea6\u76f8\u4f3c\u7684\uff1a\u7528\u961f\u5217\u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\uff0c\u7528\u6808\u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\u3002</p> <p>\u4f46\u662f\u548c\u6811\u7684\u904d\u5386\u4f9d\u7136\u8fd8\u662f\u6709\u5dee\u522b\uff1a\u5728\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u4e2a\u8def\u5f84\uff0c\u800c\u6811\u4e2d\u201c\u4e24\u4e2a\u9876\u70b9\u53ea\u6709\u552f\u4e00\u7684\u4e00\u6761\u8def\u5f84\u201d\u7684\u6027\u8d28\u8ba9\u8fd9\u4e2a\u95ee\u9898\u4ece\u672a\u88ab\u601d\u8003\u8fc7\u3002\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u8bbf\u95ee\u4e00\u4e2a\u9876\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u5f97\u8bb0\u5f55\uff08track\uff09\u90a3\u4e9b\u9876\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff1a</p> <ul> <li>We may have an indicator variable in each vertex</li> <li>We may use a hash table or a bit array</li> <li>Requiring \\(\\Theta(|V|)\\) memory</li> </ul> <p></p> <p>Reference: ChatGPT o1-preview</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#breadth-first-traversal","title":"Breadth First Traversal","text":"<p>\u9009\u5b9a\u4e00\u4e2a\u9876\u70b9\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u201cvisited\u201d\u5e76\u4e14\u653e\u8fdb\u961f\u5217\u3002\u53ea\u8981\u961f\u5217\u4e0d\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5c31\u5f39\u51fa\u961f\u5934\u7684\u9876\u70b9\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u9876\u70b9\u7684unvisited\u7684\u9876\u70b9\u90fdpush\u8fdb\u961f\u5217\u4e2d\uff0c\u540c\u65f6\u8fd9\u4e9b\u88abpush\u7684\u9876\u70b9\u90fd\u8981\u6807\u8bb0\u4e3avisited\u3002\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>void Graph::breadth_first_traversal( Vertex *first ) const {\n    unordered_map&lt;Vertex *, int&gt; hash;\n    hash.insert( first );\n    std::queue&lt;Vertex *&gt; queue;\n    queue.push( first );\n\n    while ( !queue.empty() ) {\n        Vertex *v = queue.front();\n        queue.pop();\n        // Perform an operation on v\n\n        for ( Vertex *w : v-&gt;adjacent_vertices() ) {\n            if ( !hash.member( w ) ) {\n                hash.insert( w );\n                queue.push( w );\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#depth-first-traversal","title":"Depth First Traversal","text":"<p>\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u5165\u6808\u5e76\u6807\u8bb0\u4e3avisited\uff1b\u7136\u540e\u5982\u679c\u6808\u4e0d\u662f\u7a7a\u7684\u8bdd\uff0c\u90a3\u4e48\u5982\u679c\u6808\u9876\u7684\u9876\u70b9\u6709unvisited\u90bb\u5c45\uff0c\u90a3\u4e48\u4e00\u4e2a\u8fd9\u6837\u7684\u90bb\u5c45\u9876\u70b9\u5165\u6808\uff0c\u5e76\u88ab\u6807\u8bb0\u4e3avisited\uff1b\u800c\u5982\u679c\u6808\u9876\u9876\u70b9\u7684\u6240\u6709\u90bb\u5c45\u90fd\u662fvisited\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u5c31\u4f1a\u88ab\u5f39\u51fa\u3002\u9876\u70b9\u4f9d\u6b21\u5165\u6808\u7684\u987a\u5e8f\uff0c\u5c31\u662fDFT\u7684\u987a\u5e8f\u3002</p> <p>\u4e4b\u524d\u5728\u4ecb\u7ecd\u6811\u7684\u65f6\u5019\uff0c\u91cc\u9762\u63d0\u5230\u7684DFT\u662f\u5c06\u6808\u9876\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50\u90fd\u653e\u5165\u6808\u4e2d\u3002\u6811\u7684DFT\u548c\u4efb\u610f\u4e00\u5f20\u56fe\u7684DFT\u4e00\u5b9a\u8981\u5206\u5f00\u6765\uff01\uff01</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#applications","title":"Applications","text":""},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#connectedness","title":"Connectedness","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u56fe\u7684\u904d\u5386\u6765\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u662f\u76f8\u8fde\u7684\uff08i.e.\uff0c\u662f\u5426\u4e24\u70b9\u4e4b\u95f4\u6709\u8def\u5f84\uff09\uff0c\u4ee5\u53ca\u5e2e\u52a9\u6211\u4eec\u628a\u9876\u70b9\u90fd\u5206\u6210connected sub-graphs\u3002</p> <p>\u9996\u5148\u662f\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u76f8\u8fde\uff1a\u53ea\u8981\u4ee5\u5176\u4e2d\u4e00\u4e2a\u9876\u70b9\u4e3a\u8d77\u70b9\uff0c\u7136\u540e\u5f00\u59cb\u56fe\u7684\u904d\u5386\uff0c\u90a3\u4e48\u5982\u679c\u904d\u5386\u4e2d\u8bbf\u95ee\u5230\u4e86\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u77e5\u9053\u8fd9\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u76f8\u8fde\u7684\u4e86\u3002</p> <p>By the way\uff1a\u5982\u679c\u4ee5\u4e00\u4e2a\u9876\u70b9\u8fdb\u884c\u56fe\u7684\u904d\u5386\u4e4b\u540e\uff0c\u5982\u679c\u56fe\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u6807\u8bb0\u4e3a\u4e86visited\u7684\u8bdd\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u4e2a\u56fe\u662fconnected</p> <p>\u5176\u6b21\u662f\u6211\u4eec\u5e0c\u671b\u628a\u9876\u70b9\u90fd\u5206\u6210connected sub-graphs\u3002\u5982\u679c\u6811\u4e2d\u6709unvisited\u9876\u70b9\uff0c\u90a3\u4e48\u5c31\u4efb\u9009\u4e00\u4e2a\u7136\u540e\u8fdb\u884c\u904d\u5386\uff0c\u7136\u540e\u6240\u6709\u7684\u904d\u5386\u5230\u7684\u70b9\u90fd\u653e\u8fdb\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u5e76\u4e14\u90fd\u6807\u8bb0\u4e3avisited\u3002\u91cd\u590d\u8fd9\u6837\u7684\u64cd\u4f5c\u76f4\u5230\u6240\u6709\u7684\u70b9\u90fd\u662fvisited\u7684\u3002</p> <p>Tip\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u4f5c\u4e3a\u96c6\u5408\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u6709\u6700\u5927\u5316\u6548\u7387\u3002\u90a3\u4e48\u76f8\u5f53\u4e8e\uff1a\u5728\u4e00\u6b21\u5b8c\u6574\u7684\u904d\u5386\u4e2d\uff0c\u7b2c\u4e00\u6b21\u9009\u4e2d\u7684unvisited\u5143\u7d20\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u4ee3\u8868\u5143\u7d20\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\u4e0a\u8ff0\u6d41\u7a0b\u7684\u5b9e\u73b0\u8fd8\u6709\u51e0\u4e2a\u7ec6\u8282\u95ee\u9898\uff1a\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u96c6\u5408\u7528\u6765\u50a8\u5b58\u6240\u6709\u7684unvisited\u9876\u70b9\uff0c\u4ece\u800c\u80fd\u591f\u5728\u5e38\u6570\u65f6\u95f4\u5185\u8bbf\u95ee\u4e00\u4e2aunvisited\u9876\u70b9\uff0c\u5e76\u4e14\u5728\u8fd9\u4e2a\u9876\u70b9\u5728\u88ab\u904d\u5386\u8bbf\u95ee\u5230\u540e\uff0c\u4ece\u8fd9\u4e2a\u96c6\u5408\u4e2d\u5220\u9664\u5462\uff1f\u4e00\u4e2a\u597d\u7684solution\u662f\uff1a\u7528\u54c8\u5e0c\u8868\u6765\u50a8\u5b58\u6240\u6709\u7684\u672a\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\uff1b\u6216\u8005\u662f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u50a8\u5b58\u9876\u70b9\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9876\u70b9\u50a8\u5b58\u5b83\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u6b64\u5904\u6211\u4eec\u6765\u63a2\u8ba8\u540e\u8005\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u5982\u4e0b\u56fe\uff1a\u521b\u5efa\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u672a\u88ab\u8bbf\u95ee\u7684\uff0c\u7136\u540e\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4\u7d22\u5f15\u662f\u9876\u70b9\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u662f\u8be5\u9876\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u3002</p> <p></p> <p>\u90a3\u4e48\u5220\u9664\u5143\u7d20\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u7684\u64cd\u4f5c\u503c\u5f97\u6ce8\u610f\uff1a\u5047\u5982\u8bf4\u6211\u4eec\u5220\u9664\u6389D\u5143\u7d20\uff0c\u90a3\u4e48\u901a\u8fc7D\u5728\u6570\u7ec4\u4e8c\u4e2d\u8fdb\u884c\u7d22\u5f15\uff0c\u53d1\u73b0\u5728\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u662f3\uff0c\u56e0\u6b64\u6210\u529f\u5728\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u76843\u53f7\u7d22\u5f15\u4f4d\u7f6e\u5143\u7d20\u3002\u4f46\u662f\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u5c06\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20K\u79fb\u52a8\u52303\u53f7\u4f4d\u7f6e\uff0c\u540c\u65f6\u901a\u8fc7K\u7d22\u5f15\u7b2c\u4e8c\u4e2a\u6570\u7ec4\uff0c\u5c06K\u7684\u7d22\u5f15\u4fe1\u606f\u66f4\u65b0\u4e3a3\uff0c\u56e0\u4e3a\u8fd9\u6b63\u662fK\u5143\u7d20\u79fb\u52a8\u5230\u7684\u5220\u9664D\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u7a7a\u4f4d\u3002</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#unweighted-path-length","title":"Unweighted path length","text":"<p>\u95ee\u9898\uff1a\u5728\u4e00\u4e2a\u6ca1\u6709\u6743\u91cd\u7684\u56fe\u4e2d\uff0c\u627e\u5230\u4e00\u4e2a\u9876\u70b9\u5230\u53e6\u5916\u6240\u6709\u9876\u70b9\u7684\u8ddd\u79bb\u3002\u5176\u4e2d\u8ddd\u79bb\u7684\u5b9a\u4e49\u662f\uff1a\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002Solution\u5982\u4e0b\uff1a</p> <p></p> <p>\u7ef4\u62a4\u4e00\u4e2a\u6808\uff1a\u5f00\u59cb\u9009\u4e00\u4e2a\u611f\u5174\u8da3\u7684\u9876\u70b9\u5165\u6808\u5e76\u6807\u8bb0\u4e3avisited\uff0c\u8bb0\u4e3alayer0\uff1b\u7136\u540e\u9876\u70b9\u51fa\u6808\uff0c\u9876\u70b9\u7684\u90bb\u5c45\u5168\u90e8\u5165\u6808\u5e76\u6807\u8bb0\u4e3avisited\uff0c\u8bb0\u4e3alayer1\uff1b\u7136\u540e\u76ee\u524d\u6240\u6709\u7684\u5143\u7d20\u90fd\u8981\u51fa\u6808\uff0c\u7136\u540e\u6bcf\u51fa\u6808\u4e00\u4e2a\u9876\u70b9\uff0c\u5c31\u628a\u5b83\u7684\u90bb\u5c45\u7684\u5165\u6808\uff1b\u8fd9\u6837\u91cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u76ee\u524d\u6240\u6709\u7684\u6808\u4e2d\u5143\u7d20\u90fd\u51fa\u6808\uff0c\u7136\u540e\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u80fd\u591f\u5165\u6808\u4e86\uff0c\u6808\u53d8\u6210\u4e86\u7a7a\u6808\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u7ed3\u675f\u64cd\u4f5c\uff08\u5176\u5b9e\u4e0a\u8ff0\u7684\u6240\u6709\u64cd\u4f5c\u5c31\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u3002\u7ed3\u679c\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u5c31\u80fd\u77e5\u9053\u8fd9\u4e2a\u6211\u4eec\u611f\u5174\u8da3\u7684\u70b9\u5230\u6bcf\u4e00\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb\u662f\u591a\u5c11\u4e86\u3002</p> <p>$Theorem: $If, in a breadth-first traversal of a graph, two vertices v and w appear in layers Li and Lj, respectively and {v, w} is an edge in the graph, then i and j differ by at most one. \u8bc1\u660e\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#identifying-bipartite-graphs","title":"Identifying bipartite graphs","text":"<p>\u4e8c\u5206\u56fe\uff0cbipartite graph\u7684\u5b9a\u4e49\uff1aA bipartite graph is a graph where the vertices V can be divided into two disjoint sets V1 and V2 such that every edge has one vertex in V1 and the other in V2 . \u8089\u773c\u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u5176\u5b9e\u662f\u4e00\u4ef6\u56f0\u96be\u7684\u4e8b\u60c5\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u7b97\u6cd5\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u4e8c\u5206\u56fe\u7684\u5224\u65ad\u5462\uff1f\u5728\u79bb\u6563\u6570\u5b66\u4e2d\uff0c\u4ecb\u7ecd\u4e86\u4e24\u79cd\u989c\u8272\u6807\u8272\u7684\u65b9\u5f0f\u6765\u5224\u65ad\u4e00\u5f20\u56fe\u662f\u4e0d\u662f\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u80fd\u4e0d\u80fd\u7c7b\u4f3c\u5730\u8bbe\u8ba1\u6d41\u7a0b\u5462\uff1f\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <p></p> <p>\u4e5f\u5c31\u662f\u8bf4\u7b2c\u4e00\u6b21\u5165\u6808\u7684\u7528\u7ea2\u8272\uff0c\u7b2c\u4e8c\u6b21\u7684\u662f\u84dd\u8272\uff0c\u7b2c\u4e09\u6b21\u7684\u662f\u7ea2\u8272\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1b\u7136\u540e\u5f39\u6808\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u5143\u7d20\u5468\u56f4\u7684\u5143\u7d20\uff0c\u5e94\u8be5\u8981\u4e48\u662funvisited\uff0c\u8981\u4e48\u662f\u53e6\u5916\u4e00\u4e2a\u989c\u8272\u7684\uff0ci.e.\uff0c\u4e0d\u80fd\u548c\u81ea\u5df1\u7684\u989c\u8272\u76f8\u540c\uff1b\u4e00\u65e6\u53d1\u73b0\u4e86\u53cd\u4f8b\uff0c\u90a3\u4e48\u7acb\u9a6c\u76f4\u5230\u8fd9\u4e2a\u5143\u7d20\u4e0d\u662f\u4e8c\u5206\u56fe\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html#painpoint_1","title":"Painpoint","text":"<ul> <li>Any tree is a bipartite graph.</li> <li>DAG(Directed Acyclic Graphs) must have at least one vertex with no incoming edges (source) and at least one vertex to be the sink.</li> <li>Undirected Graph \\(G = (V, E)\\) is stored in an adjacency matrix \\(A\\). We let \\(A_{i, j}=1\\) if and only if there is an edge between \\(V_i\\) and \\(V_j\\) in G, otherwise \\(A_{i,j}=0\\). We want to know whether there is a path \\textbf{with length \\(m\\)} between \\(V_i\\) and \\(V_j\\) by visiting \\(P_{i,j}\\); if \\(P_{i,j}\\)=0, then there is no such path. Then P is \\(A^m\\). </li> </ul> <p>\u8fd9\u5728\u79bb\u6563\u6570\u5b66\u4e2d\u5b66\u8fc7</p> <ul> <li>Both the time complexity of DFS and that of BFS are \\(\\Theta(|V| + |E|)\\). \u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u9876\u70b9\u90fd\u904d\u5386\u8fc7\uff0c\u800c\u6bcf\u4e00\u6761\u8fb9\u90fd\u68c0\u67e5\u8fc7\uff08\u68c0\u67e5\u4f53\u73b0\u5728\uff1a\u4e00\u4e2a\u70b9\u7684\u90bb\u5c45\u662f\u5426\u662fvisited\uff09</li> <li>In a simple undirected graph with 3n vertices and 3 connected components, the maximum number of edges in the graph is \\(\\frac{(3n-1)(3n-2)}{2}\\), \u800c\u4e0d\u662f\\(\\frac{3(n-1)n}{2}\\)</li> <li>A directed graph with n vertices has n edges may be strongly connected.</li> <li>Adjacency matrix is not better than adjacency list when inserting a new vertex.</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html","title":"\u641c\u7d22\u4e0e\u6392\u5e8f","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#_2","title":"\u4e8c\u5206\u641c\u7d22","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#_3","title":"\u539f\u7406\u4e0e\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u5e0c\u671b\u5728\u4e00\u4e2a\u6ca1\u6709\u987a\u5e8f\u7684\u6570\u7ec4\u91cc\u9762\uff0c\u5e0c\u671b\u627e\u5230val\u5143\u7d20\uff0c\u5982\u679c\u662f\u7ebf\u6027\u641c\u7d22\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f<code>O(n)</code>\u3002\u90a3\u4e48\u5982\u679c\u5728\u6709\u5e8f\u7684\u5e8f\u5217\uff08\u524d\u63d0!\uff09\u4e2d\uff0c\u80fd\u4e0d\u80fd\u66f4\u5feb\u5730\u627e\u5230\u6211\u5e0c\u671b\u7684\u5143\u7d20\u5462\uff1f\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u3002</p> <p>\u4e8c\u5206\u641c\u7d22\u4e2d\uff0c\u6709\u4e24\u4e2a\u4e0b\u6807\uff0c\u4e00\u4e2afirst\u4e00\u4e2alast\uff0c\u4e00\u5934\u4e00\u5c3e\u3002\u7136\u540e\u9996\u5148\u8ba1\u7b97\u5e8f\u5217\u4e2d\u95f4\u7684\u5143\u7d20\uff1a<code>int middle = (first + last)/2</code>\uff0c\u7136\u540e\u5224\u65ad<code>arr[middle] &lt;=&gt; val</code>\u3002\u5982\u679cval\u66f4\u5927\uff0c\u8bf4\u660e\u5728middle\u53f3\u8fb9\uff0c\u53cd\u4e4b\u5219\u5728\u5de6\u8fb9\u3002\u540c\u65f6\uff0c\u8981\u5bf9first last\u8fd9\u4e24\u4e2a\u53c2\u6570\u8fdb\u884c\u66f4\u65b0\uff0c\u628a\u53bb\u9664\u6389\u4e00\u534a\u90e8\u5206\u4e4b\u540e\u5269\u4e0b\u7684\u5e8f\u5217\u4f5c\u4e3a\u65b0\u7684\u64cd\u4f5c\u5bf9\u8c61\u3002\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u505c\u4e0b\u6765\u5462\uff1f\u5047\u5982\u8bf4val\u4e0d\u5b58\u5728\u5e8f\u5217\u91cc\u9762\uff0c\u90a3\u4e48\u6700\u540elast\u4e00\u5b9a\u4f1a\u5728first\u4e4b\u524d\u3002\u8fd9\u5c31\u662f\u5faa\u73af\u505c\u6b62\u7684\u6807\u5fd7\u3002</p> <pre><code>while (first &lt;= last){    \n    int middle = (first + last)/2;\n    if (arr[middle] &gt; val):{last = middle-1;}\n    if (arr[middle] &lt; val):{last = middle+1;}\n}\n</code></pre> <pre><code>// binarysearch.cpp\n#include &lt;iostream&gt;\nusing namespace std;\nint BinarySearch(int arr[], int size, int val){\n    int first = 0;\n    int last = size - 1;\n    while (first &lt;= last){\n        int mid = (first + last) / 2;\n        if (arr[mid] == val){\n            return mid;\n        }\n        else if (arr[mid] &gt; val){\n            last = mid - 1;\n        }\n        else {\n            first = mid + 1;\n        }\n    }\n    return -1;\n}\n</code></pre> <p>\u4e8c\u5206\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(logn)\\)\uff0c\u5bf9\u6570\u65f6\u95f4\u6bd4\u7ebf\u6027\u65f6\u95f4\u597d\u5f88\u591a\u3002\u4f46\u662f\u5982\u4f55\u4e25\u8c28\u5730\u8bf4\uff1a\u4e3a\u4ec0\u4e48\u4e8c\u5206\u641c\u7d22\u662f\u5bf9\u6570\u65f6\u95f4\uff1f\u5176\u5b9e\u4e8c\u5206\u641c\u7d22\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u4e00\u9897BST\u6811\uff08\u4e8c\u53c9\u67e5\u627e\u6811\uff09\u4eceroot\u6839\u8282\u70b9\u5f00\u59cb\u641c\u7d22\u7684\u8fc7\u7a0b\uff0c\u6bcf\u4e00\u6b21\u641c\u7d22\u53ea\u4f1a\u6cbf\u7740\u4e00\u6761\u8def\u5f84\u641c\u7d22\u4e0b\u53bb\u3002\u5728\u8fd9\u9897\u6811\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6709\u5b69\u5b50\u7684\u8282\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u6709\u53f3\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u5927\u4e8e\u7236\u8282\u70b9\uff1b\u5982\u679c\u6709\u5de6\u5b50\u8282\u70b9\uff0c\u5b83\u4e00\u5b9a\u5c0f\u4e8e\u7236\u8282\u70b9\u3002\u53ef\u4ee5\u8bf4\uff0c\u4e8c\u5206\u641c\u7d22\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u5c42\u6570\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#_4","title":"\u4e8c\u5206\u641c\u7d22\u9012\u5f52\u5b9e\u73b0","text":"<p>\u9012\u5f52\u7684\u5f62\u5f0f\u662f\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u3002\u5728\u4e0a\u9762\u4e2d\uff0c\u63d0\u5230\u8fc7\u201c\u628a\u53bb\u9664\u6389\u4e00\u534a\u90e8\u5206\u4e4b\u540e\u5269\u4e0b\u7684\u5e8f\u5217\u4f5c\u4e3a\u65b0\u7684\u64cd\u4f5c\u5bf9\u8c61\u201d\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a\u201c\u5bf9\u4e8e\u4e00\u4e2afirst \u4e0e last\u4e4b\u95f4\u7684\u6570\u7ec4\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u8981\u4e48\u66f4\u65b0first\u6216\u8005last\u4e0b\u6807\uff0c\u5bf9\u539f\u6570\u7ec4\u518d\u4e00\u6b21\u8fdb\u884c\u4e8c\u5206\uff1b\u8981\u4e48\u53d1\u73b0\u4e86val\u51fd\u6570\u201d\u8fd9\u79cd\u64cd\u4f5c\u4e3a\u4e00\u4e2a\u5355\u5143\uff1b\u9012\u5f52\u7ed3\u675f\u7684\u6761\u4ef6\u662f<code>first &lt; last</code>\u3002</p> <pre><code>// binarysearch_recursion.cpp\n#include &lt;iostream&gt;\nusing namespace std;\n\nint BinarySearch(int arr[], int i, int j, int val){\n    // \u9012\u5f52\u7ed3\u675f\u7684\u6761\u4ef6\u4e00\u5b9a\u8981\u6ce8\u610f\uff01\n    if (i &gt; j){return -1;}\n    int mid = (i+j)/2;\n    if (arr[mid] == val){\n        return mid;\n    }\n    else if (arr[mid] &gt; val){\n        return BinarySearch(arr, i, mid - 1, val);\n    }\n    else{\n        return BinarySearch(arr, mid + 1, j, val);\n    }\n}\n</code></pre> <p>\u4f46\u662f\u9012\u5f52\u770b\u4f3c\u4f18\u96c5\u7f8e\u4e3d\uff0c\u7136\u800c\u5b83\u4e5f\u6709\u4e00\u4e9b\u5934\u75bc\u7684\u5730\u65b9\uff1a</p> <ul> <li>\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u90fd\u4f1a\u5728\u8c03\u7528\u6808\u4e0a\u5206\u914d\u65b0\u7684\u6808\u5e27\uff08stack frame\uff09\uff0c\u8fd9\u4f1a\u5360\u7528\u5185\u5b58\u3002\u5982\u679c\u9012\u5f52\u8fc7\u6df1\uff0c\u4f1a\u8d85\u51fa\u6808\u7684\u6700\u5927\u6df1\u5ea6\uff08Python \u9ed8\u8ba4\u9650\u5236\u4e3a 1000 \u6b21\u8c03\u7528\uff09\uff0c\u5bfc\u81f4 <code>RecursionError: maximum recursion depth exceeded in comparison</code> \u9519\u8bef\uff1a</li> <li>\u5bf9\u4e8e\u67d0\u4e9b\u9012\u5f52\u7b97\u6cd5\uff0c\u5b83\u4eec\u5229\u7528\u9012\u5f52\u7684\u65f6\u5019\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5947\u9ad8\u65e0\u6bd4\uff0c\u4f8b\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u8ba1\u7b97\uff1a\\(O(n)\\)\u3002\u4e0b\u9762\u7684\u7a0b\u5e8f\u5728n\u523050\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u4e00\u8f6e\u751a\u81f3\u9700\u8981\u957f\u8fbe10\u5206\u949f\u3002</li> </ul> <pre><code>int f(n){\n\u00a0 \u00a0 if n == 1 or 0:\n\u00a0 \u00a0 \u00a0 \u00a0 return 1;\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 return f(n-1) + f(n-2);\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#binary-search-trees","title":"Binary Search Trees \u4e8c\u53c9\u67e5\u627e\u6811","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#definition-and-structure","title":"Definition and Structure","text":"<p>\u5bf9\u4e8e\u4e00\u4e2aabstract list\u6765\u8bf4\uff0c\u5b83\u7684\u6392\u5e8f\u90fd\u662f\u7531\u7f16\u7a0b\u8005\u6765\u5b9e\u73b0\u7684\u3002\u4f46\u662f\u8fd8\u6709\u4e00\u79cdlist\uff1aabstract sorted list\uff0c\u5b83\u7684\u5143\u7d20\u662f\u6309\u7167\u67d0\u79cd\u7279\u5b9a\u987a\u5e8f\u6392\u5e8f\u7684\u3002\u5728Sorted List ADT\u95ee\u9898\u4e2d\uff0c\u4e00\u822c\u63a2\u8ba8\u7684\u6709\u4ee5\u4e0b\u8bdd\u9898\uff1a</p> <ul> <li>Finding the smallest and largest entries</li> <li>Finding the kth largest entry</li> <li>Find the next larger and previous smaller objects of a given object which may or may not be in the container</li> <li>Iterate through those objects that fall on an interval [a, b]</li> </ul> <p>\u5728array or linked list\u5b9e\u73b0\u7684sorted list\u4e2d\uff0c\u63d2\u5165\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u56e0\u4e3a\u63d2\u5165\u7684\u4f4d\u7f6e\u53ef\u80fd\u662f\u4efb\u4f55\u5730\u65b9\uff0c\u56e0\u6b64\u904d\u5386\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u4f46\u662f\u8fd9\u5f88\u660e\u663e\u4e0d\u662f\u6211\u4eec\u5e0c\u671b\u770b\u5230\u7684\u7ed3\u679c\u3002\u4e8e\u662f\uff0c\u4e8c\u5206\u641c\u7d22\u6811\u5c31\u662f\u4e00\u79cd\u5f88\u597d\u7684sorted list\u7ed3\u6784\uff0c\u800c\u65e2\u7136\u80fd\u591f\u8bf4\u201c\u975e\u5e38\u597d\u201d\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u68f5\u6811\u4e2d\u4f9d\u7136\u6709\u5f88\u597d\u7684\"sorted\"\u7ed3\u6784\u8bbe\u8ba1\uff1aIn a binary search tree, we require that</p> <ul> <li>all objects in the left sub-tree to be less than the object stored in the root node</li> <li>all objects in the right sub-tree to be greater than the object in the root object</li> <li>the two sub-trees are themselves binary search trees</li> </ul> <p>\u4e8e\u662f\u6211\u4eec\u80fd\u591f\u6839\u636e\u4e0a\u8ff0\u7684\u8981\u6c42\uff0c\u7ed9\u51farecursive\u5b9a\u4e49\uff1aThe left sub-tree (if any) is a binary search tree and all elements are less than the root element, and the right sub-tree (if any) is a binary search tree and all elements are greater than the root element. </p> <p>:warning:\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u5c31\u662fsorted array!\u4e14\u6362\u800c\u8a00\u4e4b\u4e5f\u662f\u6210\u7acb\u7684\uff1a \u5982\u679c\u4e00\u9897\u4e8c\u53c9\u6811\u6ee1\u8db3\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u8fd9\u68f5\u6811\u5c31\u662f\u67e5\u627e\u4e8c\u53c9\u6811\uff01</p> <p>\u4ee5\u4e0b\u662f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u4f8b\u5b50\uff1a</p> <p></p> <p>\u4e3a\u4e86\u641c\u7d22\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u8981\u5728\u6ca1\u6709\u627e\u5230\u76f8\u540c\u5143\u7d20\u4e4b\u524d\uff0c\u4e0d\u65ad\u7684\u6bd4\u8f83\u4e0e\u5143\u7d20\u548c\uff08\u5b50\u6811\uff09\u6839\u8282\u70b9\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u88ab\u8ba4\u4e3a\u662fO(h)\u3002\u4f46\u662f\uff0c\u5047\u5982\u8bf4\u8fd9\u68f5\u6811\u975e\u5e38\u7684\u4e0d\u5e73\u8861\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff1a\u6570\u5217\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u800c\u4e14\u6839\u8282\u70b9\u662f\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u53f3\u5b69\u5b50\u8282\u70b9\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u9000\u5316\u5230\u4e86O(n)\uff0c\u8fd9\u88ab\u8ba4\u4e3a\u662fworst case\u3002</p> <p>In a Binary Search Tree, the concept of \u2019height-balanced\u2019 for a node is defined as: the gap between the height of the left sub-tree and the right sub-tree is no greater than 1.</p> <p></p> <p>\u66f4\u6050\u6016\u7684\uff0c\u4e00\u4e2a\u76f8\u540c\u7684\u6570\u5217\uff0c\u5982\u679c\u6839\u8282\u70b9\u7684\u9009\u53d6\u4e0d\u540c\uff0c\u90a3\u4e48\u6574\u68f5\u6811\u7684\u7ed3\u6784\u90fd\u4f1a\u975e\u5e38\u4e0d\u4e00\u6837\uff0c\u540c\u65f6\u4e5f\u5bfc\u81f4\u4e00\u4e9b\u64cd\u4f5c\uff0c\u4f8b\u5982\u641c\u7d22\uff0c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e0d\u4e00\u6837\u3002\u4f8b\u5982\u4e0b\u56fe\uff1a\u5728\u4e0b\u56fe\u4e2d\u8fdb\u884c\u641c\u7d22\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5e0c\u671b\u4f7f\u7528\u7684\u662f\u5de6\u4e0a\u89d2\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u800c\u4e0d\u662f\u6700\u53f3\u8fb9\u7684\u3002</p> <p></p> <p>\u91cd\u8981\uff01\u4e0d\u7ba1\u4e8c\u53c9\u67e5\u627e\u6811\u600e\u4e48\u753b\uff0c\u5b83\u7684in-order\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u662f\u4e00\u6837\u7684\uff01\u6240\u4ee5\u8bf4\u53ea\u8981\u77e5\u9053\u524d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u5c31\u80fd\u591f\u786e\u5b9a\u6811\u7684\u7ed3\u6784\uff01</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#implementation","title":"Implementation","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5efa\u7acb\u6765\u8bf4\uff0c\u8981\u660e\u786e\u5bf9\u91cd\u590d\u5143\u7d20\u7684\u5904\u7406\u6001\u5ea6\uff1aWe will assume that in any binary tree, we are not storing duplicate elements unless otherwise stated\u3002\u8fd9\u662f\u56e0\u4e3a\uff1aIn reality, it is seldom the case where duplicate elements in a container must be stored as separate entities\u3002</p> <p>We will look at an implementation of a binary search tree in the same spirit as we did with our \\(Single\\_list\\) class. \u90a3\u4e48\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u7684\u662f\uff0c\u548c\u5355\u5411\u94fe\u8868\u975e\u5e38\u76f8\u4f3c\u5730\uff0c\u8fd9\u4e2a\u7c7b\u91cc\u9762\u4e00\u5b9a\u50a8\u5b58\u4e86\u6839\u8282\u70b9\u7684\u6307\u9488\u3002</p> <p>\u4e0b\u9762\u4ee3\u7801\u662f\u4e00\u4e2aC++\u6a21\u677f\u7c7b\u7684\u5b9a\u4e49\uff0c\u5b83\u7ee7\u627f\u81ea<code>Binary_node</code>\u7c7b\uff0c\u5e76\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a<code>Binary_search_node</code>\u7684\u7c7b\uff0c\u7528\u4e8e\u5b9e\u73b0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8282\u70b9\uff1a</p> <pre><code>// Binary_node.h\n#include &lt;algorithm&gt; // For std::max\n\ntemplate &lt;typename Type&gt;\nclass Binary_node {\nprotected:\n    Type element; // \u5b58\u50a8\u5143\u7d20\n    Binary_node *left_tree; // \u6307\u5411\u5de6\u5b50\u6811\u7684\u6307\u9488\n    Binary_node *right_tree; // \u6307\u5411\u53f3\u5b50\u6811\u7684\u6307\u9488\n\npublic:\n    // \u6784\u9020\u51fd\u6570\n    Binary_node(Type const &amp;obj)\n        : element(obj), left_tree(nullptr), right_tree(nullptr) {\n        // \u7a7a\u6784\u9020\u51fd\u6570\n    }\n\n    // \u8bbf\u95ee\u5143\u7d20\u7684\u8bbf\u95ee\u5668\n    Type retrieve() const {\n        return element;\n    }\n\n    // \u8bbf\u95ee\u5de6\u5b50\u6811\u7684\u8bbf\u95ee\u5668\n    Binary_node *left() const {\n        return left_tree;\n    }\n\n    // \u8bbf\u95ee\u53f3\u5b50\u6811\u7684\u8bbf\u95ee\u5668\n    Binary_node *right() const {\n        return right_tree;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\n    bool is_leaf() const {\n        return left() == nullptr &amp;&amp; right() == nullptr;\n    }\n\n    // \u83b7\u53d6\u6811\u7684\u5927\u5c0f\n    int size() const {\n        return 1 \n            + (left() == nullptr ? 0 : left()-&gt;size()) \n            + (right() == nullptr ? 0 : right()-&gt;size());\n    }\n\n    // \u83b7\u53d6\u6811\u7684\u9ad8\u5ea6\n    int height() const {\n        return empty() ? -1 : 1 + std::max(left()-&gt;height(), right()-&gt;height());\n    }\n\n    // \u6e05\u7a7a\u6811\uff0c\u9012\u5f52\u5220\u9664\u6240\u6709\u8282\u70b9\n    void clear(Binary_node *&amp;ptr_to_this) {\n        if (empty()) {\n            return;\n        }\n        left()-&gt;clear(left_tree);\n        right()-&gt;clear(right_tree);\n        delete this;\n        ptr_to_this = nullptr;\n    }\n\nprivate:\n    // \u8f85\u52a9\u51fd\u6570\uff0c\u68c0\u67e5\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\n    bool empty() const {\n        return this == nullptr;\n    }\n};\n</code></pre> <pre><code>#include \"Binary_node.h\"\n\ntemplate &lt;typename Type&gt;\nclass Binary_search_node : public Binary_node&lt;Type&gt; {\n    using Binary_node&lt;Type&gt;::element;\n    using Binary_node&lt;Type&gt;::left_tree;\n    using Binary_node&lt;Type&gt;::right_tree;\n\npublic:\n    Binary_search_node(Type const &amp;); // \u6784\u9020\u51fd\u6570\n\n    Binary_search_node* left() const; // \u8fd4\u56de\u5de6\u5b50\u6811\u7684\u6307\u9488\n    Binary_search_node* right() const; // \u8fd4\u56de\u53f3\u5b50\u6811\u7684\u6307\u9488\n    Type front() const; // \u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u5143\u7d20\n    Type back() const; // \u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u5143\u7d20\uff08\u4e0efront\u76f8\u540c\uff09\n    bool find(Type const &amp;) const; // \u67e5\u627e\u5143\u7d20\u662f\u5426\u5b58\u5728\n\n    bool insert(Type const &amp;); // \u63d2\u5165\u5143\u7d20\n    bool erase(Type const &amp;, Binary_search_node* &amp;); // \u5220\u9664\u5143\u7d20\n};\n</code></pre> <p>\u8be5\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4f1a\u4f7f\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff1b\u540c\u65f6<code>Type retrieve() const;bool is_leaf() const;int size() const;int height() const;</code>\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u662f\u7ee7\u627f\u81ea\u57fa\u7c7b\u7684\u3002</p> <p>\u57fa\u7c7b\u8fd4\u56de\u7684\u662f\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u90a3\u4e48\u6b64\u5904\u6211\u4eec\u5fc5\u987b\u8fd4\u56deBinary_search_node\u7684\u6307\u9488\uff0c\u800c\u4e14\u662f\u4e00\u5de6\u4e00\u53f3\uff0c\u6362\u800c\u8a00\u4e4b\u5c31\u662f\u9700\u8981\u5bf9\u57fa\u7c7b\u8fd4\u56de\u7684\u6307\u9488\u8fdb\u884c\u4e00\u6b21\u7c7b\u578b\u7684\u8f6c\u6362\uff1a</p> <pre><code>template &lt;typename Type&gt;\nBinary_search_node&lt;Type&gt; *Binary_search_node&lt;Type&gt;::left() const {\n        return reinterpret_cast&lt;Binary_search_node *&gt;( Binary_node&lt;Type&gt;::left() );\n}\n\ntemplate &lt;typename Type&gt;\nBinary_search_node&lt;Type&gt; *Binary_search_node&lt;Type&gt;::right() const {\n        return reinterpret_cast&lt;Binary_search_node *&gt;( Binary_node&lt;Type&gt;::right() );\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#basic-operation","title":"Basic Operation","text":"<p>\u7b2c\u4e00\u79cd\u64cd\u4f5c\u662f\u641c\u7d22\u6700\u5c0f\u548c\u6700\u5927\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e00\u76f4\u8d70\u5de6\u3001\u53f3\u5b69\u5b50\u8282\u70b9\u76f4\u5230\u8bbf\u95ee\u7684\u5b50\u8282\u70b9\u4e0d\u518d\u62e5\u6709\u5de6\u3001\u53f3\u8282\u70b9\uff1a\uff08\u6ce8\u610f\uff01\u6781\u503c\u4e0d\u4e00\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9\uff01\uff09\u3002\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(h)\uff0c\u5176\u4e2dh\u4ee3\u8868\u6811\u7684\u9ad8\u5ea6\u3002</p> <pre><code>template &lt;typename Type&gt;\nType Binary_search_node&lt;Type&gt;::front() const {\n    return (  left() == nullptr ) ? retrieve() : left()-&gt;front();\n}\ntemplate &lt;typename Type&gt;\nType Binary_search_node&lt;Type&gt;::back() const {\n    return ( right() == nullptr ) ? retrieve() : right()-&gt;back();\n}\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u5c31\u662f\u641c\u7d22\u5143\u7d20\uff0c\u90a3\u4e48\u5143\u7d20\u548c\u8282\u70b9\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\u5c31\u662ftrue\uff0c\u5982\u679c\u5143\u7d20\u6bd4\u6839\u8282\u70b9\u5927\uff0c\u5c31\u8bbf\u95ee\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u53cd\u4e4b\u8bbf\u95ee\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u3002\u76f4\u5230\u8bbf\u95ee\u5230\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u5143\u7d20\u4e0d\u518d\u4e8c\u53c9\u641c\u7d22\u6811\u91cc\u9762\u3002</p> <pre><code>template &lt;typename Type&gt;\nbool Binary_search_node&lt;Type&gt;::find( Type const &amp;obj ) const {\n    if ( retrieve() == obj ) {\n        return true;\n    }\n\n    if( obj &lt; retrieve() )\n        return left()==nullptr? false : left()-&gt;find( obj );\n    else\n        return right()==nullptr? false : right()-&gt;find( obj );\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u5f88\u5de7\u5999\u7684\u5730\u65b9\u5728\u4e8e\u4f7f\u7528\u4e86\u9012\u5f52\u7ed3\u6784\uff0c\u907f\u514d\u4e86\u590d\u6742\u7684\u5faa\u73af\u7ed3\u6784\u3002\u540c\u6837\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(h)\u3002</p> <p>\u7b2c\u4e09\u79cd\u64cd\u4f5c\u662f\u63d2\u5165\u3002Insertion will be performed by a single \\(insert\\) member function which places the object into the correct location\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\u4efb\u4f55\u4e00\u523b\u7a7a\u7684\u8282\u70b9\u90fd\u53ef\u80fd\u662f\u63d2\u5165\u7684\u5730\u65b9\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u5c31\u50cffind\u64cd\u4f5c\u4e00\u6837\uff0c\u6211\u4eec\u904d\u5386\u8fd9\u68f5\u6811\uff0c\u5982\u679c\u53d1\u73b0\u4e86\u67d0\u4e00\u4e2a\u8282\u70b9\u5143\u7d20\u548c\u63d2\u5165\u5143\u7d20\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5return\u3002\u5426\u5219\uff0c\u6211\u4eec\u6700\u7ec8\u4f1a\u5230\u8fbe\u4e00\u4e2a\u7a7a\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bbf\u95ee\u5230\u4e86\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5730\u65b9\u5c31\u662f\u5143\u7d20\u63d2\u5165\u7684\u5730\u65b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(h)\u3002\u4ee3\u7801\u6a21\u677f\u5982\u4e0b\uff1a</p> <p></p> <p>\u7b2c\u56db\u79cd\u64cd\u4f5c\u662f\u5220\u9664\u3002\u5220\u9664\u7684\u8282\u70b9\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\u7b2c\u4e00\u79cd\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u7b2c\u4e8c\u79cd\u662f\u8be5\u8282\u70b9\u6070\u597d\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u7b2c\u4e09\u79cd\u662f\u8be5\u8282\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u4e5f\u5c31\u662f\u6ee1\u8282\u70b9\u3002\u5982\u679c\u662f\u5220\u9664\u53f6\u5b50\u7ed3\u70b9\uff0c\u90a3\u4e48\u8282\u70b9\u5220\u9664\uff0c\u5e76\u4e14\u5b83\u7684\u7236\u8282\u70b9\u8bb0\u5f55\u7684left_tree\u5e94\u8be5\u8bbe\u7f6e\u4e3a\u7a7a\u6307\u9488\u3002\u5982\u679c\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u8be5\u8282\u70b9\u552f\u4e00\u7684\u5b69\u5b50\u76f4\u63a5\u4e0a\u4f4d\uff0c\u8fde\u63a5\u5230\u8be5\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e0a\uff08\u5b59\u5b50\u627e\u7237\u7237\uff09\uff0c\u8fd9\u6837\u64cd\u4f5c\u5728\u6307\u9488\u7684\u4ee3\u7801\u8bbe\u8ba1\u4e0a\u8f83\u4e3a\u65b9\u4fbf\u3002</p> <p>\u5982\u679c\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u76f8\u5bf9\u6765\u8bf4\u8f83\u4e3a\u590d\u6742\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e24\u6b65\u64cd\u4f5c\uff1a\u7b2c\u4e00\u6b65\uff0c\u627e\u5230\u8be5\u8282\u70b9\u7684\u53f3\u5b50\u6811\u91cc\u9762\u7684\u6700\u5c0f\u503c\uff0c\u5e76\u4e14replace\u6389\u8be5\u8282\u70b9\uff1b\u7b2c\u4e8c\u6b65\uff0c\u5220\u9664\u6389\u8fd9\u4e2a\u53f3\u5b50\u6811\u91cc\u9762\u7684\u6700\u5c0f\u503c\u8282\u70b9\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5220\u9664\u8fd9\u4e2a\u6700\u5c0f\u503c\u8282\u70b9\u4e5f\u53ef\u80fd\u662f\u524d\u4e24\u79cd\u60c5\u51b5\u4e2d\u7684\u4e00\u79cd\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u6700\u5c0f\u503c\u8282\u70b9\u4e0d\u53ef\u80fd\u62e5\u6709\u4e24\u4e2a\u5b69\u5b50\uff1f\u56e0\u4e3a\u5982\u679c\u6709\u7684\u8bdd\uff0c\u90a3\u5c82\u4e0d\u662f\u8be5\u8282\u70b9\u7684\u5de6\u8282\u70b9\u6bd4\u5b83\u8fd8\u5c0f\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u8fd8\u662f\u4e0d\u662f\u6700\u5c0f\u7684\u5462\uff1f</p> <p>\u6a21\u677f\u4ee3\u7801\u5982\u4e0b\u56fe\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#full-implementation-code","title":"Full Implementation Code","text":"<pre><code>#include \"Binary_node.h\"\n\ntemplate &lt;typename Type&gt;\nclass Binary_search_node : public Binary_node&lt;Type&gt; {\n    using Binary_node&lt;Type&gt;::element;\n    using Binary_node&lt;Type&gt;::left_tree;\n    using Binary_node&lt;Type&gt;::right_tree;\n\npublic:\n    Binary_search_node(Type const &amp;obj) : Binary_node&lt;Type&gt;(obj) {}\n\n    Binary_search_node *left() const {\n        return static_cast&lt;Binary_search_node *&gt;(Binary_node&lt;Type&gt;::left());\n    }\n\n    Binary_search_node *right() const {\n        return static_cast&lt;Binary_search_node *&gt;(Binary_node&lt;Type&gt;::right());\n    }\n\n    Type front() const {\n        return (left() == nullptr) ? retrieve() : left()-&gt;front();\n    }\n\n    Type back() const {\n        return (right() == nullptr) ? retrieve() : right()-&gt;back();\n    }\n\n    bool find(Type const &amp;obj) const {\n        if (retrieve() == obj) {\n            return true;\n        } else if (obj &lt; retrieve()) {\n            return (left() == nullptr) ? false : left()-&gt;find(obj);\n        } else {\n            return (right() == nullptr) ? false : right()-&gt;find(obj);\n        }\n    }\n\n    bool insert(Type const &amp;obj, Binary_search_node *&amp;ptr_to_this) {\n        if (empty()) {\n            ptr_to_this = new Binary_search_node&lt;Type&gt;(obj);\n            return true;\n        } else if (obj &lt; retrieve()) {\n            return left()-&gt;insert(obj, left_tree);\n        } else if (obj &gt; retrieve()) {\n            return right()-&gt;insert(obj, right_tree);\n        } else {\n            return false;\n        }\n    }\n\n    bool erase(Type const &amp;obj, Binary_search_node *&amp;ptr_to_this) {\n        if (empty()) {\n            return false;\n        } else if (obj == retrieve()) {\n            if (is_leaf()) {\n                ptr_to_this = nullptr;\n                delete this;\n            } else if (!left()-&gt;empty() &amp;&amp; !right()-&gt;empty()) {\n                element = right()-&gt;front();\n                right()-&gt;erase(retrieve(), right_tree);\n            } else {\n                ptr_to_this = (!left()-&gt;empty()) ? left() : right();\n                delete this;\n            }\n            return true;\n        } else if (obj &lt; retrieve()) {\n            return left()-&gt;erase(obj, left_tree);\n        } else {\n            return right()-&gt;erase(obj, right_tree);\n        }\n    }\n};\n\ntemplate &lt;typename Type&gt;\nclass Binary_search_tree {\nprivate:\n    Binary_search_node&lt;Type&gt; *root_node;\n\n    Binary_search_node&lt;Type&gt; *root() const {\n        return root_node;\n    }\n\npublic:\n    Binary_search_tree() : root_node(nullptr) {}\n\n    ~Binary_search_tree() {\n        clear();\n    }\n\n    void clear() {\n        root()-&gt;clear(root_node);\n    }\n\n    bool empty() const {\n        return root() == nullptr;\n    }\n\n    int size() const {\n        return root() == nullptr ? 0 : root()-&gt;size();\n    }\n\n    int height() const {\n        return root() == nullptr ? 0 : root()-&gt;height();\n    }\n\n    Type front() const {\n        return root() == nullptr ? throw std::underflow_error(\"Empty tree\") : root()-&gt;front();\n    }\n\n    Type back() const {\n        return root() == nullptr ? throw std::underflow_error(\"Empty tree\") : root()-&gt;back();\n    }\n\n    bool find(Type const &amp;obj) const {\n        return root() == nullptr ? false : root()-&gt;find(obj);\n    }\n\n    bool insert(Type const &amp;obj) {\n        return root()-&gt;insert(obj, root_node);\n    }\n\n    bool erase(Type const &amp;obj) {\n        return root()-&gt;erase(obj, root_node);\n    }\n};\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#other-relation-based-operation","title":"Other Relation-Based Operation","text":"<p>We will quickly consider two other relation-based queries that are very quick to calculate with an array of sorted objects: Finding the previous and next entries, and Finding the kth entry.</p> <p>\u5bf9\u4e8e\u201c\u5bfb\u627e\u5148\u524d\u7684\u548c\u540e\u4e00\u4e2a\u7684\u5143\u7d20\u201d\u95ee\u9898\uff0c\u6211\u4eec\u6b64\u5904\u5148\u805a\u7126\u4e8e\u5bfb\u627e\u4e0b\u4e00\u4e2a\uff08\u66f4\u5927\u7684\uff09\u5143\u7d20\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u60f3\u8981\u627e\u5230\u4e0b\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u5143\u7d20\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e00\u70b9\u662f\u5f88\u5bb9\u6613\u8ba4\u540c\u7684\u3002\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u5c31\u662f\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684path\uff08\u6ce8\u610f\u65b9\u5411\uff09\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u5143\u7d20\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\uff08\u6ce8\u610f\u65b9\u5411\uff01\u6ce8\u610f\u4e0d\u662f\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff01\uff09\u3002</p> <p>More generally:  find the next entry of an arbitrary object\uff1fWe can design a function that:</p> <ul> <li>runs a single search from the root node to one of the leaves\u2014an O(h) operation</li> <li>returns the input object if it did not find something greater than it</li> </ul> <p>\u8fd9\u4e2asingle search\u7684\u4ee3\u7801\u5982\u4e0b\u56fe\uff0c\u4ece\u4e2d\u4e5f\u80fd\u770b\u51fa\u89c4\u5219\u662f\u4ec0\u4e48\uff1a</p> <ol> <li>\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u9047\u5230\u7684\u8282\u70b9\u7b49\u4e8eobj\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u8fd4\u56deobj\u672c\u8eab\uff0c\u5426\u5219\u5c31\u8fd4\u56de\u53f3\u5b50\u6811\u7684front\uff08\u5373minimum\uff09\u3002</li> <li>\u5982\u679c\u9047\u5230\u7684\u8282\u70b9\u5927\u4e8eobj\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u5de6\u5b69\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u5143\u7d20\uff0c\u5426\u5219\u5de6\u5b69\u5b50\u8282\u70b9\u4e5f\u8fdb\u884c\u4e00\u6b21next\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u6bd4\u8f83\u4e4b\u524d\u7684obj\u548c\u5de6\u5b69\u5b50\u8282\u70b9\u8c03\u7528next\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8c03\u7528\u8fd4\u56de\u7684\u662fobj\uff0c\u90a3\u4e48\u8bf4\u660e\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5c31\u662f\u4e4b\u524d\u90a3\u4e2a\u6bd4obj\u5927\u7684\u5143\u7d20\uff0c\u53cd\u4e4b\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5c31\u662f\u5de6\u5b69\u5b50\u8282\u70b9\u8c03\u7528next\u5f97\u5230\u7684\u7ed3\u679c\u3002</li> <li>\u5982\u679c\u9047\u5230\u7684\u8282\u70b9\u5c0f\u4e8eobj\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e2a\u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u4e4b\u540e\u7684\u6240\u6709\u8282\u70b9\u7684\u5143\u7d20\u90fd\u6bd4obj\u5c0f\uff0c\u8fd4\u56de\u7684\u662fobj\uff1b\u53cd\u4e4b\uff0c\u5219\u8c03\u7528\u53f3\u5b69\u5b50\u8282\u70b9\u7684next\u65b9\u6cd5\u3002</li> </ol> <p></p> <p>\u800c\u5bf9\u4e8e\u5bfb\u627e\u7b2ck\u4e2a\u5143\u7d20\u95ee\u9898\uff0c\\(k\\in [0,n-1]\\)\uff0c\u6211\u4eec\u5b9a\u4e49\u5982\u4e0b\u7684\u89c4\u5219\uff1a</p> <ul> <li>\u5bf9\u4e8e\u6811\u7684\u6839\u8282\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u5de6\u5b50\u6811\u6709k\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u3002</li> <li>\u5bf9\u4e8e\u6811\u7684\u6839\u8282\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u5de6\u5b50\u6811\u6709\u5927\u4e8ek\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u5de6\u5b50\u6811\u7684\u7b2ck\u4e2a\u5143\u7d20</li> <li>\u5bf9\u4e8e\u6811\u7684\u6839\u8282\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u5de6\u5b50\u6811\u6709\u5c0f\u4e8ek\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u53f3\u5b50\u6811\u7684\u7b2c\\((k-l-1)\\)\u4e2a\u5143\u7d20\u3002</li> </ul> <p>\u4e0a\u8ff0\u89c4\u5219\u80fd\u591f\u5b9e\u73b0\u7684\u6700\u6838\u5fc3\u7684\u539f\u56e0\uff0c\u5c31\u662f\u4ee3\u7801\u4e2d\u63d0\u4f9b\u4e86\\(at()\\)\u65b9\u6cd5\u63a5\u53e3\uff0c\u80fd\u591f\u8fd4\u56de\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u7b2ck\u4e2a\u5143\u7d20\u8282\u70b9\u3002\u8fd9\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\uff0c\u4f46\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e3a\u4e86\u652f\u6301\\(at()\\)\uff0c\u4e8c\u53c9\u6811\u7c7b\u91cc\u9762\u6709<code>int tree_size;</code>\u53c2\u6570\u7528\u6765\u8bb0\u5f55\u8282\u70b9\u7684\u6240\u6709\u540e\u4ee3\u7684\u6570\u91cf\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u90fd\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5c5e\u6027\u7684\u8bb0\u5f55\u3002</p> <p>\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u63d0\u53ca\u5230<code>int tree_size;</code>\u53c2\u6570\u7684\u8bbe\u8ba1\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u66f4\u65b0update and erase\u65b9\u6cd5\uff0c\u4ece\u800c\u5b9e\u73b0\u914d\u5408\uff01</p> <p></p> <p>C/C++\u4e2d\uff0c\u4efb\u4f55\u975e\u96f6\u7684\u503c\u90fd\u8ba4\u4e3a\u662ftrue.</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#run-time-on-bst","title":"Run Time on BST","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#introduction-of-sorting","title":"Introduction of Sorting","text":"<p>In these topics, we will assume that: We are sorting integers, and Arrays are to be used for both input and output. Sorting algorithms may be performed in-place, that is, with the allocation of at most Q(1) additional memory (e.g., fixed number of local variables). Other sorting algorithms require the allocation of second array of equal size. We will prefer in-place sorting algorithms.</p> <p>The run time of the sorting algorithms we will look at fall into one of three categories: \\(\\Theta(n)\\ \\Theta(nln(n)) \\  O(n^2)\\).  (Run-time classification) We will examine average- and worst-case scenarios for each algorithm. The run-time may change significantly based on the scenario.</p> <p>About the Lower-bound Run-time of any algorithm: Any sorting algorithm must examine each entry in the array at least once. Consequently, all sorting algorithms must be \\(\\Omega(n)\\). We will not be able to achieve \\(\\Theta(n)\\) behaviour without additional assumptions. </p> <p>Five sorting techniques are illustrated as follows:</p> <p></p> <p>At the same time, The general worst-case run time is \\(\\Omega(nlg(n))\\)\uff08\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u9650\u662f\\(O(nlg(n))\\)\u7684\u3002). The proof can be presented as follows:</p> <ul> <li>Any comparison-based sorting algorithm can be represented by a comparison tree</li> <li>Worst-case running time cannot be less than the height of the tree</li> <li>How many leaves does the tree have? The number of permutations of n objects, which is n!</li> <li>What\u2019s the shallowest tree with n! leaves? A complete tree, whose height is lg(n!), and it can be shown that \\(lg(n!) = \\Theta(n lg(n))\\)</li> </ul> <p>The illustration of a comparison tree can be presented as follows: </p> <p>\u540c\u65f6\u5f15\u5165\u7a33\u5b9a\u6027\u7684\u6982\u5ff5\uff1a</p> <p>Reference: oi.wiki</p> <p>\u7a33\u5b9a\u6027\u662f\u6307\u76f8\u7b49\u7684\u5143\u7d20\u7ecf\u8fc7\u6392\u5e8f\u4e4b\u540e\u76f8\u5bf9\u987a\u5e8f\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8\u3002\u62e5\u6709\u7a33\u5b9a\u6027\u8fd9\u4e00\u7279\u6027\u7684\u7b97\u6cd5\u4f1a\u8ba9\u539f\u672c\u6709\u76f8\u7b49\u952e\u503c\u7684\u7eaa\u5f55\u7ef4\u6301\u76f8\u5bf9\u6b21\u5e8f\uff0c\u5373\u5982\u679c\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff0c\u5f53\u6709\u4e24\u4e2a\u76f8\u7b49\u952e\u503c\u7684\u7eaa\u5f55R\u548cS\uff0c\u4e14\u5728\u539f\u672c\u7684\u5217\u8868\u4e2dR\u51fa\u73b0\u5728S\u4e4b\u524d\uff0c\u5728\u6392\u5e8f\u8fc7\u7684\u5217\u8868\u4e2dR\u4e5f\u5c06\u4f1a\u5728S\u4e4b\u524d\u3002</p> <p>\u57fa\u6570\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u6392\u5e8f\u3002</p> <p>\u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f\u3002</p> <p>The stability of a sorting algorithm is concerned with how the algorithm treats equal (or repeated) elements. Stable sorting algorithms preserve the relative order of equal elements, while unstable sorting algorithms don\u2019t. In other words, stable sorting maintains the position of two equals elements relative to one another.</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#inversions","title":"Inversions","text":"<p>Given a permutation of n elements, \\(a_o, \\dots, a_{n-1}\\), an inversion is defined as a pair of entries which are reversed. That it, for \\((a_j, a_k)\\), \\(a_j &gt; a_k,if\\ j&lt;k\\).  \u53ef\u60f3\u800c\u77e5\uff0c\u5047\u5982\u8bf4\u6211\u4eec\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u53ef\u80fd\u5f15\u5165\u4e00\u4e2ainversion\uff08\u5012\u7f6e\uff09\uff0c\u6216\u8005\u8bf4\u6d88\u9664\u4e00\u4e2a\u5012\u7f6e\u3002\u5bf9\u4e8en\u4e2a\u6570\uff0c\u4e00\u5171\u6709\\(\\binom{n}{2}=\\frac{n(n-1)}{2}\\)\u4e2apair\uff0c\u800cpair\u8981\u4e48\u662f\u5012\u7f6einversion\uff0c\u8981\u4e48\u662fordered pair\u3002</p> <p>\\(Theorem:\\) \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u968f\u673a\u6392\u5217\u7684n\u4e2a\u5143\u7d20\u7684array\uff0cinversion pairs\u7684\u4e2a\u6570\u7684\u671f\u671b\u662f\\(\\frac{n(n-1)}{2}\\)\u3002\u8fd9\u4e2a\u6709\u4ec0\u4e48\u7528\u5462\uff1f \u6570\u5217\u7684inversion\u7684\u6570\u91cf\u5360pairs\u7684\u6bd4\u91cd\u53ef\u4ee5\u53cd\u6620\u4e00\u4e2a\u6570\u7ec4\u7684\u6392\u5217\u662f\u6709\u201c\u591a\u4e71\u201d\u3002\u4f8b\u5b50\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\uff0cswapping two adjacent entries\u8981\u4e48\u79fb\u9664\u4e00\u4e2ainversion, \u8981\u4e48\u5f15\u5165\u4e00\u4e2ainversion\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u63aa\u8f9e\uff1a\u201c\u8981\u4e48...\u8981\u4e48...\u201d\uff0c\u4e14\u662f\u4e00\u4e2a\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u4e00\u5171\u6709\\(\\binom{n}{2}=\\frac{n(n-1)}{2}\\)\u4e2apair\uff0c\u90a3\u4e48\u53ef\u4ee5\u9884\u6d4b\u5230\uff1a\u5982\u679c\u662f\u968f\u673a\u5206\u5e03\u7684\u6570\u7ec4\uff0c\u9006\u5e8f\u5bf9\u6570\u91cf\u7684\u671f\u671b\u662f\uff1a  </p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#insertion-sort","title":"Insertion Sort \u63d2\u5165\u6392\u5e8f","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#algorithm","title":"algorithm","text":"<p>In general, if we have a sorted list of k items, we can insert a new item to create a sorted list of size k + 1\u3002\u8003\u8651\u4e0b\u9762\u8fd9\u4e00\u4e2a\u6570\u7ec4\uff0c\u524d\u97625-40\u7684\u5143\u7d20\u90fd\u662f\u6309\u7167\u987a\u5e8f\u6392\u5217\u597d\u7684\uff0c\u90a3\u4e48\u6211\u5e0c\u671b\u5c06\u540e\u9762\u7684\u5143\u7d20\u4e5f\u6392\u5217\u597d\u3002\u73b0\u5728\uff0c\u5c31\u8bbe\u60f3\u6211\u5e0c\u671b\u5c06\u5143\u7d2014\u63d2\u5165\u5230\u524d\u9762\u6b63\u786e\u7684\u4f4d\u7f6e\uff1a</p> <p>From oi.wiki\uff1a\u5c06\u5f85\u6392\u5217\u5143\u7d20\u5212\u5206\u4e3a\u300c\u5df2\u6392\u5e8f\u300d\u548c\u300c\u672a\u6392\u5e8f\u300d\u4e24\u90e8\u5206\uff0c\u6bcf\u6b21\u4ece\u300c\u672a\u6392\u5e8f\u7684\u300d\u5143\u7d20\u4e2d\u9009\u62e9\u4e00\u4e2a\u63d2\u5165\u5230\u300c\u5df2\u6392\u5e8f\u7684\u300d\u5143\u7d20\u4e2d\u7684\u6b63\u786e\u4f4d\u7f6e\u3002</p> 5 7 12 19 21 26 33 40 14 9 18 21 2 <p></p> <p>14\u4ece\u524d\u9762\u6709\u5e8f\u6570\u5217\u7684\u672b\u5c3e\u5f00\u59cb\u4e00\u4e2a\u4e2a\u5224\u65ad\uff0c\u5982\u679c\u5de6\u8fb9\u7684\u6570\u5b57\u6bd4\u5b83\u5927\uff0c\u90a3\u4e48\u5c31\u548c\u5de6\u8fb9\u7684\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u4e00\u76f4\u4ea4\u6362\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u5373\u5de6\u8fb9\u7684\u6570\u5b57\u6bd4\u4ed6\u5c0f\u3002For any unsorted list\uff0cTreat the first element as a sorted list of size 1\u3002Then, given a sorted list of size k \u2013 1\uff0cinsert the k-th item into the sorted list. The sorted list is now of size k. \u5f88\u660e\u663e\uff0c\u63d2\u5165\u6392\u5e8f\u4f7f\u7528\u7684\u662f\u4e94\u5927\u6392\u5e8f\u6280\u5de7\u4e2d\u7684insertion\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#implementation_1","title":"Implementation","text":"<p>\u9996\u5148\u662f\u4e00\u4e2a\u5c0f\u6280\u5de7\uff1a\u4ea4\u6362\u5143\u7d20\u7684\u64cd\u4f5c\u5176\u5b9e\u8fd8\u591a\u4e86\u4e00\u6b65\u201c\u53f3\u8fb9\u5143\u7d20\u653e\u5728\u5de6\u8fb9\u7684\u64cd\u4f5c\u201d\uff0c\u5728\u8fde\u7eed\u4ea4\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u662f\u5197\u4f59\u7684\u3002\u56e0\u6b64\uff1awe could just temporarily assign the new entry\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>c++\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff1a(\u6ce8\u610f\u8fd9\u91cc\u9762j\u4f5c\u7528\u57df\u7684\u7ec6\u8282\uff01\u8df3\u51fa\u5faa\u73af\u65f6\u7684j\u6211\u9700\u8981\u4f7f\u7528\uff0c\u90a3\u4e48\u8fd9\u4e2aj\u7684\u5b9a\u4e49\u5c31\u4e0d\u80fd\u653e\u5728for\u5faa\u73af\u91cc\u9762\uff0c\u800c\u5e94\u8be5\u653e\u5728\u5916\u9762\uff1b\u4ee5\u53ca\u51fd\u6570\u8981\u4f20\u5165size\u7684\u539f\u56e0\u662f\u6570\u7ec4\u8fdb\u5165\u51fd\u6570\u4e4b\u540e\u5c31\u4f1a\u9000\u5316\u4e3a\u6307\u9488\uff0c\u5f15\u7d22\u8bbf\u95ee\u4f9d\u7136\u5408\u6cd5\uff0c\u4f46\u662f\u4e0d\u6e05\u695a\u6570\u7ec4\u7684\u957f\u5ea6)</p> <pre><code>// insert_sort.cpp\nvoid InsertSort(int arr[], int size){\n    for (int i = 0; i &lt; size; i++){\n        int val = arr[i];\n        int j = i-1;\n        for (; j &gt;= 0; j--){\n            if (arr[j] &lt;= val){\n                break;\n            }\n            arr[j+1] = arr[j];\n        }\n        arr[j+1] = val;\n    }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#analysis","title":"Analysis","text":"<p>\u63d2\u5165\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002</p> <p>\u53ef\u4ee5\u8bbe\u60f3\u5230\u7684\u662f\uff1a\u5728worst-cases\u4e2d\uff0c\u5b8c\u5168\u5012\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n^2)\\)\uff0c\u56e0\u4e3a\uff1athe outer for-loop will be executed a total of n \u2013 1 times and the inner for-loop is executed k times, when in the worst case\u3002</p> <p>\u5728best-case\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n)\\)\uff0c\u56e0\u4e3a\u6700\u597d\u7684\u60c5\u51b5\u662f\u5b8c\u5168\u6392\u597d\u5e8f\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ea\u9700\u8981\u8fdb\u884cn\uff08\u66f4\u7ec6\u8282\u5730\uff1an-1\uff09\u6b21\u5224\u65ad\u8be5\u5143\u7d20\u548c\u5de6\u8fb9\u7684\u5143\u7d20\u6709\u591a\u5927\u3002\u8bdd\u662f\u5982\u6b64\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\uff1aInsertion sort, however, will run in \\(\\Theta (n)\\) time whenever d = O(n), \u5176\u4e2dd\u4ee3\u8868inversions\u7684\u6570\u91cf\u3002\u90a3\u4e48\u5728\u521a\u521a\u63cf\u8ff0\u7684\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u5b9ed\u4e5f\u662f\\(O(n)\\)\uff0c\u56e0\u4e3a\\(0 &lt;= 0*n\\)\u3002</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u4e8b\u5b9e\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f\u56e0\u4e3an\u662f\u81f3\u5c11\u8fdb\u884c\u5224\u65ad\u7684\u6b21\u6570\uff0c\u6216\u8005\u8bf4\uff0c\u4ece\u4e00\u6b21\u5904\u7406\u9006\u5e8f\u5bf9\u7684\u64cd\u4f5c\u5f00\u59cb\u7684\u7ed3\u675f\u65f6\u523b\uff0c\u4f34\u968f\u7740\u4e00\u6b21\u5224\u65ad\u53d1\u73b0\u8fd9\u4e2a\u76ee\u6807\u5143\u7d20\u5de6\u8fb9\u7684\u5143\u7d20\u5c0f\u4e8e\u76ee\u6807\u5143\u7d20\u4ece\u800c\u505c\u6b62\u64cd\u4f5c\uff0c\u8fd9\u4e00\u6b21\u5224\u65ad\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u800c\u8fd9\u79cd\u5224\u65ad\u4e00\u5171\u6709n\u6b21\u3002\u800cd\u662f\u54ea\u91cc\u6765\u7684\u5462\uff1f\u6bcf\u4e00\u6b21\u4ea4\u6362\u5143\u7d20\u7684\u6570\u636e\u90fd\u662f\u5728\u5904\u7406\u4e00\u5bf9\u9006\u5e8f\u5bf9\uff0c\u4e0d\u4f1a\u5f15\u5165\u9006\u5e8f\u5bf9\uff0c\u800c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u4e00\u6b21\u4ea4\u6362\u5143\u7d20\u6765\u8bf4\uff0c\u8981\u4e48\u6d88\u9664\u9006\u5e8f\u5bf9\uff0c\u8981\u4e48\u5f15\u5165\u9006\u5e8f\u5bf9\uff0c\u6240\u4ee5\u8bf4run time is \\(\\Theta(n+d)\\). \u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\uff1aInsertion sort, however, will run in \\(\\Theta (n)\\) time whenever d = O(n)</p> <p></p> <p>\u6700\u540e\uff0cMemory requirements\u662f\\(\\Theta(1)\\)\u3002\u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff1a\u5982\u679c\u6570\u636e\u533a\u57df\u6709\u5e8f\uff08d=O(n)\uff09\uff0c\u90a3\u4e48\u63d2\u5165\u6392\u5e8f\u662f\u6240\u6709\u6392\u5e8f\u7b97\u6cd5\u4e2d\uff0c\u6548\u7387\u6700\u9ad8\u7684\u6392\u5e8f\u7b97\u6cd5\uff01\u5728\u57fa\u7840\u6392\u5e8f\u7b97\u6cd5\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f&gt;\u5192\u6ce1\u6392\u5e8f&amp;\u9009\u62e9\u6392\u5e8f\u3002\u4e0d\u4ec5\u4ec5\u6ca1\u6709\u4ea4\u6362\uff08trick in implementation\uff09\uff0c\u800c\u4e14\u6bd4\u8f83\u7684\u6b21\u6570\u4e5f\u5c11\uff01</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#bubble-sort","title":"Bubble Sort \u5192\u6ce1\u6392\u5e8f","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#algorithm_1","title":"algorithm","text":"<p>Suppose we have an array of data which is unsorted: Starting at the front, traverse the array, find the largest item, and move (or bubble) it to the top. With each subsequent iteration, find the next largest item and bubble it up towards the top of the array. </p> <p>\u7b80\u5355\u800c\u8a00\uff1a\u5728\u4e00\u8f6e\u4ece\u5934\u64cd\u4f5c\u4e2d\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\u5f15\u7d22\uff08\u800c\u4e0d\u662f\u5143\u7d20\uff09\uff0c\u5982\u679c\u5f15\u7d22\u5bf9\u5e94\u7684\u5143\u7d20\u7684\u53f3\u8fb9\u5143\u7d20\u6bd4\u5f15\u7d22\u5143\u7d20\u5927\uff0c\u90a3\u4e48\u5c31\u4e0d\u52a8\uff0c\u904d\u5386\u4e0b\u4e00\u4e2a\u5f15\u7d22\uff0c\u53cd\u4e4b\u5219\u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u601d\u8003\u5c31\u80fd\u53d1\u73b0\uff1a\u4e00\u8f6e\u64cd\u4f5c\u4e2d\uff0c\u603b\u662f\u80fd\u628a\u6700\u5927\u7684\u5143\u7d20\u653e\u5728\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\u90a3\u4e48\u8fdb\u5165\u7b2ci\u8f6e\u64cd\u4f5c\uff0c\u5c31\u662f\u628a\u7b2ci\u5927\u7684\u5143\u7d20\u653e\u5728\u5012\u6570\u7b2ci\u4e2a\u4f4d\u7f6e\u3002\u8fd9\u79cd\u64cd\u4f5c\u5c06\u91cd\u590dn(\u6216\u8005\u8bf4n-1)\u6b21\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#implementation_2","title":"Implementation","text":"<pre><code>// bubble_sort.cpp\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nusing namespace std;\n\nvoid BubbleSort(int arr[], int size){\n    for (int i = 0; i &lt; size-1; i++){\n        for (int j = 0; j &lt; size - 1 - i; j++){\n            if (arr[j] &gt; arr[j+1]){\n                int tmp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = tmp;\n            }\n        }\n    }\n}\nint main(){\n    int arr[10];\n    srand(time(NULL));\n    for (int i = 0; i &lt; 10; i++){\n        arr[i] = rand() % 100 + 1;\n    }\n    for (int v : arr){\n        cout &lt;&lt; v &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    BubbleSort(arr, 10);\n    for (int v : arr){\n        cout &lt;&lt; v &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#analysis_1","title":"analysis","text":"<p>Here we have two nested loops, and therefore calculating the run time is straight-forward:  \u5b83\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u6807\u5fd7\uff08flag\uff09\u6765\u68c0\u6d4b\u6570\u5217\u662f\u5426\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\u3002\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u6570\u5217\u662f\u5426\u5df2\u7ecf\u6392\u5e8f\uff0c\u5b83\u90fd\u4f1a\u6267\u884c\u6240\u6709\u7684\u6bd4\u8f83\u548c\u53ef\u80fd\u7684\u4ea4\u6362\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u7248\u672c\u7684\u5192\u6ce1\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n^2)\\)\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#improvements","title":"Improvements","text":"<p>\u4e0a\u9762\u4e5f\u63d0\u5230\u4e86\uff0c\u8fd9\u79cd\u7b97\u6cd5\u7684\u6d41\u7a0b\u56fe\u5f88\u56fa\u5b9a\uff0c\u800c\u4e14\u5f88numb\u3002\u90a3\u4e48\u6211\u4eec\u80fd\u4e0d\u80fd\u5f15\u5165\u4e00\u4e9b\u4f18\u5316\u5462\uff1f\u6bd4\u5982\u8bf4\uff1areduce the number of swaps, halting if the list is sorted, limiting the range on which we must bubble,  alternating between bubbling up and sinking down\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#flagged-bubble-sort","title":"Flagged Bubble Sort","text":"<p>\u5728\u539f\u6765\u7684\u7b97\u6cd5\u4e2d\uff0c\u5047\u5982\u8bf4\u5728\u7b2ci\u8f6e\u64cd\u4f5c\u7ed3\u675f\u4e4b\u540e\uff0c\u6240\u6709\u7684\u5143\u7d20\u90fd\u6392\u5217\u6574\u9f50\u4e86\uff0c\u4f46\u4f9d\u7136\u9700\u8981\u8fdb\u884c\u63a5\u4e0b\u6765\u7684n-i\u8f6e\u64cd\u4f5c\u3002\u6240\u4ee5\u8bf4\u8003\u8651\uff1a\u5728\u4e00\u8f6e\u64cd\u4f5c\u4e2d\u8bb0\u5f55\u662f\u5426\u6709\u8fdb\u884c\u4ea4\u6362\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf4\u660e\u5df2\u7ecf\u662f\u5b8c\u5168\u6392\u5217\u597d\u7684\u72b6\u6001\uff0c\u5c31\u4e0d\u7528\u518d\u7ee7\u7eed\u6392\u5e8f\u4e86\uff01\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u4ee3\u7801\u4e2d\u7684flag\u6280\u5de7\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>    template &lt;typename Type&gt;\n    void bubble( Type *const array, int const n ) {\n        for ( int i = n - 1; i &gt; 0; --i ) {\n            Type max = array[0];\n            bool sorted = true; // FLAG!\n            for ( int j = 1; j &lt;= i; ++j ) {\n                if ( array[j] &lt; max ) {\n                    array[j - 1] = array[j];\n                    sorted = false;\n                } else {\n                    array[j \u2013 1] = max;\n                    max = array[j];\n                }\n            }\n            array[i] = max;\n            if ( sorted ) {\n                break;\n            }\n        }\n    }\n</code></pre> <pre><code>// bubble_sort.cpp\nvoid FlaggedBubbleSort(int arr[], int size){\n    for (int i = 0; i &lt; size-1; i++){\n        bool flag = false;\n        for (int j = 0; j &lt; size - 1 - i; j++){\n            if (arr[j] &gt; arr[j+1]){\n                int tmp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = tmp;\n                flag = true;\n            }\n        }\n        if (!flag){\n            return;\n        }\n    }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#range-limiting-bubble-sort","title":"Range-Limiting Bubble Sort","text":"<p>Intuitively, one may believe that limiting the loops based on the location of the last swap may significantly speed up the algorithm. \u6bd4\u5982\u8bf4\u5728\u4e00\u8f6e\u64cd\u4f5c\u4e2d\uff0c\u6700\u540e\u4e00\u6b21\u8fdb\u884c\u4ea4\u6362\u7684\u4f4d\u7f6e\u975e\u5e38\u9760\u524d\uff0c\u8fd9\u8bf4\u660e\u4ec0\u4e48\uff1f\u8fd9\u8bf4\u660e\u6700\u540e\u4e00\u6b21\u4ea4\u6362\u540e\u9762\u7684\u5143\u7d20\u5176\u5b9e\u90fd\u662f\u5df2\u7ecf\u6392\u5217\u597d\u4e86\u7684\uff01\u5f88\u53ef\u60dc\u7684\u662f\uff0cin practice\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5e26\u6765\u7684\u5f71\u54cd\u5e76\u4e0d\u662f\u5f88\u5927\u3002\u867d\u7136\u4f46\u662f\uff0c\u4e0b\u9762\u662f\u5b9e\u73b0\u7684\u4ee3\u7801\uff1a</p> <pre><code>    template &lt;typename Type&gt;\n    void bubble( Type *const array, int const n ) {\n        for ( int i = n - 1; i &gt; 0; ) {\n            Type max = array[0];\n            int ii = 0;\n            for ( int j = 1; j &lt;= i; ++j ) {\n                if ( array[j] &lt; max ) {\n                array[j - 1] = array[j];\n                    ii = j - 1;\n                } else {\n                    array[j \u2013 1] = max;\n                    max = array[j];\n                }\n            }\n            array[i] = max;\n            i = ii;\n        }\n    }\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cci\u7684\u66f4\u65b0\u4e0d\u518d\u662f\u6728\u8bb7\u7684i++\u4e86\uff0c\u800c\u662f\u6839\u636e\u6700\u540e\u4e00\u6b21\u4ea4\u6362\u7684\u4f4d\u7f6e\u800c\u66f4\u65b0i\u53c2\u6570\uff0c\u4e3a\u7684\u5c31\u662f\u8df3\u8fc7\u4e0d\u5fc5\u8981\u7684epoch operation\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#alternating-bubble-sort","title":"Alternating Bubble Sort","text":"<p>One operation which does significantly improve the run time is to alternate between bubbling the largest entry to the top, ands inking the smallest entry to the bottom. </p> <p>\u4ee5\u4e0b\u662f\u4ea4\u66ff\u5192\u6ce1\u6392\u5e8f\u7684\u57fa\u672c\u6b65\u9aa4\uff1a</p> <ol> <li>\u4ece\u6570\u7ec4\u7684\u5f00\u59cb\u5230\u7ed3\u675f\u904d\u5386\u6570\u7ec4\uff0c\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u5143\u7d20\u6bd4\u540e\u4e00\u4e2a\u5143\u7d20\u5927\uff08\u5347\u5e8f\u6392\u5e8f\uff09\uff0c\u5219\u4ea4\u6362\u5b83\u4eec\u3002</li> <li>\u5b8c\u6210\u7b2c\u4e00\u8f6e\u904d\u5386\u540e\uff0c\u6700\u5927\u7684\u5143\u7d20\u4f1a\u88ab\u653e\u7f6e\u5728\u6570\u7ec4\u7684\u672b\u5c3e\u3002</li> <li>\u7136\u540e\u4ece\u6570\u7ec4\u7684\u672b\u5c3e\u5f00\u59cb\u5411\u524d\u904d\u5386\uff0c\u91cd\u590d\u6b65\u9aa41\uff0c\u76f4\u5230\u904d\u5386\u5230\u6570\u7ec4\u7684\u5f00\u59cb\u3002</li> <li>\u7ee7\u7eed\u4ea4\u66ff\u904d\u5386\u65b9\u5411\uff0c\u76f4\u5230\u6ca1\u6709\u5143\u7d20\u9700\u8981\u4ea4\u6362\uff0c\u8fd9\u610f\u5473\u7740\u6570\u7ec4\u5df2\u7ecf\u5b8c\u5168\u6709\u5e8f\u3002</li> </ol> <p>reference: kimi.moonshot.cn</p> <p>Because the bubble sort simply swaps adjacent entries, it cannot be any better than insertion sort which does n + d comparisons where d is the number of inversions \u8fd9\u4e00\u70b9\u5341\u5206\u91cd\u8981\uff01</p> <p>The following table summarizes the run-times of our modified  bubble sorting algorithms; however, they are all worse than insertion sort in practice:</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#merge-sort","title":"Merge Sort \u5f52\u5e76\u6392\u5e8f","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#algorithm_2","title":"algorithm","text":"<p>The merge sort algorithm is defined recursively: If the list is of size 1, it is sorted\u2014we are done; Otherwise:</p> <ul> <li> <p>Divide an unsorted list into two sub-lists,</p> </li> <li> <p>Sort each sub-list recursively using merge sort, and</p> </li> <li> <p>Merge the two sorted sub-lists into a single sorted list</p> </li> </ul> <p>In practice: If the list size is less than a threshold, use an algorithm like insertion sort.</p> <p>This strategy is called divide-and-conquer. Merging Sort\u660e\u663e\u4f7f\u7528\u7684\u662f\u4e94\u5927\u6392\u5e8f\u6280\u5de7\u4e2d\u7684Merging\u3002\u90a3\u4e48\u5982\u4f55merging\u5462\uff1f\u5047\u8bbe\u6709\u4e24\u4e2aordered array\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0array\uff0c\u7136\u540e\u7528\u4e24\u5957\u5f15\u7d22\uff1a\u54ea\u4e2aarray \u5f15\u7d22\u7684\u5143\u7d20\u66f4\u5c0f\uff0c\u90a3\u4e48\u5143\u7d20\u5c31\u653e\u8fdbarray\uff0c\u7136\u540e\u8fd9\u4e2a\u5f15\u7d22++\u3002\u5f53\u6709\u4e00\u4e2a\u6570\u7ec4\u904d\u5386\u5b8c\u4e4b\u540e\uff0c\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4\u5269\u4f59\u7684\u5143\u7d20\u5168\u90e8\u6309\u7167\u987a\u5e8f\u653e\u8fdb\u53bb\u3002\u5c31\u8fd9\u4e00\u70b9\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u4f46\u662f\u8fd9\u79cd\u64cd\u4f5c\u7684\u6838\u5fc3\u5173\u952e\u5c31\u662ftwo ordered array\u3002</p> <p>Time: we have to copy n1 + n2 elements. Hence, merging may be performed in \\(\\Theta(n1 + n2)\\) time. If the arrays are approximately the same size, n = n1 \u2248 n2, we can say that the run time is \\(\\Theta(n)\\). Space: we cannot merge two arrays in-place. This algorithm always required the allocation of a new array. Therefore, the memory requirements are also \\(\\Theta(n)\\).</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#implementation_3","title":"Implementation","text":"<pre><code>// merge_sort.cpp\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nusing namespace std;\n\nvoid Merge(int arr[], int left, int mid, int right){\n    // \u9700\u8981\u989d\u5916\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u628a\u4e24\u4e2a\u5c0f\u6bb5\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u5408\u5e76\u6210\u5927\u6bb5\u6709\u5e8f\u7684\u5e8f\u5217\n    int* p = new int[right-left+1];\n    int idx = 0;\n    int i = left;\n    int j = mid + 1;\n    while (i &lt;= mid &amp;&amp; j &lt;= right){\n        if (arr[i] &lt;= arr[j]){\n            p[idx++] = arr[i++];\n        }\n        else {\n            p[idx++] = arr[j++];\n        }\n    }\n    while (i &lt;= mid){\n        p[idx++] = arr[i++];\n    }\n    while (j &lt;= right){\n        p[idx++] = arr[j++];\n    }\n    // \u628a\u5408\u5e76\u597d\u7684\u5927\u6bb5\u6709\u5e8f\u7ed3\u679c\u62f7\u8d1d\u5230\u539f\u59cb\u6570\u7ec4[left, right]\u533a\u95f4\u5185\n    for (i = left, j = 0; i &lt;= right; i++, j++){\n        arr[i] = p[j];\n    }\n    delete[] p;\n}\n\nvoid MergeSort(int arr[], int begin, int end){\n    // \u9012\u5f52\u7ed3\u675f\u7684\u6761\u4ef6\n    if (begin &gt;= end){\n        return;\n    }\n    int mid = (begin + end) / 2;\n    // \u5148\u9012\n    MergeSort(arr, begin, mid);\n    MergeSort(arr, mid + 1, end);\n    // \u518d\u5f52\u5e76 [begin, mid] [mid + 1, begin]\u8fd9\u4e24\u6bb5\u6709\u5e8f\u7684\u5e8f\u5217\n    Merge(arr, begin, mid, end);\n\n}\n\nvoid MergeSort(int arr[], int size){\n    MergeSort(arr, 0, size-1);\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#run-time-analysis","title":"Run-Time Analysis","text":"<p>\u90a3\u4e48\u53ef\u80fd\u4f1a\u5f88\u597d\u5947\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u662f\\(O(n^2)\\)\u3002\u6362\u800c\u8a00\u4e4b\uff1a\u662f\u4ec0\u4e48\u7279\u6b8a\u7684\u64cd\u4f5c\u5e2e\u52a9\u6211\u4eec\u51cf\u5c11\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\uff1f\u4e0b\u9762\u8fd9\u5f20\u56fe\u751f\u52a8\u5730\u5c55\u793a\u4e86\u539f\u56e0\uff1a</p> <p></p> <p>In practice, merge sort is faster than heap sort, though they both have the same asymptotic run times. Merge sort requires an additional array, and Heap sort does not require.</p> <p>\u540c\u65f6\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n)\\)</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#divide-and-conquer","title":"Divide and Conquer\uff08\u5206\u6cbb\uff09","text":"<p>Reference: kimi.moonshot.cn</p> <p>\u5206\u6cbb\uff08Divide and Conquer\uff09\u601d\u60f3\u662f\u4e00\u79cd\u89e3\u51b3\u95ee\u9898\u7684\u7b56\u7565\uff0c\u5b83\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\uff08Divide\uff09\u6210\u82e5\u5e72\u4e2a\u76f8\u540c\u6216\u76f8\u4f3c\u7684\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u5730\u89e3\u51b3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff08Conquer\uff09\uff0c\u7136\u540e\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\uff08Combine\uff09\u8d77\u6765\u4ee5\u89e3\u51b3\u539f\u59cb\u95ee\u9898\u3002\u5206\u6cbb\u6cd5\u662f\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\u7684\u4e00\u79cd\u91cd\u8981\u65b9\u6cd5\uff0c\u5c24\u5176\u5728\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u6216\u590d\u6742\u8ba1\u7b97\u65f6\u975e\u5e38\u6709\u6548\u3002</p> <p>\u5206\u6cbb\u601d\u60f3\u7684\u57fa\u672c\u6b65\u9aa4\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u9636\u6bb5\uff1a</p> <ol> <li>\u5206\u89e3\uff08Divide\uff09\uff1a</li> <li>\u5c06\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u89c4\u6a21\u8f83\u5c0f\u7684\u76f8\u540c\u95ee\u9898\u3002\u5206\u89e3\u7684\u76ee\u7684\u662f\u7b80\u5316\u95ee\u9898\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u89e3\u51b3\u3002\u5206\u89e3\u7684\u7c92\u5ea6\u53d6\u51b3\u4e8e\u95ee\u9898\u7684\u6027\u8d28\u548c\u89e3\u51b3\u7b56\u7565\u3002</li> <li>\u89e3\u51b3\uff08Conquer\uff09\uff1a</li> <li>\u5206\u522b\u89e3\u51b3\u8fd9\u4e9b\u5206\u89e3\u51fa\u6765\u7684\u5b50\u95ee\u9898\u3002\u5982\u679c\u5b50\u95ee\u9898\u8db3\u591f\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u89e3\u51b3\uff1b\u5982\u679c\u5b50\u95ee\u9898\u4ecd\u7136\u590d\u6742\uff0c\u5219\u53ef\u4ee5\u9012\u5f52\u5730\u5e94\u7528\u5206\u6cbb\u7b56\u7565\u3002</li> <li>\u5408\u5e76\uff08Combine\uff09\uff1a</li> <li>\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\uff0c\u6784\u5efa\u51fa\u539f\u95ee\u9898\u7684\u89e3\u3002\u5408\u5e76\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u901a\u5e38\u6bd4\u5b50\u95ee\u9898\u89e3\u51b3\u7684\u590d\u6742\u5ea6\u8981\u4f4e\uff0c\u8fd9\u662f\u5206\u6cbb\u6cd5\u6709\u6548\u6027\u7684\u5173\u952e\u3002</li> </ol> <p>\u5206\u6cbb\u6cd5\u5728\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\u7684\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5178\u578b\u7684\u5206\u6cbb\u7b97\u6cd5\u793a\u4f8b\uff1a</p> <ul> <li>\u5f52\u5e76\u6392\u5e8f\uff08Merge Sort\uff09\uff1a</li> <li>\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u534a\uff0c\u9012\u5f52\u5730\u5bf9\u6bcf\u4e00\u534a\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u6392\u5e8f\u597d\u7684\u4e24\u534a\u5408\u5e76\u3002</li> <li>\u5feb\u901f\u6392\u5e8f\uff08Quick Sort\uff09\uff1a</li> <li>\u9009\u62e9\u4e00\u4e2a\u57fa\u51c6\u5143\u7d20\uff0c\u5c06\u6570\u7ec4\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5305\u542b\u6240\u6709\u5c0f\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\uff0c\u53e6\u4e00\u90e8\u5206\u5305\u542b\u6240\u6709\u5927\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\uff0c\u7136\u540e\u9012\u5f52\u5730\u5bf9\u8fd9\u4e24\u90e8\u5206\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002</li> <li>\u4e8c\u5206\u641c\u7d22\uff08Binary Search\uff09\uff1a</li> <li>\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u6bcf\u6b21\u6bd4\u8f83\u4e2d\u95f4\u5143\u7d20\u5c06\u641c\u7d22\u8303\u56f4\u7f29\u5c0f\u4e00\u534a\u3002</li> </ul> <p>\u5206\u6cbb\u6cd5\u7684\u4f18\u70b9\u5728\u4e8e\u5b83\u80fd\u591f\u5c06\u590d\u6742\u95ee\u9898\u7b80\u5316\uff0c\u4f7f\u5f97\u95ee\u9898\u66f4\u5bb9\u6613\u89e3\u51b3\uff0c\u5e76\u4e14\u53ef\u4ee5\u5229\u7528\u5b50\u95ee\u9898\u7684\u89e3\u6765\u6784\u5efa\u539f\u95ee\u9898\u7684\u89e3\u3002\u7136\u800c\uff0c\u5206\u6cbb\u6cd5\u4e5f\u6709\u5176\u5c40\u9650\u6027\uff0c\u6bd4\u5982\u9012\u5f52\u53ef\u80fd\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c\u5408\u5e76\u64cd\u4f5c\u53ef\u80fd\u9700\u8981\u989d\u5916\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u7b49\u3002\u56e0\u6b64\uff0c\u5728\u5e94\u7528\u5206\u6cbb\u6cd5\u65f6\uff0c\u9700\u8981\u4ed4\u7ec6\u5206\u6790\u95ee\u9898\u7684\u6027\u8d28\u548c\u7b97\u6cd5\u7684\u6548\u7387\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#merge-sort-for-counting-inversions","title":"Merge Sort for counting inversions","text":"<p>Counting inversions can be achieved by Merge Sort with simply a counter. (\u8ba1\u6570\u5668)</p> <p>Count inversions (a, b) with a \u2208 A and b \u2208 B : </p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#quick-sort","title":"Quick Sort \u5feb\u901f\u6392\u5e8f","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#algorithm_3","title":"algorithm","text":"<p>\u5728\u5f52\u5e76\u6392\u5e8f\u4e2d\uff0c\u6211\u4eec\u628a\u6570\u7ec4\u5206\u4e3a\u4e24\u4e86\u5b50\u5217\u8868\u7136\u540e\u6392\u5217\u4ed6\u4eec\u3002\u90a3\u4e48\u5982\u679c\u8003\u8651\u5982\u4e0b\u64cd\u4f5c\uff1aChose an object in the array and partition the remaining objects into two groups relative to the chosen entry\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u5728array\u4e2d\u9009\u51fa\u4e00\u4e2a\u4e2d\u95f4\u7684\u5143\u7d20\uff0c\u7136\u540e\u5269\u4e0b\u7684\u5143\u7d20\u5206\u4e3a\u4e24\u7c7b\uff1a\u8981\u4e48\u5927\u4e8e\u8fd9\u4e2a\u5143\u7d20\uff0c\u8981\u4e48\u5c0f\u4e8e\u3002\u5c0f\u4e8e\u7684\u90fd\u6254\u5230\u5de6\u8fb9\uff0c\u5927\u4e8e\u7684\u90fd\u6254\u5230\u53f3\u8fb9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u5c31\u4f1a\u56de\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002\u90a3\u4e48\u5bf9\u4e8e\u5269\u4e0b\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u4e24\u4e2a\u5c0farray\uff0c\u4e5f\u53ef\u4ee5\u91cd\u590d\u8fd9\u6837\u7684\u64cd\u4f5c\uff01\u5c31\u50cf\u5f52\u5e76\u6392\u5e8f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u89c4\u5b9a\uff1a\u5982\u679c\u5b50\u5217\u8868\u8db3\u591f\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u5e94\u7528\u63d2\u5165\u6392\u5e8f</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#case-scenario-and-runtime-analysis","title":"case scenario and runtime analysis","text":"<p>\u5728\u6700\u597d\u7684case\u4e2d\uff0c\u6570\u7ec4\u5e94\u8be5\u80fd\u591f\u8fd1\u4e4e\u88ab\u5747\u5206\u4e3a\u4e24\u4e2a\u7b49\u957f\u7684\u5b50\u5217\u8868\uff0c\u7136\u540e\u56e0\u6b64\uff0c\u8fd0\u884c\u65f6\u95f4\u5e94\u8be5\u5341\u5206\u63a5\u8fd1\u5f52\u5e76\u6392\u5e8f\\(\\Theta(nln(n))\\)\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u4e0d\u662f\u5f88\u5e78\u8fd0\u5462\uff1f</p> <p>\u5047\u5982\u8bf4\u6211\u4eec\u9009\u4e2d\u7684\u5143\u7d20\u603b\u662f\u6070\u597d\u5c31\u662fsub-list\u4e2d\u7684\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u5c31\u8bf4\u660e\uff1a\\(T(n)=T(n-1)+\\Theta(n)=\\Theta(n^2)\\)\uff0c\u6b64\u65f6\u8fd0\u884c\u65f6\u95f4\u7684\u8868\u73b0\u5c31\u4e0b\u964d\u4e86\uff0c\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9000\u5316\u5230\u4e86\\(\\Theta(n^2)\\)\u3002\u6211\u4eec\u5f88\u662f\u5e0c\u671b\u627e\u5230\u5c06\u4f1a\u5f52\u4f4d\u4e8e\u4e2d\u95f4\u7684\u5143\u7d20\uff08median element\uff09\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u5206\u51fa\u6765\u7684\u4e24\u4e2a\u5b50\u5217\u8868\u4f1a\u662f\u7b49\u957f\u7684\uff0c\u4f46\u662f\u5f88\u53ef\u60dc\u7684\u662f\uff0c\u8fd9\u6837\u7684median element\u5f88\u96be\u627e\u5230\uff0c\u751a\u81f3\u6362\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u4e0d\u6307\u671b\u80fd\u591f\u603b\u662f\u627e\u5230\u8fd9\u79cdmedian element\u3002</p> <p>\u5bf9\u4e8e\u5feb\u901f\u6392\u5e8f\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u53c9\u6811\u6765\u8868\u793a\uff08BST representation\uff09\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u6211\u4eec\u8ba4\u4e3a\uff1a\\(a_i, a_j\\) are compared once if one is an ancestor of the other\uff01\u6211\u4eec\u5047\u8bbe\uff1a</p> <p>$Proposition: $ The expected number of compares to quicksort an array of n distinct elements \\(a_1&lt;...&lt;a_n\\) is \\(O(nlogn)\\)\uff08\u6ce8\u610f\uff0c\\(i,j\\)\u4ee3\u8868\u987a\u5e8f\u4e2d\u7684\u6b21\u5e8f\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u4e2d\u7684\u5f15\u7d22\uff01\uff09</p> <p>\u4e3a\u4e86\u8bc1\u660e\u8fd9\u4e2aproposition\uff0c\u6211\u4eec\u9700\u8981\u6709\u4ee5\u4e0b\u5f15\u7406\uff0c\u4e00\u6b65\u4e00\u6b65\u9000\u51fa\uff1a</p> <p>\\(Theorem1:\\) \u5982\u679c\u4e24\u4e2a\u5143\u7d20\u5728sort\u4e0b\u662f\u76f8\u90bb\u7684\uff0c\u90a3\u4e48\u5b83\u4eec\u4e24\u4e2a\u4e00\u5b9a\u5728\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u5019\u6bd4\u8f83\u8fc7\uff0ci.e.\uff0c\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684ancestor\u3002</p> <p>\\(Theorem2:\\)\u5bf9\u4e8e\u4e0d\u540c\u7684n(\u22658)\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\\(a_1&lt;...&lt;a_n\\)\uff0c\u90a3\u4e48\uff1aThe probability that \\(a_1\\) and \\(a_n\\) are compared during randomized quicksort is \\(\\frac{2}{n}\\)\u3002\u56e0\u4e3a\u53ea\u6709first pivot\u5143\u7d20\u662f\\(a_1\\) or \\(a_n\\)\uff0c\u624d\u80fd\u5b9e\u73b0\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684ancestor\uff01\u53ef\u4ee5\u8bbe\u60f3\uff1a\u5982\u679cfirst pivot\u662f\u53e6\u5916\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u6781\u503c\u80af\u5b9a\u4f1a\u5728\u4e00\u5de6\u4e00\u53f3\u3002</p> <p>\\(Theorem3:\\) \\(Probability(a_i,a_j\\ are\\ compared)=\\frac{2}{j-i+1},where\\ i&lt;j\\) </p> <p>\u5b9a\u74063\u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u5462\uff1f\u5047\u8bbe\u5bf9\u4e8e\u6bcf\u4e00\u6b21pivot\u9009\u62e9\u6765\u8bf4\uff0c\u5982\u679c\u9009\u4e2d\u4e86\\(a_k,k\\notin [i, j]\\)\uff0c\u90a3\u4e48\u6b64\u65f6\\(a_i,a_j\\)\u4ecd\u7136\u4f1a\u5728\u4e00\u4e2asub-list\u91cc\u9762\u3002\u4f46\u662f\u5f53pivot\u5f00\u59cb\u8981\u7b2c\u4e00\u6b21\u5728\\(a_k,k\\in [i, j]\\)\u4e2d\u9009\u53d6\u5143\u7d20\u7684\u65f6\u5019\uff0c\u53ea\u6709\u9009\u4e2d\\(a_i,a_j\\)\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u624d\u80fd\u5b9e\u73b0\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684ancestor\uff0c\u5426\u5219\u8fd9\u4e24\u4e2a\u5143\u7d20\u4f1a\u5728\u90a3\u4e2apivot\u8282\u70b9\u7684\u4e00\u5de6\u4e00\u53f3\uff0c\u5c31\u65e0\u6cd5\u505a\u5230\u4e00\u4e2a\u662f\u53e6\u5916\u4e00\u4e2a\u7684ancestor\u4e86\u3002\u663e\u7136\u3002\\(theorem1,2\\)\u662f\u5b9a\u74063\u7684\u7279\u6b8a\u60c5\u51b5\u3002</p> <p>\u6709\u4e86\u5b9a\u7406\u4e09\uff0c\u6211\u4eec\u5c31\u80fd\u63a8\u51fa\uff1aExpected number of compares </p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#median-of-three-strategy","title":"median of three strategy","text":"<p>Consider another strategy: Choose the median of the first, middle, and last entries in the list. This will usually give a better approximation of the actual median. \u6362\u800c\u8a00\u4e4b\uff0c\u9009\u53d6\u5143\u7d20\u7684\u65f6\u5019\uff0c\u770bsub array\u7684\u5934\u5c3e\u548c\u4e2d\u95f4\u5143\u7d20\uff0c\u7136\u540e\u9009\u8fd9\u4e09\u4e2a\u5143\u7d20\u4e2d\u7684\u4e2d\u95f4\u5143\u7d20\u4f5c\u4e3apivot\u3002</p> <p>If we choose a random pivot, this will, on average, divide a set of n items into two sets of size 1/4 n and 3/4 n. Choosing the median-of-three, this will, on average, divide the n items into two sets of size 5/16 n and 11/16 n. It is considered that Median-of-three helps speed the algorithm. </p> <p>Reference: kimi.moonshot.cn</p> <p>\u5177\u4f53\u6765\u8bf4\uff0cMedian-of-three\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u9009\u53d6\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3001\u4e2d\u95f4\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</li> <li>\u6bd4\u8f83\u8fd9\u4e09\u4e2a\u5143\u7d20\uff0c\u5e76\u5c06\u5b83\u4eec\u6309\u7167\u5927\u5c0f\u987a\u5e8f\u6392\u5217\u3002</li> <li>\u9009\u62e9\u4e2d\u95f4\u7684\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\u503c\u3002</li> </ol> <p>\u8fd9\u79cd\u65b9\u6cd5\u7684\u4f18\u52bf\u5728\u4e8e\uff0c\u5b83\u80fd\u591f\u51cf\u5c11\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u5728\u9762\u5bf9\u7279\u5b9a\u7c7b\u578b\u7684\u8f93\u5165\uff08\u4f8b\u5982\uff0c\u5df2\u7ecf\u6392\u5e8f\u6216\u63a5\u8fd1\u6392\u5e8f\u7684\u6570\u7ec4\uff09\u65f6\u6027\u80fd\u6076\u5316\u7684\u98ce\u9669\u3002\u901a\u8fc7\u9009\u62e9\u4e09\u4e2a\u4f4d\u7f6e\u7684\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u57fa\u51c6\u503c\uff0c\u53ef\u4ee5\u66f4\u5927\u6982\u7387\u5730\u4fdd\u8bc1\u57fa\u51c6\u503c\u63a5\u8fd1\u6574\u4e2a\u6570\u7ec4\u7684\u4e2d\u95f4\u503c\uff0c\u4ece\u800c\u5728\u5212\u5206\u8fc7\u7a0b\u4e2d\u5f97\u5230\u66f4\u5747\u8861\u7684\u4e24\u4e2a\u5b50\u6570\u7ec4\uff0c\u63d0\u9ad8\u7b97\u6cd5\u7684\u5e73\u5747\u6548\u7387\u3002</p> <p>\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cMedian-of-three\u7b56\u7565\u901a\u5e38\u4e0e\u5176\u4ed6\u4f18\u5316\u7b56\u7565\u7ed3\u5408\u4f7f\u7528\uff0c\u4f8b\u5982\u4e09\u8def\u5212\u5206\uff083-way partitioning\uff09\u548c\u63d2\u5165\u6392\u5e8f\u3002\u4e09\u8def\u5212\u5206\u662f\u6307\u5728\u5feb\u901f\u6392\u5e8f\u7684\u5212\u5206\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u6570\u7ec4\u5212\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u3001\u7b49\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u5143\u7d20\u4ea4\u6362\uff0c\u63d0\u9ad8\u6392\u5e8f\u6548\u7387\u3002\u800c\u5f53\u6570\u7ec4\u7684\u5927\u5c0f\u8f83\u5c0f\u65f6\uff0c\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u4ee3\u66ff\u5feb\u901f\u6392\u5e8f\u53ef\u4ee5\u66f4\u5feb\u5730\u5b8c\u6210\u6392\u5e8f\u4efb\u52a1\u3002</p> <p>\u603b\u7684\u6765\u8bf4\uff0cMedian-of-three\u662f\u4e00\u79cd\u6709\u6548\u7684\u57fa\u51c6\u503c\u9009\u53d6\u7b56\u7565\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u5728\u5404\u79cd\u60c5\u51b5\u4e0b\u7684\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5728\u9762\u5bf9\u5927\u89c4\u6a21\u6570\u636e\u96c6\u65f6\u3002</p> <p>\u540c\u65f6\uff0cmedian-of-three\u8fd8\u80fd\u5e2e\u5fd9\u51cf\u5c11\u8fed\u4ee3\u7684\u6b21\u6570\uff1a</p> <p></p> <p>\u4f46\u662f\u4e8b\u5b9e\u8bc1\u660e\uff1amedian-of-three\u5bf9\u4e8e\u8fd0\u884c\u65f6\u95f4\u7684\u5f71\u54cd\u662f\u6709\u9650\u7684\uff01</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#implementation_4","title":"implementation","text":"<p>If we choose to allocate memory for an additional array, we can implement the partitioning by copying elements either to the front or the back of the additional array and placing the pivot into the resulting hole. \u7b80\u800c\u8a00\u4e4b\uff1a\u5728\u9009\u5b9a\u4e86pivot\u5143\u7d20\u4e4b\u540e\uff0c\u904d\u5386\u5269\u4f59\u7684\u6570\u7ec4\uff0c\u6bd4pivot\u5927\u7684\u5c31\u4ece\u672b\u5c3e\u5f00\u59cb\u653e\uff0c\u53cd\u4e4b\u5c31\u4ece\u5934\u90e8\u5f00\u59cb\u653e\uff0c\u90a3\u4e48\u6700\u540e\u4f1a\u5269\u4e0b\u4e00\u4e2a\u7a7a\u4f4d\uff0c\u5c31\u653e\u5165pivot element\u3002</p> <p>\u4f46\u662f\u8fd9\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u4e86\u3002\u6211\u4eec\u80fd\u4e0d\u80fd\u5c31\u5730\u64cd\u4f5c\uff1f\u5f53\u7136\u53ef\u4ee5\u3002\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <p></p> <p>\u540c\u65f6\uff0c\u5728\u6bcf\u4e00\u6b21\u8fdb\u884cmedian of three\u7684\u65f6\u5019\uff0c\u628amedian\u653e\u5728\u6700\u540e\uff0c\u628a\u4e09\u4e2a\u4e2d\u6700\u5c0f\u7684\u653e\u5728\u6700\u524d\u9762\uff0c\u4e09\u4e2a\u4e2d\u6700\u5927\u7684\u653e\u5728\u4e2d\u95f4\u3002\u5177\u4f53\u6f14\u793a\u89c1ppt\u3002</p> <p>\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>// quick_sort.cpp\n// reference: ChatGPT 4o model\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\n// \u4e09\u70b9\u53d6\u4e2d\u6cd5\u9009\u62e9\u57fa\u51c6\u503c\nint medianOfThree(int arr[], int low, int high) {\n    int mid = low + (high - low) / 2;\n\n    // \u5c06low, mid, high\u4e09\u4e2a\u503c\u6309\u5927\u5c0f\u6392\u5e8f\n    if (arr[low] &gt; arr[mid])\n        std::swap(arr[low], arr[mid]);\n    if (arr[low] &gt; arr[high])\n        std::swap(arr[low], arr[high]);\n    if (arr[mid] &gt; arr[high])\n        std::swap(arr[mid], arr[high]);\n\n    // \u4f7f\u7528\u4e2d\u95f4\u503c\u4f5c\u4e3a\u57fa\u51c6\u503c\n    std::swap(arr[mid], arr[high - 1]); // \u5c06\u57fa\u51c6\u503c\u653e\u5728high-1\u7684\u4f4d\u7f6e\n    return arr[high - 1];\n}\n\n// \u5206\u533a\u51fd\u6570\nint partition(int arr[], int low, int high) {\n    int pivot = medianOfThree(arr, low, high);  // \u57fa\u51c6\u503c\u4e3a\u4e09\u70b9\u53d6\u4e2d\u7684\u503c\n    int i = low;\n    int j = high - 1;  // pivot\u5df2\u7ecf\u653e\u5728high - 1\u7684\u4f4d\u7f6e\n\n    while (true) {\n        // \u4ece\u5de6\u8fb9\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4pivot\u5927\u7684\u5143\u7d20\n        while (arr[++i] &lt; pivot);\n        // \u4ece\u53f3\u8fb9\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4pivot\u5c0f\u7684\u5143\u7d20\n        while (arr[--j] &gt; pivot);\n\n        if (i &lt; j)\n            std::swap(arr[i], arr[j]);\n        else\n            break;\n    }\n\n    // \u5c06pivot\u653e\u56de\u6b63\u786e\u7684\u4f4d\u7f6e\n    std::swap(arr[i], arr[high - 1]);  // i\u662f\u7b2c\u4e00\u4e2a\u6bd4pivot\u5927\u7684\u4f4d\u7f6e\n    return i;  // \u8fd4\u56depivot\u7684\u6700\u7ec8\u4f4d\u7f6e\n}\n\n// \u5feb\u901f\u6392\u5e8f\u4e3b\u51fd\u6570\nvoid quickSort(int arr[], int low, int high) {\n    if (low + 10 &lt;= high) {  // \u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u7684\u9608\u503c\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\n        int pivotIndex = partition(arr, low, high);\n        quickSort(arr, low, pivotIndex - 1);\n        quickSort(arr, pivotIndex + 1, high);\n    } else {\n        // \u5f53\u5b50\u6570\u7ec4\u8f83\u5c0f\u65f6\uff0c\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u4f18\u5316\n        for (int i = low + 1; i &lt;= high; ++i) {\n            int temp = arr[i];\n            int j;\n            for (j = i; j &gt; low &amp;&amp; arr[j - 1] &gt; temp; --j)\n                arr[j] = arr[j - 1];\n            arr[j] = temp;\n        }\n    }\n}\n\n// \u5feb\u901f\u6392\u5e8f\u7684\u5916\u90e8\u63a5\u53e3\nvoid quickSort(int arr[], int n) {\n    quickSort(arr, 0, n - 1);\n}\n\nint main() {\n    int arr[] = {24, 97, 40, 67, 88, 85, 15, 66, 53, 44};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    quickSort(arr, n);\n\n    std::cout &lt;&lt; \"Sorted array: \";\n    for (int i = 0; i &lt; n; ++i) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#run-time-and-memory-summary","title":"Run-time and memory summary","text":"<p>\u867d\u7136\u8bf4\u6211\u4eec\u5b9e\u73b0\u4e86\u5c31\u5730\u64cd\u4f5c\uff0c\u4f46\u662f\u8fed\u4ee3\u5176\u5b9e\u662f\u9700\u8981\u5360\u7528\u6808\u7a7a\u95f4\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0cthe average-case depth of recursion is \\(\\Theta(ln(n))\\), and the worst-case depth of the recursion is \\(\\Theta(n)\\)</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#divide-and-conquer_1","title":"Divide and Conquer","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#master-theorem","title":"Master Theorem","text":"<p>\u9012\u5f52\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u9012\u5f52\u5f0f\u5982\u4e0a\uff0c\u4e0a\u56fe\u4e2d\u63d0\u5230\u7684\u56db\u4e2a\u53c2\u6570\u7684\u5177\u4f53\u95ee\u9898\u610f\u4e49\u503c\u5f97\u8bb0\u4f4f\u3002\u6211\u4eec\u5f88\u662f\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u901a\u7528\u7684\u89e3\u6cd5\u6765\u8ba1\u7b97\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u77e5\u9053\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a  \u5f53\u521d\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7528\u4e0b\u9762\u8fd9\u4e2a\u6d41\u7a0b\u56fe\u6765\u8ba1\u7b97\u7684\uff1a</p> <p></p> <p>\u90a3\u4e48\u7528\u8fd9\u4e2a\u601d\u8def\uff0c\u80fd\u4e0d\u80fd\u89e3\u51fa\u4e00\u4e9b\u5176\u4ed6\u7684\u9012\u5f52\u5f0f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5462\uff1f\u4e24\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p>\u90a3\u4e48\u8fd9\u4e2a\u7ecf\u9a8c\u603b\u7ed3\u4e00\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e3b\u5b9a\u7406 \\(Master\\ Theorem\\):</p> <p></p> <p></p> <p></p> <p>\u5176\u4e2d\uff1a\\(log_ba\\)\u548cd\u6bd4\u8f83\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u9700\u8981\u6bd4\u8f83\uff1f\\(log_ba\\)\u8868\u793a\u9012\u5f52\u90e8\u5206\u7684\u201c\u5206\u88c2\u589e\u957f\u7387\u201d\uff0c\u800c d \u662f\u975e\u9012\u5f52\u90e8\u5206\u7684\u201c\u5408\u5e76\u589e\u957f\u7387\u201d\u3002\u8fd9\u4e24\u8005\u7684\u6bd4\u8f83\u51b3\u5b9a\u4e86\u9012\u5f52\u8c03\u7528\u7684\u6b21\u6570\u4e0e\u6bcf\u5c42\u9012\u5f52\u6240\u9700\u65f6\u95f4\u7684\u76f8\u5bf9\u8d21\u732e\uff0c\u4ece\u800c\u5f71\u54cd\u7b97\u6cd5\u7684\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u4ee5\u4e0b\u90e8\u5206reference: ChatGPT 4o model</p> <p>\u5f53 \\(log\u2061_b a&gt;d\u65f6\\)\uff08\u9012\u5f52\u90e8\u5206\u4e3b\u5bfc\uff09</p> <ul> <li>\u7c7b\u6bd4\uff1a\u4f60\u5c06\u4efb\u52a1\u5206\u5f97\u975e\u5e38\u7ec6\uff0c\u5b50\u4efb\u52a1\u7684\u6570\u91cf\u968f\u7740\u9012\u5f52\u6b21\u6570\u8fc5\u901f\u589e\u52a0\uff0c\u800c\u6bcf\u4e2a\u5b50\u4efb\u52a1\u7684\u5de5\u4f5c\u91cf\u76f8\u5bf9\u6bd4\u8f83\u5c0f\u3002</li> <li>\u611f\u6027\u7406\u89e3\uff1a\u8fd9\u4e2a\u573a\u666f\u5c31\u50cf\u4f60\u628a\u4efb\u52a1\u5206\u914d\u7ed9\u5f88\u591a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u505a\u7684\u4efb\u52a1\u90fd\u5f88\u7b80\u5355\uff0c\u4f46\u56e0\u4e3a\u5b50\u4efb\u52a1\u7684\u6570\u91cf\u975e\u5e38\u591a\uff0c\u9012\u5f52\u7684\u5206\u88c2\u8fc7\u7a0b\u82b1\u8d39\u4e86\u5927\u91cf\u65f6\u95f4\uff0c\u6700\u7ec8\u65f6\u95f4\u4e3b\u8981\u8017\u5728\u5904\u7406\u8d8a\u6765\u8d8a\u591a\u7684\u5b50\u4efb\u52a1\u4e0a\uff0c\u800c\u4e0d\u662f\u5408\u5e76\u7ed3\u679c\u3002</li> <li>\u7ed3\u8bba\uff1a\u65f6\u95f4\u4e3b\u8981\u82b1\u5728\u4e86\u9012\u5f52\u62c6\u5206\u4e0a\u3002\u9012\u5f52\u6811\u6709\u5f88\u591a\u5c42\uff0c\u6700\u7ec8\u7684\u590d\u6742\u5ea6\u7531\u9012\u5f52\u51b3\u5b9a\uff0c\u5373 \\(T(n)=O(n  log_{b}a)T(n) = \\mathcal{O}(n^{\\log_b a})T(n)=O(nlog_b a)\\)\u3002</li> </ul> <p>\u5f53 \\(log\u2061_b a=d\u65f6\\)\u65f6\uff08\u9012\u5f52\u90e8\u5206\u548c\u5408\u5e76\u90e8\u5206\u5e73\u8861\uff09</p> <ul> <li>\u7c7b\u6bd4\uff1a\u4efb\u52a1\u62c6\u5206\u540e\uff0c\u5b50\u4efb\u52a1\u6570\u91cf\u548c\u6bcf\u5c42\u7684\u5408\u5e76\u5de5\u4f5c\u6070\u597d\u8fbe\u5230\u4e00\u4e2a\u5e73\u8861\u70b9\u3002</li> <li>\u611f\u6027\u7406\u89e3\uff1a\u4f60\u628a\u4efb\u52a1\u5206\u7ed9\u522b\u4eba\u505a\uff0c\u5e76\u4e14\u6bcf\u6b21\u5408\u5e76\u7ed3\u679c\u65f6\uff0c\u5904\u7406\u7684\u5de5\u4f5c\u91cf\u548c\u62c6\u5206\u7684\u5b50\u4efb\u52a1\u6570\u91cf\u5dee\u4e0d\u591a\u3002\u8fd9\u65f6\uff0c\u6bcf\u4e00\u5c42\u7684\u9012\u5f52\u5904\u7406\u548c\u5408\u5e76\u5de5\u4f5c\u51e0\u4e4e\u540c\u6837\u8017\u65f6\uff0c\u6700\u7ec8\u7684\u590d\u6742\u5ea6\u4f1a\u53d7\u5230\u4e24\u8005\u7684\u5171\u540c\u5f71\u54cd\u3002</li> <li>\u7ed3\u8bba\uff1a\u9012\u5f52\u548c\u5408\u5e76\u5de5\u4f5c\u76f8\u4e92\u5e73\u8861\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e26\u6709\u4e00\u4e2a\u5bf9\u6570\u9879\uff0c\u5373 \\(T(n)=O(n^d log\u2061n)T(n) = \\mathcal{O}(n^d \\log n)T(n)=O(n^d logn)\\)\u3002</li> </ul> <p>\u5f53 \\(log\u2061_b a&lt;d\u65f6\\)\u65f6\uff08\u5408\u5e76\u90e8\u5206\u4e3b\u5bfc\uff09</p> <ul> <li>\u7c7b\u6bd4\uff1a\u4f60\u628a\u4efb\u52a1\u62c6\u5206\u6210\u5f88\u591a\u4e2a\u5b50\u4efb\u52a1\uff0c\u4f46\u6bcf\u4e2a\u5b50\u4efb\u52a1\u7684\u5de5\u4f5c\u91cf\u975e\u5e38\u5c0f\uff0c\u5408\u5e76\u5b50\u4efb\u52a1\u7684\u65f6\u95f4\u53cd\u800c\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u5b50\u4efb\u52a1\u7684\u6267\u884c\u65f6\u95f4\u3002</li> <li>\u611f\u6027\u7406\u89e3\uff1a\u5c31\u50cf\u4f60\u8ba9\u5f88\u591a\u4eba\u5e2e\u5fd9\u505a\u4e00\u4e9b\u5f88\u5c0f\u7684\u5de5\u4f5c\uff0c\u4f46\u6700\u7ec8\u4f60\u9700\u8981\u82b1\u5927\u91cf\u65f6\u95f4\u628a\u6240\u6709\u7684\u7ed3\u679c\u5408\u5e76\u5728\u4e00\u8d77\u3002\u6b64\u65f6\uff0c\u9012\u5f52\u4ea7\u751f\u7684\u5b50\u4efb\u52a1\u867d\u7136\u5f88\u591a\uff0c\u4f46\u5b83\u4eec\u5404\u81ea\u6240\u9700\u7684\u65f6\u95f4\u6bd4\u8f83\u5c11\uff0c\u4e3b\u8981\u8017\u65f6\u96c6\u4e2d\u5728\u5408\u5e76\u8fc7\u7a0b\u3002</li> <li>\u7ed3\u8bba\uff1a\u5408\u5e76\u90e8\u5206\u5360\u4e3b\u5bfc\u5730\u4f4d\uff0c\u590d\u6742\u5ea6\u7531\u975e\u9012\u5f52\u90e8\u5206\u51b3\u5b9a</li> </ul> <p>:warning:\u91cd\u8981\u7ed3\u8bba\uff1a\\(T(n)=T(\\alpha n)+T(\\beta n)+\\Theta(n)\\)\uff0c\u5982\u679c\\(\\alpha + \\beta=1\\)\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\Theta(nlogn)\\)\uff0c\u800c\u5982\u679c\\(\\alpha + \\beta&lt;1\\)\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\Theta(n)\\)</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#example","title":"Example","text":""},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#integer-multiplication","title":"Integer Multiplication","text":"<p>\u6211\u4eec\u77e5\u9053\u7ed9\u4e24\u4e2a\u4e8c\u8fdb\u5236\u7684\u6570\u5b57x y\uff0c\u8ba1\u7b97\u52a0\u51cf\u90fd\u662f\u4e00\u4f4d\u4e00\u4f4d\u8fdb\u884c\u64cd\u4f5c\u7684\u3002\u90a3\u4e48\u4e58\u6cd5\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fGrade-school\u7b97\u6cd5\uff0c\u901a\u5e38\u79f0\u4e3a\u201c\u5c0f\u5b66\u7b97\u672f\u7b97\u6cd5\u201d\uff0c\u662f\u4e00\u79cd\u7528\u4e8e\u624b\u7b97\u4e58\u6cd5\u7684\u7b97\u6cd5\uff0c\u5b83\u5229\u7528\u4e86\u4e58\u6cd5\u5bf9\u52a0\u6cd5\u7684\u5206\u914d\u5f8b\u6765\u7b80\u5316\u8ba1\u7b97\u8fc7\u7a0b\u3002\u5982\u4e0b\u56fe\uff1a\u90a3\u4e48\u6211\u4eec\u80fd\u591f\u76f4\u89c2\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f\\(\\Theta(n^2)\\)</p> <p></p> <p>\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u80fd\u4e0d\u80fd\u7528\u5206\u6cbb\u89e3\u51b3\u5462\uff1f\u76f4\u63a5\u60f3\u53ef\u80fd\u4f1a\u6709\u70b9\u56f0\u96be\uff0c\u90a3\u4e48\u76f4\u63a5\u89c1\u4e0b\u56fe\uff1a\u6309\u7167bit\u4f4d\u6570\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u7136\u540e\u6839\u636e2\u7684\u5e42\u7684\u6027\u8d28\u53bb\u7528\u8fd9\u4e24\u90e8\u5206\u53bb\u8868\u793a\u539f\u6765\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u539f\u6765\u7684x y\u76f8\u4e58\u5c31\u80fd\u66f4\u6362\u4e00\u79cd\u65b0\u7684\u8868\u8fbe\u5f62\u5f0f\uff1a</p> <p></p> <p>OK\uff0c\u90a3\u4e48a b c d\u540c\u6837\u4e5f\u53ef\u4ee5\u5404\u81ea\u4e00\u5206\u4e3a\u4e8c\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f4\u5230\u6700\u540e\u53ea\u67091\u4e2a\u6570\u5b57\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u80fd\u591f\u8bbe\u8ba1\u5982\u4e0b\u7684\u4f2a\u4ee3\u7801\uff1a</p> <p></p> <p>\u90a3\u4e48\u6839\u636e\u7b97\u6cd5\uff0c\u6211\u4eec\u80fd\u591f\u8868\u793a\u8be5\u6d41\u7a0b\u7684\u5faa\u73af\u6811Recursion Tree\uff1a</p> <p></p> <p>\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8868\u793a\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T(n)=4T(\\frac{n}{2})+\\Theta(n)\\)\uff0c\u5229\u7528Master Theorem\uff0c\u6211\u4eec\u76f4\u5230\u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\\(T(n)=\\Theta(n^{log_24} = \\Theta(n^2))\\)</p> <p>\u7279\u522b\u5730\uff1a\u5982\u679c\u5e0c\u671b\u8ba1\u7b97bc + ad\u7684\u4e2d\u95f4\u9879\uff0c\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u518d\u8fdb\u4e00\u6b65\u5206\u6cbb\uff0c\u56e0\u4e3a\uff1a  \u6240\u4ee5\u5176\u5b9e\u53ea\u9700\u8981ac bd\u8fd9\u4e24\u4e2a\u7ed3\u679c\u9700\u8981\u8fdb\u884c\u5206\u6cbb\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u8fd9\u79cd\u7b97\u6cd5\u4e2d\uff0c\u4e00\u6b21\u5faa\u73af\u4e2d\u53ea\u9700\u8981\u4e09\u4e2a1/2n-bit\u6574\u6570\u76f8\u4e58\u64cd\u4f5c\u3002\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p></p> <p>Recursion Tree\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\u6211\u4eec\u77e5\u9053\uff1a\\(T(n) = 3T(\\frac{n}{2}) + \\Theta(n)\\)\uff0c\u6839\u636eMaster Theorem\u53ef\u77e5\u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f\uff1a\\(T(n) = T(n^{log_23})\\)</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#matrix-multiplication","title":"Matrix Multiplication","text":"<p>\u5b66\u8fc7\u7ebf\u6027\u4ee3\u6570\u7684\u90fd\u77e5\u9053\uff0c\u4e24\u4e2a\u65b9\u9635\u7684\u4e58\u6cd5\u662f\u5341\u5206\u714e\u71ac\u7684\uff0c\u5c24\u5176\u662f\u884c\u5217\u6570\u8f83\u5927\u7684\u65f6\u5019\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8ba1\u7b97\u673a\u4e5f\u82e6\u4e8e\u77e9\u9635\u4e58\u6cd5\u9ad8\u989d\u7684\u8ba1\u7b97\u91cf\u3002\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u80fd\u591f\u51cf\u5c11\u8ba1\u7b97\u91cf\u5462\uff1f\u5206\u6cbb\u601d\u60f3\u80fd\u4e0d\u80fd\u5e2e\u5fd9\u8d77\u5230\u4f5c\u7528\u5462\uff1f</p> <p>\u8003\u8651\u4e24\u4e2a\u56db\u9636\u65b9\u9635\u7684\u4e58\u6cd5\uff0c\u90a3\u4e48\u80fd\u4e0d\u80fd\u4ee5\u4e8c\u9636\u65b9\u9635\u4e3a\u5355\u4f4d\uff0c\u7136\u540e\u53bb\u62c6\u5206\u5927\u77e9\u9635\u4e58\u6cd5\u7684\u8fc7\u7a0b\u5462\uff1f\u5982\u4e0b\u56fe\u7684\u5206\u89e3\u95ee\u9898\u7684\u601d\u8def\uff1a\u628a\u77e9\u9635\u5212\u5206\u51fa\u5c0f\u77e9\u9635\u540e\uff0c\u5c0f\u77e9\u9635\u4e5f\u80fd\u89c6\u4e3aentry\uff0c\u53bb\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u3002</p> <p></p> <p></p> <p>\u4f46\u662f\u5f88\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u8c8c\u4f3c\u5e76\u4e0d\u80fd\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u539f\u6765\u7684n\u9636\u65b9\u9635\u76f8\u4e58\uff0c\u4e00\u5171\u6709\\(n^2\\)\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u7531n\u4e2a\u4e58\u6cd5\u540e\u76f8\u52a0\u5f97\u5230\u7684\uff0c\u56e0\u6b64\u8ba1\u7b97\u590d\u6742\u5ea6\u662f\\(\\Theta(n^3)\\)\u3002\u800c\u5982\u679c\u4f7f\u7528\u4e86\u4e0a\u8ff0\u7684\u5212\u5206\u65b9\u6cd5\uff0c\u4f9d\u636e\u4e3b\u5b9a\u7406\uff0c\\(log_28 = 3\\)\uff0c\u8bf4\u660e\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\\(\\Theta(n^3)\\)\u3002\u90a3\u8fd9\u4e2a\u7b97\u6cd5\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u7b54\u6848\u662f\u8c8c\u4f3c\u6ca1\u6709\u7528\uff0c\u4f46\u662f\u63d0\u4f9b\u4e86\u4f18\u5316\u601d\u8def\uff1aStrassen\u2019s trick</p> <p>\u6838\u5fc3\u601d\u8def\uff1a\u540c\u6837\u662fn\u9636\u65b9\u9635\u5212\u5206\u4e3an/2\u65b9\u9635\uff0c\u4f46\u662fstrassen\u4ec5\u4ec5\u4f7f\u7528\u4e867\u4e2a\u5b50\u77e9\u9635\u4e58\u6cd5\u5c31\u7ec4\u5408\u51fa\u4e86\u539f\u77e9\u9635\u3002\u793a\u610f\u56fe\u4e0e\u4f2a\u4ee3\u7801\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p></p> <p>\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\uff0c\u8ba1\u7b97\u590d\u6742\u5ea6\u6839\u636e\u4e3b\u5b9a\u7406\u5c31\u53d8\u6210\u4e86\uff1a\\(\\Theta(n^{log_27})\\)\u3002\u8fd9\u770b\u4f3c\u5df2\u7ecf\u662f\u4e00\u4e2ahappy ending for a story\u4e86\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u7075\u9b42\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u80fd\u5316\u7b80\u52307\u6b21\u4e58\u6cd5\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u662f6\u6b21\uff1f\u4e8b\u5b9e\u4e0a\u6709\u5f88\u591a\u4e0a\u4e16\u7eaa\u7684\u7814\u7a76\u5df2\u7ecf\u63a2\u8ba8\u8fc7\u8fd9\u4e2a\u95ee\u9898\u4e86\uff0c\u7ed3\u8bba\u5c31\u662f\uff1a\u75286\u6b21\u5373\u4ee5\u4e0b\u7684\u4e58\u6cd5\uff0c\u5bf9\u4e8en/2\u7684\u5212\u5206\u65b9\u6cd5\u6765\u8bf4\uff0c\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u540e\u4eba\u4e00\u6b65\u6b65\u5730\u5c1d\u8bd5\u5728\u8ba1\u7b97\u590d\u6742\u5ea6\u4e0a\u53d6\u5f97\u7a81\u7834\uff0c\u4e0d\u8bba\u662f\u6539\u53d8\u5212\u5206\u65b9\u6cd5\uff0c\u8fd8\u662f\u4f18\u5316\u8868\u8fbe\u65b9\u5f0f\u4ee5\u51cf\u5c11\u4e58\u6cd5\u6b21\u6570\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#fast-fourier-transform","title":"Fast Fourier Transform","text":"<p>FFT\uff0c\u5feb\u901f\u5085\u91cc\u53f6\u8f6c\u5316\uff0cis a fast way to convert between time domain and frequency domain\u3002\u4f46\u662f\u6362\u4e00\u79cd\u89d2\u5ea6\u6765\u8bf4\uff0cFFT is also a fast way to multiply and evaluate polynomials\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4f8b\u5b50\u4ecb\u7ecd\u4e2d\uff0c\u91c7\u7528\u540e\u8005\u7684\u5ba1\u89c6\u89d2\u5ea6\u3002</p> <p>\u9996\u5148\u89c1\u4e0b\u56fe\u6240\u793a\u7684\u591a\u9879\u5f0f\u7684coefficient representation\uff1b\u5176\u6b21\uff0c\u6211\u4eec\u77e5\u9053\u4ee3\u6570\u57fa\u672c\u5b9a\u7406\uff1a\u4e00\u4e2a\u6700\u9ad8n\u6b21\u5e42\u7684\u865a\u6570\u7cfb\u6570\u7684\u591a\u9879\u5f0f\u6709n\u4e2a\u865a\u6570\u6839\u3002</p> <p></p> <p>\u540c\u65f6\uff0c\u591a\u9879\u5f0f\u4e5f\u53ef\u901a\u8fc7point-value representation\uff1a</p> <p></p> <p>\u8fd9\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\uff0c\u5728\u591a\u9879\u5f0f\u95f4\u4e58\u6cd5\u548c\u4ee3\u503c(multiply and evaluate)\u8fd9\u4e24\u65b9\u9762\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5404\u6709\u4f18\u7565\uff1acoefficient\u65b9\u5f0f\u4e58\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n^2)\\)\uff0c\u4ee3\u503c\u662f\\(\\Theta(n)\\)\uff08\u8fd9\u70b9\u90fd\u80fd\u611f\u6027\u7406\u89e3\uff09\uff1b\u800cpoint-value\u65b9\u5f0f\u4e58\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n)\\)\uff0c\u4ee3\u503c\u662f\\(\\Theta(n^2)\\)\u3002\u80fd\u4e0d\u80fd\u628a\u4e24\u8005\u7684\u4f18\u52bf\u90fd\u7ed3\u5408\u8d77\u6765\uff1f</p> <p>\u9996\u5148\u8981\u4e86\u89e3\u4e24\u4e2a\u8868\u8fbe\u65b9\u5f0f\u80fd\u4e0d\u80fd\u76f8\u4e92\u8f6c\u5316\uff1b</p> <p></p> <p></p> <p>\u5176\u6b21\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u591a\u9879\u5f0f\u6765\u8bf4\uff0c\u53ef\u4ee5\u4ee5\u5947\u6570\u9879\u5076\u6570\u9879\u4e3a\u4f9d\u636e\u8fdb\u884c\u5212\u5206\uff1a</p> <p></p> <p>\u7136\u540e\uff0c\u8865\u5145Roots of Unity\u7684\u6982\u5ff5\uff0c\u4fbf\u4e8e\u540e\u7eed\u7684\u8868\u793a\uff1a</p> <p></p> <p>\u90a3\u4e48\uff0c\u5c31\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u56fe\u7684\u5206\u6cbb\u8fdb\u884cEvaluation\uff1a</p> <p></p> <p></p> <p>\u56e0\u6b64\u6709\uff1aThe FFT algorithm evaluates a degree n \u2013 1 polynomial at each of the nth roots of unity in $O(n logn) $arithmetic operations and O(n) extra space. </p> <p>\u53ef\u80fd\u8fd8\u4f1a\u6709\u70b9\u8499\u5708\uff0c\u5982\u4e0b\u7684\u89e3\u91ca\u6765\u81eaChatGPT 4o\uff0c\u53ef\u80fd\u66f4\u52a0\u7684\u7b80\u6d01\u6613\u61c2\uff1a(\u6838\u5fc3\u5728\u4e8e\u65cb\u8f6c\u56e0\u5b50\u7684\u8bbe\u8ba1\uff0c\u4f46\u662f\u6ca1\u6709\u5fc5\u8981\u7406\u89e3\u5b83\uff1b\u53ea\u9700\u8981\u6293\u4f4f\u5408\u5e76\u5b50FFT\u7ed3\u679c\u7684\u65f6\u5019\u6240\u505a\u7684\u64cd\u4f5c\u662f\u4ec0\u4e48\u5373\u53ef)</p> <p>\u8774\u8776\u64cd\u4f5c\u662f\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\u4e2d\u7684\u5173\u952e\u6b65\u9aa4\uff0c\u5b83\u7528\u6765\u5408\u5e76\u9012\u5f52\u5206\u6cbb\u6cd5\u4e2d\u5f97\u5230\u7684\u5b50\u95ee\u9898\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7ec8\u7684DFT\u7ed3\u679c\u3002\u8774\u8776\u64cd\u4f5c\u4e4b\u6240\u4ee5\u5fc5\u4e0d\u53ef\u5c11\uff0c\u662f\u56e0\u4e3a\u5b83\u5de7\u5999\u5730\u5c06\u5206\u89e3\u540e\u7684\u5c0f\u89c4\u6a21DFT\u7ed3\u679c\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u66f4\u5927\u7684DFT\u7ed3\u679c\uff0c\u4ece\u800c\u52a0\u5feb\u6574\u4f53\u8ba1\u7b97\u8fc7\u7a0b\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u77e5\u9053FFT\u662f\u901a\u8fc7\u5206\u6cbb\u6cd5\u6765\u51cf\u5c11\u8ba1\u7b97\u590d\u6742\u5ea6\u7684\u3002\u5728FFT\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a NNN \u7684\u5e8f\u5217 \\(x_n\\)\uff0c\u5b83\u4f1a\u9012\u5f52\u5730\u5c06\u8fd9\u4e2a\u5e8f\u5217\u62c6\u5206\u6210\u4e24\u90e8\u5206\uff1a</p> <ul> <li>\u5076\u6570\u9879\u5e8f\u5217 \\(x_0, x_2, x_4, \\dots\\)</li> <li>\u5947\u6570\u9879\u5e8f\u5217 \\(x_1, x_3, x_5, \\dots\\)</li> </ul> <p>\u8fd9\u6837\uff0c\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684DFT\u53ef\u4ee5\u88ab\u62c6\u89e3\u6210\u4e24\u4e2a\u957f\u5ea6\u4e3aN/2 \u7684DFT\uff0c\u5206\u522b\u8ba1\u7b97\u5076\u6570\u548c\u5947\u6570\u9879\u7684DFT\u3002</p> <p>\u5206\u89e3\u5b8c\u4e4b\u540e\uff0c\u867d\u7136\u6211\u4eec\u5f97\u5230\u4e86\u4e24\u4e2a\u8f83\u5c0f\u7684DFT\u7ed3\u679c\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5b8c\u6574\u7684DFT\u7ed3\u679c\u3002\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u8fd9\u4e9b\u5c0f\u89c4\u6a21\u7684DFT\u7ed3\u679c\u7ec4\u5408\u6210\u5b8c\u6574\u7684DFT\u3002</p> <p>\u901a\u8fc7\u5206\u6cbb\u6cd5\u62c6\u5206\u5f97\u5230\u7684\u5076\u6570\u9879DFT EkE_kEk \u548c\u5947\u6570\u9879DFT OkO_kOk \u4ee3\u8868\u7684\u662f\u539f\u59cb\u5e8f\u5217\u4e2d\u7684\u4e0d\u540c\u90e8\u5206\u3002\u4e3a\u4e86\u5f97\u5230\u5b8c\u6574\u7684DFT\u7ed3\u679c\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u7ed3\u679c\u7ec4\u5408\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a NNN \u7684\u5e8f\u5217\u3002\u8fd9\u4e2a\u7ec4\u5408\u8fc7\u7a0b\u9700\u8981\u5f15\u5165\u6240\u8c13\u7684\u201c\u65cb\u8f6c\u56e0\u5b50\u201d\uff08\u5373 \\(e^{-i \\frac{2\\pi}{N} k}\\)\uff0c\u4e5f\u79f0\u4e3a\u201c\u8774\u8776\u56e0\u5b50\u201d\uff09\uff0c\u8fd9\u4e2a\u65cb\u8f6c\u56e0\u5b50\u662fDFT\u7684\u672c\u8d28\u7279\u5f81\u3002</p> <p>FFT\u4e2d\u7684\u8774\u8776\u64cd\u4f5c\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u6765\u7ec4\u5408\u5076\u6570\u548c\u5947\u6570\u90e8\u5206\u7684DFT\uff1a</p> <p>\\(X_k = E_k + W_k \\cdot O_k\\)</p> <p>\\(X_{k+N/2}=Ek\u2212W_k\u22c5O_k\\)</p> <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(E_k\\) \u662f\u5076\u6570\u9879\u7684DFT\u7ed3\u679c\u3002</li> <li>\\(O_k\\)\u662f\u5947\u6570\u9879\u7684DFT\u7ed3\u679c\u3002</li> <li>\\(W_k = e^{-i \\frac{2\\pi}{N} k}\\)\u662f\u65cb\u8f6c\u56e0\u5b50\uff08\u8774\u8776\u56e0\u5b50\uff09\u3002</li> </ul> <p>\u8fd9\u5c31\u662f\u8774\u8776\u64cd\u4f5c\u7684\u6838\u5fc3\uff0c\u5b83\u4f7f\u7528\u65cb\u8f6c\u56e0\u5b50\u5c06\u5076\u6570\u548c\u5947\u6570\u90e8\u5206\u7684DFT\u7ed3\u679c\u7ec4\u5408\u8d77\u6765\uff0c\u5f97\u5230\u5b8c\u6574\u7684DFT\u7ed3\u679c\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#technical-skill","title":"Technical skill","text":"<p>\u5728\u8fd9\u4e00\u7ae0\u8282\uff0c\u5c06\u4f1a\u603b\u7ed3\u6c42\u5206\u6cbb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6280\u5de7\u548c\u9898\u578b\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#_5","title":"\u6570\u5217\u9898","text":"<p>\u4e00\u7c7b\u7684\u9898\u76ee\u5341\u5206\u7c7b\u4f3c\u4e8e\u9ad8\u4e2d\u6570\u5217\u9898\uff0c\u9700\u8981\u5927\u91cf\u4f7f\u7528\u9ad8\u4e2d\u6570\u5b66\u4e2d\u505a\u6570\u5217\u9898\u7684\u6280\u5de7\uff0c\u4ee5\u53ca\u5bf9\u8fed\u4ee3\u6811\u7684\u7406\u89e3\u3002</p> <p>\u4f8b1\uff1a\\(T_1(n) = \\begin{cases}\\Theta(1),&amp; 1\\leq n\\leq k\\\\ T_1(k) + T_1(n - k) + \\Theta(n),&amp; n&gt; k \\end{cases}.\\) (\\(k\\) is a constant.)</p> <p>Since \\(T_1(n)=\\Theta(1),1\\leq n\\leq k\\), so when \\(n=mk\\), k is any constant integer, according to the recursion equation we have:  Therefore the time complexity is \\(\\Theta(n^2)\\).</p> <p>\u4f8b2\uff1a\\(T(n) = T(n-1) + \\Theta(c^n),c&gt;1\\)  \u4e0a\u8ff0\u5f0f\u5b50\u5168\u90e8\u76f8\u52a0\u5f97\u5230\uff1a\\(T(n) = \\Theta(\\sum_{i=1}^{n} c^i) = \\Theta(c^n)\\)</p> <p>\u4f8b3\uff1a\\(T(n)=\\Theta(n) + \\frac{1}{n}\\sum_{i=0}^{n-1}(T(i) + T(n-i))\\)\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u5c31\u662f\u5728\u6c42\u5feb\u901f\u6392\u5e8f\u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6</p> <p></p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%92%E5%BA%8F.html#_6","title":"\u6362\u5143+\u4e3b\u5b9a\u7406/\u8fed\u4ee3\u6811","text":"<p>\u4f8b4\uff1a\\(T_3(n) = 2T_3(\\sqrt{n}) + \\Theta(\\log n)\\)</p> <p>Let \\(n=2^m\\), we have:\\(T_3(2^m) = 2T_3(2^{\\frac{m}{2}}) +\\Theta(m)\\). Then we let \\(t(m) = T_3(2^m)\\), we have:  Right now we can use the master theorem, we have:  So finally, let \\(n = 2^m\\), we have the time complexity result:  \u4f8b5\uff1a\\(T(n) = T(\\frac{n}{2})+\\Theta(logn)\\)</p> <p>Let \\(n=2^m, T(2^m)=S(m)\\), we have:  </p>"},{"location":"Data_Structure_and_Algorithm/%E6%9C%9F%E4%B8%AD%E5%9B%9E%E9%A1%BE.html","title":"\u671f\u4e2d\u56de\u987e","text":""},{"location":"Data_Structure_and_Algorithm/%E6%9C%9F%E4%B8%AD%E5%9B%9E%E9%A1%BE.html#_2","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u5206\u6cbb","text":"<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5173</li> </ul> <ul> <li>\\(O(n!)\\)\u662f\u6700\u5927\u7684\uff0c\u800c\\(O(nlogn) &lt; O(n^i)\\)\u5982\u679c\\(i&gt;1\\)</li> <li>\u9009\u62e9\u9898\u4e2d\u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u8868\u8ff0\uff0c\u683c\u5916\u9700\u8981\u6ce8\u610f\u4f7f\u7528\u7684\u662f\u90a3\u4e2a\u7b26\u53f7\uff01\u6bd4\u5982\uff1a\u8282\u70b9\u6570\u91cf\u4e3an\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u662f\\(O(n)\\)\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u8bba\u5c31\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\\(logn = O(n)\\)</li> <li>\\(T(n)=T(\\alpha n)+T(\\beta n)+\\Theta(n)\\)\uff0c\u5982\u679c\\(\\alpha + \\beta=1\\)\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\Theta(nlogn)\\)\uff0c\u800c\u5982\u679c\\(\\alpha + \\beta&lt;1\\)\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\Theta(n)\\)</li> <li>\u5bf9\u4e8e\u4e00\u4e2a\u7b97\u6cd5\u6765\u8bf4\uff0c\u53ef\u80fd\u505a\u5230\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n)\\)\u800c\u6700\u574f\u662f\\(\\Omega(n)\\)\u2014\u2014\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\u4e3a\\(\\Theta(n)\\)</li> </ul> <p>\u5bf9\u4e8e\\(T(n) = aT(n/b)+\\Theta(n^klog^pn)\\)\u6765\u8bf4\uff1a</p> <ol> <li> <p>if \\(a &gt; b^k\\), then \\(T(n) = \u03b8(n^{log_ba})\\)</p> </li> <li> <p>if \\(a = b^k\\), then :</p> </li> </ol> <p>(a) if p &gt; -1, then \\(T(n) = \u03b8(n^{log_ba} log^{p+1}n)\\)</p> <p>(b) if p = -1, then \\(T(n) = \u03b8(n^{log_ba} log(logn)\\)</p> <p>(c) if p &lt; -1, then \\(T(n) = \u03b8(n^{log_ba})\\)</p> <ol> <li>if \\(a &lt; b^k\\), then     (a) if p &gt;= 0, then \\(T(n) = \u03b8(n^k log^pn)\\)    (b) if p &lt; 0, then \\(T(n) = \u03b8(n^k)\\)</li> </ol>"},{"location":"Data_Structure_and_Algorithm/%E6%9C%9F%E4%B8%AD%E5%9B%9E%E9%A1%BE.html#_3","title":"\u6570\u636e\u7ed3\u6784","text":"<ul> <li>\\(\\lambda = \\frac{N}{M}\\)\u4e3a\u54c8\u5e0c\u8868\u7684load factor\uff0c\u7528\u6765\u8868\u793a\u6bcf\u4e00\u4e2abin\u4e0a\u9762\u6240\u62e5\u6709\u7684\u5143\u7d20\u7684\u6570\u91cf\u3002\u5982\u679cload factor\u5f88\u5927\uff0c\u90a3\u4e48access times\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u589e\u5927\u5230\\(O(\\lambda)\\)\u3002</li> <li>\u54c8\u5e0c\u8868Lazy Erasing\u4e2d\uff0c\u5220\u6389\u4e86\u4e00\u4e2a\u5730\u65b9\u7684\u5143\u7d20\uff0c\u7136\u540e\u6807\u8bb0\u5b83\u4e3aERASED\uff0c\u5728\u641c\u7d22\u7684\u65f6\u5019\u89c6\u5b83\u4e3aoccupied\uff0c\u63d2\u5165\u7684\u65f6\u5019\u89c6\u5b83\u4e3aunoccupied\u3002</li> <li>Linear Probing\u4e0b\uff0c\u67e5\u627e\u7684\u5e73\u5747\u63a2\u6d4b\u6b21\u6570\u4e3a\uff1a</li> </ul> \\[ \\frac{1}{2}(1+\\frac{1}{1-\\lambda}),\\mbox{successful search} \\] \\[ \\frac{1}{2}(1+\\frac{1}{(1-\\lambda)^2}),\\mbox{unsuccessful search} \\] <ul> <li>Quadratic probing\u6563\u5217\u51fd\u6570\u4e3a\uff1a\\(h(k,i)=(h_1(k)+c_1i+c_2i^2)modm\\)\uff0cThis guarantees that all M entries are visited before the pattern repeats\uff0cruntime\u8bc4\u4f30\u5982\u4e0b\uff1a</li> </ul> <ul> <li>Double Hashing\u533a\u522b\u4e8e\u7ebf\u6027\u63a2\u6d4b\u548c\u4e8c\u6b21\u63a2\u6d4b\uff0c\u662f\u72ec\u7acb\u7684\u4e00\u79cd\u65b9\u6cd5\u3002</li> </ul> <p>\u53cc\u91cd\u54c8\u5e0c\u7684\u8fc7\u7a0b\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u7b2c\u4e00\u54c8\u5e0c\u51fd\u6570 \\(h_1(x)\\)\uff1a\u7528\u4e8e\u5c06\u5143\u7d20\u6620\u5c04\u5230\u54c8\u5e0c\u8868\u4e2d\u7684\u4e00\u4e2a\u521d\u59cb\u4f4d\u7f6e\u3002</li> <li>\u7b2c\u4e8c\u54c8\u5e0c\u51fd\u6570(secondary hashing function) \\(h_2(x)\\)\uff1a\u7528\u4e8e\u8ba1\u7b97\u6b65\u957f\uff0c\u5373\u5728\u53d1\u751f\u51b2\u7a81\u65f6\u4ece\u8be5\u4f4d\u7f6e\u8df3\u8f6c\u591a\u5c11\u4e2a\u4f4d\u7f6e\u3002</li> </ol> <p>\u6563\u5217\u51fd\u6570\u4e3a\uff1a\\(h(k,i)=(h_1(k)+ih_2(k))modm\\)\u3002\u6240\u4ee5\u8bf4\uff1a\u7ebf\u6027\u63a2\u6d4b\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7b2c\u4e8c\u54c8\u5e0c\u51fd\u6570\u4e3a1\u7684double hashing\uff0c\u4e8c\u6b21\u63a2\u6d4b\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7b2c\u4e8c\u54c8\u5e0c\u51fd\u6570\u4e3a\\((c_1+c_2i)\\)\u7684double hashing\u3002</p> <ul> <li> <p>\u6811\u4e2d\u4e00\u4e9b\u6982\u5ff5\u7684\u7ec6\u8282\uff1a</p> </li> <li> <p>A path is a sequence of edges between nodes. The length of this path is number of edges in the path. Depth is the length of the node's path. The height of a tree is defined as the maximum depth of any node within the tree. The height of a tree with one node is 0. For convenience, we define the height of the empty tree to be  \u20131</p> </li> <li>ancestor/\u7956\u5148\u8282\u70b9\uff1aany node y on the (unique) path from root r to node n is an ancestor of node n. \u56e0\u6b64\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u662f\u81ea\u5df1\u7684\u7956\u5148\u8282\u70b9</li> <li>descendent/\u540e\u4ee3\u8282\u70b9\uff1aany node y for which n is an ancestor of y. \u56e0\u6b64\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u662f\u81ea\u5df1\u7684\u540e\u4ee3\u8282\u70b9\u3002\u540c\u65f6\uff0cstrict descendant\u89c4\u5b9a\u4e86\u81ea\u5df1\u4e0d\u80fd\u662f\u81ea\u5df1\u7684\u540e\u4ee3\u8282\u70b9\u3002</li> <li> <p>subtree\uff1aGiven any node \\(a\\) within a tree, the collection of \\(a\\) and all of its descendants is said to be a subtree of the tree with root \\(a\\).</p> </li> <li> <p>\u4e00\u4e2a\u542b\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u5b83\u7684ordered binary tree\u6570\u91cf\u4e3a\\(\\frac{2n!}{(n+1)!n!}\\)\u79cd</p> </li> <li>:warning:\u9700\u638c\u63e1\u7684\u6280\u80fd\uff1a\u6808\u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff1b\u961f\u5217\u5b9e\u73b0\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22</li> <li>Traversal on forest\u53ef\u4ee5\u901a\u8fc7\u4eba\u4e3a\u6dfb\u52a0\u865a\u7a7a\u6839\u8282\u70b9\u6765\u5b9e\u73b0\u3002</li> <li>\u5148\u5e8f+\u540e\u7eed\u4e0d\u80fd\u786e\u5b9a\u6811\u7684\u7ed3\u6784\uff0c\u800c\u53e6\u5916\u4e24\u79cd\u7ec4\u5408\u53ef\u4ee5</li> <li>full binary tree\uff08\u5b8c\u6574\u4e8c\u53c9\u6811\uff09\u662f\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u6ee1\u8282\u70b9\uff08\u5de6\u53f3\u5b50\u6811\u5747\u975e\u7a7a\uff09\uff0c\u8981\u4e48\u662f\u53f6\u5b50\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u3002 \u6240\u6709\u53f6\u7ed3\u70b9\u7684\u6df1\u5ea6\u5747\u76f8\u540c\uff0c\u4e14\u6240\u6709\u975e\u53f6\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u5747\u4e3a 2 \u7684\u4e8c\u53c9\u6811\u79f0\u4e3a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002\u5b8c\u5168\u4e8c\u53c9\u6811\uff08complete binary tree\uff09\uff1a\u53ea\u6709\u6700\u4e0b\u9762\u4e24\u5c42\u7ed3\u70b9\u7684\u5ea6\u6570\u53ef\u4ee5\u5c0f\u4e8e 2\uff0c\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u7ed3\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u8fde\u7eed\u4f4d\u7f6e\u4e0a\u3002</li> <li>\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u7d22\u5f15\u4e3a0\u7684\u4f4d\u7f6e\u7a7a\u4e0d\u7a7a\u51fa\u6765\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u8282\u70b9\u5bfb\u627e\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7d22\u5f15\u7684\u89c4\u5219\u5374\u7565\u6709\u4e0d\u540c\u3002</li> <li> <p>Left-Child Right-Sibling\u53c8\u88ab\u79f0\u4e3aKnuth transform\uff0c\u5219\u6709\uff1a</p> </li> <li> <p>A pre-order traversal of the original tree is identical to the pre-order traversal of the Knuth transform</p> </li> <li> <p>A post-order traversal of the original tree is identical to the in-order traversal of the Knuth transform</p> </li> </ul> <p></p> <ul> <li>\u5982\u679c\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u662f\u9012\u51cf\u5e8f\u5217\uff0c\u90a3\u4e48\u8fd9\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u5c31\u662fmin-heap\uff1b\u4f46\u662f\u53cd\u4e4b\u4e0d\u7136\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u662fmin-heap\uff0c\u5b83\u7684\u540e\u5e8f\u904d\u5386\u4e0d\u4e00\u5b9a\u662f\u9012\u51cf\u5e8f\u5217\u3002</li> <li>If the pre-order traversal of a tree is an ascending sequence, then the tree is a heap</li> <li>\u4e8c\u53c9\u6811\u4e2d\u5982\u679c\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684descendants\uff08\u5305\u62ec\u81ea\u5df1\uff09\u7684\u6570\u91cf\u90fd\u662f\u5947\u6570\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u6ee1\u8282\u70b9\u8981\u4e48\u53f6\u5b50\u7ed3\u70b9</li> <li>\u4ee5\u4e0b\u4e3a\u4e8c\u53c9\u5806\u7684\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a</li> </ul> <p></p> <ul> <li>:warning:\u9700\u638c\u63e1\u7684\u6280\u80fd\uff1aFloyd\u521b\u5efa\u4e8c\u53c9\u5806\uff1b\u4e8c\u53c9\u5806\u7684push pop.</li> <li>:warning:\u5806\u6392\u5e8f\u7684\u6700\u597d\u60c5\u51b5\u548c\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(\\Theta(logn)\\)\uff0c\u800c\u4e14\u5806\u6392\u5e8f\u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\u7b97\u6cd5</li> <li>\u970d\u592b\u66fc\u7f16\u7801\u51fa\u6765\u7684code set\u53ef\u4ee5\u505a\u5230\u6240\u6709\u7684character\u7684code length\u90fd\u4e00\u6837\uff1bFor the same character set, if their frequencies differ, then the Huffman coding trees generated by them may be the same. For example, two characters of frequency 10 and 20, and two characters of frequency 100 and 200, will have the same Huffman Coding Trees</li> <li>\u5f80AVL\u6811\u4e2d\u63d2\u5165\u5143\u7d20\u9020\u6210\u7684\u4e0d\u5e73\u8861\uff0c\u6700\u591a\u4e00\u6b21correction\u5c31\u80fdwork\uff1b\u4f46\u662f\u5bf9\u4e8e\u5220\u9664\u6765\u8bf4\uff0c\u5c31\u53ef\u80fd\u4e0d\u6b62\u4e00\u6b65correction\u4e86\u3002\u800c\u5220\u9664\u548c\u67e5\u627e\u4e8c\u53c9\u6811\u7684\u5220\u9664\u89c4\u5219\u4e00\u6837\uff0c\u9700\u8981\u627e\u5230\u540e\u7ee7\u5143\u7d20\u3002</li> <li>:warning:\u63d2\u5165\u53ef\u80fd\u53ea\u9700\u8981\u4e00\u6b21\uff08\u800c\u4e14\u81f3\u591a\u4e00\u6b21\uff09correction\u5c31\u80fd\u518d\u6b21\u7ef4\u6301\u5e73\u8861\uff0c\u800c\u6bcf\u6b21\u5e73\u8861\u53ea\u9700\u8981O(1)\u7684\u65f6\u95f4\u3002\u4f46\u662f\u5220\u9664\u53ef\u80fd\u9700\u8981O(h)\u6b21correction\uff0c\u6bcf\u6b21\u90fd\u662fO(1)\u65f6\u95f4\uff0c\u800ch\u5c31\u662f\u9ad8\u5ea6\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5220\u9664\u6765\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(ln(n))\\)\u3002</li> <li>\u50a8\u5b58AVL\u6811\u7684\u989d\u5916\u5185\u5b58\u590d\u6742\u5ea6\uff1a\\(O(n^{1.44})\\)</li> <li>\u67e5\u627e\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u662f\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u90fd\u6bd4\u5b83\u5927\uff1b\u800c\u4e0d\u662f\u5de6\u5b69\u5b50\u8282\u70b9\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b69\u5b50\u8282\u70b9\u6bd4\u5b83\u5927</li> <li>:warning:\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u5c31\u662fsorted array!\u4e14\u6362\u800c\u8a00\u4e4b\u4e5f\u662f\u6210\u7acb\u7684\uff1a \u5982\u679c\u4e00\u9897\u4e8c\u53c9\u6811\u6ee1\u8db3\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u8fd9\u68f5\u6811\u5c31\u662f\u67e5\u627e\u4e8c\u53c9\u6811\uff01</li> <li>\u67e5\u627e\u4e8c\u53c9\u6811\u51e0\u4e4e\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\\(O(h)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u6211\u4eec\u80fd\u505a\u5f97\u6700\u597d\u7684\u5c31\u662f\u8ba9\u8fd9\u68f5\u6811\u7684\u5b8c\u7f8e\u7684\uff0c\\(O(ln(n))\\)</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E6%9C%9F%E4%B8%AD%E5%9B%9E%E9%A1%BE.html#_4","title":"\u641c\u7d22\u548c\u6392\u5e8f","text":"<ul> <li>\u63d2\u5165\u6392\u5e8f\u5728\u6570\u7ec4\u5341\u5206\u63a5\u8fd1\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\u8868\u73b0\u975e\u5e38\u7684\u597d\uff1b\u63d2\u5165\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff1bMemory requirements\u662f\\(\\Theta(1)\\)</li> </ul> <ul> <li>\u5192\u6ce1\u6392\u5e8f\u5728\u5b9e\u8df5\u4e2d\u603b\u662f\u8868\u73b0\u4e0d\u5982\u63d2\u5165\u6392\u5e8f\u597d\uff1b\u5192\u6ce1\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff1bMemory requirements\u662f\\(\\Theta(1)\\)</li> </ul> <ul> <li>\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff1b\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n)\\)</li> </ul> <ul> <li>\u5feb\u901f\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\uff1b\u867d\u7136\u8bf4\u5feb\u6392\u5b9e\u73b0\u4e86\u5c31\u5730\u64cd\u4f5c\uff0c\u4f46\u662f\u8fed\u4ee3\u5176\u5b9e\u662f\u9700\u8981\u5360\u7528\u6808\u7a7a\u95f4\u7684\uff1athe average-case depth of recursion is \\(\\Theta(ln(n))\\)\uff0cand the worst-case depth of the recursion is \\(\\Theta(n)\\)\uff1b\u5feb\u6392\u6700\u597d\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\\(\\Theta(nlnn)\\)</li> </ul> <ul> <li>\u5806\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\uff1b\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\Theta(1)\\)\u56e0\u4e3a\u662f\u5c31\u5730\u64cd\u4f5c\uff1b\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u5e73\u5747\u3001\u6700\u597d\u3001\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(\\Theta(nlnn)\\)</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html","title":"\u7b97\u6cd5 Algorithm","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#_1","title":"\u6700\u5c0f\u751f\u6210\u6811","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#spanning-trees","title":"Spanning trees","text":"<p>\u4ec0\u4e48\u662fspanning trees\u6700\u5c0f\u751f\u6210\u6811\uff1f \u9996\u5148\uff0c\u751f\u6210\u6811\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>Given a connected graph with n vertices, a spanning tree is defined as a subgraph that is a tree and includes all the n vertices</p> <p>\u751f\u6210\u6811\u6709n-1\u4e2a\u8fb9\uff0c\u5e76\u4e14\u4e00\u4e2a\u56fe\u7684\u751f\u6210\u6811\u5e76\u4e0d\u662f\u552f\u4e00\u7684</p> <p>\u7531\u4e0a\u8ff0\u5b9a\u4e49\u53ef\u77e5\uff1a\u751f\u6210\u6811\u662f\u539f\u6765\u56fe\u4e2d\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u6240\u6709\u7684\u9876\u70b9\uff0c\u800c\u4e14\u8fb9\u7684\u6570\u91cf\u6b63\u597d\u662f\u9876\u70b9\u6570\u91cf-1 \u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u751f\u6210\u6811\u7684\u4f8b\u5b50\uff1a\u539f\u6765\u7684\u56fe\u4e2d\u5171\u670916\u4e2a\u9876\u70b9\uff0c\u7136\u540e\u7ea2\u7ebf\u8fde\u63a5\u6210\u7684\u751f\u6210\u6811\u91cc\u9762\u670915\u4e2a\u9876\u70b9\uff1a</p> <p></p> <p>\u4e0b\u56fe\u53c8\u5c55\u793a\u4e86\uff1a\u4e00\u4e2a\u56fe\u7684\u751f\u6210\u6811\u5e76\u4e0d\u552f\u4e00\uff01\u53ef\u80fd\u6709\u591a\u79cd\u751f\u6210\u6811\uff0c\u90fd\u6ee1\u8db3\u5b9a\u4e49\u7684\u8981\u6c42\uff1b\u540c\u65f6\u4e5f\u5c55\u793a\u4e86\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5b50\u56fe\u7684\u79f0\u547c\u53ef\u4ee5\u662f\u201c\u6811\u201d\uff1a</p> <p></p> <p>\u540c\u65f6\uff0c\u751f\u6210\u6811\u7684\u5b9a\u4e49\u652f\u6301\u6743\u91cd\u7684\u6982\u5ff5\uff08weight\uff09\uff1a\u4e00\u4e2a\u751f\u6210\u6811\u7684\u6743\u91cd\u662f\u6240\u6709\u751f\u6210\u6811\u4e0a\u7684\u53d8\u6210\u7684\u6743\u91cd\u603b\u548c\u3002\u56e0\u6b64\u5f15\u5165\u4e86\u6743\u91cd\u7684\u6982\u5ff5\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u751f\u6210\u6811\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\uff0c\u4f46\u662f\u5176\u4e2d\u6700\u7279\u6b8a\u7684\u4fbf\u662f\u6743\u91cd\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f15\u7533\u51fa\u4e86\u6700\u5c0f\u751f\u6210\u6811\u7684\u6982\u5ff5\uff1a\u62e5\u6709\u7740\u6700\u5c0f\u6743\u91cd\u7684\u751f\u6210\u6811\u3002</p> <p>\u53e6\u5916\uff0c\u751f\u6210\u6811\u7684\u6982\u5ff5\u5b58\u5728\u4e8e\u8fde\u901a\u56fe\u4e2d\uff0c\u90a3\u4e48\u5982\u679c\u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u800c\u662f\u4e00\u4e2a\u4e2a\u8fde\u901a\u5206\u91cf\u7ec4\u6210\u7684\u5462\uff1f\u53ef\u60f3\u800c\u77e5\uff0c\u6bcf\u4e00\u4e2a\u5355\u72ec\u7684\u8fde\u901a\u5206\u91cf\u90fd\u80fd\u751f\u6210\u81ea\u5df1\u7684\u751f\u6210\u6811\uff0c\u90a3\u4e48\u4e00\u4e2a\u4e2a\u751f\u6210\u6811\u5728\u4e00\u8d77\u5c31\u662fspanning forest:</p> <p>Suppose that a graph is composed of N connected vertex-induced sub-graphs. In this case, we may define a spanning forest as a collection of N spanning trees, one for each connected vertex-induced sub-graph.</p> <p>A minimum spanning forest is therefore a collection of N minimum spanning trees, one for each connected vertex-induced sub-graph</p> <p>\u90a3\u4e48\u5728unweighted graph\u4e2d\u4e5f\u6709\u6700\u5c0f\u751f\u6210\u6811\u7684\u6982\u5ff5\uff0c\u53ea\u4e0d\u8fc7\u662f\u5728\u65e0\u6743\u91cd\u7684\u56fe\u4e2d\uff0c\u6211\u4eec\u8ba4\u4e3a\u6bcf\u4e00\u6761\u8fb9\u957f\u7684\u6743\u91cd\u90fd\u662f1,\u3002\u90a3\u4e48\u5728unweighted graph\u91cc\u9762\uff0c\u56e0\u6b64\u53ef\u60f3\u800c\u77e5\uff1a\u6240\u6709\u7684\u751f\u6210\u6811\u5176\u5b9e\u90fd\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u800c\u6700\u5c0f\u751f\u6210\u6811\u4eec\u7684\u6743\u91cd\u90fd\u662f\\(|V|-1\\)\u3002</p> <p>\\(Theorem:\\) \u5728weighted graph\u4e2d\uff0c\u5982\u679c\u6bcf\u4e00\u6761\u8fb9\u957f\u7684\u6743\u91cd\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8fd9\u80fd\u591f\u4fdd\u8bc1\u8fd9\u4e2aweighted connected\u56fe\u4e00\u5b9a\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002</p> <p>\u90a3\u4e48\u63a5\u4e0b\u6765\u5c06\u4ecb\u7ecd\u4e24\u79cd\u5bfb\u627e\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u3002\u5728\u4e0d\u7279\u522b\u8bf4\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u6709\u6743\u8fde\u901a\u56fe\u7684\u6bcf\u4e00\u6761\u8fb9\u957f\u6743\u91cd\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4ece\u800c\u786e\u4fdd\u6700\u7ec8\u53ea\u6709\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#prims-algorithm","title":"Prim's Algorithm","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#strategy","title":"Strategy","text":"<p>\u601d\u60f3\uff1a\u5047\u5982\u8bf4\u6211\u4eec\u5bf9\u4e8e\u8fd9\u4e2a\u56fe\u7684\u4e00\u90e8\u5206\u9876\u70b9k&lt;n\uff0c\u5df2\u7ecf\u77e5\u9053\u4e86\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8ba9\u8fd9\u4e2ak\u4e2a\u9876\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fdb\u884c\u6269\u5f20\u5462\uff1f\u6211\u4eec\u7684\u7b56\u7565\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53ef\u80fd\u5f97\u9876\u70b9\\(V_{k+1}\\)\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u8fd9\u4e2a\u9876\u70b9\u5230k\u4e2a\u70b9\u7684\u6240\u6709\u53ef\u80fd\u5b58\u5728\u7684\u8fb9\u957f\u7684\u6743\u91cd\uff0c\u7136\u540e\u627e\u5230\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u5728\u8fd9\u4e9b\u5bf9\u4e00\u4e2a\u53ef\u80fd\u65b0\u9876\u70b9\u7684\u6700\u5c0f\u6743\u91cd\u8fb9\u4e2d\u518d\u627e\u5230\u62e5\u6709\u6700\u5c0f\u6743\u91cd\u503c\u7684\u9876\u70b9\uff0c\u7136\u540e\u8fdb\u884c\u8fde\u63a5\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u6d41\u7a0b\u4e5f\u53ef\u4ee5\u6362\u4e2a\u65b9\u5f0f\uff1a\u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u7684\u6240\u6709\u7684\u9876\u70b9\uff0c\u5217\u51fa\u6240\u6709\u7684\u548c\u975e\u6700\u5c0f\u751f\u6210\u6811\u9876\u70b9\u8fde\u63a5\u7684\u8fb9\u7684\u6743\u91cd\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u503c\uff0c\u5e76\u4e14\u8fde\u63a5\u8fd9\u4e24\u4e2a\u9876\u70b9\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u62e5\u6709\u4e86\u8fd9k+1\u4e2a\u9876\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\u8fd9\u4e2a\u6269\u5f20\u601d\u8def\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u5c5e\u4e8e\u53eb\u505acut property\uff0c\u6765\u8bf4\u660e\u8fd9\u79cd\u6269\u5f20\u7b56\u7565\u7684\u5408\u7406\u6027\uff1a</p> <p></p> <p>\u76f4\u89c9\u4e0a\u6765\u8bf4\uff0c\u5982\u679c\u8fd9\u79cd\u6027\u8d28\u662f\u9519\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u9876\u70b9\u53ea\u80fd\u901a\u8fc7\u5176\u4ed6\u7684\u65b9\u5f0f\u548c\u8fd9k\u4e2a\u9876\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fdb\u884c\u8fde\u63a5\uff0c\u90a3\u4e48\u5bf9\u4e8e\u53e6\u5916\u4e00\u6761\u7ebf\u8def\u6765\u8bf4\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u53e6\u5916\u7684\u9876\u70b9\u548c\u8fd9\u4e2a\u6700\u5c0f\u7684\u751f\u6210\u6811\u8fdb\u884c\u8fde\u63a5\uff0c\u800c\u8fd9\u6761\u8fb9\u957f\u7684\u6743\u91cd\u5c31\u81f3\u5c11\u90a3\u4e2a\\(V_{k+1}\\)\u7684\u5bf9\u5e94\u7684\u8fb9\u957f\u7684\u6743\u91cd\u9ad8\uff0c\u8fd9\u5c31\u662f\u77db\u76fe\u70b9</p> <p>\u90a3\u4e48\u5728\u4e4b\u524d\u7684\u6d41\u7a0b\u4e2d\u90fd\u662f\u9ed8\u8ba4\u77e5\u9053\u4e86k\u4e2a\u9876\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u8fd9\u4e2ak\u4ece1\u904d\u5386\u5230n\u4e0d\u5c31\u627e\u5230\u4e86\u6700\u5c0f\u751f\u6210\u6811\u5417\uff1f\u5bf9\u4e8ek=1\u7684\u60c5\u51b5\uff0c\u8ba4\u4e3a\u4e00\u4e2a\u9876\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u4e00\u4e2a\u9876\u70b9\u672c\u8eab\u3002\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u4e86Prim's algorithm:</p> <p></p> <p>\u6709\u66f4\u591a\u7684\u7ec6\u8282\u503c\u5f97\u63a2\u8ba8\uff1a</p> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9876\u70b9\u6765\u8bf4\uff0c\u5728\u7ed3\u6784\u4f53\u91cc\u9762\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2aBoolean Flag\uff0c\u6765\u8bb0\u5f55\u8fd9\u4e2a\u8ba2\u5355\u662f\u5426\u5df2\u7ecf\u88ab\u8bbf\u95ee\uff0ci.e.\uff0c\u662f\u5426\u4ee5\u53ca\u5728k\u4e2a\u9876\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u4e86</li> <li>\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u9876\u70b9\u5230\u6700\u5c0f\u751f\u6210\u6811\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u7684distance</li> <li>\u540c\u65f6\u8981\u8bb0\u5f55\u7236\u8282\u70b9\u7684\u6307\u9488</li> </ul> <p>\u4e0b\u9762\u5c06\u901a\u8fc7\u4f8b\u5b50\u6765\u751f\u52a8\u5730\u6f14\u793aprim algorithm\u5e76\u4e14\u5c06\u5c55\u793a\u66f4\u591a\u7684\u5b9e\u73b0\u7ec6\u8282\uff1a</p> <p></p> <p>\u5173\u4e8e\u7a7a\u521d\u59cb\u5316\uff0c\u968f\u4fbf\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\uff0c\u7136\u540e\u6807\u8bb0\u8fd9\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb\u4e3a0\uff08\u5408\u7406\uff0c\u56e0\u4e3a\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u5f53\u7136\u662f0\uff09\uff0c\u540c\u65f6\u5176\u4ed6\u7684\u6240\u6709\u9876\u70b9\u5230\u8fd9\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb\u90fd\u662f\u65e0\u7a77\uff08\u5408\u7406\uff0c\u56e0\u4e3a\u5176\u4ed6\u7684\u9876\u70b9\u90fd\u8fd8\u6ca1\u6709\u7f16\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\uff09\uff0c\u8bbe\u7f6e\u6240\u6709\u7684\u9876\u70b9\u90fd\u662funvisted\u72b6\u60011\uff0c\u7136\u540e\u6240\u6709\u7684\u9876\u70b9\u7684\u7236\u8282\u70b9\u6307\u9488\u90fd\u7f6e\u4e3a\u7a7a\u6307\u9488\u3002\u5f53\u6240\u6709\u7684\u8ddd\u79bb\u5c0f\u4e8e\u6b63\u65e0\u7a77\u7684\u9876\u70b9\u90fd\u662fvisited\u7684\u65f6\u5019\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\u6240\u4ee5\uff0c\u7b2c\u4e00\u6b65\u521d\u59cb\u5316\u7684\u7ed3\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\u7b2c\u4e00\u6b65\uff0c\u904d\u5386\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u6240\u6709\u9876\u70b9\u5230\u975e\u6700\u5c0f\u751f\u6210\u6811\u9876\u70b9\u7684\u8ddd\u79bb\uff0c\u627e\u5230\u6700\u5c0f\u503c\u548c\u5176\u5bf9\u5e94\u7684\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\uff1a\u8fd9\u91cc\u662f4\uff0c\u6743\u91cd\u6700\u5c0f\u662f1\uff0c\u56e0\u6b641 4\u8fdb\u884c\u8fde\u63a5\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e2 5\u8fd9\u4e24\u4e2a\u9876\u70b9\u6765\u8bf4\uff0c\u6211\u4eec\u4f9d\u7136\u8bb0\u5f55\u8fd9\u4e24\u4e2a\u9876\u70b9\u52301\u7684\u8ddd\u79bb\uff0c\u5e76\u4e14\u5c06\u7236\u8282\u70b9\u8bbe\u7f6e\u4e3a1\u8282\u70b9\u7684\u6307\u9488\u3002\u8fd9\u662f\u7b97\u6cd5\u4e0a\u7684\u4e60\u60ef\u7f62\u4e86\uff0c\u4e0d\u59a8\u788d\u6211\u4eec\u6d41\u7a0b\u7684\u6838\u5fc3\uff1a\u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u7684\u9876\u70b9\u66f4\u65b0\uff1a1\u548c4. \u56e0\u6b64\u5728\u8fd9\u4e00\u6b65\u7ed3\u675f\u4e4b\u540e\uff0c\u6211\u4eec\u66f4\u65b0\u4e862 4 5\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u8fd8\u6ca1\u66f4\u65b0\u6700\u5c0f\u751f\u6210\u6811\uff0c\u53ea\u662f\u628a\u6839\u8282\u70b9\u7f6e\u5165\u2014\u20144\u7684\u7f6e\u5165\u5728\u4e0b\u4e00\u6b65\u4e2d\u8fdb\u884c\u3002</p> <p>\u6bcf\u4e00\u6b65\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5728\u4e0b\u4e00\u6b65\u8fd9\u4e2a\u8282\u70b9\u653e\u8fdb\u6700\u5c0f\u751f\u6210\u6811\uff0c\u540c\u65f6\u8bbf\u95ee\u4e00\u4e2a\u65b0\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u8282\u70b9\uff1b\u53ea\u6709\u653e\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0cBoolean Flag\u624d\u7f6e\u4e3aTrue</p> <p></p> <p>\u7b2c\u4e8c\u6b65\uff0c\u904d\u53861 4\u8282\u70b9\u548c\u5176\u4ed6\u975e\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u7684\u8282\u70b9\u7684\u8fb9\u957f\u7684\u6743\u91cd\uff0c\u7136\u540e\u66f4\u65b02 5 7 8\u56db\u4e2a\u8282\u70b9\u7684\u6570\u636e\u3002\u5f53\u7136\uff0c\u4ece\u6570\u636e\u4e0a\u6765\u770b\uff0c5\u8282\u70b9\u7684\u4fe1\u606f\u4e0d\u66f4\u65b0\u3002\u66f4\u65b0\u5b8c\u6210\u4e4b\u540e\uff0c\u628a4\u8fd9\u4e2a\u8282\u70b9\u653e\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u3002\u540c\u65f6\u6839\u636e\u5269\u4e0b\u76842 5 7 8\u56db\u4e2a\u8282\u70b9\u7684distance\uff0c\u6211\u4eec\u77e5\u9053\u4e0b\u4e00\u6b65\u5c06\u8bbf\u95ee2\u53f7\u8282\u70b9\u3002</p> <p></p> <p>\u7b2c\u4e09\u6b65\uff0c\u8bbf\u95ee2\u53f7\u8282\u70b9\uff0c\u7136\u540e\u66f4\u65b03 5 6 7 8\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u5f53\u7136\u4ece\u6570\u636e\u7684\u89d2\u5ea6\u4e0a\u6765\u770b\uff0c3 5 6\u8282\u70b9\u7684\u6570\u636e\u8fdb\u884c\u4e86\u66f4\u65b0\u3002\u66f4\u65b0\u4e4b\u540e\uff0c\u628a2\u53f7\u8282\u70b9\u653e\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u3002\u5e76\u4e14\u6211\u4eec\u77e5\u9053\u5373\u5c06\u8bbf\u95ee6\u53f7\u8282\u70b9\u3002</p> <p></p> <p>\u4e0d\u65ad\u91cd\u590d\u64cd\u4f5c\uff0c\u6700\u540e\u6211\u4eec\u5c06\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff1a</p> <p></p> <p>\u603b\u800c\u8a00\u4e4b\uff1a</p> <ul> <li>we begin with a vertex which represents the root</li> <li>starting with this trivial tree and iteration, we find the shortest edge which we can add to this already existing tree to expand it</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#implementation-and-analysis","title":"Implementation and Analysis","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#kruskals-algorithm","title":"Kruskal's Algorithm","text":"<p>\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5c06\u6240\u6709\u7684\u8fb9\u957f\u6309\u7167\u6743\u91cd\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u6743\u91cd\u6700\u5c0f\u5230\u6700\u5927\u7684\u987a\u5e8f\u904d\u5386\u6240\u6709\u7684\u8fb9\u3002\u5bf9\u4e8e\u904d\u5386\u7684\u8fb9\u6765\u8bf4\uff0c\u5982\u679c\u6dfb\u52a0\u4e4b\u540e\u5b50\u56fe\u6ca1\u6709\u6210\u73af\uff0c\u90a3\u4e48\u5c31\u628a\u8fd9\u6761\u8fb9\u52a0\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u3002\u4e0d\u65ad\u8fd9\u6837\u52a0\u8fb9\uff0c\u76f4\u5230\u6709\\(|V|-1\\)\u6761\u8fb9\u88ab\u52a0\u5165\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\u4f8b\u5b50\u5982\u4e0b\uff1a</p> <p></p> <p>\u5728\u5177\u4f53\u7684\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u7528\u6570\u7ec4\u50a8\u5b58\u8fb9\u957f\u548c\u5b83\u4eec\u5bf9\u5e94\u7684\u6743\u91cd\uff0c\u7136\u540e\u901a\u8fc7\u4efb\u4e00\u6392\u5e8f\u7b97\u6cd5\u8fdb\u884csorting\u3002\u4f46\u662f\u6700\u6700\u5173\u952e\u7684\u5728\u4e8e\uff1a\u5982\u4f55\u5224\u65ad\u4e00\u6761\u8fb9\u7684\u52a0\u5165\u4f1a\u5bfc\u81f4\u73af\u7684\u51fa\u73b0\uff1f\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5728\u5148\u524d\u7684\u751f\u6210\u6811\u4e2d\u662f\u5426\u5df2\u7ecf\u662f\u8fde\u901a\u7684\u3002\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\uff0c\u5206\u6790\u5982\u4e0b\uff1a</p> <p></p> <p>\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\u6765\u5e2e\u52a9\u5feb\u901f\u5224\u65ad\u662f\u5426\u6210\u73af\u5462\uff1f\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5e76\u67e5\u96c6\u3002\u5982\u679c\u4e24\u4e2a\u70b9\u7684\u4ee3\u8868\u5143\u7d20\u90fd\u662f\u4e00\u6837\u7684\u8bdd\uff0c\u8bf4\u660e\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7ec4\u6210\u7684\u6811\u4e2d\uff0c\u4e24\u4e2a\u70b9\u662f\u8fde\u901a\u7684\uff0c\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u52a0\u8fb9\u5c31\u4f1a\u5f62\u6210\u73af\u3002</p> <p></p> <p></p> <p></p> <p>\u5728\u4e0a\u9762\u7684\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5728GH\u8fb9\u7684\u5224\u65ad\u4e2d\uff0c\u7531\u4e8eG H\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\uff0c\u6211\u4eec\u5c31\u4f1a\u77e5\u9053GH\u8fd9\u6761\u8fb9\u5982\u679c\u52a0\u4e0a\u5c06\u4f1a\u6210\u73af\u3002\u800c\u4e8b\u5b9e\u4e5f\u5982\u56fe\u6240\u793a\u3002</p> <p>\u8fd9\u6837\u4e00\u6765\uff0c\u7531\u4e8e\u5e76\u67e5\u96c6\u7684\u64cd\u4f5c\u5728\u4f7f\u7528\u4e86\u8def\u5f84\u538b\u7f29\u548c\u4f18\u5148\u7ea7\u7b56\u7565\u540e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fd1\u4f3c\u5e38\u6570\uff0c\u56e0\u6b64\u68c0\u67e5\u548c\u6784\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(O(|E|)\\)\uff1b\u800cdominant time\u5c31\u662fsort\u8fd9\u4e9b\u8fb9\u957f\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(|E|ln|E|) = O(|E|ln|V|)\\).</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#uniqueness-of-mst","title":"Uniqueness of MST","text":"<p>Lemma: If all edge weights in a connected graph G are distinct, then G has a unique minimum spanning tree. \u8fd9\u6761\u5b9a\u7406\u7684\u8bc1\u660e\u5982\u4e0b\uff1a</p> <p></p> <p>\u4e0a\u9762\u662f\u7ecf\u5178\u7684\u8d2a\u5fc3\u4ea4\u6362\u8bba\u8bc1\u3002\u5047\u8bbe\u6709\u4e24\u4e2a\u6700\u5c0f\u7684\u751f\u6210\u6811\uff0c\u90a3\u4e48\u5c06\u81f3\u5c11\u4f1a\u6709\u4e24\u6761\u8fb9\uff0c\u5b83\u4ec5\u5b58\u5728\u4e8e\u5176\u4e2d\u7684\u4e00\u68f5\u6811\u800c\u4e0d\u4f1a\u5b58\u5728\u4e8e\u53e6\u5916\u4e00\u9897\u6811\u4e2d\u3002\u90a3\u4e48\u5047\u8bbe\u5bf9\u4e8e\u4e24\u68f5\u6811\u6765\u8bf4\uff0c\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u8fb9\u4e2d\uff0c\u6743\u91cd\u6700\u5c0f\u7684\u5206\u522b\u662fe e'\u8fb9\u3002\u6b64\u65f6\u5c06e\u5e76\u5230T'\u6811\u4e2d\u6ce8\u610f\u5230\u7531\u4e8e\u8fd9\u91cc\u662f\u6811\u7ed3\u6784\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u52a0\u8fb9\u90fd\u4f1a\u5f62\u6210\u4e00\u6761\u73af\uff0c\u56e0\u6b64\u5728\u52a0\u4e0a\u4e86e\u8fd9\u6761\u8fb9\u4e4b\u540e\uff0c\u4f1a\u5305\u542b\u4e00\u4e2a\u73af\u3002\u8fd9\u4e2a\u73af\u9664\u4e86e'\u8fd8\u6709\u81f3\u5c11\u53e6\u5916\u4e00\u6761\u8fb9e''\uff0c\u800c\u8fd9\u6761\u8fb9\u5927\u4e8e\u7b49\u4e8ee'\u3002\u90a3\u4e48\u6784\u5efaT'+e-e''\u7684\u6811\uff0c\u90a3\u4e48\u6743\u91cd\u4e0d\u5927\u4e8eT'\uff0c\u8868\u660eT'\u4e0d\u4f1a\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f62\u6210\u4e86\u77db\u76fe\u3002</p> <p>\u8fd9\u79cd\u8d2a\u5fc3\u601d\u60f3\u548c\u8d2a\u5fc3\u8bba\u8bc1\u65b9\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a\u975e\u5e38\u7684\u91cd\u8981\uff01</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#painpoint","title":"Painpoint","text":"<ol> <li> <p>Using Cayley's formula, the number of spanning trees for a complete graph \\(K_n\\) is \\(n^{n-2}\\)</p> </li> <li> <p>Kruskal and Prim\u90fd\u80fd\u591f\u5904\u7406multi-edge\u7684\u60c5\u51b5</p> </li> <li> <p>After Kruskal's algorithm, we choose \\(m\\) edges, then the number of connected components of \\(G\\) is \\(|V|-m\\).</p> </li> <li> <p>Kirchhoff's Matrix-Tree Theorem: Algorithm Workflow</p> </li> </ol> <p>Input:A graph \\( G = (V, E) \\) with \\( |V| = n \\) vertices and \\( |E| \\) edges.</p> <p>Steps:</p> <p>a.Construct Matrices:</p> <ul> <li>Degree Matrix (\\( D \\)):   A diagonal matrix where \\( $D[i][i]$\\) is the degree of vertex \\( i \\).</li> <li>Adjacency Matrix (\\( A \\)):   A matrix where \\( $A[i][j] = 1$\\) if there is an edge between \\( i \\) and \\( j \\), and \\( 0 \\) otherwise.</li> </ul> <p>b.Compute the Laplacian Matrix (\\( L \\)):  c.Select a Cofactor (\\(( L^* )\\)):</p> <ul> <li>Remove any one row and the corresponding column from \\( L \\).</li> </ul> <p>d.Compute the Determinant:</p> <ul> <li>Calculate the determinant of \\( $L^*$ \\), which gives the number of spanning trees \\( $\\tau(G)$ \\).</li> </ul> <p>Output:The number of spanning trees \\( $\\tau(G) $\\).</p> <ol> <li>\u4f7f\u7528\u4e8c\u53c9\u5806\u4f18\u5316Prim\u7b97\u6cd5\u5e76\u4e0d\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u66f4\u597d\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5982\u679c\\(|E| = \\Theta(v^2)\\)\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u53cd\u800c\u66f4\u9ad8\u4e86\u3002</li> <li>Kruskal\u4f7f\u7528\u5e76\u67e5\u96c6\u4f18\u5316\u7684\u5177\u4f53\u7ec6\u8282\uff1a</li> </ol> <pre><code>\u9996\u5148\u5bf9\u6240\u6709\u7684\u70b9\u8fdb\u884c\u5efa\u5806\u3002\u7136\u540e\u5bf9\u6240\u6709\u7684\u8fb9\u7684\u6743\u91cd\u8fdb\u884csort\u3002\n\u7136\u540e\u6bcf\u6761\u51fa\u6765\u4e00\u4e2a\u8fb9\uff0c\u6709u v\u4e24\u4e2a\u9876\u70b9\uff0c\u5982\u679c\uff1a\nFind-Set(u) != Find-Set(v):\n\u90a3\u4e48\u5c31\u628a\u8fd9\u6761\u8fb9\u52a0\u8fdbanswer\u91cc\u9762\uff0c\u5e76\u4e14Union(Find-Set(u), Find-Set(v)) \n// \u60e8\u75db\u7684\u6559\u8bad\u3002\u3002\u3002\n</code></pre> <ol> <li>\u5728undirected connected graph\u91cc\u9762\uff0c\u6700\u5c0f\u7684\u8fb9\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5728\u6240\u6709\u7684\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\uff0c\u56e0\u4e3a\u53ef\u80fd\u6743\u91cd\u4e0d\u662fdistinct\uff1b\u540c\u65f6\uff0cundirected connected graph\u4e2d\u6743\u91cd\u6700\u5927\u7684\u8fb9\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728MST\u91cc\u9762\uff0c\u56e0\u4e3a\u53ef\u80fd\u8fb9\u957f\u6570\u91cf\u6070\u597d\u5c31\u662f\u9876\u70b9\u6570\u91cf-1\uff08\u6811\uff09\u3002</li> <li>\u5982\u4f55\u6c42\u51fa\u4fee\u6539\u4e00\u4e2a\u8fb9\u957f\u7684\u5141\u8bb8\u8303\u56f4\uff0c\u4ece\u800c\u4e0d\u6539\u53d8MST\u5462\uff1f\u5bf9\u4e8eMST\u91cc\u9762\u7684\u8fb9\u957f\u6765\u8bf4\uff0c\u5982\u679c\u5220\u6389\uff0c\u90a3\u4e48MST\u5c31\u4f1a\u8fb9\u957f\u4e24\u4e2a\u8054\u901a\u5206\u91cf\uff0c\u4e24\u4e2a\u8054\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u8fb9\u957f\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u662f\u8fd9\u4e2a\u8fb9\u957f\u7684\u6700\u5927\u503c\uff1b\u5bf9\u4e8e\u4e0d\u5728MST\u91cc\u9762\u7684\u8fb9\u957f\u6765\u8bf4\uff0c\u5982\u679c\u52a0\u4e0a\uff0c\u90a3\u4e48MST\u4e2d\u5c31\u4f1a\u6709\u4e00\u4e2a\u73af\uff0c\u8fd9\u4e2a\u73af\u9664\u5f00\u8fd9\u6761\u8fb9\u7684\u6240\u6709\u7684\u8fb9\u957f\u7684\u6700\u5927\u503c\uff0c\u5c31\u662f\u8fd9\u4e2a\u8fb9\u957f\u7684\u6700\u5c0f\u503c\u3002</li> </ol>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#_2","title":"\u8d2a\u5fc3\u7b97\u6cd5","text":"<p>Greedy algorithms select the locally optimal choice at each step, hoping that these local choices will lead to a global optimum.</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#coin-changing","title":"\u5f15\u5b50\u2014\u2014Coin changing","text":"<p>\u5047\u8bbe\u6211\u4eec\u8981\u627e\u96f6\u94b1\uff0c\u90a3\u4e48\u5982\u4f55\u7528\u6700\u5c11\u7684\u786c\u5e01\u6765\u652f\u4ed8\u96f6\u94b1\u5462\uff1f\u5df2\u77e5\u786c\u5e01\u7684\u9762\u503c\u67091 2 5 10 20 50\uff08\u8fd9\u91cc\u4e3e\u7684\u4f8b\u5b50\u662f\u6b27\u5143\uff09\u3002\u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u6bcf\u4e00\u79cd\u786c\u5e01\u90fd\u6709\u5f88\u591a\u5f88\u591a\uff0c\u90a3\u4e48\u76f4\u63a5\u603b\u662f\u52a0\u5c3d\u53ef\u80fd\u5927\u7684\u9762\u503c\u7684\u786c\u5e01\uff0c\u53ea\u8981\u6700\u540e\u94b1\u7684\u91d1\u989d\u6ca1\u6709\u8d85\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u79cd\u7b56\u7565\u8c8c\u4f3c\u662f\u6709\u7528\u7684\u3002</p> <p>\u4f46\u662f\u8fd9\u79cd\u7b56\u7565\u5e76\u4e0d\u662f\u4efb\u4f55\u60c5\u51b5\u90fd\u594f\u6548\uff1a\u5047\u5982\u8bf4\u786c\u5e01\u7684\u9762\u503c\u4e3a1 4 9 16 25 36 49\u5462\uff08\u5e73\u65b9\u5173\u7cfb\uff09\u3002\u5047\u5982\u8bf4\u8981\u627e72\u5757\u94b1\uff0c\u90a3\u4e48\u76f4\u63a5\u4e24\u4e2a36\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u4f46\u662f\u6309\u7167\u4e4b\u524d\u7684\u7b56\u7565\uff0c\\(72=49+16+4+1+1+1\\)\uff0c\u800c\u8fd9\u663e\u7136\u4e0d\u662f\u6700\u4f18\u89e3\u3002\u5f88\u660e\u663e\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u5e76\u6ca1\u6709\u90a3\u4e48\u7684\u7b80\u5355\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5230\u8d2a\u5fc3\u7b97\u6cd5\uff1a</p> <p></p> <p>\u4f8b\u5982Prim\u7b97\u6cd5\u5c31\u662f\u4e00\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u5728\u7b56\u7565\u4e2d\u8003\u8651\u7684\u662f\u5df2\u7ecf\u77e5\u9053k\u4e2a\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5c1d\u8bd5\u4e0d\u65adexpand\u8fd9\u68f5\u6811\u3002\u540c\u6837\u5728\u627e\u96f6\u94b1\u7684\u4f8b\u5b50\u4e2d\u4e5f\u662f\u7528\u4e86\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u5728\u6b27\u5143\u7684\u4f8b\u5b50\u4e2d\uff0c\u4efb\u4f55\u4e00\u4e2ak\u4e2a\u786c\u5e01\u7684\u5b50\u96c6\u90fd\u662f\u4e00\u79cdpartial solution\uff0c\u5728\u6211\u4eec\u62e5\u6709\u4e00\u4e2apartial solutionzhihou1\uff0c\u6211\u4eec\u5c1d\u8bd5\u5c06\u4e00\u4e2a\u6700\u5927\u5316\u96f6\u94b1\u9762\u989d\u589e\u957f\u4e14\u4e0d\u8d85\u8fc7\u603b\u91d1\u989d\u7684\u786c\u5e01\u52a0\u5165\u5230\u5b50\u96c6\u4e2d\u3002\u8fd9\u79cd\u7b97\u6cd5\u5728\u6b27\u5143\u7684\u60c5\u51b5\u80fd\u591f\u594f\u6548\uff0c\u4f46\u662f\u5728quadratic\u9762\u989d\u7684\u786c\u5e01\u4e2d\u5374\u4e0d\u594f\u6548\u3002</p> <p>\u4e0b\u9762\u5c06\u4e3e\u4e00\u4e9b\u8d2a\u5fc3\u7b97\u6cd5\u6700\u4f18\u7684\u4f8b\u5b50\uff1a</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#interval-scheduling","title":"Interval scheduling","text":"<p>\u8003\u8651\u5982\u4e0b\u56fe\u6240\u793a\u7684\u4efb\u52a1\uff1a</p> <p></p> <p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0c\u6211\u4eec\u8bbe\u8ba1\uff1aEARLIEST-FINISH-TIME-FIRST\u7b97\u6cd5\uff1a\u5c06\u6240\u6709\u7684\u5de5\u4f5c\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u65e9\u665a\u6765\u8fdb\u884c\u6392\u5e8f\u3002\u7136\u540e\u5bf9\u4e8e\u8fd9\u6837\u7684\u4e00\u4e2asorted order\uff0c\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5254\u9664\u6389\u8fd9\u4e2aorder\u4e0b\u4e4b\u540e\u6240\u6709\u7684\u548c\u8fd9\u4e2a\u5143\u7d20\u7684\u65f6\u95f4\u6bb5\u6709\u91cd\u5408\u7684\u5143\u7d20\uff1b\u91cd\u590d\u8fd9\u6837\u7684\u64cd\u4f5c\u4e00\u76f4\u5230\u6ca1\u6709\u5143\u7d20\u53ef\u4ee5\u64cd\u4f5c\u4f4d\u7f6e\uff0c\u7136\u540e\u6311\u51fa\u6765\u662f\u591a\u5c11\u4e2a\u90a3\u4e48\u5c31\u662f\u5de5\u4f5c\u5b50\u96c6\u7684\u6700\u5927\u6570\u91cf\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u8c8c\u4f3c\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u4f46\u662f\u975e\u5e38\u5947\u602a\u7684\u95ee\u9898\u5728\u4e8e\uff1a\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u7b97\u6cd5\u5c31\u662f\u6700\u4f18\u7684\uff1f</p> <p></p> <p></p> <p></p> <p>Reference: kimi.moonshot.cn</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#interval-partitioning","title":"Interval Partitioning","text":"<p>\u8003\u8651\u4e0b\u9762\u6240\u793a\u7684\u4efb\u52a1\uff1a</p> <p></p> <p></p> <p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0c\u6211\u4eec\u8bbe\u8ba1\uff1aEARLIEST-START-TIME-FIRST\u7b97\u6cd5\uff1a</p> <p></p> <p>\u5982\u4e0b\u9762\u662f\u6d41\u7a0b\u8fdb\u884c\u5230\u4e00\u534a\u7684\u5b9e\u4f8b\uff1a</p> <p></p> <p>\\(Proposition:\\)The earliest-start-time-first algorithm can be implemented in  O(n log n) time.</p> <p></p> <p>\u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49open interval\u7684\u6df1\u5ea6\uff0c\u800c\u4e14\u80fd\u89c2\u5bdf\u5230\uff1a\u9700\u8981\u7684\u6559\u5ba4\u6570\u91cf\u81f3\u5c11\u4e3a\u6df1\u5ea6\uff1a</p> <p></p> <p>\u56e0\u6b64\u6709\\(Theorem:\\) Earliest-start-time-first algorithm is optimal.</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#scheduling-to-minimize-lateness","title":"Scheduling to minimize lateness","text":"<p>\u8003\u8651\u4e0b\u56fe\u6240\u793a\u7684\u4efb\u52a1\uff1a</p> <p></p> <p>\u6211\u4eec\u5e0c\u671b\u5b89\u6392\u4efb\u52a1\uff0c\u4ece\u800c\u5bfc\u81f4\u8d85\u8fc7\u9884\u671fdue time\u7684\u65f6\u95f4\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1EARLIEST-DEADLINE-FIRST\u7b97\u6cd5\uff1a</p> <p></p> <p>\u5173\u4e8e\u8fd9\u4e2a\u6709\u4e24\u4e2a\u5173\u952e\u89c2\u5bdf\uff1a</p> <ul> <li>\u5b58\u5728\u4e00\u79cd\u6700\u597d\u7684\u5b89\u6392\uff0c\u4f7f\u5f97\u6574\u4e2a\u4efb\u52a1\u6d41\u7a0b\u4e0d\u5b58\u5728\u95f2\u7f6e\u65f6\u95f4</li> <li>EARLIEST-DEADLINE-FIRST\u7b97\u6cd5\u6ca1\u6709\u95f2\u7f6e\u65f6\u95f4</li> <li>The earliest-deadline-first schedule is the unique idle-free schedule with no inversions.</li> </ul> <p>Given a schedule S, an inversion is a pair of jobs i and j such that:\\(d_i \u2264 d_j\\)but j is scheduled before i.</p> <ul> <li>If an idle-free schedule has an inversion, then it has an adjacent inversion.</li> </ul> <p>adjacent inversion: two inverted jobs scheduled consecutively</p> <p>\\(Theorem:\\) The earliest-deadline-first schedule S is optimal.</p> <p></p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#optimal-caching","title":"Optimal Caching","text":"<p>Reference: kimi.moonshot.cn</p> <p></p> <p>\u76f4\u89c9\u4e0a\uff0c\u5982\u679c\u662f\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u53ea\u6709\u5728\u9700\u8981\u5c06\u65b0\u6570\u636e\u50a8\u5b58\u5230\u5185\u5b58\u4e2d\u7684\u65f6\u5019\uff0c\u624d\u9700\u8981\u8fdb\u884c\u65b0\u6570\u636e\u7684caching\uff0c\u800c\u8fd9\u6837\u7684\u5b89\u6392\u6211\u4eec\u5b9a\u4e49\u4e3areduced schedule\u3002</p> <p>\\(Theorem:\\) Given any unreduced schedule S, can transform it into a reduced schedule S\u2032 with no more evictions.</p> <p></p> <p>$Theorem: $ Farthest in Future algorithm is optimal eviction algorithm.</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#topological-sort","title":"Topological Sort","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#definition","title":"Definition","text":"<p>\u8003\u8651\u4e00\u79cd\u5b9e\u9645\u60c5\u51b5\u7684\u4efb\u52a1\u573a\u666f\uff1a\u4e0d\u540c\u7684task\u4e4b\u95f4\u5b58\u5728\u7684dependency relationship\uff0c\u5373\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u52a1\u6765\u8bf4\uff0c\u5fc5\u987b\u8981\u5148\u5b8c\u6210\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\uff0c\u624d\u80fd\u8fdb\u800c\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002\u8fd9\u79cd\u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u90e8\u5206\u7684\u6392\u5e8f\uff1aA partial ordering on a finite number of objects can be represented as a directed acyclic graph (DAG)</p> <p>\u540c\u65f6\uff0cdependency\u4e2d\u7684\u73af\u4e5f\u53ef\u80fd\u9020\u6210\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\u7684\u524d\u63d0\u4efb\u52a1\u5c31\u662f\u8fd9\u4e2a\u4efb\u52a1\u672c\u8eab\uff0c\u90a3\u4e48\u8fd9\u79cd\u5173\u7cfb\u5176\u5b9e\u5c31\u662f\u4e0d\u53ef\u53d6\u7684\u3002</p> <p>Topological sorting \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p></p> <p>\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u7684\u70b9\uff0c\u90a3\u4e48topological order\u4e2d\u7684\u76f8\u5173\u5b50\u5e8f\u5217\uff0c\u4f1a\u5448\u73b0\u548cpath\u4e2d\u4e00\u6837\u7684dependency\u5173\u7cfb\u987a\u5e8f\u3002\u7b80\u5316\u4e00\u4e0b\u5c31\u662f\uff1a\u5982\u679c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u662f\u8fde\u901a\u7684\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5728topological order\u4e2d\u8c01\u5728\u524d\uff0c\u8c01\u5c31\u662f\u88ab\u4f9d\u8d56\u7684\uff0c\u4e5f\u5c31\u662f\u4e0a\u56fe\u4e2d\u7684\u5b9a\u4e49\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <p></p> <p>\u91cd\u8981\uff01Topological sorting\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u552f\u4e00\u7684\uff01</p> <p>\\(Theorem:\\) A graph is a DAG if and only if it has a topological sorting</p> <p>\u8fd9\u4e00\u70b9\u76f4\u89c9\u4e0a\u5f88\u5bb9\u6613\u8ba4\u540c\uff0cgiven that\uff1a\u5982\u679c\u4e00\u4e2a\u6709\u5411\u56fe\u6709topo sorting\uff0c\u4f46\u662f\u91cc\u9762\u6709\u73af\uff0c\u90a3\u4e48\u5c06\u4f1a\u4ea7\u751f\u81ea\u5df1\u4f9d\u8d56\u4e8e\u81ea\u5df1\u7684\u95ee\u9898\uff0c\u800c\u8fd9\u79cd\u5173\u7cfb\u662f\u4e0d\u53ef\u53d6\u7684</p> <p>\u4f46\u662f\u5b9e\u9645\u7684\u8bc1\u660e\u6bd4\u8f83\u590d\u6742\uff1a</p> <p>lemma1: A DAG always has at least one vertex with in-degree zero (source)</p> <p>lemma2: Any sub-graph of a DAG is a DAG</p> <p>\u7136\u540e\u5229\u7528\u4e24\u4e2a\u5f15\u74061\uff0c\u6309\u7167if and only if\u7684\u8bc1\u660e\u903b\u8f91\u53bb\u8fdb\u884c\u8bc1\u660e</p> <p></p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#algorithm_1","title":"Algorithm","text":"<p>\u7b97\u6cd5\u7684idea\u975e\u5e38\u7684\u7b80\u5355\uff1a\u627e\u5230\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u4e2ain-degree\u4e3a0\u7684\u8282\u70b9\uff08source\uff09\uff0c\u7136\u540e\u653e\u5165topological sorting\u91cc\u9762\uff0c\u7136\u540e\u5220\u9664\u6389\u8fd9\u4e2a\u70b9\u548c\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u5173\u7684\u6240\u6709\u7684\u8fb9\u3002\u8fd9\u4e2a\u6b65\u9aa4\u91cd\u590d\\(|V|\\)\u6b21\u3002</p> <p>\u4ece\u4e0a\u9762\u7684\u7b97\u6cd5\u5c31\u80fd\u770b\u51fa\u6765\uff1atopo sorting\u7684\u987a\u5e8f\u5f53\u7136\u4e0d\u662f\u552f\u4e00\u7684\uff0c\u56e0\u4e3asource\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a</p> <p>idea is cheap\uff0c\u90a3\u4e48implementation\u4e2d\u4ecd\u7136\u6709\u8bb8\u591a\u7684\u7ec6\u8282\uff1a\u4e3a\u4e86\u652f\u6301\u4e0a\u8ff0\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u5e94\u8be5\u5b58\u50a8\u4ec0\u4e48\u4fe1\u606f\uff1f\u4ee5\u4ec0\u4e48\u65b9\u5f0f\u5b58\u50a8\uff1f\u5982\u4f55\u66f4\u65b0\u4fe1\u606f\uff1f\u8fd9\u4e9b\u90fd\u662f\u95ee\u9898\uff1a</p> <p></p> <p>\u540c\u65f6\uff0c\u4e3a\u4e86\u627e\u5230\u5f53\u524d\u56fe\u4e2d\u54ea\u4e00\u4e2a\u70b9\u662fsource\uff0c\u6bcf\u4e00\u6b21sort\u7684\u65f6\u5019\uff0c\u90fd\u8981\u904d\u5386\u5b58\u50a8\u4e86\u5165\u5ea6\u7684\u5217\u8868\u6765\u53d1\u73b0\u8c01\u53ef\u4ee5\u662fsource\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u7684\u5c06\u4f1a\u662f\\(O(|V|^2)\\)\u7ea7\u522b\u3002\u5f53\u7136\u6709\u66f4\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a\u7528\u4e00\u4e2a\u961f\u5217\u6765\u6682\u65f6\u50a8\u5b58\u90a3\u4e9bsource\u70b9\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u6709\u70b9\u7684\u5165\u5ea6\u964d\u4e3a0\u90a3\u4e48\u5c31\u5c06\u5b83Push\u8fdb\u961f\u5217\u91cc\u9762\u3002\u90a3\u4e48\u5173\u4e8e\u961f\u5217\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6700\u5f00\u59cb\u904d\u5386\u5165\u5ea6\u5217\u8868\uff0c\u9700\u8981\\(\\Theta(|V|)\\)\uff1b\u7136\u540e\u5bf9\u4e8e\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\u6765\u8bf4\uff0c\u5b83\u4eec\u90fd\u4f1a\u88abpush\u8fdb\u961f\u5217\u4e00\u6b21\uff0c\u4e14\u88abpop off\u4e00\u6b21\uff0c\u56e0\u6b64\u6240\u6709\u70b9\u7684Push pop\u9700\u8981\\(\\Theta(|V|)\\)\u3002</p> <p>\u6700\u540e\uff0c\u5173\u4e8e\u5168\u90e8\u7684\u2018\u5220\u9664\u9876\u70b9\u53ca\u5176\u5bf9\u5e94\u8fb9\uff0c\u4ece\u800c\u66f4\u65b0\u5165\u5ea6\u4fe1\u606f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u2019\u8fd8\u672a\u8fdb\u884c\u5206\u6790\uff1a</p> <p></p> <p>\u6700\u540e\u7efc\u5408\u4e00\u4e0b\uff1aTopological sort\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a\uff1a</p> <p>\\(\\Theta(|V|+|E|)\\) if we use an adjacency list; \\(\\Theta(|V|^2)\\) if we use an adjacency matrix; Memory requirement: \\(\\Theta(|V|)\\)</p> <p>\u53ef\u4ee5\u770b\u51fa\uff1a\u5982\u679c\u662f\u7a20\u5bc6\u56fe\uff0c\u90a3\u4e48\u4f7f\u7528adjacency matrix or list\u90fd\u662f\u65e0\u6240\u8c13\uff1b\u4f46\u662f\u5982\u679c\u662f\u7a00\u758f\u56fe\uff0c\u90a3\u4e48\u5c31\u662fadjacency list\u66f4\u597d\u3002</p> <p>\u540c\u65f6\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\u5982\u679c\u5728\u7b97\u6cd5\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u6240\u6709\u5269\u4f59\u7684\u9876\u70b9\uff0c\u5b83\u4eec\u7684\u5165\u5ea6\u90fd\u4e0d\u662f0\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u4e00\u5b9a\u6709\u73af\u7684\u51fa\u73b0\uff0c\u5c31\u53ef\u4ee5\u505c\u6b62topo sorting\u4e86\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u62e5\u6709\u4e00\u4e2a\\(\\Theta(|V|+|E|)\\)\u7684\u7b97\u6cd5\u6765\u5224\u65ad\u56fe\u91cc\u9762\u662f\u5426\u6709\u73af\uff01</p> <p>\u603b\u800c\u8a00\u4e4b\uff0cimplementation\u5982\u4e0b\uff1a</p> <p></p> <p>\u66f4\u597d\u7684\u662f\uff1a\u5982\u679c\u4f7f\u7528\u7684\u662f\u6570\u7ec4\u5b9e\u73b0\u7684queue\u800c\u975eSTL\u4e2d\u7684\u961f\u5217\uff0c\u90a3\u4e48\u6700\u540e\u8fd9\u4e2a\u6570\u7ec4\u50a8\u5b58\u7684\u5c31\u662ftopological sorting\u7684\u987a\u5e8f\uff01</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#finding-the-critical-path","title":"Finding the critical path","text":"<p>\u8003\u8651\u4e00\u79cd\u5b9e\u9645\u7684\u60c5\u666f\uff1a\u5047\u5982\u8bf4\u6bcf\u4e00\u4e2a\u4efb\u52a1\u7684\u5b8c\u6210\u90fd\u9700\u8981\u5bf9\u5e94\u7684\u65f6\u95f4\u5462\uff1f\u5982\u679c\u540c\u4e00\u65f6\u95f4\u6bb5\u53ea\u80fd\u5e72\u4e00\u4e2a\u4efb\u52a1\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u6700\u540e\u7684\u603b\u7528\u65f6\u5c31\u662f\u6240\u6709\u4efb\u52a1\u7684\u8981\u6c42\u65f6\u95f4\u603b\u548c\uff0c\u800c\u5b9e\u73b0\u4efb\u52a1\u7684\u987a\u5e8f\u662f\u4efb\u610f\u7684\u4e00\u4e2atopological order\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u80fd\u591f\u540c\u65f6\u505a\u591a\u4e2a\u4efb\u52a1\u5462\uff1f\uff08\u6ce8\u610f\u4f9d\u8d56\u6027\uff09\u9996\u5148\u6211\u4eec\u5b9a\u4e49\uff1a</p> <p>The critical time of each task is the earliest time that it could be completed after the start of execution The critical path is the sequence of tasks determining the minimum time needed to complete the project</p> <p>If a task on the critical path is delayed, the entire project will be delayed</p> <p>\u5177\u4f53\u5982\u4f55\u627e\u5230critical path\u4ece\u800c\u6c42\u51fa\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u7684\u6700\u5c0f\u65f6\u95f4\u8981\u6c42\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p></p> <p></p> <p>\u903b\u8f91\u987a\u5e8f\uff1a\u5f39\u51fa\u4e00\u4e2a\u9876\u70b9\u4e4b\u540e\uff0c\u9996\u5148\u66f4\u65b0\u9876\u70b9\u81ea\u5df1\u7684critical time += task time\uff1b\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e2a\u9876\u70b9\u7684\u6240\u6709\u7684\u90bb\u5c45\u6765\u8bf4\uff0c\u66f4\u65b0\u5165\u5ea6\uff0c\u5982\u679c\u8fd9\u4e2a\u90bb\u5c45\u7684critical time\u6bd4\u8fd9\u4e2a\u9876\u70b9\u7684critical time\u5c0f\uff0c\u90a3\u4e48Previous Task\u6307\u9488\u66f4\u65b0\u4e3a\u8fd9\u4e2a\u9876\u70b9\uff0c\u66f4\u65b0critical time = \u9876\u70b9\u7684critical time\uff0c\u5e76\u4e14\u5982\u679c\u6709\u5165\u5ea6\u4e3a0\u7684\u5c31Push\u8fdb\u961f\u5217\u3002</p> <p>\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548ctopological sort\u4e00\u6837\uff0c\u90fd\u662f\\(\\Theta(|V|+|E|)\\)!</p> <p>\u6700\u540e\u6839\u636e\u8868\u683c\u4e2d\u7684task and previous task\u4fe1\u606f\uff0c\u6211\u4eec\u80fd\u591f\u521b\u5efa\u4e00\u4e2a\u68ee\u6797\u6765\u8868\u793a\u5e73\u884c\u4f5c\u4e1a\u7684\u987a\u5e8f\uff1a</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#painpoint_1","title":"Painpoint","text":"<ol> <li>A critical path in a DAG is a path from the source to the sink with the maximum total weights</li> <li>Any directed tree has a topological sorting, because they are DAG as well. </li> <li>A DAG with all different weighted edges may have more than one critical path.</li> <li>A directed graph with n vertices and n-1 edges may not have a topological sorting. Consider a traingle plus one edge, with 5 nodes in total and 4 edges in total. </li> </ol>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#shortest-path","title":"Shortest Path","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#definition_1","title":"Definition","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u6709\u6743\u6709\u5411\u56fe\uff0c\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\u5c31\u662f\u627e\u5230\u4e24\u70b9\u4e4b\u95f4shortest path\u3002</p> <p>In a weighted graph, the length of a path is the sum of the weights of each of the edges in that path</p> <p>\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230shortest path\u5e76\u627e\u5230\u5b83\u7684length\u3002\u6211\u4eec\u5c06\u5047\u8bbe\u6240\u6709\u8fb9\u957f\u7684\u6743\u91cd\u90fd\u662f\u4e00\u4e2a\u6b63\u6570\u3002\u80fd\u591f\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\u7684\u7b97\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u5982A\u661f\u7b97\u6cd5\u3001Dijkstra\u3001Bellman-Ford\u3001Floyd-Warshall\u7b97\u6cd5\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#strategy_1","title":"strategy","text":"<p>Dijkstra\u2019s algorithm solves the single-source shortest path problem. \u8fd9\u4e2a\u601d\u7ef4\u548cPrim\u7b97\u6cd5\u5f88\u76f8\u4f3c\u3002 \u6838\u5fc3\u7b56\u7565\u662f\uff1a\u5047\u8bbe\u4f60\u73b0\u5728\u5728A\u9876\u70b9\uff0c\u6211\u4eec\u80fd\u591f\u77e5\u9053\u6240\u6709\u7684adjacent\u7684\u70b9\uff08\u8fd9\u4e2a\u4fe1\u606f\u662fadjacency list or matrix\u7ed9\u51fa\u6765\u7684\uff09\u3002\u5047\u8bbe\u9047\u5230\u4e86\u4e0b\u56fe\u7684\u60c5\u666f\uff08\u53ea\u622a\u53d6\u4e86A\u9876\u70b9\u76f8\u5173\u7684\u9876\u70b9\uff09\uff0c\u90a3\u4e48\uff1a</p> <ol> <li>\u6211\u4eec\u80fd\u591f\u65ad\u8a00\u4eceA\u51fa\u53d1\u5230\u8fbeB\u7684\u6700\u77ed\u7684path\u5c31\u662f\u8fb9\u957fAB\u5417\uff1f\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u5047\u8bbe\u662f\u901a\u8fc7C D\u8fd9\u4e24\u4e2a\u9876\u70b9\u4e4b\u540e\u518d\u5230\u8fbeB\uff0c\u90a3\u4e4815 and 9 &gt; 5</li> <li>\u4f46\u662f\u6211\u4eec\u65ad\u8a00\u4eceA\u51fa\u53d1\u5230\u8fbeC\u7684path\u6700\u77ed\u7684\u5c31\u662fAC\u8fb9\u957f\u5417\uff1f\u5f53\u7136\u4e0d\u53ef\u4ee5\u3002\u56e0\u4e3a\u6709\u53ef\u80fd\u8d70B D\u4f1a\u9047\u5230\u6743\u91cd\u66f4\u77ed\u7684\u8fb9\uff0c\u4ece\u800c\u5b9e\u73b0shortest\u3002\u5982\u7b2c\u4e8c\u7ae0\u56fe\u4e2d\u7684\u53cd\u4f8b</li> </ol> <p></p> <p></p> <p>\u53ef\u4ee5\u770b\u51fa\uff1a\u6211\u4eec\u5bf9\u4e8e\u90e8\u5206\u7684\u9876\u70b9\u6765\u8bf4\uff0c\u6211\u4eec\u80fd\u591f\u77e5\u9053\u6700\u77ed\u7684\u8def\u5f84\uff08\u5982\u4e0a\u56fe\u7684B\uff09\uff0c\u4f46\u662f\u8fd8\u6709\u5f88\u591a\u662f\u65e0\u6cd5\u65ad\u8a00\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u89c4\u5b9a\uff1a\u524d\u8005marked as visited\uff1b\u540e\u8005marked as unvisited\u3002\u80fd\u591f\u6ce8\u610f\u5230\uff1a\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7visited vertices\u77e5\u9053the shortest distance to each unvisited vertex\u3002</p> <p></p> <p>\u56e0\u6b64\uff1a</p> <p></p> <p></p> <p>\u5982\u4e0b\u56fe\u662f\u4e00\u4e2a\u5bfb\u627e\u6bcf\u4e00\u4e2a\u9876\u70b9\u5230K\u70b9\u7684shortest path\uff1a</p> <p></p> <p></p> <p>\u6d41\u7a0b\uff1a\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\u662f\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u627e\u5230\u6240\u6709\u7684\u90bb\u5c45\uff0c\u7528\u8fd9\u4e2a\u70b9\u7684distance\u548c\u90bb\u5c45\u4eec\u8fb9\u7684\u6570\u636e\u8ba1\u7b97startnode\u5230\u8fd9\u4e9bunvisited\u90bb\u5c45\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u66f4\u65b0\u8868\u683c\u4e2d\u7684distance\uff1b\u5982\u679c\u8fd9\u4e2a\u6570\u636e\u66f4\u5c0f\uff0c\u90a3\u4e48\u66f4\u65b0distance\u5e76\u4e14previous\u6539\u6210\u8fd9\u6b21\u64cd\u4f5c\u7684\u70b9\uff0c\u5426\u5219\u5c31distance previous\u90fd\u4e0d\u4fee\u6539\uff1b\u6700\u540e\u5728\u8868\u683cvisited\u4e3afalse\u7684\u70b9\u4e2d\u627e\u5230distance\u6700\u5c0f\u7684\u70b9\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u64cd\u4f5c\u7684\u70b9\u3002\u91cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u7684\u70b9\u662fvisited\u3002</p> <p>\u6ce8\u610f\uff1a\u4fee\u6539\u6570\u636e\u7684\u70b9\u4e00\u5b9aunvisited\u7684\u3002\u5982\u679c\u4e00\u4e2a\u70b9\u6700\u7ec8\u88ab\u5b9a\u4e3a\u4e86visited\uff0c\u5b83\u7684\u6570\u636e\u4e0d\u518d\u4fee\u6539</p> <p>\u5229\u7528\u8868\u683c\u4e2d\u7684previous\u4fe1\u606f\uff0c\u5c31\u80fd\u591f\u627e\u5230\u6bcf\u4e00\u4e2a\u9876\u70b9\u5230startnode\u6700\u77ed\u7684\u8def\u5f84\uff0c\u8fdb\u800c\u53ef\u4ee5\u751f\u6210\u4e00\u9897\u6811\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1aDijkstra\u7b97\u6cd5\u4ea7\u751f\u7684\u751f\u6210\u6811\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\uff01</p> <p></p> <p>\u5728\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u6240\u6709unvisited vertices\u7684\u8ddd\u79bb\u90fd\u662f\u6b63\u65e0\u7a77\u7684\u60c5\u51b5\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u4e2a\u56fe\u5e76\u4e0d\u662f\u8fde\u901a\u7684\uff0c\u800c\u76ee\u524d\u72b6\u6001\u627e\u5230\u662f\u8fde\u901a\u5206\u91cf\u91cc\u9762\u6240\u6709\u7684\u70b9\u5230\u8d77\u59cb\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u800c\u5982\u679c\u53ea\u60f3\u627e\u5230\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u4e48\u5c31\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u70b9\u8fdb\u884c\u7b97\u6cd5\uff0c\u7136\u540e\u5f53\u53e6\u5916\u4e00\u4e2a\u70b9\u88ab\u6807\u8bb0\u4e3avisited\u7684\u65f6\u5019\uff0c\u7b97\u6cd5\u505c\u6b62\u3002\u800c\u4e14\u5982\u679c\u56fe\u662f\u6709\u5411\u56fe\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u4f9d\u7136\u662f\u5408\u7406\u7684\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#implementation-and-analysis_1","title":"implementation and analysis","text":"<p>(\u6ce8\u610f\u4e0a\u56fe\u4e2dDijkstra\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\u54ea\u4e9b\u662fO\u54ea\u4e9b\u662f\\(\\Theta\\))(\u4e0b\u56fe\u4e2d\u5168\u90fd\u662fO\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u51c6\u786e\u7684\uff1b\u4ee5\u4e0a\u56fe\u4e3a\u51c6\uff01)</p> <p></p> <p>Reference: oi.wiki</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u662f\u7a20\u5bc6\u56fe\uff0c\u5373\\(|E| = \\Theta(V^2)\\)\uff0c\u5219\u66b4\u529b\u7b97\u6cd5\u53cd\u800c\u662f\u66f4\u4f18\u7684\u3002\u8fd9\u4e00\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e2d\u4e5f\u662f\u5982\u6b64\u3002\u4f46\u662f\u6590\u6ce2\u90a3\u5951\u5806\u7684\u4f7f\u7528\u53ef\u4ee5\u4fdd\u8bc1\u65e0\u8bba\u662f\u7a20\u5bc6\u56fe\u8fd8\u662f\u7a00\u758f\u56fe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(\\Theta(|E|+|V|ln(|V|))\\)\u90fd\u4e0d\u662f\u66f4\u5dee\u7684\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#bellman-ford-algorithm","title":"Bellman-Ford Algorithm","text":"<p>\u5982\u679c\u6709\u4e9b\u8fb9\u957f\u662f\u8d1f\u6570\u7684\u8bdd\uff0c\u800c\u4e14\u53ea\u8981\u56fe\u91cc\u9762\u7684\u73af\u90fd\u4e0d\u542b\u8d1f\u6570\u8fb9\uff0c\u90a3\u4e48Bellman-Ford\u5c31\u53ef\u4ee5\u627e\u5230\u6700\u77ed\u7684\u8ddd\u79bb\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u6bd4Dijkstra's Alrogithm\u66f4\u6162\uff0c\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u8d1f\u6570\u6743\u91cd\u7684\u8fb9\u957f\uff0c\u4f46\u662fDijkstra\u505a\u4e0d\u5230\u3002</p> <p></p> <p>Reference:oi.wiki</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#a-search","title":"A* search","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#background","title":"Background","text":"<p>A\u661f\u7b97\u6cd5\u89e3\u51b3\u7684\u662fsingle-source\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u548cDijkstra\u7b97\u6cd5\u8f83\u4e3a\u7c7b\u4f3c\u3002\u5047\u8bbe\u6211\u4eec\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u7684\u8ddd\u79bb\u90fd\u80fd\u6709\u4e00\u4e2aheuristic lower bound distance\uff0c\u8fd9\u5c31\u548c\u5730\u56fe\u4e0a\u76f4\u63a5\u4e24\u70b9\u4e4b\u95f4\u80af\u5b9a\u76f4\u7ebf\u6700\u77ed\uff0c\u56e0\u6b64\u8def\u5f84\u80af\u5b9a\u81f3\u5c11\u6bd4\u8fd9\u6761\u4e24\u70b9\u95f4\u7684\u7ebf\u6bb5\u957f\u3002</p> <p>\u8003\u8651\u4eceA\u51fa\u53d1\u5230\u8fbeB\u7684\u60c5\u666f\uff1a\u5047\u8bbeA B\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\u662f53\uff0c\u90a3\u4e48\u8bf4\u660eAB\u8def\u5f84\u81f3\u5c11\u662f53\uff1b\u53c8\u5047\u8bbe\u6211\u4eec\u5df2\u77e5A\u5730\u5230C\u5730\u7684\u6700\u77ed\u8def\u5f84\u662f28\uff0c\u800cC B\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\u662f32\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\uff1a\u5ef6\u957fA C\u8def\u5f84\u4ece\u800c\u62b5\u8fbeB\u7684\u8def\u5f84\u7684\u8ddd\u79bb\u81f3\u5c11\u662f60\u3002\u6211\u4eec\u7528\\(w(C)\\)\u8bb0\u53f7\u6765\u8868\u793a\uff1a\u5728\u2018\u4eceA\u51fa\u53d1\u6cbf\u7740\u67d0\u6761\u8def\u5f84\u5230\u8fbeC\u70b9\uff0c\u5e76\u4e14\u5c06\u7ee7\u7eed\u5ef6\u4f38\u4ece\u800c\u8fbe\u5230B\u70b9\u2019\u7684\u60c5\u5883\u7ea6\u675f\u4e0b\uff0cA B\u4e24\u70b9\u4e4b\u95f4\u7684\u53ef\u80fd\u7684\u6700\u5c0f\u8def\u5f84\u8ddd\u79bb\u3002\u5373\uff1a  </p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#strategy_2","title":"Strategy","text":"<p>\u63a5\u7740\uff0c\u518d\u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u8003\u8651Tree Search\u7684\u89d2\u5ea6\uff1a</p> <p></p> <p>\u4e5f\u53ef\u4ee5\u8003\u8651Graph Search\u7684\u89d2\u5ea6\uff1a</p> <p></p> <p>\u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff1aThe A star search algorithm directs its search towards the destination, whereas Dijkstra\u2019s algorithm radiates out from the initial vertex. </p> <p>\u4f46\u662f\u5728\u4e0a\u8ff0\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u8fd9\u4e2aheuristic lower bound\u4fe1\u606f\u4fdd\u4e0d\u4fdd\u719f\uff1f\u5982\u679c\u662f\u5730\u56fe\u4e0a\u9762\u5bfb\u627e\u6700\u77ed\u8def\u5f84\uff0c\u5c1a\u53ef\u4fdd\u719f\uff0c\u56e0\u4e3aEuclidean\u8ddd\u79bb\u4e0d\u4f1a\u9a97\u4eba\u3002</p> <p>The path the crow flies is always shorter than the road the wolf runs.</p> <p>\u4f46\u662f\u5982\u679c\u662f\u66f4\u4e3a\u5e7f\u6cdb\u7684\u60c5\u666f\u5462\uff1f A\u661f\u7b97\u6cd5\u771f\u7684\u80fd\u603b\u662f\u7ed9\u51fa\u6700\u4f18\u89e3\u5417\uff1f\u8003\u8651\u4e0b\u9762\u7684\u573a\u666f\uff1a</p> <p></p> <p>Reference: Andrew Moore, Carnegie Mellon University</p> <p>\u5728\u4e0a\u9762\u7684\u573a\u666f\u4e2d\uff0c\\(h(B,C)\\)\u8fc7\u5ea6\u9884\u8ba1\u4e86BC\u4e24\u8282\u70b9\u4e4b\u95f4\u7684\u771f\u5b9e\u8ddd\u79bb\uff0c\u4ece\u800c\u5bfc\u81f4\u6700\u7ec8\u7b97\u6cd5\u6ca1\u6709\u503e\u5411\u4e8eABC\u7684\u8def\u5f84\u3002\u90a3\u4e48\u4ec0\u4e48\u6837\u7684heuristics\u662f\u975e\u5e38\u5408\u9002\u7684\u5462\uff1f</p> <p>\u7b2c\u4e00\u79cd\uff1a\\(d(u,v)\\)\u4ee3\u8868u v\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\uff0c\u90a3\u4e48\u5982\u679c\\(h(u,v) \\leq d(u,v)\\)\uff0c\u90a3\u4e48\\(h(u,v)\\)\u5c31\u79f0\u4e3aadmissible\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u8fd9\u6837\u7684heuristic is optimistic or a lower bound on the distance\u3002\u4ece\u8fd9\u4e2a\u89c2\u70b9\u91cd\u65b0\u770bEuclidean distance\uff1a\u5730\u56fe\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e00\u5b9a\u662f\u6700\u77ed\u7684\uff0c\u660e\u663e\\(h(u,v) \\leq d(u,v)\\)\u3002\u90a3\u4e48\u8fd9\u6837\u7684heuristic\u8868\u73b0\u5982\u4f55\u5462\uff1f\u8fd9\u4e9b\u6761\u4ef6\u8868\u73b0\u5f88\u597d\uff01\u6709\u4ee5\u4e0b\u7684\u5b9a\u7406\uff1a</p> <p>\\(Theorem:\\) If h(n) is admissible, A star algorithm using TREE-SEARCH is optimal. </p> <p>\u7b2c\u4e8c\u79cd\uff1a\u6211\u4eec\u5b9a\u4e49\uff1aA heuristic is consistent if for every node n, every successor n' of n generated by any action a, we have: \\(h(n) \\leq c(n,a,n') + h(n')\\)\u3002\u90a3\u4e48\u56e0\u6b64\uff1a\\(w(n')\\geq w(n)\\)\uff0ci.e.\uff0cw(n)\u6cbf\u7740\u8def\u5f84\u4e0d\u4f1a\u4e0b\u964d\u3002\u8fd9\u6837\u7684heuristic\u4e5f\u8868\u73b0\u7684\u5f88\u597d\uff0c\u6709\u4ee5\u4e0b\u7684\u5b9a\u7406\uff1a</p> <p>\\(Theorem:\\) If h(n) is consistent, A star algorithm using GRAPH-SEARCH is optimal.</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#time-complexity","title":"Time Complexity","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#a-for-n-puzzle-problem","title":"A* for N puzzle problem","text":"<p>\u5bf9\u4e8e3\u00d73\u548c4\u00d74\u7684puzzle\uff0c\u5206\u522b\u5171\u67099\uff01\u548c16\uff01\u79cd\u72b6\u6001\uff0c\u6bcf\u8d70\u4e00\u6b65\u5c31\u4f1a\u5b8c\u6210\u4e00\u6b21\u72b6\u6001\u7684\u8f6c\u5316\u3002\u56e0\u6b64\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u72b6\u6001\u8282\u70b9\u5173\u7cfb\u56fe\u6765\u8868\u793asolution\uff1a</p> <p>\u6ce8\u610f\uff0c\u8fd9\u4e2a\u56fe\u4e0d\u662f\u6811\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u56de\u5230\u539f\u6765\u7684\u72b6\u6001</p> <p></p> <p></p> <p>\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff1a\u5728\u4e0a\u8ff0\u7684\u72b6\u6001\u8282\u70b9\u5173\u7cfb\u56fe\u4e2d\u627e\u5230\u56fa\u5b9a\u4e24\u4e2a\u72b6\u6001\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff08\u6240\u6709\u8fb9\u7684\u6743\u91cd\u90fd\u662f1\uff09\u3002\u90a3\u4e48\u53ef\u60f3\u800c\u77e5\u7684\u662f\uff0c\u6563\u53d1\u5f0f\u7684Dijkstra\u7b97\u6cd5\u5c06\u4f1a\u975e\u5e38\u7684\u6162\u3002\u90a3\u4e48\u5018\u82e5\u4f7f\u7528A\u661f\u7b97\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2aheuristic lower bound\u5e94\u8be5\u5982\u4f55\u5b9a\u4e49\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e09\u79cd\u8ddd\u79bb\uff1aDiscrete Distance, Hamming Distance and Manhattan Distance\u3002</p> <p></p> <p>Hamming heuristic\u662f\u4e00\u79cd\u7b80\u5355\u7684\u542f\u53d1\u5f0f\u51fd\u6570\uff0c\u5b83\u901a\u8fc7\u8ba1\u7b97\u5f53\u524d\u72b6\u6001\u4e2d\u65b9\u5757\u4f4d\u7f6e\u4e0e\u76ee\u6807\u72b6\u6001\u4e2d\u76f8\u5e94\u65b9\u5757\u4f4d\u7f6e\u4e0d\u5339\u914d\u7684\u6570\u91cf\u6765\u8bc4\u4f30\u5f53\u524d\u72b6\u6001\u4e0e\u76ee\u6807\u72b6\u6001\u7684\u8ddd\u79bb\u3002\u8fd9\u79cd\u542f\u53d1\u5f0f\u51fd\u6570\u5bf9\u4e8e\u6307\u5bfcA\u661f\u7b97\u6cd5\u5728\u641c\u7d22\u6811\u4e2d\u9009\u62e9\u6700\u6709\u5e0c\u671b\u7684\u8def\u5f84\u975e\u5e38\u6709\u6548\u3002</p> <p>\u66fc\u54c8\u987f\u8ddd\u79bb\uff08Manhattan Distance\uff09\u542f\u53d1\u5f0f\u51fd\u6570\u662f\u4e00\u79cd\u5e38\u7528\u7684\u4f30\u8ba1\u51fd\u6570\u3002\u5b83\u901a\u8fc7\u8ba1\u7b97\u6bcf\u4e2a\u65b9\u5757\u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u76ee\u6807\u4f4d\u7f6e\u5728\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u8ddd\u79bb\u4e4b\u548c\u6765\u8bc4\u4f30\u5f53\u524d\u72b6\u6001\u4e0e\u76ee\u6807\u72b6\u6001\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u5757\uff0c\u66fc\u54c8\u987f\u8ddd\u79bb\u662f\u5176\u5f53\u524d\u4f4d\u7f6e\u4e0e\u76ee\u6807\u4f4d\u7f6e\u5728\u884c\u548c\u5217\u4e0a\u5dee\u5f02\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u3002</p> <p>Reference: wiki.moonshot.cn</p> <p></p> <p>\u5982\u679c\u4f7f\u7528\u7684\u662fdiscrete distance\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u662fDijkstra\u7b97\u6cd5\uff0c\u8868\u73b0\u4f9d\u7136\u5f88\u5dee\uff1b\u5982\u679c\u4f7f\u7528\u7684\u662fHamming Distance\uff0c\u90a3\u4e48\u8868\u73b0\u4e5f\u5e76\u6ca1\u6709\u6539\u5584\u5f88\u591a\uff08only a small change\uff09\uff0c\u4ec5\u4ec5\u53ea\u5728\u5f53\u524d\u72b6\u6001\u548c\u76ee\u6807\u72b6\u6001\u5df2\u7ecf\u5341\u5206\u63a5\u8fd1\u7684\u65f6\u5019\u624d\u4f1a\u8868\u73b0\u826f\u597d\uff1b\u800cManhattan Distance\u80fd\u591f\u4f7f\u5f97A\u661f\u7b97\u6cd5\u62e5\u6709\u5f88\u597d\u7684\u8868\u73b0\u3002\u4e0a\u8ff0\u7684\u5185\u5bb9\u5f88\u597d\u5730\u3001\u611f\u6027\u5730\u89e3\u91ca\u4e86'heuristic,\u542f\u53d1\u5f0f'\u7684\u771f\u6b63\u542b\u4e49\u662f\u4ec0\u4e48\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#floyd-warshall","title":"Floyd-Warshall","text":"<p>Dijkstra\u7b97\u6cd5\u627e\u5230\u4e00\u4e2a\u9876\u70b9\u5230\u53e6\u5916\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u6240\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\uff1a\\(O(|E|ln|V|)\\)\u3002\u4e5f\u5c31\u4e5f\u4e3a\u7740\uff0c\u627e\u5230\u6240\u6709\u7684\u9876\u70b9\u5bf9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(|V||E|ln|V|)\\)\u3002\u5728\u7a20\u5bc6\u56fe\u4e2d\uff0c\u6700\u574f\u7684\u60c5\u51b5\u4fbf\u662f\\(O(|V|^3ln|V|)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6709\u6ca1\u6709\u66f4\u597d\u7684\u7b97\u6cd5\u5462\uff1fFloyd-Warshall\u7b97\u6cd5\u5e94\u8fd0\u800c\u751f\uff1aIt works with positive or negative weights with no negative cycle. </p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#strategy_3","title":"Strategy","text":"<p>\u8003\u8651\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5173\u7cfb\uff1a\u5982\u679c\u4e24\u4e2a\u70b9\u5176\u5b9e\u662f\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u8ddd\u79bb\u5c31\u662f0\uff1b\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u540c\uff0c\u800c\u4e14\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u8ddd\u79bb\u5c31\u662f\u8fd9\u6761\u8fb9\u957f\u7684\u6743\u91cd\uff1b\u5982\u679c\u4e24\u4e2a\u4e0d\u540c\u7684\u70b9\uff0c\u800c\u4e14\u4e4b\u95f4\u6ca1\u6709\u8fb9\u957f\uff0c\u90a3\u4e48\u8ddd\u79bb\u5c31\u662f\u65e0\u7a77\u3002\u660e\u663e\uff0c\u5728\u4e0a\u8ff0\u7684\u8003\u8651\u4e2d\uff0c\u6211\u4eec\u53ea\u8003\u8651\u4e86\u76f4\u63a5\u8fde\u63a5\u4e24\u4e2a\u9876\u70b9\u7684\u8fb9\u957f\u3002</p> <p></p> <p>\u4f46\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u7528\u4e0a\u8ff0\u7684\u5b9a\u4e49\u660e\u663e\u662f\u4e0d\u59a5\u7684\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u867d\u7136\u6211\u4eec\u53ef\u80fd\u77e5\u905367 53\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u957f\u7684\u6743\u91cd\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u53ef\u80fd\u4f1a\u6000\u7591\uff1a\u7ecf\u8fc7\u4e86\u5176\u4ed6\u70b9\u7684\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u4f1a\u4e0d\u4f1a\u6bd4\u8fd9\u6761\u8fb9\u957f\u7684\u6743\u91cd\u66f4\u77ed\uff1f</p> <p>\u56e0\u6b64\u5728\u4e0a\u8ff0\u7684\u60c5\u5883\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\\(d_{i,j}^{(1)}=min\\{d_{i,j}^{(0)}, d_{i,1}^{(0)}+ d_{1,j}^{(0)}\\}\\). \u540c\u65f6\u6211\u4eec\u5b9a\u4e49\uff1a\\(d_{i,j}^{(k-1)}\\)\u662f\u53ea\u5141\u8bb8\u4e2d\u9014\u8bbf\u95ee\u9876\u70b9\\(v_1,...,v_{k-1}\\)\u7684\u6700\u77ed\u8ddd\u79bb\u3002</p> <p></p> <p>\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6240\u6709\u9876\u70b9\u5bf9\u7684\\(d_{i,j}^{(k-1)}\\)\uff0c\u90a3\u4e48\u5bf9\u4e8e\\(v_i,v_j\\)\u8fd9\u4e24\u4e2a\u9876\u70b9\u6765\u8bf4\uff0c\u5047\u5982\u8bf4\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u5b9a\u70b9\\(v_k\\)\uff0c\u90a3\u4e48\u5e94\u8be5\u5982\u4f55\u66f4\u65b0i j\u4e24\u70b9\u7684\\(d_{i,j}^{(k)}\\)\uff1f\u6838\u5fc3\u7684\u89c2\u5bdf\u662f\uff1a\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u4e00\u5b9a\u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\uff1a\u4e00\u79cd\u662f\u5305\u542b\u4e86\u9876\u70b9\\(v_k\\)\uff0c\u4e00\u79cd\u662f\u4e0d\u5305\u542b\u3002\u5982\u679c\u5305\u542b\uff0c\u90a3\u4e48\u53ef\u60f3\u800c\u77e5\u7684\u662f\uff0ci\u5230k\u4e0ek\u5230j\u7684\u8def\u5f84\u7684\u8ddd\u79bb\u90fd\u5e94\u8be5\u662f\u6700\u77ed\u7684\uff0ci.e.\uff0c\\(d_{i,k}^{(k-1)} \\&amp; d_{k,j}^{(k-1)}\\)\uff0c\u800c\u8fd9\u4e9b\u4fe1\u606f\u6211\u4eec\u90fd\u5e94\u8be5\u662f\u77e5\u9053\u7684\u3002\u56e0\u6b64\u6211\u4eec\u6709\u4e86\u66f4\u65b0\\(d_{i,j}^{(k)}\\)\u7684\u903b\u8f91\uff1a  \u800c\u7528\u8fd9\u79cd\u903b\u8f91\u5c31\u80fd\u591f\u66f4\u65b0\u6240\u6709\u7684\u9876\u70b9\u5bf9\u7684\\(d_{i,j}^{(k)}\\)\u3002\u800ck\u53ef\u4ee5\u4ece0\u4e00\u76f4\u904d\u5386\u5230\u9876\u70b9\u6570\u91cf\u3002\u56e0\u6b64c++\u793a\u610f\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>for ( int k = 0; k &lt; num_vertices; ++k ) {\n    for ( int i = 0; i &lt; num_vertices; ++i ) {\n        for ( int j = 0; j &lt; num_vertices; ++j ) {\n            d[i][j] = std::min( d[i][j], d[i][k] + d[k][j] );\n        }\n    }\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f\\(\\Theta(|V|^3)\\)\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u5217\u7684\u4e00\u7cfb\u5217\u56fe\u7ba1\u4e2d\u7aa5\u8c79\uff1a</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u53ef\u89c1\uff0c\u5728\u4f7f\u7528adjacency matrix\u7684\u65f6\u5019\uff0c\u5728\u7ecf\u8fc7\u7684\u70b9\u4e3a\u77e9\u9635\u4e2d\u7684\u7b2ci\u884c\u7b2ci\u5217\u7684\u65f6\u5019\uff0c\u6311\u51fa\u8fd9\u4e24\u6761\u7ebf\u4e0a\u7684\u6570\u636e\uff1b\u7136\u540e\u610f\u4e49\u6bd4\u5bf9\u77e9\u9635\u4e2d\u5176\u4ed6\u6570\u636e\u548c\u6295\u5f71\u5728\u4e24\u6761\u7ebf\u4e0a\u7684\u6570\u636e\u7684\u548c\uff0c\u5982\u679c\u548c\u66f4\u5c0f\uff0c\u90a3\u5c31\u66f4\u65b0\u3002\u6bd4\u5982\u8bf4k=3\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u7684\u662f\u77e9\u9635\u4e2d\u7b2c\u4e09\u884c\u7b2c\u4e09\u5217\u7684\u6570\u636e\uff0c\u90a3\u4e48\u4f8b\u5982\u5bf91.032\u6765\u8bf4\uff0c\u4f4d\u7f6e\u6295\u5f71\u5230\u4e24\u6761\u7ebf\u4e0a\u5f97\u5230\u7684\u6570\u636e\u662f0.245,0.656\uff0c\u56e0\u6b64\u6bd4\u8f831.032\u4e0e0.245+0.656.</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#what-is-the-shortest-path","title":"What is the shortest path?","text":"<p>\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8ddd\u79bb\u5012\u662f\u66f4\u65b0\u4e86\uff0c\u7b97\u6cd5\u4e2d\u5982\u4f55\u50a8\u5b58\u8def\u5f84\u7684\u8282\u70b9\u4fe1\u606f\uff1f</p> <p></p> <pre><code>for ( int k = 0; k &lt; num_vertices; ++k ) {\n    for ( int i = 0; i &lt; num_vertices; ++i ) {\n        for ( int j = 0; j &lt; num_vertices; ++j ) {\n            if ( d[i][j] &gt; d[i][k] + d[k][j] ) {\n                p[i][j] = p[i][k];\n                d[i][j] = d[i][k] + d[k][j];\n            }\n        }\n    }\n}\n</code></pre> <p></p> <p></p> <p>\u521d\u59cb\u5316\u8fde\u63a5\u987a\u5e8f\u77e9\u9635\u5f0f\u4e4b\u540e\uff0c\u5728distance\u66f4\u65b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u8bf4\u8fd9\u4e00\u8f6e\u7ecf\u8fc7\u7684\u662fi\u9876\u70b9\uff0c\u90a3\u4e48\u5728\u4fee\u6539distance\u7684\u8fde\u63a5\u987a\u5e8f\u77e9\u9635\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u6539\u6210i\u5373\u53ef\u3002</p> <p></p> <p>\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5728\u6700\u540e\u7684\u7ed3\u679c\u4e2d\uff0c\u5982\u679c\\(p_{i,j}=j\\)\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u6761\u76f8\u90bb\u7684\u8fb9\u5c31\u662fshortest path\u7684\u7ec4\u6210\u90e8\u5206\u3002\u90a3\u4e48\u5982\u4f55\u5224\u65ad\u8def\u5f84\u5462\uff1f\u5047\u8bbe\\(p_{i,j} = v_1,p_{v_1,j} = v_2,...,p_{v_t,j} = j\\)\uff0c\u90a3\u4e48\u8def\u5f84\u5c31\u662f\\((i,v_1,v_2,...,v_t,j)\\)\u3002</p> <p></p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#which-vertices-are-connected","title":"Which vertices are connected?","text":"<p>\u6700\u540e\uff0c\u5982\u679c\u6211\u4eec\u53ea\u5173\u5fc3\u4e24\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8def\u5f84\u5b58\u5728\u5462\uff1f\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ecd\u7136\u5229\u7528Floyd-Warshall\u7b97\u6cd5\u3002\u7ef4\u62a4\u4e00\u4e2a\u8fde\u63a5\u4fe1\u606f\u7684\u77e9\u9635\uff0c\u4e00\u5f00\u59cb\u521d\u59cb\u5316\u7684\u65f6\u5019\u662f\\(tc[i][j]=true\\)\u5982\u679c\u6709i\u6307\u5411j\u7684\u8fb9\u3002\u90a3\u4e48\u968f\u7740\u4e4b\u540e\u7684Floyd-Warshall\u7b97\u6cd5\uff0c\u5982\u679c\u5bf9\u5e94\u4f4d\u7f6e\u7684distance\u66f4\u65b0\uff0c\u4f46\u662ftc\u77e9\u9635\u4e2d\u5bf9\u5e94\u7684\u662ffalse\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\u4e3atrue\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u80fd\u627e\u5230strong connected component\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#painpoint_2","title":"Painpoint","text":"<ol> <li>Dijkstra\u7b97\u6cd5\u4ea7\u751f\u7684\u751f\u6210\u6811\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811</li> <li>\u66b4\u529bDijkstra\u4f7f\u7528adjacency list or matrix\u4e0d\u5f71\u54cd\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u90fd\u662f\\(\\Theta(n^2)\\)</li> <li>\u5982\u679c\u662f\u7a20\u5bc6\u56fe\uff0c\u66b4\u529bDijkstra\u53cd\u800c\u6bd4\u4f7f\u7528\u4e8c\u53c9\u5806\u6216\u4f18\u5148\u961f\u5217\u7684\\(\\Theta(|E|log|V|)\\)\u66f4\u597d\uff1b\u6590\u6ce2\u90a3\u5951\u5806\u65b9\u6cd5\u662f\u6700\u4f18\u7684</li> <li>\u5982\u679c\u662f\u6709\u5411\u56fe\uff0c\u90a3\u4e48Dijkstra\u7b97\u6cd5\u4f9d\u7136\u4e0d\u9700\u8981\u6539\u53d8</li> <li>Bellman-Ford\u7b97\u6cd5\u6bd4Dijkstra\u6162</li> <li>Dijkstra\u4e0d\u662f\u5728\u6240\u6709\u7684DAG\u4e2d\u90fd\u662f\u4e07\u80fd\u7684\uff0c\u5982\u679c\u6709\u8d1f\u6570\u8fb9\u957f\u7684\u5b58\u5728\u5c31\u7528\u4e0d\u4e86</li> <li>Dijkstra\u66b4\u529b+\u4f7f\u7528adjacency list\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a: \\(O(|V|^2+|E|)\\)</li> <li>Dijkstra\u2019s algorithm could only find the shortest path on non-negative weighted graph</li> <li>\u901a\u8fc7\u4fee\u6539 Dijkstra \u7b97\u6cd5\uff0c\u5728\u6240\u6709\u6700\u77ed\u8def\u5f84\u4e2d\u9009\u62e9\u8fb9\u6570\u6700\u5c11\u7684\u8def\u5f84\uff1a\u7ed9\u6240\u6709\u7684\u8fb9\u957f\u90fd\u52a0\u4e0a\\(\\epsilon\\)\uff0c\u5176\u4e2d\\(\\epsilon &lt; \\delta/|E|\\)\uff0c\u7136\u540e\u8fd0\u884cDijkstra\u7b97\u6cd5\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u4e24\u6761\u8def\u5f84\u62e5\u6709\u76f8\u540c\u6743\u91cd\u7684\u540c\u65f6\uff0c\u8fb9\u957f\u6570\u91cf\u8f83\u5c11\u7684\u8def\u5f84\u5c06\u6709\u8f83\u5c0f\u7684\\(\\epsilon\\)\u7efc\u5408\u3002\u5176\u4e2d\\(\\delta\\)\u4ee3\u8868\u7684\u662f\u6240\u6709\u8fb9\u957f\u7684\u6700\u5c0f\u503c\u3002</li> <li>If we add a constraint that each edge can only appear at most once in the shortest path, Dijkstra\u2019s algorithm still works for positive-weighted graphs.</li> <li>\u2018Dijkstra\u2019s algorithm cannot work for graph with both positive and negative weights but can work for graph whose weights are all negative\u2019 \u8fd9\u4e2a\u8bf4\u6cd5\u662f\u9519\u8bef\u7684\uff01</li> <li>Bellman-Ford algorithm can be extended to find the negative circle for directed / undirected graphs with negative weights.</li> <li>Dijkstra\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u6709\u73af\u7684\u6709\u5411\u56fe\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e0d\u80fd\u5904\u7406\u5305\u542b\u4e86\u8d1f\u6570\u6743\u91cd\u8fb9\u957f\u7684\u56fe\u3002</li> <li>Dijkstra algorithm can be viewed as a special case of the A Graph Search algorithm where the heuristic function from any vertex \\(u\\) to the terminal \\(z\\) is \\(h(u, z)=0\\). Furthermore, if we use heuristic function \\(h(u) = c\\) for any \\(u \\in V\\) where c is a positive constant, then the A search algorithm will be the same with Dijkstra\u2019s algorithm.</li> <li>Floyd-Warshall and Bellman-Ford\u7b97\u6cd5\u90fd\u662f\u9700\u8981\u56fe\u4e2d\u6ca1\u6709\u8d1f\u73af</li> <li>Puzzle\u95ee\u9898\u4e2d\u7684discrete hamminng and mahattan\u8ddd\u79bb\u90fd\u662fadmissible heuristics\u3002</li> <li>'Suppose the unique shortest path from source s to a vertex t has \\(l\\) edges. It is impossible that we find this shortest path from s to t in less than \\(l\\) iterations.' \u8fd9\u53e5\u8bdd\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u4e8b\u5b9e\u4e0a\u4e00\u6b21\u8fed\u4ee3\u662f\u81f3\u5c11\u4f1a\u4f7f\u6700\u77ed\u8def\u7684\u8fb9\u6570\u81f3\u5c11+1.</li> <li>Dijkstra\u7b97\u6cd5\u548cBellman-Ford\u7b97\u6cd5\u90fd\u662f\u7528\u4e8e\u627e\u5230\u56fe\u4e2d\u4ece\u4e00\u4e2a\u8d77\u70b9\u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u7136\u800c\uff0c\u5b83\u4eec\u627e\u5230\u7684\u6700\u77ed\u8def\u5f84\u6240\u7ec4\u6210\u7684\u6811\u5e76\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09</li> <li>Dijkstra\u4e2d\uff0cIf vertex u is marked visited before v, then dist[u] \u2264 dist[v]\uff1b\u4f46\u662f\u5728A\u661f\u7b97\u6cd5\u4e2d\uff0c\u2018if vertex u is marked visited before v, then dist[u] \u2264 dist[v], where dist[u] represents the real distance from start vertex to u\u2019\u8fd9\u4e2a\u8bf4\u6cd5\u5c31\u662f\u9519\u8bef\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u5176\u5b9e\u5224\u65ad\u4f9d\u636e\u662f\u542f\u53d1\u5f0f\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u771f\u5b9e\u8ddd\u79bb.</li> <li>For A* search algorithm with admissible and consistent heuristic, heuristic \\(h_a(x)\\) is always better than \\(h_b(x)\\) if \\(\u2200x : h_a(x) \u2265 h_b(x)\\).</li> <li>\u5982\u679cheuristic\u662fconsistent\u7684\uff0c\u90a3\u4e48\u4e5f\u5fc5\u7136\u662fadmissible\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u4e0d\u6210\u7acb</li> </ol>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#dynamic-programming","title":"Dynamic Programming","text":""},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#introduction","title":"Introduction","text":"<p>\u8003\u8651\u5982\u4e0b\u51fd\u6570\uff1a</p> <pre><code>double F( int n ) {\n    return ( n &lt;= 1 ) ? 1.0 : F(n - 1) + F(n - 2);\n}\n</code></pre> <p>\u5b83\u7684\u8fd0\u884c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u975e\u5e38\u63a5\u8fd1\uff1a\\(T(n) = O(2^n)\\)\u3002\u95ee\u9898\u5728\u4e8e\uff0c\u4e3a\u4e86\u8ba1\u7b97\uff0c\u6bd4\u5982\u8bf4\uff0cF(44)\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u5f97\u5230F(43)F(42)\uff0c\u4f46\u662fF(43)\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u53c8\u5305\u542b\u4e86F(42)\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u95ee\u9898\u5341\u5206\u4e25\u91cd\uff0c\u6bd4\u5982\u8bf4\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cF(10)\u88ab\u8ba1\u7b97\u4e869227465\u6b21\u3002\u8fd9\u5b8c\u5168\u662f\u4e0d\u5fc5\u8981\u7684\u3002</p> <p>\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u6240\u6709\u7684\u4e2d\u95f4\u8ba1\u7b97\u8fc7\u7a0b\u90fd\u50a8\u5b58\u5728\u8868\u683c\u4e2d\u3002\u628a\u4e2d\u95f4\u7ed3\u679c\u50a8\u5b58\u8d77\u6765\u7684\u8fc7\u7a0b\u53eb\u505amemorization\u3002\u628a\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\u50a8\u5b58\u8d77\u6765\u662f\u4e3a\u4e86\u540e\u7eed\u53ef\u80fd\u7684\u4f7f\u7528\uff0c\u8fd9\u6837\u5c31\u5728\u9700\u8981\u8fd9\u4e2a\u6570\u636e\u7684\u65f6\u5019\u4e0d\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u4e86\u3002</p> <p>\u56e0\u6b64\uff1aDynamic programming is actually a fancy name for caching intermediate results in a table for later use.</p> <p>In solving optimization problems, the top-down approach may require repeatedly obtaining optimal solutions for the same sub-problem</p> <p>\u52a8\u6001\u89c4\u5212\u548c\u5206\u6cbb\u662f\u4e0d\u540c\u7684\uff0c\u5206\u652f\u4e2d\u5b50\u95ee\u9898\u90fd\u5b9e\u9645\u4e0a\u5e94\u8be5\u662funique\u7684\uff0c\u4f46\u662f\u5728\u52a8\u6001\u89c4\u5212\u4e2d\u53d1\u751f\u7684\u662f\uff1a\u4e00\u4e2a\u95ee\u9898\u88ab\u5206\u89e3\u6210\u591a\u4e2a\u5c0f\u95ee\u9898\uff08\u5b50\u95ee\u9898\uff09\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u9047\u5230\u3002\u5982\u679c\u5b50\u95ee\u9898\u518d\u6b21\u53d1\u751f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u79f0\u4e3a\u91cd\u53e0\u5b50\u95ee\u9898\u3002</p> <p>\u56e0\u6b64\u5982\u4e0b\u603b\u7ed3\u8d2a\u5fc3\u3001\u5206\u6cbb\u548c\u52a8\u6001\u89c4\u5212\u4e09\u8005\u7684\u6982\u5ff5\uff1a</p> <p>Greedy.  Process the input in some order, myopically making irrevocable decisions. Divide-and-conquer.  Break up a problem into independent subproblems;\u000bsolve each subproblem; combine solutions to subproblems to form solution to original problem.  Dynamic programming.  Break up a problem into a series of overlapping subproblems; combine solutions to smaller subproblems to form solution to large subproblem.</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#weighted-interval-scheduling","title":"Weighted Interval Scheduling","text":"<p>\u8003\u8651\u5982\u4e0b\u7684\u4efb\u52a1\uff1a</p> <p></p> <p>\u6ce8\u610f\u5230\u8fd9\u4e2a\u4efb\u52a1\u8c8c\u4f3c\u548c\u8d2a\u5fc3\u4e2d\u4ecb\u7ecd\u7684\u4efb\u52a1\u5f88\u50cf\uff0c\u6362\u800c\u8a00\u4e4b\uff0c\u4e0a\u8ff0\u56fe\u7247\u7684\u4efb\u52a1\u4e2d\u5982\u679c\u6240\u6709\u7684task\u6743\u91cd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8d2a\u5fc3\u5c31\u5e94\u8be5\u662f\u6700\u4f18\u7684\u3002</p> <p>Earliest finish-time first: Consider jobs in ascending order of finish time. Add job to subset if it is compatible with previously chosen jobs.</p> <p>\u4f46\u662f\u80fd\u591f\u89c2\u5bdf\u5230\uff0c\u5982\u679c\u6743\u91cd\u4e0d\u76f8\u540c\u5462\uff1f\u90a3\u4e48\u8d2a\u5fc3\u7b97\u6cd5\u5c31\u4e0d\u662f\u6700\u4f18\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u53cd\u4f8b\uff1a</p> <p></p> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u79cd\u65b0\u7684\u89e3\u51b3\u65b9\u5f0f\uff0c\u9996\u5148\u5b9a\u4e49\u4e00\u4e9b\u5185\u5bb9\uff1a</p> <p></p> <p></p> <p>\u9996\u5148\u5b9a\u4e49\u7684\u662f\\(p(j)\\)\u4ee3\u8868\u7684\u662fj\u4efb\u52a1\u4e4b\u524d\u7b2c\u4e00\u4e2a\u80fd\u548cj\u517c\u5bb9\u7684\u4efb\u52a1\u7684index\uff0c\u7136\u540e\u5b9a\u4e49\u4e86\\(OPT(j)\\)\u4ee3\u8868\u4f7f\u7528\\(1,2,\\dots ,j\\)\u53f7\u4efb\u52a1\u7684\u6240\u83b7\u5f97\u7684\u6743\u91cd\u6700\u5927\u503c\u3002\u56e0\u6b64\u987a\u52bf\u5c55\u5f00\u5206\u7c7b\uff1a\u5982\u679cj\u53f7\u4efb\u52a1\u662f\u9700\u8981\u7684\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u4e4b\u524d\u6240\u6709\u4efb\u52a1\u4e2d\u80fd\u591f\u517c\u5bb9\u7684\u4efb\u52a1\u7684\u6700\u5927\u7f16\u53f7\u4e3a\\(p(j)\\)\uff0ci.e.\uff0c\\(p(j)+1, \\dots, j-1\\)\u8fd9\u4e9b\u7f16\u53f7\u7684\u4efb\u52a1\u90fd\u662f\u7528\u4e0d\u4e0a\u4e86\u7684\uff0c\u76f8\u5f53\u4e8e\u662f\u5b50\u95ee\u9898\u662f\\(OPT(p(j))\\)\uff1b\u800c\u5982\u679cj\u6ca1\u7528\u5230\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u5b50\u95ee\u9898\u662f\\(OPT(j-1)\\)\u3002\u56e0\u6b64\u5bf9\u4e8e\\(OPT(j)\\)\u6765\u8bf4\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\u6027\uff0c\u90a3\u4e48\u56e0\u6b64\u5b83\u7684\u503c\u5e94\u8be5\u662f\u4e24\u79cdscenario\u4e2d\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64Bellman Equation\u5982\u4e0a\u56fe\u6240\u793a\u3002</p> <p>\u56e0\u6b64\u53ef\u4ee5\u8bbe\u8ba1\u5982\u4e0b\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>Brute-Force (n, s1, \u2026, sn, f1, \u2026, fn, w1, \u2026, wn)                     \nSort jobs by finish time and renumber so that  f1  \u2264   f2   \u2264  \u2026  \u2264   fn.\nCompute  p[1], p[2], \u2026, p[n] via binary search.\nReturn  Compute-Opt(n).\n\nCompute-Opt( j )                          \nIf (j = 0)\n    return  0.\nElse\n    Return  max {Compute-Opt( j \u2013 1),  wj  + Compute-Opt(p[ j ])  }.\n</code></pre> <p>\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u4e2arecursive algorithm\u6765\u8bf4\u5f88\u6162\uff0c\u56e0\u4e3a\u6709overlapping problem\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u6210\u6307\u6570\u589e\u957f\u8d8b\u52bf\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5229\u7528memoriation\u6765\u907f\u514d\u91cd\u590d\u7684\u8ba1\u7b97\u3002\u8003\u8651\u7528\u6570\u7ec4\u6765\u50a8\u5b58\u5b50\u95ee\u9898\u7684\u7ed3\u679c\uff1a</p> <p></p> <p>\u5728\u51fd\u6570\u4e2d\u5224\u65ad\u5982\u679cM[j]\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u8fc7\uff0c\u8bf4\u660e\u662f\u9012\u5f52\u7684\u5e95\u5c42\u5f00\u59cb\u7b2c\u4e00\u6b21\u771f\u6b63\u8ba1\u7b97\u4e86\u8fd9\u4e2a\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u5c31\u50a8\u5b58\u8d77\u6765\uff0c\u800c\u4e14\u4e0d\u4f1a\u518d\u66f4\u6539\u3002\u4e4b\u540e\u9047\u5230\u6d45\u5c42\u7684\u9012\u5f52\u9700\u8981\u8fd9\u4e2a\u503c\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u8bbf\u95ee\u6570\u7ec4\u5373\u53ef\u3002\u90a3\u4e48\u73b0\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1fsort by finish time\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(nlogn)\\)\uff0c\u8ba1\u7b97p[j]\uff0c\\(j \\in [1, n]\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(nlogn)\\)\uff08\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\uff09\uff0c\u7136\u540e\u5728M-COMPUTE-OPT\u4e2d\uff0c\u5b9e\u9645\u4e0a\u53ea\u6709\u7b2c\u4e00\u6b21\u5e38\u6570\u65f6\u95f4\u5185\u8ba1\u7b97M[j]\u7684\u65f6\u5019\u624d\u7eb3\u5165\u65f6\u95f4\uff0c\u50a8\u5b58\u8d77\u6765\u540e\u80fd\u591f\u5e38\u6570\u65f6\u95f4\u5185\u88ab\u8c03\u51fa\u7136\u540e\u4f7f\u7528\uff0c\\(j \\in [1, n]\\)\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n)\\)\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(nlogn)\\)</p> <p>\u90a3\u4e48\u5728\u6700\u7ec8\u6c42\u51fa\u6700\u4f18\u89e3\u7684\u65f6\u5019\uff0c\u5b9e\u73b0\u4e0b\u5217\u7684\u51fd\u6570\u5373\u53ef\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5c31\u662f\u627e\u51fa\u4e00\u7cfb\u5217\u7684\u4efb\u52a1\u7f16\u53f7\uff1a</p> <p></p> <p>\u7531\u4e8e\u6bcf\u4e00\u6b21\u5224\u65ad\u65f6\u95f4\u662f\u5e38\u6570\uff0c\u800c\u6700\u591a\u5224\u65adn\u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n)\\)\u3002\u5728\u4e0a\u8ff0\u7684\u5b9e\u73b0\u4e2d\uff0cM-COMPUTE-OPT\u91c7\u7528\u4e86top-down\u9012\u5f52\u7684\u5f62\u5f0f\u3002\u4f46\u662f\u5176\u5b9e\u4e5f\u53ef\u4ee5\u91c7\u7528bottom-up\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff1a</p> <p></p> <p>\u4e0a\u8ff0\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u662f\\(O(nlogn)\\)\u3002\u56e0\u6b64\u8fd9\u4e2a\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u4e86\u3002\u975e\u5e38\u597d\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8bc1\u660e\u8fd9\u4e2aDP\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u56e0\u4e3atop-down\u5c31\u662f\u4e00\u4e2a\u5408\u7406\u7684\u7b97\u6cd5\u89e3\u91ca\uff0c\u800cbottom-up\u662f\u4e00\u4e2a\u5b9e\u73b0\u65b9\u6cd5\uff0c\u800ctop-down and bottom-up\u662f\u7b49\u6548\u7684\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#segmented-least-squares","title":"Segmented Least Squares","text":"<p>Least Squares\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5047\u8bbe\u5e73\u9762\u4e0a\u6709n\u4e2a\u70b9\uff0c\u7136\u540e\u62df\u5408\u4e00\u6761\u76f4\u7ebf\uff0c\u8ba1\u7b97MSELoss\uff0c\u6362\u800c\u8a00\u4e4b\u5c31\u662f\uff1a  \u6570\u5b66\u4e2d\u6709\u516c\u5f0f\u80fd\u6c42\u51fa\u4f7f\u5f97SSE\u6700\u5c11\u7684\u53c2\u6570a\uff0cb\u3002\u4f46\u662f\u4e0a\u8ff0\u5185\u5bb9\u7684\u5047\u8bbe\u662f\u70b9\u7684\u5206\u5e03\u5341\u5206\u63a5\u8fd1\u4e8e\u4e00\u6761\u76f4\u7ebf\u7684\u3002\u90a3\u4e48\u5982\u679c\uff1aPoints lie roughly on a sequence of several line segments\uff0c\u4efb\u52a1\u662ffind a sequence of lines that minimize f(x)\u3002</p> <p></p> <p>\u90a3\u4e48\u5982\u4f55\u8bbe\u8ba1DP\u5462\uff1f\u5047\u8bbeOPT\uff08j\uff09\u4ee3\u8868\u7684\u662f\u5bf9\u4e8e1-j\u4e2a\u70b9\u7684\u6700\u5c0f\u7684cost\uff0c\u90a3\u4e48\u5982\u679c\u8003\u8651\\(i \\leq j\\)\uff0c\\(p_i, \\dots, p_j\\)\u662f\u6700\u540e\u4e00\u6761\u7ebf\u6bb5\u62df\u5408\u7684\u70b9\uff0c\u56e0\u6b64\u5c31\u80fd\u591f\u8ba1\u7b97cost\u4e4b\u95f4\u7684\u5173\u7cfb\u4e86\uff1a  \u90a3\u4e48\u5728\u8bbe\u8ba1Bellman equation\u7684\u65f6\u5019\uff0ci\u53ef\u4ee5\u4efb\u53d6[1, j]\u91cc\u9762\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u65b9\u7a0b\u8bbe\u8ba1\u5982\u4e0b\uff1a</p> <p></p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#knapsack-problem","title":"Knapsack Problem","text":"<p>\u8003\u8651\u4e0b\u8ff0\u7684\u95ee\u9898\uff1a</p> <p></p> <p></p> <p>\u4f46\u662f\u6b64\u5904\u6709\u9650\u91cd\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u8bbe\u8ba1\u7684OPT\u5e94\u8be5\u5e26\u4e0aweight\u4fe1\u606f\uff1a</p> <p></p> <p>\u9996\u5148\u8003\u8651\u7684\u662f\u5728OPT(i,w)\u4e2d\uff0ci\u7269\u54c1\u662f\u5426\u9009\u5165\uff0c\u8fd9\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u9009\u5165\uff0c\u90a3\u4e48\\(OPT(i, w) = OPT(i-1, w-w_i) =v_i\\)\uff1b\u5982\u679c\u4e0d\u9009\u5165\uff0c\u90a3\u4e48\\(OPT(i,w)=OPT(i-1, w)\\)\uff1b\u81f3\u4e8e\u662f\u4e24\u79cd\u60c5\u51b5\u4e2d\u7684\u54ea\u4e00\u79cd\uff0c\u90a3\u4e48\u5c31\u662f\u76f4\u63a5\u8003\u8651max\u4e86\u3002\u5f53\u7136\u8fd8\u9700\u8981\u8003\u8651\uff1a\u5982\u679c\\(w_i &gt; w\\)\uff0c\u90a3\u4e48\u663e\u7136\\(OPT(i,w) = OPT(i-1, w)\\)</p> <p>\u53ef\u89c1\uff0c\u8fd9\u91cc\u50a8\u5b58\u7684\u7ed3\u679c\u5e94\u8be5\u662f\u548c\u4e24\u4e2a\u53d8\u91cf\u6709\u5173\uff0c\u56e0\u6b64\u5e94\u8be5\u50a8\u5b58\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff1b\u540c\u65f6\u4ece\u4ee3\u7801\u5b9e\u73b0\u4e0a\uff0c\u5916\u9762\u7684\u5faa\u73af\u4ecesubset of items\u4ece\u5c0f\u5230\u5927\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b21\u5faa\u73af\u4e2d\u8fdb\u884cw\u7684\u4ece\u5c0f\u5230\u5927\u7684\u4e00\u6b21for\u5faa\u73af\u3002</p> <p></p> <p>\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u663e\u7136\u662f\uff1a\\(\\Theta(nw)\\)</p>"},{"location":"Data_Structure_and_Algorithm/%E7%AE%97%E6%B3%95.html#more-examples","title":"More Examples","text":"<p>House Coloring Problem</p> <p></p> <p></p> <p>Maximum Subarray Problem</p> <p>Goal: Given an array x of n integer (positive or negative), find a contiguous subarray whose sum is maximum. </p> <p>\u5b9a\u4e49\uff1aOPT(i) = max sum of any subarray of x whose rightmost index is i.</p> <p></p> <p>\u5bf9\u4e8eOPT(i)\u6765\u8bf4\uff0c\u5982\u679cOPT(i-1)\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u90a3\u4e48\u5c06x_i\u52a0\u5165\u8fd9\u4e2asubarray\u4e2d\u975e\u5e38nice\uff1b\u4f46\u662f\u5982\u679c\u662f\u8d1f\u6570\u5462\uff1f\u90a3\u4e48\u8fd8\u4e0d\u5982\u4e0d\u52a0\u8fd9\u4e2asubarray\uff0c\u56e0\u4e3ax_i\u8fd9\u4e2a\u6570\u5b57\u6839\u636eOPT(i)\u7684\u5b9a\u4e49\u662f\u4e0d\u5f97\u4e0d\u52a0\u7684\uff0c\u90a3\u4e48\u8fd8\u4e0d\u5982\u8fd9\u4e2a\u8d1f\u6570\u4e0d\u8981\u52a0\u4e0a\u3002</p> <p>Maximum Rectangle Problem</p> <p></p> <p></p> <p>Coin Changing Problem</p> <p>Problem.  Given n coin denominations \\({ c_1, c_2, \u2026, c_n }\\)  and a target value V, find the fewest coins needed to make change for V (or report impossible).</p> <p></p>"},{"location":"Data_Structure_and_Algorithm/%E8%BF%9B%E9%98%B6%E4%B8%8E%E6%8B%93%E5%B1%95misc.html","title":"\u8fdb\u9636\u4e0e\u62d3\u5c55","text":"<p>\u5728CS101\u8bfe\u7a0b\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u9664\u4e86\u56fa\u5b9a\u7684\u4e00\u4e9b\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0c\u8fd8\u6709\u4e00\u4e9b\u8bfe\u4e0a\u6216TA\u8865\u5145\u7684\u77e5\u8bc6\u3002\u5728\u6b64\u8fdb\u884c\u8bb0\u5f55\u3002</p>"},{"location":"Data_Structure_and_Algorithm/%E8%BF%9B%E9%98%B6%E4%B8%8E%E6%8B%93%E5%B1%95misc.html#trie","title":"Trie\u6811","text":"<p>Reference: [1] oi.wiki</p> <p>[2] Trie\u6811\uff08Prefix Tree\uff09\u4ecb\u7ecd-CSDN\u535a\u5ba2</p> <p>Trie\u7684\u540d\u5b57\u6765\u6e90\u4e8eretrieval\uff0cTrie\u6811\u53c8\u79f0\u4e3a\u5b57\u5178\u6811\u3001\u524d\u7f00\u6811\u3001\u5355\u8bcd\u67e5\u627e\u6811\uff0c\u662f\u4e00\u79cd\u591a\u53c9\u6811\u7684\u7ed3\u6784\u3002\u4e00\u79cd\u7ecf\u5178\u7684Trie\u6811\u5982\u4e0b[1]\uff1a</p> <p></p> <p>\u8fd9\u68f5\u6811\u7528\u8fb9\u6765\u8868\u793a\u5b57\u6bcd\uff0c\u4ece\u6839\u8282\u70b9\u5230\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5c31\u4ee3\u8868\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6700\u7ecf\u5178\u7684\u5e94\u7528\u5c31\u662f\u68c0\u7d22\u5b57\u7b26\u4e32\uff1a\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u8fc7\u3002</p> <p>\u53e6\u4e00\u79cdtrie\u6811\u5982\u4e0b[2]\uff1a</p> <p></p> <p>\u4e0a\u56fe\u662f\u4e00\u68f5Trie\u6811\uff0c\u8868\u793a\u4e86\u5173\u952e\u5b57\u96c6\u5408{\u201ca\u201d, \u201cto\u201d, \u201ctea\u201d, \u201cted\u201d, \u201cten\u201d, \u201ci\u201d, \u201cin\u201d, \u201cinn\u201d} \u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u5f52\u7eb3\u51faTrie\u6811\u7684\u57fa\u672c\u6027\u8d28\uff1a</p> <ul> <li>\u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u6839\u8282\u70b9\u5916\u7684\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u90fd\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u3002</li> <li>\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002</li> <li>\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5305\u542b\u7684\u5b57\u7b26\u4e92\u4e0d\u76f8\u540c\u3002</li> <li>\u901a\u5e38\u5728\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u4f1a\u5728\u8282\u70b9\u7ed3\u6784\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\uff0c\u7528\u6765\u6807\u8bb0\u8be5\u7ed3\u70b9\u5904\u662f\u5426\u6784\u6210\u4e00\u4e2a\u5355\u8bcd\uff08\u5173\u952e\u5b57\uff09\u3002</li> </ul> <p>\u53ef\u4ee5\u770b\u51fa\uff0cTrie\u6811\u7684\u5173\u952e\u5b57\u4e00\u822c\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u800c\u4e14Trie\u6811\u628a\u6bcf\u4e2a\u5173\u952e\u5b57\u4fdd\u5b58\u5728\u4e00\u6761\u8def\u5f84\u4e0a\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7ed3\u70b9\u4e2d\u3002\u53e6\u5916\uff0c\u4e24\u4e2a\u6709\u516c\u5171\u524d\u7f00\u7684\u5173\u952e\u5b57\uff0c\u5728Trie\u6811\u4e2d\u524d\u7f00\u90e8\u5206\u7684\u8def\u5f84\u76f8\u540c\uff0c\u6240\u4ee5Trie\u6811\u53c8\u53eb\u505a\u524d\u7f00\u6811\uff08Prefix Tree\uff09\u3002Trie\u6811\u7684\u6838\u5fc3\u601d\u60f3\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u5229\u7528\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u6765\u51cf\u5c11\u65e0\u8c13\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u4ee5\u8fbe\u5230\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\u7684\u76ee\u7684\u3002</p> <p>Trie\u6811\u7684\u5e38\u89c1\u64cd\u4f5c\u5305\u62ec\u63d2\u5165\u3001\u67e5\u627e\u548c\u5220\u9664\u5b57\u7b26\u4e32\uff1a</p> <p>Reference: chatgpt.com</p> <ul> <li>\u63d2\u5165\u5b57\u7b26\u4e32</li> </ul> <p>\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4f9d\u6b21\u68c0\u67e5\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u6cbf\u6811\u8def\u5f84\u63d2\u5165\u8282\u70b9\u3002\u5982\u679c\u5b57\u7b26\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u8282\u70b9\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u8282\u70b9\u6807\u8bb0\u4e3a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002</p> <ul> <li>\u67e5\u627e\u5b57\u7b26\u4e32</li> </ul> <p>\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u9010\u5b57\u7b26\u5411\u4e0b\u68c0\u67e5\uff0c\u5982\u679c\u8def\u5f84\u4e0a\u6709\u6bcf\u4e2a\u5b57\u7b26\u8282\u70b9\u4e14\u7ed3\u5c3e\u8282\u70b9\u5b58\u5728\uff0c\u5219\u8868\u793a\u5b57\u7b26\u4e32\u5b58\u5728\u4e8eTrie\u6811\u4e2d\u3002</p> <ul> <li>\u5220\u9664\u5b57\u7b26\u4e32</li> </ul> <p>\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u627e\u5230\u8981\u5220\u9664\u7684\u5b57\u7b26\u4e32\u672b\u5c3e\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u5b50\u8282\u70b9\u5219\u53ef\u4ee5\u5220\u9664\u8282\u70b9\uff0c\u9012\u5f52\u5411\u4e0a\u68c0\u67e5\u548c\u5220\u9664\u591a\u4f59\u8282\u70b9\u3002</p> <p>Trie\u6811\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u95ee\u9898\uff1a</p> <ul> <li>\u81ea\u52a8\u8865\u5168\uff1a\u4f8b\u5982\u8f93\u5165\u201capp\u201d\u540e\u53ef\u4ee5\u81ea\u52a8\u63d0\u793a\u201capple\u201d\u3001\u201capplication\u201d\u7b49\u524d\u7f00\u5339\u914d\u7684\u5355\u8bcd\u3002</li> <li>\u62fc\u5199\u68c0\u67e5\uff1a\u67e5\u627e\u524d\u7f00\u6216\u8fd1\u4f3c\u5339\u914d\u7684\u5355\u8bcd\uff0c\u7528\u4e8e\u7ea0\u6b63\u62fc\u5199\u9519\u8bef\u3002</li> <li>\u5b57\u7b26\u4e32\u524d\u7f00\u5339\u914d\uff1a\u5feb\u901f\u67e5\u627e\u4e00\u7ec4\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u4ee5\u67d0\u4e2a\u524d\u7f00\u5f00\u59cb\u7684\u5355\u8bcd\u3002</li> <li>\u5b57\u7b26\u4e32\u6392\u5e8f\uff1aTrie\u6811\u53ef\u4ee5\u5bf9\u5927\u91cf\u5b57\u7b26\u4e32\u6309\u5b57\u5178\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u601d\u8def\u4e5f\u5f88\u7b80\u5355\uff1a\u904d\u5386\u4e00\u6b21\u6240\u6709\u5173\u952e\u5b57\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u63d2\u5165trie\u6811\uff0c\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u513f\u5b50\u5f88\u663e\u7136\u5730\u6309\u7167\u5b57\u6bcd\u8868\u6392\u5e8f\uff0c\u7136\u540e\u5148\u5e8f\u904d\u5386\u8f93\u51faTrie\u6811\u4e2d\u6240\u6709\u5173\u952e\u5b57\u5373\u53ef\u3002</li> <li>\u4f5c\u4e3a\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u8f85\u52a9\u7ed3\u6784\uff1a\u5982\u540e\u7f00\u6811\uff1b[AC\u81ea\u52a8\u673a][[AC \u81ea\u52a8\u673a - OI Wiki].</li> </ul> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u624b\u52a8\u5b9e\u73b0\u7684trie\u6811\uff1a</p> <pre><code>class TrieNode:\n    def __init__(self):\n        self.children = {}  # \u5b58\u50a8\u5b50\u8282\u70b9\n        self.is_end_of_word = False  # \u662f\u5426\u4e3a\u5355\u8bcd\u7ed3\u5c3e,i.e.,\u662f\u4e0d\u662f\u53f6\u8282\u70b9\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n                # \u5982\u679c\u6ca1\u6709\uff0c\u5f00\u8f9f\u5e76\u8fdb\u5165\n            node = node.children[char]\n        node.is_end_of_word = True\n\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end_of_word\n\n    def starts_with(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return True\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;string&gt;\n\nclass TrieNode {\npublic:\n    bool isEndOfWord;  // \u8868\u793a\u662f\u5426\u4e3a\u5355\u8bcd\u7ed3\u5c3e\n    std::unordered_map&lt;char, TrieNode*&gt; children;  // \u5b58\u50a8\u5b50\u8282\u70b9\n\n    TrieNode() : isEndOfWord(false) {}\n};\nclass Trie {\nprivate:\n    TrieNode* root;\n\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    // \u63d2\u5165\u4e00\u4e2a\u5355\u8bcd\n    void insert(const std::string &amp;word) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node-&gt;children.find(ch) == node-&gt;children.end()) {\n                node-&gt;children[ch] = new TrieNode();\n            }\n            node = node-&gt;children[ch];\n        }\n        node-&gt;isEndOfWord = true;\n    }\n    // \u67e5\u627e\u4e00\u4e2a\u5b8c\u6574\u5355\u8bcd\u662f\u5426\u5b58\u5728\n    bool search(const std::string &amp;word) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node-&gt;children.find(ch) == node-&gt;children.end()) {\n                return false;\n            }\n            node = node-&gt;children[ch];\n        }\n        return node-&gt;isEndOfWord; // \u6ce8\u610f\u5224\u65ad\u662f\u201c\u5b8c\u6574\u5355\u8bcd\u201d\n    }\n    // \u67e5\u627e\u662f\u5426\u5b58\u5728\u4ee5\u6307\u5b9a\u524d\u7f00\u5f00\u59cb\u7684\u5355\u8bcd\n    bool startsWith(const std::string &amp;prefix) {\n        TrieNode* node = root;\n        for (char ch : prefix) {\n            if (node-&gt;children.find(ch) == node-&gt;children.end()) {\n                return false;\n            }\n            node = node-&gt;children[ch];\n        }\n        return true;\n    }\n    // \u9012\u5f52\u91ca\u653eTrie\u8282\u70b9\u7684\u5185\u5b58\n    void deleteTrie(TrieNode* node) {\n        for (auto &amp;child : node-&gt;children) {\n            deleteTrie(child.second);\n        }\n        delete node;\n    }\n    // \u6790\u6784\u51fd\u6570\n    ~Trie() {\n        deleteTrie(root);\n    }\n};\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E8%BF%9B%E9%98%B6%E4%B8%8E%E6%8B%93%E5%B1%95misc.html#moores-voting","title":"Moore's Voting","text":"<p>Reference: \u6469\u5c14\u6295\u7968\u7b97\u6cd5\uff08Moore\u2018s Voting Algorithm\uff09\u53ca\u4f8b\u9898_moore algorithm-CSDN\u535a\u5ba2</p> <p>\u6469\u5c14\u6295\u7968\u7b97\u6cd5\uff08Moore\u2019s Voting Algorithm\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u6570\u7ec4\u4e2d\u5bfb\u627e\u591a\u6570\u5143\u7d20\u7684\u6709\u6548\u65b9\u6cd5\u3002\u6240\u8c13\u591a\u6570\u5143\u7d20\uff0c\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u4ee5\u4e0a\u7684\u5143\u7d20\u3002\u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u5c31\u662f\u7528\u4e8e\u4f17\u6570\u7684\u5bfb\u627e\u3002</p> <p>\u6469\u5c14\u6295\u7968\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u5b83\u901a\u8fc7\u6d88\u9664\u4e0d\u540c\u5143\u7d20\u4e4b\u95f4\u7684\u5bf9\u6297\u6765\u627e\u5230\u53ef\u80fd\u7684\u591a\u6570\u5143\u7d20\u3002\u7b97\u6cd5\u904d\u5386\u6570\u7ec4\u5e76\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf\uff1a\u5019\u9009\u5143\u7d20\u548c\u5176\u5bf9\u5e94\u7684\u7968\u6570\u3002\u5f00\u59cb\u65f6\uff0c\u5019\u9009\u5143\u7d20\u4e3a\u7a7a\uff0c\u7968\u6570\u4e3a0\u3002\u7136\u540e\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u5982\u679c\u7968\u6570\u4e3a0\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u8bbe\u4e3a\u5019\u9009\u5143\u7d20\uff0c\u5e76\u5c06\u7968\u6570\u8bbe\u7f6e\u4e3a1\u3002</li> <li>\u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u5019\u9009\u5143\u7d20\uff0c\u5219\u7968\u6570\u52a01\u3002</li> <li>\u5982\u679c\u5f53\u524d\u5143\u7d20\u4e0d\u7b49\u4e8e\u5019\u9009\u5143\u7d20\uff0c\u5219\u7968\u6570\u51cf1\u3002</li> </ol> <p>\u8fd9\u6837\u505a\u7684\u6548\u679c\u662f\uff0c\u76f8\u540c\u5143\u7d20\u7684\u7968\u6570\u4f1a\u76f8\u4e92\u62b5\u6d88\uff0c\u4e0d\u540c\u5143\u7d20\u7684\u5bf9\u6297\u4e5f\u4f1a\u5bfc\u81f4\u7968\u6570\u51cf\u5c11\u3002\u7531\u4e8e\u591a\u6570\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u4ee5\u4e0a\uff0c\u6240\u4ee5\u6700\u7ec8\u7559\u4e0b\u7684\u5019\u9009\u5143\u7d20\u5c31\u5f88\u6709\u53ef\u80fd\u662f\u591a\u6570\u5143\u7d20\u3002</p> <p>\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u540e\uff0c\u5019\u9009\u5143\u7d20\u5373\u4e3a\u591a\u6570\u5143\u7d20\u7684\u5019\u9009\u8005\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u5019\u9009\u5143\u7d20\u662f\u5426\u771f\u7684\u662f\u591a\u6570\u5143\u7d20\uff0c\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u6ca1\u6709\u591a\u6570\u5143\u7d20\u7684\u60c5\u51b5\u3002\u6211\u4eec\u518d\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u7edf\u8ba1\u5019\u9009\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5982\u679c\u53d1\u73b0\u5b83\u7684\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e86\u4e00\u534a\u4ee5\u4e0a\uff0c\u5219\u786e\u8ba4\u5b83\u4e3a\u591a\u6570\u5143\u7d20\uff1b\u5426\u5219\uff0c\u8868\u793a\u6ca1\u6709\u591a\u6570\u5143\u7d20\u3002</p> <p>\u8fd9\u79cd\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\\Theta(n)\\)\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u989d\u5916\u7a7a\u95f4\uff0c\u662f\u4e00\u79cd\u975e\u5e38\u9999\u7684\u7b97\u6cd5\u3002</p> <p>\u53d8\u5f0f\uff1a\u5982\u679c\u9700\u8981\u627e\u5230\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\\(\\lfloor\\frac{n}{3}\\rfloor\\)\u7684\u5143\u7d20\u5462\uff1f \u53ef\u4ee5\u8fd9\u6837\u8bbe\u60f3\uff0c\u8fd9\u6b21\u9700\u8981\u6295\u7968\u9009\u4e3e\u51fa\u4e00\u4f4d\u6216\u8005\u4e24\u4f4d\u5019\u9009\u4eba\uff0c\u800c\u6bcf\u4f4d\u5019\u9009\u4eba\u7684\u7968\u6570\u53ea\u8981\u5927\u4e8e\u603b\u4eba\u6570\u7684\u4e09\u5206\u4e4b\u4e00\u5373\u53ef\u3002\u57fa\u4e8e\u6469\u5c14\u6295\u7968\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a</p> <ul> <li> <p>\u6211\u4eec\u6bcf\u6b21\u68c0\u6d4b\u5f53\u524d\u5143\u7d20\u662f\u5426\u4e3a\u7b2c\u4e00\u4e2a\u9009\u4e2d\u7684\u5143\u7d20\u6216\u8005\u7b2c\u4e8c\u4e2a\u9009\u4e2d\u7684\u5143\u7d20\u3002</p> </li> <li> <p>\u6bcf\u6b21\u6211\u4eec\u53d1\u73b0\u5f53\u524d\u5143\u7d20\u4e0e\u5df2\u7ecf\u9009\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u90fd\u4e0d\u76f8\u540c\uff0c\u5219\u5c06\u4e24\u4e2a\u5019\u9009\u5143\u7d20\u90fd\u8fdb\u884c\u62b5\u6d88\u4e00\u6b21\uff0c\u56e0\u4e3a\u5f53\u4e09\u4e2a\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\u65f6\u4f1a\u88ab\u62b5\u6d88\uff0c\u6700\u7ec8\u53ea\u5269\u4e0b1\u4e2a\u5143\u7d20\u3002</p> </li> <li> <p>\u5982\u679c\u5b58\u5728\u6700\u7ec8\u9009\u7968\u5927\u4e8e 0 \u7684\u5143\u7d20\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u518d\u6b21\u7edf\u8ba1\u5df2\u9009\u4e2d\u5143\u7d20\u7684\u6b21\u6570,\u68c0\u67e5\u5143\u7d20\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8e$ \\lfloor\\frac{n}{3}\\rfloor $</p> </li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E8%BF%9B%E9%98%B6%E4%B8%8E%E6%8B%93%E5%B1%95misc.html#advanced-master-theorem","title":"Advanced Master Theorem","text":"<p>Reference: Advanced master theorem for divide and conquer recurrences - GeeksforGeeks</p> <p>\u4e3b\u5b9a\u7406\u80fd\u591f\u5904\u7406\\(T(n) = aT(n/b) + \\Theta(n^d)\\)\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u8fd9\u4e2a\u6742\u9879\u4e0d\u80fd\u652f\u6301\u5bf9\u6570\u7ea7\u5c31\u6709\u70b9\u96be\u53d7\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u4e00\u79cd\u5f3a\u5927\u7684\u4e3b\u5b9a\u7406\u80fd\u591f\u652f\u6301\u5bf9\u6570\u7ea7\u51fd\u6570\u5462\uff1f\u90a3\u4e48\u5e7f\u4e49\u4e3b\u5b9a\u7406\uff08advanced master theorem\uff09\u4e0d\u5bb9\u9519\u8fc7\uff1a</p> <p>\u5bf9\u4e8e\\(T(n) = aT(n/b)+\\Theta(n^klog^pn)\\)\u6765\u8bf4\uff1a</p> <ul> <li> <p>if \\(a &gt; b^k\\), then \\(T(n) = \u03b8(n^{log_ba})\\)</p> </li> <li> <p>if $ a = b^k$, then :</p> </li> </ul> <p>(a) if p &gt; -1, then $T(n) = \u03b8(n^{log_ba} log^{p+1}n) $</p> <p>(b) if p = -1, then $T(n) = \u03b8(n^{log_ba} log(logn) $</p> <p>(c) if p &lt; -1, then $T(n) = \u03b8(n^{log_ba}) $</p> <ul> <li>if \\(a &lt; b^k\\), then    (a) if p &gt;= 0, then $T(n) = \u03b8(n^k log^pn) $   (b) if p &lt; 0, then $T(n) = \u03b8(n^k) $</li> </ul>"},{"location":"Data_Structure_and_Algorithm/%E8%BF%9B%E9%98%B6%E4%B8%8E%E6%8B%93%E5%B1%95misc.html#_2","title":"\u5355\u8c03\u961f\u5217","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\uff0c\u7f16\u7a0b\u8f93\u51fa\u6bcfk\u4e2a\u8fde\u7eed\u7684\u6570\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u66b4\u529b\u7b97\u6cd5\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\uff0c\u90a3\u4e48\u5982\u4f55\u4f18\u5316\uff1f\u7b54\u6848\u5c31\u662f\u5355\u8c03\u961f\u5217+\u6ed1\u52a8\u7a97\u53e3\u3002</p> <p>\u6bcfk\u4e2a\u8fde\u7eed\u7684\u6811\u89c6\u4e3a\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u4e3a\u4e86\u7ef4\u62a4\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5982\u4e0b\u7684\u903b\u8f91\uff1a</p> <ul> <li>\u521b\u5efa\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u961f\u5217\u91cc\u9762\u5355\u8c03\u9012\u51cf\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u961f\u5934\u7684\u5143\u7d20\u5c31\u662f\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c</li> <li>\u5982\u679c\u961f\u5217\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u6ed1\u52a8\u4e00\u6b21\u7a97\u53e3\u4e4b\u540e\uff0c\u65b0\u770b\u5230\u7684\u5143\u7d20\u8fdb\u961f</li> <li> <p>\u5982\u679c\u961f\u5217\u4e0d\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u6ed1\u52a8\u4e00\u6b21\u7a97\u53e3\u4e4b\u540e\uff0c\u5224\u65ad\u65b0\u770b\u5230\u7684\u5143\u7d20\uff1a</p> </li> <li> <p>\u5982\u679c\u6bd4\u961f\u5934\u5143\u7d20\u8fd8\u5927\uff0c\u90a3\u4e48\u961f\u5217\u6e05\u7a7a\uff0c\u65b0\u5143\u7d20\u8fdb\u961f</p> </li> <li>\u5982\u679c\u961f\u5c3e\u5143\u7d20\u6bd4\u65b0\u5143\u7d20\u5927, \u65b0\u5143\u7d20\u8fdb\u961f</li> <li>\u5982\u679c\u65b0\u5143\u7d20\u5728\u961f\u5934\u548c\u961f\u5c3e\u5143\u7d20\u8303\u56f4\u4e4b\u95f4, \u90a3\u4e48\u4e0d\u65adpop_back(), \u76f4\u5230\u961f\u5c3e\u5143\u7d20\u6bd4\u65b0\u5143\u7d20\u5927</li> <li> <p>\u6ed1\u52a8\u7a97\u53e3\u4e4b\u524d, \u8bbf\u95eefront(), \u5b83\u662f\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c.</p> </li> <li> <p>\u79fb\u52a8\u7a97\u53e3\u4e4b\u540e, \u8981\u5224\u65ad\u961f\u5934\u5143\u7d20\u662f\u5426\u51fa\u4e86\u89c6\u91ce; \u5982\u679c\u79bb\u5f00\u89c6\u91ce\uff0c\u90a3\u4e48\u961f\u5934\u5143\u7d20\u51fa\u961f</p> </li> </ul> <p>\u8fd9\u4e2a\u903b\u8f91\u7684\u6838\u5fc3\u662f\u4ec0\u4e48? \u662f\u50a8\u5b58\u53ef\u80fd\u662f\u4e4b\u540e\u7a97\u53e3\u4e2d\u6700\u5927\u503c\u7684\u5143\u7d20! \u5982\u679c\u65b0\u5143\u7d20\u975e\u5e38\u5927, \u90a3\u4e48\u961f\u5217\u91cc\u9762\u50a8\u5b58\u7684\u5143\u7d20\u4e0d\u53ef\u80fd\u662f\u540e\u9762\u7a97\u53e3\u4e2d\u770b\u5230\u7684\u6700\u5927\u7684\u5143\u7d20\u4e86\uff1b\u800c\u867d\u7136\u5982\u679c\u65b0\u5143\u7d20\u5f88\u5c0f\uff0c\u5b83\u4f9d\u7136\u6709\u53ef\u80fd\u662f\u540e\u9762\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u5143\u7d20\u53ef\u80fd\u4f1a\u79bb\u5f00\u89c6\u91ce\u3002</p> <p>\u5b9e\u4f8b\u4ee3\u7801\uff1a</p> <p>Reference: oi.wiki</p> <pre><code>#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nconstexpr int MAXN = 1000100;\nusing namespace std;\nint q[MAXN], a[MAXN];\nint n, k;\n\nvoid getmin() {  // \u5f97\u5230\u8fd9\u4e2a\u961f\u5217\u91cc\u7684\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u627e\u5230\u6700\u540e\u7684\u5c31\u884c\u4e86\n  int head = 0, tail = -1;\n  for (int i = 1; i &lt; k; i++) {\n    while (head &lt;= tail &amp;&amp; a[q[tail]] &gt;= a[i]) tail--;\n    q[++tail] = i;\n  }\n  for (int i = k; i &lt;= n; i++) {\n    while (head &lt;= tail &amp;&amp; a[q[tail]] &gt;= a[i]) tail--;\n    q[++tail] = i;\n    while (q[head] &lt;= i - k) head++;\n    cout &lt;&lt; a[q[head]] &lt;&lt; ' ';\n  }\n}\n\nvoid getmax() {  // \u548c\u4e0a\u9762\u540c\u7406\n  int head = 0, tail = -1;\n  for (int i = 1; i &lt; k; i++) {\n    while (head &lt;= tail &amp;&amp; a[q[tail]] &lt;= a[i]) tail--;\n    q[++tail] = i;\n  }\n  for (int i = k; i &lt;= n; i++) {\n    while (head &lt;= tail &amp;&amp; a[q[tail]] &lt;= a[i]) tail--;\n    q[++tail] = i;\n    while (q[head] &lt;= i - k) head++;\n    cout &lt;&lt; a[q[head]] &lt;&lt; ' ';\n  }\n}\n</code></pre>"},{"location":"Data_Structure_and_Algorithm/%E8%BF%9B%E9%98%B6%E4%B8%8E%E6%8B%93%E5%B1%95misc.html#_3","title":"\u5355\u8c03\u6808","text":"<p>\u4f55\u4e3a\u5355\u8c03\u6808\uff1f\u987e\u540d\u601d\u4e49\uff0c\u5355\u8c03\u6808\u5373\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u6808\u7ed3\u6784\u3002\u4e0e\u5355\u8c03\u961f\u5217\u76f8\u6bd4\uff0c\u5176\u53ea\u5728\u4e00\u7aef\u8fdb\u884c\u8fdb\u51fa\u3002\u5c06\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5355\u8c03\u6808\u65f6\uff0c\u4e3a\u4e86\u7ef4\u62a4\u6808\u7684\u5355\u8c03\u6027\uff0c\u9700\u8981\u5728\u4fdd\u8bc1\u5c06\u8be5\u5143\u7d20\u63d2\u5165\u5230\u6808\u9876\u540e\u6574\u4e2a\u6808\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u524d\u63d0\u4e0b\u5f39\u51fa\u6700\u5c11\u7684\u5143\u7d20\u3002</p> <p>\u4f7f\u7528\u5355\u8c03\u6808\u7684\u65f6\u5019\uff0c\u4ece\u6808\u9876\u8bfb\u51fa\u6765\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u4e00\u7aef\u3002</p> <p>\u5355\u8c03\u6808\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u901a\u5e38\u7528\u4e8e\u5728\u4fdd\u6301\u6808\u5185\u5143\u7d20\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u4e00\u4e9b\u590d\u6742\u95ee\u9898\u7684\u9ad8\u6548\u89e3\u7b54\u3002\u5b83\u7684\u4e3b\u8981\u5e94\u7528\u573a\u666f\u5305\u62ec\u89e3\u51b3\u5177\u6709\u5355\u8c03\u6027\u8d28\u7684\u533a\u95f4\u3001\u8303\u56f4\u95ee\u9898\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\uff1a</p> <p>Reference: ChatGPT</p> <ol> <li>\u4e0b\u4e00\u4e2a/\u524d\u4e00\u4e2a\u66f4\u5927\u6216\u66f4\u5c0f\u5143\u7d20\u95ee\u9898\uff1a</li> <li>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u627e\u5230\u6bcf\u4e2a\u5143\u7d20\u7684\u201c\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u201d\u6216\u201c\u524d\u4e00\u4e2a\u66f4\u5c0f\u5143\u7d20\u201d\u3002\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u6808\u6765\u7ef4\u6301\u6808\u4e2d\u5143\u7d20\u7684\u9012\u589e\u6216\u9012\u51cf\u987a\u5e8f\uff0c\u9010\u4e2a\u904d\u5386\u6570\u7ec4\u5143\u7d20\u5e76\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u3002</li> <li>\u4f8b\u5982\uff0cLeetCode \u7684\u201c\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u201d\u95ee\u9898\uff08Next Greater Element\uff09\u5c31\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n)\\)\u3002</li> <li>\u67f1\u72b6\u56fe\u4e2d\u7684\u6700\u5927\u77e9\u5f62\u95ee\u9898\uff1a</li> <li>\u7ed9\u5b9a\u4e00\u4e2a\u67f1\u72b6\u56fe\uff0c\u8981\u6c42\u8ba1\u7b97\u5176\u4e2d\u53ef\u4ee5\u5f62\u6210\u7684\u6700\u5927\u77e9\u5f62\u9762\u79ef\u3002\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u9012\u589e\u6808\u6765\u5e2e\u52a9\u627e\u5230\u6bcf\u4e2a\u67f1\u5b50\u7684\u5de6\u53f3\u8fb9\u754c\uff0c\u4ece\u800c\u8ba1\u7b97\u51fa\u8be5\u67f1\u5b50\u4e3a\u9ad8\u5ea6\u7684\u77e9\u5f62\u9762\u79ef\u3002</li> <li>\u8fd9\u662f\u8457\u540d\u7684\u201c\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62\u201d\u95ee\u9898\uff08Largest Rectangle in Histogram\uff09\u3002</li> <li>\u63a5\u96e8\u6c34\u95ee\u9898\uff1a</li> <li>\u5728\u7ed9\u5b9a\u7684\u6570\u7ec4\u4e2d\uff0c\u6c42\u53ef\u4ee5\u63a5\u4f4f\u7684\u96e8\u6c34\u91cf\u3002\u4f7f\u7528\u5355\u8c03\u6808\u6765\u5b58\u50a8\u5de6\u4fa7\u6bd4\u5f53\u524d\u5143\u7d20\u4f4e\u7684\u67f1\u5b50\u4f4d\u7f6e\uff0c\u901a\u8fc7\u5339\u914d\u53f3\u4fa7\u66f4\u9ad8\u7684\u67f1\u5b50\u6765\u8ba1\u7b97\u4e2d\u95f4\u79ef\u6c34\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u3002</li> <li>\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5728 \\(O(n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u95ee\u9898\uff0c\u8282\u7701\u7a7a\u95f4\u3002</li> <li>\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u503c\u95ee\u9898\uff1a</li> <li>\u5728\u56fa\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3\u4e2d\uff0c\u6c42\u6bcf\u6b21\u6ed1\u52a8\u540e\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c\u3002\u5355\u8c03\u6808\u53ef\u4ee5\u5728\u7ef4\u62a4\u7a97\u53e3\u5185\u5355\u8c03\u6027\u7684\u540c\u65f6\uff0c\u4f7f\u5f97\u6bcf\u6b21\u79fb\u52a8\u7a97\u53e3\u540e\u5feb\u901f\u83b7\u53d6\u7a97\u53e3\u4e2d\u7684\u6700\u503c\u3002</li> </ol> <p>\u8fd9\u4e9b\u573a\u666f\u4e2d\uff0c\u5355\u8c03\u6808\u901a\u8fc7\u538b\u5165\u548c\u5f39\u51fa\u5143\u7d20\u5b9e\u73b0\u9ad8\u6548\u7684\u5355\u8c03\u6027\u7ef4\u62a4\uff0c\u5728\u5bfb\u627e\u8303\u56f4\u8fb9\u754c\u3001\u8ba1\u7b97\u8de8\u5ea6\u548c\u79ef\u6c34\u7b49\u95ee\u9898\u4e0a\u8d77\u5230\u4e86\u5173\u952e\u4f5c\u7528\u3002</p>"},{"location":"GAMES101/note.html","title":"GAMES101 Note","text":""},{"location":"GAMES101/note.html#overview-of-computer-graphics","title":"Overview of Computer Graphics","text":"<p>Computer Graphic\uff0c\u7b80\u79f0CG\uff0c\u5b83\u7684\u5b9a\u4e49\u662f\uff1aThe use of computers to synthesize and manipulate visual information\u3002\u201c\u5408\u6210\u4e0e\u64cd\u7eb5\u201d\u3002</p> <p>\u73b0\u5728\u5f88\u591a\u6e38\u620f\u90fd\u5229\u7528CG\u6280\u672f\uff0c\u90a3\u4e48\u5982\u4f55\u8bc4\u4ef7\u753b\u9762\u7684\u597d\u574f\u5462\uff1f\u4e00\u79cd\u7b80\u5355\u7684\u65ad\u8a00\uff1a\u770b\u753b\u9762\u591f\u4e0d\u591f\u4eae\u3002\u56e0\u4e3a\u8fd9\u6d89\u53ca\u5230CG\u7684\u5168\u5c40\u5149\u7167\u6982\u5ff5\uff0c\u56e0\u6b64\u5c06\u5149\u7167\u662f\u5426\u5145\u8db3\u4f5c\u4e3a\u8bc4\u4ef7\u6807\u51c6\u662f\u53ef\u4ee5\u7684\u3002</p> <p>\u4ee5\u53ca\uff0c\u4e0d\u540c\u7684\u6e38\u620f\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u753b\u8d28\uff0c\u4f8b\u5982\u6709\u7684\u662f\u5361\u901a\u753b\u8d28\uff0c\u6709\u7684\u662f\u66f4\u8d34\u5207\u663e\u793a\u7684\u753b\u8d28\uff0c\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u4e0d\u540c\u7684\u753b\u8d28\u5462\uff1f\u8fd9\u4e9b\u4e5f\u90fd\u9700\u8981\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6765\u89e3\u51b3\u3002\u9664\u5f00\u6e38\u620f\uff0c\u7535\u5f71\u91cc\u9762\u4e5f\u5e7f\u6cdb\u5e94\u7528CG\uff0c\u5982\u7279\u6548\uff08special effect)\uff0c\u4eba\u7269\u9762\u90e8\u6355\u6349\uff08\u963f\u51e1\u8fbe\uff09\u7b49\u3002\u9664\u4e86\u7535\u5f71\u6e38\u620f\uff0c\u5f88\u591a\u5176\u4ed6\u9886\u57df\u4e5f\u5e94\u7528CG\uff0c\u4f8b\u5982Computer-Aided Design\uff08\u5982\u6570\u5b57\u5b6a\u751f photo-&gt;CG\uff09\uff0c\u52a8\u753b\uff08animation\uff09\uff0c\u53ef\u89c6\u5316\uff08Visualization for Science, engineering, medicine, and journalism, etc)\uff0c\u865a\u62df\u73b0\u5b9e\uff08Virtual Reality\uff09\u7b49\u3002</p> <p>\u56fe\u5f62\u5b66\u5177\u4f53\u5305\u542b\u4e86\u54ea\u4e9b\u5185\u5bb9\u5462\uff1f</p> <ul> <li>Math of (perspective) projections, curves, surfaces</li> <li>Physics of lighting and shading</li> <li>Representing / operating shapes in 3D </li> <li>Animation / simulation</li> </ul> <p>\u8bfe\u7a0b\u4e3b\u8981\u5305\u62ec\u56db\u4e2a\u65b9\u9762\u5185\u5bb9\uff1a</p> <ul> <li>Rasterization \uff08\u5149\u6805\u5316\uff09</li> <li>Curves and Meshes \uff08\u66f2\u7ebf\u548c\u66f2\u9762\uff09</li> <li>Ray Tracing \uff08\u5149\u7ebf\u8ffd\u8e2a\uff09</li> <li>Animation / Simulation \uff08\u52a8\u753b\u4e0e\u6a21\u62df\uff09</li> </ul> <p>\u4ec0\u4e48\u662f\u5149\u6805\u5316\uff1f\u628a\u7a7a\u95f4\u4e2d\u7684\u4e09\u7ef4\u5f62\u4f53\u6295\u5c04\u5230\u5c4f\u5e55\u4e0a\uff0c\u5c31\u662f\u5149\u6805\u5316\uff1aProject geometry primitives (3D triangles / polygons) onto the screen\u3002\u8fd9\u662f\u5b9e\u65f6\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u5e94\u7528\u3002CG\u4e2d\u5b9a\u4e49\u5230\uff1a\u4e00\u79d2\u949f\u80fd\u751f\u621030\u5f20\u753b\u9762\uff0830 frames per second\uff09\u5c31\u8ba4\u4e3a\u662f\u5b9e\u65f6\uff0c\u5426\u5219\u5c31\u662f\u79bb\u7ebf\uff08off-line\uff09\u3002</p> <p>\u800c\u5728\u66f2\u7ebf\u548c\u66f2\u9762\u4e2d\uff0c\u5c06\u4e86\u89e3\u5982\u4f55\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u8868\u793a\u51e0\u4f55\uff1aHow to present geometry in Computer Graphics\u3002\u4f8b\u5982\u7a7a\u95f4\u4e2d\u5982\u4f55\u8868\u793a\u8f83\u4e3a\u5149\u6ed1\u7684\u66f2\u9762\uff1f\u5982\u4f55\u7528\u7b80\u5355\u7684\u9762\u7247\u53bb\u7ec6\u7c92\u5ea6\u5730\u62df\u5408\u8f83\u4e3a\u5149\u6ed1\u7684\u66f2\u9762\uff1f\u5f53\u7269\u4f53\u6539\u53d8\u65f6\uff0c\u66f2\u9762\u5e94\u8be5\u5982\u4f55\u6539\u53d8\uff1f\u7269\u4f53\u6539\u53d8\u65f6\uff0c\u5982\u4f55\u4fdd\u6301\u539f\u6709\u7684\u62d3\u6251\u7ed3\u6784\uff1f</p> <p>\u5149\u7ebf\u8ffd\u8e2a\u88ab\u7535\u5f71\u5e7f\u6cdb\u4f7f\u7528\uff0c\u7528\u6765\u751f\u6210\u66f4\u9ad8\u8d28\u91cf\u7684\u753b\u9762\u3002CG\u4e2d\u4e5f\u6709\u4e00\u79cdtrade-off: \u751f\u6210\u901f\u5ea6\u5feb or \u751f\u6210\u8d28\u91cf\u9ad8\uff1f\u90a3\u4e48\u5149\u7ebf\u8ffd\u8e2a\u5c31\u662f\u9009\u62e9\u4e86\u8d28\u91cf\u9ad8\uff0c\u4f46\u662f\u751f\u6210\u65f6\u95f4\u5f88\u957f\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u4e24\u5168\u5176\u7f8e\u7684\u65b9\u6cd5\u5462\uff1f\u6700\u8fd1\u6709\u201c\u5b9e\u65f6\u5149\u7ebf\u8ffd\u8e2a\u201d\u6280\u672f\u3002</p> <p>\u52a8\u753b\u4e0e\u6a21\u62df\u52aa\u529b\u5c06\u753b\u9762\u4e2d\u7269\u4f53\u7684\u79fb\u52a8\u3001\u53d8\u5316\u7b49\u5c3d\u53ef\u80fd\u5730\u8d34\u5207\u73b0\u5b9e\u751f\u6d3b\u3002\u4f8b\u5982rubber ball\u7684\u5f39\u8df3\uff0c\u60ac\u6302\u6bdb\u5dfe\u7684\u4e0b\u5782\u7b49\u7b49\u3002</p> <p>GAMES101\u4e0d\u63d0\u5230\u7684\uff1a</p> <ul> <li>Using OpenGL / DirectX / Vulkan</li> <li>The syntax of Shaders</li> <li>We learn CG,  not Graphics APIs</li> <li>3D modeling using Maya / 3DS MAX / Blender, or Unity / Unreal Engine</li> <li>CV</li> </ul> <p>\u90a3\u4e48\u5982\u4f55\u7406\u89e3CV\u548cCG\u7684\u533a\u522b\uff1f</p> <p></p> <p>\u5f53\u7136\uff0c\u73b0\u5728\u4e24\u8005\u7684\u8fb9\u754c\u539f\u6765\u8d8a\u6a21\u7cca\u3002\u81ea\u4eceNeRF(Neural Radiance Field\uff0c\u795e\u7ecf\u8f90\u5c04\u573a)\u7684\u8bde\u751f\uff0cModel and Image\u7684\u4ea4\u878d\u7814\u7a76\u8d8a\u6765\u8d8a\u591a\u3002</p> <p>\u8bfe\u7a0b\u4f7f\u7528\u8bed\u8a00\uff1a C++</p>"},{"location":"GAMES101/note.html#review-of-linear-algebra","title":"Review of Linear Algebra","text":"<p>CG\u5176\u5b9e\u4ea4\u53c9\u4e86\u5f88\u591a\u7684\u5b66\u79d1\uff1a\u6570\u5b66\u4e2d\u6d89\u53ca\u5230\u7ebf\u6027\u4ee3\u6570\uff0c\u5fae\u79ef\u5206\u548c\u6982\u7387\u7edf\u8ba1\uff1b\u7269\u7406\u5b66\u4e2d\u6d89\u53ca\u5230\u5149\u5b66\u548c\u8fd0\u52a8\u5b66\uff1b\u4ee5\u53ca\u5176\u5b83\u4e00\u4e9b\u9886\u57df\uff0c\u5982\u4fe1\u53f7\u5904\u7406\uff0c\u6570\u503c\u5206\u6790\uff0c\u7f8e\u5b66\u7b49\u3002\u52a0\u4e0b\u6765\u5c06\u4f1a\u5149\u901f\u56de\u987e\u4e00\u4e9b\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u57fa\u7840\uff1a</p> <p>\u5411\u91cfvector\u662f\u57fa\u672c\uff08\\(\\vec{a}\\)\uff09\uff0c\u5b83\u7684\u8303\u6570\uff08magnitude\uff09\u662f\\(\\lvert\\lvert\\vec{a}\\rvert\\rvert\\)\uff0c\u800c\u5355\u4f4d\u5411\u91cf\u7684\u8303\u6570\u81ea\u7136\u662f1\u3002\u5982\u679c\u5e0c\u671b\u5bf9\u4e8e\u5411\u91cf\\(\\vec{a}\\)\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u5355\u4f4d\u5411\u91cf\uff0c\u76f4\u63a5\\(\\hat{a} = \\vec{a} / \\lvert\\lvert\\vec{a}\\rvert\\rvert\\)\u5373\u53ef\u3002\u4e00\u822c\u5355\u4f4d\u5411\u91cf\u7528\u6765\u8868\u793a\u65b9\u5411\u3002\u5411\u91cf\u76f8\u52a0\u6ee1\u8db3\u4e09\u89d2\u5f62\u6cd5\u5219\u3002</p> <p>\u9664\u4e86\u52a0\u51cf\uff0c\u8fd8\u6709\u70b9\u4e58\uff08dot / scalar product\uff09\uff0c\u5f97\u5230\u7684\u5c31\u662f\u5185\u79ef\u3002\u70b9\u4e58\u53ef\u4ee5\u7528\u6765\u5feb\u901f\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u5939\u89d2\\(cos\\theta\\)\uff0c\u5c24\u5176\u662f\u5f53\u4e24\u4e2a\u5411\u91cf\u90fd\u662f\u65b9\u5411\u5411\u91cf\u7684\u65f6\u5019\u3002\u540c\u65f6\uff0c\u70b9\u4e58\u8fd8\u80fd\u5e2e\u52a9\u627e\u5230\u4e00\u4e2a\u5411\u91cf\u6295\u5c04\u5230\u53e6\u4e00\u4e2a\u5411\u91cf\u4e0a\u7684\u7ed3\u679c\u3002\u6700\u540e\uff0c\u70b9\u4e58\u7ed3\u679c\u80fd\u5e2e\u52a9\u5224\u65ad\u5411\u91cf\u4e4b\u95f4\u5939\u89d2\u4e0e\u76f4\u89d2\u7684\u5173\u7cfb\u3002</p> <p>\u70b9\u4e58\u7684\u57fa\u672c\u6027\u8d28\uff1a\u4ea4\u6362\u5f8b\uff0c\u7ed3\u5408\u5f8b\uff0c\u7b49\u7b49\u3002\u5728\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u4e0b\uff0c\u70b9\u4e58\u7684\u8ba1\u7b97\u4f1a\u975e\u5e38\u65b9\u4fbf\uff1a  \u70b9\u4e58\u4e4b\u5916\uff0c\u8fd8\u6709\u53c9\u4e58\u3002\u4e24\u4e2a\u5411\u91cf\u53c9\u4e58\uff08cross product\uff09\u5f97\u5230\u7684\u7ed3\u679c\u662f\u53e6\u4e00\u4e2a\u5411\u91cf\uff0c\u8fd9\u4e2a\u5411\u91cf\u4e0e\u4e24\u4e2a\u5411\u91cf\u90fd\u5782\u76f4\uff083D\u4e2d\uff09\uff0c\u65b9\u5411\u7531\u53f3\u624b\u5b9a\u5219\u51b3\u5b9a\u3002\u53c9\u4e58\u6ca1\u6709\u4ea4\u6362\u5f8b\u3002\u53c9\u4e58\u5728\u5efa\u7acb\u4e09\u7ef4\u7a7a\u95f4\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u975e\u5e38\u6709\u7528\u3002\u6709\u65f6\u5019\u8fd8\u80fd\u5e2e\u52a9\u5224\u65ad\u4e24\u4e2a\u5411\u91cf\u8c01\u5728\u8c01\u7684\u5de6\u8fb9/\u53f3\u8fb9\u3002  The Cartesian Formula of Cross Pruduct in 3D Euclidean Space:  \u90a3\u4e48\u6709\u53e6\u4e00\u79cd\u8868\u73b0\u5f62\u5f0f\uff08A\u4e3aa\u5411\u91cf\u7684dual matrix\uff09  \u53c9\u4e58\u5728CG\u7684Rasterization\u5149\u6805\u5316\u4e2d\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5e94\u7528\uff0c\u5c31\u662f\u5224\u65ad\u4e00\u4e2a\u70b9\u5728\u4e0d\u5728\u4e00\u4e2apolygon\u91cc\u9762\uff0c\u5982\u5224\u65ad\u662f\u4e0d\u662f\u5728\u4e09\u89d2\u5f62\u4e2d\u3002\u5728\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u53ea\u9700\u8981\u5224\u65ad<code>AP * AB  BP * BC  CP * CA</code>\uff0c\u8fd9\u4e09\u4e2a\u53c9\u4e58\u7684\u7ed3\u679c\uff0c\u5c31\u80fd\u77e5\u9053P\u70b9\u5728\u4e0d\u5728\u4e09\u89d2\u5f62\u91cc\u9762\uff0c\u56e0\u4e3a\u53c9\u4e58\u80fd\u5e2e\u5fd9\u5224\u65adP\u5728AB BC CA\u4e09\u4e2a\u5411\u91cf\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u5224\u65ad\u65b9\u5f0f\u548c\u4e09\u89d2\u5f62\u4e09\u6761\u8fb9\u9876\u70b9\u7684\u7ed5\u5411\u65e0\u5173(AB BC CA or BA AC CB)\uff0c\u56e0\u4e3a\u6700\u7ec8\u5224\u65ad\u7684\u662fP\u70b9\u5728\u4e0d\u5728\u4e09\u6761\u5411\u91cf\u7684\u540c\u4fa7\uff08\u5f53\u7136\uff0c\u4e09\u6761\u5411\u91cf\u9996\u5c3e\u76f8\u63a5\u662f\u9700\u8981\u4fdd\u8bc1\u7684\uff09\u3002\u5f53\u7136\uff0c\u5982\u679c\u70b9\u843d\u5728\u4e86\u8fb9\u4e0a\uff0c\u90a3\u4e48\u5c31\u5c5e\u4e8ecorner case, \u53ef\u4ee5\u81ea\u5df1\u51b3\u5b9a\u662f\u5426\u5728\u4e09\u89d2\u5f62\u91cc\u9762\u3002</p> <p></p> <p>\u77e9\u9635\u4e4b\u95f4\u7684\u4e58\u6cd5\u7565\u3002\u77e9\u9635\u7684\u8f6c\u7f6e\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\\((AB)^T=B^TA^T\\)\u3002\u90a3\u4e48\u70b9\u4e58\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\\(\\vec{a}\\cdot\\vec{b} = \\vec{a}^T\\vec{b}\\)</p>"},{"location":"GAMES101/note.html#eigen-and-opencv","title":"Eigen and OpenCV\u5e93","text":"<p>Eigen\u662f\u4e00\u4e2a\u9ad8\u5c42\u6b21\u7684C ++\u5e93\uff0c\u6709\u6548\u652f\u6301\u7ebf\u6027\u4ee3\u6570\uff0c\u77e9\u9635\u548c\u77e2\u91cf\u8fd0\u7b97\uff0c\u6570\u503c\u5206\u6790\u53ca\u5176\u76f8\u5173\u7684\u7b97\u6cd5\u3002</p> <p>\u5173\u4e8eEigen\u5e93\u7684\u5b89\u88c5\uff0c\u4e4b\u524d\u4e00\u76f4\u5c1d\u8bd5\u7528cMake\u65b9\u5f0f\u628a\u5e93\u7f16\u8fdbMinGW\u91cc\u9762\uff0c\u4f46\u662f\u603b\u662f\u5931\u8d25\u3002\u4e8e\u662f\u6700\u540e\u9605\u8bfb\u4e86\u5b98\u65b9\u7f51\u7ad9\uff0c\u53d1\u73b0\u4e86\u5982\u4e0b\u7684\u5185\u5bb9\uff1a In order to use Eigen, you just need to download and extract Eigen's source code (see the wiki for download instructions). In fact, the header files in the <code>Eigen</code> subdirectory are the only files required to compile programs using Eigen. The header files are the same for all platforms. It is not necessary to use CMake or install anything.</p> <p>There is no library to link to. The only thing that you need to keep in mind when compiling the above program is that the compiler must be able to find the Eigen header files. The directory in which you placed Eigen's source code must be in the include path. With GCC you use the <code>-I</code> option to achieve this:</p> <p><code>g++ -I /path/to/eigen/ my_program.cpp -o my_program</code></p> <p>\u4e8e\u662f\u547d\u4ee4\u884c\u8fd0\u884ccpp\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u7ec8\u7aef\u8fd0\u884c\u4e0a\u9762\u6307\u4ee4\uff0c\u7136\u540e\u7ec8\u7aef\u547d\u4ee4\u884c\u8fd0\u884cexe\u6587\u4ef6\uff1a<code>./my_program.exe</code></p> <p>OpenCV\u540c\u7406\uff1a\u5f53\u7136\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5e93\u7f16\u8fdb\u73af\u5883\u91cc\u9762\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>-I /path/to/opencv2/</code>\u6765\u5b9e\u73b0\u3002</p>"},{"location":"GAMES101/note.html#transformation","title":"Transformation","text":"<p>2D transformation\uff1a\u51e0\u79cd\u5e38\u89c1\u76842D\u56fe\u5f62\u7684\u53d8\u6362\uff1a  </p> \\[ \\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} -1 &amp; 0 \\\\  0 &amp; 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix} \\tag{Reflection} \\] \\[ \\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} 1 &amp; a \\\\  0 &amp; 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix} \\tag{Shear} \\] \\[ R_\\theta =  \\begin{bmatrix} cos\\theta &amp; -sin\\theta \\\\ sin\\theta &amp; con\\theta \\end{bmatrix} \\tag{rotation*} \\] \\[ \\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} a &amp; b \\\\  c &amp; d \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix} \\tag{Linear Transform} \\] \\[ \\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} 1 &amp; a \\\\  0 &amp; 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix} \\tag{Shear} \\] <p>rotation\u57282D\u4e2d\u90fd\u662f\u9ed8\u8ba4\u7ed5\u8fdc\u70b9\u9006\u65f6\u9488\u65cb\u8f6c\u7684\u3002\u800c\u4e14\u65cb\u8f6c\u77e9\u9635\u6709\u7740\u7279\u6b8a\u6027\u8d28(\u5982\u4e0b)\uff0c\u9006\u4e0e\u8f6c\u7f6e\u76f8\u540c\u7684\u77e9\u9635\u5c31\u6210\u4e3a\u6b63\u4ea4\u77e9\u9635\u3002  </p> <p>\u90a3\u4e48\u6ce8\u610f\u5230\uff0c\u4e0a\u9762\u8fd9\u4e9b\u60c5\u51b5\u6ca1\u6709\u6d89\u53ca\u5230\u5e73\u79fb\uff0c\u56e0\u4e3a\u5176\u5b83\u7684\u53d8\u6362\u90fd\u662f\u7ebf\u6027\u53d8\u6362\uff0c\u4f46\u662f\u552f\u72ec\u5e73\u79fb\u4e0d\u662f\u3002\u56e0\u6b64\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u91c7\u7528\u4e86Homogenous Coordinates Solution\u3002</p> \\[ \\begin{bmatrix} x' \\\\ y' \\\\ z' \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\cdot \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} x+t_x \\\\ y+y_t \\\\ 1 \\end{bmatrix} \\tag{Tran} \\] <p>Homogeneous Coordinates(\u9f50\u6b21\u5750\u6807)\u4e2d\uff0c\u5c062D point\u8868\u793a\u4e3a\\((x,y,1)^T\\)\uff0c\u800c\u5c062D vector\u8868\u793a\u4e3a\\((x,y,0)^T\\)\uff0c\u8fd9\u5f88\u5999\u7684\u662f\u6ee1\u8db3\u4e86\uff1a</p> <p>\u5411\u91cf\u76f8\u52a0\u4ecd\u4e3a\u5411\u91cf\uff08\u7b2c\u4e09\u7ef4\u5ea6\u662f0\uff09\uff0c\u70b9\u5750\u6807\u76f8\u51cf\u4e3a\u5411\u91cf\uff08\u7b2c\u4e09\u7ef4\u5ea6\u4e0a1-1 = 0\uff09\uff0c\u70b9\u52a0\u4e0a\u5411\u91cf\u4ecd\u4e3a\u70b9\uff08\u7b2c\u4e09\u7ef4\u5ea6\u662f1+0 = 1\uff09\u3002\u8fd9\u4e5f\u89e3\u7b54\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u70b9\u5750\u6807\u76f8\u52a0\u662f\u4ec0\u4e48\u5462\uff1f \u9996\u5148\u6211\u4eec\u9700\u8981\u6269\u5145\u4e00\u4e0b\u5b9a\u4e49\uff1a  \u4e4b\u540e\uff0c\u5c31\u80fd\u8f7b\u677e\u77e5\u9053\u70b9\u76f8\u52a0\u4ee3\u8868\u4ec0\u4e48\u4e86\uff1a\u4e24\u70b9\u7684\u4e2d\u70b9\u3002</p> <p>\u4ee5\u4e0a\u5c31\u662f\u4eff\u5c04\u53d8\u6362\uff08affine transformation\uff09\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a  \\(Affine\\ map = linear\\ map + translation\\)\uff0c\u5b9e\u8d28\u662f\u5148\u7ebf\u6027\u53d8\u6362\uff0c\u518d\u8fdb\u884c\u5e73\u79fb</p> <p>\u90a3\u4e482D transformation\u91cd\u65b0\u7528\u77e9\u9635\u8868\u793a\uff1a  \u5728\u591a\u6b65\u9aa4\u53d8\u6362\u4e2d\uff0c\u4ea4\u6362\u5f8b\u662f\u4e0d\u6ee1\u8db3\u7684\uff01\u4f8b\u5982\uff1a\u5148\u65cb\u8f6c\u540e\u5e73\u79fb\u548c\u5148\u5e73\u79fb\u540e\u65cb\u8f6c\u7684\u7ed3\u679c\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4e00\u7cfb\u5217\u7684\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u6700\u540e\u4e0d\u65ad\u4f5c\u7528\u5728\\((x,y,1)^T\\)\u4e0a\u9762\uff0c\u90a3\u4e48\u6700\u540e\u5c31\u80fd\u770b\u6210\u662f\u4e00\u4e2a\u77e9\u9635\u4f5c\u7528\u5728\u8fd9\u4e2a\u70b9\u4e0a\u9762\u3002</p> <p>\u540c\u65f6\u6709\u4e86Homogenous Coordinates\u7684\u5e2e\u52a9\uff0c\u6211\u4eec\u80fd\u591f\u8f7b\u677e\u7684\u5206\u89e3\u590d\u6742\u7684\u53d8\u6362\u3002\u4f8b\u59822D\u70b9\u7ed5\u7740\u67d0\u4e00\u7279\u5b9a\u70b9\u8fdb\u884c\u65cb\u8f6c\uff0c\u5c31\u53ef\u4ee5\u628a\u4e24\u4e2a\u70b9\u540c\u65f6\u8fdb\u884c\u5e73\u79fb\uff0c\u4f7f\u5f97\u88ab\u7ed5\u7684\u70b9\u79fb\u52a8\u5230\u8fdc\u70b9\uff0c\u7136\u540e\u4e58\u4e0a\u65cb\u8f6c\u77e9\u9635\uff0c\u6700\u540e\u5e73\u79fb\u56de\u53bb\uff1a  3D Transformation\u5982\u6cd5\u70ae\u5236\u30023D point \\((x,y,z,1)^T\\)\uff0c3D vector \\((x,y,z,0)^T\\)\uff0c\u5e76\u4e14\u6269\u5145\u5b9a\u4e49\u6709\uff1a   </p>"},{"location":"GAMES101/note.html#transformation-cont","title":"Transformation Cont.","text":"<p>Transformation\u5206\u4e3a\uff1aView(\u89c6\u56fe)\u548cProjection(\u6295\u5f71)\u3002\u5176\u4e2d\uff0cProjection transformation\u53c8\u5206\u4e3aOrthographic(\u6b63\u4ea4\u6295\u5f71)\u548cPerspective(\u900f\u89c6\u6295\u5f71) projection\u3002</p>"},{"location":"GAMES101/note.html#3d-transformation","title":"3D Transformation","text":"<p>3D Transformation\u7684\u77e9\u9635\u8868\u8fbe\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p>\u501f\u52a9\u4e09\u4e2a\u65cb\u8f6c\u77e9\u9635\uff0c\u6211\u4eec\u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u79cd3D-Rotation\uff1a  \u90a3\u4e48\u5982\u4f55\u8868\u793a\u7ed5\u7740\u65cb\u8f6c\u8f74\u5411\u91cfn\uff08\u9ed8\u8ba4\u5411\u91cf\u662f\u4ece\u8fdc\u70b9\u51fa\u53d1\u7684\uff09\u65cb\u8f6c\u03b1\u89d2\u7684\u65cb\u8f6c\u77e9\u9635\u5462\uff1f \u8fd9\u5c31\u662f\u7f57\u5fb7\u91cc\u683c\u65af\u516c\u5f0f\uff08Rodrigues' Rotation Formula\uff09  \u5176\u4e2d\u7684\u77e9\u9635\u975e\u5e38\u773c\u719f\uff0c\u662fn\u5411\u91cf\u7684dual matrix. \u53e6\u5916\uff0c\u65cb\u8f6c\u77e9\u9635\u4e0d\u662f\u56db\u5143\u6570\uff0c\u56db\u5143\u6570\u662f\u4e3a\u4e86\u89e3\u51b3\u65cb\u8f6c\u77e9\u9635\u63d2\u503c\u95ee\u9898\u800c\u63d0\u51fa\u7684\u30022D\u4e2d\u4e00\u4e2a\u65cb\u8f6c15\u5ea6\u7684\u65cb\u8f6c\u77e9\u9635\u548c\u4e00\u4e2a\u65cb\u8f6c25\u5ea6\u7684\u76f8\u52a0\u5e76\u96642\uff0c\u5f97\u5230\u7684\u77e9\u9635\u5e76\u4e0d\u662f\u65cb\u8f6c20\u5ea6\u7684\u3002\u56db\u5143\u6570\u5c31\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002</p>"},{"location":"GAMES101/note.html#view-camera-transformation","title":"View / Camera Transformation","text":"<p>\u73b0\u5b9e\u4e2d\u6211\u4eec\u662f\u5982\u4f55\u62cd\u7167\u7684\u5462\uff1f\u9996\u5148\u4e1c\u897f\u90fd\u6446\u597d\uff0c\u7136\u540e\u62ff\u51fa\u76f8\u673a\uff0c\u627e\u5230\u597d\u7684\u89d2\u5ea6\uff0c\u6700\u540e\u6441\u4e0b\u5feb\u95e8\u3002\u90a3\u4e48\u201c\u627e\u5230\u597d\u7684\u89d2\u5ea6\u201d\u5c31\u662f\u5728\u8fdb\u884cview transformation\uff0c\u201c\u6441\u4e0b\u5feb\u95e8\u201d\u5c31\u662f\u5728\u8fdb\u884cprojection transformation\u3002</p> <p>\u5982\u4f55perform view transformation\uff1f\u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\u4e00\u4e0b\u76f8\u673a\uff1a</p> <ul> <li>Position   \\(\\vec{e}\\)</li> <li>Gaze direction  \\(\\hat{g}\\)</li> <li>Up direction  \\(\\hat{t}\\)    (assuming perpendicular(\u6b63\u4ea4) to \\(\\hat{g}\\))</li> </ul> <p>\u6240\u4ee5\u8bf4\uff0c\u5b9a\u4e0b\u76f8\u673a\u4f4d\u7f6e\uff0c\u7136\u540e\u955c\u5934\u671d\u5411\u76ee\u6807\uff0c\u6700\u540e\u65cb\u8f6c\u76f8\u673a\uff08\u6539\u53d8\u76f8\u673aup direction\uff09\u5c31\u53ef\u4ee5\u5b9a\u4e49\u76f8\u673a\u7684\u53d6\u7ecf\u884c\u4e3a\u4e86\u3002\u90a3\u4e48\u73b0\u5b9e\u4e2d\uff0c\u76f8\u673a\u548c\u7269\u4f53\u90fd\u53ef\u4ee5\u79fb\u52a8\uff0c\u90a3\u4e48\u6839\u636e\u76f8\u5bf9\u8fd0\u52a8\u7ea6\u5b9a\u4fd7\u6210\uff1aWe always transform the camera to:</p> <ul> <li>The origin, up at Y axis, look at -Z axis.</li> <li>And transform the objects along with the camera.</li> </ul> <p>\u90a3\u4e48\u5982\u4f55transform\u5462\uff1f\u9996\u5148\u76f8\u673a\u5728\\(\\vec{e}\\)\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c\u5e73\u79fb\u3002\u79fb\u52a8\u5230\u539f\u70b9\u4e4b\u540e\uff0c\u65cb\u8f6c\\(\\hat{g}\\)\u5230-Z\u8f74\uff0c\\(\\hat{t}\\)\u5230Y\u8f74\uff0c\uff08g\u00d7t\uff09\u5230X\u8f74\u3002</p> <p></p> <p>\u201c\u65cb\u8f6c\\(\\hat{g}\\)\u5230-Z\u8f74\uff0c\\(\\hat{t}\\)\u5230Y\u8f74\uff0c\uff08g\u00d7t\uff09\u5230X\u8f74\u201d\u7edd\u975e\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u77e9\u9635\u8ba1\u7b97\u4f1a\u5f88\u9ebb\u70e6\u3002\u4f46\u662f\u6211\u4eec\u5f88\u5bb9\u6613\u5b9e\u73b0\u7684\u662f\uff1aY\u8f74\u5355\u4f4d\u5411\u91cf\u8f6c\u5230t\uff0c-Z\u8f74\u5355\u4f4d\u5411\u91cf\u8f6c\u5230g\uff0c\u8fd9\u6837\u901a\u8fc7\u6c42\u9006\u5c31\u80fd\u77e5\u9053\u539f\u6765\u9700\u8981\u7684\\(R_{view}\\)\u662f\u4ec0\u4e48\u4e86(\u8fd9\u4e2a\u77e9\u9635\u5f88\u5bb9\u6613\u7528$(1,0,0,0)^T\\ (0,1,0,0)^T\\ (0,0,-1,0)^T\\ $\u548c\u5b83\u76f8\u4e58\u8fdb\u884c\u9a8c\u8bc1)\uff1a  </p>"},{"location":"GAMES101/note.html#projection-transformation","title":"Projection Transformation","text":"<p>Orthographic and Prespective Projection\u7684\u533a\u522b\u662f\u4ec0\u4e48\u5462\uff1f \u5982\u4e0b\u56fe(\u5de6\u4e3a\u6b63\u4ea4\uff0c\u53f3\u4e3a\u900f\u89c6)\uff0c\u540c\u6837\u662f\u7acb\u65b9\u4f53\uff0c\u5de6\u8fb9\u7684\u5e73\u884c\u7ebf\u4f9d\u7136\u5e73\u884c\uff0c\u4f46\u662f\u53f3\u8fb9\u4e0d\u662f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4eba\u773c\u66f4\u7c7b\u4f3c\u53f3\u8fb9\u7684\u900f\u89c6\u6295\u5f71\uff1b\u6362\u800c\u8a00\u4e4b\uff0c\u900f\u89c6\u6709\u8fd1\u5927\u8fdc\u5c0f\u7684\u6548\u5e94\uff1b\u6216\u8005\u8bf4\uff0c\u6b63\u4ea4\u6295\u5f71\u662f\u900f\u89c6\u6295\u5f71\u6444\u50cf\u5934\u653e\u7684\u65e0\u9650\u8fdc\u7684\u60c5\u51b5\uff1a</p> <p></p> <p>\u4e0b\u56fe\u66f4\u80fd\u76f4\u89c2\u5730\u4f53\u73b0\u4e24\u8005\u7684\u533a\u522b\uff1a </p> <p></p> <p>Orthographic Projection\u662f\u8f83\u5bb9\u6613\u5b9e\u73b0\u7684\uff0c\u76f8\u673a\u56fa\u5b9a\u5728\u539f\u70b9\uff0c\u9762\u5411-Z\u8f74\uff0c\u5934\u6307\u5411Y\u8f74\uff0c\u7136\u540e\u5bf9\u7269\u4f53\u8fdb\u884c\u201cDrop Z Coordinate\u201d\uff0c\u6700\u540e\u7ea6\u5b9a\u4fd7\u6210\u5730\u201cTranslate and scale the resulting rectangle to \\([-1,1]^2\\)\u201d\u3002</p> <p></p> <p>\u4f46\u662f\u5728\u5b9e\u9645\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u662f\u5c06\\([l,r]\u00d7[b,t]\u00d7[f,n]\\)\u7684\u7acb\u65b9\u533a\u57df\uff08cuboid\uff09\u6620\u5c04\u5230\\([-1,1]^3\\)\u7684canonical(\u6b63\u5219)\u7acb\u65b9\u4f53\u3002\u7136\u540e\u8fd9\u4e2a\u533a\u57df\u518dDrop Z Coordinate\u3002\u524d\u9762\u8fd9\u4e00\u6b65\u6620\u5c04\u7684\u77e9\u9635\u5982\u4e0b\uff1a </p> <p></p> <p>\u5728\u53f3\u624b\u7cfb\u4e0b\uff0c\u9762\u671d-Z\u8f74\u8ba9\u8fdb\u8fdc\u6982\u5ff5\u6df7\u6dc6\uff08-1 &gt; -2, \u4f46\u662f-1\u70b9\u8ddd\u79bb\u6444\u50cf\u673a\u8fd1\uff09\u3002\u56e0\u6b64\u4e00\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u5de6\u624b\u7cfb\uff08\u5982OpenGL, a Graphics API\uff09\u3002\u90a3\u4e48\u7ecf\u8fc7\u4e86\u5e73\u884c\u53d8\u6362\u4e4b\u540e\uff0c\u7406\u5e94\u4e0a\u6765\u8bf4\uff0c\u6b63\u5219\u7acb\u65b9\u4f53\u91cc\u9762\u7684\u7269\u4f53\u90fd\u6709\u6240\u62c9\u4f38\u3002\u662f\u8fd9\u6837\u7684\uff0c\u56e0\u4e3a\u4e4b\u540e\u8fd8\u4f1a\u6709\u201c\u89c6\u53e3\u62c9\u4f38\u201d\u5bf9\u7269\u4f53\u518d\u6b21\u8fdb\u884c\u62c9\u4f38\u3002</p> <p>Perspective Projection\u662f\u8f83\u4e3a\u590d\u6742\u7684\uff0c\u4f46\u662f\u786e\u5b9e\u5e94\u7528\u6700\u5e7f\u7684\u3002\u56de\u987e\u4e00\u4e0b\u5176\u6b21\u5750\u6807\u4e2d\u7684\u5b9a\u4e49\uff1a  \u56e0\u6b64\uff0c\uff081,0,0,1\uff09\u548c\uff082,0,0,2\uff09\u90fd\u8868\u793a\uff081,0,0\uff09\u3002\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u900f\u89c6\u6295\u5f71\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u62c6\u6210\u4e24\u6b65\uff1aFrustum\uff08\u89c6\u9525\uff09 -&gt; Cuboid(\u4e00\u4e2a\u77e9\u9635)\uff1b\u6b63\u4ea4\u6295\u5f71\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff08\u5de6\u7acb\u4f53\u56fe\u5f62\u4e3aFrustum\uff0c\u53f3\u7acb\u4f53\u4e3aCuboid\uff09</p> <p></p> <p>\u90a3\u4e48\u201c\u6324\u538b\u201d\uff08squish\uff09\u77e9\u9635\u600e\u4e48\u6c42\uff1f\u89c1\u4e0b\u56fe\uff1a\u7531\u4e8e\u5148\u6709translation\uff0c\u6444\u50cf\u673a\u5df2\u7ecf\u4f4d\u4e8e\u539f\u4f4d\u4e86\uff0c\u56e0\u6b64Frustum\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u201c\u53f0\u578b\u7acb\u65b9\u4f53\u201d\u3002\u90a3\u4e48\u5256\u6790\u4e00\u6761\u5149\u7ebf\uff0c\u5c31\u4f1a\u53d1\u73b0\u53ef\u4ee5\u5229\u7528\u76f8\u4f3c\u4e09\u89d2\u5f62\u53bb\u6c42\u51fa\u65b0\u7684x and y\uff08\u6211\u4eec\u89c4\u5b9a\uff0csquish\u4e4b\u540e\uff0cnear far\u4e24\u4e2a\u5e73\u9762\u7684z\u90fd\u662f\u4e0d\u53d8\u7684\uff09</p> <p></p> <p>\u90a3\u4e48\u5176\u5b9e\u8fd9\u4e2a\u77e9\u9635\u5f88\u591a\u4fe1\u606f\u5df2\u7ecf\u547c\u4e4b\u6b32\u51fa\u4e86\uff1a  \u6211\u4eec\u53c8\u77e5\u9053\uff08\u5176\u5b9e\u662f\u4eba\u4e3a\u89c4\u5b9a\u7684\uff09\uff0c\u81f3\u5c11\uff0cnera\u5e73\u9762\u4e0a\u7684z\u503c\u548cfar\u5e73\u9762\u4e0a\u7684z\u503c\u5728\u7ecf\u8fc7\u4e86\u77e9\u9635\u53d8\u6362\u4e4b\u540e\u4e0d\u4f1a\u53d8\u5316\u3002\u90a3\u4e48\u7b2c\u4e09\u884c\u81f3\u5c11\u662f\uff1a(0,0,A,B)\u3002\u5219\u5bf9\u4e8en\u5e73\u9762\u4e0a\u7684\uff08x,y,n,1\uff09\u548cf\u5e73\u9762\u4e0a\u7684\uff08x,y,f,1\uff09\u6709\uff1a  \u8fd9\u6837\\(A = n +f;B = -nf\\)\uff0c\u6211\u4eec\u7684\\(M_{persp\\rightarrow{ortho}}\\)\u5c31\u5b8c\u5168\u7b97\u51fa\u6765\u4e86\u3002\u6700\u540e\u5c31\u6709\uff1a  \u597d\u7684\uff0c</p> <p>\u6295\u5f71\u77e9\u9635\u7ec8\u4e8e\u6c42\u51fa\u6765\u4e86\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u89c4\u5b9a\u4e86near and far\u5e73\u9762\u8ddd\u79bbXOY\u5e73\u9762\u7684\u8ddd\u79bb\u4e0d\u53d8\uff0c\u90a3\u4e48\u8fd9\u4e2aFrustum\u7ecf\u8fc7\u4e86Squishing\u4e4b\u540e\uff0c\u4e2d\u95f4\u7684\u70b9\u7684z\u503c\u662f\u53d8\u5927\u4e86\u8fd8\u662f\u53d8\u5c0f\u4e86\u5462\uff1f\u5047\u8bbe\u70b9\u4e3a\\((x,y,t,1)\\)\u5176\u4e2d\\(n&lt;t&lt;f\\)\uff0c\u90a3\u4e48\u7ecf\u8fc7\u4e86\u77e9\u9635\u76f8\u4e58\u4e4b\u540e\uff1a\\(\\hat{z} = ((n+f)z - nf)/z\\)\uff0c\u800c\u5b83\u8981\u548cz\u8fdb\u884c\u6bd4\u8f83\uff1a  \u6240\u4ee5\u8bf4\uff0c\u4e8b\u5b9e\u4e0a\u7ecf\u8fc7\u4e86squish\u4e4b\u540e\uff0c\u867d\u7136\u8bf4near far\u4e24\u4e2a\u5e73\u9762\u7684z\u503c\u662f\u4e0d\u6539\u53d8\u7684\uff0c\u4f46\u662f\u4e2d\u95f4\u7684\u70b9\u7684z\u503c\u662f\u4f1a\u53d8\u5927\u7684\uff0ci.e.\uff0c\u66f4\u9760\u8fd1far\u5e73\u9762\u3002</p>"},{"location":"GAMES101/note.html#rasterization","title":"Rasterization","text":""},{"location":"GAMES101/note.html#triangles","title":"Triangles","text":"<p>\u5b9a\u4e49\uff1aAspect ratio = width / height(\u5bbd\u9ad8\u6bd4)\u3001vertical field-of-view(fovY)(\u5782\u76f4\u53ef\u89c6\u89d2)\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u80fd\u89c4\u8303\u5730\u7528\u5bbd\u9ad8\u6bd4\u548c\u5782\u76f4\u53ef\u89c6\u89d2\u6765\u5b9a\u4e49\u6211\u4eec\u53d6\u51fa\u6765\u7684Frustum\u4e86\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a </p> <p></p> <p></p> <p>pre-difine\u4e00\u4e9b\u6982\u5ff5\u4e4b\u540e\uff1aMVP\u4e4b\u540e\u5e72\u4ec0\u4e48\uff08MVP\uff1amodel, view, project\uff09\uff1f\u81ea\u7136\u9700\u8981\u60f3\uff1a\u5982\u4f55\u628a\u6b63\u5219\u7acb\u65b9\u4f53\u8f6c\u5230\u5c4f\u5e55\u4e0a\u3002\u90a3\u4e48\u4ec0\u4e48\u4e8b\u5c4f\u5e55screen\u5462\uff1f \u5c4f\u5e55\u5176\u5b9e\u662f\u4e00\u5806\u50cf\u7d20\uff0c\u50cf\u7d20\u77e9\u9635\u7684\u5927\u5c0f\u5c31\u79f0\u4e3a\u5206\u8fa8\u7387\u3002\u5f53\u524d\u9636\u6bb5\uff0c\u5bf9\u4e8e\u4e00\u4e2apixel\uff0c\u6211\u4eec\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5c0f\u6b63\u65b9\u5f62\uff0c\u800c\u4e14\u989c\u8272\u4e0d\u4f1a\u53d8\u5316\uff08For now: A pixel is a little square with uniform color\uff09\u3002Raster\u662f\u5fb7\u8bed\u4e2dScreen\u7684\u610f\u601d\uff0c\u90a3\u4e48\u5149\u6805\u5316\u5176\u5b9e\u5c31\u662f\u5e0c\u671b\u628acanonical cube\u8f6c\u5316\u4e3ascreen\u3002\u5149\u6805\u5316\u8fd9\u4e2a\u540d\u5b57\u5176\u5b9e\u4e5f\u5f88\u4fe1\u8fbe\u96c5\uff1a\u628a\u5149 ray \u5212\u5206\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u5c0f\u6805\uff08\u5c0f\u683c\u5b50\uff09\u3002</p> <p>\u5982\u4f55\u5b9a\u4e49screen space\uff1f\u7ea6\u5b9a\u4fd7\u6210\uff1a\u8d77\u70b9\u4e3a\u539f\u70b9\uff0c\u7136\u540e\u50cf\u7d20\u7684\u5f15\u7d22\u662f(x, y)\u5f62\u5f0f\uff0c\u800c\u4e14x y\u90fd\u662f\u6b63\u6574\u6570\u3002\u90a3\u4e48\uff0c\"Pixel's indices are from (0, 0) to (width-1, height-1)\"\u3002\u4f46\u662f\u6ce8\u610f\uff1a\u50cf\u7d20\u7684\u4e2d\u5fc3\u70b9\u5176\u5b9e\u5e76\u4e0d\u662f\u5f15\u7d22\uff01</p> <p></p> <p>\u90a3\u4e48\u76f8\u5f53\u4e8e\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u77e9\u9635\uff0c\u5b9e\u73b0\uff1a\\([-1,1]^2\\rightarrow[0,width]\u00d7[0,height]\\), \u4e14\u8ddfz\u8f74\u65e0\u5173\u3002\u8fd9\u4e2a\u77e9\u9635\u5176\u5b9e\u4e0d\u96be\u53d1\u73b0\uff1a  \u8fd9\u5c31\u662f\u89c6\u53e3\u62c9\u4f38\uff08viewport\uff09\u3002\u7ecf\u8fc7\u4e86\u8fd9\u4e00\u6b65\u4e4b\u540e\uff0c\u7ec8\u4e8e\u56fe\u50cf\u5448\u73b0\u5230\u4e86\u50cf\u7d20\u533a\u57df\u5185\u4e86\u3002\u90a3\u4e48\u7a76\u7adf\u5982\u4f55\u628a\u8fd92D Polygon\u8f6c\u5316\u4e3a\u50cf\u7d20\u5462\uff1f\u6362\u800c\u8a00\u4e4b\uff0c\u7528\u4e00\u4e2a\u4e00\u4e2a\u7684\u5c0f\u683c\u5b50\uff08\u6805\uff09\u8fdb\u884c\u5212\u5206\u5462\uff1f\u5173\u4e8e\u591a\u8fb9\u5f62\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8ba8\u8bba\uff1aTriangle Meshes\u5e94\u8be5\u5982\u4f55\u64cd\u4f5c\uff1f</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4f1a\u5148\u8ba8\u8bbaTriangle Mesh\u5462\uff1f\u539f\u56e0\u6709\u5f88\u591a\uff1a</p> <ol> <li>\u4e09\u89d2\u5f62\u662f\u591a\u8fb9\u5f62\u7684\u57fa\u7840\u3002\u591a\u8fb9\u5f62\u53ef\u4ee5\u62c6\u5206\u4e3a\u591a\u4e2a\u4e09\u89d2\u5f62</li> <li>\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u70b9\u4e00\u5b9a\u5728\u4e00\u4e2a\u9762\u4e0a\uff08planar\uff09</li> <li>\u4e09\u89d2\u5f62\u5185\u5916\u5b9a\u4e49\u5341\u5206\u6e05\u6670\uff08well-defined interior\uff09</li> <li>\u5bf9\u4e8e\u4e09\u89d2\u5f62\u5185\u90e8\u7684\u70b9\uff0c\u5f88\u5bb9\u6613\u7528\u4e09\u70b9\u5750\u6807\u8fdb\u884c\u5dee\u503c\uff08interpolation\uff09\u8868\u793a\uff0c\u4f8b\u5982\u91cd\u5fc3\u7684\u5dee\u503c\uff08barycentric interpolation\uff09</li> </ol> <p></p> <p>\u5206\u6790\u4e86\u4f18\u52bf\u4e4b\u540e\uff0c\u5982\u4f55\u7528pixel\u53bb\u903c\u8fd1triangle\u5462\uff1f\u5982\u4f55\u5b9e\u73b0\u8fd9\u6837\u7684\u4e00\u4e2aalgorithm\uff0c\u505a\u5230\uff1aUse the input of the position of triangle vertices projected on screen to output the set of pixel values approximating traingle\u3002(\u793a\u610f\u56fe\u5982\u4e0b)</p> <p></p> <p>\u4e4b\u524d\u63d0\u5230\u53c9\u4e58\u5999\u7528\u7684\u65f6\u5019\u6709\u8fc7\u6309\u6697\u793a\uff1a\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5224\u65ad\u6807\u51c6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u91c7\u6837(sampling)\u6240\u6709\u7684\u50cf\u7d20\u683c\u5b50\u4e2d\u5fc3\u70b9\uff0c\u5224\u65ad\u4e2d\u5fc3\u70b9\u5728\u4e0d\u5728trangle\u7684\u5185\u90e8\u3002</p> <p></p> <p>\u90a3\u4e48\u76f8\u5f53\u4e8e\u662f\u5e0c\u671b\u8bbe\u8ba1\u4e00\u4e2a<code>inside(tri, x+0.5, y+0,5);</code>\u51fd\u6570\uff0c\u4ece\u800c\u5224\u65ad\u5f15\u7d22\u4e3ax y\u7684\u50cf\u7d20\u7684\u4e2d\u5fc3\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8\uff08\u4e3a\u4ec0\u4e48\u662f+0.5\uff1f\u56e0\u4e3aviewport\u5df2\u7ecf\u5c06canonical cube map\u5230\u4e86pixel resolution matrix\uff0c\u6240\u4ee50.5\u8fd9\u4e2a\u6570\u5b57\u662f\u6b63\u786e\u7684\uff09\u3002\u90a3\u4e48\u5229\u7528\u4e09\u4e2across product\u5c31\u80fd\u5e2e\u52a9\u5224\u65ad\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u91cc\u9762\u3002\u90a3\u4e48\u5bf9\u4e8e\u70b9\u5728\u4e09\u89d2\u5f62\u4e0a\u7684corner case\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u884c\u89c4\u5b9a\uff0c\u53ea\u9700\u8981\u4e25\u683c\u9075\u5b88\u5c31\u884c\u4e86\uff1b\u5f53\u7136\u4e0d\u540c\u7684API\u7684\u89c4\u5219\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\u3002</p> <p>\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u4e09\u89d2\u5f62\u6765\u8bf4\uff0c\u6211\u6709\u5fc5\u8981\u626b\u8fc7\u5168\u90e8\u7684\u50cf\u7d20\u6765\u8fdb\u884c\u5149\u6805\u5316\u5417\uff1f\u4e00\u4e2a\u4e09\u89d2\u5f62\u5355\u5143\u5b9e\u9645\u4e0a\u662f\u4e0d\u5927\u7684\uff0c\u56e0\u6b64\u5982\u679c\u7a0b\u5e8f\u4e0a\u904d\u5386x y\u8ba1\u7b97\u5f00\u9500\u4f1a\u8d77\u98de\u3002\u6240\u4ee5\u8bf4\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aBounding Box! (\u4e13\u4e1a\u540d\u5b57\u53eb\u505aAxis Aligned Bounding Box, AABB)\u3002\u800c\u6709\u7684\u65f6\u5019\uff0c\u4e09\u89d2\u5f62\u5b9e\u9645\u4e0a\u8986\u76d6\u9762\u79ef\u975e\u5e38\u5c0f\uff0c\u4f46\u662fAABB\u4f1a\u663e\u793a\u90fd\u975e\u5e38\u5927\uff0c\u8fd9\u662f\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f\u90a3\u5c31\u662f\u4e09\u89d2\u5f62\u975e\u5e38\u82d7\u6761\uff0c\u800c\u4e14\u6709\u65cb\u8f6c\u3002\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u79cd\u4e09\u89d2\u5f62\u7684\u5149\u6805\u5316\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528Incremental Triangle Traversal Strategy\u3002</p> <p></p> <p></p> <p>\u6700\u540e\uff0c\u6211\u4eec\u5224\u65ad\u4e86\u6240\u6709\u7684\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u4fe1\u606f\u586b\u5145\u5bf9\u5e94\u7684\u50cf\u7d20\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u79cd\u5f88\u7cdf\u7cd5\u7684\u73b0\u8c61\uff1a\u952f\u9f7f\u6548\u5e94\uff08Aliasing / Jaggies\uff09\u3002\u6ca1\u9519\uff1a\u6297\u952f\u9f7f\uff08Antialiasing\uff09\u662f\u540e\u7eed\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5de5\u4f5c\u3002</p> <p></p>"},{"location":"GAMES101/note.html#antialiasing-and-z-buffering","title":"Antialiasing and Z-Buffering","text":"<p>\u5982\u4f55\u6297\u952f\u9f7f\uff08\u4e5f\u79f0\u4e3a\u53cd\u8d70\u6837\uff09\u5462\uff1f\u91c7\u6837\u80fd\u4e0d\u80fd\u6539\u8fdb\u4e00\u4e0b\u5462\uff1f\u56e0\u6b64\u9700\u8981\u4e86\u89e3\u4e00\u4e0bSampling Artifacts(\u7455\u75b5)(Errors/Mistakes/Inaccuracies) in Computer Graphics\u3002\u91c7\u6837\u5e26\u6765\u7684\u8bef\u5dee\u6709\u5f88\u591a\u4f8b\u5b50\uff0c\u5982\u6469\u5c14\u7eb9\uff0c\u952f\u9f7f\u6548\u5e94\uff0cWagon wheel effect\u7b49\u7b49\uff0c\u5b83\u4eec\u7684\u91c7\u6837artifact\u5206\u522b\u662f\uff1asampling in space; undersampling images; sampling in time\u3002\u4f46\u662f\u5728\u8fd9\u4e9bartifacts\u80cc\u540e\uff0c\u6709\u4e00\u53e5\u8bdd\u53ef\u4ee5\u63cf\u8ff0\u73b0\u8c61\u4ea7\u751f\u7684\u539f\u56e0\uff1aSignals are changing too fast (high frequency), but sampled too slowly\u3002 </p> <p>\u90a3\u4e48Antialiasing\u7684core idea\u662f\u4ec0\u4e48\u5462\uff1f\u8fd9\u91cc\u76f4\u63a5\u6446\u51fa\u7ed3\u8bba\uff1aBlurring (Pre-Filtering) Before Sampling\u3002</p> <p></p> <p>\u8fb9\u7f18\u9ad8\u9891\u7684\u4fe1\u606f\u5728\u6a21\u7cca\u5316\uff08\u6ee4\u6ce2\uff09\u540e\u53ef\u4ee5\u964d\u9891\uff0c\u56e0\u6b64\u5728\u8f83\u4e3a\u4f4e\u9891\u7684\u50cf\u7d20\u4e2d\u5fc3\u70b9\u91c7\u6837\u4e0b\u80fd\u591f\u6709\u66f4\u597d\u7684\u6548\u679c\uff08\u611f\u6027\u7406\u89e3\uff09\u3002Note antialiased edges in rasterized triangle where pixel values take intermediate values\u3002\u540c\u65f6\uff1a\u5148\u91c7\u6837\u540e\u6a21\u7cca\u7684\u65b9\u6cd5\u6548\u679c\u5e76\u4e0d\u597d\uff01 \u60f3\u8981\u6297\u952f\u9f7f\uff0c\u5fc5\u987b\u5148\u6a21\u7cca\u540e\u91c7\u6837\uff01</p> <p>\u6b64\u65f6\u5fc3\u4e2d\u4e00\u5b9a\u6709\u4e24\u4e2a\u95ee\u9898\uff1a \u4e3a\u4ec0\u4e48undersampling\u4f1a\u9020\u6210\u952f\u9f7f\u6548\u5e94\uff1f\u4ee5\u53ca\uff0c\u4e3a\u4ec0\u4e48\u5148\u6ee4\u6ce2\uff08\u5148\u6a21\u7cca\uff09\uff08pre-filtering\uff09\u518d\u91c7\u6837\u53ef\u4ee5\u6297\u952f\u9f7f\uff1f\u90a3\u4e48\u6211\u4eec\u9700\u8981\u9891\u7387\u65b9\u9762\u7684\u77e5\u8bc6\u3002 </p> <p>\\(cos2\\pi fx\\)\u51fd\u6570\u4e2d\uff0c\\(f = 1/T\\)\uff0c\u4ee3\u8868\u4e86\u9891\u7387\u3002f\u8d8a\u5927\uff0c\u56fe\u50cf\u632f\u52a8\u9891\u7387\u8d8a\u9ad8\uff0c\u5468\u671f\u8d8a\u5c0f\u3002\u6839\u636e\u5085\u91cc\u53f6\u53d8\u6362\uff0cFourier Transform\uff0c\u4efb\u4f55\u4e00\u4e2a\u5468\u671f\u51fd\u6570\u6211\u90fd\u80fd\u5199\u6210\u6b63\u5f26\u51fd\u6570\u548c\u4f59\u5f26\u51fd\u6570\u7684\u548c\uff1aRepresent a function as a weighted sum of sines and cosines\u3002Essentially, \u5085\u91cc\u53f6\u53d8\u6362\u5c31\u662f\u65f6\u57df-&gt;\u9891\u57df\u3002</p> <p></p> <p>\u800c\u66f4\u9ad8\u9891\u7387\u7684\u51fd\u6570\u9700\u8981\u66f4\u5feb\u7684\u91c7\u6837\u7b56\u7565(Higher Ferequencies Need Faster Sampling)(\u5982\u4e0b\u56fe)\u3002</p> <p></p> <p>\u540c\u65f6\uff0cundersampling\u4e5f\u4f1a\u9020\u6210Frequenciy Aliases\u3002\u5728\u4e0b\u56fe\u80fd\u591f\u6e05\u6670\u770b\u51fa\uff1a\u5728\u4e00\u4e2a\u91c7\u6837\u9891\u7387\u4e0b\uff0c\u5373\u4f7f\u662f\u4e24\u4e2a\u9891\u7387\u622a\u7136\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u518d\u8fd9\u4e2asampling\u4e0b\u4f9d\u7136\u91c7\u6837\u5904\u4e86\u76f8\u540c\u7684\u51fd\u6570\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u73b0\u8c61\u4e5f\u79f0\u4e3a\u201c\u8d70\u6837\u201d\u3002</p> <p></p> <p>\u800c\u6ee4\u6ce2\uff0cfiltering\uff0c\u4ece\u9891\u7387\u7684\u89d2\u5ea6\u4e0a\u5c31\u662f\uff1aGet rid of certain frequency contents\u3002filtering\u5206\u4e3aHigh-Pass and Low-Pass Filtering\uff0c\u8fd9\u4e9b\u5728SI100B signal processing\u90e8\u5206\u6709\u6240\u8bbe\u8ba1\u3002</p> <p>\u53c8\u4e00\u4e2a\u7ed3\u8bba\uff1aFiltering = Convolution = Averaging\u3002Averaging\u8fd8\u53ef\u80fd\u7406\u89e3\uff0c\u4f46\u4e3a\u4ec0\u4e48\u662f\u5377\u79ef\uff1f\u5728CNN\u4e2d\uff0c\u5377\u79ef\u7684\u5b9a\u4e49\u662f\u5b66\u4e60\u8fc7\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e5f\u662f\u5982\u6cd5\u70ae\u5236\uff1a\u5bf9signal\u51fd\u6570\u7684\u503c\u7528\u4e00\u4e2apoint-wise averaging sliding window\u3002</p> <p>Convolution Theorem: Convolution in the spatial domain is equal to multiplication in the frequenct domain, and vice versa. </p> <ul> <li>Option 1: Filter by convolution in the spatial domain</li> <li>Option 2 : First, transform to frequency domain (Fourier transform). Secondly, mutiply by Fourier transform of convolution kernel. Lastly, transform back to spatial domain (inverse Fourier).</li> </ul> <p>\u4e0a\u8ff0\u5185\u5bb9\u4e3b\u8981\u8bb2\u8ff0\u4e86\u5b9e\u65bd\u5377\u79ef\u7684\u4e24\u79cd\u65b9\u6cd5\uff1a\u8981\u4e48\u76f4\u63a5\u65f6\u57df\u4e0a\u5377\u79ef\uff0c\u8981\u4e48\u5085\u91cc\u53f6\u53d8\u6362\u5230\u9891\u57df\uff0c\u548c\u5377\u79ef\u6838\u76f8\u4e58\uff0c\u6700\u540e\u5408\u6210\u56de\u53bb\u3002\u89c1\u4e0b\u793a\u610f\u56fe\uff1a</p> <p></p> <p>\u8fd9\u79cd\u5377\u79efsliding window box\u79f0\u4e3afilter kernel\u3002\u8fd9\u4e2abox\u8d8a\u5927\uff0c\u6a21\u7cca\u5316\u7684\u80fd\u529b\u8d8a\u5f3a\uff0c\u56e0\u6b64wider filter kernel = lower frequency\uff08\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\uff09\u3002</p> <p>\u90a3\u4e48\u91c7\u6837\uff0csampling\uff0c\u4ece\u9891\u7387\u7684\u89d2\u5ea6\u4e0a\uff1aRepeating Frequency Contents\u3002\u89c1\u4e0b\u56fe\uff0c\u5728\u65f6\u57df\u4e0a\u7684\u51fd\u6570\uff0c\u901a\u8fc7c\u51b2\u6fc0\u51fd\u6570\u8fdb\u884c\u91c7\u6837\u3002\u90a3\u4e48a\u51fd\u6570\u8f6c\u5316\u5230\u4e86\u9891\u57df\u4e0a\uff0c\u800c\u51b2\u6fc0\u51fd\u6570\u7ecf\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u540e\u4f9d\u7136\u662f\u51b2\u6fc0\u51fd\u6570\uff0c\u90a3\u4e48\u65f6\u57df\u4e0a\u7684\u91c7\u6837\u662f\u9891\u57df\u4e0a\u7684\u5377\u79ef\uff0c\u5c31\u4f1a\u53d1\u73b0\u7ed3\u679c\u662f\u5728\u9891\u57df\u4e0a\u4e0d\u65ad\u91cd\u590d\u7684\u590d\u5236\u7c98\u8d34\uff01</p> <p>\u91c7\u6837\u5b9a\u7406\u6307\u51fa\uff0c\u5982\u679c\u4e00\u4e2a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5185\u5bb9\u5b8c\u5168\u4f4d\u4e8e\u67d0\u4e2a\u9891\u7387 fmax\u4ee5\u4e0b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4fe1\u53f7\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u91c7\u6837\u7387 fs\u6765\u5b8c\u7f8e\u5730\u91cd\u5efa\uff0c\u53ea\u8981 fs \u5927\u4e8e 2fmax\u3002\u8fd9\u4e2a\u6761\u4ef6\u786e\u4fdd\u4e86\u91c7\u6837\u540e\u7684\u4fe1\u53f7\u4e0d\u4f1a\u53d1\u751f\u6df7\u6dc6\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u539f\u59cb\u4fe1\u53f7\u53ef\u4ee5\u4ece\u5176\u6837\u672c\u4e2d\u552f\u4e00\u5730\u91cd\u5efa\u51fa\u6765\u3002\u5f53\u91c7\u6837\u7387 fs \u7b49\u4e8e\u6216\u5c0f\u4e8e 2fmax \u65f6\uff0c\u4f1a\u53d1\u751f\u6240\u8c13\u7684\u201c\u6df7\u53e0\u201d\u73b0\u8c61\u3002\u6df7\u53e0\u662f\u6307\u9ad8\u9891\u4fe1\u53f7\u7684\u6837\u672c\u4e0e\u4f4e\u9891\u4fe1\u53f7\u7684\u6837\u672c\u6df7\u5408\u5728\u4e00\u8d77\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4ece\u91c7\u6837\u4fe1\u53f7\u4e2d\u6062\u590d\u539f\u59cb\u4fe1\u53f7\u3002\u5728\u9891\u57df\u4e2d\uff0c\u8fd9\u8868\u73b0\u4e3a\u9ad8\u9891\u4fe1\u53f7\u7684\u9891\u8c31\u201c\u6298\u53e0\u201d\u5230\u4f4e\u9891\u533a\u57df\uff0c\u4ece\u800c\u4e0e\u539f\u59cb\u4fe1\u53f7\u7684\u9891\u8c31\u91cd\u53e0\uff0c\u8fd9\u5c31\u662f\u201c\u91cd\u590d\u9891\u8c31\u5185\u5bb9\u201d\u7684\u542b\u4e49\u3002</p> <p></p> <p>\u56e0\u6b64\u5982\u679c\u91c7\u6837\u8d8asparse\uff0c\u5377\u79ef\u9891\u7387\u8d8a\u9ad8\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751faliasing : Mixed Frequency Contents\u3002\u89c1\u4e0b\u56fe\uff1a</p> <p></p> <p>\u6709\u4e86\u4ee5\u4e0a\u7684\u5206\u6790\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u77e5\u9053\u5982\u4f55\u53cd\u8d70\u6837\uff1a</p> <ul> <li>Option1\uff1a\u63d0\u9ad8\u91c7\u6837\u7387\uff08\u5982\u63d0\u9ad8\u5206\u8fa8\u7387\uff1b\u4f46\u662f\u4e0d\u73b0\u5b9e\uff09</li> <li>Option2\uff1a\u53bb\u6389\u9ad8\u9891\u3002\u5982\u4e0b\u65b9\u7684\u6f14\u793a\u56fe\u3002\u800c\u73b0\u5b9e\u4e2d\uff0c\u5982\u4f55\u6ee4\u6ce2\u5462\uff1f\u53ef\u4ee5\u8003\u8651\uff1a\u4f4e\u901a\u6ee4\u6ce2\u5668\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u5747\u3002</li> </ul> <p></p> <p>\u5177\u4f53\u64cd\u4f5c\u6765\u8bf4\uff0c\u53ef\u4ee5\u8003\u8651\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\u8fdb\u884caveraging\uff1a\u6709\u591a\u5c11\u90e8\u5206\u88ab\u4e09\u89d2\u5f62\u8986\u76d6\uff0c\u989c\u8272\u4e0a\u5c31\u5448\u73b0\u591a\u5c11\u7a0b\u5ea6\u3002\u793a\u610f\u56fe\u5982\u4e0b(\u6b63\u65b9\u5f62\u4e3a1-pixel-wide)\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u65b9\u6cd5\u8bf4\u7740\u5bb9\u6613\uff0c\u505a\u7740\u96be\uff1a\u5982\u4f55\u8ba1\u7b97\u4e09\u89d2\u5f62\u5728\u8fd9\u4e2a\u50cf\u7d20\u683c\u5b50\u4e2d\u8986\u76d6\u7684\u9762\u79ef\u5462\uff1f\u56e0\u6b64\u6709\u4e00\u79cd\u8fd1\u4f3c\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1aMSAA, Multi-Sampling Anti-Aliasing\u3002\u4e00\u4e2a\u50cf\u7d20\u91cc\u9762\u53ef\u4ee5\u518d\u5212\u5206\u4e3a4\u4e2a\u5c0f\u6b63\u65b9\u5f62\uff0c\u6709\u56db\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u7136\u540e\u53bb\u611f\u77e5\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u3002\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p></p> <p></p> <p>MSAA\u5176\u5b9e\u5e76\u6ca1\u6709\u63d0\u9ad8\u5206\u8fa8\u7387\uff0c2*2\u7684supersampling\u770b\u4f3c\u662f\u4e00\u4e2a\u50cf\u7d20\u5212\u5206\u4e3a\u4e86\u201c\u56db\u4e2a\u5c0f\u50cf\u7d20\u201d\uff0c\u5176\u5b9e\u53ea\u662f\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u66f4\u5408\u7406\u7684\u50cf\u7d20\u533a\u57df\u7684\u8986\u76d6\u6bd4\u4f8b\uff0c\u4ece\u800c\u5b9e\u73b0\u6a21\u7cca\u5316\u3002\u8fd9\u5f53\u7136\u53ea\u662f\u4e00\u79cd\u6297\u952f\u9f7f\u65b9\u6cd5\uff0c\u8fd8\u6709\u5f88\u591aMilestones\uff0c\u5982FXAA(Fast Approximate A), TAA(Temporal AA)\u3002\u540c\u65f6\uff0csuper resolution\u4e5f\u662f\u4e00\u79cd\u6297\u952f\u9f7f\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u539f\u7406\u548c\u573a\u666f\u90fd\u4e0d\u4e00\u6837\uff1a\u4e00\u4e2a512\u00d7512\u7684\u7167\u7247\u62c9\u62101024\u00d71024\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u952f\u9f7f\u6548\u5e94\uff0c\u56e0\u4e3a\u6709\u4fe1\u606f\u786e\u5b9e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u6df1\u5ea6\u5b66\u4e60\u6765\u201c\u731c\u51fa\u2019\u4fe1\u606f\uff0c\u4ece\u800cAntialiasing\u5e76\u63d0\u9ad8\u5206\u8fa8\u7387\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5982\u4f55\u628a\u8fdc\u5904\u7269\u4f53\u7528\u89c6\u9525\u6846\u8d77\u6765\uff0c\u8f6c\u5316\u4e3a\u6b63\u5219\u7acb\u65b9\u4f53\uff0c\u6700\u540edrop Z coordinates\u3002\u4f46\u662f\uff0c\u5982\u4f55\u6b63\u786e\u5730\u8868\u8fbe\u906e\u6321\u5173\u7cfb\u5462\uff1f\u6bd5\u7adf\u4eba\u773c\u6216\u8005\u662f\u6444\u50cf\u673a\uff0c\u53ea\u80fd\u770b\u5230\u7269\u4f53\u7684\u4e00\u9762\u3002\u8fd9\u5c31\u662f\u8fd9\u91cc\u8981\u63d0\u5230\u7684\u7b2c\u4e00\u70b9\uff1aVisibility / Occlusion, i.e., Z-buffering\u3002</p> <p>\u53d7\u753b\u5bb6\u753b\u753b\u7684\u6d41\u7a0b\u7684\u542f\u53d1\uff0c\u53d1\u660e\u4e86Painter's Algorithm\uff1aPaint from back to front, overwrite in the framebaffer\u3002\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5047\u5982\u8bf4\u6211\u60f3\u753b\u4e00\u5ea7\u5c71\u7684\u98ce\u666f\u56fe\u6cb9\u753b\uff0c\u6700\u8fdc\u7684\u662f\u5c71\uff0c\u4e8e\u662f\u6211\u5148\u753b\u51fa\u5c71\u7684\u5168\u8c8c\uff0c\u7136\u540e\u518d\u8fdb\u4e00\u6b65\u753b\u773c\u524d\u7684\u8349\u5730\uff0c\u6700\u540e\u753b\u6811\u7b49\u7ec6\u8282\u3002\u56e0\u4e3a\u6cb9\u753b\u5141\u8bb8\u8986\u76d6\uff0c\u5373overwrite\uff0c\u6240\u4ee5\u8bf4\u6211\u53ea\u8981\u9075\u5faa\u4ece\u8fdc\u5230\u8fd1\u7684\u4f5c\u753b\u65b9\u5f0f\uff0c\u753b\u51fa\u6765\u7684\u5c31\u662f\u5408\u4e4e\u903b\u8f91\u7684\u3002</p> <p>\u6211\u4eec\u79f0\u7269\u4f53\u8ddd\u79bb\u89c2\u6d4b\u70b9\u7684\u8ddd\u79bb\u4e3a\u6df1\u5ea6depth\u3002\u5bf9\u4e8e\u753b\u5bb6\u7b97\u6cd5\u6765\u8bf4\uff0c\u5bf9\u4e8en\u4e2a\u4e09\u89d2\u5f62\u6765\u8bf4\uff0c\u9700\u8981\u590d\u6742\u5ea6<code>O(nlogn)</code>\u3002\u56e0\u6b64\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u9996\u5148\u5c06\u573a\u666f\u4e2d\u7684\u591a\u8fb9\u5f62\u6839\u636e\u6df1\u5ea6\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u6df1\u5ea6\u4ece\u5927\u5230\u5c0f\u987a\u5e8f\u8fdb\u884c\u63cf\u7ed8\uff1b\u753b\u5bb6\u7b97\u6cd5\u901a\u5e38\u4f1a\u5c06\u4e0d\u53ef\u89c1\u7684\u90e8\u5206\u8986\u76d6\uff0c\u53ef\u4ee5\u89e3\u51b3\u53ef\u89c1\u6027\u95ee\u9898\u3002\u5bf9\u4f46\u662f\u6709\u4e00\u4e9b\u65f6\u5019\uff1aCan have unresolvable depth order\u3002\u5373\uff1a\u4e0d\u80fd\u89e3\u51b3\u6709\u906e\u6321\u7684\u7269\u4f53\uff0c\u6216\u8005\u8bf4\u4e0d\u80fd\u89e3\u51b3\u6df1\u5ea6\u4e0d\u597d\u786e\u5b9a\u7684\u7269\u4f53\u3002\u5982\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a\u4e09\u4e2a\u4e09\u89d2\u5f62\u4e92\u76f8\u906e\u6321\uff0c\u8fd9\u6837\u6df1\u5ea6\u5c31\u5206\u4e0d\u6e05\u5148\u540e\u987a\u5e8f\u4e86\uff1a</p> <p></p> <p>\u56e0\u6b64\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cdcorner case\uff0c\u4eba\u4eec\u7814\u53d1\u4e86\u4e00\u79cd\u65b0\u7684\u7b97\u6cd5\uff1aZ-Buffer\u3002\u4e0e\u5176\u5bf9\u4e09\u89d2\u5f62\uff08\u591a\u8fb9\u5f62\uff09\u8fdb\u884c\u6df1\u5ea6\u6392\u5e8f\uff0c\u4e0d\u5982\u76f4\u63a5\u4ee3\u5165\u6bcf\u4e00\u4e2a\u50cf\u7d20\u7684\u89c6\u89d2\uff1a\u6211\u5e0c\u671b\u627e\u5230\u6bcf\u4e00\u4e2a\u50cf\u7d20\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u89c4\u8303\u8868\u8ff0\u5982\u4e0b\uff1a</p> <ul> <li>Store current min. z-value for each sample (pixel)</li> <li>Needs an additional buffer for depth values: A frame buffer that stores color values, and a depth buffer (z-buffer) that stores depth.</li> </ul> <p>\u540c\u65f6\uff0c\u4e3a\u4e86\u7b80\u5316\u8ba1\u7b97\uff0c\u539f\u672c\u6444\u50cf\u5934\u662f\u9762\u5411-Z\u8f74\u65b9\u5411\u7684\uff0c\u5373\u6444\u50cf\u5934\u770b\u5230\u7684\u7269\u4f53\u7684Z\u8f74\u503c\u90fd\u662f\u8d1f\u6570\u3002\u4f46\u662f\u6211\u4eec\u89c4\u5b9a\uff1az value is always positive, i.e., smaller z means closer and larger z means further\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6211\u4eec\u5b9e\u65bdZ-buffer\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u540c\u65f6\u5f97\u5230\u4e24\u4e2a\u6570\u636e\uff1a\u989c\u8272\u7684buffer\u4ee5\u53ca\u6df1\u5ea6\u7684buffer\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u6d41\u7a0b\uff1a\u5bf9\u6bcf\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e2d\u8986\u76d6\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u8fdb\u884c\u904d\u5386\uff0c\u5bf9\u6bd4\u6bcf\u4e00\u4e2a\u50cf\u7d20Z buffer\u4e2d\u50a8\u5b58\u7684\u6df1\u5ea6\uff0c\u5982\u679c\u53d1\u73b0\u8fd9\u4e2a\u8986\u76d6\u4f4f\u5b83\u7684\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684depth\u6bd4\u8bb0\u5f55\u7684depth\u5c0f\uff0c\u90a3\u4e48\u4e24\u4e2abuffer\u540c\u65f6\u66f4\u65b0\u6570\u636e\uff0c\u76f4\u5230\u6240\u6709\u7684\u4e09\u89d2\u5f62\u88ab\u904d\u5386\u5b8c\u6bd5\u3002Pseudo-code\u5982\u4e0b\uff1a</p> <pre><code>// Initialize depth buffer to infinite\n// During Rasterization:\nfor (each triangle T)\n    for (each sample (x,y,z) in T)\n         if (z &lt; zbuffer[x,y])\n             frambuffer[x,y] = rgb;\n            zbuffer[x,y] = z;\n        else;\n</code></pre> <p>\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u7b54\u6848\u662f<code>O(n)</code>\uff0c\u56e0\u4e3a\u5176\u5b9e\u6211\u4eec\u6ca1\u6709\u5bf9\u4e09\u89d2\u5f62\u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u4fbf\u662f\u6700\u91cd\u8981\u7684visibility algorithm\uff0cimplemented in hardware for all GPUs\u3002</p>"},{"location":"GAMES101/note.html#shading","title":"Shading","text":""},{"location":"GAMES101/note.html#illumination-shading-and-graphics-pipeline","title":"Illumination, Shading and Graphics Pipeline","text":"<p>\u4ecb\u7ecd\u5b8c\u4e86Z buffer\u4e4b\u540e\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u50cf\u7d20\u4e2d\u7684\u70b9\u539f\u6765\u5bf9\u5e94\u7684\u7a7a\u95f4\u4e2d\u7684\u4e09\u89d2\u5f62\u7a76\u7adf\u662f\u54ea\u4e00\u4e2a\u4e86\uff0c\u800c\u4e14\u4e5f\u80fd\u77e5\u9053\u989c\u8272\u662f\u4ec0\u4e48\u4e86\u3002\u4f46\u662f\u73b0\u5b9e\u751f\u6d3b\u4e2d\u989c\u8272\u53ea\u662f\u4e00\u65b9\u9762\uff0c\u5149\u7ebf\u7684\u4ecb\u5165\u8ba9\u6211\u4eec\u611f\u89c9\u5230\u4ec0\u4e48\u6837\u7684\u4e16\u754c\u662f\u201c\u771f\u5b9e\u7684\u201d\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u50cf\u7d20\u8fdb\u884c\u7740\u8272\uff08shading\uff09\u3002shading\u5b57\u5178\u7684\u5b9a\u4e49\uff1aThe darkening or coloring of an illustration or diagram with parallel lines or a block of color\u3002\u800cCG\u4e2d\u7684\u5b9a\u4e49\u662f\uff1aThe process of applying a material to an object\u3002</p> <p>\u63a5\u4e0b\u6765\u8981\u4ecb\u7ecd\u4e00\u79cdA Simple Shading Model: Blinn-Phong Reflectance Model\u3002\u89c1\u4e0b\u56fe\uff0c\u6839\u636e\u676f\u5b50\u53f3\u8fb9\u90e8\u5206\u533a\u57df\u7684\u9ad8\u5149\uff08Specular highlights\uff09\uff0c\u6211\u4eec\u731c\u6d4b\u5149\u6e90\u5728\u53f3\u8fb9\uff1b\u800c\u676f\u5b50\u53f3\u8fb9\u80fd\u591f\u63a5\u53d7\u5149\u7167\uff0c\u4f46\u662f\u6ca1\u6709\u76f4\u63a5\u53cd\u5c04\u5230\u6444\u50cf\u5934\u91cc\u9762\uff0c\u4f46\u662f\u6211\u4eec\u4f9d\u7136\u80fd\u591f\u770b\u89c1\u8fd9\u4e00\u90e8\u5206\uff0c\u8fd9\u5c31\u662f\u6f2b\u53cd\u5c04\uff08Diffuse reflection\uff09\uff1b\u4f46\u662f\u540c\u65f6\uff0c\u676f\u5b50\u7684\u5de6\u9762\u6ca1\u6709\u76f4\u63a5\u63a5\u6536\u5230\u5149\u7167\uff0c\u800c\u662f\uff0c\u6bd4\u5982\u8bf4\uff0c\u63a5\u6536\u5230\u4e86\u5899\u4f53\u53cd\u5c04\u7684\u5149\uff0c\u8fd9\u79cd\u5c31\u79f0\u4e3a\u73af\u5883\u5149\u7167\uff08Ambient lighting\uff09\u3002</p> <p></p> <p>\u518d\u5b9a\u4e49\u4e00\u4e9b\u4e8b\u60c5\uff0c\u89c1\u4e0b\u56fe(Surface parameter\u53ef\u4ee5\u662fcolors, shinisess, ...)\uff1a</p> <p></p> <p>\u4f46\u662f\uff0cShading is Local\uff0ci.e.\uff0cNo shadows will be generated!\uff08shading \u2260 shadow\uff09\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5f00\u59cb\u5c1d\u8bd5\u8868\u793a\u676f\u5b50\u56fe\u4e2d\u6240\u6f14\u793a\u7684\u4e09\u79cd\u73b0\u8c61\uff1a</p> <p>Diffuse Reflection\uff1a\u6211\u4eec\u628a\u5149\u89c6\u4e3a\u4e00\u79cd\u80fd\u91cf\uff0c\u90a3\u4e48\u6f2b\u53cd\u5c04\u4e2d\u8fdb\u5165\u773c\u775b\u7684\u5149\u4eae\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a\u8fdb\u5165\u773c\u775b\u7684\u80fd\u91cf\u6709\u591a\u5c11\u3002\u8054\u60f3\u592a\u9633\u677f\uff1a\u628a\u5b83\u6b63\u5bf9\u592a\u9633\u81ea\u7136\u662f\u80fd\u91cf\u83b7\u53d6\u6700\u5927\u7684\u60c5\u51b5\uff0c\u800c\u5982\u679c\u677f\u5b50\u6709\u6240\u503e\u659c\uff0c\u90a3\u4e48\u80fd\u91cf\u5c31\u4e0d\u662fmax\u4e86\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u4ecb\u7ecdLambert's cosine law\uff1aIn general, light per unit area is proportional to \\(cos\\theta = l\\vdot n\\)\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u540c\u65f6\uff0c\u5149\u8fd8\u6709falloff\u6548\u5e94\uff1a\u4e00\u4e2a\u70b9\u5149\u6e90\u7684\u5149\u573a\u4e2d\uff0c\u4e00\u4e2a\u5355\u4f4d\u9762\u79ef\u63a5\u6536\u5230\u7684\u80fd\u91cf\u4e0e\u8ddd\u79bb\u7684\u5e73\u65b9\u6210\u53cd\u6bd4\uff1a</p> <p></p> <p>\u6709\u4e86\u4e0a\u9762\u4e24\u4e2a\u77e5\u8bc6\u70b9\u7684\u94fa\u57ab\uff0c\u6f2b\u53cd\u5c04\uff0c\u4e5f\u79f0\u4f5cLambertian Shading\uff0c\u7684\u8868\u8fbe\u65b9\u5f0f\u7ec8\u4e8e\u51fa\u73b0\u4e86\uff0c\u89c1\u4e0b\u56fe\u3002\u8fd9\u4e2a\u5f0f\u5b50\u5c55\u793a\u4e86\u7a76\u7adf\u6709\u591a\u5c11\u7684\u5149\uff0c\u6216\u8005\u8bf4\u80fd\u91cf\uff0c\u5230\u8fbe\u4e86Shading Point (\u800c\u4e0d\u662f\u4eba\u773c)\uff0c\u5e76\u5373\u5c06\u6563\u53d1\u51fa\u53bb\u3002\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u5176\u5b9e\u662findependent of view direction\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u7406\u60f3\u5316\u7684\u8ba4\u4e3a\u4e2d\uff0c\u6f2b\u53cd\u5c04\u7684\u5b9e\u8d28\u5176\u5b9e\u662fshading point\u5438\u6536\u4e86\u5165\u5c04\u5149\u7ebf\u7684\u80fd\u91cf\uff0c\u7136\u540e\u5747\u5300\u7684\u6563\u53d1\u51fa\u53bb\u3002\u5f53\u7136\uff0c\u5173\u4e8e\u989c\u8272\uff0c\u7269\u4f53\u8868\u9762\u989c\u8272\u6240\u62c6\u5206\u6210\u7684RGB\u4e09\u901a\u9053\u5404\u81ea\u7684diffuse coefficient\u5c31\u8574\u542b\u4e86\u989c\u8272\u7684\u4fe1\u606f\u3002\u5f53\u7136\uff0c\u8fd9\u4e2aBlinn-Phong Reflectance Model\u53ea\u662f\u4e00\u4e2a\u7ecf\u9a8c\u6a21\u578b\uff0c\u5e76\u4e0d\u662f\u5b8c\u5168\u7684\u771f\u662f\u7684\u7269\u7406\u6a21\u578b\uff0c\u66f4\u591a\u7684accuracy detail\u5728ray tracing\u91cc\u9762\u4f1a\u518d\u6b21\u63d0\u53ca\u3002</p> <p></p>"},{"location":"GAMES101/note.html#shading-pipeline-and-texture-mapping","title":"Shading, Pipeline and Texture Mapping","text":"<p>\u5728Blinn-Phong\u4e2d\uff0c\u8ba4\u4e3a\u5982\u679c\u4ea7\u751f\u4e86\u9ad8\u5149\uff0c\u662f\u56e0\u4e3a\u5149\u7ebf\u53d1\u751f\u4e86\u955c\u9762\u53cd\u5c04\uff0c\u7136\u540e\u4eba\u773c\u6b63\u597d\u80fd\u591f\u63a5\u53d7\u3002\u4f46\u662f\uff0cBlinn-Phong\u4e5f\u505a\u4e86\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u5904\u7406\uff1aV close to mirror dirction -&gt; half vector\uff08\u534a\u7a0b\u5411\u91cf\uff09near normal\u3002</p> <p></p> <p>\u9996\u5148\u662f\u6ce8\u610f\u5230\uff1a\u8fd9\u4e2a\u6a21\u578b\u8c8c\u4f3c\u662f\u6ca1\u6709\u8003\u8651l\u548cn\u7684\u5939\u89d2\u5e26\u6765\u7684\u80fd\u91cf\u635f\u5931\u95ee\u9898\uff0c\u56e0\u4e3a\u6bd5\u7adfBlinn-Phong\u53ea\u662f\u4e00\u4e2a\u7ecf\u9a8c\u6a21\u578b\uff0c\u8fd9\u91cc\u7701\u7565\u4e86\uff1b\u5176\u6b21\u662f\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528bivector\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5411\u91cf\u5f88\u597d\u7b97\uff0c\u5f0f\u5b50\u5982\u4e0a\uff0c\u8ba1\u7b97\u91cf\u4e0d\u5927\uff0c\u800c\u5982\u679c\u8ba1\u7b97\u4e86\u53cd\u5c04\u5149\u7ebf\u65b9\u5411\u5411\u91cfr\u548cv\u7684\u89d2\u5ea6\u4f59\u5f26\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6a21\u578b\u5c31\u662fPhong\u6a21\u578b\uff0ci.e.\uff0cBlinn Phong\u662fPhong\u6a21\u578b\u7684\u6539\u8fdb\u7248\uff1b\u6700\u540e\uff0c\u4e3a\u4ec0\u4e48\u6709p\u6307\u6570\u6b21\u5e42\uff1f\u56e0\u4e3a\u867d\u7136\u8bf4\u786e\u5b9e\uff0ccos\u80fd\u591f\u8868\u793a\u65b9\u5411\u9519\u5dee\u800c\u5e26\u6765\u7684\u80fd\u91cf\u635f\u5931\uff08\u8868\u73b0\u4e3a\u5149\u4e0d\u9ad8\u4eae\uff09\uff0c\u4f46\u662f\u73b0\u5b9e\u662f\uff1a\u6211\u5728bivector\u4e0e\u6cd5\u5411\u91cfn\u91cd\u5408\u7684\u65f6\u5019\u80fd\u591f\u770b\u5230\u9ad8\u4eae\uff0c\u800c\u5728\u504f\u79bb\u4e86\u4e00\u5b9a\u7684\u5c0f\u89c6\u89d2\u540e\uff0c\u5149\u4eae\u8fc5\u901f\u4e0b\u964d\uff0c\u4e00\u76f4\u5230\u504f\u5dee\u4e0d\u591a\u4e00\u5b9a\u89d2\u5ea6\u4e4b\u540e\uff0c\u5c31\u6ca1\u6709\u9ad8\u5149\u4e86\u3002\u56e0\u6b64\uff0c\u7528\\(cos^p\\alpha\\)\u7684\u51fd\u6570\u5f62\u72b6\u80fd\u591f\u66f4\u597d\u5730\u62df\u5408\u9ad8\u5149\u73b0\u8c61\u3002\u51fd\u6570\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u4e0b\u9762\u8fd9\u4e2a\u56fe\u5f88\u597d\u5730\u5c55\u793a\u4e86ks\u548cp\u4e24\u4e2a\u53c2\u6570\u5e26\u6765\u7684\u5f71\u54cd\uff1a</p> <p></p> <p>\u6700\u540e\u5269\u4e0b\u73af\u5883\u5149\uff1a\u5728Blinn Phong\u4e2d\u505a\u4e86\u4e00\u4e2a\u5927\u80c6\u7684\u5047\u8bbe\uff1a\u5168\u5c40\u7684\u73af\u5883\u5149\u90fd\u662f\u4e00\u6837\u7684\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u5e38\u6570\uff08\u4f46\u73b0\u5b9e\u5e76\u4e0d\u5982\u6b64\uff0c\u800c\u771f\u6b63\u7684\u73af\u5883\u5149\u5728\u4e4b\u540e\u7684\u5168\u5c40\u5149\u7167\u4e2d\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a </p> <p>\u90a3\u4e48\u6700\u540e\uff0cBlinn-Phong Reflection Model\u7ec8\u4e8e\u8bde\u751f\u4e86(\u5f53\u7136\uff0c\u8981\u6ce8\u610fn l h\u7b49\u5411\u91cf\u90fd\u662fnormalize\u540e\u7684\u5355\u4f4d\u5411\u91cf)\uff1a</p> <p></p> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u7740\u8272\u9891\u7387\uff0cShading Frequencies\u3002\u4e4b\u524d\u7684\u6a21\u578b\u4e00\u76f4\u5728\u63d0\u5230Shading Point\uff0c\u90a3\u4e48\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0cShading Point\u9009\u54ea\u4e9b\u70b9\u5462\uff1f\u4f9d\u6211\u4e2a\u4eba\u770b\u6cd5\uff0c\u9009Shading Point\u4e5f\u80fd\u7b97\u662f\u4e00\u79cdsampling\u3002\u90a3\u4e48Shading Frequencies\u662f\u5982\u4f55\u5f71\u54cd\u56fe\u50cf\u7684\u5462\uff1f\u5982\u4e0b\uff1a</p> <p></p> <p>\u4e0a\u9762\u4e09\u5f20\u56fe\u5bf9\u5e94\u7684\u662f\u4e09\u79cdShading Point\u91c7\u6837\u7b56\u7565\uff1a\u7b2c\u4e00\u5f20\u56fe\u662f\u4e00\u4e2a\u9762\u7247\u91cc\u9762\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u6cd5\u5411\u91cf\uff0c\u6311\u4e00\u4e2a\u70b9\u7b97\u51fa\u7740\u8272\uff0c\u7136\u540e\u8ba4\u4e3a\u9762\u7247\u91cc\u9762\u7684\u7740\u8272\u90fd\u662f\u4e00\u6837\u7684\uff1b\u7b2c\u4e8c\u5f20\u56fe\u662f\u6bcf\u4e00\u4e2atriangle\u7684\u4e09\u4e2a\u9876\u70b9\u90fd\u7b97\u51fa\u5404\u81ea\u6cd5\u5411\u91cf\uff08\u548b\u6c42\uff1f\u9a6c\u4e0a\u4f1a\u8bf4\uff09\uff0c\u7b97\u51fa\u4e09\u4e2a\u70b9\u7684\u7740\u8272\uff0c\u7136\u540e\u901a\u8fc7\u5dee\u503c\u65b9\u6cd5\uff08\u540e\u9762\u4f1a\u8bf4\uff09\u6765\u586b\u5145\u4e09\u89d2\u5f62\u5185\u90e8\u6bcf\u4e00\u4e2a\u70b9\u7684\u7740\u8272\uff0c\u8fd9\u6837\u5c31\u6709\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u8fc7\u6e21\u6548\u679c\uff1b\u6700\u540e\u662f\u6bcf\u4e00\u4e2a\u50cf\u7d20\u90fd\u8fdb\u884c\u7740\u8272\u7684\u8ba1\u7b97\u3002\u4e0a\u9762\u8fd9\u4e2a\u56fe\u7684\u6f14\u793a\u6548\u679c\u8fd8\u662f\u5f88\u660e\u663e\u7684\u3002</p> <p>\u7b2c\u4e00\u79cd\u5bf9\u5e94\u7684\u5c31\u662fFlat Shading\uff1aTriangle face is flat, so every point in it has the same normal vector\u3002\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u4e8e\u5149\u6ed1\u8868\u9762\u975e\u5e38\u4e0d\u53cb\u597d\u3002\u7b2c\u4e8c\u79cd\u5bf9\u5e94\u7684\u662fGouraud Shading\uff08\u9ad8\u6d1b\u5fb7\u7740\u8272\uff09\uff1aInterpolate colors from vertices across traingle (we can calculate the normal vector of each vertex)\u3002\u7b2c\u4e09\u79cd\u5bf9\u5e94\u7684\u662fPhong Shading\uff1aInterpolate normal vectors across each triangle and compute full shading model at each pixel\u3002</p> <p>\u90a3\u4e48\u7559\u4e0b\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a\u7b2c\u4e00\u4e2a\u662f\u9876\u70b9\u7684\u6cd5\u5411\u91cf\u600e\u4e48\u6c42\uff1f\u8fd9\u4e2a\u70b9\u80af\u5b9a\u88ab\u591a\u4e2a\u4e09\u89d2\u5f62\u6240\u5171\u6709\uff0c\u90a3\u4e48\u7528\u8fd9\u4e9b\u4e09\u89d2\u5f62\u7684\u6cd5\u5411\u91cf\u6765\u6c42\u4e0d\u5c31\u53ef\u4ee5\u4e86\u5417\uff1f\u4e8b\u5b9e\u4e5f\u662f\u5982\u6b64\uff0c\u4f46\u662f\u5173\u4e8e\u662f\u5411\u91cf\u7b80\u5355\u76f8\u52a0\uff0c\u8fd8\u662f\u6309\u7167\u4e09\u89d2\u5f62\u9762\u79ef\u52a0\u6743\u76f8\u52a0\uff0c\u5b9e\u9a8c\u8bc1\u660e\u540e\u8005\u6548\u679c\u66f4\u597d\uff0c\u4f46\u662f\u524d\u8005\u66f4\u4e3a\u7b80\u5355\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u662f\u5982\u4f55\u7528\u9876\u70b9\u6cd5\u5411\u91cf\u6c42\u51fa\u6bcf\u4e00\u4e2a\u50cf\u7d20\u7684\u6cd5\u5411\u91cf\u5462\uff1f\u8fd9\u9700\u8981\u7528\u5230\u91cd\u5fc3\u5dee\u503c(Barycentric Interpolation)\uff0c\u4e4b\u540e\u4f1a\u4ecb\u7ecd\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u4ecb\u7ecd\u6e32\u67d3\u7ba1\u7ebf\uff1aGraphic (Real-time Tendering) Pipeline\u3002\u8fd9\u91cc\u7684Pipeline\u5176\u5b9e\u662f\u4e00\u79cd\u6d41\u7a0b\uff0c\u4ecb\u7ecd\u4e86\u7a76\u7adf\u662f\u5982\u4f55\u8fdb\u884c\u6e32\u67d3\u7684\u3002\u5982\u4e0b\uff1a</p> <p></p> <p>\u5176\u4e2d\uff0cRasterization\u5305\u542b\u4e86Z-Buffering\uff0c\u5224\u65ad\u6bcf\u4e00\u4e2a\u50cf\u7d20\u7a76\u7adf\u662f\u7531\u54ea\u4e00\u4e2a\u4e09\u89d2\u5f62\u7ba1\uff1b\u5173\u4e8eshading\u4ec0\u4e48\u65f6\u5019\u8fdb\u884c\uff0c\u5982\u679c\u662fGouraud Shading\u90a3\u4e48\u5176\u5b9e\u5728Vertex Processing\u91cc\u9762\u5c31\u53ef\u4ee5\u8fdb\u884c\u7740\u8272\u4e86\uff0c\u800c\u5982\u679c\u662fPhong Shading\u90a3\u4e48\u5c31\u8981\u5728Fragment Processing\u91cc\u9762\u7740\u8272\u3002\u5173\u4e8e\u624b\u6413\u7740\u8272\u5668Shader\uff0c\u63a8\u8350\u7f51\u7ad9\uff1ahttp://shadertoy.com/view/ld3Gz2\u3002\u6700\u7ec8\u5e0c\u671b\u5b9e\u73b0\u7684\uff0c\u5c31\u662fHighly Complex 3D Scence in Realtime\u3002</p> <p>\u6700\u540e\u4ecb\u7ecdTexture Mapping\u3002\u4e4b\u524d\u7684Blinn Phong\u6a21\u578b\u4e2d\u63cf\u8ff0\u7684\u662f\u5149\u7684\u80fd\u91cf\uff0c\u4f46\u662f\u73b0\u5b9e\u4e2d\uff0c\u5728\u540c\u4e00\u4e2a\u5149\u6e90\u63a5\u6536\u4e0b\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u84dd\u8272\uff0c\u6216\u8005\u662f\u9ec4\u8272\u3002\u56e0\u6b64\uff0c\u8fd9\u5c31\u9700\u8981\u7eb9\u7406\u5c5e\u6027\u6765\u8868\u793a\u8fd9\u4e00\u90e8\u5206\u7684\u4fe1\u606f\u4e86\uff0c\u7ecf\u5178\u7684\u6709\u6f2b\u53cd\u5c04\u4e2d\u7684k_d\u53c2\u6570\u7b49\u3002\u600e\u4e48\u5b9a\u4e49\u4e00\u4e2a\u70b9\u7684\u5c5e\u6027\uff1f\u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\uff1a\u4e09\u7ef4\u7269\u4f53\u8868\u9762\u662f\u4e8c\u7ef4\u7684\u3002\u90a3\u4e48\u7eb9\u7406texture\u5c31\u662f\u4e00\u5f20\u56fe\uff0c\u6211\u4eec\u4f1a\u628a\u8fd9\u4e2a\u56fe\u201c\u8499\u5728\u4e09\u7ef4\u7269\u4f53\u8868\u9762\u201d\u3002</p> <p></p> <p>\u90a3\u4e48\u6211\u5c31\u5e0c\u671b\u6709\u4e00\u4e2a\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f7f\u5f97\uff1aEach triangle vertex is assigned to a texture coordinate(u,v)\u3002\u901a\u5e38\uff0c\u7ea6\u5b9a\u4fd7\u6210u v\u7684\u8303\u56f4\u662f[0, 1]\u3002\u8fd9\u79cd\u5bf9\u5e94\u5173\u7cfb\u600e\u4e48\u6c42\u5462\uff1f\u8fd9\u91cc\u76f4\u63a5\u9ed8\u8ba4\u6211\u4eec\u5c06\u4f1a\u77e5\u9053\u8fd9\u79cd\u5bf9\u5e94\u5173\u7cfb\u662f\u4ec0\u4e48\uff0c\u800c\u4e4b\u540e\u4f1a\u8bb2\u3002</p> <p></p> <p>\u6700\u6700\u540e\u7684\u4e00\u4e2a\u5751\uff1a\u5982\u4f55\u4e09\u89d2\u5f62\u5dee\u503c\uff1f\u4e09\u89d2\u5f62\u4e09\u4e2a\u9876\u70b9\u6709\u5404\u81ea\u7684\u5c5e\u6027\uff0c\u5982\u4f55\u5b9a\u4e49or\u7b97\u4e09\u89d2\u5f62\u5185\u90e8\u7684\u70b9\u5c5e\u6027\uff0c\u4f7f\u5f97\u4e09\u89d2\u5f62\u770b\u8d77\u6765\u6709\u4e00\u79cd\u8fc7\u6e21\u6548\u679c\uff1f\u4e0b\u8282\u8bfe\u4f1a\u8bf4\u3002</p>"},{"location":"GAMES101/note.html#texture-mapping","title":"Texture Mapping","text":"<p>\u9996\u5148\u4ece\u91cd\u5fc3\u5750\u6807\u5f00\u59cb\u8bf4\u8d77\uff0c\u8fd9\u662f\u4e3a\u4e86\u89e3\u51b3\u5982\u4f55\u5dee\u503c\u8ba1\u7b97\u7684\u95ee\u9898\u3002\u4e3a\u4ec0\u4e48\u6211\u4eec\u5e0c\u671b\u5dee\u503c\uff1f\u56e0\u4e3a\u6211\u4eec\u5e0c\u671bObtain smoothly varying values across triangles\u3002\u90a3\u4e48\u5dee\u503c\u4ec0\u4e48\u5462\uff1f\u6709Texture coordinates, colors, normal vectors\u7b49\u7b49\u5c5e\u6027\u3002\u90a3\u4e48\u5982\u4f55\u5dee\u503c\uff1f\u91cd\u5fc3\u5750\u6807\u5c31\u662f\u5173\u952e\u3002</p> <p>\u5728\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u5728\u4e09\u89d2\u5f62\u5185\u90e8\uff0c\u90a3\u4e48\u6ee1\u8db3\uff1a  \u5f53\u4e09\u4e2a\u53c2\u6570\u90fd\u662f1/3\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u70b9\u5c31\u662f\u91cd\u5fc3\u5750\u6807\u4e86\uff1b\u800c\u5982\u679c\u662f\u4efb\u610f\u4e00\u4e2a\u70b9\u5462\uff1f\u516c\u793a\u5982\u4e0b\uff1a</p> <p></p> <p>\u800c\u516c\u5f0f\u63a8\u5e7f\u4e00\u4e0b\uff1a\\(V=\\alpha V_A + \\beta V_B + \\gamma V_C\\)\uff0c\\(V_i\\) canbe positions, texture, coordinates, color, normal vector, depth, material attributes ...</p> <p>\u800c\u8fd9\u79cd\u64cd\u4f5c\u4e5f\u4f1a\u6709\u4e00\u5b9a\u7684\u95ee\u9898\uff1a\u6bd4\u5982\u8bf4texture magnification\u3002\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0cEasy Case\uff0c\u5982\u679c\u8bf4\u6211\u6709\u5f88\u9ad8\u5206\u8fa8\u7387\u7684\u56fe\uff0c\u4f46\u662f\u7eb9\u7406\u592a\u5c0f\u4e86\uff0c\u56e0\u6b64(x, y)\u6620\u5c04\u8fc7\u53bb\u540e\u7684(u, v)\u53ef\u80fd\u4e0d\u662f\u6574\u6570\uff0c\u56e0\u6b64\u8981round\u4e3a\u6574\u6570\uff0c\u90a3\u4e48\u8fd9\u5c31\u8868\u73b0\u4e3a\uff1a\u591a\u4e2a\u50cf\u7d20\u805a\u5728\u4e00\u8d77\u5bf9\u5e94\u7684\u662ftexture\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4ece\u800c\u9020\u6210\u4e86\u65b9\u683c\u7684\u611f\u89c9\u3002</p> <p></p> <p>\u5982\u4f55\u89e3\u51b3\u5462\uff1f\u53cc\u7ebf\u6027\u63d2\u503c\uff1aBilinear Interpolation\u3002\u89c1\u4e0b\u56fe\uff1a\u5982\u679c(x, y)\u843d\u5728\u4e86\u7ea2\u70b9\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5982\u679c\u91c7\u7528Nearest\u627e\u5230\u53f3\u4e0a\u89d2\u7684\u4e2d\u5fc3\u70b9\u6240\u5bf9\u5e94\u7684texel\uff0c\u90a3\u4e48\u5c31\u4f1a\u9020\u6210\u4e00\u4e2a\u540e\u679c\uff1a\u843d\u5728u11\u7684\u7ea2\u70b9\u7684\u5c5e\u6027\u503c\u90fd\u662f\u8fd9\u4e2atexel\u7684value\uff0cmagnification\u5c31\u51fa\u73b0\u4e86\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u770b\u8eab\u8fb9\u7684\u56db\u4e2a\u4e2d\u5fc3\u70b9\u3002\u6ce8\u610f\u5230s t\u53c2\u6570\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u5728\u4f7f\u7528\u5f15\u7d22\u4f5c\u4e3a\u5355\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u662f\u90fd\u662f\u5c0f\u4e8e1\u7684\u6570\u5b57\uff0c\u56e0\u4e3au01 u11\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6570\u5b57\u90fd\u662f1\uff08\u6309\u7406\u8bf4\uff0cu v\u5750\u6807\u7cfb\u8303\u56f4\u90fd\u662f0-1\uff0c\u8fd9\u91cc\u4e3a\u4e86\u5951\u5408texel\u7684\u6982\u5ff5\uff0c\u540c\u6837\u8d4b\u4e88\u4e86\u4e00\u5957\u5f15\u7d22\uff0c\u6211\u4eec\u8fd9\u91cc\u7684s t\u90fd\u662f\u7528\u5f15\u7d22\u6765\u4f5c\u4e3a\u57fa\u51c6\u7684\uff09\u3002\u56e0\u6b64\uff0c\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u5c31\u53ef\u4ee5\u8fdb\u884c\u7ebf\u6027\u5dee\u503c\u4e86\u3002\\(f(x,y)=lerp(t,u_o,u_1)\\)\u4ee3\u8868\u7ad6\u76f4\u65b9\u5411\u4e0a\u8fdb\u884c\u4e86\u4e00\u6b21\u7ebf\u6027\u63d2\u503c\uff0c\u800c\u53cc\u5411\u5dee\u503c\u5c31\u662f\u6c34\u5e73\u548c\u6570\u503c\u90fd\u8981\u5dee\u503c\u3002</p> <p></p> <p>\u90a3\u4e48\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0cHard Case\uff0c\u5982\u679c\u7eb9\u7406\u5f88\u5927\uff0c\u4f46\u662f\u6211\u7684\u56fe\u7684resolution\u8f83\u5c0f\uff0c\u90a3\u4e48texture magnification\u73b0\u8c61\u66f4\u4e25\u91cd\u3002\u5982\u4e0b\u56fe\u3002</p> <p></p> <p>\u95ee\u9898\u662f\u4ec0\u4e48\u5462\uff1f\u5df2\u4e0a\u56fe\u4e3a\u4f8b\uff0c\u8fd1\u5904\u7684\u50cf\u7d20\u6295\u5c04\u5230\u7684Texture\u91cc\u9762\u7684\u8986\u76d6\u9762\u79ef\u8f83\u5c0f\uff0c\u5c1a\u4e14\u8bef\u5dee\u4e0d\u5927\uff0c\u4f46\u662f\u8fdc\u5904\u7684\u50cf\u7d20\u6295\u5c04\u8fc7\u53bb\uff0c\u8986\u76d6\u7684\u9762\u79ef\u5f88\u5927\uff0c\u800c\u8fd9\u79cd\u60c5\u51b5\u91c7\u53d6\u5e73\u5747\u542c\u8d77\u6765\u5c31\u602a\u602a\u7684\u3002</p> <p></p> <p>\u90a3supersampling\u80fd\u4e0d\u80fd\u89e3\u51b3\u7684\uff1f\u80fd\uff0c\u5373\u964d\u4f4e\u8986\u76d6\u533a\u57df\uff0c\u4f46\u662f\u901f\u5ea6\u5f88\u6162\u3002\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\uff1f\u4e4b\u524d\u6211\u4eec\u90fd\u662f\u7528texel\u4e2d\u5fc3\u70b9\u4fe1\u606f\u6765\u8fdb\u884c\u5dee\u503c\uff0c\u662fPoint Query\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c1d\u8bd5\u8f6c\u5316\u4e3aRange Query\u3002\u56e0\u6b64\u5f15\u5165\u4e86Mipmap\u6982\u5ff5\uff0c\u53ef\u4ee5\u5e2e\u52a9\u8fdb\u884c\u8303\u56f4\u67e5\u8be2\uff1a\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u5feb\uff0c\u4f46\u53ea\u80fd\u505a\u8fd1\u4f3c\u7684\u6b63\u65b9\u5f62\u7684\u67e5\u8be2\u3002\u6211\u4eec\u5bf9\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u56fe\u5f62\u80fd\u591f\u9010\u6b65\u964d\u4f4e\u5206\u8fa8\u7387\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u8fd9\u4e00\u6b65\u53ef\u4ee5\u5728\u5f97\u5230texture\u4e4b\u540e\u63d0\u524d\u8ba1\u7b97\u51fa\u6765\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6784\u5efa\u89c6\u89c9\u91d1\u5b57\u5854\uff0c\u6216\u8005\u53eb\u505aMip Hierarchy\u3002\u90a3\u4e48\u6211\u4eec\u5f15\u5165\u7684\u989d\u5916\u5b58\u50a8\u662f\u591a\u5c11\u5462\uff1f\u5982\u679cLevel 0\u7684\u56fe\u7684\u5b58\u50a8\u91cf\u4e3a1\uff0c\u90a3\u4e48\u4e4b\u540e\u5176\u5b9e\u662f4/3\u3002</p> <p></p> <p>\u90a3\u4e48\u5982\u4f55\u77e5\u9053\u4e00\u4e2a\u50cf\u7d20\u6620\u5c04\u5230\u7eb9\u7406\u4e0a\u7684\u533a\u57df\u5927\u5c0f\u5462\uff1f\u53ef\u4ee5\u501f\u52a9\u50cf\u7d20\u90bb\u5c45\u4e2d\u5fc3\u70b9\u7684\u4fe1\u606f\u3002\u5982\u4e0b\uff0c\u6211\u5e0c\u671b\u77e5\u9053\u5de6\u8fb9\u5c0f\u6b63\u65b9\u5f62\u5728\u7eb9\u7406\u4e0a\u7684\u8986\u76d6\u9762\u79ef\uff0c\u90a3\u4e48\u501f\u52a9\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u4e94\u4e2a\u90fd\u6295\u5f71\u5230\u7eb9\u7406\u4e0a\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e94\u4e2a\u70b9\u5c31\u80fd\u5927\u6982\u77e5\u9053\u8986\u76d6\u9762\u79ef\u957f\u4ec0\u4e48\u6837\u5b50\u4e86\uff0c\u5982\u53f3\u56fe\u7ea2\u8272\u533a\u57df\u3002\u6211\u4eec\u7528\u8fb9\u957f\u4e3aL\u7684\u6b63\u65b9\u5f62\u62df\u5408\u8fd9\u4e00\u7247\u533a\u57df\uff0cL\u7684\u8fb9\u957f\u516c\u5f0f\u5982\u4e0b\uff08\u5176\u5b9e\u662f\u6295\u5f71\u540e\u7684(u,v)00\u523001,10\u4e24\u4e2a\u8ddd\u79bb\u4e2d\u7684\u6700\u5927\u503c\uff09\u3002\u90a3\u4e48\u5982\u4f55\u7528Mipmap\u6c42\u8fd9\u4e2a\u6b63\u65b9\u5f62\u533a\u57df\u8986\u76d6\u7684texture\u503c\u7684\u5e73\u5747\u503c\uff1f\u90a3\u4e48\u5de7\u5999\u4e4b\u5904\u5c31\u5728\u4e8e\uff0c\u6211\u77e5\u9053\u8fd9\u4e2a\u533a\u57df\u5728\\(D=Log_2 L\\)\u5c42\u7684Mipmap\u4e2d\u4e00\u5b9a\u4f1a\u7f29\u5c0f\u6210\u8fd1\u4f3c\u4e8e1\u4e2a\u50cf\u7d20\u7684\u5927\u5c0f\u533a\u57df\uff01\uff01\uff0c\u56e0\u6b64\u5c31\u80fd\u975e\u5e38\u5feb\u7684\u77e5\u9053\u8fd9\u4e2a\u5e73\u5747\u503c\u662f\u591a\u5c11\u3002</p> <p></p> <p>\u6211\u4eec\u63d0\u5230\uff0c\u662f\u8fd1\u4f3c\u4e0e\u4e00\u4e2a\u50cf\u7d20\uff0c\u5176\u5b9e\u5982\u679c\u9762\u79ef\u771f\u7684\u662f\u4e00\u4e2a\u50cf\u7d20\u7684\u8bdd\uff0c\u53ef\u80fd\u7ed9\u662f\u7c7b\u4f3c\u4e8e1.8\u5c42\u8fd9\u79cd\u6570\u636e\u3002\u90a3\u4e48\u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7b97\u6cd5\u53ef\u4ee5\u518d\u8fdb\u4e00\u6b65\uff1aTrilinear Interpolation\u3002\u5047\u5982\u8bf4\u662f1.8\u5c42\uff0c\u90a3\u4e48\u5c31\u662f1\u5c42\u7684\u4f4d\u7f6e\u8fdb\u884c\u4e00\u6b21\u53cc\u5411\u5dee\u503c\uff0c2\u5c42\u8fdb\u884c\u4e00\u6b21\u53cc\u5411\u5dee\u503c\uff0c\u4e24\u4e2a\u503c\u518d\u6839\u636eD\u503c\u8fdb\u884c\u5dee\u503c\u8ba1\u7b97\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u8fd9\u79cd\u4e09\u5dee\u503c\u542c\u8d77\u6765\u5f88\u6709\u9053\u7406\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6a21\u7cca\u5316\u3002\u56e0\u4e3a\u6bd5\u7adf\uff0cD\u8d8a\u9ad8\uff0c\u8d8a\u6a21\u7cca\uff08\u4e4b\u524d\u7684\u56fe\u4e5f\u80fd\u76f4\u89c2\u611f\u53d7\u5230\uff09\uff1b\u540c\u65f6\uff0c\u5f88\u591a\u50cf\u7d20\u6295\u5c04\u5230\u7eb9\u7406\u4e0a\u9762\uff0c\u8986\u76d6\u9762\u79ef\u7ec6\u957f\uff0c\u7528\u6b63\u65b9\u5f62\u6765\u62df\u5408\u5c31\u4f1aoverblur\u3002\u90a3\u4e48\u56e0\u6b64\u8bbe\u8ba1\u4e86Anisotropic Filtering\uff08\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\uff09\u3002\u5982\u4e0b\u56fe\uff1a\u6709\u4e86Ripmap\uff0c\u539f\u6765\u7ec6\u957f\u7684\u8986\u76d6\u533a\u57df\u53ef\u4ee5\u7528\u957f\u65b9\u5f62\u5305\u4f4f\uff0c\u90a3\u4e48overblur\u4f1a\u5f97\u5230\u7f13\u89e3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u7684\u5b58\u50a8\u91cf\u5c06\u4f1a\u662f\u539f\u6765\u7684\u4e09\u500d\u3002</p> <p></p> <p>\u540c\u65f6\uff0cTextures doesn't have to only represent colors\uff1a\u7eb9\u7406\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u6cd5\u5411\u91cf\uff08normal / bump mapping\uff09\u7b49\u3002\u90a3\u4e48\u6cd5\u7ebf\u8d34\u56fe\u662f\u5728\u5e72\u4ec0\u4e48\uff1fAdding surface detail without adding more triangles\u3002\u5982\u4e0b\u56fe\uff0c\u9ed1\u7ebf\u4e3a\u539f\u6765\u7684\u7269\u4f53\u8868\u9762\uff0c\u800c\u4f7f\u7528\u4e86\u8d34\u56fe\uff0c\u9ad8\u5ea6\u4f1a\u6270\u52a8\uff0c\u4ece\u800c\u8089\u773c\u53ef\u89c1\u5730\u6cd5\u5411\u91cf\u65b9\u5411\u5c06\u4f1a\u53d1\u751f\u53d8\u5316\u3002</p> <p></p> <p>\u90a3\u4e48\u6cd5\u5411\u91cf\u7684\u6270\u52a8\u6570\u5b66\u4e0a\u5982\u4f55\u8868\u793a\uff1f\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u7ef4\u5ea6\u4e0a\u7684\uff1a</p> <p></p> <p>\u62d3\u5c55\u52303D\u4e4b\u540e\uff0c\u516c\u793a\u5982\u4e0b\uff1a</p> <p></p> <p>\u6ce8\u610f\u8fd9\u4e2a\u516c\u5f0f\u662f\u9ed8\u8ba4\u771f\u5b9e\u4e16\u754c\u6cd5\u5411\u91cf\u662f(0, 0, 1)\uff01\u56e0\u6b64\u8fd9\u4e2a\u516c\u5f0f\u5728\u5b9e\u9645\u8fd0\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6cd5\u5411\u91cf\u6765\u8bf4\uff0c\u6211\u5148\u8f6c\u5316\u5b83\u5230\uff080, 0, 1\uff09\uff0c\u7136\u540e\u901a\u8fc7\u6cd5\u5411\u91cf\u8d34\u56fe\u8fdb\u884c\u6270\u52a8\uff0c\u7b97\u51fa\u4e00\u4e2a\u65b0\u7684\u6cd5\u5411\u91cf\uff0c\u7136\u540e\u8f6c\u5316\u5230\u539f\u6765\u4e16\u754c\u7684\u5750\u6807\u7cfb\u3002</p> <p>\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7ec8\u7a76\u662f\u6539\u53d8\u51e0\u4f55\uff0c\u4ec5\u4ec5\u662f\u6539\u53d8\u4e86\u6cd5\u5411\u91cf\u6b3a\u9a97\u4eba\u773c\u3002\u56e0\u6b64\u53c8\u53d1\u660e\u4e86\u4e00\u79cdDisplacement mapping\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5b9e\u9645\u4e0a\u662f\u79fb\u52a8\u4e86\u9876\u70b9\uff0c\u4f46\u662f\u4ee3\u4ef7\u662f\u9700\u8981supersampling\u3002</p>"},{"location":"GAMES101/note.html#geometry","title":"Geometry","text":""},{"location":"GAMES101/note.html#introduction","title":"Introduction","text":"<p>\u51e0\u4f55Geometry\u7684\u8868\u793a\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u5927\u81f4\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e00\u7c7b\u662f\u9690\u5f0f\u8868\u8fbe\uff08Implicit\uff09\uff0c\u5982algebraic surface\uff0clevel sets\uff0cdistance functions\u7b49\uff1b\u4e00\u7c7b\u662f\u663e\u793a\u8868\u8fbe\uff08Explicit\uff09\uff0c\u5982point cloud\uff0cpolygon mesh\uff0csubdivision\uff0cNURBS\u7b49\u3002</p> <p>\u4ec0\u4e48\u662f\u9690\u5f0f\u8868\u8fbe\uff1f\u6211\u4e0d\u77e5\u9053\u70b9\u7684\u5177\u4f53\u4f4d\u7f6e\uff0c\u4f46\u662f\u6211\u77e5\u9053\u70b9\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u5355\u4f4d\u7403\u4e0a\u7684\u70b9\u7684\u9690\u5f0f\u8868\u8fbe\u5c31\u53ef\u4ee5\u662f\uff1a\\(x^2 + y^2 + z^2 = 1\\)\u3002\u66f4\u4e00\u822c\u5730\uff0c\\(f(x,y,z) = 0\\)\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f18\u70b9\u662f\u5f88\u5bb9\u6613\u770b\u51fa\u6765\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u51e0\u4f55\u4f53\u91cc\u9762\uff0c\u800c\u7f3a\u70b9\u662f\u5f88\u96be\u753b\u51fa\u6765\uff0c\u5f88\u62bd\u8c61</p> <p>\u90a3\u4e48\u663e\u793a\u8868\u8fbe\u5462\uff1fAll points are given directly or via parameter mapping\u3002\u4f8b\u5982\uff1a\\(f(u,v) = (cosu, cosv, sinu)\\)\uff0c\u90a3\u4e48\u8fd9\u4ee3\u8868\u7684\u4e00\u7cfb\u5217\u70b9\u5c31\u662f\u663e\u793a\u8868\u793a\u51fa\u6765\u7684\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f18\u70b9\u662f\u5f88\u5bb9\u6613\u753b\u51fa\u6765\uff0c\u4f46\u662f\u5f88\u96be\u5224\u65ad\u4e00\u4e2a\u70b9\u5728\u4e0d\u5728\u51e0\u4f55\u4f53\u91cc\u9762\u3002</p> <p>\u90a3\u4e48Best Representation\u7a76\u7adf\u662f\u4ec0\u4e48\u5462\uff1fThat depends on tasks\uff01\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u66f4\u591a\u7684\u9690\u5f0f\u8868\u8fbe\u548c\u663e\u793a\u8868\u8fbe\u3002</p> <p>\u5bf9\u4e8eimplicit\u6765\u8bf4\uff0c\u7b2c\u4e00\u79cd\u662f\u6570\u5b66\u516c\u5f0f\u7684\u8868\u793a\uff0c\u8fd9\u975e\u5e38\u4e0d\u76f4\u89c2\uff1b\u7b2c\u4e8c\u79cd\u662fConstructive Solid Geometry(CSG)\uff0c\u5c1d\u8bd5\u7528\u57fa\u672c\u51e0\u4f55\u5f62\u4f53\u4e4b\u95f4\u7684Boolean operations\u53bb\u5408\u6210\u590d\u6742\u7684\u51e0\u4f55\u4f53\uff1b\u7b2c\u4e09\u79cd\u662f\u8ddd\u79bb\u51fd\u6570\uff1aGiving minimum distance (could be signed distance) from anywhere to object\uff0c\u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u8fdb\u8fd9\u4e2a\u77e5\u4e4e\u94fe\u63a5\uff1b\u7b2c\u56db\u79cd\u662fLevel Set Methods\uff0c\u601d\u60f3\u548c\u8ddd\u79bb\u51fd\u6570\u5176\u5b9e\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u662f\u8ddd\u79bb\u8868\u793a\u5728\u7f51\u683c\u91cc\u9762\u4e86\uff1b\u7b2c\u4e94\u79cd\u662f\u5206\u578b(Fractals)\uff0c\u4f8b\u5982\u96ea\u82b1\uff0c\u5f88\u50cf\u9012\u5f52\u3002</p> <p></p> <p></p> <p></p> <p>Implicit Representation\u7684\u4f18\u70b9\uff1a</p> <ul> <li>compact description(e.g, a function)</li> <li>certain queries easy(inside object, distance to surface)</li> <li>good for ray-to-surface intersection (more later)</li> <li>for simple shapes, exact description / no sampling error</li> <li>easy to handle changes in topology (e.g., handling fluid with distance function)</li> </ul> <p>\u540c\u65f6\u4e5f\u6709\u7f3a\u70b9\uff1adifficult to model complex shapes\u3002</p> <p>\u5bf9\u4e8eexplicit\u6765\u8bf4\uff0c\u7b2c\u4e00\u79cd\u662f\u70b9\u4e91\uff0c\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\uff0clist of points (x, y, z)\uff0c\u70b9\u4e91\u5bc6\u5ea6\u5f88\u5927\uff0c\u4e00\u822c\u70b9\u4e91\u4e4b\u540e\u4f1a\u8f6c\u5316\u4e3a\u591a\u8fb9\u5f62\u9762\u7247\uff1b\u7b2c\u4e8c\u79cd\u662f\u591a\u8fb9\u5f62\u9762\u7247\uff0cCG\u4e2d\u7ecf\u5e38\u4f7f\u7528\uff0c\u5e38\u7528Wavefront Object File (.obj) Format\u8868\u793a\u3002\u4ec0\u4e48\u662fobj Format\uff1f\u5176\u5b9e\u5c31\u662f\uff1aa text file that specifies vertices, normals, texture, coordinates and their connectivities\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>v\u4ee3\u8868\u7684\u662f\u9876\u70b9\u5750\u6807\uff0cvt\u4ee3\u8868\u7684\u662f\u4e00\u7cfb\u5217\u7684\u7eb9\u7406\u5750\u6807\uff0cvn\u4ee3\u8868\u4e00\u7cfb\u5217\u7684\u6cd5\u5411\u91cf\uff0c\u6700\u540ef\u4ee3\u8868\u7684\u662fv-vt-vn\u5bf9\u5e94\u5173\u7cfb\u3002</p>"},{"location":"GAMES101/note.html#curves-and-surfaces","title":"Curves and Surfaces","text":"<p>\u66f2\u7ebf\u4e3b\u8981\u4ee5Bezier Curves\u8d1d\u585e\u5c14\u66f2\u7ebf\u5448\u73b0\uff0c\u662f\u663e\u793a\u8868\u8fbe\u7684\u4e00\u79cd\uff08\u56e0\u4e3a\u5b9e\u8d28\u662f\u7528\u53c2\u6570\u76f4\u63a5\u8868\u793a\u66f2\u7ebf\uff09\uff0c\u601d\u60f3\u662f\u7528\u4e00\u7cfb\u5217\u63a7\u5236\u70b9\u53bb\u5b9a\u4e49\u66f2\u7ebf\uff0c\u5982\u4e0b\u56fe\uff1a\u4e00\u5f00\u59cbp0 p1\u4e24\u70b9\uff0ct0\u65f6\u523b\u65b9\u5411\u5982\u56fe\uff1b\u4e4b\u540ep0-&gt;p3\uff0cp2 p3\u65b9\u5411t1\u65b9\u5411\u5982\u56fe\uff0c\u90a3\u4e48\u8fd9\u6837\u5c31\u80fd\u753b\u51fa\u4e00\u6761\u56fe\u4e2d\u7684\u66f2\u7ebf\u3002\u6240\u4ee5\u8bf4\uff0cp0-&gt;p3\u66f2\u7ebf\uff0c\u7528p1 p2\u4e24\u70b9\u63a7\u5236\u3002</p> <p></p> <p>\u66f4\u7279\u6b8a\u5730\uff0c\u6211\u4eec\u8003\u8651\u4e09\u4e2a\u70b9\u60c5\u51b5\u4e0b\u7684\u8d1d\u585e\u5c14\u66f2\u7ebf\uff0c\u800c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u7b97\u6cd5\u53eb\u505ade Casteljau\u7b97\u6cd5\uff0c\u800c\u753b\u51fa\u7684\u66f2\u7ebf\u4e5f\u53eb\u505aquadratic Bezier curve\u3002\u5982\u56fe\uff1a\u9760\u8003\u8651b0\u53d8\u5316\u5230b2\uff0c\u540c\u65f6\u4e00\u5f00\u59cb\u7684b0b1\u548cb1b2\u5207\u7ebf\u65b9\u5411\u5df2\u7ecf\u56fa\u5b9a\u3002\u5176\u5b9e\u8fd9\u4e2a\u65f6\u5019\uff0c\u8111\u4e2d\u80fd\u8111\u8865\u4e00\u4e2a\u753b\u9762\u3002\u90a3\u4e48\u6839\u636e\u7b97\u6cd5\uff0c\u5982\u679cb0-&gt;b2\u770b\u6210\u4e00\u4e2a0-&gt;1\u7684\u8fc7\u7a0b\uff08\u6216\u8005\u8bf4\uff0c\u6d88\u8017\u7684\u65f6\u95f4\u662f1\uff09\uff0c\u90a3\u4e48t\u65f6\u523b\u7684\u70b9\u4f4d\u4e8e\\(b_0^2\\)\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5982\u4f55\u6c42\u51fa\u6765\u7684\u5462\uff1f</p> <p>\u9996\u5148b0b1\u4e0a\u9009\u51fa\\(b_0^1\\)\uff0c\u6ee1\u8db3\uff1a\\(b_0b_0^1/b_0^1b_1=t/(1-t)\\)\uff0c\u518d\u5728b1b2\u4e0a\u9009\u51fa\\(b_1^1\\)\uff0c\u6ee1\u8db3\uff1a\\(b_1b_1^1/b_1^1b2=t/(1-t)\\)\uff0c\u6700\u540e\u8fde\u63a5\\(b_0^1b_1^1\\)\uff0c\u5728\u4e0a\u9762\u9009\u51fa\\(b_0^2\\)\uff0c\u6ee1\u8db3\\(b_0^1b_0^2/b_0^2b_1^1=t/(1-t)\\)\u3002\u56e0\u6b64\u8bf4\uff0c\u8fd9\u662f\u663e\u793a\u8868\u8fbe\uff0c\u56e0\u4e3a\u5b9e\u8d28\u662f\u53c2\u6570\u8868\u8fbe\u3002</p> <p></p> <p>\u90a3\u4e48\u56db\u4e2a\u70b9\u5462\uff1f\u4f9d\u7136\u5982\u4e0b\uff0c\u56fe\u4e2d\u6ee1\u8db3\uff1a\\(b_0b_0^1/b_0^1b_1 = b_1b_1^1/b_1^1b_2 = b_2b_2^1/b_2^1b_3 \\\\ = b_0^1b_0^2/b_0^2b_1^1 = b_1^1b_1^2/b_1^2b_2^1 = b_0^2b_0^3/b_0^3/b_0^3b_1^2 = t/(1-t)\\)</p> <p></p> <p>\u7ebf\u6027\u4ee3\u6570\u4e0a\u8868\u793a\u5982\u4e0b\u56fe:</p> <p></p> <p>\u90a3\u4e48\u4e0a\u9762\u662f\u4e00\u4e2a\u63a7\u5236\u70b9\u7684\u60c5\u51b5\uff0c\u6839\u636equadratic\u4e00\u8bcd\u4e5f\u770b\u51fa\u6765\u4e86\uff0c\u8fd9\u662f\u4e8c\u9636\u7684\u60c5\u51b5\uff0c\u800c\u5982\u679c\u662f\u4e24\u4e2a\u63a7\u5236\u70b9\uff0c\u5c31\u662f3\u9636\u3002\u90a3\u4e48n\u9636\u516c\u5f0f\u5982\u4e0b\uff1aBerstein form of a Bezier curve of order n\u3002</p> <p></p> <p>\u8d1d\u585e\u5c14\u66f2\u7ebf\u6709\u4e24\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff1a\u7b2c\u4e00\u4e2a\u662f\u5bf9\u8d1d\u585e\u5c14\u66f2\u7ebf\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\uff0c\u53ea\u9700\u8981\u5bf9\u6240\u6709\u7684\u70b9\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\uff0c\u7136\u540e\u518d\u8fd0\u884c\u4e00\u6b21de Casteljau\u7b97\u6cd5\u5373\u53ef\uff0c\u800c\u4e0d\u9700\u8981\u5bf9\u539f\u6765\u8fd9\u4e2a\u66f2\u7ebf\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\uff1b\u7b2c\u4e8c\u4e2a\u662f\u8d1d\u585e\u5c14\u66f2\u7ebf\u4e00\u5b9a\u5728\u63a7\u5236\u70b9\u4eec\u6240\u5f62\u6210\u7684\u51f8\u5305\uff08Convex Hull\uff09\u4e4b\u5185\uff08\u53ef\u4ee5\u76f4\u89c2\u770b\u51fa\u6765\uff09\u3002</p> <p>\u4f46\u662f\u5982\u679c\u5f53\u8d1d\u585e\u5c14\u66f2\u7ebf\u9762\u4e34\u9ad8\u9636\u7684\u60c5\u51b5\uff0c\u5373\u63a7\u5236\u70b9\u5f88\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u7684\u65f6\u5019\u66f2\u7ebf\u4e0d\u80fd\u5f88\u597d\u7684\u53cd\u6620\u63a7\u5236\u70b9\u7684\u8d70\u52bf\uff0c\u5982\u4e0b\u56fe\u3002\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u4e00\u822c\u56db\u4e2a\u63a7\u5236\u70b9\u63a7\u5236\u4e00\u6761\u8d1d\u585e\u5c14\u66f2\u7ebf\uff0c\u5373\uff1aPeicewise cubic Bezier the most common technique\u3002\u90a3\u4e48\u5982\u679cpiecewise\u64cd\u4f5c\uff0c\u90a3\u4e48\\(C^0\\)\u8fde\u7eed\u662f\u4fdd\u8bc1\u4e86\uff0c\u5373\u4e24\u4e2a\u8d1d\u585e\u5c14\u66f2\u7ebf\u5171\u7528\u4e00\u4e2a\u7aef\u70b9\uff0c\u4f46\u662f\u4f1a\u4e0d\u7981\u95ee\uff1a\u5982\u679c\u5e0c\u671b\u4e00\u9636\u5bfc\u4e5f\u8fde\u7eed\u5462\uff1f\u5373\u5207\u7ebf\u4e5f\u662f\u5171\u7528\u7684\uff1f\u90a3\u4e48\u8fd9\u5c31\u662f\\(C^1\\)\u8fde\u7eed\uff0c\u751a\u81f3\u53ef\u4ee5\u66f4\u9ad8\u9636\u8fde\u7eed\uff0c\u8fd9\u53eb\u505a\u66f2\u7387\u8fde\u7eed\u3002\u4e0d\u540c\u7c7b\u578b\u7684\u8fde\u7eed\uff0c\u6709\u5404\u81ea\u8fdb\u4e00\u6b65\u7684\u590d\u6742\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4e0d\u8fc7\u591a\u6d89\u53ca\u3002</p> <p></p> <p>\u800c\u66f2\u9762\uff08Surface\uff09\u8868\u8fbe\u660e\u663e\u66f4\u4e3a\u590d\u6742\uff0c\u5f53\u7136\u4e5f\u662f\u7528\u7684\u662f\u8d1d\u585e\u5c14\u66f2\u9762\u3002\u89c1\u4e0b\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u89c2\u7406\u89e3\u8d1d\u585e\u5c14\u66f2\u9762\u662f\u600e\u4e48\u5f62\u6210\u7684\u3002\u90a3\u4e48\u6570\u5b66\u4e0a\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f</p> <p></p> <p>\u5728\u4e00\u4e2a\u65b9\u5411\u4e0a\u9762\uff0c\u53ef\u4ee5\u5f97\u5230\u56db\u6761\u8d1d\u585e\u5c14\u66f2\u7ebf\u3002\u4ece\u540c\u4e00\u7aef\u540c\u65f6\u51fa\u53d1\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u56db\u4e2a\u70b9\uff0c\u8fd9\u56db\u4e2a\u70b9\u5c06\u4f1a\u5728\u53e6\u4e00\u4e2a\u65b9\u5411\u4e0a\u5f62\u6210\u4e00\u4e2a\u4e2a\u8d1d\u585e\u5c14\u66f2\u7ebf\uff0c\u56e0\u6b64\u8fd9\u56db\u4e2a\u70b9\u626b\u5b8c\uff0c\u66f2\u9762\u5c31\u8bde\u751f\u4e86\u3002</p> <p></p> <p></p>"},{"location":"GAMES101/note.html#mesh-operation","title":"Mesh Operation","text":"<p>Mesh Division\u662f\u4e09\u89d2\u5f62\u7ec6\u5316\uff0c\u4ece\u800c\u63d0\u9ad8\u5206\u8fa8\u7387\uff1bMesh Simplification\u7b80\u5316\u4e09\u89d2\u5f62\uff0c\u4f46\u662f\u7b80\u5316\u8981\u6709\u4e00\u5b9a\u7684\u89c4\u5219\uff1bMesh Regularization\u4e09\u89d2\u5f62\u53ef\u80fd\u6709\u5927\u6709\u5c0f\uff0c\u6e32\u67d3\u4e0a\u5c31\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u9ebb\u70e6\u3002</p> <p>Mesh Division\u600e\u4e48\u505a\uff1f\u600e\u4e48\u5f15\u5165\u66f4\u591a\u7684\u4e09\u89d2\u5f62\uff1f\u4e09\u89d2\u5f62\u8d8a\u591a\uff0c\u8d8a\u80fd\u62df\u5408\u51fa\u8f83\u4e3a\u5149\u6ed1\u7684\u6a21\u578b\u3002\u8868\u9762\u7ec6\u5206\u4e2d\u7684\u4e00\u79cd\u4ee3\u8868\u7c7b\u578b\u2014\u2014Loop Division\uff08\u548c\u5faa\u73af\u6ca1\u6709\u5173\u7cfb\uff09\u2014\u2014\u5206\u4e3a\u4e24\u6b65\uff1a\u7b2c\u4e00\u6b65\u662f\u589e\u52a0\u4e09\u89d2\u5f62\u6570\u91cf\u3002\u5c31\u6bd4\u5982\u8bf4\u53d6\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u4e2d\u70b9\uff0c\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u5f62\u6210\u4e86\u56db\u4e2a\u4e09\u89d2\u5f62\u3002\u7b2c\u4e8c\u6b65\u662fAssign new vertex positions according to weights\u3002\u5982\u679c\u4ec5\u4ec5\u8fde\u6210\u56db\u4e2a\u4e09\u89d2\u5f62\uff0c\u90a3\u4e48\u5f88\u96be\u4ea7\u751f\u5149\u6ed1\u7684\u6548\u679c\uff0c\u8fd9\u53ef\u60f3\u800c\u77e5\uff0c\u56e0\u4e3a\u5e73\u9762\u8fd8\u662f\u90a3\u4e2a\u5e73\u9762\u3002\u56e0\u6b64\u6211\u5e0c\u671b\u65b0\u4ea7\u751f\u7684\u9876\u70b9\u4e0e\u539f\u6765\u7684\u65e7\u9876\u70b9\u90fd\u80fd\u591f\u4ea7\u751f\u4e00\u5b9a\u7684\u4f4d\u79fb\uff0c\u4ece\u800c\u4e3a\u62df\u5408\u5149\u6ed1\u5e73\u9762\u63d0\u4f9b\u53ef\u80fd\u6027\u3002</p> <p></p> <p>\u5bf9\u4e8e\u65b0\u7684\u9876\u70b9\u6765\u8bf4\uff0c\u66f4\u65b0\u89c4\u5219\u5982\u4e0b\u56fe\uff1b\u81f3\u4e8e\u6743\u91cd\u4e3a\u4ec0\u4e48\u957f\u8fd9\u4e2a\u6837\u5b50\uff0c\u4e2d\u95f4\u7684\u767d\u8272\u3001\u5c06\u8981\u66f4\u65b0\u4f4d\u7f6e\u7684\u70b9\u79bbA B\u70b9\u8f83\u8fd1\uff0c\u79bbC D\u8f83\u8fdc\uff0c\u56e0\u6b64A B\u70b9\u5728\u5750\u6807\u4e0a\u7684\u8d21\u732e\u5e94\u8be5\u662f\u8f83\u9ad8\u7684\u3002</p> <p></p> <p>\u90a3\u4e48\u65e7\u9876\u70b9\u5462\uff1f\u8fd9\u4e2a\u65e7\u9876\u70b9\u8981\u4f30\u8ba1\u5230\u81ea\u5df1\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u53c8\u8981\u8003\u8651\u5230\u5468\u56f4\u7684\u70b9\u7684\u5750\u6807\u3002\u56e0\u6b64\u89c4\u5219\u5982\u4e0b\uff1a\u5176\u4e2dvertex degree\u4ee3\u8868\u8fd9\u4e2a\u9876\u70b9\u88ab\u51e0\u4e2a\u4e09\u89d2\u5f62\u5171\u7528\u3002</p> <p></p> <p>\u4ece\u4e0b\u9762\u8fd9\u5f20\u56fe\u53ef\u4ee5\u770b\u51fa\u6765\uff1aLoop Division\u8868\u73b0\u5f88\u597d\u3002</p> <p></p> <p>\u90a3\u4e48Mesh Simplification\u7684goal\u662freduce number of mesh elements while maintaing the overall shape\u3002\u6709\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4e0d\u5e0c\u671b\u4e09\u89d2\u5f62\u90a3\u4e48\u591a\uff0c\u6bd4\u5982\u8bf4\u6e38\u620f\u91cc\u9762\uff0c\u4f1a\u6709\u7b80\u5316\u7684\u9700\u6c42\u3002\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u65b9\u6cd5\u53eb\u505a\u8fb9\u574d\u584c\uff08edge collapsing\uff09\u3002\u4f46\u662f\u8fd9\u7edd\u975e\u7b80\u5355\u7684\u4e8b\u60c5\uff1a\u54ea\u4e9b\u8fb9\u9700\u8981\u574d\u584c\uff1f\u56e0\u6b64\u9700\u8981\u5f15\u5165\u4e00\u79cdmetric: Quadric Error Metric\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p></p>"},{"location":"GAMES101/note.html#shadow-mapping","title":"Shadow Mapping","text":"<p>\u5728shading\u4e2d\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u7740\u8272\u4e2d\u65e0\u6cd5\u5c55\u793a\u5f71\u5b50\uff0c\u56e0\u4e3a\u4f20\u7edf\u5149\u6805\u5316\u5f88\u96be\u5904\u7406\u5168\u5c40\u65b9\u9762\u7684\u4e8b\u60c5\u3002Shadow Mapping\u6280\u672f\u5b9e\u65bd\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u77e5\u9053\u573a\u666f\u7684geometry\u7684\uff0c\u800c\u4e14\u5fc5\u987b\u5c3d\u53ef\u80fd\u9632\u8d70\u6837\u3002\u90a3\u4e48\u5173\u952eidea\u662f\u4ec0\u4e48\u5462\uff1fThe points NOT in shadow must be seen both by the light and by the camera.\u7528\u8fd9\u79cd\u601d\u60f3\u5904\u7406\u5f97\u5230\u7684\u70b9\u5149\u6e90\u573a\u666f\u4e0b\u7684\u9634\u5f71\u6211\u4eec\u79f0\u4e3a\u786c\u9634\u5f71\u3002</p> <p>\u7b2c\u4e00\u6b65\uff1a\u7ad9\u5728\u70b9\u5149\u6e90\u7684\u89c6\u89d2\u770b\u573a\u666f\uff0c\u5e76\u8bb0\u5f55\u770b\u5230\u7684image\u7684depth\u3002</p> <p></p> <p>\u7b2c\u4e8c\u6b65\uff1a\u4eba\u773c\u770b\u89c1\u7684image\u7684\u70b9\u91cd\u65b0\u6295\u5c04(reproject)\u7ed9\u70b9\u5149\u6e90\u7684\u89c6\u91ce\uff0c\u7136\u540e\u63a8\u7b97\u51fa\u5b83\u5e94\u8be5\u5728\u70b9\u5149\u6e90image\u4e0a\u7684\u54ea\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u6bd4\u8f83\u70b9\u5149\u6e90\u8bb0\u5f55\u7684\u6df1\u5ea6\u548c\u4eba\u773c\u770b\u5230\u7684\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u70b9\u5149\u6e90\u7684\u5b9e\u9645\u6df1\u5ea6\uff1a\u5982\u679c\u8bb0\u5f55\u6bd4\u5b9e\u9645\u5c0f\uff0c\u8bf4\u660e\u6211\u770b\u5230\u7684\u8fd9\u4e2a\u70b9\u5e94\u8be5\u662f\u88ab\u906e\u6321\u4f4f\u7684\uff1b\u53cd\u4e4b\uff0c\u8fd9\u4e2a\u70b9\u5e94\u8be5\u80fd\u88ab\u70b9\u5149\u6e90\u7167\u5230\uff0c\u8bf4\u660e\u4e0d\u5728\u9634\u5f71\u4e2d\u3002\u8fd9\u5c31\u662f\u4e00\u79cdShadow Mapping\u3002</p> <p></p> <p>\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u662f\u6709\u81ea\u5df1\u7684\u95ee\u9898\uff1a\u5047\u5982\u8bf4\u5149\u7ebf\u88ab\u70b9A\u906e\u6321\uff0c\u800c\u5b83\u88ab\u770b\u89c1\uff0c\u6295\u5f71\u56de\u53bb\uff0c\u7136\u540e\u5224\u65ad\u70b9A\u7684\u6df1\u5ea6\u548c\u70b9\u5149\u6e90\u8bb0\u5f55\u7684\u6df1\u5ea6\u8c01\u5927\u8c01\u5c0f\uff0c\u800c\u6d6e\u70b9\u6570\u7684\u8fd0\u7b97\u4e0e\u6bd4\u8f83\u5c31\u4f1a\u51fa\u73b0\u504f\u5dee\uff0c\u5c24\u5176\u662f\u5224\u65ad\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49\u3002\u56e0\u6b64shadow mapping\u4f1a\u7565\u6709\u504f\u5dee\uff0c\u5c24\u5176\u662f\u5149\u7ebf\u88ab\u906e\u6321\u7684\u90a3\u4e9b\u90e8\u5206\u3002\u800c\u4e14\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u63d0\u524d\u8fdb\u884c\u4e00\u6b21\u70b9\u5149\u6e90\u7684\u5149\u6805\u5316\u4e0eZ-buffering\u3002\u800c\u6709\u786c\u9634\u5f71\uff0c\u90a3\u4e48\u5c31\u6709\u8f6f\u9634\u5f71\u3002\u5982\u4e0b\uff1a\u5b83\u7684\u5f71\u5b50\u7684\u53d8\u5316\u662f\u6e10\u8fdb\u7684\uff0c\u800c\u4e0d\u662f\u7a81\u5140\u5730\u8f6c\u53d8\u3002\u8fd9\u79cd\u60c5\u51b5\u600e\u4e48\u4ea7\u751f\u7684\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u662f\u56e0\u4e3a\u5149\u6e90\u4e0d\u662f\u70b9\u5149\u6e90\uff0c\u800c\u662f\u6709\u4f53\u79ef\u7684\uff08\u6ca1\u9519\uff0c\u5982\u679c\u662f\u70b9\u5149\u6e90\uff0c\u90a3\u4e48\u4e0d\u53ef\u80fd\u6709\u8f6f\u9634\u5f71\uff09\u3002</p> <p></p>"},{"location":"GAMES101/note.html#ray-tracing","title":"Ray Tracing","text":""},{"location":"GAMES101/note.html#whitted-style-ray-tracing","title":"Whitted-Style Ray Tracing","text":"<p>\u4e3a\u4ec0\u4e48\u8981\u5149\u7ebf\u8ffd\u8e2a\uff1f\u4e00\u5b9a\u662f\u5149\u6805\u5316\u6709\u4e00\u4e9b\u7f3a\u70b9\uff1aRasterization couldn't handle global effects well\u3002\u6bd4\u5982\u8bf4\u8f6f\u9634\u5f71\uff0cglossy reflection\uff08\u6709\u955c\u9762\u53cd\u5c04\u7684\u6548\u679c\uff0c\u4f46\u662f\u4e0d\u5b8c\u5168\u662f\uff0c\u6709\u4e00\u5b9a\u7684\u7c97\u7cd9\uff09\uff0c\u4ee5\u53caIndirect illumination\uff08\u95f4\u63a5\u5149\u7167\uff0c\u5982\u5149\u7167\u53ef\u80fd\u4f1a\u53cd\u5f39\u591a\u6b21\u624d\u4f1a\u6700\u7ec8\u8fdb\u5165\u4eba\u773c\uff1b\u800c\u5149\u6805\u5316\uff0c\u5982Blinn-Phong\u6a21\u578b\u53ea\u8003\u8651\u4e00\u6b21\u7684\u53cd\u5c04\uff09\u3002\u540c\u65f6\uff1aRasterization is fast, but quality is relatively low\uff0c\u56e0\u4e3a\u5149\u6805\u5316\u53ea\u662f\u4e00\u79cd\u8fd1\u4f3c\u7684\u3001\u540c\u65f6\u5feb\u901f\u7684\u65b9\u6cd5\u3002\u5149\u7ebf\u8ffd\u8e2a\u76f8\u53cd\uff1aRay Tracing is accurate, but is very slow\uff0c\u56e0\u6b64\u7ecf\u5e38\u5728off-line\u7684\u5e94\u7528\u573a\u666f\u4e2d\u4f7f\u7528\uff0c\u5982\u5236\u4f5c\u4e00\u90e8\u7cbe\u7f8e\u7684\u7535\u5f71\u3002</p> <p>\u6700\u57fa\u7840\u7684\u5149\u7ebf\u8ffd\u8e2a\u7b97\u6cd5\uff0c\u9996\u5148\u9700\u8981\u5b9a\u4e49\u5149\u7ebf\uff0c\u6709\u4e09\u4e2a\u6838\u5fc3\u5173\u952e\uff1a</p> <ul> <li>\u5149\u7ebf\u6cbf\u76f4\u7ebf\u4f20\u64ad\uff08\u867d\u7136\u7269\u7406\u73b0\u5b9e\u5e76\u4e0d\u5982\u6b64\uff09</li> <li>\u5149\u7ebf\u4e4b\u95f4\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\uff08\u76f8\u4e92\u4e4b\u95f4\u4e0d\u5f71\u54cd\uff0c\u867d\u7136\u7269\u7406\u73b0\u5b9e\u5e76\u4e0d\u5982\u6b64\uff09</li> <li>\u5149\u7ebf\u4ece\u5149\u6e90\u51fa\u53d1\uff0c\u6700\u7ec8\u5230\u8fbe\u773c\u775b\uff08\u5f53\u7136\uff0c\u5149\u7ebf\u4f20\u64ad\u6709\u53ef\u9006\u6027reciprocity\uff0c\u201c\u4f60\u51dd\u89c6\u6df1\u6e0a\uff0c\u6df1\u6e0a\u4e5f\u5728\u51dd\u89c6\u4f60\u201d\uff09</li> </ul> <p>1968\u5e74\uff0c\u63d0\u51fa\u4e86\u5149\u7ebf\u6295\u5c04\uff08Ray Casting\uff09\u7684\u65b9\u6cd5\uff1a\u5728\u6444\u50cf\u673a\u9762\u524d\uff0c\u8ba4\u4e3a\u6709\u4e00\u4e2a\u6210\u50cf\u6846\uff0c\u6846\u91cc\u9762\u6709\u5f88\u591a\u7684\u50cf\u7d20\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u50cf\u7d20\u4e2d\u5fc3\u70b9\u548c\u6444\u50cf\u673a\u8fde\u7ebf\uff0c\u53d1\u5c04\u51fa\u4e00\u6761\u5149\u7ebf\uff08\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u8ba4\u4e3a\uff1fReciprocity\uff01\uff09\uff0c\u8fd9\u4e2a\u5149\u7ebf\u53ef\u80fd\u4f1a\u548c\u7269\u4f53\u5728\u4e00\u4e2a\u70b9\u4e0a\u76f8\u649e\uff1b\u7136\u540e\u8fd9\u4e2a\u70b9\u548c\u5149\u6e90\u8fde\u7ebf\uff0c\u5224\u65ad\u662f\u5426\u88ab\u906e\u6321\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u906e\u6321\uff0c\u90a3\u4e48\u5c31\u5f62\u6210\u4e86\u4e00\u6761\u6709\u6548\u7684\u5149\u8def\uff0c\u4ece\u89d2\u5ea6\u548c\u8ddd\u79bb\u80fd\u591f\u8ba1\u7b97\u51fa\u5149\u7684\u80fd\u91cf\uff0c\u4ece\u800c\u8ba1\u7b97\u7740\u8272\uff1b\u540c\u65f6\uff0c\u8fd9\u6761\u5149\u7ebf\u4f1a\u5728\u649e\u70b9\u4e0a\u9762\u53d1\u751f\u955c\u9762\u53cd\u5c04\uff08\u5173\u952e\u5047\u8bbe\uff0c\u5f53\u7136\u53ef\u80fd\u4f1a\u6709\u80fd\u91cf\u635f\u5931\uff09\uff0c\u7ee7\u7eed\u8d70\u4e0b\u53bb\uff0c\u53ef\u80fd\u518d\u6b21\u548c\u4e00\u4e2a\u7269\u4f53\u76f8\u649e\uff0c\u7136\u540e\u91cd\u590d\u4e4b\u524d\u6240\u8bf4\u7684\u201c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5f62\u6210\u6709\u6548\u5149\u8def\u201d\u6b65\u9aa4\u3002\u5f53\u7136\uff0c\u5728\u5224\u65ad\u76f8\u649e\u5728\u54ea\u4e00\u4e2a\u70b9\u7684\u95ee\u9898\u4e0a\uff0c\u4e00\u5b9a\u8981\u770b\u8fd9\u6761\u5c04\u7ebf\u4e0a\u90a3\u4e2a\u7269\u4f53\u4f18\u5148\u548c\u5c04\u7ebf\u76f8\u649e\u5728\u54ea\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u4e00\u6765\u53cd\u800c\u5f88nice\uff0c\u56e0\u4e3a\u907f\u514d\u4e86\u5149\u6805\u5316\u4e2d\u7684Z-buffering\u64cd\u4f5c\u3002\u4e0b\u56fe\u751f\u52a8\u5730\u5c55\u793a\u4e86\u4e0a\u8ff0\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u56fe\u4e2d\u5149\u7ebf\u53ea\u5f39\u5c04\u4e00\u6b21\uff1a</p> <p></p> <p>\u4e0a\u8ff0\u7684\u6a21\u578b\u4e2d\uff0c\u5149\u7ebf\u53ea\u5f39\u5c04\u4e00\u6b21\u3002\u90a3\u4e48\u5f39\u5c04\u5f88\u591a\u6b21\u5462\uff1f\u8fd9\u5c31\u662fRecursive Ray Tracing (Whitted-Style) Algorithm\u3002\u8fd9\u4e2a\u6a21\u578b\u7684\u5f3a\u5927\u4e4b\u5904\u5728\u4e8e\uff1a\u5149\u7ebf\u4e0d\u6b62\u5f39\u5c04\u4e00\u6b21\uff0c\u800c\u4e14\u4e5f\u4e0d\u6b62\u53ef\u4ee5\u955c\u9762\u53cd\u5c04\uff08\u5f53\u7136\u53ef\u80fd\u6709\u80fd\u91cf\u635f\u5931\uff09\uff0c\u751a\u81f3\u53ef\u4ee5\u6709\u6298\u5c04\uff08\u4f8b\u5982\u73bb\u7483\u6750\u8d28\uff0c\u5f53\u7136\u53ef\u80fd\u6709\u80fd\u91cf\u635f\u5931\uff09\uff1b\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u5149\u7ebf\u53ef\u4ee5\u4e00\u76f4\u5f39\u5c04\u4e0b\u53bb\u3002\u5982\u4e0b\u56fe\uff08\u540c\u65f6\u6f14\u793a\u4e86\u53cd\u5c04\u548c\u6298\u5c04\u7684\u73b0\u8c61\uff09\uff1a</p> <p></p> <p>\u4e0a\u8ff0\u7406\u8bba\u542c\u8d77\u6765\u5f88\u5b8c\u7f8e\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u5f88\u591a\u7684\u6280\u672f\u7ec6\u8282\u9700\u8981\u5ba2\u670d\u3002\u9996\u5148\u7b2c\u4e00\u70b9\uff1a\u5982\u4f55\u5224\u65ad\u5149\u7ebf\u76f8\u649e\uff08Ray Intersection\uff09\uff1f\u6211\u4eec\u5e0c\u671b\u6c42\u5149\u7ebf\u4e0e\u7269\u4f53\u7684\u7b2c\u4e00\u4e2a\u76f8\u4ea4\u70b9\u3002\u5149\u7ebf\u4e00\u822c\u8ba4\u4e3a\u662f\uff1a\u4ece\u5b9a\u70b9\u6309\u7167\u4e00\u4e2a\u65b9\u5411\u51fa\u53d1\uff0c\u7528\u6570\u5b66\u516c\u5f0f\u8868\u8fbe\u5c31\u662f\uff1a  \u5bf9\u4e8e\u4e00\u4e2a\u7269\u4f53\u7684\u8868\u9762\uff0c\u5982\u679c\u4f7f\u7528\u7684\u662f\u9690\u5f0f\u8868\u8fbe\uff1a  \u90a3\u4e48\u5229\u7528\u89e3\u51fa\u7684\u5b9e\u6570\u6b63\u6839t\u5c31\u80fd\u6c42\u51fa\u4ea4\u70b9\u7684\u5750\u6807\u3002\u90a3\u4e48\u5982\u679c\u662f\u663e\u793a\u8868\u8fbe\uff1a\u4e09\u89d2\u5f62\u9762\u7247\u5462\uff1f\u5982\u679c\u76f4\u63a5\u5224\u65ad\u4e00\u6761\u5c04\u7ebf\u548c\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u4e09\u89d2\u5f62\u67090\u62161\u4e2a\u4ea4\u70b9\uff0c\u660e\u663e\u6bd4\u8f83\u9ebb\u70e6\u3002\u4e8e\u662f\u4eba\u4eec\u60f3\u5230\u4e86\u4e00\u4e2a\u5de7\u5999\u7684\u65b9\u6cd5\uff1a\u8fc7\u8fd9\u4e2a\u4e09\u89d2\u5f62\u7247\u9762\u5ef6\u4f38\u51fa\u4e00\u4e2a\u5e73\u9762\uff0c\u8fd9\u4e00\u70b9\u5f88\u597d\u5b9e\u73b0\uff0c\u6709\u6cd5\u5411\u91cf\u548c\u4e09\u89d2\u5f62\u7684\u4e00\u4e2a\u9876\u70b9\u5c31\u80fd\u5b9e\u73b0\uff0c\u7136\u540e\u5c04\u7ebf\u5fc5\u5b9a\u548c\u8fd9\u4e2a\u5e73\u9762\u76f8\u4ea4\uff08\u5e73\u884c\u60c5\u51b5\u4e0d\u4e88\u4ee5\u8ba8\u8bba\uff09\uff1b\u7136\u540e\u518d\u5224\u65ad\u8fd9\u4e2a\u4ea4\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8\uff0c\u8fd9\u4e5f\u5f88\u597d\u5b9e\u73b0\uff0c\u4e09\u4e2a\u53c9\u4e58\u5c31\u80fd\u5224\u65ad\u3002</p> <p></p> <p>\u5f53\u7136\uff0c\u5982\u4f55\u66f4\u5feb\u7684\u6c42\u51fa\u5c04\u7ebf\u4e0e\u5e73\u9762\u7684\u4ea4\u70b9\u5462\uff1f\u6709Moller Trumbore Algorithm\uff1a</p> <p></p> <p>\u867d\u7136\u4f46\u662f\uff1a\u6a21\u578b\u4e2d\u6709\u5f88\u591a\u7684\u4e09\u89d2\u5f62\u554a\uff0c\u96be\u4e0d\u6210\u6bcf\u4e00\u4e2a\u90fd\u5224\u65ad\u4e00\u6b21\uff0c\u7136\u540e\u6c42\u51fa\u8bb8\u591a\u4ea4\u70b9\uff0c\u6700\u540e\u8c03\u51fa\u6700\u8fd1\u7684\uff1f\u5f53\u7136\u53ef\u4ee5\uff0c\u4f46\u662f\u5f88\u6162\u3002\u56e0\u6b64\uff0c\u5982\u4f55\u52a0\u901fRay Intersection\u7684\u8ba1\u7b97\u5462\uff1f\u4e3a\u4e86\u52a0\u901f\uff0c\u9996\u5148\u63d0\u51fa\u4e86\u4e00\u4e2aBounding Volumes\uff08\u5305\u56f4\u76d2\uff09\u7684\u529e\u6cd5\u3002\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7269\u4f53\uff0c\u90fd\u80fd\u591f\u7528\u4e00\u4e2a\u7acb\u65b9\u4f53\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u7403\u4f53\u4e4b\u7c7b\u7684\u7acb\u65b9\u4f53\u62b1\u8d77\u6765\uff0c\u56e0\u6b64\uff1a\u5982\u679c\u5149\u7ebf\u8fde\u5305\u56f4\u76d2\u90fd\u78b0\u4e0d\u5230\uff0c\u90a3\u5c31\u80af\u5b9a\u78b0\u4e0d\u5230\u7269\u4f53\u3002\u6211\u4eec\u628a\u7acb\u65b9\u4f53\u7406\u89e3\u4e3a\u201c\u4e09\u5bf9\u201d\u9762\u7684intersection\u3002\u5b9e\u6218\u4e2d\uff1aWe often use an Axis-Aligned Bounding Box(AABB\uff0c\u8f74\u5bf9\u9f50\u5305\u56f4\u76d2)\u3002\u90a3\u4e48\u5982\u4f55\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\uff0c\u5c04\u7ebf\u548c\u76d2\u76f8\u4ea4\u4e86\u5462\uff1f\u5f53\u5149\u7ebf\u548c\u4e09\u5bf9\u5e73\u9762\u90fd\u6709\u6240\u76f8\u4ea4\u7684\u65f6\u5019\uff1b\u800c\u79bb\u5f00\u76d2\u5462\uff1f\u5149\u7ebf\u4e0e\u4efb\u610f\u4e00\u5bf9\u5e73\u9762\u90fd\u76f8\u4ea4\u7684\u65f6\u5019\u3002\uff08\u611f\u6027\u7406\u89e3\uff0c\u53ef\u4ee5\u501f\u52a9\u4e8c\u7ef4\u60c5\u51b5\u5e2e\u52a9\u7406\u89e3\uff1b\u4e3a\u4ec0\u4e48\u8981\u8fd9\u79cd\u7406\u89e3\uff1f\u662f\u4e3a\u4e86\u66f4\u65b9\u4fbf\uff01\u56e0\u4e3a\u6211\u4e0d\u80fd\u8bf4\u201c\u6211\u5148\u5224\u65ad\u5149\u7ebf\u548c\u54ea\u4e00\u4e2a\u5e73\u9762\u5148\u76f8\u4ea4\u201d\uff09</p> <p></p> <p>\u5982\u679c\\(t_{enter} &lt; t_{exit}\\)\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u77e5\u9053\u6709\u4ea4\u70b9\u4e86\u3002\u90a3\u4e48\u5982\u679c\u6709\u8d1f\u6570\u7684\u60c5\u51b5\u5462\uff1f\u6211\u4eec\u73b0\u5728\u6709\u4e24\u4e2a\u65f6\u95f4\uff0c\u5982\u679c\\(t_{exit}&lt;0\\)\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u76d2\u5b50\u5728\u5149\u7ebf\u7684\u80cc\u540e\uff0c\u4e0d\u53ef\u80fd\u76f8\u4ea4\uff1b\u800c\u5982\u679c\\(t_{exit}&gt;=0 \\ and \\ t_{enter}&lt;0\\)\u5462\uff1f\u8bf4\u660e\u5149\u7ebf\u8d77\u70b9\u5728\u76d2\u5b50\u91cc\u9762\uff0c\u8bf4\u660e\u7edd\u5bf9\u6709\u4ea4\u70b9\u3002\u7efc\u4e0a\u6240\u8ff0\uff1a\\(t_{enter}&lt;t_{exit}\\)&amp;&amp;\\(t_{exit}&gt;=0\\)\u60c5\u51b5\u4e0b\uff0c\u5149\u7ebf\u5c31\u4f1a\u548cAABB\u76f8\u4ea4\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u80fd\u7b80\u5355\u5730\u6c42\u51fat\u7684\u503c\u3002</p> <p></p>"},{"location":"GAMES101/note.html#acceleration","title":"Acceleration","text":""},{"location":"GAMES101/note.html#uniform-spatial-partitionsgrids","title":"Uniform Spatial Partitions(Grids)","text":"<p>\u5047\u5982\u8bf4\u627e\u5230\u4e86\u5927\u5305\u56f4\u76d2\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e2a\u7f51\u683c\u76d2\u5b50\uff0c\u7136\u540e\u5224\u65ad\u54ea\u4e9b\u76d2\u5b50\u91cc\u9762\u662f\u6709\u7269\u4f53\u7684\uff08Store each object in overlapping cells\uff09\u3002\u4e00\u6761\u5149\u7ebf\u8fc7\u53bb\uff0c\u4f1a\u548c\u5927\u5305\u56f4\u76d2\u4e2d\u7684\u8bb8\u591a\u7f51\u683c\u76d2\u5b50\u76f8\u4ea4\u3002\u5f53\u76f8\u4ea4\u7684\u7f51\u683c\u76d2\u5b50\u91cc\u9762\u50a8\u5b58\u4e86\u7269\u4f53\u7684\u65f6\u5019\uff0c\u518d\u4e00\u6b21\u5224\u65ad\u5728\u8fd9\u4e2a\u7f51\u683c\u76d2\u5b50\u91cc\u9762\uff0c\u5149\u7ebf\u662f\u5426\u548c\u7269\u4f53\u53d1\u751f\u4e86\u76f8\u4ea4\u3002\u90a3\u4e48\u5982\u4f55\u5212\u5206\u7f51\u683c\u76d2\u5b50\u5462\uff1f\u592a\u5927\u592a\u5c0f\u90fd\u4e0d\u597d\uff08\u53ef\u4ee5\u611f\u6027\u7406\u89e3\uff09\uff0c\u56e0\u6b64\u5b9e\u8df5\u4e2d\uff0cheuristically\uff0c\u573a\u666f\u4e2d\u5404\u81ea\u7684\u6570\u91cf\u5e94\u8be5\u662f\u7269\u4f53\u6570\u91cf\u768427\u500d\u3002\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cdgrid\u52a0\u901f\u6548\u679c\u5f88\u597d\u5462\uff1fGenerally, grids work well on large collections of objects that are distributed evenly in size and space\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u671f\u671b\u5149\u7ebf\u7ecf\u8fc7\u4e00\u4e2a\u4e2a\u7f51\u683c\u76d2\u5b50\u7684\u65f6\u5019\uff0c\u91cc\u9762\u90fd\u7ecf\u5e38\u80fd\u78b0\u89c1\u7269\u4f53\u3002</p> <p>\u6362\u800c\u8a00\u4e4b\uff1a\u5047\u5982\u8bf4\u7a7a\u95f4\u5206\u5e03\u7684\u4e0d\u5747\u5300\u7684\u65f6\u5019\uff0cgrid\u8868\u73b0\u4e0d\u4f73\uff0c\u201cTeapot in a stadium\u201d\u3002\u56e0\u4e3a\u5f88\u591a\u7684\u5404\u81ea\u90fd\u5b8c\u5168\u662f\u7a7a\u683c\u5b50\uff0c\u800c\u8981\u904d\u5386\u5f88\u591a\u7684\u7a7a\u683c\u5b50\u624d\u80fd\u627e\u5230\u5305\u542b\u8336\u58f6\u7684\u683c\u5b50</p>"},{"location":"GAMES101/note.html#spatial-partitioning","title":"Spatial Partitioning","text":"<p>\u5982\u4f55\u5141\u8bb8\u201c\u4e0d\u5747\u5300\u201d\u5730\u5212\u5206\u7a7a\u95f4\uff1f\u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u516b\u53c9\u6811\uff08Octree\uff09\u3002\u5728\u7a7a\u95f4\u4e2d\u9996\u5148\u5316\u4e3a8\u5757\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u6765\u8bf4\uff0c\u5982\u679c\u91cc\u9762\u6709\u5f88\u591a\u7269\u4f53\u7684\u8bdd\uff0c\u6211\u5c31\u53ef\u4ee5\u518d\u5212\u5206\u4e3a8\u5757\uff1b\u5bf9\u4e8e\u65b0\u4ea7\u751f\u76848\u5757\u6765\u8bf4\uff0c\u7ee7\u7eed\u91cd\u590d\u4e0a\u8ff0\u7684\u6b65\u9aa4\u3002\u8fd9\u5c31\u662f\u4e00\u79cd\u4e0d\u5747\u5300\u7684\u5212\u5206\uff0c\u800c\u201c\u8fd9\u4e00\u5757\u91cc\u9762\u5305\u542b\u591a\u5c11\u7269\u4f53\u6211\u5c31\u518d\u5206\u4e3a8\u4efd\u201d\u8fd9\u79cd\u89c4\u5219\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u3002\u4e8e\u662f\u901a\u8fc7\u516b\u53c9\u6811\uff0c\u6211\u4eec\u80fd\u591f\u4e0d\u5747\u5300\u5730\u5212\u5206\u7a7a\u95f4\uff0c\u5e76\u4e14\u529b\u56fe\u5c06\u7ec6\u7c92\u5ea6\u7684\u76d2\u5b50\u5206\u914d\u7ed9\u90a3\u4e9b\u7269\u4f53\u96c6\u4e2d\u7684\u5730\u65b9\uff0c\u800c\u5728\u6ca1\u6709\u7269\u4f53\u7684\u5730\u65b9\u76f4\u63a5\u7528\u4e00\u4e2a\u5927\u76d2\u5b50\u8868\u793a\uff08\u5373\u4e0d\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u516b\u53c9\u6811\u5212\u5206\uff09\u3002</p> <p>\u4f46\u662f\u5b9e\u8df5\u4e2d\uff0c\u4eba\u4eec\u5e76\u4e0d\u503e\u5411\u4e8e\u9009\u62e9\u516b\u53c9\u6811\u3002\u4eba\u4eec\u53c8\u53d1\u660e\u4e86KD-Tree\uff0c\u4e0e\u516b\u53c9\u6811\u601d\u60f3\u7c7b\u4f3c\uff0c\u4f46\u662f\u5173\u952e\u5728\u4e8e\uff0c\u6bcf\u4e00\u6b21\u53ea\u5728\u4e00\u6761\u8f74\u4e0a\u5212\u4e00\u5200\uff0c\u5e76\u4e14\u8f74\u7684\u9009\u62e9\u662f\u4ea4\u66ff\u7684\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a\u5176\u4e2d\uff0c\u9996\u5148\u6a2a\u5411\u5212\u4e00\u5200\uff0c\u7136\u540e\u4e0a\u4e0b\u4e24\u90e8\u5206\u90fd\u7ad6\u76f4\u65b9\u5411\u5212\u4e00\u5200\uff0c\u7136\u540e\u4e4b\u540e\u518d\u6a2a\u5411\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1b3D\u4e2d\uff0c\u8f74\u7684\u9009\u62e9\u53ef\u4ee5\u662fx y z\u8f6e\u6d41\u6765\u3002</p> <p></p> <p>\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7KD\u6811\u7684\u7ed3\u6784\u6765\u5212\u5206\u683c\u5b50\uff0c\u7136\u540e\u683c\u5b50\u4e2d\u50a8\u5b58\u7269\u4f53\u3002\u5982\u4e0b\u56fe\uff082D\u6f14\u793a\uff09\uff1a</p> <p></p> <p></p> <p>\u5f53\u5149\u7ebf\u8fc7\u6765\u7684\u65f6\u5019\uff0c\u4ece\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u4ece\u4e0a\u5f80\u4e0b\u904d\u5386\uff1a\u5148\u5224\u65ad\u548cA\u76f8\u4e0d\u76f8\u4ea4\uff1f\u5982\u679c\u76f8\u4ea4\uff0c\u5224\u65ad\u548c1 B\u662f\u5426\u76f8\u4ea4\u5462\uff1f\u5047\u5982\u548c1\u76f8\u4ea4\uff0c\u56e0\u4e3a1\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u56e0\u6b641\u4e2d\u50a8\u5b58\u7684\u6240\u6709\u7269\u4f53\u90fd\u548c\u5149\u7ebf\u5224\u65ad\u662f\u5426\u76f8\u4ea4\uff1b\u5982\u679c\u548cB\u76f8\u4ea4\uff0c\u90a3\u4e48\u5c31\u7ee7\u7eed\u5224\u65ad\u548c2\u4e0eC\u76f8\u4ea4\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u8fd9\u4e2a\u6d41\u7a0b\u770b\u8d77\u6765\u68d2\u6781\u4e86\uff0c\u4f46\u662f\u5374\u4ecd\u7136\u6e10\u6e10\u4e0d\u88ab\u4f7f\u7528\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5224\u5b9aobject\u548cAABB\u662f\u5426\u76f8\u4ea4\u4e5f\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002\u8fd9\u4e2a\u7b97\u6cd5\u4e0d\u662f\u6ca1\u6709\uff0c\u4f46\u662f\u5f88\u96be\u5b9e\u8df5\uff0c\u56e0\u6b64KD\u6811\u7684\u5efa\u7acb\u4e0d\u662f\u7b80\u5355\u7684\u4e8b\u60c5\uff1b\u540c\u65f6\uff0c\u4e00\u4e2a\u7269\u4f53\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u591a\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u6240\u5e0c\u671b\u89c1\u5230\u7684\u3002</p>"},{"location":"GAMES101/note.html#object-partitions-bounding-volume-hierarchybvh","title":"Object Partitions &amp; Bounding Volume Hierarchy(BVH)","text":"<p>\u4e4b\u524d\u90a3\u79cd\u5212\u5206\u90fd\u662f\u4ece\u7a7a\u95f4\u89d2\u5ea6\u5165\u624b\u3002\u90a3\u4e48\u80fd\u4e0d\u80fd\u4ece\u7269\u4f53\u89d2\u5ea6\u5165\u624b\u5462\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u4e8e\u662fBVH\u7b97\u6cd5\u5e94\u8fd0\u800c\u751f\uff0c\u6210\u4e3a\u4e86\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u5212\u5206\u65b9\u5f0f\u3002</p> <p></p> <p></p> <p>\u9996\u5148\u7528\u4e00\u4e2a\u5927AABB\u5305\u4f4f\u6240\u6709\u7684\u4e09\u89d2\u5f62\uff0c\u7136\u540e\u53ef\u4ee5\u53c2\u8003KD\u6811\uff0c\u5de6\u53f3\u5206\u51fa\u4e24\u90e8\u5206\uff0c\u6bcf\u4e00\u90e8\u5206\u91cc\u9762\u90fd\u5b8c\u6574\u5305\u542b\u4e86\u5f88\u591a\u4e09\u89d2\u5f62\uff08\u5f53\u7136\uff0c\u4e24\u4e2aAABB\u53ef\u4ee5\u76f8\u4ea4\uff09\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\u3002\u6b65\u9aa4\u53ef\u4ee5\u6982\u62ec\u5982\u4e0b\uff1a</p> <p></p> <p>How to subdivide a node?</p> <ul> <li>Choose a dimension to split.</li> <li>Heuristic #1: Always choose the longest axis in node.</li> <li>Heuristic #2: Split node at location of median object.</li> </ul> <p>Termination criteria? Heuristic: stop when node contains few element. </p> <p>\u904d\u5386BVH\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p></p> <p>Spatial\u5212\u5206\u548cBVH\u7269\u4f53\u5212\u5206\u7684\u533a\u522b\u6982\u8ff0\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"GAMES101/note.html#basic-radiometry","title":"Basic radiometry","text":"<p>radiometry\uff0c\u8f90\u5c04\u5ea6\u91cf\u5b66\uff0c\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u8fd9\u4e2a\u4e1c\u897f\u5462\uff1fBlinn-Phong\u6a21\u578b\u5f88\u7c97\u7cd9\uff0c\u800cWhitted style ray tracing\u5f80\u5f80\u7ed9\u51fa\u7684\u7ed3\u679c\u603b\u662f\u8ddd\u79bb\u201c\u6b63\u786e\u201d\u6709\u4e00\u70b9\u8ddd\u79bb\u3002\u8f90\u5c04\u5ea6\u91cf\u5b66\u8868\u8ff0\u4e86\u5982\u4f55\u8868\u793a\u5149\u7167\u7684\u5c5e\u6027\uff0c\u5355\u4f4d\u7b49\u7b49\uff0c\u5b9a\u4e49\u4e86\u5149\u7167\u7684\u82e5\u5e72\u5c5e\u6027\uff1aRadiant flux, intensity, irradiance, radiance\u3002Perform lighting calculations in a physically correct manner\u3002</p>"},{"location":"GAMES101/note.html#radiant-energy-and-flux-power","title":"Radiant Energy and Flux (Power)","text":"<p>Definition: Radient energy is the energy of electromagnetic radiation. It is measured in units of joules.  \\(Q[J=Joule]\\)</p> <p>Definition: Radiant flux(power) is the energy emitted, reflected, transmitted or received, per unit time.  \\(\\phi = dQ/dt[W=Watt]\\)</p> <p>Flux\u7684\u53e6\u4e00\u4e2a\u5b9a\u4e49\uff1a photons flowing through a sensor in unit time\u3002</p> <p>\u6211\u4eec\u9700\u8981\u8be6\u7ec6\u5b9a\u4e49\u4e00\u4e00\u4e9bblinn-phong\u4e2d\u7c97\u7cd9\u5bf9\u5f85\u7684\u4e8b\u60c5\uff1a\u4f8b\u5982\u70b9\u5149\u6e90\u6563\u53d1\u5149\uff0c\u4e0d\u540c\u89d2\u5ea6\u5149\u843d\u5728\u4e00\u4e2a\u70b9\u4e0a\u7b49\uff1b\u800c\u524d\u8005\u5bf9\u5e94\u7684\u6982\u5ff5\u5c31\u662fRadiant Intensity\uff0c\u540e\u8005\u5bf9\u5e94\u7684\u662firradience\u3002</p>"},{"location":"GAMES101/note.html#radiant-intensity","title":"Radiant Intensity","text":"<p>\u7acb\u4f53\u89d2\u662f\u4ec0\u4e48\uff1f\u5b83\u63cf\u8ff0\u4e86\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u89d2\u5ea6\u6709\u591a\u5927\u3002</p> <p></p> <p>\u5728\u4e0a\u8ff0\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u7528\\((\\theta, \\phi)\\)\u8fd9\u79cd\u7403\u5750\u6807\u7cfb\u4e2d\u7684\u4e24\u4e2a\u5173\u952e\u89d2\u5ea6\u6765\u8868\u793a\uff0c\u5176\u4e2d\u524d\u8005\u662f\u5411\u91cf\u548cz\u6b63\u534a\u8f74\u7684\u5939\u89d2\uff0c\u540e\u8005\u662f\u5411\u91cf\u6295\u5f71\u5230XOY\u540e\u548cx\u6b63\u534a\u8f74\u7684\u5939\u89d2\u3002\u90a3\u4e48A\u4ee3\u8868\u9762\u79ef\uff0c\u90a3\u4e48\u6709differential solid angels formula:  \u56e0\u6b64\u70b9\u5149\u6e90\u6563\u53d1\u51fa\u6765\u7684\u5355\u4f4d\u65b9\u5411\u4e0a\u7684Intensity\u662f\uff1a\\(I = \\phi / 4\\pi\\)\u3002</p>"},{"location":"GAMES101/note.html#irradiance-radiance","title":"Irradiance &amp; Radiance","text":"<p>Irradiance \u5b9a\u4e49\u5982\u4e0b:</p> <p></p> <p>\u56e0\u6b64\u5728\u70b9\u5149\u6e90\u4e2d\u4f20\u64ad\u51fa\u6765\u7684\u5149\u7ebf\uff0c\u4e8b\u5b9e\u4e0aItensity\u5176\u5b9e\u6ca1\u6709\u8870\u51cf\uff0c\u8870\u51cf\u7684\u5176\u5b9e\u662firradiance\u3002</p> <p>Radiance \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p></p> <p>\u90a3\u4e48radiance\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a\u5355\u4f4dsolid angle\u4e0a\u9762\u4f20\u8fc7\u6765\u7684irradiance\uff0c\u90a3\u4e48\u4e8b\u5b9e\u4e0a\u4e24\u8005\u7684\u5173\u7cfb\u5c31\u5dee\u4e86\u4e00\u4e2a\u79ef\u5206\uff1a</p> <p></p> <p>\u6982\u5ff5\u603b\u7ed3\uff1a</p> <ul> <li> <p>\u7acb\u4f53\u89d2(solid angle): \u5e73\u9762\u89d2\u5728\u4e09\u7ef4\u7a7a\u95f4\u7684\u5ef6\u4f38, \u5c31\u7406\u89e3\u4e3a\u4e09\u7ef4\u7684\u89d2\u5ea6\u5373\u53ef.</p> </li> <li> <p>\u8f90\u5c04\u901a\u91cf(radiant flux): \u5355\u4f4d\u65f6\u95f4\u5185\u8f90\u5c04\u7684\u80fd\u91cf.</p> </li> <li>\u8f90\u5c04\u5f3a\u5ea6(radiant intensity): \u5355\u4f4d\u65f6\u95f4\u5185\u5728\u5355\u4f4d\u7acb\u4f53\u89d2\u4e0a\u8f90\u5c04\u7684\u80fd\u91cf.</li> <li>\u8f90\u5c04\u5ea6\u6216\u8005\u8f90\u5c04\u4eae\u5ea6(radiance): \u5355\u4f4d\u65f6\u95f4\u5185\u5728\u5355\u4f4d\u7acb\u4f53\u89d2\u4e0a\u8f90\u5c04\u7684\u5e76\u7167\u5c04\u5230\u5355\u4f4d\u6295\u5f71\u9762\u79ef\u4e0a\u7684\u80fd\u91cf.</li> <li>\u8f90\u7167\u5ea6(irradiance): \u5355\u4f4d\u65f6\u95f4\u5185\u8f90\u5c04\u7684\u5e76\u7167\u5c04\u5230\u5355\u4f4d\u9762\u79ef\u4e0a\u7684\u80fd\u91cf, \u4e5f\u5c31\u662f\u5404\u4e2a\u89d2\u5ea6\u4e0a\u8f90\u5c04\u5ea6\u603b\u548c.</li> </ul>"},{"location":"GAMES101/note.html#bidirectional-reflectance-distribution-function-brdf","title":"Bidirectional Reflectance Distribution Function (BRDF)","text":"<p>\u4e4b\u524d\u6211\u4eec\u5c1d\u8bd5\u7528radiance\u53bb\u7406\u89e3irradiance\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c1d\u8bd5\u7528\u8fd9\u4e24\u4e2a\u6982\u5ff5\u53bb\u7406\u89e3\u53cd\u5c04\u3002\u4e00\u4e2a\u70b9\u4ece\u4e00\u4e2a\u5355\u4f4d\u89d2\u6536\u5230irradiance\u80fd\u91cf\uff0c\u7136\u540e\u518d\u6c42\u53e6\u5916\u4e00\u4e2aradiance\u3002\u516c\u5f0f\u5982\u4e0b\uff1a</p> <p></p> <p>\u8fd9\u4e2a\\(f_r\\)\u53c2\u6570\u5c31\u4ee3\u8868\u4e86\u8fd9\u4e2a\u7269\u4f53\u8868\u9762\u7684\u5c5e\u6027\u3002\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e00\u4e2ashading point\uff0c\u90fd\u8ba4\u4e3a\u6536\u5230\u4e86\u56db\u9762\u516b\u65b9\u7684radiance\uff0c\u56e0\u6b64\u6c42\u548c\u5f97\u5230\uff1a</p> <p></p> <p>\u4f46\u662f\u6311\u6218\u5728\u4e8e\uff1a\u63a5\u53d7\u7684radiance\u4e0d\u4ec5\u4ec5\u53ef\u80fd\u6765\u81ea\u4e8e\u5149\u6e90\uff0c\u4e5f\u53ef\u80fd\u6765\u81ea\u5176\u5b83\u7269\u4f53\u53cd\u5c04\u51fa\u6765\u7684radiance\u3002\u56e0\u6b64\u8fd9\u6709\u4e00\u70b9\u9012\u5f52\u7684\u610f\u5473\u4e86\u3002\u5728\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\uff0c\u5148\u5b9a\u4e0b\u901a\u7528\u7684\u6e32\u67d3\u65b9\u7a0b\uff1a\u8fd9\u4e2a\u65b9\u7a0b\u8003\u8651\u4e86\u7269\u4f53\u81ea\u5df1\u53d1\u5149\u7684\u60c5\u51b5</p> <p></p> <p>\u90a3\u4e48\u8bf4\u56de\u53cd\u5c04\u3002\u63d0\u5230\uff1a\u4e0a\u9762\u8fd9\u4e2a\u65b9\u7a0b\u4e2d\u6709\u5165\u5c04radiance\u662f\u6765\u81ea\u5176\u4ed6\u7269\u4f53\uff0c\u81ea\u5df1\u53cd\u5c04\u51fa\u6765\u7684radiance\u5176\u5b9e\u4e5f\u53ef\u80fd\u5f71\u54cd\u5176\u4ed6\u7269\u4f53\u7684\u53cd\u5c04\u3002\u56e0\u6b64\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u53cd\u5c04\u65b9\u7a0b\u6765\u8bf4\uff0c\u5176\u5b9e\u5c31\u662f\u4e24\u4e2a\u91cf\u4e0d\u662f\u5f88\u6e05\u695a\uff1a\u5165\u5c04radiance \u51fa\u5c04radiance\u3002\u6211\u4eec\u5c1d\u8bd5\u7528\u7b80\u5355\u7684\u7b26\u53f7\u8868\u793a\u4e0a\u8ff0\u7684\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u66f4\u8fdb\u4e00\u6b65\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u79cd\u5165\u5c04\u5230\u51fa\u5c04\u7684\u8f6c\u5316\u89c6\u4e3a\u4e00\u79cd\u7b97\u5b50\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u5199\u6210\u7b97\u5b50\u4e4b\u540e\uff0c\u80fd\u5e2e\u52a9\u89e3\u51fa\u8fd9\u4e2a\u65b9\u7a0b\uff0c\u7c7b\u4f3c\u4e8e\u7b49\u6bd4\u516c\u5f0f\uff1a</p> <p></p> <p></p> <p>\u7ec8\u4e8e\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u7ec8\u4e8e\u80fd\u591f\u975e\u5e38\u826f\u597d\u5730\u6a21\u62df\u5149\u7167\u4e86\u3002\u4e0b\u9762\u56fe\u7247\u975e\u5e38\u751f\u52a8\u5730\u5c55\u793a\u4e86\u5f15\u5165BRDF\u4e4b\u540e\uff0c\u5168\u5c40\u5149\u7167\u7684\u6548\u679c\u662f\u591a\u4e48\u7684\u660e\u663e\uff1b\u8fd9\u4e5f\u6b63\u662f\u5728\u7b2c\u4e00\u8282\u8bfe\u7684\u65f6\u5019\u4e3a\u4ec0\u4e48\u8bf4\uff1a\u5149\u7167\u8d8a\u597d\u8d8a\u4eae\uff0c\u4ee3\u8868\u6548\u679c\u8d8a\u597d\uff1a\u4e0a\u56fe\u4e2d\u6ca1\u6709\u5f15\u5165BRDF\uff0cp\u70b9\u662f\u9ed1\u7684\uff0c\u56e0\u4e3a\u4e0d\u8ba4\u4e3a\u5149\u7ebf\u80fd\u591f\u5230\u8fbe\u8fd9\u4e2a\u5730\u65b9\uff1b\u4f46\u662f\u5728\u4e0b\u9762\u8fd9\u4e2a\u56fe\u4e2d\uff0c\u5141\u8bb8\u5149\u7ebf\u4e24\u6b21\u5f39\u5c04\uff0cp\u70b9\u5c31\u6bd4\u4e0a\u56fe\u4eae\u4e86\u3002</p> <p></p> <p></p>"},{"location":"GAMES101/note.html#monte-carlo-path-tracing","title":"Monte Carlo Path Tracing","text":"<p>\u9996\u5148\u8865\u5145\u4e00\u4e9b\u6982\u7387\u8bba\u80cc\u666f\uff1a\u5728\\(X\\sim p(x)\\)\u5206\u5e03\u4e0b\uff0c\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u6052\u5927\u4e8e\u7b49\u4e8e0\uff0c\u4e14\\(\\int p(x)dx=1\\)\uff08\u6982\u7387\u4e4b\u548c\u5e94\u8be5\u4e3a1\uff09\uff0c\u800c\u5b9a\u4e49\u671f\u671b\u4e3a\uff1a\\(E[X]=\\int xp(x)dx\\)\u3002\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u79cd\u79ef\u5206\u65b9\u6cd5\uff1a\u8499\u7279\u5361\u6d1b\u79ef\u5206\u3002\u8499\u7279\u5361\u6d1b\u4e00\u5f00\u59cb\u662f\u4e3a\u4e86\u89e3\u51b3\u6c42\u5b9a\u79ef\u5206\u7684\u95ee\u9898\u7684\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p></p> <p>\u6240\u4ee5\u8bf4\uff0c\u95ee\u9898\u4ece\u539f\u6765\u7684\u6c42\u5b9a\u79ef\u5206\u8f6c\u5316\u4e3a\u4e86\u5982\u4f55\u8bbe\u5b9a\u4f18\u8d28\u7684PDF\uff08\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0cProbability Density Function\uff09\u4e86\u3002\u53ef\u60f3\u800c\u77e5\u7684\u662f\uff1a\u91c7\u6837\u8d8a\u591a\uff0c\u65b9\u5dee\u8d8a\u5c0f\uff1bSample on x, integrate on x\u3002</p> <p>\u8fd9\u5bf9\u4e8ePath Tracing\u7a76\u7adf\u6709\u4ec0\u4e48\u5173\u8054\u7684\uff1fWhitted-Style Ray Tracing\u4e2d\uff0c\u5141\u8bb8\u5149\u591a\u6b21\u5f39\u5c04\uff0c\u4e14\u6709\u4e00\u4e9b\u524d\u63d0\uff1a\u5f53\u5149\u7ebf\u5230\u8fbe\u5149\u6ed1\u7269\u4f53\uff0c\u4f1a\u53d1\u751f\u955c\u9762\u6298\u5c04\uff0c\u4e14\u5982\u679c\u662f\u73bb\u7483\uff0c\u4f1a\u6709\u6298\u5c04\uff1b\u800c\u5149\u7ebf\u5230\u8fbe\u6f2b\u53cd\u5c04\u5730\u65b9\uff0c\u5219\u8ba4\u4e3a\u4e0d\u518d\u4f20\u64ad\u3002\u4f46\u662f\u8fd9\u4e9b\u660e\u663e\u4e0d\u7b26\u5408\u7269\u7406\u73b0\u5b9e\u3002Where the ray be reflected for gloddy materials\uff1f\u80fd\u591f\u770b\u5230\u9ad8\u5149\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u90a3\u4e48\u5149\u6ed1\u3002\u8bf4\u660e\u5f53\u773c\u775b\u653e\u51fa\u4e00\u6761\u5149\u7ebf\u6253\u5230glossy\u7269\u4f53\u4e0a\uff0c\u5149\u5e94\u8be5\u56db\u6563\uff0c\u5426\u5219\u5982\u679c\u662f\u955c\u9762\u53cd\u5c04\uff0c\u90a3\u4e48\u5e94\u8be5\u80fd\u591f\u5448\u73b0\u5468\u56f4\u4e0e\u73af\u5883\u3002\u540c\u65f6\u5982\u679c\u6ca1\u6709\u6f2b\u53cd\u5c04\uff0c\u90a3\u4e48\u5168\u5c40\u5149\u7ebf\u6548\u679c\u7684\u5dee\u5f02\u4f1a\u76f8\u5f53\u660e\u663e\u3002</p> <p></p> <p></p> <p>\u4f46\u662f\u6e32\u67d3\u65b9\u7a0b\u5e94\u8be5\u662f\u5bf9\u7684\uff01\u56e0\u4e3a\u5b8c\u5168\u662f\u6309\u7167\u7269\u7406\u4e16\u754c\u7684\u89c4\u5219\u6765\u7684\uff0c\u8003\u8651\u5230\u4e86\u56db\u5468\u6765\u7684\u5149\uff01\u53ea\u4e0d\u8fc7\u662f\u89c4\u5219\u6ca1\u6709\u6b63\u786e\u5730\u8bbe\u5b9a\u3002\u4f46\u662f\u8fd9\u4e2a\u65b9\u7a0b\u6d89\u53ca\u5230\u4e86\u7403\u9762\u4e0a\u7684\u79ef\u5206\uff0c\u800c\u4e14\u6d89\u53ca\u5230\u4e86\u9012\u5f52\u6267\u884c\u3002\u5982\u4f55\u6570\u503c\u4e0a\u9ad8\u6548\u8ba1\u7b97\u79ef\u5206\u5462\uff1f\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u5f15\u5165\u8499\u7279\u5361\u6d1b\u6c42\u79ef\u5206\u65b9\u6cd5\u4e86\u3002</p> <p></p> <p></p> <p></p> <p>\u4e0a\u9762\u4e09\u5f20\u56fe\u7247\u5c55\u793a\u7684algorithm\u7a76\u7adf\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6211\u4eec\u7ec8\u4e8e\u77e5\u9053\u4e86\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u6765\u8bf4\uff0c\u5982\u4f55\u63a5\u53d7\u56db\u5904\u6765\u7684\u5149\uff0c\u5e76\u6cbf\u7740\u4e00\u4e2a\u65b9\u5411\u518d\u53d1\u5c04\u51fa\u591a\u5c11radiance\u7684\u5149\u7ebf\u4e86\u3002\u5728\u4ee5\u524dBlinn-Phong\u4e2d\uff0c\u5f3a\u884c\u5149\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u7528\u4e0d\u540c\u7684\u7cfb\u6570\u6765\u4ee3\u8868specular, diffuse and ambient; \u800c\u5982\u4eca\uff0c\u6240\u6709\u7684\u5149\u4e00\u89c6\u540c\u4ec1\uff0c\u800c\u8be5\u70b9\u67d0\u4e00\u89d2\u5ea6\u4e0b\u7684\u201cglossy\u8fd8\u662fglassy\u201d\u4e0e\u5426\uff0c\u90fd\u901a\u8fc7\\(f_{r}\\)\u8fd9\u4e2a\u53c2\u6570\u8fdb\u884c\u8868\u793a\u3002Pseudocode\u5982\u4e0b\uff1a</p> <pre><code>shade(p, wo)\n    Randomly choose N directions wi~pdf\n    L0 = 0.0\n    For each wi\n        Trace a ray r(p, wi)\n        If ray r hit the light\n            Lo += (1/N) * L_i * f_r * cosine / pdf(wi)\n    Return Lo\n</code></pre> <p>\u8fdb\u4e00\u6b65\u5730\uff1a\u5982\u4f55\u8ba1\u7b97Recursively\u5462\uff1f\u610f\u601d\u662f\u5982\u4e0b\u56fe\uff1aP\u4e2d\u63a5\u53d7\u7684\u76f4\u63a5\u5149\u7167\uff0c\u5e94\u8be5\u4e5f\u6709\u6765\u81eaQ\u70b9\u5c04\u51fa\u6765\u7684\u5149\u7ebf\uff0c\u90a3\u4e48\u8ba1\u7b97\u6d41\u7a0b\u4e2d\u5982\u4f55\u4f53\u73b0\u8fd9\u79cd\u201c\u5305\u542b\u201d\u6216\u8005\u8bf4\u201c\u9012\u5f52\u201d\u4e00\u5c42\u542b\u4e49\u5462\uff1f\u90a3\u4e48\u5176\u5b9e\u6211\u53ef\u4ee5\u89c6\u4e3a\uff1a\u6709\u4e00\u4e2a\u6444\u50cf\u673a\u5728P\uff0c\u968f\u673a\u65b9\u5411\u653e\u51fa\u5149\u7ebf\uff0c\u5982\u679c\u8bf4PG\u65b9\u5411\u7684\u5149\u7ebf\u6253\u4e2d\u4e86\u7269\u4f53\uff08\u800c\u4e0d\u662f\u6253\u4e2d\u4e86\u76f4\u63a5\u5149\u7167\u7684\u5149\u7ebf\uff09\uff0c\u90a3\u4e48\u8ba1\u7b97Q\u7684\u8499\u7279\u5361\u6d1b\u6e32\u67d3\u65b9\u7a0b\u79ef\u5206\uff0c\u52a0\u5230P\u70b9\uff1a</p> <p></p> <pre><code>shade(p, wo)\n    Randomly choose N directions wi~pdf\n    L0 = 0.0\n    For each wi\n        Trace a ray r(p, wi)\n        If ray r hit the light\n            Lo += (1/N) * L_i * f_r * cosine / pdf(wi)\n        Else is ray r hit an object at q\n            Lo += (1/N) * shade(q, -wi) * f_r * cosine / pdf(wi)\n    Return Lo\n</code></pre> <p>\u8fd9\u633a\u5bf9\u7684\u3002\u4f46\u662f\u4ecd\u7136\u95ee\u9898\u6ca1\u6709\u5b8c\u5168\u88ab\u89e3\u51b3\u3002\u7b2c\u4e00\u70b9\uff1a\u5982\u679c\u8fd9\u6837\u9012\u5f52\u8ba1\u7b97\uff0c\u5149\u7ebf\u6570\u91cf\u4f1a\u77ac\u95f4\u7206\u70b8\uff0c\u56e0\u4e3aN\u53d6\u7684\u592a\u5927\u7684\u8bdd\uff0c\u8ba1\u7b97\u5f00\u9500\u662f\u6307\u6570\u589e\u957f\u7684\u3002\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u5f88\u7c97\u66b4\uff1aN=1\uff0c\u4f46\u662f\u53ef\u60f3\u800c\u77e5\uff0c\u566a\u58f0\u95ee\u9898\u4f1a\u5b58\u5728\uff1b\u4f46\u662f\u5728Path Tracing\u4e2d\uff0c\u5c31\u662f\u89c4\u5b9aN=1\u3002\u867d\u7136\u5bf9\u4e8e\u4e00\u4e2ashading point\u6765\u8bf4\uff0c\u53ea\u5141\u8bb8\u8ffd\u8e2a\u4e00\u6761path\uff0c\u4f46\u662f\u4e3a\u4e86\u514b\u670d\u566a\u70b9\uff0c\u6211\u53ef\u4ee5\u8ba9\u4e00\u4e2apixel\u8ffd\u8e2a\u591a\u6761\u8def\u5f84\uff0c\u800c\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\u4e0a\u53ef\u80fd\u8def\u8fc7\u7684shading point\u6765\u8bf4\uff0c\u5b83\u4eec\u5404\u81ea\u8ba1\u7b97\u6e32\u67d3\u65b9\u7a0b\u7684\u65f6\u5019\uff0cN\u90fd\u662f\u4e3a1\uff0c\u8ba1\u7b97\u4e0d\u4f1a\u7206\u70b8\uff1b\u6700\u540e\u4e00\u4e2apixel\u7684radiance\u662f\u6240\u6709path\u7684radiance\u7684\u5e73\u5747\uff08\u8fd9\u662f\u56e0\u4e3apixel reconstruction filter\u95ee\u9898\uff09\u3002Pseudocode\u5982\u4e0b\uff1a</p> <pre><code>ray_generation(camPos, pixel)\n    Uniformly choose N sample positions within the pixel\n    pixel_radiance = 0.0\n    For each sample in the pixel\n        Shoot a ray r(camPos, cam_to_sample)\n        If ray r hit the scene at P\n            pixel_radiance += 1 / N * shade(p, sample_to_cam)\n    Return pixel_radiance\n</code></pre> <p>\u7b2c\u4e8c\u70b9\uff1a\u8bf6\uff1f\u8fd9\u4e2a\u9012\u5f52\u597d\u50cf\u662f\u6ca1\u6709\u7ec8\u6b62\u6761\u4ef6\uff1f\u4e3a\u4e86\u89e3\u51b3\u5982\u4f55\u89c4\u5b9a\u8ffd\u8e2a\u5982\u4f55\u505c\u4e0b\u6765\uff0c\u4eba\u4eec\u53d1\u660e\u4e86\u4fc4\u7f57\u65af\u8f6e\u76d8\u8d4c\uff08Russian Roulette\uff09\u65b9\u6cd5\uff1a\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u6700\u5999\u7684\u5730\u65b9\u5728\u4e8e\uff1a\u671f\u671b\u503c\u662f\u4e00\u6837\u7684\u3002\u56e0\u6b64\u4f2a\u4ee3\u7801\u9700\u8981\u7565\u5fae\u4fee\u6539\uff1a</p> <pre><code>shade(p, wo)\n    Manually specify a probability P_RR\n    Randomly select ksi in a uniform dist. in [0, 1]\n    if (ksi &gt; P_RR) return 0.0;\n\n    Randomly choose ONE directions wi~pdf\n    Trace a ray r(p, wi)\n    If ray r hit the light\n        Return (1/N) * L_i * f_r * cosine / pdf(wi) / P_RR\n    Else is ray r hit an object at q\n        Return (1/N) * shade(q, -wi) * f_r * cosine / pdf(wi) / P_RR\n</code></pre> <p>\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u6b63\u786e\u5730\u7b97\u6cd5\u4e86\u3002\u4f46\u662f\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5e76\u4e0d\u9ad8\u6548\uff0c\u56e0\u4e3a\u9700\u8981\u514b\u670d\u566a\u58f0\u7684\u8bdd\uff0c\u9700\u8981SPP\uff08samples per pixel\uff09\u503c\u5f88\u9ad8\u3002\u6709\u6ca1\u6709\u4ec0\u4e48\u63d0\u9ad8\u7684\u65b9\u6cd5\u5462\uff1f\u5728\u4e4b\u524d\uff0c\u5bf9\u4e8e\u4e00\u4e2ashading point\u6765\u8bf4\uff0c\u90fd\u662f\u968f\u673a\u9009\u53d6\u4e00\u6761\u5149\u7ebf\u8fdb\u884c\u8ffd\u8e2a\uff0c\u56e0\u6b64\u5f88\u53ef\u80fd\u968f\u673a\u8ffd\u8e2a\u7684\u7ed3\u679c\u5c31\u662f\u78b0\u4e0d\u89c1\u7269\u4f53\u6216\u8005\u5149\u6e90\u3002\u56e0\u6b64\u6211\u80fd\u4e0d\u80fd\u91cd\u65b0\u6539\u53d8\u91c7\u6837\u7b56\u7565\u5462\uff1f\u6bd5\u7adf\u8499\u7279\u5361\u6d1b\u8ba1\u7b97\u5b9a\u79ef\u5206\u662f\u5141\u8bb8\u4e0d\u540c\u7684\u6982\u7387\u5206\u5e03\u7684\u3002 </p> <p></p> <p>\u6211\u4eec\u5e0c\u671b\u7740\u91cd\u4e8e\u5149\u6e90\u5bf9\u8be5\u70b9\u7684radiance\u5f71\u54cd\u3002\u56e0\u6b64\u5bf9\u5149\u6e90\u8fdb\u884c\u91c7\u6837\uff0c\u7b97\u51fa\u989d\u5916\u7684radiance:</p> <p></p> <p>\u56e0\u6b64\uff0c\u4e4b\u524d\u6211\u4eec\u90fd\u5047\u8bbe\uff1a light is \"accidentally\" shot by uniform hemisphere sampling\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8003\u8651\u4e24\u90e8\u5206\u7684radiance\uff1alight source(direct, no need to have RR) and other reclectors(indirect, RR)\u3002\u4f2a\u4ee3\u7801\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u5f53\u7136\uff0c\u8fd8\u6709\u6700\u540e\u6700\u540e\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u4e07\u4e00\u5149\u6e90\u7684\u5171\u7ebf\u662f\u88ab\u906e\u6321\u7684\u5462\uff1f\u56e0\u6b64\u8fd8\u9700\u8981\u5224\u65ad\u8fd9\u4e2a\u5149\u6e90\u7684\u8d21\u732e\u5230\u5e95\u80fd\u4e0d\u80fd\u6210\u7acb\u3002\u56e0\u6b64\u9700\u8981shading point\u548c\u5149\u6e90\u8fdb\u884c\u8fde\u7ebf\uff0c\u5224\u65ad\u662f\u5426\u548c\u7269\u4f53\u76f8\u4ea4\u3002\u56e0\u6b64\u4f2a\u4ee3\u7801\u4e2d\u8fd8\u9700\u8981\u989d\u5916\u5224\u65ad\u5149\u6e90\u8d21\u732e\u662f\u5426\u88ab\u906e\u6321\uff0c\u90a3\u4e48\u5b8c\u6574\u7684\u6d41\u7a0b\u7ec8\u4e8e\u4ecb\u7ecd\u5b8c\u6bd5\u3002\u8fd9\u79cd\u7b97\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u800c\u4e14\u80fd\u591f\u751f\u6210\u975e\u5e38\u903c\u8fd1\u4e8e\u73b0\u5b9e\u7684\u7167\u7247\uff1a</p> <p></p> <p>pixel\u6709\u4e86radiance\uff0c\u7ecf\u8fc7gamma correction, curves, color space\u7b49\u6d41\u7a0b\uff0c\u6700\u540e\u80fd\u53d8\u4e3a\u989c\u8272\u3002\u8fd9\u4e00\u90e8\u5206\u4e0d\u4f1acover\u3002</p>"},{"location":"GAMES101/note.html#materials-and-appearances","title":"Materials and Appearances","text":""},{"location":"GAMES101/note.html#material-types","title":"Material Types","text":"<p>\u56fe\u5f62\u5b66\u4e2d\uff0c\u4ec0\u4e48\u662f\u6750\u8d28\uff1fBRDF\u5c31\u53cd\u6620\u4e86\u6750\u8d28\u7684\u7279\u70b9\uff01\u6211\u4eec\u4e0d\u59a8\u6765\u770b\u770b\u5149\u7ebf\u73b0\u8c61\u4e0e\u6750\u8d28\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u5982\u4f55\u901a\u8fc7\\(f_{r}\\)\u4f53\u73b0\u7684\uff1a\u7b2c\u4e00\u79cd\uff0c\u5728\u6f2b\u53cd\u5c04\u4e2d\uff0cBlinn-Phong\u4e2d\u8fd8\u662f\u7528intensity\u7b49\u53bb\u5927\u6982\u6a21\u62df\u771f\u5b9e\u7269\u7406\u73b0\u8c61\uff0c\u4f46\u662f\u73b0\u5728\u53ef\u4ee5\u7528\u7269\u7406\u5c42\u9762\u4e0a\u6b63\u786e\u7684\u6e32\u67d3\u65b9\u7a0b\u53bb\u8ba1\u7b97\u6f2b\u53cd\u5c04\u5149\u7ebf\u7684radiance\u4e86\u3002\u6211\u4eec\u5b9a\u4e49\u53cd\u5c04\u7387albedo\uff0c\u53ef\u4ee5\u662fRGB\u4e09\u4e2a\u901a\u9053\u81ea\u5df1\u7684\u53cd\u5c04\u7387\uff0calbedo\u8303\u56f4\u4e3a0-1.</p> <p></p> <p>\u7b2c\u4e8c\u79cd\u662fglossy\uff0c\u8fd9\u79cd\u6750\u8d28\u4e00\u822c\u662f\u91d1\u5c5e\u8868\u9762\u6240\u62e5\u6709\u7684\u3002</p> <p></p> <p>\u7b2c\u4e09\u79cd\u662f\u7406\u60f3\u53cd\u5c04\u4e0e\u6298\u5c04\uff0c\u5982\u73bb\u7483\u3002</p> <p></p> <p>\u7b2c\u56db\u79cd\u662f\u53ea\u6709\u7406\u60f3\u53cd\u5c04\uff0c\u5982\u955c\u5b50\u3002</p> <p></p> <p>\u90a3\u4e48\u6298\u5c04\u7a76\u7adf\u5982\u4f55\u8ba1\u7b97\u6298\u5c04\u65b9\u5411\u5462\uff1f\u8fd9\u91cc\u4ecb\u7ecdSnell's Law\u3002\u6839\u636esnell\u5b9a\u5f8b\uff0c\u76f4\u5230\u4e86\u4e24\u4e2a\u6750\u8d28\u7684\u6298\u5c04\u7387\uff0c\u90a3\u4e48\u5c31\u80fd\u8ba1\u7b97\u51fa\u6298\u5c04\u89d2\u7684\u6b63\u5f26\u503c\uff1b\u800c\u65b9\u5411\u5411\u91cf\u4e24\u4e2a\u7ef4\u5ea6\u7684\u786e\u5b9a\u5c31\u662f\u4f9d\u8d56\u4e8e\u955c\u9762\u53cd\u5c04\u4e86\u3002</p> <p></p> <p></p> <p>\u800c\u901a\u8fc7\u8ba1\u7b97\u53d1\u73b0\uff1a\u5982\u679c\u4e0a\u56fe\u4e2d\u7684\u5f0f\u5b50\u5c0f\u4e8e\u96f6\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u53d1\u751f\u6298\u5c04\uff0c\u53ea\u4f1a\u53d1\u751f\u5168\u53cd\u5c04\u73b0\u8c61\uff08Total Internal Reflection\uff09\u3002\u5982\u4e0b\u56fe\u6240\u4ecb\u7ecd\uff1a\uff08\u56fe\u6e90\uff1a\u7ef4\u57fa\u767e\u79d1\uff09\u800c\u5bf9\u4e8e\u6298\u5c04\u6709\u4e13\u95e8\u7684BTDF\uff08\u7c7b\u4f3c\u4e8eBRDF\uff0c\u4f46\u662f\u516c\u5f0f\u9488\u5bf9\u6298\u5c04\uff09\u516c\u5f0f\u3002</p> <p></p> <p>\u90a3\u4e48\u6709\u591a\u5c11\u80fd\u91cf\u4f1a\u6298\u5c04\uff1f\u591a\u5c11\u80fd\u91cf\u4f1a\u53cd\u5c04\uff1f\u90a3\u4e48\u5c31\u5f15\u5165\u4e86\u83f2\u6d85\u5c14\u9879\uff08Fresnel Term\uff09\uff1a\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5165\u5c04\u89d2\u5f88\u5c0f\uff0c\u4e66\u7684\u5012\u5f71\u770b\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff1b\u4f46\u662f\u5e73\u7740\u770b\u8fc7\u53bb\uff0c\u5c31\u80fd\u53d1\u73b0\u5f71\u5b50\u8f83\u4e3a\u6e05\u6670\u3002</p> <p></p> <p>\u5982\u4e0b\u56fe\u662f\u7edd\u7f18\u4f53\u7684Reflectance-Angle\u56fe\uff08\u4e00\u822c\u5b9e\u9645\u6e32\u67d3\u4e2d\uff0c\u53ea\u770b\u7ea2\u7ebf\u6570\u636e\uff09</p> <p></p> <p>\u5982\u4e0b\u56fe\u662f\u5bfc\u4f53\u7684Reflectance-Angle\u56fe\uff08\u4e00\u822c\u5b9e\u9645\u6e32\u67d3\u4e2d\uff0c\u53ea\u770b\u7ea2\u7ebf\u6570\u636e\uff09</p> <p></p> <p></p>"},{"location":"GAMES101/note.html#microfacet-material","title":"Microfacet Material","text":"<p>\u5f15\u5165\u83f2\u6d85\u5c14\u9879\uff0c\u662f\u4e3a\u4e86\u6b63\u5f0f\u4ecb\u7ecdMicrofacet Material: \u5fae\u8868\u9762\u6750\u8d28\u3002\u8fd9\u4e2a\u7406\u8bba\u5047\u8bbe\uff1a\u7c97\u7cd9\u7269\u4f53\u8868\u9762\u4ece\u8fd1\u5904\u770b\u5f53\u7136\u662f\u7c97\u7cd9\u7684\uff0c\u4f46\u662f\u4ece\u8fdc\u5904\u770b\uff0c\u51e0\u4e4e\u662f\u5e73\u7684\uff0ci.e\uff0c\u6bcf\u4e00\u4e2a\u5fae\u8868\u9762\u6211\u90fd\u53ef\u4ee5\u8ba4\u4e3a\u662f\u955c\u9762\uff0c\u6709\u81ea\u5df1\u7684\u6cd5\u7ebf\uff0c\u56e0\u6b64\u4e00\u4e2a\u7c97\u7cd9\u7269\u4f53\u8868\u9762\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u6cd5\u7ebf\u8868\u9762\u5206\u5e03\u3002\u5982\u679c\u6cd5\u5411\u91cf\u65b9\u5411\u8f83\u4e3aconcentrated\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662fglossy\uff1b\u5982\u679c\u65b9\u5411\u5341\u5206\u5206\u6563\uff0c\u90a3\u4e48\u8ba4\u4e3a\u662fdiffuse\uff08\u6f2b\u53cd\u5c04\u6750\u8d28\uff09\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u56e0\u6b64\uff0c\u7ed3\u5408\u83f2\u6d85\u5c14\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u8868\u793a\uff1a\u591a\u5c11\u5fae\u8868\u9762\u80fd\u591f\u628a\u5149\u7ebf\u53cd\u5c04\u5230\u4e00\u5b9a\u65b9\u5411\u4e0a\uff1f\u516c\u793a\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u5176\u4e2d\uff0cshadowing-masking term\u662f\u4e3a\u4e86\u4fee\u653f\u4e00\u79cd\u73b0\u8c61\uff1a\u6709\u7684\u5fae\u955c\u9762\u53cd\u5c04\u51fa\u7684\u5149\u7ebf\u539f\u672c\u662f\u7b26\u5408\u8981\u6c42\u7684\u65b9\u5411\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u88ab\u5176\u4ed6\u5fae\u955c\u9762\u906e\u6321\u4f4f\u3002\u56e0\u6b64\u8fd9\u4e00\u9879\u5c31\u662f\u7528\u6765\u8fdb\u884c\u4e00\u5b9a\u7684\u4fee\u6b63\u7684\u3002</p> <p>\u8fd8\u6709\u4e00\u79cd\u6750\u8d28\uff0c\u5b83\u5e26\u6709\u4e00\u5b9a\u7684\u65b9\u5411\u6027\u3002\u4f8b\u5982\u8bf4\u4ece\u4e00\u4e2a\u89d2\u5ea6\u770b\u8fc7\u53bb\uff0c\u6f2b\u53cd\u5c04\u7a0b\u5ea6\u9ad8\uff1b\u800c\u53e6\u4e00\u4e2a\u89d2\u5ea6\u770b\u8fc7\u53bb\uff0c\u955c\u9762\u53cd\u5c04\u7a0b\u5ea6\u9ad8\u3002\u56e0\u6b64\u6750\u8d28\u8fd8\u5206\u4e3a\u5404\u5411\u5f02\u6027(anisotropic)\u4e0e\u5404\u5411\u540c\u6027(isotropic)\u3002\u5b9a\u4e49\u6709\uff1a\u5982\u679cBRDF\u5728\u4e0d\u540c\u7684\u65b9\u4f4d\u89d2\uff08azimuthal\uff09\u4e0b\u4e0d\u540c\uff0c\u90a3\u4e48\u5c31\u662f\u5404\u5411\u5f02\u6027\u6750\u6599\uff0c\u5178\u578b\u7684\u6709Brushed Metal, Velvet\u7b49\u3002</p>"},{"location":"GAMES101/note.html#properties-of-brdf-and-measuring-brdf","title":"Properties of BRDF and Measuring BRDF","text":"<p>BRDF\u6709\u54ea\u4e9b\u6027\u8d28\uff1f\u5982\u4e0b\u56fe\u6f14\u793a\uff1a</p> <p></p> <p></p> <p></p> <p>\u90a3\u4e48\u5982\u4f55\u6d4b\u51faBRDF\uff1f\u5b9e\u8df5\u8bc1\u660e\uff0c\u7ea2\u7ebf\u7684\u83f2\u6d85\u5c14\u6570\u503c\u548c\u771f\u6b63\u5b9e\u9645\u7684\u503c\u6709\u4e00\u5b9a\u7684\u5dee\u8ddd\uff0c\u56e0\u6b64\u8ba1\u7b97\u51faBRDF\u6709\u4e0d\u5c0f\u7684\u6311\u6218\uff0c\u56e0\u6b64\u5982\u679c\u80fd\u6d4b\u91cfBRDF\u90a3\u81ea\u7136\u662f\u6700\u597d\u3002\u73b0\u5b9e\u4e2d\u6709\u4e00\u79cd\u4eea\u5668\uff0c\u53eb\u505agonioreflectometer\u3002\u901a\u8fc7\u5149\u6e90\u548c\u6444\u50cf\u673a\u7684\u4e0d\u65ad\u73af\u7ed5\u4ee5\u6a21\u62df\u4e0d\u540c\u7684\u5165\u5c04\u89d2\u548c\u5b9e\u9645\u7684\u51fa\u5c04\u89d2\u3002\u76f8\u673a\u548c\u6d4b\u91cf\u539f\u7406\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p></p>"},{"location":"GAMES101/note.html#cameras-lenses-and-light-fields","title":"Cameras, Lenses and Light Fields","text":"<p>\u5149\u6805\u5316\u4e0eray tracing\u5176\u5b9e\u90fd\u662f\u5728\u6a21\u62dfsynthesis\u56fe\u50cf\uff0c\u4f46\u662f\u73b0\u5b9e\u4e2d\u6211\u4eec\u80fd\u591f\u6355\u6349\u771f\u5b9e\u7684\u7269\u4f53\uff0c\u6bd4\u5982\u8bf4\u4f7f\u7528\u76f8\u673a\u3002\u8fd9\u79cd\u884c\u4e3a\u5c31\u662fCapture\u3002\u7167\u76f8\u7684\u53d1\u5c55\uff0c\u6700\u5f00\u59cb\u662f\u5c0f\u5b54\u6210\u50cf\uff08Pinhole\uff09\uff0c\u4e4b\u540e\u6f14\u53d8\u51fa\u5149\u7ebf\u7ecf\u8fc7\u68f1\u955c\u4ece\u800c\u6210\u50cf\u5728\u4f20\u611f\u5668\u4e0a\uff08Lenses Form Image on Sensor\uff09\u3002\u4e00\u4e2a\u76f8\u673a\u6709\u54ea\u4e9b\u90e8\u4ef6\u5462\uff1f\u9996\u5148\u662f\u5feb\u95e8\uff08shutter\uff09\uff0c\u80fd\u591f\u63a7\u5236\u5149\u8fdb\u5165\u76f8\u673a\u7684\u65f6\u95f4\uff1b\u5176\u6b21\uff0c\u5149\u8fdb\u5165\u76f8\u673a\u4e4b\u540e\uff0c\u4f1a\u88abSensor\u6240\u8bb0\u5f55\uff0c\u800c\u4f20\u611f\u5668\u771f\u6b63\u8bb0\u5f55\u7684\u662firradiance\uff1aEach sensor point would integrate light from all points on the object, so all pixel values would be similar, i.e, the sensor records irradiance\u3002</p> <p>\u5229\u7528\u5c0f\u5b54\u6210\u50cf\u5236\u4f5c\u7684Pinhole Camera\u5f88\u65e9\u5c31\u88ab\u53d1\u660e\u4e86\uff0c\u800c\u4e14\u771f\u7684\u53ef\u4ee5\u7528\u6765\u62cd\u7167\uff0c\u5e76\u4e14\u56e0\u4e3a\u6ca1\u6709\u68f1\u955c\u7684\u5b58\u5728\uff0c\u753b\u9762\u4e2d\u989c\u8272\u7684\u53d8\u5316\u90fd\u662f\u9510\u5229\u7684\uff0c\u800c\u4e0d\u50cf\u68f1\u955c\u76f8\u673a\u4e00\u6837\u4f1a\u6709\u6240\u865a\u5316\u3002</p> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u7cfb\u5217\u7684\u6982\u5ff5\u3002\u9996\u5148\u662f\u89c6\u573a\uff1aField of View\u3002\u5982\u679cSensor\u66f4\u4e3a\u9760\u8fd1\u68f1\u955c\uff0c\u90a3\u4e48\u89c6\u573a\u4f1a\u66f4\u5927\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4e00\u822c\u76f8\u673a\u7684\u5b9a\u4e49\u4e2d\uff0c\u80f6\u7247\u7684\u5927\u5c0f\u662f35mm\uff0c\u7136\u540e\u6839\u636e\u4e00\u4e2a\u7126\u8dddf\u4f1a\u5b9a\u4e49\u51fa\u4e00\u4e2aFOV\u89d2\u5ea6\u3002\u4f46\u662f\u624b\u673a\u4e2d\u5c31\u4f1a\u4e0d\u4e00\u6837\u4e86\uff0c\u624b\u673a\u7684\u539a\u5ea6\u5f88\u5c0f\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u624b\u673a\u7684\u80f6\u7247\u5927\u5c0f\u662f\u5f88\u5c0f\u7684\uff0c\u4ece\u800c\u5728\u7126\u8dddf\u4f18\u5148\u7684\u60c5\u51b5\u4e0b\uff0c\u4f9d\u7136\u53ef\u4ee5\u6709\u5f88\u597d\u7684FOV\u3002\u76f8\u5173\u4ecb\u7ecd\u89c1\u4e0b\u56fe\uff1b\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u8c03\u6574\u80f6\u7247\u7684\u6709\u6548\u5927\u5c0f\u9762\u79ef\uff0c\u4ece\u800c\u6539\u53d8FOV\u3002</p> <p></p> <p>\u63a5\u4e0b\u6765\u662f\u66dd\u5149\uff08Exposure\uff09\u3002\u6211\u4eec\u5b9a\u4e49\uff1aExposure = time * irradiance\u3002\u66dd\u5149\u65f6\u95f4\u7531\u5feb\u95e8\u63a7\u5236\uff0c\u800cIrradiance is the power of light falling on a unit area of sensor, which is controlled by lens aperture\uff08\u5149\u5708\uff09 and focal length\u3002\u5149\u5708\u7684\u8bbe\u8ba1\u662f\u4eff\u751f\u4eba\u7c7b\u77b3\u5b54\u7684\uff0c\u53ef\u4ee5\u63a7\u5236\u5149\u7ebf\u8fdb\u5165\u7684\u591a\u5c11\u3002\u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u611f\u5149\u5ea6\uff08ISO gain\uff09\u6765\u8c03\u63a7\u6210\u50cf\u4fe1\u606f\u4e0e\u91c7\u96c6\u5149\u7ebf\u4fe1\u606f\u4e4b\u95f4\u7684\u5173\u7cfb\uff1aChange the amplification (analog and/or digital) between sensor values and digital image values\u3002</p> <p></p> <p>\u901a\u8fc7\u4e0a\u9762\u7684\u5c55\u793a\u56fe\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff1a\u5149\u5708\u8d8a\u5927\uff0c\u666f\u6df1\u8d8a\u5927\uff1b\u5feb\u95e8\u65f6\u95f4\u8d8a\u77ed\uff0c\u865a\u5316\u6548\u679c\u8d8a\u4e0d\u660e\u663e\uff1bISO\u8d8a\u5927\uff0c\u566a\u70b9\u8d8a\u5927\u3002\u63cf\u8ff0\u5149\u5708\u6709\u4e13\u95e8\u7684F\u6570\uff1aFN or F/N\uff0c\u5176\u4e2dN\u5c31\u662ff-number\u3002\u7b80\u5355\u7406\u89e3F\u6570\u5c31\u662f\u5149\u5708\u76f4\u5f84\u7684\u5012\u6570\uff0cN\u8d8a\u5927\uff0c\u8bf4\u660e\u5149\u5708\u8d8a\u5c0f\uff0c\u53d6\u666f\u8d8a\u6df1\uff0c\u5149\u91cf\u8d8a\u5c0f\uff1b\u800c\u5b9e\u9645\u4e0a\uff1aThe f-number of a lens is defined as the focal length divided by the diameter of the aperture\u3002\u540c\u65f6\uff0c\u5feb\u95e8\u901f\u5ea6\u8d8a\u5feb\uff0c\u8d8a\u4e0d\u5bb9\u6613\u6a21\u7cca\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u6709\u8d70\u6837\u73b0\u8c61\uff1b\u5feb\u95e8\u7565\u6162\u4e00\u4e9b\uff0c\u76f8\u5f53\u4e8e\u662f\u5728\u65f6\u95f4\u7ef4\u5ea6supersampling\uff0c\u56e0\u6b64\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6709\u76ca\u4e8e\u53cd\u8d70\u6837\u6297\u952f\u9f7f\u3002\u5feb\u95e8\u7684\u901f\u5ea6\u53ef\u4ee5\u5ef6\u4f38\u51faFast and Slow Photography\u3002</p> <p>\u4e4b\u524d\u4e00\u76f4\u5728\u8bf4\u76f8\u673a\u7684\u4e0d\u540c\u90e8\u4ef6\uff0c\u4f46\u662f\u6700\u6700\u91cd\u8981\u7684\u5176\u5b9e\u662f\u955c\u5934\u3002\u771f\u5b9e\u7684\u955c\u5934\u5176\u5b9e\u90fd\u662f\u7531\u68f1\u955c\u7ec4\u7ec4\u6210\u7684\uff0c\u975e\u5e38\u7684\u590d\u6742\uff1b\u540c\u65f6\u6709\u4e9b\u68f1\u955c\u957f\u7684\u4e0d\u662f\u6211\u4eec\u60f3\u8c61\u7684\u90a3\u79cd\u68f1\u955c\uff0c\u4f8b\u5982Aberration\u73b0\u8c61\u3002\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u7b80\u5355\u7684\u3001\u7406\u60f3\u7684\u68f1\u955c\uff1aIdeal Thin Lens\uff0c\u5e73\u884c\u5149\u7ecf\u8fc7\u5b83\u4f1a\u805a\u5728\u7126\u70b9\u3002\u8fd9\u79cd\u68f1\u955c\u4f1a\u6ee1\u8db3\u4e00\u79cd\u57fa\u672c\u7684\u7269\u7406\u89c4\u5f8b\uff1a</p> <p></p> <p>\u90a3\u4e48\u5728ray tracing\u4e2d\u5982\u4f55\u5f15\u5165\u900f\u955c\uff08lens\uff09\u5462\uff1f\u4e0b\u56fe\u4ecb\u7ecd\u4e86setup\uff1a</p> <p></p> <p>\u5728\u6e32\u67d3\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u5982\u4e0b\uff1a</p> <p></p> <p>BTW\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86Depth of Focus(\u7126\u6df1)\u662f\u5982\u4f55\u5f71\u54cdDepth of Field(\u666f\u6df1)\u7684\uff1a</p> <p></p> <p>\u6700\u540e\u4ecb\u7ecd\u5149\u573a\uff08Light Field / Lumigraph\uff09\u3002\u6211\u4eec\u751f\u6d3b\u4e2d\u770b\u5230\u73b0\u5b9e\u4e09\u7ef4\u4e16\u754c\uff0c\u4f46\u662f\u5047\u5982\u8bf4\u773c\u524d\u653e\u4e00\u5757\u5c4f\u5e55\uff0c\u7136\u540e\u7cbe\u786e\u5448\u73b0\u4f60\u4e4b\u524d\u770b\u5230\u76842D\u753b\u9762\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u4e0d\u4f1a\u53d1\u73b0\u5f02\u5e38\uff0c\u8fd9\u5c31\u662f\u865a\u62df\u73b0\u5b9e\u7684\u539f\u7406\uff08\u6211\u4eec\u53ea\u5173\u5fc3\u201c\u5e55\u5e03\u201d\uff0c\u4e0d\u5173\u5fc3\u771f\u5b9e\u76843D\u4e16\u754c\uff09\u3002\u90a3\u4e48\u5982\u4f55\u8868\u793a\u4eba\u770b\u5230\u76842D\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5168\u5149\u51fd\u6570\uff08Plenoptic Function\uff09\u6765\u8fdb\u884c\u8868\u793a\u3002\u4ee5\u773c\u775b\u4e3a\u539f\u70b9\uff0c\u53ef\u4ee5\u7528\u7403\u5750\u6807\u7cfb\u7684\u8f93\u5165\u6765\u8868\u793a\u51fd\u6570\uff1a\\(P(\\theta,\\phi) \\rightarrow Intensity\\ of\\ light\\)\u3002\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709RGB\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fdb\u884c\u6539\u8fdb\uff1a\\(P(\\theta,\\phi, \\lambda)\\)\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u65f6\u95f4\u7ef4\u5ea6\uff0c\u540c\u65f6\u5f15\u5165\u773c\u775b\u7684\u4e09\u7ef4\u5750\u6807\uff1a\\(P(\\theta,\\phi, \\lambda, t, V_{x}, V_{y}, V_{z})\\)\u3002\u8fd9\u662f\u4e00\u4e2a\u4e03\u4e2a\u7ef4\u5ea6\u7684\u51fd\u6570\u3002</p> <p>\u4e09\u7ef4\u4e2d\u7684\u5149\u7ebf\u8ba4\u4e3a\u662f5D\uff1a\u8d77\u70b9\u4e09\u7ef4\uff0c\u65b9\u5411\u7403\u5750\u6807\u8868\u793a\u4e24\u7ef4\u3002\u90a3\u4e48\u4ec0\u4e48\u662f\u5149\u573a\uff1f\u89c1\u4e0b\u56fe\u3002\u6211\u4eec\u7528\u76d2\u5b50\u6846\u4f4f\u7269\u4f53\uff0c\u7136\u540e\u7528\u4e00\u5b9a\u7684resolution\u5212\u5206\u76d2\u5b50\u4e0a\u7684\u8868\u9762\u3002\u5bf9\u4e8e\u7269\u4f53\u8868\u9762\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u6765\u8bf4\uff0c\u5b83\u548c\u76d2\u5b50\u4e0a\u7684\u4e00\u4e2a\u5c0f\u683c\u5b50\u7684\u4e2d\u5fc3\u70b9\u8fde\u7ebf\uff0c\u5c31\u662f\u65b9\u5411\uff0c\u5982\u679c\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\u6211\u5c31\u80fd\u77e5\u9053intensity\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u5149\u573a\u7684\u6982\u5ff5\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u7269\u4f53\u8868\u9762\u53ef\u4ee5\u7406\u89e3\u4e3a2D\uff08texture\uff09\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u51fd\u6570\uff08\u5168\u5149\u51fd\u6570\u7684\u4e00\u90e8\u5206\uff09\u7684\u8f93\u5165\u7ef4\u5ea6\u5c31\u4ece\u539f\u6765\u76845D\u964d\u52304D\uff1a2D\u8868\u793a\u4f4d\u7f6e\uff082D coordinates inputted into mapping\uff09\uff0c2D\u8868\u793a\u65b9\u5411\u3002\u6709\u4e86\u5149\u573a\uff0c\u5c31\u80fd\u77e5\u9053\u4efb\u610f\u89d2\u5ea6\u770b\u5411\u7269\u4f53\u5404\u4e2a\u70b9\u6240\u5e94\u8be5\u63a5\u53d7\u5230\u7684\u5149\u3002</p> <p></p> <p>\u540c\u65f6\uff0c\u4e0e\u5176\u4e13\u95e8\u7528\u4e24\u4e2a\u89d2\u6765\u8868\u793a\u65b9\u5411\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u70b9\u3002\u5982\u4e0b\u56fe\uff1a\u5b9a\u4e49\u4e24\u4e2a\u76f8\u4e92\u5e73\u884c\u7684\u9762\uff0c\u800c\u4e14\u662fAxis-Aligned\uff0c\u90a3\u4e48\u901a\u8fc7\u56db\u4e2a\u53c2\u6570\uff0c\u5373\u4e24\u4e2a\u70b9\u5404\u81ea\u7684\u4e8c\u7ef4\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u51fd\u6570\u6c42\u51fa\u5149\u5f3a\u3002</p> <p></p> <p>\u5229\u7528\u5149\u573a\uff0c\u5c31\u80fd\u5236\u4f5c\u5149\u573a\u6444\u50cf\u673a\uff1a\u539f\u6765\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5bf9\u5e94\u7684sensor\u90fd\u6362\u6210\u900f\u955c\uff0c\u5bf9\u4e8e3D\u4e16\u754c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b9\u5411\u8fc7\u6765\u7684\u70b9\uff0c\u90fd\u80fd\u7528\u5149\u573a\u51fd\u6570\u77e5\u9053\u5f3a\u5ea6\uff0c\u56e0\u6b64\u5230\u8fbe\u68f1\u955c\u65f6\u7684\u662firradiance\uff0c\u4f46\u662f\u900f\u8fc7\u900f\u955c\u53c8\u80fd\u6309\u7167\u65b9\u5411\u5206\u5f00\u50a8\u5b58radiance\uff1b\u76f8\u5f53\u4e8e\uff0c\u5982\u679c\u5206\u5f00\u50a8\u5b58\u7684\u90a3\u4e9bradiance\u90fd\u53d6\u5e73\u5747\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u539f\u672c\u7684\u666e\u901a\u76f8\u673a\u3002\u8fd9\u4e48\u505a\u6709\u4ec0\u4e48awesome\u7684\u5730\u65b9\u5417\uff1f\u90a3\u5c31\u662f\u865a\u62df\u53d8\u7126\uff01\u901a\u8fc7\u8ba1\u7b97\u67d0\u4e00\u7126\u8ddd\u4e0b\u5404\u4e2a\u50cf\u7d20\u5e94\u8be5\u9009\u51fa\u7684irradiance\u6765\u586b\u5145\u5404\u4e2a\u50cf\u7d20\uff0c\u5f97\u5230\u7684\u7167\u7247\u5c31\u662f\u6211\u5e0c\u671b\u7684\u7126\u8ddd\u4e0b\u7684\u7167\u7247\u3002\u5f53\u7136\u5206\u8fa8\u7387\u4f1a\u4e0b\u964d\uff0c\u56e0\u4e3a\u539f\u6765\u5448\u73b0\u4e00\u4e2a\u50cf\u7d20\u53ea\u9700\u8981\u80f6\u7247\u7684\u4e00\u4e2a\u5355\u4f4d\uff0c\u4f46\u662f\u73b0\u5728\u4e3a\u4e86\u8bb0\u5f55\u591a\u4e2a\u65b9\u5411\u7684radiance\uff0c\u9700\u8981\u989d\u5916\u6d88\u8017\u50a8\u5b58\u7a7a\u95f4\u3002</p> <p></p>"},{"location":"GAMES101/note.html#color-and-perception","title":"Color and Perception","text":"<p>\u4e00\u675f\u5149\u7a7f\u8fc7\u4e09\u68f1\u955c\uff0c\u80fd\u6298\u5c04\u51fa\u4e0d\u540c\u7684\u989c\u8272\uff0c\u662f\u56e0\u4e3a\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u6298\u5c04\u7387\u4e0d\u4e00\u6837\uff1b\u6362\u800c\u8a00\u4e4b\uff0c\u5149\u5176\u5b9e\u662f\u7531\u4e0d\u540c\u6ce2\u957f\u6784\u6210\u7684\uff0c\u800c\u5bf9\u5e94\u5230\u7684\u5c31\u662f\u5149\u8c31\uff08The Visible Spectrum of Light\uff09\u3002\u540c\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u666e\u529f\u7387\u5bc6\u5ea6\u6765\u63cf\u8ff0\u5149\u5728\u4e0d\u540c\u6ce2\u957f\u7684\u5206\u5e03\uff08SPD\uff09\u3002SPD\u6709\u7ebf\u6027\u6027\u8d28\uff08Linearity\uff09\u3002</p> <p>\u4f46\u662f\u6700\u7ec8\u6211\u4eec\u770b\u5230\u7684\u4e0d\u662f\u5149\u8c31\uff0c\u4e5f\u4e0d\u662fSPD\u66f2\u7ebf\uff1aColor is a phenomenon of human perception; it is not a universal property of light\u3002\u90a3\u4e48\u4eba\u7a76\u7adf\u662f\u5982\u4f55\u611f\u77e5\u5230\u989c\u8272\u7684\uff1f\u90a3\u4e48\u5c31\u8981\u95ee\u773c\u775b\u7684\u7ed3\u6784\u4e86\u3002\u89c6\u7f51\u819c\u662f\u6700\u7ec8\u5149\u7ebf\u5230\u8fbe\u7684\u5730\u65b9\uff0c\u90a3\u4e48\u989c\u8272\u7684\u5448\u73b0\u662f\u7531\u4e8e\u89c6\u7f51\u819c\u4e0a\u7684\u611f\u5149\u7ec6\u80de\uff1a\u7ec6\u80de\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u68d2\u72b6\uff0c\u53ef\u4ee5\u7528\u6765\u611f\u77e5\u5149\u7167\u7684\u5f3a\u5ea6\uff0c\u7b2c\u4e8c\u79cd\u662f\u9525\u5f62\u7ec6\u80de\uff0c\u5b83\u8fd8\u5206\u4e3a\u4e09\u7c7b\uff0c\u6bcf\u4e00\u7c7b\u5bf9\u4e0d\u540c\u7684\u6ce2\u957f\u7684\u611f\u53d7\u7a0b\u5ea6\u4e0d\u4e00\u6837\u3002</p> <p></p> <p>\u6240\u4ee5\u4eba\u773c\u7a76\u7adf\u611f\u53d7\u5230\u7684\u662f\u4ec0\u4e48\uff1f\u5176\u5b9e\u4e0a\u8ff0\u7684\u4e09\u79cd\u7ec6\u80de\u7684\u611f\u53d7\u66f2\u7ebf\u5176\u5b9e\u662f\u610f\u5473\u7740\u7684\u662f\u201c\u654f\u611f\u5ea6\u201d\uff0c\u90a3\u4e48\u901a\u8fc7\u4e09\u4e2a\u6743\u91cd\u66f2\u7ebf\u53bb\u548c\u539f\u6765\u5149\u7ebf\u7684\u6ce2\u957f\u8fdb\u884c\u79ef\u5206\u64cd\u4f5c\uff0c\u5c31\u80fd\u5f97\u5230\u4e09\u4e2a\u503c\uff1aSML\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u6700\u7ec8\uff0c\u4eba\u773c\u770b\u89c1\u7684\u5176\u5b9e\u5c31\u662f\u4e09\u79cd\u5bf9\u5e94\u7684\u503c\uff1aSML\uff0c\u8fd9\u662f\u5927\u8111\u6536\u5230\u7684\u4fe1\u606f\u3002</p> <p></p> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u79cd\u73b0\u8c61\uff1a\u540c\u8272\u5f02\u8c31\uff08Metamerism\uff09\u3002\u4e0d\u540c\u6ce2\u957f\u53ef\u80fd\u6709\u76f8\u540c\u7684\u989c\u8272\u5417\uff1f\u7b54\u6848\u5f53\u7136\u662f\u53ef\u80fd\u7684\u3002\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>Color Reproduction / Matching\u3002Additive Color is as the following figure:</p> <p></p> <p>\u8bf4\u660e\u901a\u8fc7\u4e09\u79cd\u6ce2\u957f\uff0c\u6211\u5c31\u80fd\u62df\u5408\u51fa\u5f88\u591a\u7684\u989c\u8272\u3002\u5f53\u7136\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\uff1a\u5982\u4e0b\u56fe\uff0c\u5de6\u8fb9\u7684\u989c\u8272\u53f3\u8fb9\u600e\u4e48\u4e5f\u62df\u5408\u4e0d\u51fa\u6765\uff0c\u4f46\u662f\u5982\u679c\u5de6\u8fb9\u52a0\u4e0a\u4e00\u79cd\u6ce2\u957f\u7684\u4e00\u5b9a\u5f3a\u5ea6\uff0c\u53f3\u8fb9\u5c31\u80fd\u62df\u5408\u51fa\u6765\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u5927\u591a\u662f\u56e0\u4e3a\u6ce2\u957f\u53ea\u80fd\u76f8\u52a0\uff0c\u4e0d\u80fd\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\u5b9e\u73b0\u51cf\u6cd5\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u4eba\u4eec\u5c1d\u8bd5\u7528RGB\u53bb\u62df\u5408\u989c\u8272\u3002\u4e0b\u56fe\u5c31\u5c55\u793a\u4e86\uff1a\u4e0d\u540c\u6ce2\u957f\u4e0b\u7684\u5149\uff0c\u5e94\u8be5\u5982\u4f55\u7528\u4e09\u79cdRGB\u6ce2\u957f\u5149\u7684\u5404\u81ea\u53c2\u6570\u53bb\u62df\u5408(Standardized RGB, sRGB)\uff1a</p> <p></p> <p>\u867d\u7136sRGB\u770b\u4f3c\u5b8c\u7f8e\uff0c\u4f46\u662f\u80fd\u591f\u62df\u5408\u7684\u6ce2\u957f\u5149\u7684\u6ce2\u957f\u8303\u56f4\uff0c\u4e5f\u5c31\u662f\u8272\u57df\uff0c\u662f\u6709\u9650\u7684\u3002\u4e0a\u56fe\u4e2d\u7ea2\u8272\u8d1f\u6570\u7684\u90e8\u5206\u5728\u73b0\u5b9e\u64cd\u4f5c\u4e2d\u4e0d\u53ef\u80fd\u5b9e\u73b0\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u7ed9\u5149\u52a0\u4e0a\u6ce2\u957f\u5149\uff0c\u4e0d\u80fd\u62bd\u51fa\u6ce2\u957f\u5149\u3002\u56e0\u6b64\u8fd8\u6709\u5176\u4ed6\u7684Color Matching\uff0c\u5982CIE XYZ\uff0c\u5b83\u548csRGB\u7684\u533a\u522b\u4ec5\u4ec5\u662f\u5339\u914d\u51fd\u6570\u3002\u8272\u57df\uff0cGamut\uff0cis the set of chromaticties generated by a set of color primaries\u3002\u8fd8\u6709\u4e9b\u5e38\u89c1\u7684\u989c\u8272\u7a7a\u95f4\uff0c\u5982HSV\uff08Hue-Saturation-Value\uff09\uff0cLab\uff08CIELAB Space\uff09\uff0cCMKY\uff08Cyan, Magenta, Yellow, and Key\uff09\u3002</p> <p></p> <p></p>"},{"location":"GAMES101/note_hw.html","title":"Homework","text":""},{"location":"GAMES101/note_hw.html#homework-1","title":"Homework 1","text":"<p>\u4f5c\u4e1a\u6587\u4ef6\u8be6\u89c1Assignment1\u3002\u8fd9\u91cc\u9700\u8981\u5b9e\u73b0\u7ed5Z\u8f74\u65cb\u8f6c\u7684\u65cb\u8f6c\u77e9\u9635\uff0c\u6295\u5f71\u77e9\u9635\uff0c\u548c\u4e09\u89d2\u5f62\u7ed5\u8fc7\u539f\u70b9\u7684\u4efb\u610f\u4e00\u6761\u8f74\u65cb\u8f6c\u7684\u77e9\u9635\uff0c\u5176\u5b9e\u8fd9\u4e09\u4e2a\u77e9\u9635\u8bfe\u7a0b\u4e2d\u90fd\u6709\u63d0\u53ca\u3002</p> <p>\u7b2c\u4e00\u4e2a\u77e9\u9635\uff1a\u7ed5x y z\u8f74\u65cb\u8f6c\u7684\u65cb\u8f6c\u77e9\u9635\u5982\u4e0b\uff1a</p> <p></p> <p>\u56e0\u6b64\uff0c\u4f9d\u846b\u82a6\u753b\u74e2\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u8f93\u5165\u7684\u662f\u89d2\u5ea6\uff0c\u8981\u8f6c\u5316\u4e3a\u5f27\u5ea6\u5236\uff1b\u5e76\u4e14\uff0c\u8fd9\u4e2a\u77e9\u9635\u5982\u4f55\u5199\u8fdb<code>Eigen::Matrix4f model</code>\u3002\u90a3\u4e48\u95ee\u4e0b\u53ef\u7231\u7684kimi\uff0c\u5c31\u4f1a\u77e5\u9053\uff08\u4ee5\u4e0b\u5185\u5bb9\u6765\u81eakimi\uff09\uff1a</p> <p>Prompt\uff1a\u77e9\u9635\u5982\u4f55\u5199\u8fdb<code>Eigen::Matrix4f model</code></p> <p>\u5728C++\u4e2d\u4f7f\u7528Eigen\u5e93\u6765\u5904\u7406\u77e9\u9635\u65f6\uff0c<code>Eigen::Matrix4f</code>\u662f\u4e00\u4e2a4x4\u6d6e\u70b9\u6570\u77e9\u9635\u7684\u7c7b\u578b\u3002\u5982\u679c\u4f60\u60f3\u5c06\u6570\u636e\u5199\u5165\u4e00\u4e2a<code>Eigen::Matrix4f</code>\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u65b9\u6cd5\uff1a</p> <ol> <li>\u76f4\u63a5\u521d\u59cb\u5316\uff1a \u5f53\u4f60\u521b\u5efa\u4e00\u4e2a<code>Eigen::Matrix4f</code>\u53d8\u91cf\u65f6\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u521d\u59cb\u5316\u5b83\u3002</li> </ol> <p><code>cpp    Eigen::Matrix4f model;    model &lt;&lt; 1, 0, 0, 0,             0, 1, 0, 0,             0, 0, 1, 0,             0, 0, 0, 1; // \u8fd9\u662f\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635</code></p> <ol> <li>\u4f7f\u7528<code>.setIdentity()</code>\uff1a \u5982\u679c\u4f60\u60f3\u521b\u5efa\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\uff0c\u53ef\u4ee5\u4f7f\u7528<code>.setIdentity()</code>\u65b9\u6cd5\u3002</li> </ol> <p><code>cpp    Eigen::Matrix4f model;    model.setIdentity();</code></p> <ol> <li>\u4f7f\u7528<code>.setZero()</code>\uff1a \u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6240\u6709\u5143\u7d20\u90fd\u662f\u96f6\u7684\u77e9\u9635\uff0c\u53ef\u4ee5\u4f7f\u7528<code>.setZero()</code>\u3002</li> </ol> <p><code>cpp    Eigen::Matrix4f model;    model.setZero();</code></p> <ol> <li>\u4f7f\u7528<code>Eigen::Matrix4f::Zero()</code>\u6216<code>Eigen::Matrix4f::Identity()</code>\uff1a \u8fd9\u4e9b\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa\u7279\u5b9a\u7c7b\u578b\u7684\u77e9\u9635\u3002</li> </ol> <p><code>cpp    Eigen::Matrix4f model = Eigen::Matrix4f::Zero(); // \u5168\u96f6\u77e9\u9635    Eigen::Matrix4f model2 = Eigen::Matrix4f::Identity(); // \u5355\u4f4d\u77e9\u9635</code></p> <ol> <li>\u4f7f\u7528<code>Eigen::Matrix4f</code>\u7684\u6784\u9020\u51fd\u6570\uff1a \u4f60\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u503c\u7684\u77e9\u9635\u3002</li> </ol> <p><code>cpp    Eigen::Matrix4f model(1, 2, 3, 4,                          5, 6, 7, 8,                          9, 10, 11, 12,                          13, 14, 15, 16);</code></p> <ol> <li>\u4f7f\u7528<code>Eigen::Matrix4f</code>\u7684\u8d4b\u503c\u64cd\u4f5c\u7b26\uff1a \u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u6570\u7ec4\u6216\u8005\u53e6\u4e00\u4e2a\u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8d4b\u503c\u64cd\u4f5c\u7b26\u6765\u586b\u5145<code>Eigen::Matrix4f</code>\u3002</li> </ol> <p><code>cpp    float data[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};    Eigen::Matrix4f model;    model = Eigen::Map&lt;Eigen::Matrix&lt;float, 4, 4, Eigen::RowMajor&gt;&gt;(data);</code></p> <ol> <li>\u4f7f\u7528<code>Eigen::Matrix4f</code>\u7684<code>.block()</code>\u65b9\u6cd5\uff1a \u5982\u679c\u4f60\u9700\u8981\u5c06\u4e00\u4e2a\u8f83\u5c0f\u7684\u77e9\u9635\u6216\u6570\u7ec4\u63d2\u5165\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u9635\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528<code>.block()</code>\u65b9\u6cd5\u3002</li> </ol> <p><code>cpp    Eigen::Matrix4f model;    Eigen::Matrix4f submatrix(1, 2, 3, 4,                              5, 6, 7, 8);    model.block&lt;2, 2&gt;(0, 0) = submatrix;</code></p> <p>\u9009\u62e9\u54ea\u79cd\u65b9\u6cd5\u53d6\u51b3\u4e8e\u4f60\u7684\u5177\u4f53\u9700\u6c42\u548c\u4f60\u60f3\u8981\u521d\u59cb\u5316\u7684\u77e9\u9635\u7c7b\u578b\u3002</p> <p>Prompt\uff1a\u8bed\u6cd5\u4f1a\u81ea\u52a8\u8bc6\u522b\u6362\u884c\u5c31\u662f\u77e9\u9635\u65b0\u7684\u4e00\u884c\u5417\uff1f</p> <p>\u5728Eigen\u5e93\u4e2d\uff0c\u4f7f\u7528<code>&lt;&lt;</code>\u8fd0\u7b97\u7b26\u6765\u521d\u59cb\u5316\u6216\u8d4b\u503c\u77e9\u9635\u65f6\uff0c\u786e\u5b9e\u53ef\u4ee5\u5229\u7528\u6362\u884c\u7b26\u6765\u8868\u793a\u77e9\u9635\u7684\u65b0\u4e00\u884c\u3002\u8fd9\u79cd\u8bed\u6cd5\u662fEigen\u63d0\u4f9b\u7684\u4fbf\u6377\u65b9\u5f0f\uff0c\u4f7f\u5f97\u77e9\u9635\u7684\u521d\u59cb\u5316\u66f4\u52a0\u76f4\u89c2\u548c\u6613\u4e8e\u9605\u8bfb\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u521d\u59cb\u5316\u4e00\u4e2a<code>Eigen::Matrix4f</code>\u77e9\u9635\uff1a</p> <pre><code>Eigen::Matrix4f model;\nmodel &lt;&lt; 1, 0, 0, 0,\n         0, 1, 0, 0,\n         0, 0, 1, 0,\n         0, 0, 0, 1; // \u8fd9\u662f\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u884c\u7684\u672b\u5c3e\u4f7f\u7528\u6362\u884c\u7b26<code>\\n</code>\u6765\u8868\u793a\u4e0b\u4e00\u884c\u7684\u5f00\u59cb\u3002Eigen\u4f1a\u81ea\u52a8\u8bc6\u522b\u6362\u884c\u7b26\uff0c\u5e76\u5c06\u5176\u89c6\u4e3a\u65b0\u884c\u7684\u5f00\u59cb\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u4f7f\u7528<code>&lt;&lt;</code>\u8fd0\u7b97\u7b26\u8fdb\u884c\u77e9\u9635\u521d\u59cb\u5316\u65f6\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u6bcf\u884c\u7684\u5143\u7d20\u6570\u91cf\u4e0e\u77e9\u9635\u7684\u5217\u6570\u76f8\u5339\u914d\uff0c\u5e76\u4e14\u6240\u6709\u884c\u7684\u5143\u7d20\u6570\u91cf\u4e00\u81f4\u3002\u5982\u679c\u884c\u4e0e\u5217\u4e0d\u5339\u914d\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u62a5\u9519\u3002</p> <p>\u90a3\u4e48\u7ed3\u679c\u5f88\u660e\u663e\u4e86\uff0c<code>Eigen::Matrix4f get_model_matrix(float rotation_angle)</code>\u5982\u4e0b\uff1a</p> <pre><code>constexpr double MY_PI = 3.1415926;\nEigen::Matrix4f get_model_matrix(float rotation_angle)\n{\n    Eigen::Matrix4f model = Eigen::Matrix4f::Identity();\n    // \u89d2\u5ea6\u8f6c\u5316\u4e3a\u5f27\u5ea6\n    float angle = rotation_angle / 180 * MY_PI;\n    model &lt;&lt; std::cos(angle), -std::sin(angle), 0, 0,\n        std::sin(angle), std::cos(angle), 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1;\n    return model;\n}\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u6295\u5f71\u77e9\u9635\uff0c\u8f93\u5165\u7684\u53c2\u6570\u6709\u70b9\u591a\uff0c\u8be6\u89c1\u4e0b\u56fe\uff1a</p> <ul> <li>eye_fov\u4e3afield of view\uff0c\u5782\u76f4\u53ef\u89c6\u89d2\uff08\u4f46\u662f\u6ca1\u8bf4\u662ffovY\u8fd8\u662f\u4ec0\u4e48\uff0c\u6211\u8ba4\u4e3a\u662ffovY\uff09</li> <li>aspect_ratio\u4e3a\u5bbd\u9ad8\u6bd4</li> <li>zNear \u5c31\u662f\u8fd1\u5e73\u9762\u7684Z\u503c\uff0c\u800czFar\u662f\u8fdc\u5e73\u9762\u5230XOY\u7684Z\u503c\uff08\u6ce8\u610f\uff1a\u90fd\u662f\u8d1f\u6570\uff09</li> </ul> <p></p> <p>\u800c\u6295\u5f71\u77e9\u9635\u4e4b\u524d\u4e5f\u662f\u63a8\u8fc7\u7684\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\\(M_{ortho}\\)\u4e2d\uff0c\u540e\u9762\u4e00\u4e2a\u77e9\u9635\u4ee3\u8868\u5e73\u79fb\uff0c\u524d\u4e00\u4e2a\u4ee3\u8868\u7f29\u653e\uff0c\u662f\u5148\u5e73\u79fb\u540e\u7f29\u653e\uff0c\u4f7f\u5f97cuboid\u53d8\u6210canonical cube\u3002  \u4f46\u662f\u5982\u4f55\u7528\u8fd9\u4e9b\u53c2\u6570\u63a8\u51fa\uff1a\\(r-l(\u957f)\uff1bt-b(\u5bbd)\\)\u5462\uff1f\uff08\\(M_{ortho}\\)\u77e9\u9635\u4e2d\u7684\u53c2\u6570\u90fd\u662f\u8fd1\u5e73\u9762\u7684\uff0c\u56e0\u4e3a\u5728\\(persp\\rightarrow ortho\\)\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8bbe\u5b9a\u662f\u8fd1\u5e73\u9762\u4e0d\u53d8\uff0c\u800c\u8fdc\u5e73\u9762\u5927\u5c0f\u53d8\u6210\u8fd1\u5e73\u9762\u5927\u5c0f\uff09\u4e0b\u9762\u8fd9\u4e2a\u56fe\u8bf4\u660e\u4e86\u4e00\u5207\uff1a</p> <p></p> <p>\u56e0\u6b64\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>Eigen::Matrix4f get_projection_matrix(float eye_fov, float aspect_ratio,\n                                      float zNear, float zFar)\n{\n    Eigen::Matrix4f projection = Eigen::Matrix4f::Identity();\n    // \u5957\u516c\u5f0f\n    float n = zNear;\n    float f = zFar;\n    Eigen::Matrix4f M_persp_to_ortho;\n    M_persp_to_ortho &lt;&lt; n, 0, 0, 0,\n        0, n, 0, 0,\n        0, 0, n + f, -n * f,\n        0, 0, 1, 0;\n    // \u4f9d\u7136\u9700\u8981\u89d2\u5ea6\u8f6c\u5316\u4e3a\u5f27\u5ea6\u5236\n    float fov = eye_fov * MY_PI / 180.0;\n    // \u5957\u516c\u5f0f\n    // \u6ce8\u610fn\u8981\u53d6\u8d1f\u6570\uff01\u56e0\u4e3a\u539f\u6765\u7684zNear\u662f\u8d1f\u6570\uff01\u9762\u671d-Z\u8f74\uff01\n    float t = -n * tan(fov / 2);\n    float b = -t;\n    float r = aspect_ratio * t;\n    float l = -r;\n\n    Eigen::Matrix4f M_ortho, translation, scale;\n    translation &lt;&lt; 1, 0,  0,  -(r+l)/2,\n             0, 1,  0,  -(t+b)/2,\n             0, 0,  1,  -(n+f)/2,\n             0, 0,  0,  1;\n    scale &lt;&lt; 2/(r-l),   0,  0,  0,\n                0,  2/(t-b),   0,  0,\n                0,  0,  2/(n-f),    0,\n                0,  0,  0,  1;\n    M_ortho =  scale * translation;           \n    projection = M_ortho * M_persp_to_ortho ;\n    return projection;\n}\n</code></pre> <p>\u8fd9\u91cc\u5c31\u80fd\u8fd0\u884c\u7ed3\u679c\u4e86\uff0c\u5982\u4e0b\uff1a\uff08\u867d\u7136\u8fd0\u884c\u8d77\u6765\u7684\u8fc7\u7a0b\u4e00\u6ce2\u4e09\u6298\uff0c\u540e\u7eed\u4f1a\u5c06\uff09</p> <p></p> <p>\u90a3\u4e48\u5173\u4e8e\u63d0\u9ad8\u9879\uff0c\u7f57\u5fb7\u91cc\u683c\u65af\u516c\u5f0f\u5982\u4e0b\uff1a  \u56e0\u6b64\u8bbe\u8ba1\u51fd\u6570\u5982\u4e0b\u3002<code>axis</code>\u662f\u4e00\u4e2a<code>Eigen::Vector3f</code>\u7684\u53d8\u91cf\uff08\u7f51\u7edc\u641c\u7d22\u5bf9\u5e94\u7684\u5f97\u5230n\u5411\u91cfx y z\u503c\u7684\u51fd\u6570\uff09\uff0c\u5e26\u5165\u516c\u5f0f\uff0c\u6ce8\u610f\u539f\u6765\u516c\u5f0f\u5f97\u5230\u7684\u662f3\u00d73\uff0c\u800c\u4f5c\u4e3a\u65cb\u8f6c\u77e9\u9635\u8981\u7565\u5fae\u53d8\u5f62\uff1a</p> <pre><code>Eigen::Matrix4f get_axis_model_matrix(float rotation_angle, Eigen::Vector3f axis)\n{\n    float angle = rotation_angle / 180 * MY_PI;\n    Eigen::Matrix3f N = Eigen::Matrix3f::Identity();\n    N &lt;&lt; 0, -axis.z(), axis.y(),\n        axis.z(), 0, -axis.x(),\n        -axis.y(), axis.x(), 0;\n    Eigen::Matrix3f rod = std::cos(angle) * Eigen::Matrix3f::Identity() + (1 - std::cos(angle)) * axis * axis.transpose() + std::sin(angle) * N;\n    Eigen::Matrix4f model;\n\n    model &lt;&lt; rod(0, 0), rod(0, 1), rod(0, 2), 0,\n        rod(1, 0), rod(1, 1), rod(1, 2), 0,\n        rod(2, 0), rod(2, 1), rod(2, 2), 0,\n        0, 0, 0, 1;\n\n    return model;\n}\n</code></pre> <p>\u597d\u7684\uff0c\u4e0a\u9762\u5c31\u662fhomework1\u7684\u4e3b\u8981\u5185\u5bb9\u4e86\u3002\u6700\u540e\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff1a\u7a76\u7adf\u5982\u4f55\u662fcmake\u6700\u540e\u5f97\u5230exe\u6267\u884c\u6587\u4ef6\u7684\u3002\u8bf4\u5b9e\u8bdd\uff0c\u5173\u4e8ecmake\u7684\u5de5\u7a0b\u77e5\u8bc6\uff0c\u6211\u7684\u77e5\u8bc6\u50a8\u5907\u5f88\u5c11\uff0c\u867d\u7136CS100\u7684\u690d\u7269\u5927\u6218\u50f5\u5c38\u5927\u4f5c\u4e1a\u6d89\u53ca\u5230\u4e86\u8fd9\u4e00\u90e8\u5206\u7684\u77e5\u8bc6\u70b9\u3002\u603b\u4e4b\uff0c\u5728\u73af\u5883\u53d8\u91cf\u91cc\u9762\u6ca1\u6709\u7f16\u5165Eigen\u5e93\u7684\u65f6\u5019\uff0c\u6211\u662f\u5982\u4f55\u5904\u7406opencv\u5e93\u7684\u3002</p> <p>\u9996\u5148\u662fopencv\u7684\u4e0b\u8f7d\uff0c\u8fd9\u4e00\u90e8\u5206\u501f\u9274\u8fd9\u4e2aCSDN\u535a\u5ba2\u7684\u7b2c\u4e00\u6b65\uff08\u535a\u5ba2\u91cc\u9762\u5206\u4e3a\u4e09\u6b65\uff09\uff0c\u8fd9\u4e2a\u77e5\u4e4e\u535a\u5ba2\u7684<code>\u5b89\u88c5opencv\u5e93\u7684\u61d2\u4eba\u7248</code>\u3002\u4e24\u4e2a\u6b65\u9aa4\u90fd\u91c7\u53d6\u4e86\uff0c\u56e0\u6b64\u6700\u540e\u6210\u529f\u7684\u65f6\u5019\uff0c\u6211\u4e0d\u77e5\u9053\u662f\u54ea\u4e00\u90e8\u5206\u6210\u529f\u8dd1\u8d77\u6765\u4e86(\u868c\u57e0\u4f4f\u4e86)\u3002</p> <p>\u7136\u540e\u662f\u4fee\u6539<code>CMakeList.txt</code>\uff0c\u539f\u5148\u5982\u4e0b\uff1a</p> <pre><code>cmake_minimum_required(VERSION 3.10)\nproject(Rasterizer)\n\nfind_package(OpenCV REQUIRED)\n\nset(CMAKE_CXX_STANDARD 17)\n\ninclude_directories(/usr/local/include)\n\nadd_executable(Rasterizer main.cpp rasterizer.hpp rasterizer.cpp Triangle.hpp Triangle.cpp)\ntarget_link_libraries(Rasterizer ${OpenCV_LIBRARIES})\n</code></pre> <p>\u4f46\u662f\u4e0dwork\uff0c\u5728<code>find_package(OpenCV REQUIRED)</code>\u8fd9\u4e00\u6b65fail\u4e86\u3002\u56e0\u6b64\u6211\u6539\u6210\u4e86\u4e0b\u9762\uff1a</p> <pre><code>cmake_minimum_required(VERSION 3.10)\nproject(Rasterizer)\n\nset(OpenCV_DIR \"C:\\\\Users\\\\23714\\\\Desktop\\\\CG\\\\opencv\\\\build\")\nfind_package(OpenCV REQUIRED)\n\nset(CMAKE_CXX_STANDARD 17)\n\ninclude_directories(\"C:\\\\Users\\\\23714\\\\Desktop\\\\CG\\\\eigen-3.4.0\\\\eigen-3.4.0\")\ninclude_directories(\"C:\\\\Users\\\\23714\\\\Desktop\\\\CG\\\\opencv\\\\build\\\\include\")\n\nadd_executable(Rasterizer main.cpp rasterizer.hpp rasterizer.cpp Triangle.hpp Triangle.cpp)\ntarget_link_libraries(Rasterizer ${OpenCV_LIBRARIES})\n</code></pre> <p><code>\"C:\\\\Users\\\\23714\\\\Desktop\\\\CG\\\\opencv\\\\build\"</code>\u8fd9\u4e24\u5904\u7684\u8bbe\u8ba1\u90fd\u662f\u4e3a\u4e86\u518d\u4e09\u786e\u4fdd\u80fd\u591f\u627e\u5230opencv\uff0c<code>C:\\\\Users\\\\23714\\\\Desktop\\\\CG\\\\eigen-3.4.0\\\\eigen-3.4.0</code>\u8fd9\u4e00\u5904\u7684\u8bbe\u8ba1\u662f\u4e3a\u4e86\u627e\u5230Eigen\u5e93\u3002</p> <p>\u6700\u540e\u6253\u5f00\u4e86visual studio 2022\uff0c\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5c31\u83ab\u540d\u5176\u5999\u5f00\u59cbcmake\u4e86\uff0c\u6700\u540e\u7ec8\u4e8e\u751f\u6210\u4e86exe\u6587\u4ef6\u3002\u603b\u4e4b\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u7ec8\u4e8ework\u4e86\uff0c\u867d\u7136\u557c\u7b11\u7686\u975e\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48work\u4e86\u3002\u3002\u3002</p>"},{"location":"GAMES101/note_hw.html#homework-2","title":"Homework 2","text":"<p>\u8fd9\u91cc\u9700\u8981\u624b\u52a8\u8fdb\u884c\u5149\u6805\u5316\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6295\u5f71\u52302D\u7684\u4e09\u89d2\u5f62\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2abounding box\uff0c\u7136\u540e\u904d\u5386box\u4e2d\u7684\u50cf\u7d20\uff0c\u5224\u65ad\u662f\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8\u3002\u8fd9\u662f\u5bf9\u4e8e\u9010\u4e2a\u50cf\u7d20\u7684\uff0c\u800c\u5bf9\u4e8e\u9010\u4e2a\u4e09\u89d2\u5f62\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u50cf\u7d20\u9700\u8981\u6bd4\u8f83\u8be5\u4f4d\u7f6e\u7684\u63d2\u503c\u6df1\u5ea6\u503c (interpolated depth value)\u548c\u6df1\u5ea6 \u7f13\u51b2\u533a (depth buffer)\u7684\u503c\uff0c\u5982\u679c\u66f4\u8fd1\uff0c\u90a3\u4e48\u5c31\u8981\u66f4\u65b0\u6df1\u5ea6\u548c\u989c\u8272\u3002</p> <p>\u9996\u5148\u662f\u5224\u65ad\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8\uff1a\u5229\u7528\u4e09\u4e2a\u53c9\u4e58\u662f\u5426\u7b26\u53f7\u4e00\u6837\u6765\u8fdb\u884c\u5224\u65ad\u3002</p> <pre><code>static bool insideTriangle(float x, float y, const Vector3f* _v)\n{   \n    // TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2]\n    Vector3f P = Vector3f(x,y,_v[0].z());\n    Vector3f AB = _v[1] - _v[0];\n    Vector3f AP = P - _v[0];\n    auto cross1 = AB.cross(AP);\n\n    Vector3f BC = _v[2] - _v[1];\n    Vector3f BP = P - _v[1];\n    auto cross2 = BC.cross(BP);\n\n    Vector3f CA = _v[0] - _v[2];\n    Vector3f CP = P - _v[2];\n    auto cross3 = CA.cross(AP);\n\n    if ((cross1.z() &gt; 0 &amp;&amp; cross2.z() &gt; 0 &amp;&amp; cross3.z() &gt; 0) ||\n        (cross1.z() &lt; 0 &amp;&amp; cross2.z() &lt; 0 &amp;&amp; cross3.z() &lt; 0)) {\n        return true;\n    }\n\n    return false;\n}\n</code></pre> <p>\u800c\u5149\u6805\u5316\u6d41\u7a0b\u4e2d\uff0c\u786e\u5b9abounding box\u9996\u5148\u8981\u521d\u59cb\u5316<code>minX maxX minY maxY</code>\uff0c\u8fd9\u91cc\u6211\u5c31\u968f\u4fbf\u62ff\u7b2c\u4e00\u4e2a\u9876\u70b9\u8fdb\u884c\u521d\u59cb\u5316\u4e86\uff0c\u7136\u540e\u76f4\u5230\u627e\u51fa\u4e09\u4e2a\u70b9\u4e2d\u7684<code>minX maxX minY maxY</code>\uff0c\u5e76\u4e14\u8f6c\u5316\u4e3a\u6574\u6570\u3002\u7136\u540e\u904d\u5386\u6846\u67b6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u5728\u4e09\u89d2\u5f62\u5185\u90e8\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u8ba1\u7b97\u5dee\u503c\u51fa\u6765\u7684\u6df1\u5ea6\uff0c\u62ff\u8fd9\u4e2a\u503c\u548cbuffer\u91cc\u9762\u7684\u6bd4\u8f83\uff0c\u5982\u679c\u8fd9\u91cc\u7684\u6df1\u5ea6\u8ddf\u5c0f\uff0c\u8bf4\u660e\u66f4\u8fd1\uff0c\u5e94\u8be5\u66f4\u65b0\u989c\u8272\u548c\u6df1\u5ea6buffer\u3002</p> <pre><code>void rst::rasterizer::rasterize_triangle(const Triangle&amp; t) {\n    auto v = t.toVector4();\n    float minX=t.v[0].x(), maxX=t.v[0].x(), minY=t.v[0].y(), maxY=t.v[0].y();\n\n    for(auto&amp; v : t.v)\n    {   \n        minX=std::min(minX, v.x());\n        maxX=std::max(maxX, v.x());\n        minY=std::min(minY, v.y());\n        maxY=std::max(maxY, v.y());\n    }\n\n    for (int y = floor(minY); y &lt; ceil(maxY); y++) {\n        for (int x = floor(minX); x &lt; ceil(maxX); x++) {\n            if (!insideTriangle(x + 0.5, y + 0.5, t.v)) {continue;}\n\n            auto Barycentric2D = computeBarycentric2D(x, y, t.v);\n            float alpha = std::get&lt;0&gt;(Barycentric2D), beta = std::get&lt;1&gt;(Barycentric2D), gamma = std::get&lt;2&gt;(Barycentric2D);\n            float w_reciprocal = 1.0 / (alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w());\n            float z_interpolated = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w();\n            z_interpolated *= w_reciprocal;\n\n            auto ind = get_index(x, y);\n            if (depth_buf[ind] &gt; z_interpolated) {\n                depth_buf[ind] = z_interpolated;\n                set_pixel(Eigen::Vector3f(x, y, z_interpolated), t.getColor());\n            }\n        }\n    }\n}\n</code></pre> <p>\u5982\u679c\u8981\u5199\u51fa\u4e0a\u8ff0\u7684\u4ee3\u7801\uff0c\u9700\u8981\u7406\u89e3<code>int rst::rasterizer::get_index</code>\u7528\u4f5cbuffer vector\u7684\u5f15\u7d22\u3002\u6700\u540e\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"GAMES101/note_hw.html#homework-3","title":"Homework 3","text":"<p>\u5728\u4e4b\u524d\uff0c\u5149\u6805\u5316\u4e2d\u4e00\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u4ec5\u4ec5\u662f\u7531\u539f\u4e09\u89d2\u5f62\u51b3\u5b9a\u7684\uff08\u5f53\u7136\uff0c\u662fz_interpolated\u6700\u8fd1\u7684\u4e09\u89d2\u5f62\uff09\uff0c\u4f46\u662f\u5b9e\u9645\u4e2d\uff0c\u989c\u8272\u4e0d\u4ec5\u4ec5\u7531\u5b83\u51b3\u5b9a\uff0c\u8fd8\u7531\u6cd5\u5411\u91cf\u3001\u7eb9\u7406\u989c\u8272\u51b3\u5b9a\u3002\u56e0\u6b64\uff0c\u9996\u5148\u662f\u8981\u5728\u4e0a\u4e00\u6b21\u4f5c\u4e1a\u7684\u57fa\u7840\u4e0a\uff0c\u5199\u51fa\u652f\u6301\u7eb9\u7406\u3001\u6cd5\u5411\u91cf\u7b49\u4fe1\u606f\uff0c\u4e14\u50cf\u7d20\u4e2d\u5fc3\u70b9\u989c\u8272\u7531\u4e09\u89d2\u5f62\u4e09\u70b9\u63d2\u503c\u5f97\u6765\u7684\u7a0b\u5e8f\u3002\u63d2\u503c\u516c\u5f0f\u5982\u4e0b\uff1a  </p> <pre><code>void rst::rasterizer::rasterize_triangle(const Triangle&amp; t, const std::array&lt;Eigen::Vector3f, 3&gt;&amp; view_pos) \n{\n    auto v = t.toVector4();\n    float minX=t.v[0].x(), maxX=t.v[0].x(), minY=t.v[0].y(), maxY=t.v[0].y();\n\n    for(auto&amp; v : t.v)\n    {   \n        minX=std::min(minX, v.x());\n        maxX=std::max(maxX, v.x());\n        minY=std::min(minY, v.y());\n        maxY=std::max(maxY, v.y());\n    }\n    for (int y = floor(minY); y &lt; ceil(maxY); y++) {\n        for (int x = floor(minX); x &lt; ceil(maxX); x++) {\n            if (insideTriangle(x + 0.5, y + 0.5, t.v)) { // \u5728\u4e09\u89d2\u5f62\u91cc\u9762\n                // \u5229\u7528\u6ce8\u91ca\u7684\u4ee3\u7801\uff0c\u6c42\u91cd\u5fc3\u4fe1\u606f\n                auto Barycentric2D = computeBarycentric2D(x + 0.5, y + 0.5, t.v);\n                // \u8fd9\u91cc\u7684\u4e09\u4e2a\u53c2\u6570\u5c31\u5bf9\u5e94\u7684\u662f\u516c\u5f0f\u4e2d\u7684\u4e09\u4e2a\u53c2\u6570\n                float alpha = std::get&lt;0&gt;(Barycentric2D), beta = std::get&lt;1&gt;(Barycentric2D), gamma = std::get&lt;2&gt;(Barycentric2D);\n                float Z = 1.0 / (alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w());\n                float zp = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w();\n                zp *= Z; // zp\u5c31\u662f\u4e4b\u524d\u7684z_interpolated\n\n                if (zp &lt; depth_buf[get_index(x, y)]){\n                    depth_buf[get_index(x, y)] = zp;\n                    // \u6839\u636e\u63d0\u793a\u6ce8\u91ca\uff0c\u8c03\u7528\u63d2\u503c\u51fd\u6570\n                    auto interpolated_color = interpolate(alpha, beta, gamma, t.color[0], t.color[1], t.color[2], 1);\n                    auto interpolated_normal = interpolate(alpha, beta, gamma, t.normal[0], t.normal[1], t.normal[2], 1);\n                    auto interpolated_texcoords = interpolate(alpha, beta, gamma, t.tex_coords[0], t.tex_coords[1], t.tex_coords[2], 1);\n                    auto interpolated_shadingcoords = interpolate(alpha, beta, gamma, view_pos[0], view_pos[1], view_pos[2], 1);\n                    // \u5c06\u4e0a\u8ff0\u7684\u4fe1\u606f\u90fd\u6ce8\u5165pixel_color\uff0c\u540c\u6837\u501f\u52a9\u6ce8\u91ca\n                    fragment_shader_payload payload(interpolated_color, interpolated_normal.normalized(), interpolated_texcoords, texture ? &amp;*texture : nullptr);\n                    payload.view_pos = interpolated_shadingcoords;\n                    auto pixel_color = fragment_shader(payload);\n                   // \u548c\u4e0a\u4e00\u6b21\u4e00\u6837\uff0c\u8be5\u50cf\u7d20\u70b9\u7ec8\u4e8e\u8d4b\u4e88\u4e86\u4e00\u4e2a\u989c\u8272\u503c\n                    Vector2i point;\n                    point &lt;&lt; x, y;\n                    set_pixel(point, pixel_color);\n                }\n            }\n        }\n    } \n}\n</code></pre> <p>\u5c06<code>get_projection_matrix()</code>\u51fd\u6570\u4ece\u4e0a\u4e00\u6b21\u4f5c\u4e1a\u590d\u5236\u8fc7\u6765\uff0c\u53ef\u4ee5<code>./Rasterizer output.png normal</code>\u6765\u67e5\u770b\u4ec5\u4ec5\u989d\u5916\u8865\u5145\u6cd5\u5411\u91cf\u4fe1\u606f\u4e4b\u540e\u7684\u56fe\u7247\u3002</p> <p></p> <p>\u90a3\u4e48\u63a5\u4e0b\u6765\u5982\u4f55\u52a0\u5165\u5149\u7167\uff0c\u5b9e\u73b0<code>phong_fragment_shader()</code>\u51fd\u6570\u3002\u9996\u5148\u56de\u5f52\u4e00\u4e0bblinn-phong\u6a21\u578b: </p> <p></p> <p>\u56e0\u6b64\u5728\u51fd\u6570\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u53c2\u6570\uff0c\u6700\u540e\u5b9e\u73b0\u5149\u7167\u7684\u5f71\u54cd\uff1a</p> <pre><code>Eigen::Vector3f phong_fragment_shader(const fragment_shader_payload&amp; payload)\n{\n    Eigen::Vector3f ka = Eigen::Vector3f(0.005, 0.005, 0.005);\n    Eigen::Vector3f kd = payload.color;\n    Eigen::Vector3f ks = Eigen::Vector3f(0.7937, 0.7937, 0.7937);\n\n    auto l1 = light{{20, 20, 20}, {500, 500, 500}};\n    auto l2 = light{{-20, 20, 0}, {500, 500, 500}};\n\n    std::vector&lt;light&gt; lights = {l1, l2};\n    Eigen::Vector3f amb_light_intensity{10, 10, 10};\n    Eigen::Vector3f eye_pos{0, 0, 10};\n\n    float p = 150;\n\n    Eigen::Vector3f color = payload.color;\n    Eigen::Vector3f point = payload.view_pos;\n    Eigen::Vector3f normal = payload.normal;\n\n    Eigen::Vector3f result_color = {0, 0, 0};\n    // \u6ce8\u610f\u8fd9\u91cc\u662fRGB\u4e09\u4e2a\u901a\u9053\u90fd\u7ed3\u5408\u5728\u8fd9\u4e2a\u53c2\u6570\u91cc\u9762\uff0c\u56e0\u6b64\u56fe\u4e2d\u7684\u516c\u5f0f\u662felement-wise product\n    for (auto&amp; light : lights)\n    {\n        // \u5f00\u59cb\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684\u5411\u91cf\uff0c\u6ce8\u610f\u5f52\u4e00\u5316\n        Eigen::Vector3f l = (light.position - point).normalized();\n        Eigen::Vector3f v = (eye_pos - point).normalized();\n        Eigen::Vector3f h = (l + v).normalized();\n        Eigen::Vector3f n = normal.normalized();\n\n        //ambient \u73af\u5883\u5149\n        Eigen::Vector3f la = ka.cwiseProduct(amb_light_intensity);\n        //diffuse \u6f2b\u53cd\u5c04\n        Eigen::Vector3f ld = kd.cwiseProduct((light.intensity / (light.position - point).dot(light.position - point))) * std::max(0.0f, n.dot(l));\n        //specular \u955c\u9762\u53cd\u5c04 \u9ad8\u5149\n        Eigen::Vector3f ls = ks.cwiseProduct((light.intensity / (light.position - point).dot(light.position - point))) * std::pow(std::max(0.0f, n.dot(h)),p);\n        result_color += la + ld + ls;\n    }\n\n    return result_color * 255.f;\n}\n</code></pre> <p>\u6700\u540e<code>.\\Rasterizer.exe phong.png phong</code>\u7684\u7ed3\u679c\u662f\uff1a</p> <p></p> <p>\u6700\u540e\uff0c\u8d34\u4e0a\u7eb9\u7406\uff0c\u5b9e\u73b0<code>texture_fragment_shader()</code>\uff0c\u5c06\u7eb9\u7406\u989c\u8272\u89c6\u4e3a\u516c\u5f0f\u4e2d\u7684 kd\uff0c\u5b9e\u73b0 Texture Shading Fragment Shader\u3002</p> <pre><code>Eigen::Vector3f texture_fragment_shader(const fragment_shader_payload&amp; payload)\n{\n    Eigen::Vector3f return_color = {0, 0, 0};\n    if (payload.texture)\n    {\n        // TODO: Get the texture value at the texture coordinates of the current fragment\n        // getcolor\u8fd4\u56de\u7684\u662fcolor[0][1][2]\n        // fragment_shader_payload\u5728shader\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86tex\n        return_color = payload.texture-&gt;getColor(payload.tex_coords.x(), payload.tex_coords.y());\n    }\n    Eigen::Vector3f texture_color;\n    texture_color &lt;&lt; return_color.x(), return_color.y(), return_color.z();\n\n    Eigen::Vector3f ka = Eigen::Vector3f(0.005, 0.005, 0.005);\n    Eigen::Vector3f kd = texture_color / 255.f;\n    Eigen::Vector3f ks = Eigen::Vector3f(0.7937, 0.7937, 0.7937);\n\n    auto l1 = light{{20, 20, 20}, {500, 500, 500}};\n    auto l2 = light{{-20, 20, 0}, {500, 500, 500}};\n\n    std::vector&lt;light&gt; lights = {l1, l2};\n    Eigen::Vector3f amb_light_intensity{10, 10, 10};\n    Eigen::Vector3f eye_pos{0, 0, 10};\n\n    float p = 150;\n    // \u8fd9\u91cc\u989c\u8272\u6362\u6210\u4e86\u7eb9\u7406\u4e0a\u7684\u989c\u8272\n    Eigen::Vector3f color = texture_color;\n    Eigen::Vector3f point = payload.view_pos;\n    Eigen::Vector3f normal = payload.normal;\n\n    Eigen::Vector3f result_color = {0, 0, 0};\n\n    for (auto&amp; light : lights)\n    {\n        Eigen::Vector3f l = (light.position - point).normalized();\n        Eigen::Vector3f v = (eye_pos - point).normalized();\n        Eigen::Vector3f h = (l + v).normalized();\n        Eigen::Vector3f n = normal.normalized();\n\n        //ambient \u73af\u5883\u5149\n        Eigen::Vector3f la = ka.cwiseProduct(amb_light_intensity);\n        //diffuse \u6f2b\u53cd\u5c04\n        Eigen::Vector3f ld = kd.cwiseProduct((light.intensity / (light.position - point).dot(light.position - point))) * std::max(0.0f, n.dot(l));\n        //specular \u955c\u9762\u53cd\u5c04 \u9ad8\u5149\n        Eigen::Vector3f ls = ks.cwiseProduct((light.intensity / (light.position - point).dot(light.position - point))) * std::pow(std::max(0.0f, n.dot(h)),p);\n        result_color += la + ld + ls;   \n    }\n\n    return result_color * 255.f;\n}\n</code></pre> <p><code>.\\Rasterizer.exe texture.png texture</code>\u4e4b\u540e\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\u4e4b\u540e\u5173\u4e8ebump\u548cdisplacement\u7684\u5185\u5bb9\u7565\u8fc7\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html","title":"Deep Learning","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#what-we-are-going-to-learn","title":"What we are going to learn","text":"<p>Courses in this sequence:</p> <ol> <li>Neural Networks and Deep Learning :</li> </ol> <p>How to build a neural network including a deep neural network and How to train them on data</p> <p>Practice: Build a network to recognize cats</p> <ol> <li>Improvement: Hyperparameter tuning,Regularization and Optimization</li> <li>Structuring machine learning project</li> <li>Convolutional Neural Networks  (CNN)</li> <li>Sequence models: Natural Language Processing (RNN LSTM)</li> </ol>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_1","title":"\u524d\u7f6e\u5185\u5bb9","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_2","title":"\u4ec0\u4e48\u662f\u795e\u7ecf\u7f51\u7edc?","text":"<p>\u4ec0\u4e48\u662f\u795e\u7ecf\u7f51\u7edc\u5462? \u7528\u4e0b\u9762\u4e00\u4e2a\u4f8b\u5b50\u4e3e\u4f8b: \u5982\u679c\u8bf4\u77e5\u9053\u51e0\u4e2a(\u623f\u5b50\u9762\u79ef, \u623f\u5b50\u4ef7\u683c)\u7684\u70b9, \u5982\u56fe:</p> <p></p> <p>\u90a3\u4e48\u5982\u4f55\u5728\u4e00\u4e2a\u51fd\u6570\u53bb\u62df\u5408\u8fd9\u4e9b\u70b9? \u5373\u627e\u5230\u4e00\u4e2a\u51fd\u6570\u6765\u5c3d\u53ef\u80fd\u5bf9\u5e94\u8f93\u5165\u8f93\u51fa. \u7ebf\u6027\u56de\u5f52\u5f53\u7136\u53ef\u4ee5\u83b7\u5f97\u4e00\u6761\u76f4\u7ebf:</p> <p></p> <p>\u6ce8\u610f\u5230\u5982\u679c\u5b8c\u5168\u662f\u4e00\u6839\u76f4\u7ebf, \u90a3\u4e48\u4f1a\u6709\u4ef7\u683c\u8d1f\u6570\u7684\u90e8\u5206; \u56e0\u6b64\u6709\u4e00\u6bb5\u5e73\u7684\u7ebf, \u4ef7\u683c\u4e00\u76f4\u662f\u96f6</p> <p>\u8fd9\u4e2a\u62df\u5408\u51fd\u6570\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6700\u7b80\u5355\u7684\u795e\u7ecf\u7f51\u7edc, \u5b9e\u73b0\u4e86\u8f93\u5165\u9762\u79ef\u8f93\u51fa\u4ef7\u683c.</p> <p>\u8fd9\u79cd\u5148\u5e73\u7ebf(\u4e00\u76f4\u662f0)\u540e\u659c\u7ebf\u7684\u6a21\u578b\u5e76\u4e0d\u5c11\u89c1, \u8fd9\u79f0\u4e3aReLU\u6a21\u578b(Rectified Linear Unit, \u4fee\u6b63\u7ebf\u6027\u5355\u5143), \u5176\u4e2dRectified\u4ee3\u8868\u53d6\u7684y\u503c\u662f\u4e0d\u80fd\u5c0f\u4e8e0\u7684, \u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4fee\u6b63\u540e\u6709\u4e00\u6761\u5e73\u7ebf</p> <p>\u90a3\u4e48\u6ce8\u610f\u5230\u8fd9\u4e2a\u4e1c\u897f\u79f0\u4e4b\u4e3a\"\u5355\u5143\", \u90a3\u4e48\u547c\u4e4b\u6b32\u51fa: \u5927\u7684\u795e\u7ecf\u7f51\u7edc\u5c31\u662f\u8bb8\u591a\u4e2a\u8fd9\u79cdReLU\u5806\u53e0\u8d77\u6765\u7684\u6a21\u578b</p> <p></p> <p>\u6b63\u5982\u4e0a\u9762\u8fd9\u4e2a\u56fe\u6240\u5c55\u793a\u7684, \u73b0\u5b9e\u751f\u6d3b\u4e2d\u5f71\u54cd\u4ef7\u683c\u7684\u5f88\u591a: \u9762\u79ef\u548c\u623f\u95f4\u6570\u91cf\u5f71\u54cd\u5bb9\u7eb3\u5bb6\u5ead\u6210\u5458\u6570\u91cf, \u90ae\u653f\u7f16\u7801\u65e2\u80fd\u53cd\u5e94walkability\u548c\u9644\u8fd1\u5b66\u6821\u7684\u8d28\u91cf, \u800c\u623f\u5b50\u9644\u8fd1\u7684\u5bb6\u5ead\u8d22\u5bcc\u60c5\u51b5\u4e5f\u80fd\u53cd\u5e94\u5b66\u6821\u8d28\u91cf; \u800cfamily size, workability, school quality\u6700\u7ec8\u90fd\u4e0e\u4ef7\u683c\u6302\u94a9. \u800c\u6bcf\u4e00\u4e2a\"\u5f71\u54cd\"\"\u53cd\u5e94\"\u5176\u5b9e\u90fd\u662fReLU, \u6216\u8005\u4e0d\u90a3\u4e48\u7ebf\u6027\u7684\u6a21\u578b. \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b, x\u8f93\u5165\u7684\u6709\u56db\u4e2a\u73a9\u610f\u513f, \u800c\u6700\u7ec8\u8f93\u51fa\u7684\u8fd8\u662fy\u8fd9\u4e2a\u4ef7\u683c.</p> <p></p> <p>\u4e0a\u9762\u5c31\u662f\u4e00\u4e2a\u7cbe\u7b80\u7684\u6a21\u578b. \u5728\u771f\u5b9e\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d, \u4e0d\u662f\u6211\u4eec\u6307\u5b9ax1 x2\u548cfamily size\u6709\u5173, \u800c\u662f\u5b9e\u9645\u4e0a\u4e2d\u95f4\u4e00\u5c42\u7684\u6bcf\u4e00\u4e2a\u5706\u5708\u90fd\u662f\u63a5\u53d7\u4e86\u56db\u4e2a\u53c2\u6570\u7684, \u7136\u540e\u8ba9\u8ba1\u7b97\u673a\u81ea\u5df1\u7b97\u53bb, \u5582\u4e86\u8db3\u591f\u591a\u7684\u6570\u636e\u4e4b\u540e\u8ba1\u7b97\u673a\u5c31\u5f88\u64c5\u957f\u53bb\u62df\u5408\u51fd\u6570\u4e86</p> <p>\u4e2d\u95f4\u4e00\u5c42\u79f0\u4e3a\u9690\u85cf\u5355\u5143(hidden unit), \u6bcf\u4e00\u4e2a\u8282\u70b9(node)\u90fd\u548c\u8f93\u5165\u5c42(input layer)\u7684\u6240\u6709\u7279\u5f81\u76f8\u8fde</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_3","title":"\u7528\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u76d1\u7763\u5b66\u4e60","text":"<p>\u4ee5\u4e0a\u5217\u51fa\u4e86\u8bb8\u591a\u6df1\u5ea6\u5b66\u4e60\u7684\u5e94\u7528:</p> <p>\u524d\u4e24\u4e2a\u662f\u6807\u51c6\u7684\u795e\u7ecf\u7f51\u7edc(standard neural network), \u7b2c\u4e09\u4e2a\u662f\u5377\u79ef\u795e\u7ecf\u7f51\u7edcCNN(convolutional)(cv\u4e2d\u7ecf\u5e38\u4f7f\u7528\u8fd9\u4e2a), \u7b2c\u56db\u548c\u7b2c\u4e94\u4e2a\u4f7f\u7528\u7684\u662fRNN(recurrent)(\u8bed\u8a00\u662f\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u5165\u7684, \u97f3\u9891\u662f\u6709\u65f6\u95f4\u7684, \u56e0\u6b64\u662fsequential), \u7b2c\u516d\u4e2a\u66f4\u590d\u6742\u6240\u4ee5\u662f\u6df7\u5408\u6a21\u578b</p> <p></p> <p>\u4ee5\u4e0a\u662f\u5e38\u89c1\u7684\u6a21\u578b\u6f14\u793a\u56fe</p> <p></p> <p>\u90a3\u4e48\u8fd8\u8981\u63d0\u53ca\u7ed3\u6784\u5316\u6570\u636e\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e. \u7ed3\u6784\u5316\u6570\u636e\u5f88\u597d\u7528database\u53bb\u5bb9\u7eb3, \u4f46\u662f\u4e00\u77ed\u97f3\u9891, \u4e00\u5f20\u56fe\u7247\u53ef\u80fd\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u975e\u5e38\u96be\u4ee5\u5904\u7406. \u4f46\u662f\u6df1\u5ea6\u5b66\u4e60\u8ba9\u8ba1\u7b97\u673a\u5f00\u59cb\u7406\u89e3\u975e\u7ed3\u6784\u5316\u6570\u636e\u4e86</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_4","title":"\u4e3a\u4ec0\u4e48\u6700\u8fd1\u673a\u5668\u5b66\u4e60\u706b\u8d77\u6765\u4e86?","text":"<p>\"\u89c4\u6a21\"\u4fc3\u8fdb\u4e86\u6df1\u5ea6\u5b66\u4e60, \u8fd9\u91cc\u7684\u89c4\u6a21\u4e0d\u4ec5\u4ec5\u662f\u6a21\u578b\u7684\u590d\u6742\u7a0b\u5ea6(\u66f4\u591a\u9690\u85cf\u5355\u5143), \u4e5f\u6307\u6570\u636e\u7684\u89c4\u6a21</p> <p>\u4f20\u7edf\u7684\u5b66\u4e60\u7b97\u6cd5, \u5728\u5582\u4e86\u4e00\u5b9a\u6570\u636e\u4e4b\u540e\u8868\u73b0\u4fbf\u4e0d\u518d\u4e0a\u5347; \u800cnn\u7684\u51fa\u73b0\u4f7f\u5f97\u8868\u73b0\u53ef\u4ee5\u968f\u7740\u6570\u636e\u7684\u8bad\u7ec3\u589e\u591a\u800c\u4e0a\u5347</p> <p>\u5f53\u7136\u8fd9\u4e2a\u6570\u636e\u4e0d\u662f\u4ec0\u4e48\u6570\u636e\u90fd\u80fd\u7b97\u6570, \u5fc5\u987b\u662f\u5e26\u6807\u7b7e(labeled)\u6570\u636e, \u6211\u4eec\u7ecf\u5e38\u7528<code>(m)</code>\u6765\u4ee3\u8868\u6570\u636e\u7684\u89c4\u6a21</p> <p>\u5728\u6570\u636e\u91cf\u4e0d\u5927\u7684regime(\u9886\u57df)\u4e2d, \u5176\u5b9e\u5404\u4e2a\u7b97\u6cd5\u4e4b\u95f4\u6ca1\u6709\u660e\u786e\u8bf4\u8c01\u66f4\u597d, \u4f46\u662f\u5f53\u5230\u4e86\u5927\u6570\u636eregime\u4e4b\u540e, nn\u7684\u8868\u73b0\u5c31\u7a33\u5b9a\u9886\u5148\u4e86</p> <p>\u800calgorithm\u7b97\u6cd5\u7684\u6539\u8fdb\u662f\u4e3a\u4e86computation\u8ba1\u7b97\u8ddf\u5feb\u800c\u670d\u52a1\u7684, \u4f8b\u5982sigmoid\u51fd\u6570\u8f6c\u5316\u4e3aReLU\u4f7f\u5f97\"\u68af\u5ea6\u4e0b\u964d\u6cd5\"\u5b66\u4e60\u66f4\u5feb</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_5","title":"\u6559\u5b66\u5b89\u6392","text":"<p>\u7b2c\u4e00\u90e8\u5206\u7684\u5b89\u6392</p> <p></p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_6","title":"\u795e\u7ecf\u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#binary-classification","title":"\u4e8c\u5206\u5206\u7c7b(Binary Classification)","text":"<p>\u5047\u8bbe\u7ed9\u4e86\u4e00\u5f20\u56fe\u7247, \u8ba9\u6211\u4eec\u5224\u65ad\u6709\u6ca1\u6709\u732b, \u5982\u679c\u6709\u5c31\u8f93\u51fa1, \u5982\u679c\u6ca1\u6709\u5c31\u8f93\u51fa0; \u8fd9\u4e2a\u8f93\u51fa\u503c\u6211\u4eec\u8bbe\u4e3ay</p> <p>\u90a3\u4e48\u4e00\u5f20\u56fe\u7247\u662f\u5982\u4f55\u8bfb\u53d6\u7684\u5462? \u4e00\u5f20\u7167\u7247\u662f\u901a\u8fc7\u4e09\u4e2a\u72ec\u7acb\u77e9\u9635\u6240\u6784\u6210\u7684(\u4e09\u539f\u8272), \u5982\u679c\u7167\u7247\u662f64*64, \u90a3\u4e48\u56fe\u7247\u7684\u4fe1\u606f\u7531\u4e09\u4e2a64\u00d764\u7684\u77e9\u9635\u6784\u6210, \u5206\u522b\u662f\u7ea2\u7eff\u84dd, \u7136\u540e\u6bcf\u4e00\u4e2a\u77e9\u9635\u7684\u503c\u4ee3\u8868\u5f53\u524d\u50cf\u7d20\u70b9\u8be5\u539f\u8272\u7684\u4eae\u5ea6\u503c</p> <p>\u90a3\u4e48\u5982\u4f55\u7528\u8fd9\u4e9b\u4fe1\u606f\u6784\u6210\u8f93\u5165\u7684x\u5462? \u6211\u4eec\u4e00\u6b21\u628a\u6bcf\u4e2a\u77e9\u9635\u7684\u6bcf\u4e2a\u5143\u7d20\u63d0\u53d6\u51fa\u6765, \u7136\u540e\u7ec4\u6210\u4e00\u4e2a\u7279\u5f81\u5411\u91cfx, \u5982\u56fe:</p> <p></p> <p>\u4e0d\u96be\u53d1\u73b0, \u8fd9\u4e2a\u77e9\u9635\u662f12288*1, \u6211\u4eec\u7528n\u6765\u4ee3\u8868\u8fd9\u4e2a\u5411\u91cf\u7684\u7ef4\u5ea6, \u8fd9\u4e2a\u60c5\u51b5\u4e0b, n\u662f12288</p> <p>\u5728\u4e8c\u5206\u5206\u7c7b\u95ee\u9898\u4e2d, \u76ee\u6807\u662f\u8bad\u7ec3\u4e00\u4e2a\u5206\u7c7b\u5668, \u4ee5\u7279\u5f81\u5411\u91cfx\u4e3a\u8f93\u5165, \u9884\u6d4b\u8f93\u51fa\u662f1\u8fd8\u662f0</p> <p>\u8bb0\u53f7: (x,y)\u662f\u4e00\u4e2a\u6837\u672c, x\u662fn\u7ef4\u5411\u91cf, y\u662f1/0; m\u4ee3\u8868\u6837\u672c\u4e2a\u6570; train\u548ctest\u7684m; X\u4ee3\u8868\u6574\u4e2a\u8f93\u5165\u77e9\u9635, \u901a\u5e38\u6765\u8bf4\u662f\u5de6\u8fb9\u5f62\u5f0f; \u5982\u56fe:</p> <p></p> <p>\u90a3\u4e48Y\u4e5f\u8981\u6709\u5bf9\u5e94\u7684\u6574\u4e2a\u7684\u8f93\u51fa\u77e9\u9635, \u6211\u4eec\u6a2a\u8fc7\u6765\u6392\u653e: </p> <p></p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#logistics-regression","title":"Logistics Regression(\u56de\u5f52)","text":"<p>\u5982\u679c\u6709\u4e00\u4e2a\u56fe\u7247x\u77e9\u9635\u8f93\u5165, \u6211\u4eec\u60f3\u8981\u62df\u5408\u8f93\u51fay, \u90a3\u4e48\u56de\u5f52\u662f\u81ea\u7136\u800c\u7136\u60f3\u5230\u7684: \u4f46\u662f\u5982\u679c\u662f\u5355\u7eaf\u7ebf\u6027, \u90a3\u4e48y\u7684\u503c\u53ef\u80fd\u4f1a\u53d8\u5316\u83ab\u6d4b</p> <p>\u4e8e\u662f\u4f7f\u7528sigmoid\u51fd\u6570, \u6211\u4eec\u60f3\u8981\u4e00\u4e2aw(nx*1)\u548cb, \u5f97\u5230z\u540e\u5e26\u5165sigmoid\u51fd\u6570(w\u8f6c\u5de6\u4e58x\u76f8\u5f53\u4e8e\u6c42\u5185\u79ef)</p> <p></p> <p>\u5176\u4e2dsigmoid\u51fd\u6570\u957f\u4e0a\u9762\u8fd9\u4e2a\u6837\u5b50:  z\u5f88\u5927, \u90a3\u4e48\u8f93\u51fa\u503c\u5f88\u63a5\u8fd11; z\u5f88\u5c0f, \u90a3\u4e48\u5c31\u63a5\u8fd10</p> <p>\u6ce8\u610f: \u5f88\u5bb9\u6613\u60f3\u5230\u8981\u4e0d\u8981\u5347\u7ef4\u7136\u540e\u628ab\u548cw\u5408\u5e76, \u4f46\u662f\u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a, w\u548cb\u8fd8\u662f\u5206\u5f00\u6765\u6bd4\u8f83\u597d</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#logistic-regression-cost-function","title":"Logistic regression cost function(\u56de\u5f52\u635f\u5931\u51fd\u6570)","text":"<p>\u603b\u800c\u8a00\u4e4b: \u4e3a\u4e86\u8bad\u7ec3\u51faw\u548cb\u7684\u53d6\u503c, \u6211\u4eec\u8981\u8bbe\u8ba1\u4e00\u4e2a\u6210\u672c\u51fd\u6570</p> <p>\u56de\u987e\u4ee5\u4e0b; \u987a\u4fbf\u63d0\u4e00\u4e0bnotational convention: \u4e0a\u6807\u4ee3\u8868\u7b2ci\u4e2a\u6837\u672c</p> <p></p> <p>\u90a3\u4e48\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d, \u6211\u4eec\u5e0c\u671b\u77e5\u9053\u8bad\u7ec3\u540e\u6a21\u62df\u51fa\u6765\u7684\u7ed3\u679c\u548c\u771f\u6b63\u7684\u7ed3\u679c\u76f8\u5dee\u6709\u591a\u5927, \u90a3\u4e48\u76f4\u89c9\u4e0a\u6211\u4eec\u60f3\u5230\u65b9\u5dee</p> <p>\u4f46\u662f\u4e8b\u5b9e\u4e0a, \u65b9\u5dee\u5e76\u4e0d\u597d, \u5728\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e2d, \u76f4\u63a5\u7528\u5dee\u7684\u5e73\u65b9\u4e4b\u7c7b\u7684Loss Function\u4f1a\u9762\u4e34\u51f8\u4f18\u5316\u95ee\u9898, \u8fd9\u4e2a\u4e4b\u540e\u4f1a\u63d0\u5230</p> <p>\u56e0\u6b64, \u6211\u4eec\u8bbe\u8ba1\u8fd9\u6837\u7684Loss Function:</p> <p></p> <p></p> <p>\u4e0a\u9762\u7eff\u8272\u63a8\u5bfc\u53ef\u4ee5\u770b\u51fa\u6765: \u8fd9\u4e2a\u51fd\u6570\u5f88\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f! \u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u597d? \u8fd9\u4e2a\u6211\u4eec\u4e4b\u540e\u4f1a\u8bb2</p> <p>Finally, \u635f\u5931\u51fd\u6570\u53cd\u6620\u4e86\u5728\u5355\u4e2a\u8bad\u7ec3\u6837\u672c\u4e0a\u7684\u8868\u73b0; \u90a3\u4e48\u6211\u518d\u5b9a\u4e49\u4e00\u4e2a\u6210\u672c\u51fd\u6570, \u7528\u6765\u8861\u91cf\u5728\u5168\u4f53\u8bad\u7ec3\u6837\u672c\u4e0a\u7684\u8868\u73b0</p> <p></p> <p>\u5728\u8fd9\u4e2a\u5f0f\u5b50\u4e2d, w\u548cb\u662f\u81ea\u53d8\u91cf, yhat(i)\u4e0ew, b, x(i)\u76f8\u5173,\u7136\u540e\u6700\u540e\u9664\u4ee5\u6837\u672c\u603b\u6570\u91cf\u4ee5\u6c42\u5e73\u5747\u503c</p> <p>\u5f88\u660e\u663e, \u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u51fd\u6570\u6700\u540e\u7684\u503c\u8d8a\u5c0f\u8d8a\u597d</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#gradient-descent","title":"\u68af\u5ea6\u4e0b\u964d\u6cd5(Gradient Descent)","text":"<p>\u6211\u4eec\u77e5\u9053\u4e86Logistics Regression, \u4e5f\u77e5\u9053\u4e86\u635f\u5931\u51fd\u6570\u548c\u6210\u672c\u51fd\u6570</p> <p></p> <p>\u4e0d\u96be\u770b\u51fa, J\u5c06\u4f1a\u662f\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570, \u90a3\u4e48\u5728\u4e09\u7ef4\u5750\u6807\u7cfb\u4e2d\u662f\u4e00\u4e2a\u66f2\u9762:</p> <p></p> <p>\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\u5f88\u597d\u7684\u505a\u5230\u4e86\u51f8\u51fd\u6570\u8fd9\u4e00\u70b9, \u907f\u514d\u4e86\u591a\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u95ee\u9898(\u9009\u62e9\u4e86\u90a3\u4e2aLoss Function\u5b9a\u4e49\u7684\u539f\u56e0\u6b63\u662f\u8fd9\u4e2a)</p> <p>\u90a3\u4e48\u6211\u4eec\u968f\u4fbf\u521d\u59cb\u5316\u4e00\u4e2a\u70b9, \u7136\u540e\u8bd5\u56fe\u5728\u4e0d\u65ad\u8fed\u4ee3\u4e2d\u5f80\u4e0b\u9762\u8d70, \u76f4\u5230\u8d70\u5230\u6700\u4f4e\u70b9, \u90a3\u4e48\u6700\u7ec8\u8d70\u5230\u7684\u96c6\u4e2d\u7684\u70b9\u5c31\u662f\u6700\u4f18\u89e3\u4e86</p> <p></p> <p>\u6211\u4eec\u5148\u53ea\u770bw\u8f74, \u6211\u4eec\u91cd\u590d\u64cd\u4f5c, \u64cd\u4f5c\u5982\u4e0a\u56fe: \u6ce8\u610f\u5230alpha\u5c31\u662f\u5b66\u4e60\u7387, \u7136\u540e\u8fd9\u4e2a\u5b66\u4e60\u7387\u4e58\u4ee5\u7684\u662f\u5f53\u524d\u70b9\u7684\u5bfc\u6570</p> <p>\u81ea\u5df1\u60f3\u60f3\u4e0b, \u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u662f\u5408\u7406\u7684; \u5f53\u7136, \u5728\u7f16\u7a0b\u7684\u65f6\u5019, notational convention\u662f\u7528\"dw\"\u6765\u4ee3\u8868\u5f53\u524d\u70b9\u7684\u5bfc\u6570(\u84dd\u5b57)</p> <p></p> <p>\u5728\u7a0b\u5e8f\u4e2d, w\u548cb\u901a\u8fc7\u8fd9\u6837\u7684\u5f62\u5f0f\u4e0d\u65ad\u8fdb\u884c\u66f4\u8fed; \u5728\u5fae\u79ef\u5206\u4e2d, \u6211\u4eec\u66f4\u559c\u6b22\u7528\u504f\u5bfc\u7b26\u53f7; \u5728\u7f16\u7a0b\u4e2d, \u5c31\u662fdb  dw</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_7","title":"\u8ba1\u7b97","text":"<p>\u4e0a\u9762\u7684\u8ba1\u7b97\u53cd\u5e94\u4e86\u4e00\u4e2a\u70b9(\u5047\u8bbe\u7279\u5f81nx=2)\u6240\u5bf9\u5e94\u7684\u66f4\u8fed. \u8fd9\u4e2a\u8ba1\u7b97\u6211\u662f\u80fd\u63a8\u7684, \u5c31\u662f\u6d41\u7a0b\u56fe\u4e0e\u504f\u5bfc\u8ba1\u7b97; \u4f46\u662f\u73b0\u5b9e\u662f\u6709m\u4e2a\u8bad\u7ec3\u6837\u672c:</p> <p></p> <p>xk(i)\u4ee3\u8868\u7b2ci\u4e2a\u6837\u672c\u7684\u7b2ck\u884c\u7684\u503c(\u7279\u5f81); w1, w2,....wn\u90fd\u8fd9\u6837\u7d2f\u52a0\u7b97\u5b8c\u4e4b\u540e, \u628a\u5b83\u4eec\u7ad6\u7740\u653e\u5c31\u5f97\u5230\u4e86w\u77e9\u9635</p> <p>\u4e0a\u9762\u4ec5\u4ec5\u662f\u4e00\u4e2a\u68af\u5ea6\u4e0b\u964d, \u800c\u6ce8\u610f\u5230\u4e00\u6b21\u6211\u4eec\u5c31\u7528\u4e86\u4e24\u6b21\u5faa\u73af(\u4e00\u6b21\u6837\u672c, \u4e00\u6b21\u6bcf\u4e00\u4e2ax\u7684\u5404\u4e2a\u7279\u5f81), \u8fd9\u5728python\u91cc\u9762\u662f\u5341\u5206\u81f4\u547d\u7684</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u4f4e\u6548\u7684\u95ee\u9898, \u6211\u4eec\u4f7f\u7528\u5411\u91cf\u5316vectorization</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#vectorization","title":"Vectorization \u5411\u91cf\u5316","text":"<p>\u5411\u91cf\u5316\u662f\u4e00\u79cd\u89e3\u51b3for\u5faa\u73af\u7684\u827a\u672f:  </p> <p>\u5b9e\u8d28: \u5145\u5206\u5229\u7528GPU\u7684\u5e76\u884c\u547d\u4ee4\u8ba1\u7b97\u529f\u80fd(for\u662f\u4e00\u4e2a\u4e2a\u4e00\u6b21\u884c\u52a8, \u5411\u91cf\u5316\u662f\u76f4\u63a5\u5168\u4f53\u884c\u52a8)</p> <p><code>np.dot(w,x)</code>\u53ef\u4ee5\u5feb\u901f\u5e2e\u5fd9\u7b97\u51fa\u5185\u79ef</p> <p></p> <p>\u6240\u4ee5\u5728logistic regression\u91cc\u9762, \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u827a\u672f:</p> <p></p> <p>\u6ce8\u610f\u5230<code>Z = np.dot(w.T, X) + b</code>\u8fd9\u884c\u4ee3\u7801: w.T\u4ee3\u8868\u662f\u8f6c\u7f6e, X\u4ee3\u8868\u662f\u603b\u8f93\u5165\u77e9\u9635, \u56e0\u6b64\u8fd4\u56de\u7684\u662f\u6bcf\u4e00\u5217\u548cw.T\u5185\u79ef\u7684\u5927\u77e9\u9635</p> <p>\u8fd9\u4e2a\u77e9\u9635+ b, python\u4f1a\u81ea\u52a8\u628ab\u8f6c\u5316\u4e3a1m\u7684\u77e9\u9635(\u8fd9\u662f\u4e00\u79cd\u5e7f\u64adbroadcasting*); \u8d81\u70ed\u6253\u94c1\u5b8c\u6210\u540e\u9762\u7684\u5411\u91cf\u5316</p> <p></p> <p>\u7b97\u51faZ\u7684\u5927\u77e9\u9635\u4e4b\u540e, \u6bcf\u4e00\u4e2a\u5206\u522b\u5e26\u5165sigmoid\u51fd\u6570, \u7136\u540e\u7ec4\u6210\u5927\u77e9\u9635A</p> <p>\u6839\u636e\u504f\u5bfc\u516c\u5f0f, \u628adw1  dw2....\u653e\u5728dw\u5927\u77e9\u9635\u91cc\u9762(1\u00d7m), \u90a3\u4e48\u6839\u636e\u5b9a\u4e49, Z\u8f6c\u7f6e\u5e76\u5de6\u4e58\u4e00\u4e2aX, \u4e58\u4ee51/m</p> <p>\u6700\u540ew\u662f[w1, w2, ...], \u5e76\u76f8\u5bf9\u5e94\u7684\u505a\u51fa\u6539\u53d8; \u5f53\u7136, b\u4f5c\u4e3a\u4e00\u4e2a\u5b9e\u6570\u5f88\u597d\u64cd\u4f5c</p> <p>\u5f53\u7136, \u5047\u5982\u8bf4\u5b9e\u73b01000\u6b21\u66f4\u8fed, \u4f9d\u7136, \u5fc5\u987b\u7528for, \u56e0\u4e3a\u66f4\u8fed\u6709\u65f6\u5e8f!</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_8","title":"\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e2a\u635f\u5931\u51fd\u6570?","text":"<p>\u6838\u5fc3\u8fd8\u662f\u7406\u89e3\u7b2c\u4e09\u884c\u8fd9\u4e2a\u51fd\u6570\u662f\u7b26\u5408\u8981\u6c42\u7684</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#neural-network","title":"Neural Network","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#overview","title":"Overview","text":"<p>\u9996\u5148\u662fnotational convention: \u4e0a\u6807\u65b9\u62ec\u53f7\u4ee3\u8868\u5c42\u6570</p> <p>\u7136\u540e, logistic regression\u8ba9\u6211\u4eec\u5f97\u4ee5\u66f4\u65b0w\u548cb, \u800c\u66f4\u65b0\u4e4b\u540e\u5462? \u6211\u4eec\u80fd\u518d\u8fed\u4ee3! \u6700\u540e\u8fed\u4ee3\u5230\u6ee1\u610f\u4e3a\u6b62, \u6211\u4eec\u76f4\u63a5\u7528sigmoid\u51fd\u6570\u548c\u6ee1\u610f\u7684w, b\u53bb\u5904\u7406\u4e0a\u4e00\u5c42\u7684a, \u5f97\u5230\u7684\u65b0a\u5c31\u662f\u6700\u7ec8\u7684\u8f93\u51fa\u503c</p> <p></p> <p>\u4e0a\u9762\u8fd9\u4e2a\u6a21\u578b\u4e2d, \u6709\u8f93\u5165\u5c42, \u9690\u85cf\u5c42\u548c\u8f93\u51fa\u5c42, \u4e2d\u95f4\u7684\u8282\u70b9\u7684\u503c\u6211\u4eec\u662f\u770b\u4e0d\u89c1\u7684</p> <p>\u8868\u793a\u8f93\u5165\u5c42\u8fd8\u53ef\u4ee5\u7528\u56fe\u4e2d\u7684a[0], \u4e0a\u6807, a\u4ee3\u8868activation</p> <p></p> <p>\u6ce8\u610fa[1]\u5728Python\u4e2d\u7684\u56db\u7ef4\u8868\u8fbe\u5f62\u5f0f, \u56db\u7ef4\u662f\u56e0\u4e3a\u8fd9\u91cc\u9762\u53ea\u6709\u56db\u4e2a\u8282\u70b9; \u6ce8\u610f, \u8f93\u5165\u5c42\u4e0d\u7b97\u5c42, \u7b2c\u4e00\u4e2a\u9690\u85cf\u5c42\u662f\u7b2c\u4e00\u5c42, \u8fd9\u4e2a\u56fe\u662f\u4e24\u5c42</p> <p></p> <p>\u8fd9\u4e2a\u56fe\u4e2d\u52a0\u4e0a\u4e86\u9690\u85cf\u5c42\u4e0ew, b\u7684\u5173\u7cfb, \u6ce8\u610f\u8fd9\u4e9b\u77e9\u9635\u7684\u7ef4\u6570, \u7406\u89e3\u662f\u4e3a\u4ec0\u4e48</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_9","title":"\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa","text":"<p>\u795e\u7ecf\u7f51\u7edc\u90fd\u5728\u5e72\u4e9b\u4ec0\u4e48\u5462? </p> <p></p> <p>\u6ce8\u610f\u5230\u7b2c\u4e00\u4e2a\u9690\u85cf\u5c42\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6d41\u7a0b\u90fd\u5728\u4e0a\u65b9\u6807\u51fa, \u90a3\u4e48\u56db\u4e2a\u8282\u70b9\u90fd\u80fd\u8868\u8fbe\u51fa\u6765: </p> <p></p> <p>\u770b\u5f97\u51fa\u6765, \u56db\u4e2a\u8282\u70b9\u7684\u8ba1\u7b97\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c, \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5411\u91cf\u5316\u4e86. \u5411\u91cf\u5316\u7684\u5f0f\u5b50\u63a8\u5bfc\u5982\u4e0a\u56fe</p> <p></p> <p>\u4e0a\u56fe\u518d\u6b21\u8fdb\u884c\u4e86\u603b\u7ed3, \u7136\u540e\u6ce8\u610f\u5230\u4e3a\u4e86\u65b9\u4fbf, x\u6362\u6210\u4e86a[0]\u76f8\u5173\u8868\u793a, \u800c\u4e2d\u95f4\u8282\u70b9\u7b97\u51fa\u6765\u7684a1,2,3,4[1]\u90fd\u7528\u4e8e\u4e86\u540e\u7eed\u7684\u8ba1\u7b97</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_10","title":"\u591a\u4e2a\u6837\u672c\u7684\u5411\u91cf\u5316","text":"<p>\u5f53\u7136, \u6211\u4eec\u5bf9\u4e00\u4efd\u6837\u672c\u8f93\u5165\u53ef\u4ee5\u8fdb\u884c\u5411\u91cf\u5316, \u5f53\u7136, \u6211\u4eec\u53ef\u4ee5\u5bf9\u6574\u4e2a\u8bad\u7ec3\u96c6\u7684\u8f93\u5165\u8fdb\u884c\u5411\u91cf\u5316, \u4ece\u800c\u5b9e\u73b0\u540c\u65f6\u8fdb\u884c\u6240\u6709\u6837\u672c\u70b9\u7684\u8fd0\u7b97</p> <p>\u4e0d\u8fdb\u884c\u5411\u91cf\u5316\u7684\u8bdd, \u6211\u4eec\u53ef\u80fd\u8981for\u5faa\u73af\u904d\u5386\u6240\u6709\u6837\u672c\u70b9:</p> <p></p> <p>\u6ce8\u610fnotational convention: a[] ()\u90fd\u4ee3\u8868\u4ec0\u4e48\u610f\u601d; \u90a3\u4e48\u5982\u4f55\u5411\u91cf\u5316\u5462</p> <p>\u4e4b\u524d\u8bf4\u8f93\u5165\u7684X\u662f\u4e00\u4e2anx*1\u7684\u5411\u91cf, \u90a3\u4e48\u4e00\u5217\u5217\u5806\u53e0\u8d77\u6765\u81ea\u7136\u800c\u7136\u662f\u5bb9\u6613\u60f3\u5230\u7684, \u90a3\u4e48Z\u548cA\u4e5f\u7531\u6b64\u542f\u53d1\u8bbe\u8ba1\u51fa\u6765, \u5982\u4e0a\u56fe:</p> <p>\u6ce8\u610f\u5230A[1]\u6a2a\u5411\u4ee3\u8868\u4e00\u4e2a\u4e2a\u6837\u672c, \u7eb5\u5411\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\u4e2d\u6bcf\u4e2a\u8282\u70b9</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_11","title":"\u6fc0\u6d3b\u51fd\u6570","text":"<p>\u4e4b\u524d\u7684\u6fc0\u6d3b\u51fd\u6570\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u7684\u662fsigmoid\u51fd\u6570, \u5f53\u7136\u6709\u4e9b\u51fd\u6570\u5176\u5b9e\u4f1a\u8868\u73b0\u7684\u66f4\u597d\u4e00\u70b9, \u4f8b\u5982tanh(z)\u51fd\u6570:</p> <p></p> <p>\u8fd9\u4e2a\u51fd\u6570\u7684\u5904\u7406\u540e\u7684\u6570\u636e\u5e73\u5747\u503c\u66f4\u504f\u54110, \u5e2e\u5fd9\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u4e2d\u5fc3\u5316, \u4e5f\u8ba9\u4e0b\u4e00\u5c42\u7684\u5b66\u4e60\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613</p> <p>\u4f46\u662f\u6ce8\u610f\u6709\u4f8b\u5916: \u8f93\u51fa\u5c42\u8fd8\u662f\u4e60\u60ef\u4f7f\u7528sigmoid\u51fd\u6570, \u56e0\u4e3a\u8f93\u51fa\u503c\u57280-1\u4e4b\u95f4\u662f\u66f4\u5bb9\u6613\u63a5\u53d7\u7684</p> <p>\u800c\u6df1\u5ea6\u5b66\u4e60\u4e2d\u8fd8\u559c\u6b22ReLU(\u4fee\u6b63\u7ebf\u6027\u5355\u5143):</p> <p></p> <p>\u8fd9\u4e2a\u51fd\u6570\u7684\u659c\u7387: \u5f53z\u662f\u6b63\u7684\u8bdd, \u659c\u7387\u5c31\u662f1; \u5982\u679c\u662f\u8d1f\u6570, \u5c31\u662f0; \u6ce8\u610f\u5230\u5982\u679cz\u662f0, \u8fd9\u4e2a\u5730\u65b9\u7684\u5012\u6570\u662f\u6ca1\u6709\u5b9a\u4e49\u7684</p> <p>\u4f46\u662f\u5728\u7f16\u7a0b\u4e2d, \u5176\u5b9ez\u503c\u5b8c\u5168\u662f0\u7684\u6982\u7387\u975e\u5e38\u975e\u5e38\u4f4e; \u6ce8\u610f\u5230\u5982\u679cz\u662f\u8d1f\u6570\u7684\u8bdd, \u659c\u7387\u5c31\u662f0, \u8fd9\u5728\u5b9e\u8df5\u4e2d\u6ca1\u6709\u610f\u4e49, \u6240\u4ee5\u6709\"\u6cc4\u9732ReLU\"</p> <p></p> <p>\u603b\u7ed3: \u5728\u4e8c\u5206\u5206\u7c7b\u4e2d, \u8f93\u51fa\u5c42\u4e00\u5b9a\u8981sigmoid\u51fd\u6570; \u800c\u5176\u5b83\u5c42, tanh\u51fd\u6570\u90fd\u66f4\u597d; \u800c\u5982\u679c\u4e2d\u95f4\u9690\u85cf\u5c42\u4e0d\u77e5\u9053\u9009\u4ec0\u4e48\u597d, \u9009ReLU\u66f4\u4fdd\u9669</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_12","title":"\u4e3a\u4ec0\u4e48\u6fc0\u6d3b\u51fd\u6570\u4e0d\u80fd\u662f\u7ebf\u6027\u7684?","text":"<p>\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5a = z = Wx+b? \u90a3\u4e48\u4e8b\u5b9e\u4e0a, \u6700\u7ec8\u8f93\u51fa\u7684yhat\u5176\u5b9e\u53ea\u662fx1, x2...\u7684\u7ebf\u6027\u7ec4\u5408</p> <p>\u90a3\u4e48\u4e8b\u5b9e\u4e0a\u90a3\u4e48\u591a\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u5b8c\u5168\u4e00\u70b9\u610f\u4e49\u4e5f\u6ca1\u6709, \u5176\u5b9e\u53ea\u6709\u4e00\u5c42, \u8fd9\u6837\u7684\u8bdd\u7eaf\u5c5e\u65e0\u7a3d\u4e4b\u8c08</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_13","title":"\u795e\u7ecf\u7f51\u7edc\u7684\u68af\u5ea6\u4e0b\u964d","text":"<p>\u68af\u5ea6\u4e0b\u964d\u8fc7\u7a0b: \u5148\u968f\u673a\u8bbe\u7f6ew[1] b[1] (\u6ce8\u610f, \u968f\u673a\u521d\u59cb\u5316\u662f\u5341\u5206\u91cd\u8981\u7684), \u7136\u540e\u7b97\u51fa\u6240\u6709\u7684\u9884\u6d4by\u503c, \u901a\u8fc7\u8fd9\u4e9b\u4e1c\u897f\u8ba1\u7b97dw db, \u7136\u540e\u66f4\u65b0w, b\u4f5c\u4e3a[2]\u7684\u6750\u6599</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_14","title":"\u53cd\u5411\u4f20\u64ad","text":"<p>\u6ce8\u610f\u661f\u53f7\u662f\u4e24\u4e2a\u77e9\u9635\u76f8\u5bf9\u5e94\u5143\u7d20\u9010\u4e2a\u76f8\u4e58</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_15","title":"\u968f\u673a\u521d\u59cb\u5316","text":"<p>\u6743\u91cd\u975e\u5e38\u91cd\u8981, \u5982\u679c\u4e00\u5f00\u59cb\u6240\u6709\u53c2\u6570\u90fd\u8bbe\u7f6e\u4e3a0, \u4e00\u70b9\u7528\u4e5f\u6ca1\u6709, \u6240\u6709\u9690\u85cf\u8282\u70b9\u90fd\u5728\u8ba1\u7b97\u76f8\u540c\u7684\u51fd\u6570</p> <p></p> <p>b\u4e00\u5f00\u59cb\u53ef\u4ee5\u8bbe\u7f6e\u4e3a0, \u56e0\u4e3aw\u4e0d\u540c, \u90a3\u4e48\u5bf9\u79f0\u6027\u95ee\u9898\u5c31\u4f1a\u6253\u7834</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48w\u4f1a\u4e58\u4ee5\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6570\u5b57? z= wx+b, \u90a3\u4e48\u8fd9\u4e2az\u5982\u679c\u5728w\u8fc7\u5927\u7684\u60c5\u51b5\u4e0b\u4f1a\u843d\u5728\u51fd\u6570\u6bd4\u8f83\u5e73\u7f13\u7684\u5730\u65b9</p> <p>(\u8fd9\u79cd\u95ee\u9898\u5c24\u5176\u5728tanh\u548csigmoid\u4e2d\u975e\u5e38\u7a81\u51fa)</p> <p>0.01\u5728\u5f88\u6d45\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\u5f88\u597d\u7528, \u4f46\u662f\u5982\u679c\u6df1\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u8bdd, \u8fd9\u4e2a\u5e38\u6570\u53ef\u80fd\u5c31\u8981\u7a0d\u5fae\u6539\u53d8\u4e86, \u8fd9\u4e2a\u4e4b\u540e\u4f1a\u8bb2</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_16","title":"\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_17","title":"\u4ec0\u4e48\u662f\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc?","text":"<p>\u9644: \u6709\u4e9b\u51fd\u6570\u53ea\u6709\u6df1\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u624d\u80fd\u5b66\u4e60, \u800c\u5bf9\u4e8e\u4e00\u5f00\u59cb\u6765\u8bf4, \u5c1d\u8bd5Logistics regression\u603b\u662f\u4e0d\u4f1a\u9519\u7684</p> <p>\u63a5\u4e0b\u6765\u5b8c\u5584\u4e00\u4e0bnotational convention</p> <p></p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#forward-and-backward-propagation","title":"Forward and Backward Propagation","text":"<p>\u524d\u5411\u4f20\u64ad\u5f88\u597d\u7406\u89e3, \u8f93\u5165\u4e86a[l-1], \u7136\u540e\u7528\u968f\u673a\u521d\u59cb\u5316\u7684W\u548cb\u53bb\u8ba1\u7b97l\u5c42\u7684z  a</p> <p></p> <p>\u53cd\u5411\u4f20\u64ad, \u5c31\u662f\u7528da[l]\u6765\u7b97\u51fada[l-1] (\u7528\u4e8e\u7ee7\u7eed\u53cd\u5411\u4f20\u64ad), dw, db(\u7528\u6765\u4fee\u6b63w\u548cb\u77e9\u9635)</p> <p>(\u6ce8\u610f\u4e0a\u56fe\u5de6\u8fb9\u7b2c\u4e8c\u884c\u7684a[l-1]\u8fd8\u5e94\u8be5\u8981\u8f6c\u7f6e)</p> <p></p> <p>\u6ce8\u610f, \u5934\u4e00\u4e2ada[l]\u5728logistic regression\u4e0b\u5c31\u662f\u635f\u5931\u71b5\u51fd\u6570\u7684\u5012\u6570</p> <p></p> <p></p> <p>\u4e0a\u56fe\u5e2e\u5fd9\u7b97\u51fa\u4e86w\u548cb\u77e9\u9635\u7684\u7ef4\u6570, \u8fd8\u6709dw  db\u7684\u7ef4\u6570, \u8fd8\u6709Z A dZ  dA \u7684\u7ef4\u6570, \u8fd9\u5e2e\u52a9\u4e86\u6211\u4eecdebug</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_18","title":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u5757","text":"<p>\u6ce8\u610f\u6bcf\u4e00\u6b21c\u9700\u8981cache\u4ec0\u4e48! \u5185\u5b58\u5f88\u73cd\u8d35, \u6bcf\u4e00\u6b21\u7684\u8bad\u7ec3\u5176\u5b9e\u90fd\u662f\u5728\u8c03\u6574w b\u4e24\u4e2a\u53c2\u6570\u7684, \u56e0\u6b64\u6211\u4eec\u53ea\u60f3\u8981\u4fdd\u5b58\u5173\u952e</p> <p>\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d, z[l]\u8d77\u5230\u4e86\u5341\u5206\u5173\u952e\u7684\u4f5c\u7528, \u751a\u81f3a[l]\u5728\u4e0b\u4e00\u5c42\u4f7f\u7528\u5b8c\u4e4b\u540e\u5176\u5b9e\u90fd\u6ca1\u6709\u5fc5\u8981\u53bb\u4fdd\u7559\u4e86</p> <p>\u56e0\u6b64cache(\u7f13\u5b58)z[l]\u662f\u5341\u5206\u5173\u952e\u7684; \u6574\u4e2a\u6d41\u7a0b\u4e5f\u5728\u7b2c\u4e8c\u5f20\u56fe\u7247\u91cc\u9762\u5b8c\u6574\u5c55\u793a\u51fa\u6765\u4e86</p> <p></p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#hyperparameter","title":"\u53c2\u6570&amp;\u8d85\u53c2\u6570(Hyperparameter)","text":"<p>\u6b63\u5e38\u7684\u53c2\u6570, \u4f8b\u5982w  b, \u8fd9\u4e9b\u90fd\u662f\u6700\u540e\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684, \u8fd9\u4e9b\u5e2e\u52a9\u4e86\u6a21\u578b\u533a\u8fdb\u884c\u62df\u5408</p> <p>\u4f46\u662f\u8fd9\u4e9b\u53c2\u6570\u503c\u4e0a, \u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u53c2\u6570\u662f\u53ef\u4ee5\u638c\u63a7\u5b83\u4eec\u7684\u8d70\u5411\u7684, \u8fd9\u4e9b\u5c31\u79f0\u4e3a\u8d85\u53c2\u6570, hyperparameter</p> <p>\u6bd4\u5982\u8bf4learning rate \u03b1, iterations(\u6b63\u53cd\u8d70\u591a\u5c11\u8f6e), \u9690\u85cf\u5c42\u6570\u91cf, \u8282\u70b9\u6570\u91cf, \u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9</p> <p>\u751a\u81f3\u6709momentum, minibatch size, regularization\u7b49\u7b49\u8d85\u53c2\u6570\u53ef\u4ee5\u5f71\u54cd\u5230w \u548c b\u7684\u5f62\u6210 </p> <p>\u8bf4\u660e\u4e00\u4ef6\u4e8b\u60c5: \u8c03\u53c2\u5e08, \u70bc\u4e39\u4fa0</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#set-up-your-machine-learning-modeloptimizing","title":"Set Up Your Machine Learning Model\uff08Optimizing\uff09","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#train-dev-test-set","title":"Train-Dev-Test Set","text":"<p>\u5e94\u7528\u578b\u673a\u5668\u5b66\u4e60\u662f\u4e00\u4e2a\u9ad8\u5ea6\u8fed\u4ee3\u7684\u8fc7\u7a0b: hidden layers\u5c42\u6570, hidden units(\u8282\u70b9)\u6570\u91cf, \u5b66\u4e60\u7387, \u6fc0\u6d3b\u51fd\u6570...... \u4e00\u822c\u6765\u8bf4, \u8fd9\u4e9b\u8d85\u53c2\u6570\u5f88\u96be\u76f4\u63a5\u627e\u5230, \u90fd\u662f\u8981\u901a\u8fc7\u4e0d\u65ad\u5c1d\u8bd5\u5f97\u51fa\u6765\u7684; \u800c\u521b\u5efa\u597d\u7684\u8bad\u7ec3, \u5f00\u53d1\u548c\u6d4b\u8bd5\u8bad\u7ec3\u96c6\u53ef\u4ee5\u5e2e\u52a9\u63d0\u9ad8\u8bd5\u9519\u5faa\u73af\u6548\u7387</p> <p>\u4e00\u822c\u6765\u8bf4, \u4e00\u5206\u6570\u636e\u96c6\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206: train set; hold-out cross validation set/dev set; test set </p> <p>\u7528\u8bad\u7ec3\u6570\u636e\u6765\u8bad\u7ec3\u591a\u4e2a\u6a21\u578b, \u7136\u540e\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6a21\u578b\u627e\u51fa\u6700\u5408\u9002\u7684\u6a21\u578b, \u7136\u540e\u6700\u7ec8\u6d4b\u8bd5\u6a21\u578b\u6765\u9a8c\u8bc1\u8fd9\u4e2a\u6a21\u578b\u7684\u51c6\u786e\u6027</p> <p>\u51e0\u5e74\u524d, \u4e00\u822c\u6765\u8bf4, \u6570\u636e\u6bd4\u4f8b\u5206\u914d\u662f60\u8bad\u7ec320\u4ea4\u53c9\u9a8c\u8bc120\u6d4b\u8bd5; \u4f46\u662f\u5728\u5927\u6570\u636e\u65f6\u4ee3, \u73b0\u5728\u6570\u636e\u91cf\u53ef\u80fd\u8fbe\u5230\u767e\u4e07\u7ea7\u522b</p> <p>\u90a3\u4e48\u8fd9\u79cd\u5927\u524d\u63d0\u4e0b, \u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u5360\u6570\u636e\u603b\u91cf\u7684\u6bd4\u4f8b\u4f1a\u533a\u57df\u53d8\u5c0f, \u56e0\u4e3a\u9a8c\u8bc1\u96c6\u7684\u76ee\u7684\u5c31\u662f\u627e\u54ea\u79cd\u7b97\u6cd5\u6700\u4f73, \u6211\u4eec\u4e0d\u9700\u898120%\u7684\u6570\u636e, \u5176\u5b9e\u6709\u7684\u65f6\u50191%\u5c31\u53ef\u4ee5\u4e86, \u5e2e\u52a9\u6211\u4eec\u627e\u51fa1-2\u4e2a\u975e\u5e38\u597d\u7684\u7b97\u6cd5; \u6d4b\u8bd5\u96c6\u4e5f\u53ef\u4ee5\u5dee\u4e0d\u591a1%, \u56e0\u4e3a\u603b\u91cf\u8fd8\u662f\u5f88\u5927, 1%\u8db3\u4ee5\u9a8c\u8bc1\u6a21\u578b\u6027\u80fd</p> <p>\u5f53\u7136, \u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u66f4\u5c0f, \u56e0\u4e3a\u73b0\u5728\u6570\u636e\u65f6\u4ee3\u6570\u636e\u91cf\u975e\u5e38\u5927, \u5c3d\u91cf\u628a\u6570\u636e\u82b1\u5728\u8bad\u7ec3\u4e0a</p> <p>\u6ce8\u610f: \u5c3d\u91cf\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u90fd\u6765\u81ea\u4e8e\u540c\u4e00\u4e2a\u5206\u5e03! \u5f53\u7136\u6709\u7684\u65f6\u5019\u8bad\u7ec3\u96c6\u548cdev test set\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e00\u4e2a\u5206\u5e03, \u4f46\u662f\u8fd9\u8fd8\u662f\u80fd\u63a5\u53d7\u7684, \u53ea\u8981\u4fdd\u8bc1dev\u548ctest set \u6765\u81ea\u4e8e\u540c\u4e00\u4e2a\u5206\u5e03</p> <p>\u6700\u540e: \u6709\u7684\u65f6\u5019, \u6ca1\u6709test set\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684!!  \u5728\u673a\u5668\u5b66\u4e60\u4e2d, \u5047\u5982\u8bf4\u771f\u7684\u6ca1\u6709test set, \u90a3\u4e48\u4e00\u822cdev set\u4e5f\u4f1a\u79f0\u4e3atest set</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#biasvariance","title":"\u504f\u5dee(bias)\u548c\u65b9\u5dee(variance)","text":"<p>\u8fd9\u4e24\u4e2a\u6982\u5ff5\u5f88\u96be\u5206\u6e05, \u800c\u8fd9\u4e24\u8005\u7684\u6743\u8861\u95ee\u9898\u4e5f\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u95ee\u9898! </p> <p></p> <p></p> <p>\u5047\u5982\u8bf4\u4eba\u773c\u8bc6\u522b\u7684\u9519\u8bef\u7387\u662f0, \u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u4e3aoptimal error(\u6700\u597d, \u6700\u7406\u60f3\u7684\u6a21\u578b, \u4f8b\u5982\u4eba, \u7684\u6700\u4f4e\u9519\u8bef\u7387); \u5e76\u4e14\u5047\u8bbe\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u6765\u81ea\u540c\u4e00\u5206\u5e03(\u5982\u679c\u4e0d\u662f\u8fd9\u6837, \u5206\u6790\u8fc7\u7a0b\u66f4\u52a0\u590d\u6742)</p> <p>\u90a3\u4e48\u4ece\u5de6\u5230\u53f3: \u7b2c\u4e00\u4e2a, \u8bad\u7ec3\u96c6\u4e0a\u8dd1\u7684\u5f88\u597d, \u4f46\u662f\u9a8c\u8bc1\u96c6\u5e76\u4e0d\u7406\u60f3, \u90a3\u4e48\u901a\u5e38\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\"\u8fc7\u62df\u5408\"(over-fitting), \u8fd9\u79cd\u60c5\u51b5\u65b9\u5deevariance\u5f88\u5927; \u7b2c\u4e8c\u4e2a, \u867d\u7136\u8bf4\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u8868\u73b0\u5f88\u63a5\u8fd1, \u8bf4\u660e\u8fc7\u62df\u5408\u5e76\u6ca1\u6709\u4ea7\u751f, \u4f46\u662f\u6574\u4f53\u7684\u9519\u8bef\u7387\u8fd8\u662f\u5f88\u9ad8, \u90a3\u4e48\u8ba4\u4e3a\u8fd9\u662f\u504f\u5deebias\u8f83\u9ad8; \u7b2c\u4e09\u4e2a, \u4e24\u8005\u90fd\u9ad8, \u6bcb\u5eb8\u7f6e\u7591; \u7b2c\u56db\u4e2a, \u4e24\u8005\u90fd\u5f88\u4f4e, \u6bcb\u5eb8\u7f6e\u7591</p> <p>\u90a3\u4e48\u5982\u679c\u5047\u5982\u8bf4, \u4eba\u773c\u8bc6\u522b\u5ba2\u89c2\u4e0a\u5c31\u662f\u670915%\u7684\u5931\u8bef\u7387\u5462? \u90a3\u4e48\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5c31\u5341\u5206\u7406\u60f3\u4e86, \u88ab\u8ba4\u4e3a\u662f\u65b9\u5dee\u548c\u504f\u5dee\u90fd\u975e\u5e38\u5c0f</p> <p>\u4e00\u822c\u6765\u8bf4: \u6a21\u578b\u8fc7\u4e8e\u7ebf\u6027, bias\u9ad8; \u6a21\u578b\u8fc7\u62df\u5408, variance\u9ad8</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_19","title":"\u673a\u5668\u5b66\u4e60\u57fa\u7840","text":"<p>Basic recipe for machine learning:</p> <p>First, we have to check whether there is a high bias problem. If so, we should deal with the network, for example finding a new network with more hidden layers and hidden units or something, or a brand new network based on a new architecture. Secondly, if the problem of high bias is resolved, we have to check if there is a high variance issue, insinuation an over-fitting issue. If so, the common solution is to find more data. If there are no more data available, we can use regularization which will be discussed later, or simply switch to a new architecture.</p> <p>\u5728\u65e9\u671f\u7684\u673a\u68b0\u5b66\u4e60\u9636\u6bb5, \"bias variance trade-off(\u6743\u8861)\"\u95ee\u9898\u975e\u5e38\u4eba\u4eec, \u4eba\u4eec\u5f88\u5c11\u7528\u5de5\u5177\u80fd\u5b9e\u73b0\u964d\u4f4e\u4e00\u8005\u800c\u4e0d\u5f71\u54cd\u53e6\u4e00\u8005. \u4f46\u662f\u5230\u4e86\u5927\u6570\u636e\u6df1\u5ea6\u5b66\u4e60, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u5316\u8fd9\u79cd\u624b\u6bb5, \u6765\u5b9e\u73b0\u5355\u65b9\u9762\u7684\u4e0b\u964d. \u6b63\u5219\u5316\u662f\u4e00\u79cd\u80fd\u6709\u6548\u4e0b\u964d\u65b9\u5dee\u7684\u5de5\u5177, \u4f1a\u5f71\u54cd\u504f\u5dee\u7565\u5fae\u4e0a\u5347, \u4f46\u662f\u5982\u679c\u7f51\u7edc\u5f88\u5927\u7684\u8bdd, \u90a3\u4e48\u8fd9\u79cd\u4e0a\u5347\u5c31\u662f\u975e\u5e38\u5c0f\u7684</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#regularization","title":"\u6b63\u5219\u5316(Regularization)","text":"<p>\u4e0a\u9762\u5c55\u793a\u4e86\u5728\u4e00\u4e2aLogistic\u56de\u5f52\u4e2d\u7684L2 Regularization\u7684\u8fc7\u7a0b, \u5728\u635f\u5931\u51fd\u6570\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a\u9879. W\u77e9\u9635\u7684L2\u8303\u6570\u5176\u5b9e\u5c31\u662fW\u81ea\u5df1\u5de6\u4e58\u4e00\u4e2aW\u7684\u8f6c\u7f6e</p> <p>\u800c\u4e0a\u9762\u7684\u03bb\u5c31\u662f\u4e00\u4e2ahyper-parameter, \u9700\u8981\u6211\u4eec\u4e0d\u65ad\u53bb\u627e\u6700\u5408\u9002\u7684; \u800c\u5728\u7f16\u7a0b\u4e2d, \u8fd9\u4e2a\u53c2\u6570\u4e00\u822c\u7528lambda\u540d\u5b57 \u56e0\u4e3a\u03bb\u5728python\u91cc\u9762\u53c8\u5176\u4ed6\u7684\u56fa\u5b9a\u7528\u9014(\u5173\u952e\u8bcd), \u8fd9\u4e48\u505a\u662f\u4e3a\u4e86\u9632\u6b62\u53c2\u6570\u540d\u5b57\u91cd\u590d\u800c\u4ea7\u751f\u51b2\u7a81</p> <p>L1\u8303\u6570\u4f1a\u4f7f\u5f97w\u53d8\u7684\u7a00\u758f, \u5373\u6709\u5f88\u591a\u96f6, \u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u662f\u5f88\u597d, \u867d\u7136\u8bf4\u53ef\u4ee5\u51cf\u5c11\u5185\u5b58\u50a8\u5b58, \u6216\u8005\u538b\u7f29\u6a21\u578b, \u4f46\u662f\u8fd9\u4e8b\u5b9e\u8bc1\u660e\u5e76\u4e0d\u662f\u5f88\u597d</p> <p>\u90a3\u4e48\u5728\u6574\u4e2aNeural network\u4e2d\u5462? </p> <p></p> <p>\u5728\u6574\u4e2a\u795e\u7ecf\u7f51\u7edc\u4e2d, \u635f\u5931\u51fd\u6570\u540e\u9762\u4ecd\u7136\u52a0\u4e0a\u7684\u662f\u6bcf\u4e00\u5c42\u7684w[l]\u77e9\u9635\u7684L2\u8303\u6570, \u90a3\u4e48\u8fd9\u91cc\u56e0\u4e3anotational convention, \u6211\u4eec\u79f0\u8fd9\u79cdL2\u8303\u6570\u4e3a\u5f17\u7f57\u8d1d\u5c3c\u4e4c\u65af\u8303\u6570(Frobenius norm), \u5373\u4e00\u4e2a\u77e9\u9635\u4e2d\u6240\u6709\u5143\u7d20\u7684\u5e73\u65b9\u7684\u548c</p> <p>\u90a3\u4e48\u73b0\u5728dJ/dw\u540e\u9762\u5c31\u52a0\u4e0a\u4e86lambda/mw[l]\u4e86(\u5355\u72ec\u7684\u5f17\u7f57\u8d1d\u5c3c\u4e4c\u65af\u90a3\u4e00\u9879\u6c42\u5bfc\u540e\u5c31\u662f\u6574\u4e2a\u73a9\u610f\u513f), \u4ee3\u5165\u516c\u5f0f, \u53d1\u73b0\u5b9e\u8d28\u4e0a\u662f:</p> <p>w[l]\u66f4\u65b0\u7684\u65f6\u5019, \u5148\u4e58\u4ee5\u4e86\u4e00\u4e2a(1-\u03b1\u03bb/m)\u7684\u53c2\u6570(\u8fd9\u4e2a\u53c2\u6570\u5c0f\u4e8e\u96f6), \u8bf4\u660e\u5176\u5b9e\u901a\u8fc7\u6b63\u5219\u5316\u6211\u4eec\u60f3\u8981\u6743\u91cd\u53d8\u5c0f</p> <p>\u56e0\u6b64, \u6211\u4eec\u4e5f\u79f0\u6b63\u5219\u5316\u4e3a\"\u6743\u91cd\u8870\u51cf\"(weight decay)</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_20","title":"\u4e3a\u4ec0\u4e48\u6b63\u5219\u5316\u53ef\u4ee5\u7f13\u89e3\u8fc7\u62df\u5408\uff1f","text":"<p>\u89c1\u4e0a\u56fe\uff0c \u6211\u4eec\u5728\u635f\u5931\u51fd\u6570\u540e\u9762\u52a0\u4e0a\u4e86Frobenius norm\uff0c\u4f7f\u5f97w\u4f1a\u8d8b\u5411\u4e8e\u96f6\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\uff0c\u8bb8\u591a\u8282\u70b9\u7684\u4f5c\u7528\u5c31\u51e0\u4e4e\u4e3a\u96f6\uff0c\u51e0\u4e4e\u53ef\u4ee5\u89c6\u800c\u4e0d\u89c1\uff0c\u4ece\u800c\u8fbe\u5230\u7b80\u5316\u6a21\u578b\u89c4\u6a21\u3001\u4f46\u662f\u6df1\u5ea6\u4f9d\u7136\u4fdd\u6301\u7684\u6548\u679c\u3002\u6211\u4eec\u76f4\u89c2\u53d6\u6781\u9650\uff0c\u5047\u5982\u8bf4\u60e9\u7f5a\u7cfb\u6570\u8fc7\u5927\uff0c\u90a3\u4e48\u51e0\u4e4e\u5168\u4e3a0\uff0c\u90a3\u4e48\u5176\u5b9e\u5c31\u662f\u7ebf\u6027\u56de\u5f52\u4e86\uff1b\u6211\u4eec\u5f88\u662f\u5e0c\u671b\u6709\u4e00\u4e2a\u4e2d\u95f4\u7684\u03bb\u503c\uff0c\u8fbe\u5230just right\u7684\u7a0b\u5ea6</p> <p></p> <p>\u6362\u4e2a\u89d2\u5ea6\u53bb\u7406\u89e3\uff1a\u5728\u6fc0\u6d3b\u51fd\u6570\u4e2d\uff0c\u5047\u5982\u8bf4z\u5f88\u9760\u8fd10\uff0c\u90a3\u4e48\u8fd9\u4e00\u6bb5\u5c31\u8d8a\u63a5\u8fd1\u7ebf\u6027\uff1b\u5982\u679c\u60e9\u7f5a\u4e86\uff0cz\u4e0b\u964d\u4e86\uff0c\u90a3\u4e48\u843d\u5728\u7684\u6fc0\u6d3b\u51fd\u6570\u7684\u533a\u95f4\u6bb5\u53ef\u80fd\u5176\u5f71\u54cd\u6548\u679c\u66f4\u504f\u5411\u4e8e\u7ebf\u6027\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6a21\u578b\u5c31\u4e0d\u4f1a\u8fc7\u5ea6\u590d\u6742</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#dropout","title":"Dropout\u6b63\u5219\u5316","text":"<p>\u6bcf\u4e00\u6b21\u7684\u8bad\u7ec3\uff0c\u968f\u673a\u4e22\u6389\u4e00\u5b9a\u7684\u8282\u70b9\uff0c\u5176\u8fde\u7ebf\u90fd\u5220\u9664\uff0c\u907f\u514d\u5355\u4e00\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u7279\u5f81\u7684\u60c5\u51b5\u51fa\u73b0</p> <p>\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0dropout\u5462</p> <p></p> <p>\u6ce8\u610f<code>d3 = np.random.rand(a3.shape[0], a3.shape[1])</code>\uff0c\u8fd9\u4e2a\u77e9\u9635\u7684\u89c4\u6a21\u662f\u6839\u636ea3\u6765\u7684</p> <p><code>a3 = np.multiply(a3, d3)</code>\u4ee3\u8868\u7684\u662f\u77e9\u9635\u76f8\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\u76f8\u4e58</p> <p>\u6ce8\u610f\u6700\u540e\u9664\u4ee5keep_prob, \u8fd9\u662f\u4e3a\u4e86a3\u548cz4\u4fdd\u6301\u9884\u671f\u503c\uff1b\u76f4\u89c2\u6765\u8bf4\uff0c\u4fdd\u8bc1\u6d88\u9664\u67d0\u4e9b\u8282\u70b9\u7684\u5f71\u54cd\u540c\u65f6\uff0c\u4fdd\u8bc1\u5176\u4ed6\u7684\u5f71\u54cd\u4e0d\u53d7\u5f71\u54cd</p> <p>\u4f46\u662f\u6ce8\u610f\uff1a \u5728test time\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e76\u4e0d\u7528dropout\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u6700\u540e\u6a21\u578b\u662f\u4e00\u4e2a\u8f93\u51fa\u7a33\u5b9a\u7684\u6a21\u578b\uff01\u4e3a\u4e86\u5b9e\u73b0\u6700\u7ec8\u9884\u671f\u8f93\u51fa\u4e0d\u53d7\u5f71\u54cd\uff0c\u56e0\u6b64\u524d\u9762\u624d\u4f1a/keep_prob\u4ee5\u7ef4\u6301\u9884\u671f\u503c</p> <p>\u90a3\u4e48\u4e3a\u4e3a\u4ec0\u4e48dropout\u53ef\u4ee5\u6709\u4f5c\u7528\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u76f4\u89c2\u611f\u53d7\uff1a\u4e00\u4e2a\u8282\u70b9\u63a5\u53d7\u4e00\u5b9a\u6570\u91cf\u7684\u8fde\u7ebf\uff0c\u56e0\u4e3a\u4f1a\u968f\u673a\u5931\u6d3b\uff0c\u6240\u4ee5\u6743\u503c\u4e0d\u80fd\u8fc7\u591a\u96c6\u4e2d\u5728\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8eL2 \u6b63\u5219\u5316\u7684\u201c\u6743\u503c\u8870\u51cf\u201d</p> <p>\u5f53\u7136\u5b9e\u6218\u4e2d\uff0c\u6bcf\u4e00\u5c42\u7684keep_prob\u53ef\u4ee5\u8bbe\u7f6e\u7684\u4e0d\u4e00\u6837\uff0c\u4e00\u822c\u6765\u8bf4\u4e0a\u4e00\u5c42\u8282\u70b9\u6570\u91cf\u8d8a\u591a\uff0ckeep_prob\u53ef\u4ee5\u7a0d\u5fae\u8bbe\u7f6e\u7684\u5c0f\u4e00\u70b9\uff0c\u4f8b\u59820.5\uff1b\u5982\u679c\u6709\u67d0\u4e9b\u5c42\u6211\u4e0d\u62c5\u5fc3\u8fc7\u62df\u5408\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a1. \u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6211\u7684\u64cd\u4f5c\u662f\u6709\u6548\u7684\uff08\u5e2e\u52a9\u6211\u8c03\u6574\u53c2\u6570\uff09\uff0c\u53ef\u4ee5\u8ba9\u8ba1\u7b97\u673a\u753b\u4e00\u4e2aJ-iterations\u7684\u56fe\uff0c\u6765\u89c2\u5bdf\u6211\u7684\u8bbe\u7f6e\u662f\u5426\u8ba9\u7b97\u662f\u51fd\u6570\u5355\u8c03\u9012\u51cf\u4e86\uff08monotonically decreasing\uff09</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_21","title":"\u5176\u4ed6\u6b63\u5219\u5316\u65b9\u6cd5","text":"<ol> <li>\u6211\u4eec\u5e0c\u671b\u66f4\u591a\u7684\u6570\u636e\uff0c\u4f46\u662f\u5f88\u9057\u61be\u7684\u662f\u6709\u7684\u65f6\u5019\u518d\u989d\u5916\u83b7\u53d6\u6570\u636e\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4eba\u5de5\u634f\u9020\u65b0\u6570\u636e\uff0c\u4f8b\u5982\u4e00\u5f20\u732b\u7684\u7167\u7247\uff0c\u6211\u4eec\u53ef\u4ee5\u88c1\u526a\uff0c\u65cb\u8f6c\uff08\u89d2\u5ea6\u522b\u8fc7\u5927\uff09\uff0c\u6c34\u5e73\u7ffb\u8f6c\u7b49</li> <li>early stopping, \u4e00\u822c\u6765\u8bf4\u968f\u7740iterations, dev set error\u4f1a\u5148\u4e0b\u964d\u540e\u4e0a\u5347\uff0c\u800ctrain set error\u4f1a\u4e00\u76f4\u4e0b\u964d\u3002\u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u5728dev set error\u6700\u5c0f\u7684\u65f6\u5019\u76f4\u63a5\u505c\u6b62\u8bad\u7ec3\u3002\u5f53\u7136\u8fd9\u4e5f\u6709\u7f3a\u70b9\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u540c\u65f6\u6ee1\u8db3\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u6700\u5c0f\u5316\u548c\u9632\u6b62\u8fc7\u5ea6\u62df\u5408</li> </ol>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#normalizing-inputs","title":"\u5f52\u4e00\u5316\u8f93\u5165 \uff08Normalizing Inputs)","text":"<p>\u5047\u5982\u8bf4\u8f93\u5165\u7684\u7279\u5f81\u6709\u4e24\u4e2a\uff0c\u9996\u5148\u7b2c\u4e00\u6b65\u662f\u53d6\u5e73\u5747\u503c\uff0c\u7136\u540e\u628a\u6574\u4e2a\u56fe\u62c9\u5230\u539f\u70b9\u4e2d\u95f4\uff1b\u7b2c\u4e8c\u90e8\u662f\u7b97\u51fa\u65b9\u5dee\uff0c\u7136\u540e\u6bcf\u4e2ax\u9664\u4ee5\u8fd9\u4e2a\u65b9\u5dee\u7684\u5e73\u65b9\u6839\uff08\u6807\u51c6\u5dee\uff09</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u5f52\u4e00\u5316\u5462\uff1f \u6709\u7684\u65f6\u5019\u7531\u4e8e\u7279\u5f81\u7684scale\u4e0d\u540c\uff0c\u53ef\u80fdJ(w, b)\u53ef\u80fd\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u72ed\u957f\uff1b\u5f52\u4e00\u5316\u4e4b\u540e\uff0c\u66f2\u7ebf\u5c31\u53d8\u5f97\u975e\u5e38\u597d\u770b\uff0c\u800c\u4e14\u5b66\u4e60\u7387\u7684\u8bbe\u7f6e\u66f4\u5bb9\u6613\uff0c\u66f4\u65b9\u4fbf\u4f18\u5316\uff08\u72ed\u957f\u7684\u66f2\u7ebf\u4e0b\u4e0d\u540c\u7684\u5730\u65b9\u53ef\u80fd\u5e0c\u671b\u7684\u5b66\u4e60\u7387\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u659c\u7387\u5dee\u5f02\u975e\u5e38\u5927\uff09</p> <p></p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_22","title":"\u68af\u5ea6\u6d88\u5931/\u7206\u70b8&amp;\u968f\u673a\u521d\u59cb\u5316\u53c2\u6570","text":"<p>Data Vanishing/Exploding Gradients </p> <p></p> <p>\u5047\u5982\u8bf4\u6211\u4eec\u8bad\u7ec3\u4e00\u4e2a\u5f88\u6df1\u7684\u7f51\u7edc\uff0c\u90a3\u4e48yhat\u7684\u503c\u5c31\u662f\u9014\u4e2d\u7684\u4e00\u957f\u4e32\u8868\u8fbe\u5f0f\uff08\u7b2c\u4e00\u8f6e\uff0c\u521d\u59cb\u5316b=0\uff09\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\uff0cw\u77e9\u9635\u975e\u5e38\u5173\u952e\uff0c\u5728L\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd41\u5927\u4e00\u70b9\u6216\u6bd41\u5c0f\u4e00\u70b9\u90fd\u4f1a\u9020\u6210\u68af\u5ea6\u7206\u70b8\u6216\u6d88\u5931\uff0c\u4f7f\u5f97\u8bad\u7ec3\u65f6\u95f4\u589e\u957f\uff0c\u8bad\u7ec3\u96be\u5ea6\u52a0\u5927</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u4f46\u662f\u80fd\u591f\u5e2e\u5f88\u591a\u5fd9\u7684\u65b9\u6cd5\uff1a\u66f4\u8c28\u614e\u5730\u9009\u62e9\u968f\u673a\u5316\u53c2\u6570</p> <p></p> <p>\u5f53n\u5f88\u5927\u7684\u65f6\u5019\uff0c\u6211\u5e0c\u671bwi\u8fd8\u662f\u5c3d\u53ef\u80fd\u7684\u5c0f\uff1b\u90a3\u4e48\u6709\u7814\u7a76\u6307\u51fa\uff0c\u628awi\u7684\u65b9\u5dee\u63a7\u5236\u57282/n\u6bd4\u8f83\u597d\uff08\u5f52\u4e00\u5316\u8f93\u5165\uff09\uff0c\u56e0\u6b64\u6709\u4e86\u4e0a\u9762\u8fd9\u884c\u4ee3\u7801\uff0c\u524d\u9762\u662f\u9ad8\u65af\u5206\u5e03\uff0c\u540e\u9762\u662f\u5e73\u65b9\u6839\u4ee5\u63a7\u5236\u65b9\u5dee\uff0c\u5f53\u7136\u8fd9\u4e2a\u4ee3\u7801\u7684\u4f8b\u5b50\u662f\u9488\u5bf9\u6fc0\u6d3b\u51fd\u6570\u4e3aReLU\u7684\u5e73\u65b9\u6839\u5f0f\u5b50\uff1b\u5982\u679c\u662ftanh\u6fc0\u6d3b\u51fd\u6570\uff0c\u5efa\u8bae\u5e73\u65b9\u6839\u4f7f\u7528\u53f3\u8fb9\u7684\u5f0f\u5b50</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_23","title":"\u68af\u5ea6\u7684\u6570\u503c\u903c\u8fd1&amp;\u68af\u5ea6\u68c0\u9a8c","text":"<p>Numerical Approximation of Gradients &amp; Gradient Checking</p> <p>\u8ba1\u7b97\u673a\u91cc\u9762\u8ba1\u7b97\u4e00\u4e2a\u51fd\u6570\u7684\u4e00\u4e2a\u70b9\u7684\u5bfc\u6570\u771f\u7684\u662f\u6c42\u5bfc\u7136\u540e\u4ee3\u5165\u503c\u5417\uff1f\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u8ba1\u7b97\u673a\u4e2d\u91c7\u7528\u4e00\u79cd\u4f30\u8ba1\u7b97\u6cd5\uff1b\u6700\u4e0b\u9762\u7684\u5f0f\u5b50\u53cd\u6620\u4e86\u5bfc\u6570\u7684\u57fa\u672c\u5b9a\u4e49\uff0c\u800c\u8bef\u5dee\u53ef\u4ee5\u6709\u8fd9\u4e24\u4e2a\u5f0f\u5b50\u63a8\u51fa\u6765\uff0c\u53d1\u73b0\u91c7\u7528\u53cc\u8fb9\u7684\u8ba1\u7b97\u65b9\u5f0f\u8bef\u5dee\u66f4\u5c0f\uff08\u5f53\u03b5\u5c0f\u4e8e0\u7684\u65f6\u5019\uff09\uff0c\u56e0\u6b64\u5728\u8ba1\u7b97\u673a\u4e2d\u5e38\u5e38\u91c7\u7528\u53cc\u8fb9\u8ba1\u7b97\u6765\u4f30\u7b97</p> <p>\u90a3\u4e48\u6267\u884c\u68af\u5ea6\u68c0\u9a8c\u53ef\u4ee5\u5f88\u597d\u7684\u5e2e\u52a9\u6211\u4eecdebug\uff1a</p> <p></p> <p>\u6ce8\u610f\u8fd9\u4e2aratio\u5206\u5b50\u6ca1\u6709\u5e73\u65b9\uff0c\u610f\u5473\u7740\u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u7684\u548c\u7684\u5f00\u6839\u53f7\uff1b\u5982\u679c\u8fd9\u4e2aratio10\u7684\u591a\u5c11\u6b21\u65b9\u5c0f\u4e8e-7\uff0c\u975e\u5e38\u597d\uff1b\u5982\u679c\u662f-5\u5de6\u53f3\uff0c\u53ef\u80fd\u6709\u95ee\u9898\u4e5f\u53ef\u80fd\u6ca1\u6709\u95ee\u9898\uff1b\u5982\u679c\u662f-3\u5de6\u53f3\uff0c\u90a3\u4e48\u975e\u5e38\u6709\u53ef\u80fd\u6709bug</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#optimization-algorithms","title":"Optimization Algorithms\uff08\u4f18\u5316\u7b97\u6cd5\uff09","text":"<p>\u673a\u5668\u5b66\u4e60\u7684\u5e94\u7528\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4f9d\u8d56\u7ecf\u9a8c\uff08highly empirical\uff09\u3001\u8fed\u4ee3\uff08iterative\uff09\u7684\u8fc7\u7a0b!</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#mini-batch","title":"Mini-Batch \u68af\u5ea6\u4e0b\u964d","text":"<p>\u4e4b\u524d\u6211\u4eec\u7528\u5411\u91cf\u5316\u540c\u65f6\u5904\u7406\u5927\u91cf\u6570\u636e\u6837\u672c\uff0c\u4f46\u662f\u5982\u679c\u6837\u672c\u6570\u8d85\u7ea7\u5927\u5462\uff1f\u6211\u4eec\u4e0d\u59a8\u53d6\u5f88\u591a\u5b50\u96c6\uff08mini-batch)\uff0c\u90a3\u4e48\u6839\u636enotational convention\uff0c\u89c1\u4e0b\u56fe\uff1a</p> <p></p> <p></p> <p>\u4e0a\u56fe\u5c55\u793a\u4e86Mini-Batch\u7684\u6d41\u7a0b\uff1a\u6211\u4eec\u5047\u8bbe\u4e00\u51715million\u4e2a\u6837\u672c\uff0c\u5206\u62105000\u7ec4\uff0c\u4e00\u7ec41000\u4e2a\u6837\u672c\uff0c\u90a3\u4e48\u4e00\u8f6e\uff08epoch\uff09\uff0c\u5373\u6240\u6709Mini Batch\u90fd\u8fdb\u884c\u4e00\u6b21\u68af\u5ea6\u4e0b\u964d\uff0c\u51715000\u6b21\uff1b\u7136\u540e\u591aepoch\u8bad\u7ec3\uff0c\u76f4\u5230\u6536\u655b\u81f3\u4e00\u5b9a\u7cbe\u5ea6</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48mini batch\u6709\u5f88\u597d\u7684\u4f5c\u7528\u5462\uff1f\u8fd9\u770b\u8d77\u6765\u4ec5\u4ec5\u662f\u5206\u4e86\u4e00\u4e2a\u7ec4\uff01</p> <p></p> <p>\u9996\u5148\u6211\u4eec\u6765\u770bJ-iteration\u7684\u51fd\u6570\u56fe\uff0c\u5982\u679c\u662f\u6574\u4e2abatch\uff0c\u90a3\u4e48\u66f2\u7ebf\u5e94\u8be5\u662f\u5e73\u6ed1\u7684\uff1b\u4f46\u662f\u5982\u679c\u662fmini batch, \u90a3\u4e48\u5bf9\u4e8e\u7b2ct\u4e2a\u6837\u672c\u53ef\u80fd\u4f1a\u51fa\u73b0oscillation\uff08\u6446\u52a8\uff09\uff0c\u56e0\u4e3a\u53ef\u80fd(X{1}, Y{1})\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u6570\u636e\u96c6\uff0c\u800c\uff08X{2},Y{2}\uff09\u662f\u4e00\u4e2a\u6bd4\u8f83\u96be\u770b\u7684\u6570\u636e\u96c6\uff0c\u56e0\u4e3a\u672c\u5e94\u8be5\u662f\u6574\u4f53\u4e0a\u5f88\u5e38\u89c4\u7684\u6570\u636e\u96c6\u5206\u6210\u4e86\u591a\u4e2apartition</p> <p></p> <p>\u90a3\u4e48\u5148\u770b\u5de6\u4e0b\u89d2\u8fd9\u4e2a\u56fe\uff0c\u5982\u679c\u8bf4\u662f\u6574\u4e2abatch\uff0c\u90a3\u4e48\u4f1a\u7a33\u5b9a\u5730\u9010\u6b65\u9760\u8fd1\u6700\u4f4e\u70b9\uff0c\u56e0\u4e3a\u6574\u4f53\u6837\u672c\u7684\u62df\u5408\u5173\u7cfb\u8fd8\u662f\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u660e\u786e\u7684\uff1b\u800c\u5982\u679cmini-batch\u6781\u7aef\u4e00\u70b9\uff0c\u4e00\u4e2a\u6837\u672c\u662f\u4e00\u4e2aMini-Batch\uff0c\u90a3\u4e48\u5c31\u662fstochastic gradient descent(\u968f\u673a\u68af\u5ea6\u4e0b\u964d)\uff0c \u5bf9\u4e8e\u4e00\u4e2a\u5b64\u96f6\u96f6\u7684\u6837\u672c\u6765\u8bf4\uff0c\u8fed\u4ee3\u901f\u5ea6\u5f53\u7136\u5f88\u5feb\uff0c\u4f46\u662f\u8fd9\u4e9b\u6837\u672c\u4e00\u4e2a\u4e2a\u90fd\u7b49\u7740\u8d70\u8fed\u4ee3\uff0c\u6362\u800c\u8a00\u4e4b\uff0c\u5411\u91cf\u5316\u7684\u4f18\u52bf\u6d88\u5931\u4e86\uff0c\u5e76\u4e14\u7531\u4e8e\u5355\u4e2a\u6837\u672c\u7684\u62df\u5408\u7279\u5f81\u5f88\u4f4e\uff0c\u6240\u4ee5\u8d70\u5411\u6700\u4f4e\u70b9\u7684\u8def\u975e\u5e38\u5d0e\u5c96\uff08\u5f53\u7136\u6574\u4f53\u4e0a\u8fd8\u662f\u671d\u7740\u6700\u4f4e\u70b9\u8d70\uff09\uff0c\u5e76\u4e14\u4f1a\u5728\u6700\u4f4e\u70b9\u9644\u8fd1\u5f98\u5f8a\uff08oscillating\uff09</p> <p>\u53ef\u89c1\uff0c\u53d6\u4e00\u4e2a\u5408\u9002\u7684mini-batch\u6570\u503c\u662f\u5341\u5206\u5173\u952e\u7684\uff01</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#exponentially-weighted-averages","title":"\u6307\u6570\u52a0\u6743\u5e73\u5747\uff08Exponentially weighted averages\uff09","text":"<p>\u8fd9\u4e2a\u662f\u4f26\u6566\u7684\u6e29\u5ea6\u56fe\uff0c\u8fd9\u4e2a\u56fe\u566a\u58f0\u5f88\u5927\uff0c\u56e0\u6b64\u8003\u8651\u52a0\u6743\u53d6\u503c\uff1a<code>vi = 0.9vi-1 + 0.1\u03b8i</code></p> <p>\u7528vi\u6765\u4ee3\u66ff\u03b8i\uff0c\u8fd9\u6837\u7684\u51fa\u6765\u7684\u66f2\u7ebf\u5c31\u66f4\u6f02\u4eae\u4e00\u4e9b\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u7684\u611f\u6027\u7406\u89e3\u662f\uff1avi\u7684\u503c\u4e0d\u5b8c\u5168\u53d6\u503c\u4e8e\u03b8i\u7684\u503c\uff08\u82e5\u662f\u5b8c\u5168\u53d6\u51b3\u4e8e\u5b83\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u72ec\u7acb\u6027\u76f8\u5f53\u9ad8\uff0c\u751a\u81f3\u53ef\u4ee5\u98de\u4e0a\u5929\u90fd\u6ca1\u4eba\u7ba1\uff09\uff0c\u800c\u548cvi-1\u5efa\u7acb\u4e00\u79cd\u5173\u7cfb\uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u8fd9\u6bb5\u66f2\u7ebf\u6709\u4e00\u5b9a\u7684coherence\uff1b\u800c0.9\u7684\u5b9e\u9645\u542b\u4e49\u53ef\u4ee5\u7c97\u7565\u7406\u89e3\u4e3a10\u5929\u7684\u5e73\u5747\u6e29\u5ea6\uff08\u9a6c\u4e0a\u540e\u9762\u4f1a\u89e3\u91ca\uff09</p> <p></p> <p>\u6211\u4eec\u6765\u770b\u4e0d\u540c\u7684\u53d6\u503c\u4f1a\u600e\u4e48\u5f71\u54cd\u66f2\u7ebf\uff1b\u5982\u679c\u03b2\u5f88\u5927\uff0c\u90a3\u4e48\u51e0\u4e4e\u5b8c\u5168\u53d6\u51b3\u4e8e\u6628\u5929\uff0c\u90a3\u4e48coherence\u4f1a\u76f8\u5f53\u5927\uff0c\u90a3\u4e48\u4f1a\u5f97\u5230\u7eff\u8272\u66f2\u7ebf\uff1b\u800c\u5982\u679c\u03b2\u6ca1\u6709\u90a3\u4e48\u5927\u6bd4\u5982\u8bf40.5\uff0c\u90a3\u4e48coherence\u5e76\u4e0d\u662f\u90a3\u4e48\u5f3a\uff0c\u4f46\u662f\u8fd8\u662f\u6709\u4e00\u70b9\uff0c\u90a3\u4e48\u5c31\u4f1a\u5f97\u5230\u566a\u58f0\u60c5\u51b5\u76f8\u5bf9\u6765\u8bf4\u8f83\u597d\u4e00\u70b9\u7684\u9ec4\u8272\u66f2\u7ebf\uff1b\u4e00\u822c\u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7c7b\u4f3c\u4e8e\u7ea2\u8272\u66f2\u7ebf\u7684\u66f2\u7ebf</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u4e3a\u4ec0\u4e48\u90a3\u4e48\u91cd\u8981\uff1f\u56e0\u6b64\u8981\u6df1\u5ea6\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5b9e\u8d28:</p> <p></p> <p>\u90a3\u4e48\u4e0d\u96be\u770b\u51fa\uff0cv1 v2...\u7684\u63a8\u51fa\u6709\u70b9\u50cf\u6570\u5217\uff0c\u90a3\u4e48\u8fdb\u884c\u5f0f\u5b50\u5e26\u5165\u53ef\u5f97\u5230\u4e0b\u9762\u7684\u5f0f\u5b50\uff1b\u4e0d\u96be\u770b\u51fa\uff0c\u7cfb\u6570\u4e2d\u51fa\u73b0\u4e86\u4e860.9\u7684\u591a\u5c11\u6b21\u5e42\uff0c\u201c\u6307\u6570\u201d\u56e0\u6b64\u5f97\u540d\uff1b\u90a3\u4e48\u5176\u5b9e\u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u7528\u03b8\uff08t\uff09\uff0c0.10.9^t\u4e24\u4e2a\u51fd\u6570\u7684\u79bb\u6563\u5f62\u5f0f\u5377\u79ef*\u5f97\u5230\uff08\u7b2c\u4e8c\u4e2a\u51fd\u6570\u8981\u4ee550\u505a\u4e2d\u5fc3\u5bf9\u79f0\uff0c\u7136\u540e\u76f8\u5e94t\u7684\u4e24\u4e2a\u4e24\u4e2a\u51fd\u6570\u503c\u76f8\u4e58\uff0c\u4e4b\u540e\u76f8\u52a0\uff09\uff1b\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u5f53\u6743\u91cd\u4e0b\u964d\u5230 0.1\u00d71/e\u4ee5\u4e0b\u79f0\u4e3a\u201c\u5f71\u54cd\u5f88\u5c0f\u201d\uff0c\u90a3\u4e48\u6839\u636e\u516c\u5f0f\uff0c\u4e00\u822c\u6765\u8bf4\u5f53t\u8fbe\u52301/epsilon\u65f6\uff0c\u4e4b\u540e\u7684\u6743\u91cd\u5c31\u5f88\u4f4e\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u79f0\u4e3a\u201c\u524d1/epsilon\u7684\u52a0\u6743\u5e73\u5747\u201d\uff08\u8fd9\u4e9b\u6743\u91cd\u4e4b\u548c\u5f88\u63a5\u8fd1\u4e8e1\uff01\uff09</p> <p></p> <p>\u90a3\u4e48\u6ce8\u610f\u5230v0\u8bbe\u7f6e\u4e3a\u4e860\uff0c\u8fd9\u5bfc\u81f4\u4e86\u524d\u671f\u5b66\u4e60\u9636\u6bb5\u7684\u66f2\u7ebf\u504f\u5dee\u5f88\u5927\uff0c\u4f8b\u5982\u4e0a\u56fe\uff0c\u4e8b\u5b9e\u4e0a\u5982\u679c\u6ca1\u6709\u504f\u5dee\u7ea0\u6b63\uff08bias correction\uff09\u5f97\u5230\u7684\u662f\u7d2b\u8272\u66f2\u7ebf\uff1b\u56e0\u4e3a\u4e0d\u59a8\u770b\u770bv1 v2 \u7684\u6743\u91cd\u7cfb\u6570\u4e4b\u548c\uff0c\u8ddd\u79bb1\u5341\u4e07\u516b\u5343\u91cc\u3002\u56e0\u6b64\u6709\u5fc5\u8981\u52a0\u4e0a\u4fee\u6b63\uff0c\u56e0\u6b64\u6709\u4e86\u53f3\u8fb9\u7684\u5f0f\u5b50\uff0c\u52aa\u529b\u8ba9\u6743\u91cd\u7cfb\u6570\u4e4b\u548c\u4e3a1. \u800c\u5230\u4e86\u540e\u671f\uff0c\u5c31\u51e0\u4e4e\u548c\u6b63\u5e38\u7684\u91cd\u5408\u4e86\uff0c\u8bf4\u660e\u6536\u5230\u7684\u5f71\u54cd\u8f83\u5c0f\uff0c\u56e0\u6b64\u540e\u671f\u5e76\u4e0d\u9700\u8981\u9664\u4ee5\u4fee\u6b63\u53c2\u6570\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#momentum","title":"\u52a8\u91cf\u68af\u5ea6\u4e0b\u964d\u6cd5\uff08Momentum\uff09","text":"<p>\u4e00\u822c\u6765\u8bf4\uff0c\u5229\u7528\u4e86\u6307\u6570\u52a0\u6743\u5e73\u5747\u7b97\u6cd5\u7684Momentum\u7b97\u6cd5\u603b\u662f\u6bd4\u6b63\u5e38\u7684\u68af\u5ea6\u4e0b\u964d\u8981\u5feb\uff0c\u8ba1\u7b97\u68af\u5ea6\u7684\u6307\u6570\u52a0\u6743\u5e73\u5747\u6570\u5e76\u5229\u7528\u8fd9\u4e2a\u68af\u5ea6\u6765\u66f4\u65b0\u6743\u91cd</p> <p></p> <p>\u548c\u4e4b\u524d\u4ecb\u7ecd\u7684\u6307\u6570\u52a0\u6743\u5e73\u5747\u7b97\u6cd5\u7c7b\u4f3c\uff0c\u6211\u4eec\u4e0d\u518d\u7528dw db\u6765\u66f4\u65b0w b\uff0c\u6211\u4eec\u5229\u7528\u9014\u4e2d\u7684\u4e24\u4e2a\u5f0f\u5b50\u8ba1\u7b97Vdw, Vdb\u6765\u66f4\u65b0w b. \u6ce8\u610f\u8fd9\u91cc\u7684\u5de6\u53f3\u4e24\u4e2a\u90fd\u662fV\u03b8\uff0c\u4ee3\u8868\u8fd9\u4e00\u5c42\u7684\u66f4\u65b0\u901f\u5ea6\uff0c\u8fd9\u4e5f\u5c31\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u4ecb\u7ecd\u7684\u65f6\u5019\uff0c\u6570\u5217\u7684\u7b2c\u4e00\u9879\u662f0\uff0c\u56e0\u4e3aMomentum\u68af\u5ea6\u4e0b\u964d\u4e2d\u7684\u6bcf\u4e00\u5c42\u4e00\u5f00\u59cb\u7684\u66f4\u65b0\u901f\u5ea6\u4e5f\u662f0\uff01</p> <p>\u8fd9\u4e2a\u5f0f\u5b50\u4f7f\u5f97\u539f\u5148\u53ef\u80fd\u6446\u52a8\u5e45\u5ea6\u975e\u5e38\u96be\u4ee5\u63a5\u53d7\u7684\u8f68\u8ff9\u5728\u7eb5\u5411\u4e0a\u7684\u6446\u52a8\u53d8\u5f97\u66f4\u52a0\u5e73\u7f13\uff0c\u800c\u6a2a\u5411\u4e0a\u51e0\u4e4e\u4e0d\u53d7\u5f71\u54cd\uff1b\u5c31\u50cf\u4e00\u4e2a\u7897\u91cc\u9762\u4e00\u4e2a\u7403\u5728\u5706\u5468\u6eda\uff0c\u6709\u4e86\u6469\u64e6\u529b\uff08\u6a2a\u5411\u963b\u529b\u65b9\u5411\u52a0\u901f\u5ea6\uff09\u5c31\u4f1a\u66f4\u65b0\u6162\u4e0b\u6765\uff0c\u800c\u7eb5\u5411\u4e0a\u6ca1\u4ec0\u4e48\u53d8\u5316\uff0c\u56e0\u6b64\u7403\u80fd\u591f\u987a\u5229\u5411\u4e2d\u5fc3\u6eda\u53bb\uff0c\u83b7\u5f97\u52a8\u91cfMomentum\u3002</p> <p></p> <p>\u5176\u4e2d\u03b2\u8bbe\u62100.9\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u5177\u6709\u76f8\u5f53\u597d\u7684\u9c81\u68d2\u6027\uff1b\u56e0\u4e3a\u5b9e\u8df5\u4e2d\u4e00\u822c10\u6b21\u8fed\u4ee3\u4e4b\u540e\uff0c\u5c31\u5ea6\u8fc7\u4e86\u504f\u5dee\u5f88\u5927\u7684\u9636\u6bb5\u3002\u6240\u4ee5\u5b9e\u8df5\u4e2d\uff0c\u5f88\u5c11\u4eba\u7684\u5b9e\u9a8c\u4f1a\u53d7\u5230\u4e00\u5f00\u59cb\u7684\u504f\u5dee\u5f71\u54cd\uff1b\u6ce8\u610f\u6709\u7684\u65f6\u5019Vdw Vdb\u53ef\u80fd\u7b49\u5f0f\u4f1a\u7ed3\u5408\u03b1\u8fdb\u884c\u53d8\u5f62\uff0c\u4f46\u662f\u5176\u5b9e\u6ca1\u6709\u4efb\u4f55\u5dee\u522b\uff0c\u53ea\u4e0d\u8fc7\u662f\u6570\u503c\u4e0a\u4f1a\u5f71\u54cd\u03b1\u7684\u6700\u4f73\u53d6\u503c\uff08\u5f53\u7136\u56fe\u7247\u4e2d\u7684\u662f\u66f4\u597d\u7684\u5f0f\u5b50\u7248\u672c\uff09</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#rmsprop-algorithm-root-mean-square","title":"RMSprop Algorithm (Root Mean Square)","text":"<p>\u5728\u539f\u5148\u7684\u8ba1\u7b97\u4e0a\u9762\u505a\u4e00\u4e9b\u6539\u52a8\uff0cSdw\u548cSdb\u7684\u5f0f\u5b50\u89c1\u4e0a\u56fe\uff1b\u7136\u540ew\u548cb\u7684\u66f4\u65b0\u4e5f\u89c1\u4e0a\u56fe\uff08\u77e9\u9635\u5e73\u65b9\u6307\u7684\u662f\u5bf9\u5e94\u5143\u7d20\u7684\u5e73\u65b9\u4e4b\u540e\u7684\u77e9\u9635\uff08element-wise\uff09\uff09</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u4fdd\u7559\u4e86\u4e00\u90e8\u5206\u7684momentum\uff1b\u76f4\u89c9\u6765\u770b\uff0c\u5e0c\u671b\u7ad6\u76f4\u65b9\u5411\u4e0a\u6446\u52a8\u5e45\u5ea6\u8f83\u5c0f\uff0c\u6c34\u5e73\u65b9\u5411\u4e0a\u5e45\u5ea6\u8f83\u5927\uff0c\u800c\u6c34\u5e73\u548cw\u6709\u5173\uff0c\u5782\u76f4\u548cb\u6709\u5173\uff0c\u56e0\u6b64\u5728\u539f\u672c\u4e00\u4e2a\u6c34\u5e73\u65b9\u5411\u4e0a\u4e0d\u9661\u5ced\u7ad6\u76f4\u65b9\u5411\u4e0a\u9661\u5ced\u7684oscillation, \u6211\u5e0c\u671bw\u4f1a\u76f8\u5e94\u5730\u5feb\u901f\u589e\u5927\uff0cb\u4f1a\u76f8\u5e94\u5730\u76f8\u5e94\u51cf\u5c11\u3002\u7528\u8fd9\u4e2a\u601d\u8def\u6765\u770b\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u5c31\u80fd\u5927\u81f4\u7406\u89e3\u4e3a\u4ec0\u4e48\u5b83\u662f\u6b63\u786e\u7684</p> <p>\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5206\u5b50\u4e0d\u4f1a\u9664\u4ee5\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6570\u5b57\uff0c\u5206\u6bcd\u4e00\u822c\u52a0\u4e0a\u03b5\uff0c\u4e00\u822c\u9ed8\u8ba410^-8</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#adam-algorithm","title":"Adam Algorithm","text":"<p>\u5386\u53f2\u957f\u6cb3\u4e2d\u5f88\u591a\u4eba\u63d0\u51fa\u4e86\u4f18\u5316\u7b97\u6cd5\uff0c\u4f46\u662f\u4e8b\u5b9e\u8bc1\u660e\u5927\u591a\u6570\u7b97\u6cd5\u4e0d\u80fd\u5f88\u597d\u5730\u540c\u65f6\u517c\u5bb9\u591a\u79cd\u7f51\u7edc\u6846\u67b6\u3002\u4f46\u662f\uff0cRMSprop\u548cAdam Algorithm\u5c31\u662f\u5c11\u6709\u7684\u575a\u5b88\u4f4f\u4e86\u5927\u91cf\u4e0d\u540c\u7f51\u7edc\u6846\u67b6\u8003\u9a8c\u7684\u7b97\u6cd5</p> <p>\u4e00\u822c\u6765\u8bf4\uff0cadam\u5c31\u662fMomentum \u548c RMSprop\u7684\u7ed3\u5408\u4f53</p> <p></p> <p>\u5148\u662fmomentum\u7684\u8d28\u6570\u52a0\u6743\u5e73\u5747\uff0c\u540e\u6765\u662fRMSprop, \u5e76\u4e14\u8fd8\u8fdb\u884c\u4e86bias correction</p> <p></p> <p>\u6709\u5f88\u591a\u7684hyperparameter, \u4f46\u662f\u4e8b\u5b9e\u4e0a\u03b21 2\u90fd\u662f\u6709\u63a8\u8350\u9ed8\u8ba4\u503c\u7684\uff0c\u5f88\u5c11\u4f1a\u8c03\u8bd5\u5b83\uff1b\u03b5\u51e0\u4e4e\u4e0d\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\uff0c\u6240\u4ee5\u5c31\u4f7f\u7528\u9ed8\u8ba4\u5c31\u597d\u4e86\uff1b\u800c\u5b66\u4e60\u7387\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u3001\u9700\u8981\u4e0d\u65ad\u8c03\u8bd5\u7684\u53c2\u6570! </p> <p>Adam stands for Adaptive moment estimation</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_24","title":"\u5b66\u4e60\u7387\u8870\u51cf","text":"<p>\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60\u7387\u8870\u51cf\uff1f\u76f4\u89c9\u4e0a\u6765\u770b\uff0c\u4e00\u5f00\u59cb\u5e0c\u671b\u8f68\u8ff9\u6b65\u4f10\u8fc8\u7684\u5927\u4e00\u70b9\uff0c\u4f46\u662f\u4e4b\u540e\u5f53\u5230\u8fbe\u4e86\u6700\u4f4e\u70b9\u9644\u8fd1\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u6b65\u4f10\u4f9d\u7136\u90a3\u4e48\u5927\u4e86\uff0c\u4e0d\u7136\u5c31\u4f1a\u5728\u6700\u4f4e\u70b9\u9644\u8fd1\u53cd\u590d\u6446\u52a8</p> <p></p> <p>\u4e00\u79cd\u5e38\u89c1\u7684\u8870\u51cf\u65b9\u6cd5\u5982\u4e0a\u56fe\uff1adecay_rate\u53c8\u662f\u4e00\u4e2a\u8d85\u53c2\u6570\uff0cepoch\u4ee3\u8868\u8bad\u7ec3\u201c\u8f6e\u201d\u6570\uff0c\u4e0a\u9762\u8fd9\u4e2a\u5f0f\u5b50\u4e2d\uff0c\u5982\u679cepoch\u5f88\u5927\uff0c\u8bf4\u660e\u5df2\u7ecf\u8d70\u4e86\u5f88\u591a\u6b21\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u5b66\u4e60\u7387\u4e0b\u964d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f0f\u5b50\u6b63\u597d\u8868\u793a\u4e86\u8fd9\u79cd\u5173\u7cfb</p> <p></p> <p>\u5f53\u7136\u8fd8\u6709\u5176\u4ed6\u7684\u8870\u51cf\u65b9\u6cd5\uff0c\u4f46\u662f\u6838\u5fc3\u601d\u8def\u90fd\u662fepoch\u4e0a\u5347\u540e\uff0clearning rate\u8981\u4e0b\u964d\uff08\u8fd8\u6709\u624b\u52a8\u8c03\u53c2\u7684\u3002\uff09</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#local-optima","title":"\u5c40\u90e8\u6700\u4f18\u95ee\u9898\uff08local optima\uff09","text":"<p>\u672c\u6765\u4ee5\u4e3a\uff0c\u5728\u7a7a\u95f4\u4e2d\uff0c\u635f\u5931\u51fd\u6570\u66f2\u9762\u957f\u5f97\u50cf\u6709\u5de6\u8fb9\uff1b\u5f53\u9047\u5230\u4e86\u56db\u5468\u68af\u5ea6\u90fd\u4e3a\u96f6\u7684\u70b9\uff0c\u8fd9\u53ef\u80fd\u662f\u5c40\u90e8\u6700\u4f18\u89e3\uff1b\u4f46\u662f\u4e8b\u5b9e\u4e0a\uff0c\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u9047\u5230\u8fd9\u79cd\u56db\u5468\u68af\u5ea6\u90fd\u4e3a\u96f6\u7684\u70b9\uff0c\u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u662f\u9a6c\u978d\u70b9\uff08saddle point\uff09\u5176\u5b9e\u671d\u7740\u5408\u9002\u7684\u65b9\u5411\u4f9d\u7136\u80fd\u591f\u7ee7\u7eed\u4f18\u5316\u3002\uff08\u4e0d\u592a\u53ef\u80fd\u4f1a\u8fdb\u5165\u5c40\u90e8\u6700\u4f18\u70b9\uff0c\u53ea\u8981\u8bad\u7ec3\u7684\u7f51\u7edc\u662f\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u590d\u6742\u7684\uff09</p> <p>\u53ef\u80fd\u4f1a\u8212\u4e00\u53e3\u6c14\uff1a\u8fd8\u597d\u4e0d\u662f\u649e\u89c1\u4e86\u5c40\u90e8\u6700\u4f18\u70b9\u3002\u4f46\u662f\u4f9d\u7136\uff0csaddle point\u6709\u5f88\u5927\u7684\u95ee\u9898\uff1a\u978d\u70b9\u9644\u8fd1\u4e5f\u5f88\u6709\u53ef\u80fd\u6709\u5e73\u7f13\u533a\uff08plateau\uff09\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u65b9\u5411\u4e0a\u7684\u68af\u5ea6\u957f\u65f6\u95f4\u63a5\u8fd1\u4e8e0\uff0c\u5bfc\u81f4\u5b66\u4e60\u901f\u7387\u975e\u5e38\u6162</p> <p>\u800cadam\u7b49\u7b97\u6cd5\u80fd\u591f\u5728\u8fd9\u79cd\u5e73\u7f13\u533a\u5c3d\u5feb\u8d70\u51fa\u6765\uff0c\u7ee7\u7eed\u5bfb\u627e\u63a5\u4e0b\u6765\u7684\u4f4e\u70b9</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#hyperparameter-tuning","title":"\u8c03\u53c2\u70bc\u4e39\u2014\u2014Hyperparameter tuning","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_25","title":"\u5982\u4f55\u8c03\u8bd5","text":"<p>\u8d85\u53c2\u6570\u6709\u5f88\u591a\uff0c\u4f46\u662f\u91cd\u8981\u6027\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u5c42\u7ea7\uff1a</p> <ol> <li>\u5b66\u4e60\u7387\uff1a\u975e\u5e38\u91cd\u8981\uff01\uff01</li> <li>momentum \u03b2\uff1b hidden units; mini-batch size</li> <li>hidden layers; learning rate decay</li> </ol> <p></p> <p>\u7b56\u75651\uff1a\u4e0d\u8981\u53d6\u8868\u683c\u70b9\uff01\u5047\u5982\u8bf4\u4e00\u4e2a\u8d85\u53c2\u6570\u662f\u5b66\u4e60\u7387\uff0c\u53e6\u4e00\u4e2a\u662fadam\u4e2d\u7684epsilon\uff08\u8fd9\u91cc\u4e3e\u6781\u7aef\u4f8b\u5b50\uff09\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\u5f71\u54cd\u548cepsilon\u51e0\u4e4e\u4e00\u70b9\u5173\u7cfb\u90fd\u6ca1\u6709\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684epsilon\u70b9\u53ea\u67095\u4e2a\uff0c\u4e0d\u80fd\u76f4\u89c2\u770b\u51fa\uff1b\u800c\u5982\u679c25\u4e2a\u70b9\u90fd\u662f\u968f\u673a\u7684\uff0c\u90a3\u5f88\u5bb9\u6613\u5c31\u80fd\u53d1\u73b0\u8c01\u91cd\u8981\u8c01\u4e0d\u662f\u90a3\u4e48\u91cd\u8981\u4e86</p> <p>\u5982\u679c\u662f\u4e09\u4e2a\u8d85\u53c2\u6570\uff0c\u90a3\u4e48\u5c31\u662f\u7acb\u65b9\u4f53\u4e2d\u53d6\u8868\u683c\uff1b\u9ad8\u7ef4\u4ee5\u6b64\u7c7b\u63a8</p> <p>\u7b56\u75652\uff1a\u4ece\u7c97\u5230\u7cbe\uff1a\u5148\u7f29\u5c0f\u5230\u4e00\u4e2a\u8868\u73b0\u70b9\u90fd\u5f88\u597d\u7684\u533a\u57df\u5185\uff0c\u518d\u968f\u673a\u53d6\u70b9\u6765\u8fdb\u4e00\u6b65\u627e\u533a\u57df\uff0c\u4e00\u76f4\u627e\u5230\u6ee1\u610f\u7684\u533a\u57df\uff08From Coarse to Fine\uff09</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_26","title":"\u9009\u62e9\u5408\u9002\u533a\u95f4","text":"<p>\u5728\u8de8\u5ea6\u5e76\u4e0d\u662f\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff08\u6570\u91cf\u7ea7\uff09\u5747\u5300\u5f53\u7136\u662f\u4e00\u4ef6\u7406\u6240\u5e94\u5f53\u7684\u4e8b\u60c5\uff1b\u4f46\u662f\u5982\u679c\u6570\u91cf\u7ea7\u4e0a\u8de8\u5ea6\u5f88\u5927\u5462\uff1f</p> <p></p> <p>\u5047\u8bbe\u8003\u8651\u7684\u5b66\u4e60\u7387\u4ece0.0001\u52301\uff0c\u90a3\u4e48\u518d\u5747\u5300\u53d6\u503c\u8c8c\u4f3c\u6709\u70b9\u4e0d\u53ef\u53d6\uff1b\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6570\u8f6c\u6362\uff0c\u7136\u540e\u6307\u6570\u533a\u95f4\u4e2d\u5806\u968f\u673a\u53d6\u6570\u5b57\uff0c\u8fd9\u6837\u5c31\u66f4\u5408\u7406\u4e00\u4e9b</p> <p></p> <p>\u53e6\u5916\u4e00\u4e2a\u503c\u5f97\u4e00\u63d0\u7684\u662f\u6307\u6570\u52a0\u6743\u5e73\u5747\u4e2d\u03b2\u7684\u5408\u7406\u53d6\u503c\uff1a\u60f3\u52301-\u03b2\u5f88\u6b63\u5e38\uff0c\u4f46\u662f\u4e4b\u540e\u662f\u5e73\u5747\u8fd8\u662f\u5bf9\u6570\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u03b2\u4ece0.9\u53d6\u52300.9005\uff0c\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u4ee3\u8868\u5e73\u5747\u6837\u672c\u6570\u91cf\u4ece10\u5230\u4e00\u4e2a\u6bd410\u5927\u4e00\u4e9b\u7684\u6570\u5b57\uff0c\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\uff1b\u4f46\u662f\u4ece0.999\u52300.9995\u5f71\u54cd\u5c31\u5929\u5dee\u5730\u522b\uff0c\u56e0\u4e3a\u4ee3\u8868\u7684\u662f\u5e73\u5747\u6837\u672c\u6570\u91cf\u4ece1000\u5230\u4e862000\uff01\u56e0\u6b641-\u03b2\u4e4b\u540e\u5e94\u8be5\u662f\u53d6\u5bf9\u6570\u7136\u540e\u518d\u968f\u673a\u53d6\u503c</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#pandas-and-caviar-strategies","title":"Pandas and Caviar Strategies","text":"<p>\u8bad\u7ec3\u6a21\u578b\u6709\u4e24\u79cd\u4e3b\u6d41\u7684\u65b9\u5f0f\uff1a\u7b2c\u4e00\u79cd\u662f\u201cbabysitting\u201d, \u7b2c\u4e00\u5929\u521d\u59cb\u5316\u53c2\u6570\uff0c\u7136\u540e\u4e4b\u540e\u4e0d\u65ad\u505a\u8c03\u6574\uff1b\u7b2c\u4e8c\u79cd\u662f\u201cparallel\u201d, \u591a\u4e2a\u6a21\u578b\u5728\u4e00\u79cd\u53c2\u6570\u6216\u7b97\u6cd5\u914d\u7f6e\u4e0b\u8bad\u7ec3\uff0c\u6700\u540e\u770b\u54ea\u4e2a\u6700\u597d</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u7b97\u529b\u5f88\u8db3\u7684\u60c5\u51b5\u4e0b\u91c7\u53d6caviar\u6a21\u5f0f\uff0c\u4e0d\u591f\u7684\u8bdd\u91c7\u53d6panda\u6a21\u5f0f</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#batch-norm","title":"\u6b63\u5219\u5316\u7f51\u7edc\u7684\u6fc0\u6d3b\u51fd\u6570\uff08Batch Norm\uff09","text":"<p>\u4e4b\u524d\u63d0\u5230\u4e86\u5f52\u4e00\u5316\u8f93\u5165\uff0c\u8ba9\u635f\u5931\u51fd\u6570\u66f2\u7ebf\u4ece\u72ed\u957f\u7684\u6837\u5b50\uff08elongated\uff09\u53d8\u6210\u597d\u770b\u7684\u6837\u5b50\uff0c\u4ece\u800c\u4f7f\u5f97\u6700\u4f73\u5b66\u4e60\u7387\u5bb9\u6613\u627e\u5230\uff0c\u5e76\u4e14\u65b9\u4fbf\u8bad\u7ec3w\u548cb\u3002\u90a3\u4e48\u8fd9\u662f\u9488\u5bf9\u4e00\u4e2aLogistic regression\u7684\uff0c\u5982\u679c\u5e94\u7528\u5230\u4e00\u4e2a\u5f88\u6df1\u7684\u7f51\u7edc\u4e2d\u5462\uff1f\u6211\u4eec\u5bf9\u4e8ea[l]\u8fdb\u884c\u5f52\u4e00\u5316\u8fd8\u662fz[l]\u8fdb\u884c\u5f52\u4e00\u5316\u4ee5\u4f7f\u5f97w[l+1] b[l+1]\u7684\u8bad\u7ec3\u53d8\u5f97\u66f4\u52a0\u8f7b\u677e\u5462\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u5728\u5b9e\u8df5\u4e2d\u4e00\u822c\u5bf9z[l]\u5f52\u4e00\u5316\uff0c\u8fd9\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u79cddefault choice\u3002</p> <p></p> <p>\u90a3\u4e48\u5982\u56fe\uff1a\u03bc\u548c\u03c3^2\u7684\u503c\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u5f88\u76f8\u4f3c\uff0c\u7136\u540e\u5f97\u5230Z[l] (i)norm\uff08\u6ce8\u610f\u5206\u6bcd\u52a0\u4e0a\u4e86\u03b5\uff0c\u9632\u6b62\u9664\u4ee50\uff09\uff0c\u8fd9\u6837\u4e00\u6765Znorm\u7684\u5e73\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1\u3002\u4f46\u662f\u8fd9\u6837\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u7684\u786e\u66f2\u7ebf\u597d\u770b\u4e86\uff0c\u4f46\u662f\u5bf9Z\u7684\u6846\u5b9a\u592a\u4e25\u683c\u3002\u56e0\u6b64\u6709\u4e86Z~\uff08tilde\uff09\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u4f7f\u5f97Z~\u7684\u5e73\u5747\u503c\u548c\u65b9\u5dee\u5f97\u4ee5\u4fee\u6539\uff0c\u90a3\u4e48\u6700\u540e\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u7684\u8fd8\u6709\u4e00\u4e2a\u4e2a\u03b3\u548c\u03b2\uff08\u6ca1\u9519\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\u4e5f\u4f1a\u8fed\u4ee3\uff0c\u7528gradient descent \u6216\u8005 Adam \u6216\u8005 \u6216\u8005 RMSprop \u6216\u8005 Momentum\u7b49\u7b49\uff09</p> <p>\u90a3\u4e48Batch Norm\uff08BN\uff09\u662f\u5982\u4f55fit in\u795e\u7ecf\u7f51\u7edc\u7684\u5462\uff1f</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0cX(A[0]) - Z - Z~ - A - Z - Z~ - A......\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6d41\u7a0b\u3002\u90a3\u4e48\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u6700\u540e\u8981\u8bad\u7ec3\u51fa\u6765\u7684\u53c2\u6570\u5c31\u662f\u56fe\u4e2d\u6240\u5c55\u793a\u51fa\u6765\u7684\u90a3\u6837\u3002</p> <p>Batch Norm\u5728\u4ee3\u7801\u4e2d\u5f80\u5f80\u53ea\u8981\u4e00\u884c\u5c31\u80fd\u641e\u5b9a\uff1a<code>tf.nn.batch_normalization</code></p> <p>\u5728\u5b9e\u8df5\u4e2d\uff0cBatch Norm\u4e00\u822c\u548cMini Batch\u4e00\u8d77\u4f7f\u7528\u3002</p> <p></p> <p>\u6ce8\u610f\u5230\uff0c\u56e0\u4e3aBatch Norm\u7684\u5b9e\u8d28\uff0cZ\u7684\u8ba1\u7b97\u4e2d\u540e\u9762\u52a0\u4e0a\u7684b\u5176\u5b9e\u9996\u5148\u5c31\u4f1a\u88ab\u5220\u53bb\u3002\u56e0\u6b64\u5176\u5b9e\u8bad\u7ec3\u51fa\u6765\u7684\u53c2\u6570\u4e2d\u6ca1\u6709b\u3002\u5176\u6b21\u8981\u6ce8\u610f\u7684\u662f\u03b2\u548c\u03b3\u7684\u7ef4\u5ea6\uff0c\u8fd9\u4e9b\u5728\u9014\u4e2d\u90fd\u8bb2\u6e05\u695a\u4e86</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48Batch Norm\u80fd\u591f\u663e\u8457\u63d0\u5347\u5b66\u4e60\u901f\u7387\u5462\uff1f \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5f52\u4e00\u5316\u5bf9\u4e8e\u635f\u5931\u51fd\u6570\u66f2\u7ebf\u7684\u6539\u5584\uff0c\u8fd9\u5f53\u7136\u662f\u4e00\u70b9\u539f\u56e0\uff0c\u90a3\u4e48\u4e8b\u5b9e\u4e0a\u8fd8\u6709\u5176\u4ed6\u539f\u56e0\uff1a</p> <p></p> <p>\u5047\u5982\u8bf4\u6211\u4eec\u5de6\u8fb9\u662f\u8bad\u7ec3\u96c6\uff0c\u4f46\u662f\u6d4b\u8bd5\u673a\u662f\u6709\u8272\u7684\u732b\u3002\u90a3\u4e48\u6211\u4eec\u4e0d\u80fd\u671f\u5f85\u5de6\u8fb9\u7684\u6a21\u578b\u80fd\u591f\u5f88\u597d\u7684\u8fd0\u7528\u5230\u53f3\u8fb9\u3002\u4e3a\u4ec0\u4e48\uff1f\u89c1\u56fe\u4e2d\uff0c\u5de6\u8fb9\u662f\u8bad\u7ec3\u96c6\uff0c\u70b9\u90fd\u96c6\u4e2d\u5728\u4e00\u4e2a\u5730\u65b9\u3002\u867d\u7136\u6a21\u578b\u62df\u5408\u51fa\u6765\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u662f\u7531\u4e8e\u53f3\u8fb9\u6839\u672c\u6ca1\u6709\u4e1c\u897f\uff0c\u56e0\u6b64\u4e0d\u80fd\u671f\u5f85\u8fd9\u4e2a\u6a21\u578b\u80fd\u591f\u7528\u5728\u53f3\u8fb9\u7684\u6d4b\u8bd5\u96c6\u4e0a\uff0c\u867d\u7136\u90a3\u4e2a\u6211\u4eec\u60f3\u8981\u8bad\u7ec3\u51fa\u6765\u7684\u201c\u771f\u6b63\u7684\u6b63\u786e\u51fd\u6570\u201d\u5728\u4e24\u4e2adata set\u91cc\u9762\u90fd\u662f\u771f\u5b9e\u5b58\u5728\u7684\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u5047\u5982\u8bf4\u6709\u4e00\u4e2aX\u5230Y\u7684mapping, \u5047\u5982\u8bf4\u6539\u53d8\u4e86X\u7684\u5206\u5e03\uff0c\u8fd9\u4e2amapping\u4e5f\u4f1a\u6709\u6240\u5931\u6548\u3002\u8fd9\u79cd\u73b0\u8c61\u53eb\u505a\u201ccovariate shift\u201d.</p> <p></p> <p>\u52a0\u5165\u6211\u73b0\u5728\u5355\u5355\u770b\u7b2c\u4e09\u5c42\uff1a\u5982\u679c\u6ca1\u6709\u4e86Batch Norm\uff0c\u524d\u9762\u4e24\u5c42\u5b66\u4e60\u540e\u66f4\u65b0\u4e86a[2]\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u636e\u96c6\u7684\u5206\u5e03\u53ef\u80fd\u5c31\u548c\u4e4b\u524d\u7684\u4e0d\u4e00\u6837\u4e86\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u5c42\u6765\u8bf4\u975e\u5e38\u96be\u53d7\uff1b\u7b2c\u4e09\u5c42\u96be\u53d7\u7b2c\u56db\u5c42\u8ddf\u7740\u96be\u53d7\u3002\u56e0\u6b64\u6211\u4eec\u60f3\u8981\u6bcf\u4e00\u6b21\u4f20\u7ed9\u4e0b\u4e00\u5c42\u7684\u6570\u636e\u90fd\u662f\u5341\u5206\u597d\u770b\u7684\uff0c\u81f3\u4e8e\u4e0b\u4e00\u5c42\u600e\u4e48\u5904\u7406\u8fd9\u4e2a\u597d\u5904\u7406\u7684\u6570\u636e\uff0c\u5c31\u8981\u770b\u5b83\u4eec\u81ea\u5df1\u7684\u03b3\u548c\u03b2\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u6bcf\u4e00\u5c42\u7684\u5b66\u4e60\u7684\u81ea\u6211\u72ec\u7acb\u6027\u76f8\u6bd4\u4e8e\u4e4b\u524d\u591a\u4e86\u4e00\u70b9\u70b9\u3002</p> <p>\u540c\u65f6\uff0cBatch Norm\u8fd8\u6709\u4e00\u70b9\u6b63\u5219\u5316\u7684\u6548\u679c\uff0c\u8fd9\u662f\u201c\u4e00\u9635\u610f\u60f3\u4e0d\u5230\u7684\u72c2\u559c\u201d\u3002\u56e0\u4e3amini batch\u5728\u81ea\u5df1\u7684\u8bad\u7ec3\u6570\u636e\u4e0a\u7528\u4e86mean and variance, \u56e0\u6b64\u6570\u636e\u662f\u6709\u566a\u70b9\u7684\uff0c\u800cz tilde\u4e5f\u662f\u6709\u566a\u70b9\u7684\uff0c\u56e0\u6b64\u4f1a\u8feb\u4f7f\u67d0\u4e00\u5c42\u4e0d\u4f1a\u8fc7\u5ea6\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u5355\u5143\u7684\u8f93\u51fa\u3002\u4f46\u662f\u6211\u4eec\u4e00\u822c\u4e0d\u80fd\u628a\u6b63\u5219\u5316\u5f53\u4f5cBatch Norm\u7684\u76ee\u7684\uff0c\u56e0\u4e3aregularization\u6548\u679c\u5176\u5b9e\u5f88\u5c0f</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#batch-norm-at-test-time","title":"Batch Norm at test time","text":"<p>\u6211\u4eec\u7528BN\u6765\u5904\u7406Mini Batch\uff0c\u4f46\u662f\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u9700\u8981\u5bf9\u6bcf\u4e00\u4e2a\u6837\u672c\u9010\u4e00\u5904\u7406\uff1a</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8981\u786e\u5b9a\u4e00\u4e2a\u03bc\u548c\u03c3\uff0c\u4f46\u662f\u6211\u4eec\u8bad\u7ec3\u7684\u65f6\u5019\u7528\u7684\u662fmini batch\uff0c\u6709\u5f88\u591a\u7684\u53c2\u6570\uff0c\u7528\u54ea\u4e2a\u5462\uff1f\u89e3\u51b3\u65b9\u6848\u662f\u5f97\u5230\u8fd9\u4e9b\u53c2\u6570\u540e\uff0c\u7528\u6307\u6570\u52a0\u6743\u5e73\u5747\u5f97\u51fa\u6700\u540e\u4f30\u7b97\u7684\u3001\u4f60\u8981\u662f\u7528\u7684\u03bc\u548c\u03c3\u7684\u53c2\u6570\uff0c\u7136\u540e\u7528\u5728\u6d4b\u8bd5\u96c6\u91cc\u9762\uff1b\u5f53\u7136\uff0c\u6211\u4eec\u8bad\u7ec3\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0d\u8981mini batch\uff0c\u5728\u6574\u4e2a\u8bad\u7ec3\u96c6\u4e0a\u5f97\u51fa\u4e00\u4e2a\u03bc\u548c\u03c3\uff0c\u4f46\u662f\u5b9e\u8df5\u4e2d\uff0cdefault\u662f\u6307\u6570\u52a0\u6743\u5e73\u5747\u4e0eMini Batch\u7ed3\u5408\u6765\u4f7f\u7528\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#softmax","title":"Softmax \u56de\u5f52","text":"<p>\u4e4b\u524d\u6211\u4eec\u4e00\u76f4\u8bb2\u7684\u662fbinary classification, \u4f46\u662f\u5982\u679c\u6211\u60f3\u8981\u68c0\u6d4b\u662f\u4e0d\u662f\u4e00\u7c7b\u4e2d\u7684\u4e00\u79cd\u5462\uff1f</p> <p></p> <p>\u5047\u5982\u8bf4C\u4ee3\u8868\u6211\u60f3\u5206\u7684\u7c7b\u7684\u6570\u91cf\uff08\u8fd9\u91cc\u662f4\uff0c\u9664\u4e86\u4e09\u79cd\u52a8\u7269\uff0c\u8fd8\u67090\uff0c\u4ee3\u8868\u4e0d\u662f\u4e09\u79cd\u52a8\u7269\u4e4b\u4e00\uff09\uff0c\u56e0\u6b64\u6211\u5e0c\u671b\u795e\u7ecf\u7f51\u7edc\u8f93\u51fa\u5c42\u8f93\u51fa\u7684yhat\u662f\u4e00\u4e2a\uff084\uff0c1\uff09\u7684\u5411\u91cf\uff0c\u8f93\u51fa\u7684\u56db\u4e2a\u6570\u5b57\u5206\u522b\u4ee3\u8868\u56db\u79cd\u53ef\u80fd\u6027\uff08\u5f53\u7136\uff0c\u56db\u4e2a\u6570\u5b57\u548c\u5e94\u8be5\u662f1\uff09</p> <p></p> <p>\u90a3\u4e48\u80af\u5b9a\u662f\u6700\u540e\u4e00\u4e2a\u8f93\u51fa\u5c42l\u8981\u4e0b\u529f\u592b\u4e86\uff1a\u8f93\u5165\u7684\u662fz[l], \u7136\u540e\u53d6\u5e42\u5f97\u5230\uff084\uff0c1\uff09\u7684\u5411\u91cft\uff0c\u7136\u540e\u8ba1\u7b97\uff084\uff0c1\uff09\u7684a[l]\uff0c\u8ba1\u7b97\u65b9\u5f0f\u89c1\u4e0a\u56fe\u3002\u90a3\u4e48\u6700\u540e\u5f97\u5230\u7684a[l]\u5c31\u542b\u6709\u56db\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u201c\u4e00\u79cd\u201d\uff0c\u800c\u4e14\u56db\u4e2a\u6982\u7387\u4e4b\u548c\u4e3a1\uff0c\u7b26\u5408\u6211\u4eec\u7684\u8bbe\u60f3\u3002</p> <p>\u90a3\u4e48\u8fd9\u79cd\u8ba1\u7b97\u6d41\u7a0b\u2014\u2014\u8fd9\u79cd\u8f93\u5165\u4e00\u4e2a\uff084\uff0c1\uff09\u77e9\u9635\uff0c\u8f93\u51fa\uff084\uff0c1\uff09\u77e9\u9635a[l]\u2014\u2014\u7684activation function\u6211\u4eec\u5c31\u79f0\u4e4b\u4e3aSoftmax function</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#softmax_1","title":"\u8bad\u7ec3Softmax\u5206\u7c7b\u5668","text":"<p>\u60f3\u8bad\u7ec3\uff0c\u5f53\u7136\u8981\u77e5\u9053\u635f\u5931\u51fd\u6570\u662f\u4ec0\u4e48\u3002\u5982\u4e0a\u56fe\uff0c\u5047\u5982\u8bf4y\u5982\u56fe\uff0c\u90a3\u4e48yhat\u5c31\u4e0d\u662f\u4e00\u4e2a\u975e\u5e38\u7406\u60f3\u7684\u7ed3\u679c\uff0c\u6211\u5e0c\u671b\u635f\u5931\u51fd\u6570\u56e0\u6b64\u5f88\u5927\u3002\u90a3\u4e48\u56fe\u4e2d\u7684\u51fd\u6570\u6070\u80fd\u53cd\u6620\u8fd9\u79cd\u5173\u7cfb\uff01</p> <p>\u90a3\u4e48\u56de\u5934\u7b97\u504f\u5bfc\uff0cdz[l] = yhat - y\u4f9d\u7136\u662f\u8fd9\u6837\uff1b\u4f46\u662f\u7f16\u7a0b\u6846\u67b6\u4f1a\u5e2e\u52a9\u6211\u4eec\u8ba1\u7b97\u5bfc\u6570\u4e4b\u7c7b\u7684\uff0c\u56e0\u6b64\u4e0d\u7528\u8fc7\u591a\u7ea0\u7ed3\u5bfc\u6570\u7684\u8ba1\u7b97</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#deep-learning-framework","title":"Deep Learning Framework","text":"<p>\u5df2\u7ecf\u6709\u4e86\u5f88\u591a\u7b97\u6cd5\u548c\u7f51\u7edc\u95ee\u4e16\u4e86\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u4ece\u5934\u5f00\u59cb\u52a8\u624b\u5199\u662f\u4e00\u4ef6\u975e\u5e38\u56f0\u96be\u7684\u4e8b\u3002\u4f8b\u5982\u8bf4\uff0c\u6211\u5f53\u7136\u77e5\u9053\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58\u600e\u4e48\u5b9e\u73b0\uff0c\u4e5f\u77e5\u9053\u5982\u4f55\u7528\u4ee3\u7801\u5b9e\u73b0\uff0c\u4f46\u662f\u5728\u771f\u6b63\u7f16\u7a0b\u4e2d\uff0c\u6211\u8fd8\u662f\u5e0c\u671b\u7528\u4e00\u884c\u4ee3\u7801\u6765\u8c03\u7528\u51fd\u6570\u4ece\u800c\u5b9e\u73b0\u77e9\u9635\u4e58\u6cd5\u3002\u795e\u7ecf\u7f51\u7edc\u4e5f\u662f\u7c7b\u4f3c\uff0c\u6709\u5f88\u591a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u5e2e\u52a9\u6211\u4eec\u603b\u7ed3\u4e86\u5404\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u65b9\u4fbf\u6211\u4eec\u8f7b\u677e\u8bad\u7ec3\u548c\u8c03\u7528</p> <p>\u7ecf\u5178\u7684\u6709\uff1a<code>Caffe/Caffe2 CNTK DL4J Keras Lasagne mxnet PaddlePaddle TensorFlow Theano Torch</code></p> <p>\u5176\u4e2d\u4e3b\u6d41\u662f<code>TensorFlow  Torch</code>, \u5b83\u4eec\u5e2e\u52a9\u6211\u4eec\u80fd\u591f\u63d0\u5347\u6548\u7387</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#machine-learning-strategy","title":"Machine Learning Strategy","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_27","title":"\u5355\u4e00\u6570\u5b57\u8bc4\u4f30\u6307\u6807&amp;\u6ee1\u8db3\u3001\u4f18\u5316\u6307\u6807","text":"<p>\u4e00\u822c\u6765\u8bf4\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u578b\uff08binary classification\uff09\u6709\u4e24\u4e2a\u53c2\u6570\u8861\u91cf\u5b83\u7684\u6027\u80fd\uff1a\u4e00\u4e2a\u662fPrecision\uff08\u67e5\u51c6\u7387\uff09\u4e00\u4e2a\u662fRecall\uff08\u67e5\u5168\u7387\uff09\uff0c\u63a5\u4e0b\u6765\u4ecb\u7ecd\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff1a</p> <ul> <li>\u67e5\u51c6\u7387\uff1a\u5047\u5982\u8bf4\u8bad\u7ec3\u4e86\u4e00\u4e2a\u8fa8\u522b\u51fa\u732b\u7684\u6a21\u578b\uff0c\u90a3\u4e48\u67e5\u51c6\u7387\u4ee3\u8868\u7684\u662f\uff1a\u5982\u679c\u6a21\u578b\u6307\u51fa\u6765\u8fd9\u5f20\u56fe\u7247\u662f\u732b\uff0c\u90a3\u4e48\u8fd9\u5f20\u56fe\u7247\u771f\u7684\u662f\u732b\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f</li> <li>\u67e5\u5168\u7387\uff1a\u5047\u5982\u8bf4\u6a21\u578b\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8dd1\uff0c\u6240\u6709\u7684\u732b\u56fe\u7247\u6a21\u578b\u80fd\u67e5\u51fa\u591a\u5c11\u5f20\u6a21\u578b\u8ba4\u4e3a\u662f\u732b\u7684\u56fe\u7247\uff1f</li> </ul> <p>\u90a3\u4e48\u8fd9\u4e24\u4e2a\u6570\u636e\u6211\u4eec\u7528\u8c03\u548c\u5e73\u5747\uff08Harmonic Mean\uff09\u6570\u6765\u4f5c\u4e3a\u6307\u6807\uff08default\uff09</p> <p>\u8fd9\u5f53\u7136\u53ea\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4f46\u662f\u8fd9\u79cd\u601d\u60f3\u662f\u5341\u5206\u91cd\u8981\u7684</p> <p>\u5f53\u7136\u5b9e\u6218\u4e2d\u6709\u7684\u65f6\u5019\u4e00\u4e2a\u6570\u636e\u6982\u62ec\u6240\u6709\u53ef\u80fd\u4e0d\u663e\u793a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u5206\u7c7b\uff1a\u4ec0\u4e48\u662f\u4f18\u5316\u6307\u6807\uff0c\u6307\u7684\u662f\u6211\u5e0c\u671b\u5c3d\u53ef\u80fd\u597d\u7684\u6307\u6807\uff1b\u4ec0\u4e48\u662f\u6ee1\u8db3\u6307\u6807\uff0c\u53ea\u8981\u8fbe\u5230\u4e86\u95e8\u69db\uff08threshold\uff09\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#traindevtest-distribitions","title":"\u8bbe\u7acbTrain/Dev/Test distribitions","text":"<p>\u5728train and dev dataset\u4e0a\u9762\u8bad\u7ec3\u5c31\u597d\u50cf\u662f\u5bf9\u7740\u4e00\u4e2a\u9776\u5fc3\u4e0d\u65ad\u5f00\u67aa\uff0c\u4f46\u662f\u5982\u679c\u6700\u540e\u6d4b\u8bd5\u7684\u65f6\u5019\u6211\u628a\u9776\u5fc3\u5df2\u5230\u4e86\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\uff0c\u8fd9\u53ef\u80fd\u5c31\u4f1a\u917f\u6210\u60b2\u5267\u3002\u56e0\u6b64\uff0c\u6700\u597d\u5728\u4e00\u4e2a\u6570\u636e\u6c60\u5b50\u91cc\u9762\u968f\u673a\u5206\u6210\u4e09\u7ec4\uff0c\u5206\u522b\u505atrain dev and test dataset, \u8fd9\u6837\u7684\u8bdd\u5c31\u4fdd\u8bc1\u4e86\u5206\u5e03\u6765\u6e90\u76f8\u540c\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u6709\u201c\u9776\u5b50\u4e34\u65f6\u6362\u4f4d\u7f6e\u201d\u7684\u60b2\u5267</p> <p>\u5f53\u7136\uff0c\u81f3\u5c11\u8981\u4fdd\u8bc1\u7684\u662fdev and test set comes from the same distribution</p> <ul> <li>Guideline: Choose a dev set and test set to reflect data you expect to get in the future and consider important to do well on.</li> </ul> <p>\u90a3\u4e48dev and test set size\u6700\u597d\u662f\u591a\u5c11\u5462\uff1f</p> <ul> <li>Size of test set: Set your test set to be big enough to give high confidence in the overall performance of your system</li> </ul> <p>\u53e6\u5916\uff0c\u6709\u7684\u65f6\u5019dev and test set \u4f1a\u5408\u5e76\uff0c\u4f46\u662f\u66f4\u5b89\u5fc3\u7684\u8fd8\u662f\u6709\u4e00\u4e2atest set\uff1b\u73b0\u5728\u6d41\u884c\u7684\u662f\u628a\u5927\u91cf\u7684\u6570\u636e\u7559\u7ed9training set</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#dev-and-test-set-examples","title":"\u4fee\u6539\u4e0d\u6b63\u786e\u7684dev and test set examples","text":"<ul> <li>Apply same process to your dev and test sets to make sure they continue to come from the same contribution</li> <li>Consider examining examples your algorithm got right as well as ones it got wrong</li> <li>Train and dev/test data may now come from slightly different distributions</li> </ul>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#guideline-and-skills","title":"\u5176\u4ed6Guideline and Skills","text":"<ol> <li> <p>\u5c3d\u5feb\u5efa\u7acb\u7b2c\u4e00\u4e2a\u6a21\u578b\uff0c\u7136\u540e\u8fed\u4ee3</p> </li> <li> <p>\u6709\u7684\u65f6\u5019\u53ef\u4ee5\u7ed9\u7279\u5b9a\u7c7b\u578b\u7684\u201c\u60e9\u7f5a\u201d\u52a0\u6743\u91cd</p> </li> </ol>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#convolutional-neural-network","title":"Convolutional Neural Network\u2014\u2014\u8ba1\u7b97\u673a\u89c6\u89c9","text":"<p>\u524d\u8a00\uff1a\u4e00\u5f20\u56fe\u7247\u6709\u591a\u5927\uff1f\u5047\u5982\u8bf4\u4e00\u5f20\u7167\u724710001000\uff0c\u90a3\u4e48\u5047\u5982\u8bf4\u6309\u7167\u4e4b\u524d\u7684\u65b9\u6cd5\u53d6\u63d0\u53d6\u7279\u5f81\u503c\uff0c\u90a3\u4e48\u8f93\u5165\u7684\u7279\u5f81\u503c\u7684\u6570\u91cf\u5c31\u67093000000\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e48\u5e9e\u5927\u7684\u8f93\u5165\u503c\uff0c\u4f1a\u5bfc\u81f4w b\u77e9\u9635\u90fd\u5de8\u5927\u65e0\u6bd4\uff0c\u8fd9\u662f\u96be\u4ee5\u63a5\u53d7\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8981\u5c1d\u8bd5\u63d0\u53d6\u7279\u5f81\u503c\u51fa\u6765*</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#edge-detection","title":"\u8fb9\u7f18\u68c0\u6d4b\u2014\u2014Edge Detection","text":"<p>\u9996\u5148\u5148\u4ecb\u7ecd\u5377\u79efconvolution\u7684\u6982\u5ff5\uff1a\u56fe\u4e2d\u4e2d\u95f4\u76843*3\u77e9\u9635\u662f\u8fc7\u6ee4\u5668\uff08filter / kernel\uff09\u5de6\u56fe\u662f\u88ab\u5904\u7406\u7684\u56fe\u50cf\uff08\u7531\u4e8e\u662f\u7070\u5ea6\u56fe\uff0c\u6240\u4ee5\u662f6\u00d76\u00d71\uff09\u7136\u540e\u8fc7\u6ee4\u5668\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u8986\u76d6\u4e00\u7247\u533a\u57df\uff0c\u7136\u540e\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\u4e4b\u540e\u518d\u76f8\u52a0\uff0c\u5f97\u51fa\u4e00\u4e2a\u503c\uff0c\u4ee5\u6b64\u7c7b\u63a8</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u4e2afilter\u80fd\u591f\u68c0\u6d4b\u51fa\u8fb9\u7f18\u5462\uff1f </p> <p></p> <p>\u5de6\u8fb9\u8fd9\u4e2a\u56fe\u4e2d\u95f4\u6709\u4e00\u6761\u7070\u8272\u548c\u767d\u8272\u7684\u4ea4\u754c\u5904\uff0c\u5bf9\u8fd9\u4e2a\u56fe\u7528\u4e2d\u95f4\u7684\u8fd9\u4e2afilter\u8fdb\u884c\u5377\u79ef\uff0c\u5f97\u5230\u4e86\u53f3\u8fb9\u8fd9\u4e2a\u56fe\uff0c\u60ca\u559c\u5730\u53d1\u73b0\u539f\u672c\u5de6\u53f3\u5206\u522b\u4e3a\u767d\u7070\uff0c\u90fd\u53d8\u6210\u4e86\u7070\uff1b\u800c\u4e2d\u95f4\u5730\u5730\u65b9\u53d8\u6210\u4e86\u767d\u8272\uff01\u8bf4\u660e\u4e2d\u95f4\u8fd9\u6761\u5206\u754c\u7ebf\u7684\u7279\u5f81\u88ab\u653e\u5927\uff01</p> <p>\u6ce8\uff1a\u56fe\u4e2d\u7684\u6f14\u793a\uff1a\u9ed1\u8272\u662f\u8d1f\u6570\uff0c\u7070\u662f0\uff0c\u767d\u8272\u662f\u6b63\u6570</p> <p></p> <p>\u540c\u65f6\u6ce8\u610f\u5230\uff0c\u5982\u679c\u4ece\u5de6\u5230\u53f3\u662f\u7070\u8272\u53d8\u6210\u767d\u8272\u7684\u8bdd\uff0c\u4e4b\u540e\u7684\u7ed3\u679c\u4e2d\u95f4\u5c31\u662f\u9ed1\u8272\u7684\u3002\u8fd9\u662f\u6211\u4eec\u60f3\u8981\u89c1\u5230\u7684\u7ed3\u679c\uff01\u4e0d\u7136\u7684\u8bdd\u600e\u4e48\u77e5\u9053\u8fd9\u4e2a\u8fb9\u754c\u4ece\u5de6\u5230\u53f3\u662f\u4ece\u7070\u5230\u767d\u8fd8\u662f\u4ece\u767d\u5230\u7070\uff01</p> <p>\u5f53\u7136\u4e0a\u9762\u7684\u90fd\u662f\u68c0\u6d4b\u7ad6\u76f4\u65b9\u5411\u5782\u76f4\u7684\u8fc7\u6ee4\u5668\uff0c\u6c34\u5e73\u7684\u4e5f\u5f88\u597d\u731c\u5230\uff1a</p> <p></p> <p>\u5728\u56fe\u4e2d\uff0c\u4e3a\u4e86\u68c0\u6d4b\u5230\u6c34\u5e73\u8fb9\u7f18\uff0c\u7528\u4e86\u53f3\u8fb9\u7684filter\u8fdb\u884c\u5377\u79ef\u3002\u7136\u540e\u7ed3\u679c\u4e2d\u5c31\u80fd\u77e5\u9053\u54ea\u91cc\u6709\u8fb9\u7f18\u4e86\uff0c\u800c\u4e14\u6b63\u8d1f\u503c\u4ee3\u8868\u4e86\u4ece\u4e0a\u5230\u4e0b\u662f\u767d\u5230\u7070\u8fd8\u662f\u7070\u5230\u767d</p> <p>\u8fd9\u91cc\u9762\u5de6\u53f3\u4e24\u4fa7\u768430\u770b\u8d77\u6765\u975e\u5e38\u7a81\u5140\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\uff0c\u771f\u5b9e\u7684\u56fe\u7247\u5f88\u5927\uff0c\u57283\u00d73\u7684\u533a\u57df\u4e2d\u5176\u5b9e\u6570\u503c\u53d8\u5316\u975e\u5e38\u5e73\u6ed1\uff08\u9664\u4e86\u8fb9\u7f18\uff09</p> <p>\u5f53\u7136filter\u4e0d\u6b62\u4e0a\u9762\u7684\u4e00\u79cd\uff1a\u5982sobel filter ; scharr filter </p> <p></p> <p>\u6709\u4e86\u8fd9\u79cd\u8fc7\u6ee4\u5668\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u6d4b\u4efb\u4f55\u7279\u5f81\u8fb9\u7f18\uff0c\u5f53\u7136\u201c\u4efb\u4f55\u201d\u8fd9\u4e2a\u4fee\u9970\u662f\u6709\u8d56\u4e8e\u8fc7\u6ee4\u5668\u5927\u5c0f\u548c\u53c2\u6570\u8bbe\u7f6e\u7684\u3002\u5176\u4e2d\u627e\u5230\u6b63\u786e\u7684\u8fc7\u6ee4\u5668\u53c2\u6570\u662f\u4e00\u4e2a\u975e\u5e38\u8270\u96be\u7684\u95ee\u9898\u3002</p> <p>\u5f53\u7136\uff0c\u4eba\u5de5\u81ea\u5df1\u627e\u5230\u5408\u9002\u7684\u8fc7\u6ee4\u5668\u5b9e\u5728\u662f\u592a\u9ebb\u70e6\u3002\u6df1\u5ea6\u5b66\u4e60\u544a\u8bc9\u6211\u4eec\uff0c\u53ef\u4ee5\u5c06\u4e5d\u4e2a\u6570\u5168\u90e8\u89c6\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u5b66\u4e60\u51fa\u6765\u3002\u63a5\u4e0b\u6765\u5c06\u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u628a\u8fd9\u4e9b\u53c2\u6570\u7b97\u51fa\u6765\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#padding","title":"Padding\uff08\u586b\u5145\uff09","text":"<p>\u9996\u5148\u6211\u4eec\u80fd\u591f\u76f4\u89c2\u611f\u53d7\u5230\u5377\u79ef\u7684\u7f3a\u70b9\uff1a1. \u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e4b\u540e\u56fe\u7247\u53d8\u5c0f\u4e86\uff1b 2\uff0c \u4f1a\u628a\u8fb9\u7f18\u4fe1\u606f\u629b\u5f03\u6389</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u91c7\u7528padding\u586b\u5145\u7b56\u7565\uff0c\u5728\u56fe\u7247\u6700\u5916\u5c42\u8865\u4e0a\u4e00\u5c42\u50cf\u7d20\uff0c\u8fd9\u6837\u7684\u8bdd\u4e4b\u540e\u7684\u7167\u7247\u8fd8\u662f6\u00d76\uff0c\u5e76\u4e14\u8fb9\u7f18\u7684\u70b9\u7684\u4fe1\u606f\u88ab\u5229\u7528\u7684\u6b21\u6570\u63d0\u5347\u4e86\uff1b\u6211\u4eec\u5b9a\u4e49p = padding = 1, \u4ee3\u8868\u6700\u5916\u9762\u586b\u5145\u4e861\u5c42</p> <p></p> <p>\u5728\u662f\u5426\u586b\u5145\u8fd9\u65b9\u9762\u5206\u4e3a\u4e86\u4e24\u79cd\u7b56\u7565\uff1a Valid and Same convolutions strategy</p> <p>valid: \u76f4\u63a5\u4e0d\u8981\u586b\u5145\uff0c\u5c31\u6309\u7167\u56fe\u4e2d\u7684\u516c\u5f0f\uff0c\u5377\u79ef\u4e4b\u540e\u7684\u56fe\u7247\u7070\u7f29\u5c0f</p> <p>same: \u6211\u5f88\u5e0c\u671b\u586b\u5145\u4e4b\u540e\u7684\u56fe\u7247\u5728\u5377\u79ef\u4e4b\u540e\u80fd\u591f\u548c\u539f\u6765\u7684\u7167\u7247\u4fdd\u6301\u4e00\u6837\u7684\u5927\u5c0f\uff01\u56e0\u6b64\u6211\u53ef\u4ee5\u6309\u7167\u56fe\u7247\u4e2d\u7684\u516c\u5f0f\u6765\u9009\u62e9\u586b\u5145\u7684\u5c42\u6570\u3002\u5f53\u7136\uff0c\u4e3a\u4e86p\u6709\u6574\u6570\u89e3\uff0cCV\u4f20\u7edf\u662f\u9009\u62e9\u5947\u6570\u5c42\u7684\u586b\u5145\u50cf\u7d20\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#strided-convolution","title":"strided convolution(\u5377\u79ef\u6b65\u957f)","text":"<p>\u5f53\u7136\uff0cfilter\u7684\u79fb\u52a8\u4e5f\u53ef\u4ee5\u91c7\u53d6\u4e0d\u4e00\u6837\u7684\u6b65\u957f\uff08stride\uff09</p> <p></p> <p>\u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6b65\u957f\u662f2\uff0c\u56e0\u6b64\u5377\u79ef\u540e\u7684\u56fe\u7247\u4e0d\u662f5\u00d75\u3002\u6ce8\u610f\u5230\u516c\u5f0f\u4e2d\u7684\u5411\u4e0b\u53d6\u6574\uff0c\u4e8b\u5b9e\u4e0a\u5982\u679cfilter\u4e0d\u662f\u5b8c\u5168\u5728\u539f\u56fe\u7247\u4e2d\u7684\u8bdd\uff0c\u8fd9\u4e00\u6b21\u5377\u79ef\u8ba1\u7b97\u5c31\u4e0d\u8981\u8fdb\u884c\uff0c\u8fd9\u662fconvention\u3002</p> <p>\u6ce8\uff1a\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u5377\u79ef\u7684\u5b9a\u4e49\u548c\u6570\u5b66\u4e2d\u7684\u4e0d\u4e00\u6837\u3002\u5982\u679c\u662f\u6309\u7167\u6570\u5b66\u4e2d\u7684\u5b9a\u4e49\u7684\u8bdd\uff0cfilter\u8981\u5148\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u53cd\u8f6c\u4e4b\u540e\u624d\u80fd\u7528\u5728\u539f\u56fe\u7247\uff01\u4f46\u662f\u8fd9\u91cc\u662fCV\uff0c\u4f20\u7edf\u5c31\u662ffilter\u76f4\u63a5\u7528\u4e0a\u53bb</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_28","title":"\u4e09\u7ef4\u5377\u79ef","text":"<p>\u53ef\u80fd\u4f1a\u95ee\uff1a\u56fe\u7247\u4e0d\u662f\u4e8c\u7ef4\u7684\u5417\uff0c\u548c\u4e09\u7ef4\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u4f46\u662f\u4e4b\u524d\u7684\u56fe\u7247\u90fd\u662f\u7070\u767d\u7684\uff0c\u800c\u5b9e\u6218\u4e2d\u7167\u7247\u662f\u4e09\u7ef4\u7684\uff0c\u56e0\u4e3aRGB CHANNEL\u4e5f\u8981\u8003\u8651\u8fdb\u6765\uff0c\u6240\u4ee5\u662f\u4e09\u7ef4\u7684\u3002</p> <p></p> <p>\u4e0a\u9762\u8fd9\u4e2a\u6848\u4f8b\u5f88\u597d\u7684\u5c55\u793a\u4e86\u4e09\u4f4dfilter\u7a76\u7adf\u662f\u600e\u4e48\u64cd\u4f5c\u7684\u3002\u6ce8\u610f\uff0cfilter\u4e00\u5b9a\uff1f\u00d7\uff1f\u00d73\uff0c\u56e0\u4e3a\u8981\u6db5\u76d6\u4e09\u4e2a\u901a\u9053</p> <p>\u5f53\u7136\uff0c\u5982\u679c\u6211\u53ea\u60f3\u68c0\u6d4b\u7ea2\u8272\u901a\u9053\u7684\u8fb9\u7f18\uff0c\u90a3\u4e48\u4e24\u5c42\u662f0\uff0c\u7ea2\u8272\u90a3\u4e00\u5c42\u662f\u68c0\u6d4b\u8fb9\u7f18\u7684filter\u5c31\u53ef\u4ee5\u4e86</p> <p></p> <p>\u90a3\u4e48\u5982\u679c\u6211\u60f3\u540c\u65f6\u68c0\u6d4b\u591a\u79cd\u8fb9\u7f18\u7279\u5f81\u5462\uff1f\u90a3\u4e48\u5c31\u8981\u7528\u591a\u4e2afilter\u4e86\u3002\u90a3\u4e48\u8fd9\u6837\u4e0d\u4f1a\u5f97\u5230\u5f88\u591a\u7ed3\u679c\u5417\uff1f\u6ca1\u9519\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u7ed3\u679c\u5806\u53e0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u6b64\u5c31\u6709\u4e86\u56fe\u4e2d\u7684\u516c\u5f0f\uff0c\u4ee3\u8868\u4e00\u6b21\u64cd\u4f5c\u65f6\u5019\u7684\u201c\u77e9\u9635\u201d\u7684\u7ef4\u5ea6\u3002\u6ce8\u610f\uff1a\u6211\u4eec\u5e38\u5e38\u7528channel\u6765\u4ee3\u6307\u7b2c\u4e09\u4e2a\u7ef4\u6570\uff0c\u800c\u6709\u7684\u5730\u65b9\u4e5f\u4f1a\u4f7f\u7528depth\u4f46\u8fd9\u5e76\u4e0d\u662f\u5f88\u597d\u7684notational convention</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_29","title":"\u5355\u5c42\u5377\u79ef\u7f51\u7edc","text":"<p>\u5b66\u4e86\u5377\u79ef\u53ef\u80fd\u4f1a\u60f3\uff1a\u8fd9\u73a9\u610f\u513f\u548c\u795e\u7ecf\u7f51\u7edc\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f w b activation function\u5462\uff1f \u89c1\u4e0b\u56fe\uff1a</p> <p></p> <p>filter\u76f8\u5f53\u4e8ew\uff0c\u4eba\u4e3a\u52a0\u4e0a\u7684bias\u76f8\u5f53\u4e8eb, \u5bf9\u5904\u7406\u5b8c\u540e\u7684\u56fe\u7247\uff08\u7c7b\u4f3c\u4e8ez\uff09\u7528\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u5904\u7406\uff08\u4e0a\u56fe\u4e2d\u4f8b\u5b50\u4e3aReLU\uff09\uff0c\u6700\u540e\u5f97\u5230\u4e86\u4e00\u4e2a\u56fe\u7247\uff08\u76f8\u5f53\u4e8ea(i)[l]\uff09\uff0c\u6700\u540e\u5806\u53e0\u8d77\u6765\uff08\u76f8\u5f53\u4e8ea[l]\uff09\uff0c\u4e00\u5207\u90fd\u4e32\u8054\u8d77\u6765\u4e86\uff01</p> <p></p> <p>\u63a5\u4e0b\u6765\u603b\u7ed3\u4e00\u4e0b\u5404\u4e2a\u53c2\u6570\u7684\u7ef4\u5ea6\u548cnotational convention:</p> <p>\u8f93\u5165\u8f93\u51fa\u90fd\u5f88\u597d\u7406\u89e3\uff0cnH/W[l]\u53c2\u6570\u4e5f\u5f88\u5bb9\u6613\u8ba4\u540c\uff0c\u8fd9\u4e2a\u8ba1\u7b97\u4e4b\u524d\u662f\u8bb2\u8fc7\u7684(Height Width)</p> <p>\u6bcf\u4e00\u5c42\u7684filter\u53c2\u6570\uff0csize\uff082d\uff09\u00d7 filter\u6570\u91cf\uff0cget it </p> <p>a[l]\uff0c\u8fd9\u662f\u8981\u7528\u5728[l+1]\u5c42\u7684\uff0c\u56fe\u4e2d\u7684\u5f0f\u5b50\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0csize\u548coutput\u4e00\u6837\u662f\u56e0\u4e3a\u6bd5\u7adf\u662f\u4ecez\u5904\u7406\u8fc7\u6765\u7684</p> <p>\u6743\u91cd\u77e9\u9635\uff1asize\u662f\u56e0\u4e3afilter size\uff0c \u540e\u9762\u4e24\u4e2a\u53c2\u6570\u662f\u56e0\u4e3achannel \u6570\u91cf\u8981\u8fdb\u884c\u8f6c\u5316\uff0cnc[l-1]\u4ee3\u8868\u7684\u662f\u4e0a\u4e00\u5c42\u7684channels\u6570\u91cf\uff0c\u4e4b\u540e\u7684\u6570\u91cf\u662fnc[l]\uff0cWeights\u77e9\u9635\u53c2\u6570\u548cfilter\u6570\u91cf\uff08channels\u6570\u91cf\uff09\u6302\u94a9\uff01</p> <p>\u6700\u540ebias\u524d\u4e24\u4e2a\u90fd\u662f1\u662f\u56e0\u4e3aPython\u7684Broadcasting\u673a\u5236\uff0c\u7b2c\u4e09\u4e2a1\u662f\u56e0\u4e3afilter\u5904\u7406\u4e4b\u540e\u7684channels\u53c2\u6570\u662f1\uff0c\u800cnc[l]\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\u56e0\u4e3a\u6709number of filters\u4e2az\u9700\u8981\u52a0\u4e0abias</p> <p>\u8fd9\u5c31\u662f\u5355\u5c42\u5377\u79ef\u7f51\u7edc\uff01\uff01 \u6ce8\u610f\uff1afilter\u7b2c\u4e09\u7ef4\u4e00\u5b9a\u548c\u56fe\u7247\u7684channels\u6570\u91cf\u76f8\u7b49\uff01</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#convolutional-neural-network_1","title":"\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08Convolutional Neural Network\uff09","text":"<p>\u9996\u5148\u5bf9\u56fe\u7247\u4e0d\u65ad\u8fdb\u884c\u5377\u79ef\uff0c\u64cd\u4f5c\u6d41\u7a0b\u548c\u4e4b\u524d\u4ecb\u7ecd\u7684\u4e00\u5c42\u76f8\u4f3c\uff1b\u7136\u540e\u6700\u540e\u5f97\u5230\u4e86\u8f83\u4e3a\u6ee1\u610f\u7684\u7279\u5f81\u63d0\u53d6\u4e4b\u540e\uff0c\u5c55\u5e73\u7136\u540e\u4f5c\u4e3a\u7279\u5f81\u5411\u91cf\u8fdb\u884c\u8f93\u5165\uff0c\u63a5\u4e0b\u6765\u7684\u5c31\u662f\u4e4b\u524d\u6240\u5b66\u4e60\u7684\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e86\u3002\u8fd9\u5c31\u662fConvNet\u7684\u5927\u81f4\u601d\u8def\u3002\u6ce8\u610f\u5230\u56fe\u7247\u77e9\u9635\u7684Height and Weight\u9010\u6e10\u4e0b\u964d\uff0c\u800cchannels\u6570\u91cf\u9010\u6e10\u4e0a\u5347\uff0c\u8fd9\u662fConvNet\u4e2d\u7684\u5e38\u89c1\u73b0\u8c61</p> <p>\u5f53\u7136\uff0c\u8fd9\u91cc\u7684\u5377\u79ef\u7f51\u7edc\u4e2d\u53ea\u6709\u4e00\u79cd\u5c42\uff0c\u53eb\u505aConvolution Layer(CONV), \u4e8b\u5b9e\u4e0a\u8fd8\u6709\u53e6\u5916\u4e24\u79cdLayers:</p> <p>Pooling(POOL) and Fully connected(FC), \u5728\u5b9e\u6218\u4e2d\u4e00\u822c\u4e09\u79cd\u5c42\u90fd\u4f1a\u7528\u4e0a\u3002\u8fd9\u4e9b\u9a6c\u4e0a\u4f1a\u5b66\u4e60</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#pooling-layers","title":"\u6c60\u5316\u5c42 \uff08Pooling Layers\uff09","text":"<p>\u5148\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a\u5047\u8bbe\u6211\u91c7\u53d6\u7684\u6c60\u5316\u7b56\u7565\u662fmax pooling, \u90a3\u4e48\u7528\u53e6\u5916\u4e00\u79cdfilter 2*2, stride = 2, \u6765\u626b\u8fc7\u8fd9\u5757\u533a\u57df\uff0cfilter\u4f1a\u7b5b\u9009\u51fa\u8fd9\u7247\u533a\u57df\u4e2d\u6700\u5927\u7684\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\uff1f\u5982\u679c\u76f4\u63a5\u70b9\u8bf4\uff0c\u5c31\u662f\u5b9e\u9a8c\u4e2d\u8fd9\u79cd\u65b9\u6cd5\u5f88\u594f\u6548\uff1b\u4f46\u662f\u5982\u679c\u786c\u8981\u611f\u6027\u89e3\u91ca\uff0c\u90a3\u4e48\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u4e00\u7247\u533a\u57df\u5982\u679c\u6709\u7279\u5f81\uff0c\u90a3\u4e48\u4fdd\u7559\u6700\u5927\u503c\uff0c\u4ee3\u8868\u8fd9\u4e00\u7247\u6709\u8fd9\u4e2a\u7279\u5f81\uff0c\u800c\u6ca1\u6709\u7684\u533a\u57df\u4fdd\u7559\u7684\u6700\u5927\u503c\u4f9d\u7136\u5f88\u5c0f\uff0c\u4ee3\u8868\u8fd9\u4e00\u7247\u6ca1\u6709\u8fd9\u79cd\u7279\u5f81\u3002</p> <p>\u8fd9\u79cd\u6c60\u5316\u7b56\u7565\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\u9700\u8981\u5b66\u4e60\uff0c\u76f4\u63a5\u5c31\u662f\u8bbe\u5b9a\u597dfilter size and stride\uff1b \u4e0b\u56fe\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <p></p> <p>\u90a3\u4e48\u8fd8\u6709\u4e00\u79cd\u5f88\u4e0d\u5e38\u7528\u7684\u6c60\u5316\u7b56\u7565\uff1a\u5e73\u5747\u6c60\u5316\uff08Average Pooling\uff09</p> <p>\u4e00\u822c\u6765\u8bf4\uff0cf = 2, s = 2, \u8868\u793a\u957f\u5bbd\u53d6\u4e00\u534a\uff1b\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7528padding\uff08\u6709\u53cd\u4f8b\uff09</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_30","title":"\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc","text":"<p>\u4e3e\u4e2a\u4f8b\u5b50\uff08Inspired by LeNet-5\uff09</p> <p></p> <p>\u9996\u5148\u662fCONV layer, \u5176\u4e2dfilter\u6570\u91cf\u4e3a6\uff1b\u7136\u540e\u6765\u4e00\u5c42POOL\uff0c\u957f\u5bbd\u51cf\u534a</p> <p>\u6ce8\u610f\uff1a\u8fd9\u91cc\u628aCONV+POOL\u79f0\u4e3aLayer1\uff0c\u56e0\u4e3a\u4e0d\u8ba4\u4e3aPOOL\u9700\u8981\u5b66\u4e60\u53c2\u6570\uff1b\u4f46\u662f\u6709\u4e9b\u6587\u732e\u4e2d\u559c\u6b22CONV\u548cPOOl\u90fd\u8ba4\u4e3a\u662f\u4e00\u5c42\u3002\u8fd9\u91cc\u8fd8\u662f\u91c7\u53d6\u524d\u8005</p> <p>\u7136\u540e\u518d16\u5c42filter\uff0c\u52a0\u4e0aPOOL\uff0c\u6700\u540e\u5f97\u5230\u4e865\u00d75\u00d716\u7684\u77e9\u9635\uff0cflatten\u540e\u5f97\u5230400\u5355\u4f4d\u7684\u7279\u5f81\uff0c\u4e4b\u540e\u5c31\u662fFC3\uff08\u524d\u9762\u5df2\u7ecf\u6709\u4e24\u5c42\uff09\u5c42\uff08\u7c7b\u4f3c\u4e8e\u9690\u85cf\u5c42\uff0cFC\u4e2d\u6bcf\u4e00\u4e2anode\u548c\u6240\u6709400\u7279\u5f81\u7ed3\u5408\uff09\uff0c\u4e4b\u540e\u662fFC4\uff0c\u6700\u540e\u752884\u4e2anodes\u53bb\u8fdb\u884csoftmax\u5f52\u7c7b\uff0c\u8f93\u51fa\u7ed3\u679c\u3002\u8fd9\u79cd\u6a21\u578b\u975e\u5e38\u7ecf\u5178\uff01</p> <p></p> <p>\u6709\u4e86CONV  POOL  FC\u4e09\u5f20\u724c\uff0c\u90a3\u4e48\u600e\u4e48\u6253\u5c31\u662f\u4e00\u4e2a\u9700\u8981\u63a2\u7d22\u7684\u95ee\u9898\u3002\u5982\u4f55\u6709\u6548\u5b89\u6392\u5377\u79ef\u5c42\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u4ece\u800c\u5f62\u6210\u9ad8\u6548\u7684\u6a21\u578b\u4e00\u76f4\u4ee5\u6765\u662fCV\u4e2d\u7684\u7814\u7a76\u70ed\u95e8</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_31","title":"\u4e3a\u4f55\u5377\u79ef\u5982\u6b64\u9ad8\u6548\uff1f","text":"<p>reason 1 :  \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5de6\u8fb9\u67093072\u4e2a\u53c2\u6570\uff0c\u53f3\u8fb9\u5f97\u5230\u7684\u7ed3\u679c\u67094704\u4e2a\u7ed3\u679c\uff0c\u5982\u679c\u7528\u6b63\u5e38\u5b66\u4e60\u65b9\u6cd5\u7684\u8bdd\uff0c\u5982\u679c\u6709\u4e00\u79cdmapping\uff0c\u90a3\u4e48\u53c2\u6570\u81f3\u5c113072\u00d74704\uff0c\u867d\u7136\u73b0\u5728\u8ba1\u7b97\u673a\u80fd\u5b66\u4e60\u51fa\u6765\uff0c\u4f46\u662f1000*1000\u7684\u7167\u7247\u7acb\u9a6c\u5e72\u788e\u8ba1\u7b97\u673a\u3002\u800c\u7528\u4e86\u5377\u79ef\u4e4b\u540e\uff0c\u53ea\u9700\u8981\uff085\u00d75\u00d73+1\uff09\u00d76 = 456\u4e2a\u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0mapping\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u91cc\u9762\u76841\u662fbias, \u6ca1\u9519\uff0c \u4e0d\u662f\u6bcf\u4e2az\u90fd\u914d\u81ea\u5df1\u7684b, \u800c\u662f\u50cf\u524d\u9762\u7684nn\u4e00\u6837\uff0cb\u53c2\u6570\u5e7f\u64ad\u5230\u6240\u6709w[l]a[l-1]</p> <p>reason 2 &amp; reason 3 \uff1a </p> <p></p> <p>reason2 :\u3000\u4e00\u4e2a\u7279\u5f81\u63d0\u53d6\u5668\u53ef\u4ee5\u7528\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u800c\u4e0d\u5fc5\u8981\u5728\u4e0d\u540c\u7684\u533a\u57df\u91cd\u65b0\u5b66\u4e60\u4e00\u8fb9 \uff08\u6570\u636e\u5171\u4eab\uff09 </p> <p>reason3 :  \u7ed3\u679c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u90fd\u53ea\u548c9\u4e2a\u8f93\u5165\u7684\u53c2\u6570\u76f8\u5173\u8054\uff0c\u8fd9\u6070\u662f\u6211\u4eec\u5e0c\u671b\u7684\uff1b\u6211\u4eec\u4e0d\u5e0c\u671b\u5728\u63d0\u53d6\u8fd9\u4e2a\u7279\u5f81\u7684\u8fc7\u7a0b\u4e2d\u53d7\u5230\u5176\u4ed6\u53c2\u6570\u503c\u7684\u5f71\u54cd \uff08\u7a00\u758f\u8fde\u63a5\uff09</p> <p>\u611f\u6027\u8ba4\u77e5\uff1a\u9664\u4e0a\u9762\u4e09\u4e2a\u539f\u56e0\u4e4b\u5916\uff1a 1. conv\u7279\u5f81\u4ec5\u4ec5\u4ee3\u8868\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u51cf\u5c11\u8fc7\u62df\u5408\u548c\u566a\u58f0</p> <ol> <li>conv\u53ef\u4ee5\u6355\u6349\u504f\u79fb\u7684\u7279\u5f81\uff08\u7279\u5f81\u5e73\u79fb\u4e86\u4e00\u70b9\uff0c\u5377\u79ef\u90fd\u80fd\u5f88\u5feb\u53d1\u73b0\uff01\uff09</li> </ol>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#case-studies","title":"Case Studies(\u5b9e\u4f8b\u63a2\u7a76)","text":""},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#classic-networkslenet-5-alexnet-vgg","title":"Classic networks\u2014\u2014LeNet-5 AlexNet VGG","text":"<p>LeNet-5 : \u5728\u90a3\u4e2a\u5e74\u4ee3\uff0c\u8fd9\u4e2a\u8fd0\u7528\u573a\u666f\u4e4b\u4e00\u662f\u8bc6\u522b\u624b\u5199\u6570\u5b57\uff0c\u56e0\u6b64\u8f93\u5165\u7684\u56fe\u7247\u662f\u7070\u767d\u7684\uff0c\u56fe\u7247\u5c3a\u5bf8\u5982\u56fe\uff1b\u4e4b\u540e\u901a\u8fc7\u4e24\u6b21CONV-POOL\u7684Layer\u5904\u7406\uff0c\u5f97\u5230400\u4e2a\u7279\u5f81\uff0c\u6700\u540e\u901a\u8fc7FC3 FC4\u548csoftmax\u8f93\u51fa\u7c7b\u522b\u6982\u7387\u3002\u5f53\u7136\u6709\u5f88\u591a\u7ec6\u8282\uff1a\u5f53\u65f6\u4eba\u4eec\u8fd8\u4e0d\u5e38\u7528ReLU\uff0c\u66f4\u591a\u7684\u662f\u2014\u2014\u6b64\u5904\u4e5f\u662f\u2014\u2014sigmoid and tanh\uff1b\u751a\u81f3\u8fd9\u91cc\u8fd8\u8fd0\u7528\u4e86nonlinear pooling, \u5f53\u7136\u8fd9\u4e2a\u73b0\u5728\u4e0d\u5e38\u7528\u3002\u8fd9\u4e2a\u6a21\u578b\u5927\u698260000\u4e2a\u53c2\u6570\u8981\u5b66\u4e60</p> <p></p> <p>AlexNet : \u8fd9\u4e2a\u7f51\u7edc\u6a21\u578b\u66f4\u5938\u5f20\u4e86\uff0c\u670960000000\u4e2a\u53c2\u6570\u9700\u8981\u5b66\u4e60\uff1b\u53e6\u5916\uff0c\u8fd9\u4e2a\u6a21\u578b\u6b63\u5f0f\u4f7f\u7528\u4e86ReLU\u51fd\u6570\uff0c\u5e76\u4e14\u5f00\u521b\u6027\u5730\u5728\u4e24\u4e2aGPU\u4e0a\u9762\u8dd1\u8fd9\u4e2a\u6a21\u578b\uff1b\u8fd9\u4e2a\u6a21\u578b\u8fd8\u7528\u4e86LRN\uff08Local Response Normalization\uff09\u4f46\u5f88\u5c11\u7528\u4e86</p> <p></p> <p>VGG-16 \uff1a\u8fd9\u91cc\u9762\u5148CONV\uff0c\u518dsame pooling\uff0c\u4e4b\u540e\u518dmax pooling, \u670916\u5c42\uff1b\u5c3a\u5bf8\u7684\u4e0b\u964d\u548c\u901a\u9053\u6570\u7684\u589e\u52a0\u5448\u4e00\u5b9a\u89c4\u5f8b\uff1b\u8fd9\u4e2a\u6a21\u578b\u66f4\u52a0\u5e9e\u5927\uff0c\u67091.38\u4ebf\u7684\u53c2\u6570\u9700\u8981\u5b66\u4e60\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#resnet","title":"ResNet","text":"<p>\u6b8b\u5dee\u7f51\u7edc\u4e2d\u7684\u4e3b\u89d2\u662f\u6b8b\u5dee\u5757\uff08Residual Block\uff09, \u539f\u672ca[l+2]\u53ea\u548ca[l+1]\u6709\u5173\uff08\u8fd9\u91cc\u4f7f\u7528\u7684\u662fReLU function\uff09\uff0ca[l]\u7684\u4fe1\u606f\u60f3\u8981\u4f20\u5230[l+2]\u5c42\u9700\u8981\u8d70\u201cmain path\u201d\uff1b \u4f46\u662f\u73b0\u5728\u63d0\u4f9b\u4e86\u201cshort cut\u201d / \"skip connection\", \u4f7f\u5f97a[l]\u7684\u4fe1\u606f\u80fd\u591f\u76f4\u63a5\u5230\u8fbea[l+2]\uff1b\u5177\u4f53\u64cd\u4f5c\u4e2d\uff0c\u5148\u662fa[l+1]\u7b97\u51fa\uff0c\u4f20\u9012\u7ed9[l+2]\u5f97\u5230a[l+2], \u5728a[l]\u76f4\u63a5\u52a0\u5165\uff0c\u4e00\u8d77ReLU</p> <p></p> <p>\u4e0a\u9762\u5c31\u662f\u4e00\u4e2a\u6b8b\u5dee\u7f51\u7edc\u7684\u4f8b\u5b50\uff1a\u5982\u679c\u6ca1\u6709\u84dd\u7ebf\uff0c\u90a3\u4e48\u5c31\u662f\u666e\u901a\u7684\u795e\u7ecf\u7f51\u7edc\uff08Plain Network\uff09\uff0c\u4f46\u662f\u5982\u679c\u6709\u4e86skip connection, \u90a3\u4e48\u2014\u2014\u4e3e\u4e2a\u4e0a\u56fe\u4e2d\u7684\u4f8b\u5b50\u2014\u2014\u8fd9\u4e2a\u7f51\u7edc\u5c31\u662f5\u4e2aresidual block\u6784\u6210\u7684residual network. \u8fd9\u5f88\u6709\u6548\u5730\u89e3\u51b3\u4e86\u7f51\u7edc\u5c42\u6570\u8fc7\u6df1\u800c\u5bfc\u81f4\u7684\u68af\u5ea6\u7206\u70b8\u548c\u68af\u5ea6\u6d88\u5931\uff0c\u5141\u8bb8\u6211\u4eec\u8bad\u7ec3\u5230\u5f88\u6df1\u7684\u5c42\u6570</p> <p>\u4e3a\u4ec0\u4e48residual network\u80fd\u591f\u5982\u6b64\u9ad8\u6548\u800c\u597d\u7528\uff1f </p> <p></p> <p>Let's assume one scenario: \u524d\u9762\u6709\u4e00\u4e2a\u7f51\u8def\uff0c\u5982\u679c\u6211\u6700\u540e\u52a0\u4e0a\u4e86\u4e00\u4e2aresidual block, \u90a3\u4e48\u901a\u8fc7\u5f0f\u5b50\u53ef\u4ee5\u77e5\u9053\uff1a\u5047\u5982\u8bf4\u6211\u8fd9\u4e00\u5c42\u5b66\u4e60\u7684\u5f88\u5dee\uff0cz[l+2] = 0\uff08\u6781\u7aef\u4f8b\u5b50\uff09\uff0c\u90a3\u4e48\u5982\u679c\u6ca1\u6709skip connection, \u90a3\u4e48\u8fd9\u4e00\u5c42\u7684\u5b66\u4e60\u5c31\u5f88\u574f\uff1b\u4f46\u662f\u5982\u679c\u6709skip connection, \u5728\u53d1\u751f\u8fd9\u79cd\u6781\u7aef\u4f8b\u5b50\u4e0b\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6052\u7b49\u5f0f\u6765\u4fdd\u7559\u4e0ba[l]\u8fd9\u4e2a\u73cd\u8d35\u7684\u6570\u636e\uff0c\u800c\u65f6\u95f4\u4e5f\u8bc1\u660e\u4e86\uff0c\u8ba1\u7b97\u673a\u5b66\u4e60\u5230\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6052\u7b49\u5f0f\uff08\u6781\u7aef\u60c5\u51b5\u4e0b\u65f6\uff09\u4e5f\u662f\u6bd4\u8f83\u5bb9\u6613\u5730\u3002\u56e0\u6b64\u6211\u4eec\u4fdd\u8bc1\u4e86\u52a0\u4e0a\u8fd9\u4e2aresidual block\u4e4b\u540e\u7f51\u7edc\u7684\u5b66\u4e60\u51c6\u786e\u5ea6\u4e0d\u4f1a\u53d7\u5f71\u54cd\uff0c\u751a\u81f3\u5b9e\u8df5\u8bc1\u660e\u5b66\u4e60\u6548\u7387\u8fd8\u53ef\u80fd\u9ad8\u4e00\u70b9\uff1b\u800c\u5982\u679c\u771f\u7684\u8fd9\u4e00\u4e2aresidual block\u8fd8\u5b66\u5230\u4e86\u989d\u5916\u7684\u65b0\u4e1c\u897f\uff0c\u90a3\u771f\u7684\u662f\u4e00\u9635\u610f\u60f3\u4e0d\u5230\u7684\u72c2\u559c\uff0c\u5c31\u4fdd\u7559\u4f4f\u4e86\u8fd9\u4e2a\u65b0\u5b66\u7684\u4e1c\u897f\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u77e9\u9635\u52a0\u6cd5\u8981\u4fdd\u8bc1\u7ef4\u5ea6\u76f8\u540c\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7f51\u7edc\u6a21\u578b\u4e2d\u6709\u5f88\u591a\"same\"\u5377\u79ef\uff0c\u4fdd\u8bc1\u4e86\u7ef4\u5ea6\u7684\u76f8\u540c\uff0c\u4f7f\u5f97\u76f8\u52a0\u80fd\u591f\u8fdb\u884c\uff1b\u5982\u679c\u7ef4\u5ea6\u4e0d\u76f8\u540c\u5462\uff1f \u524d\u9762\u4e58\u4ee5Ws\u77e9\u9635\uff0c\u5c06\u7ef4\u5ea6\u8fdb\u884c\u8f6c\u6362\uff0c\u800c\u8fd9\u4e2a\u77e9\u9635\u7684\u53c2\u6570\u6211\u4eec\u53ef\u4ee5\u8ba9\u7f51\u7edc\u53bb\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u81ea\u5df1\u8bbe\u5b9a\u7684\u4e00\u4e2afixed matrix, \u603b\u4e4b\u662f\u4fdd\u8bc1\u4e86\u7ef4\u5ea6\u7684\u76f8\u540c</p> <p></p> <p>\u90a3\u4e48\u4e0a\u9762\u5c31\u662fResNet-34\u7684\u793a\u610f\u56fe\uff0c\u6ce8\u610f\u5230\u5f88\u591asame CONV\u7528\u6765\u4fdd\u8bc1\u7ef4\u5ea6\u76f8\u540c\uff0c\u7136\u540e\u4e2d\u95f4\u4f1a\u6dfb\u52a0pooling\uff08/2\uff09\uff0c\u5927\u81f4\u662fconv-conv-...-pool-conv-...-conv-pool-...-FC(softmax)\uff0c \u8fd9\u548c\u4e4b\u524d\u7684\u7ecf\u5178\u4ea4\u9519\u6a21\u5f0f\u5f88\u4e0d\u4e00\u6837; \u90a3\u4e48\u8fd9\u6837\u7684\u7f51\u7edc\u5c31\u662fResNet, \u76f8\u6bd4\u4e8ePlain\u66f4\u597d\uff01</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#11","title":"1\u00d71\u5377\u79ef","text":"<p>\u554a\uff0c\u4f60\u8bf4\u4ec0\u4e48\uff1ffilter\u8fd8\u80fd\u662f1\u00d71\uff1f\u8fd9\u96be\u9053\u4e0d\u662f\u5f88\u641e\u7b11\u561b\uff1f\u6211\u4eec\u7528\u4e86filter\u662f\u4e3a\u4e86\u68c0\u6d4b\u7279\u5f81\uff0c1\u00d71\u80fd\u68c0\u6d4b\u4ec0\u4e48\u7279\u5f81\uff1f\u90a3\u4e48\u5377\u79ef\u64cd\u4f5c\u4e0d\u5c31\u662fscalar multiplication\u5417\uff1f</p> <p></p> <p>\u5f53\u7136\uff0cchannels\u4e3a1\u7684\u60c5\u51b5\u4e0b\u8fd9\u5f53\u7136\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff1b\u5728channels\u4e0d\u4e3a1\u7684\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u56fe\u4e2d\u7684\u6848\u4f8b\uff0c\u4e00\u4e2a1\u00d71\u00d732\u7684filter\u4f1a\u5f97\u5230\u4e00\u4e2a6\u00d76\u7684\u77e9\u9635\uff0c\u7136\u540e\u6709\u591a\u5c11\u79cd\u8fd9\u6837\u76841\u00d71\u5377\u79ef\u6838\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u7ed3\u679c\u7684channels\u5c31\u662f\u591a\u5c11\u3002\u8fd9\u4e2a1\u00d71\u5377\u79ef\u6838\u91cc\u9762\u53ef\u4ee5\u8bbe\u7f6e\u6743\u91cd\uff0c\u90a3\u4e48\u7528\u8fd9\u4e2a\u89c6\u89d2\u6765\u770b\uff0c\u8fd9\u79cd\u5377\u79ef\u6838\u5c31\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u795e\u7ecf\u5143node, \u63a5\u53d7\u4e00\u4e2a\u4e2a\u4f4d\u7f6e\u768432\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u6309\u7167\u6743\u91cd\u8ba1\u7b97\uff0c\u6700\u7ec8\u8f93\u51fa\u3002\u8fd9\u79cd\u6a21\u5f0f\u4e5f\u6210\u4e3anetwork to network\u3002</p> <p></p> <p>\u90a3\u4e48\u8fd9\u4e2a1\u00d71\u5377\u79ef\u6838\u7a76\u7adf\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u4e4b\u524d\u63d0\u5230\uff0cpooling\u53ef\u4ee5\u51cf\u5c0fsize\uff0c\u4f46\u662fchannels\u4e0d\u53d7\u5f71\u54cd\uff1b\u4f46\u662f\u5982\u679c\u6211\u60f3\u51cf\u5c11channels\u6570\u91cf\u5462\uff1f\u90a3\u4e481\u00d71\u5c31\u662f\u4e00\u79cd\u624b\u6bb5\u4e86\uff0c\u8fd9\u6837\u53ef\u4ee5\u5e2e\u52a9\u51cf\u5c11\u8ba1\u7b97\u3002\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u60f3\u6539\u53d8channels\uff0c\u90a3\u4e48\u8fd9\u79cd1\u00d71\u5377\u79ef\u6838\u5c31\u53ef\u4ee5\u89c6\u505a\u4e00\u4e2a\u6b63\u5e38\u7684\u3001\u7528\u6765\u62df\u5408\u6700\u7ec8\u51fd\u6570\u7684\u51fd\u6570\u3002\u518d\u8bf4\uff0c\u5982\u679c\u6211\u60f3\u8981\u589e\u52a0channels\u6570\u91cf\uff0c\u90a3\u4e481\u00d71\u5377\u79ef\u6838\u4f9d\u65e7\u53ef\u4ee5\u505a\u5230\uff0c\u53ea\u8981\u9009\u53d6\u81ea\u5df1\u5fc3\u4eea\u7684filter\u6570\u91cf\u5373\u53ef\u3002By the way, 1\u00d71\u5377\u79ef\u6838\u624b\u6cd5\u5728Inception\u7f51\u7edc\u4e2d\u6709\u5173\u952e\u4f5c\u7528\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#inception-network","title":"Inception Network","text":"<p>\u5728\u5377\u79ef\u7f51\u7edc\u4e2d\uff0c\u6709\u7684\u65f6\u5019\u4e0d\u77e5\u9053\u9009\u4ec0\u4e48filter\u597d\uff1f\u90a3\u4e48\u4e0d\u5982\u8ba9\u795e\u7ecf\u7f51\u7edc\u6765\u51b3\u5b9a\uff01</p> <p></p> <p>\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u4e09\u79cdfilter\u548c\u4e00\u79cdmax pooling\u90fd\u7528\u4e0a\u4e86\uff1b\u540c\u65f6\u5f53\u7136\u8981\u6ce8\u610f\u7ef4\u5ea6\uff0c\u56e0\u6b64CONV\u7c7b\u578b\u662fsame\uff1b\u7136\u540e\u63d0\u53d6\u5230\u7684\u7279\u5f81\u90fd\u5806\u53e0\u8d77\u6765\uff0c\u5e76\u4e14\u6309\u7167\u4e00\u5b9a\u6bd4\u4f8b\u5206\u914dchannels\u3002\u6700\u7ec8\u8ba9\u8ba1\u7b97\u673a\u7b97\u51fa\u90a3\u79cdfilter\u7684\u7ec4\u5408\u6bd4\u8f83\u597d\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u8ba1\u7b97\u6210\u672c\u3002</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5149\u5149\u662f5\u00d75\u7684filter\u5377\u79ef\uff0c\u90fd\u89811.2\u4ebf\u6b21\u8ba1\u7b97\u3002\u5373\u4f7f\u662f\u5bf9\u4e8e\u73b0\u5728\u7684\u7b97\u529b\uff0c\u8fd9\u90fd\u662f\u96be\u4ee5\u63a5\u53d7\u7684\uff08\u8ba1\u7b97\u5f0f\u4e2d\uff0c\u524d\u9762\u4ee3\u8868\u6700\u7ec8\u5f97\u5230\u7684\u6570\u5b57\u6570\u91cf\uff0c\u4ee3\u8868\u4e86filter\u64cd\u4f5c\u6b21\u6570\uff0c\u540e\u9762\u4ee3\u8868\u7684\u662f\u4e00\u6b21filter\u64cd\u4f5c\u7684\u8ba1\u7b97\u6570\u91cf\uff09</p> <p>\u90a3\u4e48\u5982\u4f55\u7b80\u5316\u8ba1\u7b97\u6210\u672c\u5462\uff1f1\u00d71\u5377\u79ef\u7684\u51cf\u5c11channel\u6570\u91cf\u7684\u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u5b9e\u73b0\uff1a</p> <p></p> <p>\u53d1\u73b0\u8fd9\u6837\u4e00\u6765\uff0c\u8ba1\u7b97\u91cf\u53d8\u6210\u4e861240\u4e07\uff0c\u5dee\u4e0d\u591a\u53d8\u6210\u4e86\u5341\u5206\u4e4b\u4e00</p> <p>\u90a3\u4e48\u6709\u4e86\u8fd9\u6837\u7684\u601d\u60f3\uff0c\u6765\u770b\u4e0binception\u7f51\u7edc\u7684\u7ed3\u6784\uff1a</p> <p></p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u6b21\u4e0a\u8ff0\u7f51\u7edc\u53ef\u4ee5\u5206\u4e3a\u4e00\u4e2a\u4e2a\u677f\u5757\uff0c\u4e00\u4e2a\u677f\u5757\u7684\u7ed3\u6784\u5982\u4e0a\u56fe\uff1a\u6ce8\u610f\u5230\u7528\u4e86\u5f88\u591a\u6b211\u00d71\u5377\u79ef\u7684\u624b\u6bb5\u6539\u53d8\u4e86channels\u6570\u91cf\u3002\u800c\u5728\u7f51\u7edc\u4e2d\u53ef\u4ee5\u53d1\u73b0\u6709\u51e0\u4e2a\u5206\u652f\uff0c\u8fd9\u4e9b\u5206\u652f\u90fd\u662f\u76f4\u63a5\u628a\u9690\u85cf\u5c42\u7684\u6570\u636e\u62ff\u6765\u8fdb\u884cFC\u6700\u540e\u901a\u8fc7softmax\u8f93\u51fa\u9884\u6d4b\u4e86\uff0c\u8fd9\u65e8\u5728\u8bf4\u660e\u8fd9\u6837\u7684\u7f51\u7edc\u7ed3\u6784\u80fd\u591f\u5f88\u597d\u7684\u6291\u5236\u8fc7\u62df\u5408</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#_32","title":"\u8fc1\u79fb\u5b66\u4e60","text":"<p>\u6709\u7684\u65f6\u5019\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u53c2\u6570\u6216\u8005\u662f\u642d\u5efa\u7f51\u7edc\u6846\u67b6\u662f\u4e00\u4ef6\u975e\u5e38\u56f0\u96be\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u8bf4\u6211\u7684\u6570\u636e\u96c6\u975e\u5e38\u5c0f\uff0c\u4e0d\u8db3\u4ee5\u652f\u6301\u642d\u5efa\u975e\u5e38\u6df1\u7684\u7f51\u7edc\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8fc1\u79fb\u522b\u4eba\u5df2\u7ecf\u5b66\u4e60\u597d\u7684\u4e00\u4e9b\u6570\u636e\uff0c\u7136\u540e\u62ff\u6765\u4f5c\u4e3a\u521d\u59cb\u5316\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u8282\u7701\u975e\u5e38\u591a\u7684\u65f6\u95f4</p> <p></p> <p>\u5047\u5982\u8bf4\u505a\u4e00\u4e2a\u732b\u732b\u5206\u7c7b\u5668\uff0c\u8f93\u51fa\u662ftigger\u8fd8\u662fmisty\u6216\u8005\u90fd\u4e0d\u662f\u3002\u4f46\u662f\u5173\u4e8e\u8fd9\u4e24\u79cd\u732b\u7684\u6570\u636e\u975e\u5e38\u5c11\uff0c\u56e0\u6b64\u642d\u5efa\u5927\u7f51\u7edc\u7ed3\u6784\u4e0d\u592a\u73b0\u5b9e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u628a\u5176\u4ed6\u7f51\u7edc\u62ff\u8fc7\u6765\u2014\u2014\u5047\u5982\u8bf4\u662fImageNet\u7684dataset\u2014\u2014\u7136\u540e\u518d\u505a\u4e00\u4e9b\u6539\u8fdb\u2014\u2014\u5982\u5c06\u6700\u540e1000\u8f93\u51fa\u53ef\u80fd\u7684softmax\u6362\u6210\u8f93\u51fa\u4e09\u79cd\u60c5\u51b5\u7684softmax, \u7136\u540e\u8bad\u7ec3\u8fd9\u4e2asoftmax\u7684\u6743\u91cd\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528freeze\u53bb\u4fdd\u8bc1\u524d\u9762\u7ed3\u6784\u4e2d\u7684\u6743\u91cd\u4e0d\u6539\u53d8\u3002\u5982\u679c\u8bf4\u6211\u7684\u6570\u636e\u8fd8\u662f\u6bd4\u8f83\u591a\u7684\uff0c\u4f46\u662f\u5c31\u662f\u4e0d\u60f3\u81ea\u5df1\u642d\u5efa\u7f51\u7edc\u7ed3\u6784\u4e86\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u8fd9\u4e2a\u7f51\u7edc\u7ed3\u6784\u62ff\u8fc7\u6765\u7136\u540e\u968f\u673a\u521d\u59cb\u5316\u53c2\u6570\u8fdb\u884c\u8bad\u7ec3\u2014\u2014\u4e00\u822c\u6765\u8bf4\uff0c\u6570\u636e\u91cf\u8d8a\u591a\uff0c\u9700\u8981freeze\u7684\u5c42\u6570\u8d8a\u5c11\u3002\u56e0\u4e3a\u6211\u4eec\u81ea\u5df1\u6709\u8db3\u591f\u591a\u7684\u6837\u672c\u70b9\u8ba9\u8ba1\u7b97\u673a\u53bb\u62df\u5408\u51fd\u6570\u4e86\u3002Transfer learning \u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u975e\u5e38\u5e38\u89c1\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#data-augmentation","title":"\u6570\u636e\u6269\u5145\uff08Data augmentation\uff09","text":"<p>\u8ba1\u7b97\u673a\u89c6\u89c9\u975e\u5e38\u9700\u8981\u6570\u636e\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u8fd9\u79cd\u6570\u636e\u4e00\u76f4\u4ee5\u6765\u4e0d\u662f\u975e\u5e38\u5145\u8db3\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u6570\u636e\u6269\u5145\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u624b\u6bb5</p> <p></p> <p>\u7b2c\u4e00\u7c7b\u5e38\u89c1\u7684\u624b\u6bb5\u5c31\u662f\u5bf9\u8fd9\u4e2a\u56fe\u7247\u7684\u201c\u56fe\u5f62\u201d\u8fdb\u884c\u6539\u53d8\uff0c\u4f8b\u5982\u955c\u50cf\u5bf9\u79f0\uff0c\u968f\u5373\u622a\u56fe\uff0c\u6216\u8005\u65cb\u8f6c\u3001sheering\u7b49\u7b49</p> <p></p> <p>\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u624b\u6bb5\u662f\u5bf9\u989c\u8272\u52a8\u624b\uff0c\u5bf9GRB channels\u7684\u6570\u503c\u8fdb\u884c\u6539\u53d8\uff0c\u4ece\u800c\u6a21\u4eff\u51fa\u2014\u2014\u4f8b\u5982\u9633\u5149\u6253\u5728\u4e86\u732b\u7684\u8eab\u4e0a\u2014\u2014\u8fd9\u79cd\u53ef\u80fd\u771f\u5b9e\u60c5\u666f\u4e0b\u7684\u732b\u7684\u56fe\u7247\uff0c\u4f46\u662f\u8fd9\u4e9b\u56fe\u7247\u90fd\u662f\u732b\u56fe</p> <p>\u5728\u5b9e\u6218\u4e2d\uff0c\u4e00\u822c\u53ef\u4ee5\u5728CPU\u4e2d\u5355\u72ec\u5f00\u4e00\u4e2a\u7ebf\u7a0b\uff08thread\uff09, \u8d1f\u8d23\u5bf9\u6570\u636e\u8fdb\u884c\u4e00\u5b9a\u7684\u53d8\u5316\uff0c\u7136\u540e\u53d8\u5316\u540e\u7684\u6570\u636e\u90fd\u653e\u5728Mini batch\u91cc\u9762\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#object-detection","title":"\u76ee\u6807\u68c0\u6d4b\u2014\u2014Object detection","text":"<p>\u4e4b\u524d\u4e00\u76f4\u5b66\u4e60\u7684\u90fd\u662f\u5206\u7c7b\u95ee\u9898\uff0c\u4f46\u662f\u5b9e\u9645\u4e2d\u6211\u4eec\u4e0d\u4ec5\u5e0c\u671b\u80fd\u591f\u5bf9\u7269\u4f53\u8fdb\u884c\u5206\u7c7b\uff0c\u8fd8\u5e0c\u671b\u80fd\u5b9a\u4f4d\u8fd9\u4e2a\u7269\u4f53\u5728\u54ea\u91cc</p> <p>\u5148\u770b\u5173\u6ce8\u4e8e\u80cc\u666f\u4e2d\u7684\u4e00\u4e2a\u5f85\u68c0\u6d4b\u76ee\u6807\uff1a\uff08\u73b0\u5b9e\u573a\u666f\u4e2d\uff0c\u8981\u5173\u6ce8\u540c\u65f6\u591a\u4e2a\u76ee\u6807\uff09</p> <p></p> <p>\u5047\u5982\u8bf4\u662f\u5728\u9a7e\u9a76\u4efb\u52a1\u4e0b\uff0c\u90a3\u4e48\u8981\u5206\u7c7b\u7684\u53ef\u80fd\u5c31\u662f\u884c\u4eba\uff0c\u8f66\u8f86\uff0c\u975e\u673a\u52a8\u8f66\uff0c\u7b49\u7b49\u3002\u6ca1\u6709\u4ed6\u4eec\u7684\u8bdd\uff0c\u5c31\u8ba4\u4e3a\u662f\u6b63\u5e38\u80cc\u666f</p> <p>\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e0b\uff0c\u6211\u4eec\u7528\u8fd9\u6837\u4e00\u5957metrics\u6765\u5b9a\u4f4d\uff1abxby\u4ee3\u8868\u4e2d\u5fc3\u70b9\u7684\u4f4d\u7f6e\uff0cbwbh\u4ee3\u8868\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff1b\u540c\u65f6\u6ce8\u610f\uff0c\u6700\u5de6\u4e0a\u89d2\u548c\u6700\u53f3\u4e0b\u89d2\u5206\u522b\u4e3a\uff080\uff0c 0\uff09\uff081\uff0c 1\uff09\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u4e3a\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\u5b9a\u4e49\u76ee\u7684\u6807\u7b7e\u5c31\u662f\u4e00\u4e2a\u5341\u5206\u5173\u952e\u7684\u95ee\u9898\u4e86\u3002</p> <p></p> <p>\u89c4\u5b9ay\u5982\u56fe\uff0c\u6ce8\u610f\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f1\u62160\uff0c\u7528\u6765\u51b3\u5b9a\u662f\u5426\u67091\u30012\u30013\u4e2d\u7684\u76ee\u6807\uff1b\u4e0b\u9762\u56db\u4e2a\u4f4d\u7f6e\u53c2\u6570\u548c\u4e09\u4e2a\u5206\u7c7b\u7684\u5404\u7ec4\u6982\u7387\u3002\u90a3\u4e48\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u635f\u5931\u51fd\u6570\u4e5f\u5982\u56fe\uff1a\uff08\u4f8b\uff09\u53ef\u4ee5\u662f\u5dee\u65b9\u6765\u8861\u91cf\uff0c\u5f53\u7136\u53ef\u4ee5\u66f4\u590d\u6742\u4e00\u4e0b\uff0c\u6bd4\u5982c1c2c3\u7528softmax\u800cpc\u7528logistic regression\u4e4b\u7c7b\u7684\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#landmark","title":"\u7279\u5f81\u70b9\uff08landmark\uff09\u68c0\u6d4b","text":"<p>\u6709\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5173\u952e\u70b9\u5b9e\u73b0\u5f88\u591a\u4e8b\u60c5\uff0c\u4f8b\u5982\u6307\u51fa\u7ec6\u8282\uff08\u773c\u89d2\u5728\u54ea\u91cc\uff09\uff0c\u5e94\u7528\u7ec6\u8282\u7b49\u7b49\uff08\u6234\u7687\u51a0\uff0c\u5e26\u7684\u4f4d\u7f6e\uff1f\uff09\u3002\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5f81\u533a\u57df\uff0c\u4e00\u822c\u7528\u4e24\u4e2a\u7279\u5f81\u70b9\u6765\u4ee3\u8868\u3002\u5728Convnet\u4e2d\uff0c\u5e0c\u671b\u6700\u540e\u8f93\u51fa\u7684\u6709\u2014\u2014\u5047\u5982\u8bf4\u2014\u201464\u4e2a\u7279\u5f81\u4f4d\u7f6e\u548c\u662f\u5426\u6709\u4eba\u8138\uff0c\u90a3\u4e48\u8fd9\u4e2asoftmax\u4e2d\u6709129\u4e2a\u53ef\u80fd\uff0c\u7b2c\u4e00\u4e2a\u662f\u6709\u6ca1\u6709\u4eba\u8138\uff0c\u63a5\u4e0b\u6765\u5168\u90e8\u662f\u7279\u5f81\u70b9\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#object-detection_1","title":"Object Detection","text":"<p>\u7a97\u53e3\u6ed1\u52a8\u7b97\u6cd5\uff1a\u7528\u4e00\u4e2a\u5927\u5c0f\u7684\u6b63\u65b9\u5f62\u7a97\u53e3\u7136\u540e\u6309\u7167\u4e00\u5b9a\u6b65\u957f\u6ed1\u52a8\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5730\u65b9\u8fdb\u884c\u5377\u79ef\u8ba1\u7b97\uff0c\u8f93\u51fa1\u62160\uff1b\u7136\u540e\u4e00\u8f6e\u4e4b\u540e\uff0c\u7a97\u53e3\u53d8\u5927\uff0c\u7136\u540e\u7528\u53e6\u4e00\u4e2a\u6b65\u957f\u53bb\u8fdb\u884c\u6ed1\u52a8\u68c0\u6d4b\uff1b\u4e0d\u65ad\u8fd9\u6837\u4e0b\u53bb\uff0c\u4fdd\u8bc1\u603b\u6709\u5408\u9002\u5927\u5c0f\u7684\u7a97\u53e3\u68c0\u6d4b\u5230\u5b8c\u6574\u7684\u8f66\u3002</p> <p>\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u9ad8\u5230\u7206\u70b8\u3002\u90a3\u4e48\u5982\u4f55\u79d1\u5b66\u5730\u5b9e\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u5462\uff1f</p> <p>\uff08Convolutional implementation of sliding windows is the key\uff09</p> <p></p> <p>\u5728\u8fd9\u4e4b\u524d\uff0c\u6709\u4e00\u4e2a\u77e5\u8bc6\u70b9\u8981\u94fa\u57ab\u4e00\u4e0b\uff1a\u5982\u4f55\u5c06\u5168\u8fde\u63a5\u5c42\u8f6c\u6362\u4e3a\u5377\u79ef\u5c42\u5f62\u5f0f\uff1f \u90a3\u4e48\u5982\u56fe\u60f3\u5fc5\u7b54\u6848\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u90a3\u5c31\u662f\u7528400\u79cd5\u00d75\uff08channel = 16\uff09\u7684filter\u53bb\u5377\u79ef\uff0c\u518d\u75284\u79cd1\u00d71\uff08channel = 400\uff09\u7684filter\u53bb\u904d\u5386\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5176\u5b9e\u662f\u7b49\u6548\u7684\uff0c\u56e0\u4e3afilter\u4e2d\u7684\u4e00\u4e2a\u4e2a\u53c2\u6570\u5176\u5b9e\u5c31\u662f\u5168\u8fde\u63a5\u6210\u4e2d\u7684\u53c2\u6570\u3002\u8fd9\u662f\u4e0d\u662f\u5f88\u5999\u5462\uff1f</p> <p></p> <p>\u90a3\u4e48\u73b0\u5728\u91c7\u7528\u4e0a\u9762\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u5c1d\u8bd5\u8ba9\u6700\u540e\u7684\u5377\u79ef\u7684\u5bf9\u5e94\u4f4d\u7f6e\u5c31\u80fd\u591f\u5bf9\u5e94\u7b2c\u4e00\u6b21filter\uff08window\uff09\u7684\u611f\u53d7\u91ce\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u4e0d\u518d\u662f\u5c06\u4e00\u4e2a\u56fe\u7247\u5206\u5272\u6210\u5f88\u591a\u4e2a\u5b50\u56fe\u7247\uff0c\u800c\u662f\u6574\u4e2a\u56fe\u7247\u4f20\u8fdb\u53bb\uff0c\u6700\u540e\u7684\u5377\u79ef\u7ed3\u679c\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u80fd\u53cd\u5e94\u5bf9\u5e94\u7a97\u53e3\u7684\u611f\u53d7\u91ce\u7684\u7279\u5f81\u3002</p> <p>\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u662f\u6709\u70b9\u5c0f\u95ee\u9898\uff1a\u7531\u4e8efilter\u5927\u5c0f\u662f\u5b9a\u7684\uff0c\u90a3\u4e48\u4f4d\u7f6e\u7684\u68c0\u6d4b\u53ef\u80fd\u5c31\u5e76\u6ca1\u6709\u90a3\u4e48\u7cbe\u786e\u4e86\u3002\u6709\u6ca1\u6709\u6539\u8fdb\u5462\uff1f</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#bounding-box-prediction","title":"Bounding Box Prediction","text":"<p>\u5982\u4f55\u83b7\u5f97\u66f4\u7cbe\u786e\u7684\u4f4d\u7f6e\u6846\uff1f</p> <p>YOLO\u5b55\u80b2\u800c\u751f\uff0c\u4ee3\u8868\uff1aYou Only Look Once</p> <p></p> <p>YOLO\u7684\u4eae\u70b9\u5728\u4e8e\uff1a\u4e00\u4e2a\u7269\u4f53\u53ef\u80fd\u6a2a\u8de8\u5f88\u591a\u683c\u5b50\uff0c\u4f46\u662f\u4eba\u5de5\u6807\u6ce8\u4e4b\u540e\uff0c\u53d6\u8fd9\u4e2a\u6846\u7684\u4e2d\u5fc3\u70b9\uff0c\u7136\u540e\u8ba4\u4e3a\u70b9\u6240\u843d\u5728\u7684\u7f51\u683c\u7684\u5411\u91cf\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f1\u3002\u5728grid\u66f4\u52a0\u7cbe\u7ec6\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u7269\u4f53\u7684\u4e2d\u5fc3\u70b9\u5728\u4e00\u4e2a\u6846\u5185\u7684\u6982\u7387\u5c31\u975e\u5e38\u5c0f\u4e86</p> <p></p> <p>\u6ce8\u610f\u5230bh bw\u4e24\u4e2a\u53c2\u6570\u53ef\u4ee5\u5927\u4e8e1\uff0c\u56e0\u4e3a\u5373\u4f7f\u662f\u5c0f\u683c\u5b50\u5de6\u4e0a\u89d2\u4e3a\uff080\uff0c0\uff09\u53f3\u4e0b\u89d2\u4e3a\uff081\uff0c1\uff09\uff0c\u8fd9\u4e2a\u8fb9\u6846\u4e5f\u80fd\u591f\u8d85\u51fa\u8fd9\u4e2a\u5c0f\u683c\u5b50\u3002\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528\u4f8b\u5982sigmoid function\u4e4b\u7c7b\u7684\u65b9\u6cd5\u5c06\u8fd9\u4e24\u4e2a\u53c2\u6570\u8303\u56f4\u9650\u5236\u57281\u4ee5\u5185\u3002\u5f53\u7136\u53c2\u6570\u5316\u65b9\u5f0f\u5f88\u591a\u3002</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#intersection-over-union","title":"\u4ea4\u5e76\u6bd4\uff08Intersection over union\uff09&amp; \u975e\u6781\u5927\u503c\u6291\u5236","text":"<p>\u5982\u4f55\u68c0\u6d4b\u76ee\u6807\u8bc6\u522b\u7b97\u6cd5\u662f\u5426\u8fd0\u884c\u826f\u597d\uff1f\u90a3\u4e48\u4ea4\u5e76\u6bd4\u51fd\u6570\u5c31\u80fd\u591f\u5e2e\u52a9\u8861\u91cf\u8fd9\u4e2a\u7b97\u6cd5\u662f\u5426\u8868\u73b0\u826f\u597d\u3002</p> <p></p> <p>\u4ea4\u5e76\u6bd4\uff0c\u6070\u5982\u5b57\u9762\u610f\u601d\uff0c\u5c31\u662f\u4ea4\u53c9\u533a\u57df\u9664\u4ee5\u5e76\u96c6\u533a\u57df\u3002\u8fd9\u4e2a\u6bd4\u503c\u7528\u6765\u8861\u91cf\u76ee\u6807\u68c0\u6d4b\u7684\u8868\u73b0\u7a76\u7adf\u662f\u600e\u4e48\u6837\u3002\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u5b8c\u7f8e\u5b9a\u4f4d\uff0c\u90a3\u4e48\u6bd4\u503c\u5c31\u662f1\u3002\u5f53\u7136\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u822c\u8ba4\u4e3a\u9608\u503cthresold\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e3a0.5\uff0c\u8fd9\u4e2a\u6570\u5b57\u4ee5\u4e0a\u5c31\u8ba4\u4e3a\u8868\u73b0\u5f97\u8fd8\u4e0d\u9519\uff08\u5f53\u7136\u6570\u503c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u5730\u66f4stringent\u4e00\u70b9\uff09</p> <p></p> <p>\u90a3\u4e48\u5728\u843d\u5b9e\u201c\u8ba4\u4e3a\u4e2d\u5fc3\u70b9\u53ea\u843d\u5728\u4e00\u4e2a\u683c\u5b50\u201d\u5730\u65f6\u5019\uff0c\u73b0\u5b9e\u662f\u5468\u56f4\u5f88\u591a\u683c\u5b50\u90fd\u53ef\u80fd\u4f1a\u60f3\u6211\u8fd9\u91cc\u6709\u4e2a\u8f66\uff0c\u56e0\u6b64\u6211\u7684pc\u53c2\u6570\u5f88\u63a5\u8fd1\u4e8e1\uff0c\u56e0\u6b64\u6211\u4e5f\u5e94\u8be5\u7ed9\u51fa\u6211\u81ea\u5df1\u8fd9\u4e2a\u683c\u5b50\u9884\u6d4b\u7684\u6846\u7684\u4f4d\u7f6e\u3002\u4e3a\u4e86\u907f\u514d\u590d\u6742\u60c5\u51b5\uff0c\u76f4\u63a5\u53d6pc\u6700\u5927\u7684\u503c\u7684\u6846\uff0c\u800c\u653e\u5f03\u5176\u4ed6\u7684\u6846\u3002</p> <p></p> <p>\u5177\u4f53\u4e00\u70b9\u6765\u8bf4\uff0c\u5f88\u591a\u683c\u5b50\u90fd\u6709\u9884\u6d4b\uff0c\u9996\u5148pc\u4e0a\u9762\u8bbe\u7f6e\u9608\u503c\uff0c\u7136\u540e\u627epc\u6700\u5927\u503c\u7684\u9884\u6d4b\u6846\uff0c\u5269\u4e0b\u7684\u548c\u8fd9\u4e2a\u6846\u6bd4\u8f83\uff0c\u4ea4\u5e76\u6bd4\u5927\u4e8e0.5\u7684\u5168\u90e8\u53bb\u6389\uff08\u56e0\u4e3a\u8ba4\u4e3a\u6709\u8f83\u591a\u7684\u91cd\u53e0\uff0c\u53ef\u4ee5\u7b80\u5316\u6389\uff09</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#anchor-boxes","title":"Anchor Boxes","text":"<p>\u5982\u679c\u4e00\u4e2a\u683c\u5b50\u91cc\u9762\u80fd\u591f\u68c0\u6d4b\u51fa\u591a\u4e2a\u76ee\u6807\u5462\uff1f</p> <p></p> <p>\u6211\u4eec\u63d0\u524d\u8bbe\u5b9a\u597d\u51e0\u79cd\uff085-10\uff09anchor box\uff08\u8981\u8986\u76d6\u5230\u591a\u79cd\u60c5\u51b5\uff0c\u4f8b\u5982\u4eba\u7684anchor box\u5c31\u662f\u7626\u9ad8\u5f62\u72b6\uff0c\u8f66\u7684\u5c31\u662f\u5bbd\u5bbd\u7684\uff09\uff0c\u7136\u540e\u770b\u683c\u5b50\u7ed9\u51fa\u7684\u4e24\u79cd\u9884\u6d4b\u6846\u548c\u54ea\u79cdanchor box\u6709\u7740\u6700\u597d\u7684\u4ea4\u5e76\u6bd4\uff0c\u7136\u540e\u56e0\u6b64\u5c31\u5f52\u7c7b\u5230\u4e86\u4e0d\u540c\u7684anchor box\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u628a\u4e24\u4e2a\u6846\u90fd\u7ed9\u7406\u89e3\u4e3a\u4e00\u4e2a\u7269\u4f53\u7684\u6846\u7684\u4e24\u79cd\u53ef\u80fd\u60c5\u51b5\u4e86</p> <p></p> <p>\u5f53\u7136\u5982\u679c\u51fa\u73b0\u4e86\u4e24\u4e2a\u6846\u771f\u7684\u90fd\u548c\u4e00\u4e2aanchor box\u9ad8\u5ea6\u76f8\u4f3c\uff0c\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u5c31\u5f88\u96be\u5904\u7406\u4e86</p>"},{"location":"deeplearning_note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6.html#yolo","title":"YOLO\u6b63\u5f0f\u4ecb\u7ecd","text":"<p>\u6709\u4e86\u524d\u9762\u7684\u94fa\u57ab\uff0c\u6b63\u5f0f\u6765\u770bYOLO\u662f\u4ec0\u4e48\u4e1c\u897f\u3002\u8bad\u7ec3\u90e8\u5206\uff0c\u9996\u5148\uff08\u4f8b\u5b50\uff093\u00d73\u7f51\u683c\uff08filter\uff09\u94fa\u4e0a\uff0c\u7136\u540e\u8bad\u7ec3\u96c6\u7684\u5236\u4f5c\u4e0a\uff0c\u4e2d\u5fc3\u70b9\u6240\u843d\u5728\u7684\u7f51\u683c\u7684y\u5e94\u8be5pc_? = 1\uff0c \u7136\u540e\u5bf9\u5e94\u7684\u6846\u6846\u53c2\u6570\u90fd\u51c6\u5907\u597d\u3002\u6ce8\u610f\u52302\u00d78\u4ee3\u8868\u4ec0\u4e48\uff0c2\u4ee3\u8868anchor box\uff0c8\u4ee3\u8868\u4e00\u4e2a\u7c7b\u522b\u4f1a\u62e5\u6709\u7684\u53c2\u6570\uff0c\u8fd9\u91cc\u662f5+3\uff0cpc bxbybwbh + c1c2c3(\u6982\u7387)\u3002\u5b9e\u6218\u4e2d\uff0c\u66f4\u53ef\u80fd\u7684\u662f19\u00d719\u00d75\u00d78\u3002\u90a3\u4e48\u5377\u79ef\u7f51\u7edc\u8d1f\u8d23\u7684\u5c31\u662f\u628a\u4e00\u4e2aRGB\u4e09\u901a\u9053\u7684\u56fe\u7247\u8f6c\u5316\u4e3a3\u00d73\u00d716\uff08\u4f8b\u5b50\uff09\u3002</p> <p>\u90a3\u4e48\u5728\u9884\u6d4b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u8dd1\u4e00\u4e0b\u975e\u6700\u5927\u503c\u6291\u5236\u3002\u7efc\u5408\u6765\u8bf4\uff0cYOLO\u7b97\u6cd5\u5728\u68c0\u6d4b\u76ee\u6807\u4e0a\u662f\u5341\u5206\u6709\u6548\u7684\u3002</p> <p></p>"},{"location":"machine_learning/Datawhale/note.html","title":"Datawhale  X \u674e\u5b8f\u6bc5\u82f9\u679c\u4e66 AI\u590f\u4ee4\u8425","text":"<p>\u2014\u2014\u673a\u5668\u5b66\u4e60\u521d\u4f53\u9a8c</p>"},{"location":"machine_learning/Datawhale/note.html#_1","title":"\u673a\u5668\u5b66\u4e60\u57fa\u7840","text":"<p>\u673a\u5668\u5b66\u4e60, \u5b66\u4e60\u7684\u7a76\u7adf\u662f\u4ec0\u4e48\u4e1c\u897f\u5462? \u6216\u8005\u8bf4, \u8ba9\u673a\u5668\u62e5\u6709\u5b66\u4e60\u4ec0\u4e48\u7684\u80fd\u529b\u5462? \u7b80\u800c\u8a00\u4e4b, \u673a\u5668\u5b66\u4e60\u5c31\u662f\u8ba9\u673a\u5668\u5177\u5907\u5bfb\u627e\u4e00\u4e2a\u51fd\u6570\u7684\u80fd\u529b. \u4f8b\u5982, \u6211\u4eec\u9700\u8981\u5224\u65ad\u8fd9\u5f20\u7167\u7247\u91cc\u9762\u6709\u6ca1\u6709\u732b, \u76f8\u5f53\u4e8e\u662f\u5c06\u4e00\u5f20\u7167\u7247\u8f93\u5165\u8fdb\u4eba\u8111, \u6700\u540e\u8f93\u51fa\u7684\u5c31\u662f\u4e00\u4e2a\u6570\u5b57: 1\u4ee3\u8868\u6709, 0\u4ee3\u8868\u6ca1\u6709. \u90a3\u4e48\u673a\u5668\u80fd\u4e0d\u80fd\u901a\u8fc7\u5b66\u4e60\u83b7\u5f97\u8fd9\u4e2a\u672c\u9886\u5417? \u7b54\u6848\u662f\u53ef\u4ee5\u7684. \u90a3\u4e48\u8fd9\u8bad\u7ec3\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u8bad\u7ec3\u4e86\u4e00\u4e2a\u51fd\u6570, \u8f93\u5165\u7684\u662f\u4e00\u5f20\u7167\u7247, \u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u6570\u5b57, \u7528\u6765\u5224\u65ad\u7167\u7247\u91cc\u9762\u6709\u6ca1\u6709\u732b. \u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50, AlphaGo\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u51fd\u6570, \u8f93\u5165\u7684\u662f\u76ee\u524d\u4e3a\u6b62\u53cc\u65b9\u7684\u843d\u5b50, \u8f93\u51fa\u662f\u4e0b\u4e00\u6b65\u68cb\u5e94\u8be5\u843d\u5728\u7684\u4f4d\u7f6e. \u6216\u8005more specifically, \u5e94\u8be5\u662f\u4e0b\u4e00\u6b65\u68cb\u5728\u6bcf\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\u7684\u83b7\u80dc\u53ef\u80fd\u6027, \u7136\u540e\u9009\u62e9\u53ef\u80fd\u6027\u6700\u5927\u7684.</p> <p>\u5f53\u7136, \u51fd\u6570\u7684\u7c7b\u578b\u4e5f\u6709\u53ef\u80fd\u53d8\u6362, \u800c\u968f\u7740\u5bfb\u627e\u51fd\u6570\u7684\u4e0d\u540c, \u673a\u5668\u5b66\u4e60\u4e5f\u5206\u4e3a\u4e0d\u540c\u7684\u7c7b\u522b. \u5047\u5982\u8bf4\u51fd\u6570\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u6570\u503c, \u4e00\u4e2a\u6807\u91cf(scalar), \u90a3\u4e48\u673a\u5668\u5b66\u4e60\u7684\u4efb\u52a1\u5c31\u79f0\u4e3a\u56de\u5f52(regression). \u4e3e\u4e00\u4e2a\u4f8b\u5b50: \u673a\u5668\u8981\u9884\u6d4b\u672a\u6765\u4e00\u4e2a\u65f6\u95f4\u7684PM2.5\u503c, \u8fd9\u4e2a\u51fd\u6570\u8f93\u5165\u7684\u662f\u79cd\u79cd\u548cPM2.5\u503c\u6709\u5173\u7684\u6307\u6570, \u4f8b\u5982\u8bf4\u4eca\u5929\u7684PM2.5\u503c, \u5e73\u5747\u6e29\u5ea6, \u5e73\u5747\u7684\u81ed\u6c27\u6d53\u5ea6\u7b49, \u8f93\u51fa\u7684\u5c31\u662f\u660e\u5929\u4e2d\u5348\u7684PM2.5\u503c.</p> <p>\u53e6\u5916\u4e00\u4e2a\u5e38\u89c1\u7684\u4efb\u52a1\u662f\u5206\u7c7b(classification). \u4eba\u7c7b\u5148\u51c6\u5907\u597d\u4e00\u4e9b\u9009\u9879, \u8fd9\u4e9b\u9009\u9879\u79f0\u4e3a\u7c7b\u522b, \u90a3\u4e48\u51fd\u6570\u7684\u8f93\u51fa\u5c31\u662f\u4ece\u8bbe\u5b9a\u7684\u9009\u9879\u4e2d\u9009\u62e9\u4e00\u4e2a\u5f53\u4f5c\u8f93\u51fa. \u4f8b\u5982\u53ef\u4ee5\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b, \u5224\u65ad\u7167\u7247\u4e2d\u5b58\u5728\u7684\u52a8\u7269\u662f\u732b, \u72d7, \u4ed3\u9f20, \u8fd8\u662f\u5176\u4ed6.\u53e6\u5916, \u9664\u4e86\u56de\u5f52\u548c\u5206\u7c7b, \u8fd8\u6709\u7ed3\u6784\u5316\u5b66\u4e60(structured learning). \u673a\u5668\u4e0d\u662f\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57\u6216\u8005\u662f\u9009\u62e9\u4e00\u4e2a\u9009\u9879, \u800c\u662f\u4ea7\u751f\u4e00\u4e2a\u6709\u7ed3\u6784\u7684\u7269\u4f53, \u4f8b\u5982\u673a\u5668\u5199\u4e00\u7bc7\u6587\u7ae0.</p> <p>\u90a3\u4e48\u673a\u5668\u662f\u5982\u4f55\u5b66\u4e60\u4e00\u4e2a\u51fd\u6570\u7684\u5462? </p> <p>\u7b2c\u4e00\u6b65: \u5199\u51fa\u4e00\u4e2a\u5e26\u6709\u4f4d\u7f6e\u53c2\u6570\u7684\u51fd\u6570, \u5e0c\u671b\u5b83\u80fd\u591f\u7528\u6765\u5b9e\u73b0\u6211\u6240\u6709\u5e0c\u671b\u5b9e\u73b0\u7684\u529f\u80fd, \u4f8b\u5982:  \u90a3\u4e48w b\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u672a\u77e5\u7684, \u7136\u540ex\u662f\u8f93\u5165\u7684\u53d8\u91cf, \u6700\u540e\u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u6574\u6570, \u56e0\u6b64\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u56de\u5f52. \u4e0a\u9762\u8fd9\u4e2a\u5e26\u6709\u672a\u77e5\u53c2\u6570(parameter)\u7684\u51fd\u6570\u5c31\u79f0\u4e3a\u6a21\u578b(model). \u800c\u8fd9\u4e2ax\u5c31\u79f0\u4e3a\u7279\u5f81(feature), w\u79f0\u4e3a\u6743\u91cd(weight), b\u79f0\u4e3a\u504f\u7f6e(bias).</p> <p>\u7b2c\u4e8c\u6b65: \u5b9a\u4e49\u635f\u5931(loss). \u8fd9\u4e2a\u635f\u5931\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u51fd\u6570, \u56e0\u6b64\u5e38\u79f0\u4e4b\u4e3a\u635f\u5931\u51fd\u6570, \u8fd9\u4e2a\u635f\u5931\u51fd\u6570\u7684\u610f\u4e49\u5c31\u662f\u7528\u6765\u8861\u91cf\u673a\u5668\u76ee\u524d\u9009\u62e9\u7684\u6743\u91cd\u548c\u504f\u7f6e\u6709\u591a\u5408\u7406. \u56e0\u6b64\u635f\u5931\u51fd\u6570\u4e3a:   \u5f88\u660e\u663e\u8fd9\u662f\u4e00\u4e2a\u591a\u53d8\u91cf\u7684\u51fd\u6570. \u5728\u5b9e\u6218\u4e2d, \u5047\u5982\u8bf4\u8bad\u7ec3\u51fa\u6765\u4e00\u4e2a\u6743\u91cd\u4e00\u4e2a\u504f\u7f6e, \u90a3\u4e48\u5c31\u4f1a\u7528\u9886\u57df\u77e5\u8bc6(domain knowledge)\u5b9e\u9645\u7684instance\u6765\u5e26\u5165: \u4f8b\u5982\u8fd9\u91cc\u5c31\u662f\u8f93\u5165\u771f\u5b9e\u7684x, \u7136\u540e\u6bd4\u8f83\u4e00\u4e0b\u8f93\u51fa\u7684y\u548c\u771f\u5b9e\u7684y. \u5982\u4f55\u6bd4\u8f83\u5462? \u5e38\u89c1\u7684\u6709:   </p> \\[ e = (\\hat{y} - y)^2\\hspace{1cm}\u5747\u65b9\u8bef\u5dee(MSE) \\] <p>\u5728\u6709\u4e9b\u4efb\u52a1\u4e2d, y\u662f\u6982\u7387\u5206\u5e03, \u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u53ef\u80fd\u4f1a\u9009\u62e9\u4ea4\u53c9\u71b5(cross entropy loss). </p> <p>\u5728\u4e4b\u524d\u4e3e\u7684\u4f8b\u5b50\u4e2d, \u4e0d\u540c\u7684\u6743\u91cd\u548c\u504f\u7f6e\u6839\u636e\u9886\u57df\u77e5\u8bc6\u7684\u8f93\u5165\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u8f93\u51fa, \u6211\u4eec\u53ef\u4ee5\u753b\u4e00\u4e2a\u56fe\u6765\u8bb0\u5f55\u4e0bw b\u6240\u5bf9\u5e94\u7684Loss, \u5982\u4e0b: </p> <p></p> <p>\u5728\u8fd9\u5f20\u56fe\u4e2d, \u753b\u51fa\u6765\u7684\u7b49\u9ad8\u7ebf\u79f0\u4e3a\u8bef\u5dee\u8868\u9762(error surface), \u5728\u8fd9\u6761\u7b49\u9ad8\u7ebf\u4e0a, \u5904\u5904\u7684loss\u90fd\u662f\u76f8\u540c\u7684. \u90a3\u4e48\u6709\u4e86loss\u6765\u8861\u91cf\u76ee\u524d\u6743\u91cd\u548c\u504f\u7f6e\u7684\"\u8d28\u91cf\u5982\u4f55\", \u90a3\u4e48\u5982\u4f55\u66f4\u65b0\u8fd9\u4e9b\u53c2\u6570\u5462? </p> <p>\u9644: \u5b9e\u6218\u4e2d, \"\u9886\u57df\u77e5\u8bc6\u7684\u8f93\u5165\"\u5177\u4f53\u6765\u8bf4\u662f\u5728\u8bad\u7ec3\u7684\u65f6\u5019, \u8f93\u5165\u8bad\u7ec3\u96c6\u7684\u8f93\u5165, \u5f97\u5230\u5bf9\u5e94\u7684\u7ed3\u679c, \u7136\u540e\u6839\u636e\u8bad\u7ec3\u96c6\u7684ground truth, \u4ee5loss\u7684\u65b9\u5f0f\u8fdb\u884c\u76d1\u7763\u8bad\u7ec3 </p> <p>\u7b2c\u4e09\u6b65: \u89e3\u4e00\u4e2a\u6700\u4f18\u5316\u7684\u95ee\u9898. \u4e3a\u4e86\u66f4\u65b0\u53c2\u6570, \u6211\u4eec\u9700\u8981\u5bf9\u504f\u7f6e\u548c\u6743\u91cd\u8fdb\u884c\u52a0\u52a0\u51cf\u51cf, \u90a3\u4e48\u4f9d\u636e\u662f\u4ec0\u4e48\u5462? \u80af\u5b9a\u9700\u8981\u5229\u7528\u4e0a\u4e4b\u524d\u7b97\u51fa\u6765\u7684Loss\u51fd\u6570. \u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d(gradient descent)\u6765\u8fdb\u884c\u4f18\u5316. \u9996\u5148\u6211\u4eec\u8003\u8651\u9996\u5148\u66f4\u65b0\u6743\u91cd, \u800c\u4e0d\u662f\u504f\u7f6e. \u5982\u679cbias\u89c6\u4e3a\u5e38\u6570, \u90a3\u4e48\u635f\u5931\u51fd\u6570\u5c06\u4f1a\u662f\u5173\u4e8ew\u7684\u51fd\u6570, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\\(L-W\\)\u7684\u51fd\u6570\u56fe\u50cf. \u5728\u76ee\u524d\u7684w\u4e0b, \u4f1a\u6709\u5bf9\u5e94\u7684\u659c\u7387,  \u6211\u4eec\u9700\u8981\u6839\u636e\u8fd9\u4e2a\u659c\u7387\u6765\u66f4\u65b0w\u7684\u6570\u503c. \u6211\u4eec\u4f7f\u7528\u516c\u5f0f\u5982\u4e0b:   \u5728\u56fe\u4e2d\u7684\u76f4\u89c2\u8868\u793a\u5c31\u662f: </p> <p></p> <p>\u5728\u4e0a\u8ff0\u7684\u516c\u5f0f\u4e2d, \\(\\eta\\)\u662f\u4e00\u4e2a\u81ea\u5df1\u8bbe\u7f6e\u7684\u53c2\u6570, \u53eb\u505a\u5b66\u4e60\u7387(learning rate). \u8fd9\u4e0d\u662f\u673a\u5668\u81ea\u5df1\u627e\u51fa\u6765\u7684, \u56e0\u6b64\u8981\u548c\u88ab\u79f0\u4e3a\u8d85\u53c2\u6570(hyperparameter). \u90a3\u4e48\u4e00\u6b65\u4e00\u6b65, \u6211\u4eec\u5e0c\u671bw\u80fd\u591f\u53d6\u4e2d\u4f4e\u70b9. \u4f46\u662f\u5728\u4e0a\u9762\u8fd9\u4e2a\u56fe\u4e2d, \u6211\u4eec\u770b\u5230: \u6709\u5c40\u90e8\u6700\u5c0f\u503c\u548c\u5168\u5c40\u6700\u5c0f\u503c. \u5982\u679c\u5148\u5230\u8fbe\u4e86\u5c40\u90e8\u6700\u5c0f\u503c, \u90a3\u4e48\u659c\u7387\u51e0\u4e4e\u4e3a\u96f6, \u6b65\u957f\u51e0\u4e4e\u4e3a\u96f6, \u8fd9\u4e0d\u5c31\u662f\u610f\u5473\u7740w\u7684\u53d6\u503c\u6c38\u8fdc\u505c\u5728\u4e86\u5c40\u90e8\u6700\u5c0f\u503c\u7684\u9636\u6bb5\u5417? \u4f46\u662f\u4e8b\u5b9e\u4e0a\u5c40\u90e8\u6700\u5c0f\u503c\u662f\u4e00\u4e2a\u5047\u95ee\u9898, \u56e0\u4e3a\u635f\u5931\u51fd\u6570\u6211\u4eec\u4f1a\u6545\u610f\u8bbe\u8ba1\u6210\u51f8\u51fd\u6570, \u4ece\u800c\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u7a7a\u95f4\u6ca1\u6709\u5f2f\u66f2, \u5c40\u90e8\u6700\u4f4e\u70b9\u5c31\u662f\u5168\u5c40\u6700\u4f4e\u70b9. \u5728\u4e24\u4e2a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d, \u5176\u5b9e\u548c\u4e4b\u524d\u4e00\u4e2a\u53c2\u6570\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c, \u56e0\u6b64\u53ef\u4ee5\u63a8\u5e7fbias\u53c2\u6570\u7684\u66f4\u65b0. \u5728Pytorch\u4e2d, \u68af\u5ea6\u56de\u4f20\u4f1a\u81ea\u52a8\u5e2e\u5fd9\u8ba1\u7b97.</p>"},{"location":"machine_learning/Datawhale/note.html#_2","title":"\u7ebf\u6027\u6a21\u578b","text":""},{"location":"machine_learning/Datawhale/note.html#_3","title":"\u57fa\u672c\u6982\u5ff5\u539f\u7406","text":"<p>\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u6765\u8bf4\uff0c\u4f7f\u7528\u7684\u51fd\u6570\u662f\uff1a \\(\\(y = kx + b\\)\\)\u7528\u6765\u62df\u5408\u6570\u636e\uff1b\u90a3\u4e48\u6211\u80fd\u4e0d\u80fd\u8003\u8651\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u5373\u8bbe\u8ba1\u66f4\u590d\u6742\u7684\u51fd\u6570\u5462\uff1f\u5f53\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u8bbe\u8ba1\u4e0a\u6709\u5927\u5b66\u95ee\uff1a</p> <p>\u5047\u5982\u8bf4\u6211\u8bbe\u8ba1\uff1a\\(y = \\sum_{i=1}^{t}k_i+\\sum_{i=1}^{t}b_i\\), \u76f8\u5f53\u4e8e\u662f\\(\\overline{y}=\\sum_{i=1}^{t}y_i\\)\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u771f\u7684\u80fd\u62df\u5408\u5230\u66f4\u591a\u7684\u4fe1\u606f\u5417\uff1f\u4e8b\u5b9e\u4e0a\u662f\u4e0d\u80fd\u7684\uff0c\u56e0\u4e3a\u4e8b\u5b9e\u4e0a\u6c42\u5bfc\u516c\u5f0f\u4f9d\u7136\u662f\\(w^1 \\leftarrow w^0 - \\eta \\frac{\\partial L}{\\partial W}\\Bigg|_{w=w^0}\\)\uff0c\u90a3\u4e48\u7ad9\u5728gradient descent\u7684\u89d2\u5ea6\u4e0a\uff0c\u6839\u672c\u5c31\u662f\u6362\u6c64\u4e0d\u6362\u836f\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u6ca1\u6709\u5f15\u5165\u975e\u7ebf\u6027\u6027\u201d\uff0c\u800c\u201c\u628a\u8f93\u5165\u7684\u7279\u5f81x\u4e58\u4e0a\u4e00\u4e2a\u6743\u91cd\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u504f\u7f6e\u5c31\u5f97\u5230\u9884\u6d4b\u6548\u679c\u201d\u7684\u6a21\u578b\u79f0\u4e3a\u7ebf\u6027\u6a21\u578b\uff08linear model\uff09\u3002\u7ebf\u6027\u6a21\u578b\u6709\u5f88\u5927\u7684\u9650\u5236\uff0c\u8fd9\u4e00\u79cd\u6765\u81ea\u4e8e\u6a21\u578b\u7684\u9650\u5236\u79f0\u4e3a\u6a21\u578b\u7684\u504f\u5dee\uff0c\u65e0\u6cd5\u6a21\u62df\u771f\u5b9e\u7684\u60c5\u51b5\u3002</p> <p>\u90a3\u4e48\u5982\u4f55\u5f15\u5165\u975e\u7ebf\u6027\u6027\u5462\uff1f\u4e0d\u59a8\u4ece\u7b80\u5355\u7684\u89d2\u5ea6\u8fdb\u884c\u601d\u8003\uff1a\u80fd\u4e0d\u80fd\u5728\u7ebf\u6027\u6a21\u578b\u4e0a\u5f15\u5165\u975e\u7ebf\u6027\u6027\u5462\uff1f\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5206\u6bb5\u7ebf\u6027\u66f2\u7ebf\u3002\u4e0d\u59a8\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u975e\u7ebf\u6027\u51fd\u6570\uff1a\u5f53 x \u8f74\u7684\u503c\u5c0f\u4e8e\u67d0\u4e00\u4e2a\u9608\u503c\uff08\u67d0\u4e2a\u5b9a\u503c\uff09\u7684\u65f6\u5019\uff0c\u5927\u4e8e\u53e6\u5916\u4e00\u4e2a\u5b9a\u503c\u9608\u503c\u7684\u65f6\u5019\uff0c\u4e2d\u95f4\u6709\u4e00\u4e2a\u659c\u5761\uff1b\u6240\u4ee5\u5b83\u662f\u5148\u6c34\u5e73\u7684\uff0c\u518d\u659c\u5761\uff0c\u518d\u6c34\u5e73\u7684\u3002\u66f4\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u79cd\u51fd\u6570\u53eb\u505ahard sigmoid\u51fd\u6570\uff0c\u6df1\u5ea6\u5b66\u4e60\u4e2dpytorch\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a  \u8fd9\u5176\u5b9e\u5f88\u50cfReLU(Rectified Linear Unit)\u7684\u53d8\u4f53\u3002\u90a3\u4e48\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u56fe\uff0c\u53ef\u4ee5\u76f4\u89c2\u7684\u770b\u51fa\uff1a\u4e3a\u4ec0\u4e48\u4e00\u5806\u8fd9\u79cd\u975e\u7ebf\u6027\u51fd\u6570\u53ef\u4ee5\u62df\u5408\u5404\u79cd\u5404\u6837\u7684\u51fd\u6570\uff1a</p> <p></p> <p>\u5206\u6bb5\u7ebf\u6027\u66f2\u7ebf\u5c31\u53ef\u4ee5\u903c\u8fd1\u8fd9\u4e00\u4e2a\u8fde\u7eed\u7684\u66f2\u7ebf\uff0c\u5c31\u53ef\u4ee5\u903c\u8fd1\u6709\u89d2\u5ea6\u7684\u3001\u6709\u5f27\u5ea6\u7684\u8fd9\u4e00\u6761\u66f2\u7ebf\u3002 \u6240\u4ee5\u53ef\u4ee5\u7528\u5206\u6bb5\u7ebf\u6027\u66f2\u7ebf\u53bb\u903c\u8fd1\u4efb\u4f55\u7684\u8fde\u7eed\u7684\u66f2\u7ebf\uff0c\u800c\u6bcf\u4e2a\u5206\u6bb5\u7ebf\u6027\u66f2\u7ebf\u90fd\u53ef\u4ee5\u7528\u4e00\u5927\u5806\u84dd\u8272\u7684\u51fd\u6570\u7ec4\u5408\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u6709\u8db3\u591f\u7684\u84dd\u8272\u51fd\u6570\u628a\u5b83\u52a0\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u53d8\u6210\u4efb\u4f55\u8fde\u7eed\u7684\u66f2\u7ebf\u3002</p> <p>\u5f53\u7136\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u975e\u7ebf\u6027\u6027\u51fd\u6570\u4e0d\u6b62\u5206\u6bb5\u7ebf\u6027\u51fd\u6570\u3002\u6bd4\u5982sigmoid\uff1a  \u5b83\u7684\u56fe\u50cf\u548chard sigmoid\u7684\u56fe\u50cf\u5982\u4e0b\uff0c\u80fd\u591f\u76f4\u89c2\u770b\u5230\uff0c\u4e3a\u4ec0\u4e48hard sigmoid\u79f0\u4e3a\"hard\"\u4e86\uff1a</p> <p></p> <p>\u8fd9\u91cc\u5229\u7528b w c\u53c2\u6570\u53ef\u4ee5\u63a7\u5236sigmoid\u51fd\u6570\u7684\u5f62\u72b6\u3002\u5176\u4e2d\uff0cw\u53ef\u4ee5\u63a7\u5236\u201c\u659c\u7387\u201d\uff0cb\u53ef\u4ee5\u63a7\u5236\u504f\u79fb\u91cf\uff0cc\u53ef\u4ee5\u63a7\u5236\u9ad8\u5ea6\u3002\u5177\u4f53\u6548\u679c\u5982\u4e0b\uff1a </p> <p></p> <p>\u53ef\u60f3\u800c\u77e5\uff0c\u628a\u5404\u79cd\u4e0d\u4e00\u6837\u7684sigmoid\u51fd\u6570\u53e0\u52a0\u8d77\u6765\uff0c\u5c31\u80fd\u591f\u53bb\u903c\u8fd1\u5404\u79cd\u4e0d\u540c\u7684\u5206\u6bb5\u7ebf\u6027\u51fd\u6570\uff0c\u800c\u5206\u6bb5\u7ebf\u6027\u51fd\u6570\u53ef\u7528\u6765\u8fd1\u4f3c\u5404\u79cd\u4e0d\u540c\u7684\u8fde\u7eed\u51fd\u6570\u3002\u6240\u4ee5\u6362\u800c\u8a00\u4e4b\uff0c\u4e0d\u540c\u7684sigmoid\u51fd\u6570\u53e0\u52a0\u8d77\u6765\u53ef\u4ee5\u62df\u5408\u5404\u79cd\u8fde\u7eed\u7684\u51fd\u6570\u3002</p>"},{"location":"machine_learning/Datawhale/note.html#_4","title":"\u77e9\u9635\u8868\u793a","text":"<p>\u5047\u5982\u8bf4\u7528\u4e09\u4e2ahard sigmoid\u51fd\u6570\u6765\u8fdb\u884c\u62df\u5408\uff1a</p> <p></p> <p>\u90a3\u4e48\u6362\u4e00\u4e2a\u7b80\u5355\u7684scenario\uff1a\u4f7f\u7528\u4e09\u4e2asigmoid function\u8fdb\u884c\u62df\u5408\u3002\u8003\u8651\u4e09\u4e2a\u6570\u636e\u5582\u8fdb\u53bb\uff1a \\((x_i,y_i)\\hspace{0.3cm}i=1,2,3\\), \u90a3\u4e48\u6211\u5c31\u5e0c\u671b\u80fd\u591f\u627e\u5230\u5408\u9002\u7684\\(b_i\\)\u548c\\(w_{ij}\\)\uff08\u4ee3\u8868\u7b2ci\u4e2asigmoid\u91cc\u9762\u4e58\u7ed9\u7b2cj\u4e2a\u7279\u5f81\u7684\u6743\u91cd\uff09\u3002\u9996\u5148\u5bf9\u6570\u636e\u8fdb\u884c\u6743\u91cd\u5206\u914d\uff08\u6216\u8005\u8bf4\uff0c\u5bf9\u7279\u5f81\u5206\u914d\u6743\u91cd\uff0c\u8fd9\u65f6\u5019\u90fd\u8fd8\u662f\u7ebf\u6027\u64cd\u4f5c\uff09  \u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u77e9\u9635\u5c31\u6392\u5f97\u4e0a\u7528\u573a\u4e86\uff1a  \u5728\u8fd9\u91cc\uff1a\\(r = b + Wx\\), \u4e4b\u540e\u7ecf\u8fc7sigmoid\u51fd\u6570\u4ee5\u5f15\u5165\u975e\u7ebf\u6027\u6027\u3002\uff08\u8fd9\u4e00\u6b65\u53c8\u79f0\u4e3a\uff1a\u7ecf\u8fc7\u6fc0\u6d3b\u51fd\u6570\uff09\uff0c\u8868\u793a\u4e3a\uff1a\\(a = \\sigma(r)\\)</p> <p></p> <p>\u5f15\u5165\u4e86\u975e\u7ebf\u6027\u6027\uff0c\u6700\u540e\u7684\u4e09\u4e2a\u975e\u7ebf\u6027\u51fd\u6570\u4e5f\u5e94\u8be5\u53c8\u6743\u91cd\u5206\u914d\uff0c\u56e0\u6b64\u5f15\u5165\u7ebf\u6027\u6027\u5206\u914d\u4e09\u4e2a\u975e\u7ebf\u6027\u6027\u51fd\u6570\u7684\u6743\u91cd\uff0c\u5e76\u914d\u4e0a\u504f\u7f6e\uff1a\\(y=b+\\textbf{c}^{T}\\textbf{a}\\)</p> <p></p> <p>\u4e3a\u4e86\u65b9\u4fbf\u8868\u793a\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u672a\u77e5\u53c2\u6570\u90fd\u8fdb\u884c\u62fc\u63a5\uff0c\u7528\\(\\theta\\)\u8868\u793a\u3002</p> <p></p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u4f7f\u7528\u4e86\u4e09\u4e2asigmoid\u51fd\u6570\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u53ef\u4ee5\u9009\u62e9\u5f88\u591a\u4e2asigmoid\u51fd\u6570\uff0c\u5b83\u7684\u6570\u91cf\u5176\u5b9e\u4e5f\u662f\u8d85\u53c2\u6570\u3002\u4e00\u822csigmoid\u8d8a\u591a\u53ef\u4ee5\u4ea7\u751f\u6709\u8d8a\u591a\u6bb5\u7ebf\u7684\u5206\u6bb5\u7ebf\u6027\u51fd\u6570\uff0c\u53ef\u4ee5\u903c\u8fd1\u8d8a\u590d\u6742\u7684\u51fd\u6570\u3002</p>"},{"location":"machine_learning/Datawhale/note.html#_5","title":"\u5b9a\u4e49\u635f\u5931\u3001\u4f18\u5316\u3001\u68af\u5ea6\u66f4\u65b0","text":"<p>\u63a5\u4e0b\u6765\u8981\u5b9a\u4e49\u635f\u5931\u3002\u4e4b\u524d\u662f L(w, b)\uff0c\u56e0\u4e3a w \u8ddf b \u662f\u672a\u77e5\u7684\u3002\u73b0\u5728\u672a\u77e5\u7684\u53c2\u6570\u5f88\u591a\u4e86\uff0c\u518d\u628a\u5b83\u4e00\u4e2a\u4e00\u4e2a\u5217\u51fa\u6765\u592a\u7d2f\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u7528 \u03b8 \u6765\u7edf\u8bbe\u6240\u6709\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u635f\u5931\u51fd\u6570\u5c31\u53d8\u6210 L(\u03b8)\u3002\u635f\u5931\u51fd\u6570\u80fd\u591f\u5224\u65ad \u03b8 \u7684\u597d\u574f\uff0c\u5176\u8ba1\u7b97\u65b9\u6cd5\u8ddf\u521a\u624d\u53ea\u6709\u4e24\u4e2a\u53c2\u6570\u7684\u65f6\u5019\u662f\u4e00\u6837\u7684\u3002\u5148\u7ed9\u5b9a \u03b8 \u7684\u503c\uff0c\u5373\u67d0\u4e00\u7ec4 \\(\\textbf{W}, \\textbf{b}, c^T, b\\)\u7684\u503c\uff0c\u518d\u628a\u4e00\u79cd\u7279\u5f81 x \u4ee3\u8fdb\u53bb\uff0c\u5f97\u5230\u4f30\u6d4b\u51fa\u6765\u7684 y\uff0c\u518d\u8ba1\u7b97\u4e00\u4e0b\u8ddf\u771f\u5b9e\u7684\u6807\u7b7e\u4e4b\u95f4\u7684\u8bef\u5dee e\u3002\u628a\u6240\u6709\u7684\u8bef\u5dee\u901a\u901a\u52a0\u8d77\u6765\uff0c\u5c31\u5f97\u5230\u635f\u5931\u3002</p> <p>\u4e00\u5f00\u59cb\u968f\u673a\u521d\u59cb\u5316\u53c2\u6570\uff0c\u7136\u540e\u5f97\u5230\u4e86\u7b2c\u4e00\u4e2a\\(\\theta_0\\)\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u672a\u77e5\u53c2\u6570\u5bf9L\u7684\u5fae\u5206\uff0c\u5f97\u5230\u5411\u91cfg:</p> <p></p> <p>\u5047\u8bbe\u6709 1000 \u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u5411\u91cf\u7684\u957f\u5ea6\u5c31\u662f 1000\uff0c\u8fd9\u4e2a\u5411\u91cf\u4e5f\u79f0\u4e3a\u68af\u5ea6\uff0c\\(\u2207L\\) \u4ee3\u8868\u68af\u5ea6\u3002\\(L(\u03b80) (\u662f\u6307\u8ba1\u7b97\u68af\u5ea6\u7684\u4f4d\u7f6e\uff0c\u662f\u5728 \u03b8 \u7b49\u4e8e \\(\u03b8_0\\)\u7684\u5730\u65b9\u3002\u8ba1\u7b97\u51fa g \u540e\uff0c\u63a5\u4e0b\u6765\u8ddf\u65b0\u53c2\u6570\uff0c\\)\u03b8_0\\) \u4ee3\u8868\u5b83\u662f\u4e00\u4e2a\u8d77\u59cb\u7684\u503c\uff0c\u5b83\u662f\u4e00\u4e2a\u968f\u673a\u9009\u7684\u8d77\u59cb\u7684\u503c\uff0c\u4ee3\u8868 \\(\u03b8_1\\)\u66f4\u65b0\u8fc7\u4e00\u6b21\u7684\u7ed3\u679c\uff0c\\(\u03b8_2^0\\) \u51cf\u6389\u5fae\u5206\u4e58\u4ee5\uff0c\u51cf\u6389 \u03b7 \u4e58\u4e0a\u5fae\u5206\u7684\u503c\uff0c\u5f97\u5230 \\(\u03b8_2^1\\)\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c31\u53ef\u4ee5\u628a 1000 \u4e2a\u53c2\u6570\u90fd\u66f4\u65b0\u4e86\u3002</p> <p></p> <p>\u8fd9\u79cd\u64cd\u4f5c\u4f1a\u91cd\u590d\u66f4\u65b0\u672a\u77e5\u53c2\u6570\uff0c\u76f4\u5230\u8ba1\u7b97\u51fa\u68af\u5ea6\u4e3a\u96f6\uff0c\u867d\u7136\u8bf4\u5b9e\u73b0\u4e0a\u51e0\u4e4e\u4e0d\u53ef\u80fd\u505a\u5230\uff0c\u4f46\u662f\u5e94\u8be5\u4f1a\u5c3d\u53ef\u80fd\u7684\u903c\u8fd1\u3002</p> <p>\u5b9e\u9645\u4e0a\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u7684\u65f6\u5019\uff0c\u4f1a\u628aN\u7b14\u6570\u636e\u968f\u673a\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684\u6279\u91cf\uff08batch\uff09\u3002\u6bcf\u4e00\u4e2abatch\u91cc\u9762\u6709B\u7b14\u6570\u636e\u3002\u672c\u6765\u662f\u6574\u4e2aN\u7b14\u6570\u636e\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u635f\u5931\uff0c\u4f46\u662f\u73b0\u5728\u4e00\u4e2aBatch\u4e00\u4e2a\u635f\u5931\u3002\u6240\u4ee5\u5b9e\u6218\u4e2d\uff0c\\(B_1\\)\u62ff\u51fa\u6765\uff0c\u8ba1\u7b97\u635f\u5931\uff0c\u66f4\u65b0\u53c2\u6570\uff0c\u7136\u540e\u62ff\u51fa\\(B_2\\), \u518d\u8ba1\u7b97\u4e00\u6b21\u635f\u5931\uff0c\u66f4\u65b0\u53c2\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6700\u7ec8\u4f1a\u628a\u6240\u6709\u7684\u6279\u91cf\u90fd\u4f7f\u7528\u8fc7\uff0c\u8fd9\u6837\u79f0\u4e3a\u4e00\u4e2a\u56de\u5408\uff08epoch\uff09\u3002</p> <p>\u901a\u5e38\uff0c\\(\u6279\u91cf\u5927\u5c0f\uff08batch size\uff09*\u6279\u91cf\u6570\u91cf=\u603b\u6837\u672c\uff08example\uff09\u6570\u91cf\\)\uff0c\u800cbatch size\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u8d85\u53c2\u6570\u3002</p>"},{"location":"machine_learning/Datawhale/note.html#_6","title":"\u6a21\u578b\u53d8\u5f62","text":"<p>\u4ecb\u7ecd\u53e6\u4e00\u79cd\u6fc0\u6d3b\u51fd\u6570\uff1a\u4fee\u6b63\u7ebf\u6027\u5355\u5143(Rectified Linear Unit, ReLU)\u3002\u56fe\u50cf\u6709\u4e00\u4e2a\u6c34\u5e73\u7684\u7ebf\uff0c\u8d70\u5230\u67d0\u4e2a\u5730\u65b9\u6709\u4e00\u4e2a\u8f6c\u6298\u7684\u70b9\uff0c\u53d8\u6210\u4e00\u4e2a\u659c\u5761\uff0c\u516c\u5f0f\u4e3a\uff1a  \u673a\u5668\u5b66\u4e60\u4e2d\uff0cSigmoid\u6216ReLU\u79f0\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff08activation function\uff09\uff0c\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u8fd8\u88ab\u79f0\u4e3a\u795e\u7ecf\u5143\uff08neuron\uff09\uff0c\u5f88\u591a\u795e\u7ecf\u5143\u7684\u7f51\u7edc\u79f0\u4e3a\u795e\u7ecf\u7f51\u7edc\uff08neural network\uff09\u3002\u6bcf\u4e00\u6392\u79f0\u4e3a\u4e00\u5c42\uff0c\u79f0\u4e3a\u9690\u85cf\u5c42\uff08hidden layer\uff09\u3002</p> <p></p> <p>\u4f46\u662f\u4e0d\u662f\u76f2\u76ee\u52a0\u6df1\u5ea6\u5c42\u6570\u5c31\u4e00\u5b9a\u6709\u66f4\u597d\u7684\u8868\u73b0\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u6709\u8fc7\u62df\u5408\uff08overfitting\uff09: \u5728\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684\u7ed3\u679c\u662f\u4e0d\u4e00\u81f4\u7684\u3002\u5728\u5c42\u6570\u9ad8\u7684\u7f51\u7edc\u4e2d\uff0c\u672a\u77e5\u53c2\u6570\u7684\u66f4\u65b0\u5c31\u8981\u7528\u5230\u53cd\u5411\u4f20\u64ad\uff08Backward Propagation, BP\uff09\u3002</p> <p>\u4e00\u5f20\u56fe\u603b\u7ed3\u673a\u5668\u5b66\u4e60\u6846\u67b6\uff1a </p> <p></p>"},{"location":"machine_learning/Datawhale/note.html#_7","title":"\u5b9e\u8df5\u65b9\u6cd5\u8bba","text":""},{"location":"machine_learning/Datawhale/note.html#_8","title":"\u6a21\u578b\u504f\u5dee\u95ee\u9898","text":"<p>\u5047\u8bbe\u6a21\u578b\u8fc7\u4e8e\u7b80\u5355\uff0c\u4f8b\u5982\\(\\theta_i, i=1,2,...\\)\u5f97\u5230\u7684\\(f_{\\theta_i}(x)\\)\u51fd\u6570\u96c6\u5408\uff0c\u8fd9\u4e2a\u51fd\u6570\u96c6\u5408\u4e5f\u53ef\u80fd\u592a\u5c0f\u4e86\uff0c\u53ef\u4ee5\u8ba9\u635f\u5931\u53d8\u4f4e\u7684\u51fd\u6570\u4e0d\u5728\u6a21\u578b\u63cf\u8ff0\u8303\u56f4\u5185\uff08\u6216\u8005\u635f\u5931\u8db3\u591f\u4f4e\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u627e\u5230\u4e86\\(\\theta^*\\)\uff0c\u635f\u5931\u8fd8\u662f\u4e0d\u591f\u4f4e\u3002\u8fd9\u79cd\u60c5\u51b5\u5c31\u7c7b\u4f3c\u4e8e\u60f3\u8981\u5728\u5927\u6d77\u91cc\u9762\u635e\u9488\uff0c\u4f46\u662f\u7ed3\u679c\u9488\u6839\u672c\u4e0d\u5728\u6d77\u91cc\u9762\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u91cd\u65b0\u8bbe\u8ba1\u6a21\u578b\u4e86\u3002</p> <p></p>"},{"location":"machine_learning/Datawhale/note.html#_9","title":"\u4f18\u5316\u95ee\u9898","text":"<p>\u68af\u5ea6\u4e0b\u964d\u8fdb\u884c\u4f18\u5316\u53ef\u80fd\u6709\u5f88\u591a\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4\u5361\u5728\u5c40\u90e8\u6700\u4f18\u89e3\u91cc\u9762\u3002\u8fd9\u5c31\u50cf\u662f\u5927\u6d77\u635e\u9488\uff0c\u9488\u786e\u5b9e\u5728\u6d77\u91cc\uff0c\u4f46\u662f\u635e\u4e0d\u8d77\u6765\u3002\u90a3\u4e48\u635f\u5931\u4e0d\u591f\u4f4e\u7684\u65f6\u5019\uff0c\u5230\u5e95\u662f\u6a21\u578b\u504f\u5dee\u8fd8\u662f\u4f18\u5316\u95ee\u9898\u5462\uff1f\u4e00\u4e2a\u5224\u65ad\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u6bd4\u8f83\u4e0d\u540c\u7684\u6a21\u578b\u6765\u5224\u65ad\u6a21\u578b\u591f\u4e0d\u591f\u5927\u3002\u4f8b\u5982\u6b8b\u5dee\u7f51\u7edc\u4e2d\u7684\u4e00\u4e2a\u5b9e\u9a8c\u91cc\u9762\uff0c\u4e00\u4e2a\u7f51\u7edc20\u5c42\uff0c\u4e00\u4e2a\u7f51\u7edc56\u5c42\uff0c\u4f46\u662f\u53d1\u73b0\u8bad\u7ec3\u6570\u636e\u4e0a\u976256\u5c42\u7684loss\u53cd\u800c\u66f4\u9ad8\u3002\u4ece\u4e0b\u56fe\u6765\u770b\uff0c\u8bf4\u660e\u662f56\u5c42\u7684\u7f51\u7edc\u4f18\u5316\u505a\u7684\u4e0d\u597d\uff1a</p> <p></p> <p>\u4e3a\u4ec0\u4e48\u80fd\u4e0b\u8fd9\u4e2a\u5224\u65ad\uff1f\u56e0\u4e3a56\u5c42\u7f51\u7edc\u7406\u8bba\u4e0a\u7b1420\u5c42\u66f4\u7075\u6d3b\uff0c\u4f46\u662floss\u5374\u964d\u4e0d\u4e0b\u6765\uff0c\u8bf4\u660e\u53ea\u80fd\u662f\u4f18\u5316\u8fc7\u7a0b\u7684\u95ee\u9898\u4e86\u3002</p> <p>\u4e00\u4e2a\u5efa\u8bae\u662f\u770b\u5230\u4e00\u4e2a\u4ece\u6765\u6ca1\u6709\u505a\u8fc7\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5148\u8dd1\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u3001\u6bd4\u8f83\u6d45\u7684\u7f51\u7edc\uff0c\u6216\u751a\u81f3\u7528\u4e00\u4e9b\u975e\u6df1\u5ea6\u5b66\u4e60\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u7ebf\u6027\u6a21\u578b\u3001\u652f\u6301\u5411\u91cf\u673a\uff08Support Vector Machine\uff0cSVM\uff09\uff0cSVM \u53ef\u80fd\u662f\u6bd4\u8f83\u5bb9\u6613\u505a\u4f18\u5316\u7684\uff0c\u5b83\u4eec\u6bd4\u8f83\u4e0d\u4f1a\u6709\u4f18\u5316\u5931\u8d25\u7684\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8fd9\u4e9b\u6a21\u578b\u5b83\u4f1a\u7aed\u5c3d\u5168\u529b\u7684\uff0c\u5728\u5b83\u4eec\u7684\u80fd\u529b\u8303\u56f4\u4e4b\u5185\uff0c\u627e\u51fa\u4e00\u7ec4\u6700\u597d\u7684\u53c2\u6570\uff0c\u5b83\u4eec\u6bd4\u8f83\u4e0d\u4f1a\u6709\u5931\u8d25\u7684\u95ee\u9898\u3002\u56e0\u6b64\u53ef\u4ee5\u5148\u8bad\u7ec3\u4e00\u4e9b\u6bd4\u8f83\u6d45\u7684\u6a21\u578b\uff0c\u6216\u8005\u662f\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u6a21\u578b\uff0c\u5148\u77e5\u9053\u8fd9\u4e9b\u7b80\u5355\u7684\u6a21\u578b\uff0c\u5230\u5e95\u53ef\u4ee5\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u635f\u5931\u3002</p> <p>\u4f46\u662f\u540c\u65f6\u4e5f\u8981\u5224\u65ad\u6709\u6ca1\u6709\u53ef\u80fd\u8fc7\u62df\u5408\u4e86\uff1a\u5982\u679c\u8bad\u7ec3\u6570\u636e\u4e0a\u9762\u635f\u5931\u5c0f\uff0c\u4f46\u662f\u6d4b\u8bd5\u6570\u636e\u635f\u5931\u5927\uff0c\u90a3\u4e48\u53ef\u80fd\u771f\u7684\u8fc7\u62df\u5408\u4e86\u3002\u56de\u5230\u6b8b\u5dee\u7f51\u7edc\u7684\u5b9e\u9a8c\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c56\u5c42\u7684\u7f51\u7edc\u662f\u8fc7\u62df\u5408\uff0c\u90a3\u4e48\u5e94\u8be5\u8bad\u7ec3\u7684\u65f6\u5019\uff0c56\u5c42\u7f51\u7edc\u7684loss\u5c31\u5f88\u4f4e\uff0c\u81f3\u5c11\u548c20\u5c42\u7f51\u7edc\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u5bf9\u4e8e56\u5c42\u7f51\u7edc\u6765\u8bf4\uff0c\u8bad\u7ec3\u635f\u5931\u548c\u6d4b\u8bd5\u635f\u5931\u90fd\u5f88\u9ad8\u3002\u6240\u4ee5\u8fd9\u4e0d\u662f\u8fc7\u62df\u5408\uff0c\u8fdb\u800c\u5e2e\u52a9\u63a8\u51fa\u7ed3\u8bba\uff1a56\u5c42\u7f51\u7edc\u7684\u4f18\u5316\u51fa\u95ee\u9898\u4e86\u3002</p>"},{"location":"machine_learning/Datawhale/note.html#_10","title":"\u8fc7\u62df\u5408","text":"<p>\u4e3e\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff1a\u673a\u5668\u5b66\u4e60\u5230\u4e86\u4e00\u4e2a\u5f88\u5783\u573e\u7684\u51fd\u6570\uff1a\u4ec5\u4ec5\u662f\u6ee1\u8db3\u4e86\u8f93\u5165\u8bad\u7ec3\u96c6\u6570\u636ex\u7684\u65f6\u5019\uff0c\u8f93\u51fa\u7684\u662f\u8bad\u7ec3\u96c6\u5bf9\u5e94\u7684y\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u8f93\u5165x\u6839\u672c\u4e0d\u600e\u4e48\u7ba1\u7ed3\u679c\u548b\u6837\u3002\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c31\u662f\u5bf9\u8bad\u7ec3\u96c6\u6570\u636e\u62df\u5408\u8f83\u597d\uff0c\u4f46\u662f\u5bf9\u6d4b\u8bd5\u673a\u6570\u636e\u62df\u5408\u8f83\u5dee\u3002\u89c1\u4e0b\u56fe\uff1a </p> <p>\u90a3\u4e48\u5982\u4f55\u89e3\u51b3\u8fc7\u62df\u5408\u7684\u95ee\u9898\u5462\uff1f\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u65b9\u5411\uff1a</p> <p>\u4e00\u662f\u589e\u52a0\u8bad\u7ec3\u96c6\uff0c\u84dd\u8272\u7684\u70b9\u53d8\u591a\u4e86\uff0c\u867d\u7136\u6a21\u578b\u7075\u6d3b\u6027\u5f88\u5927\uff0c\u4f46\u662f\u7531\u4e8e\u70b9\u6570\u91cf\u591a\u7684\u539f\u56e0\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u9650\u5236\u4f4f\u3002\u5982\u679c\u8bad\u7ec3\u96c6\u5b9a\u6b7b\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u6570\u636e\u589e\u5f3a\uff08data augmentation\uff09\u3002\u6570\u636e\u589e\u5f3a\u5c31\u662f\u6839\u636e\u95ee\u9898\u7684\u7406\u89e3\u521b\u9020\u51fa\u65b0\u7684\u6570\u636e\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5728\u505a\u56fe\u50cf\u8bc6\u522b\u7684\u65f6\u5019\uff0c\u5e38\u505a\u7684\u4e00\u4e2a\u62db\u5f0f\u662f\uff0c\u5047\u8bbe\u8bad\u7ec3\u96c6\u91cc\u9762\u6709\u67d0\u4e00\u5f20\u56fe\u7247\uff0c\u628a\u5b83\u5de6\u53f3\u7ffb\u8f6c\uff0c\u6216\u8005\u662f\u628a\u5b83\u5176\u4e2d\u4e00\u5757\u622a\u51fa\u6765\u653e\u5927\u7b49\u7b49\u3002\u5bf9\u56fe\u7247\u8fdb\u884c\u5de6\u53f3\u7ffb\u8f6c\uff0c\u6570\u636e\u5c31\u53d8\u6210\u4e24\u500d\u3002\u4f46\u662f\u6570\u636e\u589e\u5f3a\u4e0d\u80fd\u591f\u968f\u4fbf\u4e71\u505a\u3002\u5728\u56fe\u50cf\u8bc6\u522b\u91cc\u9762\uff0c\u5f88\u5c11\u770b\u5230\u6709\u4eba\u628a\u56fe\u50cf\u4e0a\u4e0b\u98a0\u5012\u5f53\u4f5c\u589e\u5f3a\u3002\u56e0\u4e3a\u8fd9\u4e9b\u56fe\u7247\u90fd\u662f\u5408\u7406\u7684\u56fe\u7247\uff0c\u5de6\u53f3\u7ffb\u8f6c\u56fe\u7247\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5230\u91cc\u9762\u7684\u5185\u5bb9\u3002\u4f46\u628a\u56fe\u50cf\u4e0a\u4e0b\u98a0\u5012\uff0c\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u8bad\u7ec3\u96c6\u6216\u771f\u5b9e\u4e16\u754c\u91cc\u9762\u4f1a\u51fa\u73b0\u7684\u56fe\u50cf\u3002\u5982\u679c\u7ed9\u673a\u5668\u6839\u636e\u5947\u602a\u7684\u56fe\u50cf\u5b66\u4e60\uff0c\u5b83\u53ef\u80fd\u5c31\u4f1a\u5b66\u5230\u5947\u602a\u7684\u4e1c\u897f\u3002\u6240\u4ee5\u6570\u636e\u589e\u5f3a\uff0c\u8981\u6839\u636e\u5bf9\u6570\u636e\u7684\u7279\u6027\u4ee5\u53ca\u8981\u5904\u7406\u7684\u95ee\u9898\u7684\u7406\u89e3\uff0c\u6765\u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u589e\u5f3a\u7684\u65b9\u5f0f\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u65b9\u5411\u662f\u7ed9\u6a21\u578b\u4e00\u4e9b\u9650\u5236\uff0c\u8ba9\u6a21\u578b\u4e0d\u8981\u6709\u8fc7\u5927\u7684\u7075\u6d3b\u6027\u3002\u9650\u5236\u53ef\u4ee5\u6709\u5982\u4e0b\u65b9\u6cd5\uff1a</p> <ul> <li>\u7ed9\u6a21\u578b\u6bd4\u8f83\u5c11\u7684\u53c2\u6570\u3002\u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6765\u8bf4\uff0c\u5c31\u662f\u51cf\u5c11\u795e\u7ecf\u5143\u7684\u6570\u91cf\uff0c\u6216\u8005\u6a21\u578b\u5171\u7528\u53c2\u6570\u3002\u4f8b\u5982\u5168\u8fde\u63a5\u7f51\u7edc\u7075\u6d3b\u6027\u5f88\u9ad8\uff0c\u800cCNN\u5c31\u6709\u4e00\u5b9a\u9650\u5236\uff0c\u6240\u4ee5\u5168\u8fde\u63a5\u7f51\u7edc\u627e\u51fa\u6765\u7684\u51fd\u6570\u96c6\u5408\u5176\u5b9e\u662f\u6bd4\u8f83\u5927\u7684\uff0c\u800cCNN\u627e\u51fa\u6765\u7684\u51fd\u6570\u96c6\u5408\u5c31\u6bd4\u8f83\u5c11\u3002CNN\u5728\u56fe\u50cf\u4e0a\u53cd\u800c\u505a\u5f97\u66f4\u597d\u3002</li> <li>\u65e9\u505c\uff08early stopping\uff09\u3001\u6b63\u5219\u5316\uff08regularization\uff09\u3001\u4e22\u5f03\uff08dropout\uff09(\u795e\u7ecf\u5143\u968f\u673a\u5931\u6d3b)</li> </ul>"},{"location":"machine_learning/Datawhale/note.html#_11","title":"\u4ea4\u53c9\u9a8c\u8bc1","text":"<p>\u6bd4\u8f83\u5408\u7406\u7684\u662f\uff1a\u8bad\u7ec3\u7684\u6570\u636e\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0ctraining set and validation set\u3002\u6bd4\u5982\u8bf490%\u8bad\u7ec3\u96c6\uff0c10%\u9a8c\u8bc1\u96c6\u3002\u5728\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3\u7684\u6a21\u578b\u4f1a\u4f7f\u7528\u9a8c\u8bc1\u96c6\u6765\u8861\u91cf\u5b83\u4eec\u7684\u5206\u6570\uff0c\u7136\u540e\u6839\u636e\u9a8c\u8bc1\u96c6\u4e0a\u7684\u5206\u6570\u53bb\u6311\u9009\u5408\u9002\u7684\u6a21\u578b\uff0c\u5bf9testing set\u8fdb\u884c\u6d4b\u8bd5\u3002</p>"},{"location":"machine_learning/Datawhale/note.html#_12","title":"\u4e0d\u5339\u914d","text":"<p>\u6709\u7684\u65f6\u5019\u67d0\u4e00\u4e2a\u9884\u6d4b\u7684\u7ed3\u679c\u548c\u771f\u5b9e\u7ed3\u679c\u6709\u8f83\u5927\u7684\u4e0d\u540c\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u589e\u52a0\u6570\u636e\u4e0d\u4e00\u5b9a\u80fd\u8ba9\u6a21\u578b\u505a\u7684\u66f4\u597d\uff0c\u8fd9\u79cd\u95ee\u9898\u7684\u89e3\u51b3\u9700\u8981\u770b\u5339\u4e0d\u5339\u914d\u5bf9\u6570\u636e\u672c\u8eab\u7684\u7406\u89e3\u3002\u6211\u4eec\u53ef\u80fd\u8981\u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u4ea7\u751f\u65b9\u5f0f\u6709\u4e00\u4e9b\u7406\u89e3\uff0c\u624d\u80fd\u5224\u65ad\u662f\u4e0d\u662f\u51fa\u73b0\u4e86\u4e0d\u5339\u914d\u60c5\u51b5\u3002\u6216\u8005\u8bf4\uff1a\u5224\u65ad\u6d4b\u8bd5\u673a\u548c\u8bad\u7ec3\u96c6\u7684distribution.</p> <p></p>"},{"location":"sequence%20model/sequence_model.html","title":"Sequence Model","text":"<p>\u5e8f\u5217\u6a21\u578b\u65e0\u5904\u4e0d\u5728, \u4f8b\u5982\u97f3\u9891, \u751f\u6210\u6587\u5b57\u6bb5\u843d, \u7b49\u7b49, \u8fd9\u4e9b\u6570\u636e\u90fd\u662f\u8ddf\u5e8f\u5217\u606f\u606f\u76f8\u5173 </p>"},{"location":"sequence%20model/sequence_model.html#notation","title":"Notation","text":"<p>\u5047\u5982\u8bf4\u6709\u4e00\u4e2a\u5728\u53e5\u5b50\u4e2d\u627e\u5230\u4eba\u540d\u7684\u4efb\u52a1, \u8f93\u5165\u7684\u662f\u4e00\u4e2a\u5305\u542b\u4e869\u4e2a\u5355\u8bcd\u7684token, \u8f93\u51fa\u7684\u662f, \u5047\u5982\u8bf4, \u662f9\u4e2atoken\u6765\u8868\u793a\u5404\u81ea\u662f\u5426\u662f\u4eba\u540d\u7684\u4e00\u90e8\u5206. \u90a3\u4e48\u5728\u8fd9\u4e2a\u60c5\u666f\u4e2d, \u8f93\u5165\u7684x\u6bcf\u4e00\u4e2a\u90fd\u662f<code>x^&lt;i&gt;</code>\u8bb0\u53f7\u7528\u6765\u8868\u793a, y\u540c\u7406. \u90a3\u4e48\u6709\u7684\u662f\u65f6\u5019\u5904\u7406\u7684\u6570\u636e\u5f88\u591a, \u90a3\u4e48\u5706\u62ec\u53f7\u5c31\u662f\u4ee3\u8868\u7b2c\u51e0\u4e2a\u6837\u672c, \u7136\u540e\u5c16\u62ec\u53f7\u4ee3\u8868\u7b2c\u51e0\u4e2atoken. </p> <p>\u90a3\u4e48\u5f88\u81ea\u7136\u7684\u5c31\u80fd\u63d0\u51fa\u7591\u95ee: \u5982\u4f55\u7528<code>x&lt;i&gt;</code>, \u6765\u4ee3\u8868\u4e00\u4e2a\u5355\u8bcd\u5462? </p> <p>\u4e00\u79cd\u76f4\u89c2\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u5b57\u5178, \u4ecea, \u7b2c\u4e00\u4e2a\u5355\u8bcd\u5f00\u59cb, \u4e00\u76f4\u5230\u6700\u540e, \u5047\u5982\u8bf4\u662fZulu, \u6bcf\u4e00\u4e2a\u90fd\u7f16\u4e0a\u53f7. \u4e00\u822c\u6765\u8bf4, \u5e38\u89c1\u7684\u5546\u52a1\u516c\u53f8\u6240\u4f7f\u7528\u7684\u5b57\u5178, \u5dee\u4e0d\u591a\u6570\u91cf\u572830000-50000, \u90a3\u4e48100000\u4ee5\u4e0a\u7684\u4e5f\u5e76\u4e0d\u5c11\u89c1. </p> <p>\u90a3\u4e48\u6709\u4e86\u8fd9\u4e2a\u5b57\u5178, \u90a3\u4e48\u5c31\u53ef\u4ee5\u91c7\u7528\u72ec\u70ed\u7f16\u7801(One Hot). \u5047\u5982\u8bf4\u6211\u4eec\u91c7\u7528\u7684\u5b57\u5178\u662f10000\u7684\u4f53\u91cf, \u90a3\u4e48\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u8f93\u5165\u76849\u4e2a\u5355\u8bcd\u4e2d, \u6bcf\u4e00\u4e2a\u5355\u8bcd\u90fd\u53ef\u4ee5\u752810000\u7ef4\u7684\u5411\u91cf\u8868\u793a, \u5176\u4e2d\u53ea\u6709\u5355\u8bcd\u6240\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u884c\u6570\u4e3a1, \u5176\u4ed6\u5730\u65b9\u90fd\u662f0. </p> <p></p> <p>\u90a3\u4e48\u76f8\u5f53\u4e8e\u6700\u540e\u662f\u8bad\u7ec3\u4e00\u4e2a\u4ecex\u5230y\u7684\u4e00\u4e2a\u6620\u5c04. \u90a3\u4e48\u5982\u4f55\u8bad\u7ec3\u8fd9\u6837\u7684\u4e00\u4e2a\u6620\u5c04\u5462? \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u76d1\u7763\u5b66\u4e60, \u56e0\u4e3ax y \u5176\u5b9e\u90fd\u5e94\u8be5\u662f\u6709\u6807\u51c6\u7b54\u6848, \u4e14\u6211\u4eec\u4f1a\u4eba\u5de5\u6807\u8bb0\u4e0a\u53bb\u7684. \u90a3\u4e48\u56e0\u6b64, \u6211\u4eec\u5f15\u51fa\u4e86RNN</p>"},{"location":"sequence%20model/sequence_model.html#recurrent-neural-network","title":"Recurrent Neural Network","text":"<p>\u90a3\u4e48\u9996\u5148\u76f4\u89c9\u4e0a\u53ef\u80fd\u63d0\u51fa\u7591\u95ee: \u4e3a\u4ec0\u4e48\u4e0d\u7528\u4e4b\u524d\u73b0\u6709\u7684network frame\u5462? \u4e4b\u524d\u7684MLP\u4e0d\u662f\u633a\u597d\u7684\u561b? \u4f46\u662f\u4e3b\u8981\u662f\u6709\u4e24\u4e2a\u95ee\u9898: \u7b2c\u4e00\u4e2a\u662f\u8f93\u51fa\u7684y\u7684feature\u7684\u6570\u91cf\u5176\u5b9e\u662f\u4e0d\u786e\u5b9a\u7684(\u4e0d\u662f\u6240\u6709\u7684\u4efb\u52a1\u90fd\u662f\u50cf\u8fd9\u4e00\u4e2a\u4efb\u52a1\u4e00\u6837, y\u8f93\u51fa\u7684feature\u7684\u6570\u91cf\u548cx\u7684\u4e00\u6837); \u7b2c\u4e8c\u4e2a\u662f\u8fd9\u6837\u7684\u795e\u7ecf\u7f51\u7edc\u65e0\u6cd5\u5b66\u4e60positional information, \u56e0\u4e3a\u539f\u6765\u7684\u795e\u7ecf\u7f51\u7edc\u662fpermutation-insensitive\u7684, \u4f46\u662f\u5e8f\u5217\u5374\u5bf9permutation\u5f02\u5e38\u654f\u611f. </p> <p></p> <p>\u90a3\u4e48\u4ec0\u4e48\u662fRNN ? </p> <p></p> <p>y1\u7684\u8f93\u51fa\u6765\u6e90\u4e8ex1, \u4f46\u662f\u5230\u4e86y2\u7684\u65f6\u5019, \u4e0d\u4ec5\u4ec5\u5b83\u7684\u63a8\u7406\u6765\u6e90\u4e8ex2, \u8fd8\u8981\u6e90\u4e8e\u524d\u4e00\u4e2a\u6a21\u5757\u6240\u4f20\u9012\u8fc7\u6765\u7684a1, \u7136\u540e\u5c31\u8fd9\u6837\u4e00\u76f4\u4ee5\u6b64\u7c7b\u63a8. \u90a3\u4e48\u5bf9\u4e8ey1\u6765\u8bf4, \u5b83\u7684\u63a8\u7406\u5176\u5b9e\u4e5f\u9700\u8981\u4e00\u4e2aa0, \u4f46\u662f\u4e00\u822c\u8fd9\u4e2aa0\u90fd\u662f\u96f6\u521d\u59cb\u5316. </p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8f93\u5165\u7684x\u9700\u8981\u7ecf\u8fc7\u4e00\u5c42\u6620\u5c04\u5904\u7406, \u624d\u80fd\u8fdb\u5165\u7f51\u7edc, \u800c\u8fd9\u4e2a\u6620\u5c04\u77e9\u9635\u7684\u53c2\u6570\u662f\u5171\u4eab\u7684; \u540c\u6837, \u8f93\u51fay\u7684\u65f6\u5019, \u5176\u5b9e\u662f\u8f93\u51fa\u5185\u5bb9\u7ecf\u8fc7\u4e00\u5c42\u6620\u5c04\u5904\u7406\u624d\u53d8\u6210y\u7684, \u800c\u8fd9\u5c42\u6620\u5c04\u77e9\u9635\u4e5f\u662f\u53c2\u6570\u5171\u4eab\u7684; \u66f4\u662f\u4e0d\u4ec5\u4ec5\u5982\u6b64, \u4f20\u9012<code>a&lt;t&gt;</code>\u7684\u65f6\u5019, \u4e5f\u662f\u67d0\u79cd\u8f93\u51fa\u7ecf\u8fc7\u6620\u5c04\u77e9\u9635\u53d8\u6210\u7684, \u800c\u8fd9\u5c42\u6620\u5c04\u77e9\u9635\u7684\u53c2\u6570\u4e5f\u662f\u5171\u4eab\u7684. \u5171\u4eab\u662f\u4ec0\u4e48\u610f\u601d? \u610f\u601d\u6307\u7684\u662f\u6bcf\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u8fd9\u4e2a\u77e9\u9635\u7684\u53c2\u6570\u603b\u662f\u4e00\u6837\u7684</p> <p>\u5728\u6709\u4e9b\u6559\u79d1\u6216\u8005\u8bba\u6587\u4e2d, \u4e3a\u4e86\u65b9\u4fbf, \u5c06RNN\u8868\u793a\u6210\u53f3\u8fb9\u8fd9\u4e2a\u6837\u5b50. </p> <p>\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d, \u53d1\u73b0y3\u7684\u8f93\u51fa\u4e0ex1 x2 x3\u6709\u5173, \u8fd9\u662f\u4e00\u4ef6\u975e\u5e38\u4e50\u4e8e\u89c1\u5230\u7684\u4e8b\u60c5. \u4f46\u662f\u4e5f\u6709\u7f3a\u70b9. \u6709\u7684\u65f6\u5019, \u5176\u5b9e\u5e8f\u5217\u6a21\u578b\u7684\"\u5e8f\u5217\u95ee\u9898\"\u4e0d\u4ec5\u4ec5\u662f\u540e\u9762\u7684token\u548c\u524d\u9762\u7684\u6709\u5173, \u6709\u7684\u65f6\u5019(\u4e14\u4e0d\u5c11\u89c1)\u524d\u9762token\u7684\u542b\u4e49\u4e5f\u548c\u540e\u9762\u7684token\u6709\u5173, \u4f46\u662f\u8fd9\u4e00\u70b9\u5728\u6a21\u578b\u4e2d\u6ca1\u6709\u4f53\u73b0. \u56fe\u4e2d\u5217\u4e3e\u51fa\u4e86\u4e00\u4e2a\u5f88\u751f\u52a8\u7684\u4f8b\u5b50, \u5173\u4e8eTeddy\u7a76\u7adf\u662f\u4e0d\u662f\u4eba\u540d. </p> <p>\u90a3\u4e48\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u5f0a\u7aef, \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u53cc\u5934\u5faa\u73af\u7f51\u7edc(BRNN), \u8fd9\u4e2a\u4e4b\u540e\u4f1a\u4ecb\u7ecd. </p> <p>\u90a3\u4e48<code>Wax Waac Wya</code>\u53c2\u6570\u8d77\u5230\u7684\u4f5c\u7528\u7a76\u7adf\u662f\u4ec0\u4e48\u5462?  \u6ce8\u610f\u5230\u5b57\u6bcd\u7684\u6392\u5217\u6709\u70b9\u5947\u602a, \u56e0\u6b64\u9996\u5148\u5148\u660e\u786e\u5b57\u6bcd\u7684\u542b\u4e49: \u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868: \u7528\u6765\u8ba1\u7b97\u4ec0\u4e48; \u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4ee3\u8868: \u8fd9\u4e2a\u77e9\u9635\u662f\u4e58\u5728\u8c01\u8eab\u4e0a. </p> <p></p> <p><code>a&lt;t&gt; y&lt;t&gt;</code>\u7684\u8ba1\u7b97\u5f0f\u5b50\u5df2\u7ecf\u653e\u5728\u4e86\u56fe\u7247\u91cc\u9762, \u5176\u4e2dg\u4ee3\u8868\u6fc0\u6d3b\u51fd\u6570, \u90a3\u4e48\u8fd9\u4e2a\u6fc0\u6d3b\u51fd\u6570\u5728\u8ba1\u7b97<code>a&lt;t&gt;</code>\u7684\u65f6\u5019\u5927\u591a\u662ftanh\u51fd\u6570, \u5f88\u5c11\u4f46\u662f\u4e5f\u53ef\u4ee5\u7528ReL:U\u51fd\u6570; \u800c\u5bf9\u4e8e<code>y&lt;t&gt;</code>\u6765\u8bf4, \u4e3b\u8981\u53d6\u51b3\u4e8e\u8f93\u51fa\u7c7b\u578b\u662f\u4ec0\u4e48, \u662fsoftmax\u8fd8\u662fsigmoid, \u90fd\u6709\u53ef\u80fd. </p> <p>\u4e3a\u4e86\u8fdb\u4e00\u6b65\u7b80\u5316\u7b26\u53f7\u4ee5\u7528\u6765\u8868\u793a\u590d\u6742\u7684\u7f51\u7edc, \u7528\u5411\u91cf\u5316\u7684\u5f62\u5f0f\u8fdb\u4e00\u6b65\u7b80\u5316: </p> <p></p> <p>## Backward Propagation through time </p> <p>\u867d\u7136\u8bf4\u5728\u5b9e\u9645\u7684\u7f16\u7a0b\u4e2d, \u6211\u4eec\u5b8c\u5168\u4e0d\u9700\u8981\u77e5\u9053backward propagation\u7a76\u7adf\u662f\u600e\u4e48\u8fdb\u884c\u7684, \u56e0\u4e3apytorch\u529f\u80fd\u8fc7\u4e8e\u5f3a\u5927. \u4f46\u662f\u6700\u597d\u8fd8\u662f\u7a0d\u5fae\u4e86\u89e3\u4e00\u4e0b\u53cd\u5411\u4f20\u64ad\u7a76\u7adf\u662f\u5982\u4f55\u8fdb\u884c\u7684</p> <p></p> <p>\u5411\u524d\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e4b\u524d\u5df2\u7ecf\u8bf4\u8fc7, \u90a3\u4e48\u5173\u4e8e\u635f\u5931\u51fd\u6570, \u4f9d\u7136\u4f7f\u7528\u7684\u662f\u5404\u81ea\u7684\u4ea4\u53c9\u71b5\u51fd\u6570; \u4e4b\u540e\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e0e\u4e4b\u524d\u7684\u65b9\u5411\u5b8c\u5168\u76f8\u53cd, \u4ee5\u8fd9\u4e2a\u6765\u5b9e\u73b0\u94fe\u5f0f\u6cd5\u5219\u7684\u6c42\u5bfc, \u6765\u8ba1\u7b97\u51fa\u5404\u4e2a\u8282\u70b9\u7684\u53c2\u6570\u7684delta\u503c, \u6700\u540e\u5b9e\u73b0\u68af\u5ea6\u4e0b\u964d\u548c\u53c2\u6570\u66f4\u65b0. \u56e0\u4e3a\u4e4b\u524d\u6b63\u5411\u4f20\u64ad\u7684\u65b9\u5411\u6b63\u597d\u662f\u65f6\u95f4\u65b9\u5411, \u56e0\u6b64\u53cd\u5411\u4f20\u64ad\u5c31\u6709\u4e86\u4e00\u4e2a\u975e\u5e38fancy\u7684\u540d\u5b57: Backward Propagation through time.</p>"},{"location":"sequence%20model/sequence_model.html#rnn","title":"\u4e0d\u4e00\u6837\u7684RNN","text":"<p>\u4e4b\u524d\u4ecb\u7ecd\u548c\u5206\u6790\u7684\u8fd9\u79cd\u60c5\u51b5\u90fd\u662fTx = Ty, \u5373\u8f93\u5165\u7684token\u6570\u91cf\u548c\u8f93\u51fa\u7684token\u6570\u91cf\u4e00\u81f4. \u4f46\u662f\u5f88\u591a\u60c5\u51b5\u5e76\u4e0d\u662f\u8fd9\u6837. architecture\u5206\u4e3a\u5f88\u591a\u79cd, \u4f8b\u5982many-to-many(\u4e4b\u524d\u7684\u90a3\u4e2a\u5c31\u662f), \u4e5f\u6709many-to-one(\u4f8b\u5982sentiment classification, \u6700\u540e\u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u6b63\u6574\u6570, \u4ee3\u8868\u5fc3\u60c5\u597d\u574f\u7a0b\u5ea6)</p> <p></p> <p>\u5f53\u7136\u8fd8\u6709one-to-many, \u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u4ee3\u8868\u97f3\u4e50\u98ce\u683c, \u7136\u540e\u8f93\u51fa\u662f\u4e00\u6bb5\u97f3\u9891. \u5728many-to-many\u4e2d\u8fd8\u6709\u4e00\u79cd\u975e\u5e38\u7279\u6b8a\u7684\u7ed3\u6784, \u9996\u5148\u7528encoder\u8bfb\u5165\u8fd9\u53e5\u8bdd, \u7136\u540e\u518d\u7528decoder\u8f93\u51fa\u7ffb\u8bd1\u7684\u5185\u5bb9, \u8fd9\u79cd\u7ed3\u6784\u6700\u51fa\u540d\u7684\u4f7f\u7528\u5728\u4e0d\u540c\u4e8e\u8bed\u8a00\u4e4b\u95f4\u7684\u7ffb\u8bd1, \u56e0\u4e3a\u7ffb\u8bd1\u7684\u53e5\u5b50\u4e4b\u95f4\u7684token\u6570\u91cf\u975e\u5e38\u6709\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684. </p> <p></p>"},{"location":"sequence%20model/sequence_model.html#language-model-and-sequence-generation","title":"Language model and sequence generation","text":"<p>\u4e00\u4e2a\u826f\u597d\u7684\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u5728\u542c\u5230\u4e00\u53e5\u8bdd\u4e4b\u540e\u4f1a\u8ba1\u7b97\u51fa\u5404\u79cd\u53ef\u80fd\u53e5\u5b50\u7684\u6982\u7387, \u7136\u540e\u518d\u6bd4\u8f83\u6982\u7387\u6700\u540e\u8f93\u51fa\u6700\u6709\u53ef\u80fd\u7684\u6587\u672c. \u90a3\u4e48\u5982\u4f55\u5efa\u7acb\u8fd9\u6837\u7684\u6a21\u578b\u5462? \u9996\u5148, Training set\u9700\u8981\u662f\u4e00\u4e2a\u5305\u542b\u82f1\u8bed\u6587\u672c\u7684\u975e\u5e38\u5927\u7684\u8bed\u6599\u5e93(corpus). </p> <p>\u5bf9\u4e8e\u8bed\u6599\u5e93\u7684\u6bcf\u4e00\u4e2a\u53e5\u5b50, \u9996\u5148\u6211\u4eec\u9700\u8981tokenize, \u5373\u7528one hot\u7f16\u7801. \u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u6700\u540e\u53ef\u4ee5\u52a0\u4e0a\u4e00\u4e2a<code>&lt;EOS&gt;</code>\u7684token, \u4ee3\u8868\u6b64\u5904\u662fEnd of Sentence. \u540c\u65f6, \u5982\u679c\u53d1\u73b0\u4e86\u5b57\u5178\u91cc\u9762\u6ca1\u6709\u7684\u5355\u8bcd, \u53ef\u4ee5\u7528<code>&lt;UNK&gt;</code>token\u4ee3\u8868Unknown</p> <p></p> <p></p> <p>\u8fd9\u91cc\u8bad\u7ec3\u7684\u76ee\u7684\u662f: \u544a\u8bc9Cat, \u7136\u540e\u751f\u6210\u540e\u9762\u4e00\u4e2a\u5355\u8bcd; \u9519\u4e86\u6ca1\u5173\u7cfb, \u6211\u518d\u544a\u8bc9\u4f60, Cat \u540e\u9762\u662f Average, \u90a3\u4e48Average\u540e\u9762\u53c8\u662f\u4ec0\u4e48\u5462? \u8fd9\u6837\u7684\u8bdd\u5c31\u80fd\u8ba1\u7b97\u4e00\u5806\u7684\u6761\u4ef6\u6982\u7387. </p>"},{"location":"sequence%20model/sequence_model.html#vanishing-gradient-gru","title":"Vanishing Gradient &amp; GRU","text":"<p>\u82f1\u8bed\u7684\u53e5\u5b50\u80fd\u505a\u5230\u975e\u5e38\u957f, \u4f8b\u5982\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50, \u6211\u4eec\u5e0c\u671b\u7f51\u7edc\u80fd\u591f\u5b66\u5230: \u540e\u9762\u662fwas \u8fd8\u662f were\u662f\u9700\u8981\u6839\u636e\u524d\u9762cat\u7684\u5355\u590d\u6570\u6765\u51b3\u5b9a\u7684, \u4f46\u662f\u7f51\u7edc\u975e\u5e38\u6df1, \u56e0\u4e3a\u4e2d\u95f4\u5355\u8bcd\u975e\u5e38\u591a, \u4e8e\u662f\u6df1\u5ea6\u5f88\u9ad8,\u5bfc\u81f4\u68af\u5ea6\u5bb9\u6613\u7206\u70b8, \u56e0\u6b64\u53cd\u5411\u8bad\u7ec3\u5f88\u96be\u8fdb\u884c. </p> <p>\u4e3a\u4e86\u7ed3\u5c40\u8fd9\u4e2a\u95ee\u9898, GRU(Gated Recurrent Unit)\u5e94\u8fd0\u800c\u751f, \u5b83\u6539\u53d8\u4e86RNN\u7684\u9690\u85cf\u5c42, \u80fd\u654f\u611f\u6355\u6349\u6df1\u5c42\u8fde\u63a5, \u5e76\u4e14\u6781\u5927\u7f13\u89e3\u68af\u5ea6\u7206\u70b8\u7684\u95ee\u9898. </p> <p></p> <p>\u8fd9\u4e2a\u662f\u539f\u6765RNN\u8bbe\u8ba1\u7684\u9690\u85cf\u5c42, \u5728\u8f93\u5165\u4e0a\u4e00\u5c42\u7684a\u548c\u8fd9\u4e00\u5c42\u7684x\u4e4b\u540e, \u901a\u8fc7\u6743\u91cd\u77e9\u9635\u548cbias matrix, \u52a0\u4e0a\u6fc0\u6d3b\u51fd\u6570tanh\u4e4b\u540e\u5f97\u5230\u4e86\u4e0b\u4e00\u5c42\u5c06\u4f1a\u4f7f\u7528\u7684a, \u5e76\u4e14\u8fd9\u4e2a\u8f93\u51fa\u8fd8\u4f1a\u7ecf\u8fc7softmax\u4ece\u800c\u5f97\u5230\u9884\u6d4b\u7684y. </p> <p></p> <p>\u5728\u8fd9\u4e2aGRU\u5355\u5143\u4e2d, \u9996\u5148\u662f\u5f15\u5165\u4e86memory cell\u7684\u53c2\u6570, \u8fd9\u4e2a\u77e9\u9635\u53c2\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d\u548ca\u662f\u4e00\u6837\u7684. \u7136\u540e\u6709\u4e00\u4e2a\"\u95e8\", \u8f93\u5165\u7684\u662f\u4e0a\u4e00\u5c42\u4f20\u4e0b\u6765\u7684memory cell\u548c\u8fd9\u4e00\u5c42\u8f93\u5165\u7684x, \u7136\u540e\u7ecf\u8fc7sigmoid function\u5f97\u5230\u95e8\u503c, \u6700\u540e\u7531\u95e8\u503c\u5f97\u5230\u4e86\u4f20\u7ed9\u4e0b\u4e00\u5c42\u7684memory cell</p> <p>\u8fd9\u4e2a\u8bbe\u8ba1\u6210\u529f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u76ee\u6807: \u5c31\u662f\u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u66f4\u65b0\u8bb0\u5fc6\u7ec6\u80de. \u56e0\u4e3asigmoid function\u4e0b\u5f97\u5230\u7684\u6570\u503c\u8981\u4e48\u975e\u5e38\u63a5\u8fd11\u8981\u4e48\u975e\u5e38\u63a5\u8fd10, \u6240\u4ee5\u8bf4\u4e0a\u56fe\u4e2d\u7684\u7b2c\u4e09\u4e2a\u5f0f\u5b50\u5176\u5b9e\u51e0\u4e4e\u5c31\u662f\u5728\u51b3\u5b9a\u5230\u5e95\u662f\u4fdd\u7559\u4e0a\u4e00\u4e2a\u8bb0\u5fc6\u7ec6\u80de\u8fd8\u662f\u66f4\u65b0\u8bb0\u5fc6\u7ec6\u80de. \u8fd9\u6837\u4e00\u6765\u7684\u8bdd,cat\u5904\u7684\"\u662f\u5355\u6570\"\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5fc6\u7ec6\u80de\u4f20\u5230\"was\"\u6240\u5904\u5728\u7684\u4f4d\u7f6e, \u90a3\u4e48\u751f\u6210was/were\u7684\u65f6\u5019\u5c31\u4f1a\u66f4\u65b0\u8bb0\u5fc6\u7ec6\u80de, \u7136\u540e\u8f93\u51fa\u6b63\u786e\u7684was</p> <p>\u4e0a\u9762\u56fe\u4e2d\u7684\u6f14\u793a\u56fe\u4e5f\u662f\u5f88\u597d\u7684\u5c55\u73b0\u4e86simplified GRU\u7684\u5185\u90e8\u7ed3\u6784. </p> <p></p> <p>\u4f46\u662f\u4e3a\u4ec0\u4e48\u8bf4\u662f\u7b80\u5316\u7684\u7248\u672c? \u56e0\u4e3a\u5176\u5b9e\u5b8c\u6574\u7684\u7248\u672c\u662f\u5982\u4e0a\u56fe\u6240\u793a\u7684. \u56e0\u4e3a\u5176\u5b9e\u7f51\u7edc\u8bbe\u8ba1\u7684\u7ed3\u6784\u6ca1\u6709\u6807\u51c6\u7b54\u6848, \u7ecf\u8fc7\u591a\u5e74\u6765\u7814\u7a76\u8005\u7684\u5c1d\u8bd5, \u6700\u540e\u53d1\u73b0, \u5728\u8ba1\u7b97c tilder\u7684\u65f6\u5019, \u5728\u4e0a\u4e00\u5c42\u7684memory cell matrix\u524d\u9762\u4e58\u4e0a\u4e00\u4e2ar(stands for relationship)\u95e8, \u4f1a\u589e\u52a0\u9c81\u68d2\u6027\u4e14\u5c55\u73b0\u8f83\u5f3a\u7684\u51c6\u786e\u6027. </p> <p>\u9644: \u5176\u4e2d*\u4ee3\u8868\u7684\u662felement-wise multiplication</p>"},{"location":"sequence%20model/sequence_model.html#lstm","title":"LSTM","text":"<p>LSTM\u5168\u79f0\u4e3aLong-Short-Term-Memory. </p> <p></p> <p>\u53ef\u4ee5\u7684\u770b\u5230, \u8c8c\u4f3cLSTM\u5c31\u662f\u628a(1-\u95e8u)\u8fd9\u4e2a\u53c2\u6570\u548ca=c\u7684identical projection matrix\u6362\u6210\u4e86\u5355\u72ec\u8bad\u7ec3\u51fa\u6765\u7684\u53c2\u6570. \u6240\u4ee5\u8bf4, LSTM\u662f\u66f4\u52a0\u5e7f\u6cdb\u7684GRU\u7248\u672c</p> <p></p> <p>\u4e0a\u56fe\u4e2d\u5c55\u793a\u4e86LSTM\u7684\u7ed3\u6784, \u4f46\u662f\u8bf4\u5b9e\u8bdd\u8fd8\u662f\u516c\u5f0f\u66f4\u52a0\u660e\u663e.</p> <p>\u503c\u5f97\u4e00\u63d0\u7684\u662f, \u8f93\u51fa\u95e8(output)\u5904\u7406c\u540e\u662f\u4e3a\u4e86softmax\u800c\u670d\u52a1\u7684.  </p>"},{"location":"sequence%20model/sequence_model.html#bidirectory-rnn","title":"Bidirectory RNN","text":"<p>\u4e4b\u524d\u8bf4\u8fc7, \u6709\u7684\u65f6\u5019\u524d\u9762\u7684\u5185\u5bb9\u4e5f\u548c\u540e\u9762\u7684\u5185\u5bb9\u6709\u5173, \u56e0\u6b64\u65f6\u95f4\u4ece\u5de6\u5230\u53f3\u662f\u4e0d\u5b8c\u5168\u7684, \u56e0\u4e3a\u521a\u521a\u8bf4\u7684\u8fd9\u79cd\u9700\u6c42\u5e76\u6ca1\u6709\u4f53\u73b0\u6216\u8005\u8bf4\u6ee1\u8db3. </p> <p></p> <p>\u90a3\u4e48\u8ba1\u7b97\u5c06\u4f1a\u4ece\u5934\u4e24\u5934\u90fd\u5404\u81ea\u5f00\u59cb, \u6ce8\u610f, \u8fd9\u91cc\u4ece\u53f3\u5230\u5de6\u7684\u8ba1\u7b97\u5bf9\u4e8e\u53e6\u4e00\u5934\u6765\u8bf4\u662f\u6b63\u5411\u4f20\u64ad; \u6362\u800c\u8a00\u4e4b, \u8fd9\u4e2a\u7f51\u7edc\u7684\u6b63\u5411\u4f20\u64ad\u548c\u53cd\u5411\u4f20\u64ad\u90fd\u662f\u4e24\u4e2a\u65b9\u5411\u4e0a\u9762\u90fd\u4f1a\u8fdb\u884c\u7684. </p> <p>\u5f53\u7136, \u8f93\u51fayhat\u7684\u65b9\u6cd5\u5f53\u7136\u8981\u66f4\u6539, \u5c06\u4e24\u4e2a<code>a&lt;t&gt;</code>\u8fdb\u884c\u62fc\u63a5,\u7136\u540e\u7ecf\u8fc7\u6743\u91cd\u77e9\u9635\u548cbias, \u901a\u8fc7softmax\u6700\u540e\u7ed9\u51fa\u9884\u6d4b. \u8fd9\u79cd\u601d\u8def\u5176\u5b9e\u76f8\u5f53straight</p>"},{"location":"sequence%20model/sequence_model.html#deep-rnn","title":"Deep RNN","text":"<p>\u4e4b\u524d\u7684\u7f51\u7edc\u8bbe\u8ba1\u5df2\u7ecf\u5341\u5206\u4e0d\u9519\u4e86, \u4f46\u662f\u4e3a\u4e86\u9c81\u68d2\u6027, \u6211\u4eec\u9700\u8981\u7eb5\u5411\u66f4\u6df1\u4e00\u70b9\u7684\u7f51\u7edc, \u5373\u62df\u5408\u51fa\u6765\u66f4\u590d\u6742\u7684\u6743\u91cd\u548c\u504f\u5dee\u77e9\u9635. </p> <p></p> <p>\u53ef\u4ee5\u770b\u5230, \u6700\u4e0b\u9762\u7684\u4e00\u884c\u5c31\u662f\u4e4b\u524d\u8c08\u5230\u7684RNN\u7f51\u7edc, \u7136\u540e\u8fd9\u6837\u7684\u7f51\u7edc\u80fd\u591f\u5806\u53e0. \u5bf9\u4e8e\u5176\u4e2d\u7684\u4e00\u4e9b\u5355\u5143, \u4f8b\u5982<code>a[2]&lt;3&gt;</code>\u6765\u8bf4, \u5b83\u63a5\u53d7\u7684\u65f6\u5019, <code>a[1]&lt;3&gt; a[2]&lt;3&gt;</code>\u662f\u9700\u8981\u62fc\u63a5\u7136\u540e\u7ecf\u8fc7\u6743\u91cd\u548c\u504f\u5dee\u77e9\u9635\u548c\u6fc0\u6d3b\u51fd\u6570\u7684. \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u4e00\u884c\u91cc\u9762\u7684\u6743\u91cd\u548c\u504f\u5dee\u77e9\u9635\u662f\u5171\u4eab\u7684. \u5f53\u7136, \u6bcf\u4e00\u4e2a\u5355\u5143\u53ef\u4ee5\u9009\u62e9LSTM OR GRU. </p>"},{"location":"sequence%20model/sequence_model.html#nlp-and-word-embedding","title":"NLP and Word Embedding","text":""},{"location":"sequence%20model/sequence_model.html#word-representation","title":"Word representation","text":"<p>\u4e4b\u524d, \u5355\u8bcd\u7684\u8868\u8fbe\u5f62\u5f0f\u90fd\u662fone-hot \u72ec\u70ed\u7f16\u7801. \u8fd9\u79cd\u5efa\u7acbcorpus\u7684\u65b9\u5f0f\u5f53\u7136\u662f\u4e00\u79cd\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6cd5, \u4f46\u662f\u5b83\u4e5f\u6709\u7f3a\u70b9: \u5b83\u628a\u6bcf\u4e2a\u5355\u8bcd\u90fd\u5b64\u7acb\u8d77\u6765, \u5bfc\u81f4\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u5f88\u5dee. </p> <p>\u4efb\u610f\u4e24\u4e2a\u72ec\u70ed\u7f16\u7801\u5411\u91cf\u7684\u5185\u79ef\u90fd\u662f\u96f6, \u4ee3\u8868\u8fd9\u4e24\u4e2a\u5411\u91cf\u7ebf\u6027\u65e0\u5173, \u4f46\u662f\u76f4\u89c9\u4e0a\u8fd9\u6709\u70b9\u4e0d\u5bf9\u52b2. \u56e0\u4e3a\u660e\u663e, \u82f9\u679c\u548c\u6a59\u5b50\u5e94\u8be5\u662f\u4e24\u4e2a\u975e\u5e38\u63a5\u8fd1\u7684\u5355\u8bcd, \u4f46\u662f\u4e24\u4e2a\u5355\u8bcd\u7684\u72ec\u70ed\u7f16\u7801\u5411\u91cf\u5374\u6beb\u65e0\u5173\u7cfb, \u8fd9\u5408\u7406\u5417? </p> <p></p> <p>\u770b\u4e0a\u9762\u8fd9\u5f20\u56fe, \u4e0d\u96be\u53d1\u73b0, \u6211\u4eec\u5c1d\u8bd5\u7528\u4e00\u79cd\"\u7279\u5f81\u5f52\u7c7b\"\u6765\u7ed9\u6bcf\u4e00\u4e2a\u5355\u8bcd\u753b\u4e0a\u6807\u7b7e. \u8fd9\u79cd\u601d\u7ef4\u5176\u5b9e\u5f88\u5bb9\u6613\u8ba4\u540c, \u56e0\u4e3a\u5176\u5b9e\u6211\u4eec\u4eba\u7c7b\u8ba4\u77e5\u4e8b\u7269\u4e5f\u662f\u6709\u76f8\u4f3c\u7684\u89c4\u5f8b\u7684. \u90a3\u4e48\u5728\u9047\u5230\u4e0a\u56fe\u53f3\u4e0b\u89d2\u7684\u4f8b\u5b50, \u6a21\u578b\u5bb9\u6613\u8f7b\u677e\u77e5\u9053\u4e24\u4e2a\u5730\u65b9\u90fd\u662fJuice, \u56e0\u4e3a\u82f9\u679c\u6a59\u5b50\u7684\u7279\u5f81\u5411\u91cf\u5728\u7edd\u5927\u90e8\u5206\u4e0a\u9762\u90fd\u662f\u5341\u5206\u63a5\u8fd1\u7684. </p>"},{"location":"sequence%20model/sequence_model.html#property-of-words-embedding","title":"Property of words embedding","text":"<p>\u8bcd\u5d4c\u5165\u8fd8\u6709\u8fd9\u610f\u60f3\u4e0d\u5230\u7684\u6027\u8d28, \u6bd4\u5982\u8bf4\u76f8\u4f3c\u5ea6analogy</p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0, \u6709\u4e86\u8fd9\u79cd\u8bcd\u5d4c\u5165\u8868\u8fbe\u5f62\u5f0f, \u8bcd\u4e0e\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u90fd\u76d8\u6d3b\u4e86. </p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0, \u5355\u8bcd\u7684\"\u76f8\u8fd1\u7a0b\u5ea6\"\u51e0\u4e4e\u7b49\u4ef7\u4e8e\u4e24\u4e2a\u5411\u91cf\u76f8\u7b49, \u56e0\u6b64\u627e\u5230\u8fd9\u4e2a\u5355\u8bcdw\u5c31\u53ef\u4ee5\u4f7f\u7528:</p> <p><code>argmax(...) // \u56fe\u4e2d\u7684\u5f0f\u5b50</code>, \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u4e2a\u8bb0\u53f7\u5728\u8bba\u6587\u4e2d\u975e\u5e38\u5e38\u89c1  \u503c\u5f97\u4e00\u63d0\u7684\u662f, \u5de6\u8fb9\u8fd9\u4e2a\u793a\u610f\u56fe\u5176\u5b9e\u4e0d\u662f\u4e8c\u7ef4\u4e2d\u7684, \u5b9e\u9645\u4e0a\u662f\u9ad8\u7ef4\u4e2d\u7684\u4e24\u4e2a\u5e73\u884c\u5411\u91cf. \u90a3\u4e48\u4e8b\u5b9e\u4e0a, \u6709\u6ca1\u6709\u6f5c\u7a7a\u95f4\u7ef4\u5ea6\u6620\u5c04\u5230\u4e8c\u7ef4\u7684\u6620\u5c04? \u6709, \u53eb\u505at-SNE, \u4f46\u662f\u8fd9\u4e2a\u6620\u5c04\u975e\u5e38\u590d\u6742\u800c\u4e14\u975e\u5e38\u7684\u975e\u7ebf\u6027, \u6240\u4ee5\u8bf4\u6620\u5c04\u8fc7\u6765\u7684\u8fd9\u4e24\u4e2a\u5411\u91cf\u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u662f\u6ca1\u529e\u6cd5\u6307\u671b\u5e73\u884c\u4e86. </p> <p>\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u53eb\u505a<code>cosine similarity</code>, \u5982\u56fe: </p> <p></p> <p>\u8bf4\u767d\u4e86, \u5c31\u662f\u6c42\u9ad8\u7ef4\u4e2d\u4e24\u4e2a\u5411\u91cf\u7684\u4f59\u5f26\u5939\u89d2, \u7136\u540e\u8fd9\u4e2a\u89d2\u5c3d\u53ef\u80fd\u5730\u4e3a0, \u6240\u4ee5\u8bf4\u662fcos\u503c\u5c3d\u53ef\u80fd\u5730\u5927(\u5c3d\u53ef\u80fd\u63a5\u8fd11)</p>"},{"location":"sequence%20model/sequence_model.html#embedding-matrix","title":"Embedding Matrix","text":"<p>\u90a3\u4e48\u6211\u4eec\u5c1d\u8bd5\u5c06\u72ec\u70ed\u7f16\u7801\u5d4c\u5165\u6f5c\u7a7a\u95f4\u4e2d\u7684\u65f6\u5019, \u4e8b\u5b9e\u4e0a\u6211\u4eec\u662f\u5728\u8bad\u7ec3\u4e00\u4e2a\u5d4c\u5165\u77e9\u9635: </p> <p></p> <p>\u6709\u4e86\u8fd9\u4e2a\u77e9\u9635, \u90a3\u4e48\u4e58\u4ee5\u72ec\u70ed\u5411\u91cf\u5c31\u53ef\u4ee5\u83b7\u5f97\u6f5c\u7a7a\u95f4\u7ef4\u5ea6\u7684\u5411\u91cf, \u90a3\u4e48\u5982\u4f55\u8bad\u7ec3\u8fd9\u4e2a\u77e9\u9635\u5462? </p> <p>\u5386\u53f2\u4e0a, \u4e00\u5f00\u59cb\u6709\u975e\u5e38\u591a\u590d\u6742\u7684\u7b97\u6cd5\u5c1d\u8bd5\u5b66\u4e60\u8fd9\u4e2a\u77e9\u9635, \u4f46\u662f\u968f\u7740\u4e0d\u65ad\u7684\u52aa\u529b, \u7b97\u6cd5\u8d8a\u6765\u8d8a\u7b80\u4ecb; \u90a3\u4e48\u5148\u4ece\u5197\u6742\u7684\u7b97\u6cd5\u5f00\u59cb\u8bf4\u8d77: </p> <p></p> <p>\u5982\u4e0a\u56fe, E\u77e9\u9635\u4e00\u5f00\u59cb\u662f\u968f\u673a\u521d\u59cb\u5316\u7684, \u7136\u540e\u4e58\u5728\u6bcf\u4e2a\u72ec\u70ed\u5411\u91cf\u4e0a\u9762, \u5f97\u5230\u6f5c\u7a7a\u95f4\u7ef4\u5ea6\u7684\u77e9\u9635. \u7136\u540e\u56fa\u5b9a\u4e00\u4e2a\u5386\u53f2\u7a97\u53e3, \u53ea\u5173\u6ce8\u51e0\u4e2a\u5355\u8bcd(\u8fd9\u662f\u4e00\u4e2ahyperparameter), \u6765\u9884\u6d4b\u4e0b\u9762\u4e00\u4e2a\u5355\u8bcd. \u7136\u540e\u8fd9\u51e0\u4e2a\u5355\u8bcd\u2014\u2014\u8fd9\u91cc\u662f\u56db\u4e2a\u2014\u2014\u5411\u91cf\u5806\u53e0\u5728\u4e00\u8d77, \u5f62\u6210\u4e00\u4e2a1800\u7ef4\u5ea6\u7684\u5411\u91cf, \u7136\u540e\u8f93\u5165\u8fdb\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc, \u6700\u540e\u7ecf\u8fc7\u4e00\u4e2asoftmax, \u7136\u540e\u5e0c\u671b\u5b83\u9884\u6d4b\u51fa\u6765\u7684\u7ed3\u679c\u662fjuice. </p> <p>\u6ce8\u610f\u7684\u662f, \u6240\u6709\u72ec\u70ed\u5411\u91cf\u4e58\u4e0a\u7684E\u90fd\u662f\u6743\u91cd\u5171\u4eab\u7684, \u5e76\u4e14\u8fd9\u4e2a\u795e\u7ecf\u5c42\u548csoftmax\u5c42\u7684\u6743\u91cd\u548c\u504f\u5dee\u90fd\u662f\u5171\u4eab\u7684. \u6240\u4ee5\u8fd9\u4e5f\u8c8c\u4f3c\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u8981\u8bbe\u8ba1\u5386\u53f2\u7a97\u53e3\u4e86: \u8981\u6743\u91cd\u80fd\u5171\u4eab, \u8bf4\u660e\u7ef4\u5ea6\u4e0d\u80fd\u6539\u53d8, \u90a3\u4e48\u5c31\u5e72\u8106\u89c4\u5b9a\u8f93\u5165\u8fdb\u7684\u5355\u8bcd\u6570\u91cf.</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u5176\u5b9e\u5df2\u7ecf\u5f88\u597d\u4e86. \u4e0d\u59a8\u8bbe\u60f3, \u8bad\u7ec3\u7684\u65f6\u5019, \u8bed\u6599\u5e93\u91cc\u9762\u4e00\u822c\u6765\u8bf4Juice\u524d\u9762\u51fa\u73b0\u7684\u5355\u8bcd\u4e00\u822c\u90fd\u662f\u82f9\u679c\u9999\u8549\u68a8\u7b49\u6c34\u679c, \u8fd9\u6837\u7684\u8bdd, \u5b66\u4e60\u7684\u65f6\u5019, \u8fd9\u4e9b\u6c34\u679c\u7684\u5d4c\u5165\u540e\u7684\u5411\u91cf\u5c31\u5e94\u8be5\u5341\u5206\u63a5\u8fd1. \u8fd9\u6b63\u662f\u6211\u4eec\u5e0c\u671b\u7684\u5d4c\u5165\u77e9\u9635\u80fd\u591f\u5b9e\u73b0\u7684\u76ee\u6807. </p> <p>\u90a3\u4e48\u5728\u9009\"\u54ea\u4e9b\u8bcd\u4f5c\u4e3a\u63d0\u793a\"\u65b9\u9762, \u7b97\u6cd5\u5c31\u53ef\u4ee5\u6709\u975e\u5e38\u591a\u4e86, \u4f8b\u5982\u63a5\u4e0b\u6765\u7684word2vec</p> <p></p> <p>\u63a5\u4e0b\u6765, \u8981\u9686\u91cd\u4ecb\u7ecdword2vec model\u4e86</p>"},{"location":"sequence%20model/sequence_model.html#word2vec-model","title":"word2vec model","text":""},{"location":"sequence%20model/sequence_model.html#skip-gram","title":"skip-gram","text":"<p>\u5728\u4e00\u4e2a\u53e5\u5b50\u91cc\u9762\u9009\u5b9a\u4e00\u4e2acontext, \u5176\u4f5c\u4e3a\u8f93\u5165x; \u7136\u540e\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u9009\u53d6\u4e00\u4e2a\u5730\u65b9\u7684\u5355\u8bcd\u4f5c\u4e3ay, \u7136\u540e\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u5165x, \u7136\u540e\u9884\u6d4by</p> <p></p> <p></p> <p>\u4f46\u662f\u6709\u4e24\u4e2a\u7ec6\u8282\u503c\u5f97\u63d0, \u89c1\u4e0b\u56fe: </p> <p></p> <p>\u9996\u5148\u5c31\u662f\u5728softmax\u7684\u65f6\u5019,\u56e0\u4e3a\u8981\u6240\u6709\u7684\u503c\u90fd\u8981\u8ba1\u7b97e^x, \u76f8\u5f53\u4e8e\u4f60\u8981\u904d\u5386\u6574\u4e2a\u8bed\u6599\u5e93(vocab_size)\u4e2a\u6570\u5b57, \u8fd9\u7b80\u76f4\u662f\u707e\u96be! \u56e0\u6b64\u8bbe\u8ba1\u4e86\u4e00\u79cdhierarchical softmax:(from kimi)</p> <ol> <li>\u6784\u5efa\u4e8c\u53c9\u6811\uff1a\u9996\u5148\uff0c\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u7c7b\u522b\u3002\u6811\u7684\u7ed3\u6784\u901a\u5e38\u53d6\u51b3\u4e8e\u7c7b\u522b\u4e4b\u95f4\u7684\u5c42\u6b21\u5173\u7cfb\u3002</li> <li>\u7f16\u7801\u8def\u5f84\uff1a\u5bf9\u4e8e\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a0\u62161\u7684\u7f16\u7801\u6765\u8868\u793a\u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u8def\u5f84\u3002\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u5411\u5de6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u75280\u8868\u793a\uff0c\u5411\u53f3\u5b50\u8282\u70b9\u7684\u8def\u5f84\u75281\u8868\u793a\u3002</li> <li>\u8ba1\u7b97\u5f97\u5206\uff1a\u5bf9\u4e8e\u8f93\u5165\u6837\u672c\uff0c\u6a21\u578b\u9996\u5148\u901a\u8fc7\u4e00\u4e9b\u53c2\u6570\uff08\u901a\u5e38\u662f\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\uff09\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u5f97\u5206\u3002\u8fd9\u4e2a\u5f97\u5206\u662f\u901a\u8fc7\u4e00\u4e2a\u53ef\u5b66\u4e60\u7684\u6743\u91cd\u5411\u91cf\u548c\u8f93\u5165\u7279\u5f81\u7684\u70b9\u79ef\u5f97\u5230\u7684\u3002</li> <li>\u8def\u5f84\u5f97\u5206\uff1a\u5bf9\u4e8e\u76ee\u6807\u7c7b\u522b\uff0c\u6a21\u578b\u4f1a\u8ba1\u7b97\u4ece\u6839\u8282\u70b9\u5230\u8be5\u7c7b\u522b\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u5f97\u5206\u3002\u8fd9\u662f\u901a\u8fc7\u5c06\u8def\u5f84\u7f16\u7801\u4e0e\u8282\u70b9\u5f97\u5206\u8fdb\u884c\u70b9\u79ef\u6765\u5b9e\u73b0\u7684\u3002</li> <li>\u5f52\u4e00\u5316\uff1a\u4f7f\u7528\u8def\u5f84\u5f97\u5206\uff0c\u6a21\u578b\u8ba1\u7b97\u4ece\u6839\u8282\u70b9\u5230\u76ee\u6807\u7c7b\u522b\u7684\u8def\u5f84\u4e0a\u6240\u6709\u53ef\u80fd\u8def\u5f84\u7684\u6982\u7387\u3002\u8fd9\u662f\u901a\u8fc7\u5c06\u8def\u5f84\u5f97\u5206\u901a\u8fc7\u4e00\u4e2a\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff08\u901a\u5e38\u662fsigmoid\u51fd\u6570\uff09\u6765\u5b9e\u73b0\u7684\uff0c\u4ece\u800c\u786e\u4fdd\u6240\u6709\u8def\u5f84\u7684\u6982\u7387\u4e4b\u548c\u4e3a1\u3002</li> <li>\u635f\u5931\u51fd\u6570\uff1a\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6a21\u578b\u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\uff0c\u901a\u5e38\u662f\u4ea4\u53c9\u71b5\u635f\u5931\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6837\u672c\uff0c\u635f\u5931\u662f\u5176\u771f\u5b9e\u7c7b\u522b\u8def\u5f84\u7684\u8d1f\u5bf9\u6570\u4f3c\u7136\u3002</li> <li>\u53cd\u5411\u4f20\u64ad\uff1a\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u6765\u66f4\u65b0\u6a21\u578b\u7684\u6743\u91cd\uff0c\u4ee5\u51cf\u5c11\u635f\u5931\u51fd\u6570\u7684\u503c\u3002</li> </ol> <p>\u5176\u6b21\u5c31\u662f\u9009\u62e9context\u7684\u624b\u6cd5\u4e86, \u867d\u7136\u8bf4\u76f4\u89c9\u4e0a\u6765\u770b, \u968f\u673a\u9009\u4e0d\u5c31\u597d\u4e86\u5417? \u4f46\u662f\u8f6c\u5934\u4e00\u60f3, \u5982\u679c\u771f\u7684\u662f\u8fd9\u6837, \u90a3\u4e48a the is are he she\u7b49\u5355\u8bcd\u5c06\u4f1a\u51fa\u73b0\u975e\u5e38\u591a\u6b21, \u4f46\u662fapple orange\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u4f1a\u76f8\u5bf9\u6765\u8bf4\u8f83\u5c11, \u751a\u81f3\u662fdurian(\u69b4\u83b2)\u8fd9\u79cd\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u4f1a\u5fae\u4e4e\u5176\u5fae, \u4f46\u662f\u6211\u4eec\u53c8\u5176\u5b9e\u5341\u5206\u5e0c\u671b\u6a21\u578b\u5b66\u5230durian\u8fd9\u4e2a\u5355\u8bcd\u7684\u7279\u5f81\u7684. </p> <p>\u56e0\u6b64\u5728context\u5355\u8bcd\u7684\u9009\u62e9\u5206\u5e03\u4e0a\u9762, \u5176\u5b9e\u662f\u4f1a\u505a\u624b\u811a\u7684. </p>"},{"location":"sequence%20model/sequence_model.html#negative-sampling","title":"Negative sampling","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5b8c\u6210\u4e86skip-gram\u5b8c\u6210\u4e86\u7684\u4efb\u52a1, \u4f46\u662f\u5374\u66f4\u52a0\u7b80\u5355\u7684\u7b97\u6cd5. </p> <p>\u5728\u9009\u62e9context\u4e4b\u540e\u5728\u8303\u56f4\u5185\u518d\u9009\u51fa\u4e00\u4e2a\u5355\u8bcd\u7684\u57fa\u7840\u4e4b\u4e0a, \u6211\u4eec\u5728\u5b57\u5178\u91cc\u9762\u968f\u673a\u9009\u4e00\u4e9b\u5355\u8bcd, \u7136\u540e\u6807\u8bb0\u5173\u7cfb\u4e3a0. \u76f8\u53cd\u5730, context\u548c\u9009\u51fa\u7684\u5355\u8bcd\u7684\u5173\u7cfb\u5c31\u662f1. </p> <p>\u5b57\u5178\u91cc\u9762\u9009\u51fa\u591a\u5c11\u4e2a\u5462? \u4e00\u822c\u6765\u8bf4, \u8bed\u6599\u5e93\u8d8a\u5c0f, k\u8d8a\u5927</p> <p></p> <p></p> <p>\u4f7f\u7528\u4e86\u8d1f\u91c7\u6837\u4e4b\u540e, \u4e0d\u518d\u8ba1\u7b97softmax\u4e86, \u800c\u662f\u8f6c\u5316\u4e3a\u8bad\u7ec310000\u4e2alogistic regression\u4e86. \u6bcf\u4e00\u6b21\u8bad\u7ec3\u4e2d, \u6709k\u4e2a\u8d1f\u6837\u672c, \u90a3\u4e48\u5c31\u4f1a\u8bad\u7ec31+k\u4e2a\u4e8c\u5206\u5668\u7684\u53c2\u6570. \u56e0\u6b64\u8ba1\u7b97\u91cf\u6781\u5927\u51cf\u5c11\u4e86. </p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f, \"\u968f\u673a\u4ece\u5b57\u5178\u91cc\u9762\u9009\u5355\u8bcd\"\u4ecd\u7136\u4e0d\u5e94\u8be5\u771f\u7684\u662f\"\u968f\u673a\". Emperically, \u9009\u4e2d\u5355\u8bcd\u7684\u6982\u7387\u5206\u5e03\u5982\u4e0b: </p> <p></p>"},{"location":"sequence%20model/sequence_model.html#sentiment-classification","title":"Sentiment classification","text":"<p>\u5c1d\u8bd5\u4ecetext\u63a8\u6d4b\u51fa\u60c5\u611f\u7684\u7a0b\u5ea6. \u4f8b\u5982\u5bf9\u4e00\u4e2a\u9910\u9986\u7684\u8bc4\u4ef7, \u5982\u4f55\u4ece\u4e00\u6bb5\u6587\u672c\u63a8\u6d4b\u51fa\u5ba2\u6237\u5fc3\u4e2d\u9910\u9986\u7684\u5206\u6570\u5462? </p> <p></p> <p>\u4e00\u79cd\u65b9\u6cd5\u662f\u6240\u6709\u5355\u8bcd\u4e58\u4ee5\u5d4c\u5165\u77e9\u9635\u4e4b\u540e, \u6240\u6709\u7684\u5d4c\u5165\u7a7a\u95f4\u7ef4\u5ea6\u7684\u5411\u91cf\u6c42\u548c\u53d6\u5e73\u5747, \u7136\u540e\u8fd9\u4e00\u4e2a\u5411\u91cf\u8f93\u5165\u8fdbsoftmax. \u8fd9\u8c8c\u4f3c\u5df2\u7ecf\u5f88\u4e0d\u9519\u4e86, \u4f46\u662f\u5176\u5b9e\u4e5f\u6709\u95ee\u9898: \u4e0a\u56fe\u4e2d\u7684\u8d1f\u9762\u8bc4\u8bba, \u51fa\u73b0\u4e86\u4e09\u6b21good, \u8fd9\u5f88\u53ef\u80fd\u5bfc\u81f4\u6700\u540e\u5224\u65ad\u7684\u60c5\u611f\u662f\u6b63\u9762\u7684. </p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898, \u9700\u8981\u610f\u8bc6\u5230\"\u4f4d\u7f6e\"\u4fe1\u606f\u7684\u5b58\u5728, \u56e0\u4e3anot\u7684\u5b58\u5728, \u6240\u4ee5\u8fd9\u91cc\u7684good\u4e0d\u662fgood. \u6240\u4ee5\u8bf4, RNN\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a. </p> <p></p>"},{"location":"sequence%20model/sequence_model.html#sequence-to-sequence-model","title":"Sequence to sequence model","text":""},{"location":"sequence%20model/sequence_model.html#basic-model","title":"Basic Model","text":"<p>\u9996\u5148\u662fsequence to sequence model, \u8003\u8651\u4e00\u4e2aRNN\u6a21\u578b, \u5355\u5143\u53ef\u4ee5\u662fGNU\u6216\u8005LSTM, \u7136\u540e\u8981\u6c42\u6cd5\u82f1\u4e92\u8bd1. \u90a3\u4e48\u6cd5\u8bed\u6587\u672c\u4e4b\u540e, \u6bcf\u4e2a\u5355\u8bcd\u90fd\u6309\u7167RNN\u7684\u6d41\u7a0b\u8fdb\u5165\u6a21\u578b, \u4f46\u662f\u6700\u540e\u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u7f16\u7801\u540e\u7684\u77e9\u9635, \u7136\u540e\u518d\u7528\u89e3\u7801\u5668\u53bb\u8f93\u51fa\u6587\u672c, \u6bcf\u8f93\u51fa\u4e00\u4e2a\u5355\u8bcd\u4e4b\u540e, \u8fd9\u4e2a\u8f93\u51fa\u7684\u5355\u8bcd\u7528\u4f5c\u4e0b\u4e00\u4e2a\u5355\u5143\u7684\u8f93\u5165(\u5f53\u7136\u8fd9\u4e00\u5355\u5143\u7684\u9690\u542b\u7279\u5f81\u4e5f\u4f1a\u8f93\u5165\u4e0b\u4e00\u4e2a\u5355\u5143)</p> <p></p> <p>\u5176\u6b21\u5c31\u662f\u7ecf\u5178\u7684image captioning\u4efb\u52a1. \u7ed9\u4e00\u5f20\u56fe\u7247, \u7136\u540e\u8981\u6c42\u751f\u6210captioning(\u63cf\u8ff0)\u6587\u5b57, \u90a3\u4e48\u5c31\u53ef\u628a\u5377\u79ef\u4e4b\u540e\u7684\u7279\u5f81\u77e9\u9635\u8f93\u5165\u8fdbRNN\u6a21\u578b.</p> <p></p>"},{"location":"sequence%20model/sequence_model.html#the-most-possible-sentence","title":"The most possible sentence","text":"<p>\u4e00\u4e2alanguang model \u4e00\u822c\u6765\u8bf4\u8f93\u5165\u7684x0\u90fd\u662f\u96f6\u5411\u91cf, \u4ece\u800c\u63a5\u8fde\u8f93\u51fa\u6587\u672c. \u90a3\u4e48seq2seq\u5462? \u524d\u9762\u662f\u4e00\u4e2aRNN\u6a21\u578b, \u8f93\u51fa\u4e00\u4e2a\"\u7279\u5f81\u9690\u542b\u77e9\u9635\"\u8f93\u5165RNN\u6a21\u578b, \u7136\u540e\u8f93\u51fa\u6587\u672c, \u8fd9\u8f93\u51fa\u90e8\u5206\u548clanguage model\u975e\u5e38\u76f8\u4f3c, \u56e0\u6b64, \u7ffb\u8bd1\u4e5f\u88ab\u79f0\u4e3a\"Conditional Language Model\".</p> <p></p> <p>\u5728\u7ffb\u8bd1\u7684\u8f93\u51fa\u90e8\u5206, \u6211\u4eec\u5e0c\u671b\u627e\u5230\u5408\u9002\u7684y(\u7ffb\u8bd1\u5185\u5bb9)\u4f7f\u5f97\u6982\u7387\u6700\u5927(x\u662f\u6cd5\u8bed\u53e5\u5b50). \u90a3\u4e48\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528\u4e00\u79cd\u53eb\u505abeam search(\u675f\u641c\u7d22)\u7684\u7b97\u6cd5. </p> <p>\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7528\u8d2a\u5fc3\u7b97\u6cd5Greedy search? \u8d2a\u5fc3\u7b97\u6cd5\u5c31\u662f\u7b2c\u4e00\u4e2a\u9009\u62e9\u53ef\u80fd\u6027\u6700\u5927\u7684\u9009\u62e9, \u7136\u540e\u6839\u636e\u8fd9\u4e2a\u9009\u51fa\u53ef\u80fd\u6027\u6700\u5927\u7684\u7b2c\u4e8c\u4e2a, \u4ee5\u6b64\u7c7b\u63a8. \u4f46\u662f, \u5c40\u90e8\u6700\u4f18\u4e0d\u4ee3\u8868\u5168\u5c40\u6700\u4f18. \u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u80fd\u5217\u4e3e\u51fa\u5168\u90e8\u7684\u53ef\u80fd\u6027, \u6bd5\u7adf<code>vocab_size</code>\u975e\u5e38\u5927. \u6240\u4ee5\u6211\u4eec\u7528\u4e00\u79cd\u8fd1\u4f3c\u7b97\u6cd5: Beam Search</p>"},{"location":"sequence%20model/sequence_model.html#-","title":"\u5b9a\u5411\u641c\u7d22--\u675f\u641c\u7d22","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\u53ea\u80fd\u9009\u51fa\u53ef\u80fd\u6027\u6700\u5927\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd, \u4f46\u662f\u675f\u641c\u7d22\u4f1a\u8003\u8651\u51e0\u4e2a, \u8fd9\u91cc\u7684\"\u51e0\u4e2a\"\u5c31\u662fHyper-parameter <code>beam width</code>. \u5047\u5982\u8bf4\u8fd9\u91cc\u662f3, \u90a3\u4e48\u5c31\u4f1a\u9009\u53ef\u80fd\u6027\u6700\u5927\u7684\u4e09\u4e2a\u5355\u8bcd, \u7136\u540e\u4f1a\u50a8\u5b58\u8d77\u6765, \u5404\u81ea\u7528\u4e8e\u4e0b\u4e00\u6b65</p> <p></p> <p>\u63a5\u4e0b\u6765, \u8df3\u51fa\u6765\u7684\u8fd9\u8fd9\u4e09\u4e2a\u5355\u8bcd\u5206\u522b\u8ba1\u7b97vocab_size\u4e2a\u5355\u8bcd\u7684\u5404\u81ea\u7684\u6982\u7387\u5417, \u7136\u540e\u548c\u524d\u9762\u4e00\u4e2a\u5355\u8bcd\u7684\u6982\u7387\u76f8\u4e58, \u5f97\u5230\u4e86<code>P(y1, y2 | x)</code>. \u4e00\u5171\u6709<code>beam_width*vocab_size</code>\u4e2a\u6982\u7387(\u8fd9\u91cc\u662f30000)\u4e2a, \u7136\u540e\u6311\u51fa\u4e09\u4e2a\u6982\u7387\u6700\u5927\u7684\u7ec4\u5408. </p> <p>\u5047\u5982\u8bf4\u662f<code>in September   jane is    jane visits</code>\u8fd9\u4e09\u4e2a\u7ec4\u5408\u7684\u6982\u7387\u662f\u6700\u5927\u7684, \u5219\u9ed8\u8ba4\u6211\u4eec\u5df2\u7ecf\u653e\u5f03\u4e86<code>september</code>\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u53ef\u80fd\u6027. </p> <p></p> <p>\u6700\u540e\u5f97\u5230\u7684\u4e09\u4e2a\u53e5\u5b50(\u5404\u81ea\u90fd\u662f<code>&lt;EOS&gt;</code>\u7ed3\u5c3e\u7684)\u4e2d\u6311\u51fa\u4e00\u4e2a\u6982\u7387\u6700\u5927\u7684\u53e5\u5b50.</p> <p>Refinements to beam search </p> <p></p> <p>\u6709\u4e00\u4e2a\u95ee\u9898: \u7531\u4e8e\u662f\u4e00\u5806\u6982\u7387\u5c0f\u4e8e0\u7684\u6570\u5b57\u76f8\u4e58, \u5f97\u5230\u7684\u7ed3\u679c\u4f1a\u975e\u5e38\u975e\u5e38\u5c0f, \u4ee5\u81f3\u4e8e<code>floating part</code>\u751a\u81f3\u4e0d\u80fd\u88ab\u8ba1\u7b97\u673a\u7cbe\u786e\u8ba1\u7b97. \u56e0\u6b64\u4e3a\u4e86\u5b9e\u73b0\u8f6c\u6362, \u53ef\u4ee5\u4f7f\u7528\u5bf9\u6570</p> <p>\u90a3\u4e48\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898: \u65e2\u7136\u662f\u4e00\u5806log\u8d1f\u6570\u76f8\u52a0, \u60f3\u8981\u6982\u7387\u5c3d\u53ef\u80fd\u5730\u5927, \u4e0d\u662f\u76f8\u5f53\u4e8e\u751f\u6210\u7684\u5355\u8bcd\u6570\u91cf\u5c3d\u53ef\u80fd\u5c11\u5417? \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u524d\u9762\u4f1a\u4e58\u4ee5\u4e00\u4e2a\u7cfb\u6570<code>1/Ty^\u03b1</code>, \u8d77\u5230length normalization\u7684\u4f5c\u7528. \u56e0\u6b64, \u7b2c\u4e09\u4e2a\u516c\u5f0f\u4e5f\u79f0\u4e3a<code>normalized log likelihood objective</code>(\u5f52\u4e00\u5316\u7684\u5bf9\u6570\u4f3c\u7136\u76ee\u6807\u51fd\u6570)</p> <p>\u90a3\u4e48\u5982\u4f55\u9009\u62e9Beam width\u5462? \u53c2\u6570\u8fc7\u5927, \u90a3\u4e48\u8ba1\u7b97\u4f1a\u66f4\u52a0\u7cbe\u786e, \u7ed3\u679c\u4e5f\u66f4\u6709\u53ef\u80fd\u662f\u53ef\u80fd\u6027\u6700\u5927\u7684, \u4f46\u662f\u4ee3\u4ef7\u662f\u975e\u5e38\u6d88\u8017\u8ba1\u7b97\u8d44\u6e90\u4e0e\u65f6\u95f4; \u53c2\u6570\u8fc7\u5c0f, \u90a3\u4e48\u8ba1\u7b97\u4e5f\u8bb8\u4e0d\u5982\u4e4b\u524d\u90a3\u4e48\u7cbe\u786e(\u5f53\u7136\u6bd4\u8d2a\u5fc3\u7b97\u6cd5\u662f\u597d\u5f88\u591a), \u4f46\u662f\u5bf9\u8ba1\u7b97\u8d44\u6e90\u548c\u65f6\u95f4\u7684\u6d88\u8017\u5c0f. </p> <p>\u675f\u641c\u7d22\u7b97\u6cd5\u662f\u4e00\u79cd\u8fd1\u4f3c\u641c\u7d22\u7b97\u6cd5, \u4e5f\u88ab\u79f0\u4e3a\u542f\u53d1\u5f0f(heuristic)\u641c\u7d22\u7b97\u6cd5</p> <p>Error analysis on beam search </p> <p></p> <p>\u5728\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d, \u6574\u4e2a\u6a21\u578b\u548cRNN\u4e0ebeam search\u6709\u5173, \u90a3\u4e48\u52a0\u5165\u8bf4\u8f93\u51fa\u4e86\u9519\u8bef\u7684\u7ed3\u679c, \u90a3\u4e48\u7a76\u7adf\u662f\u6a21\u578b\u4e2d\u7684\u54ea\u4e2a\u5730\u65b9\u51fa\u4e86\u95ee\u9898\u5462? </p> <p>\u5047\u5982\u8bf4ground truth\u8ba4\u4e3a\u662fy*, \u4f46\u662f\u7ed9\u4e86y^, \u90a3\u4e48\u53ef\u4ee5\u8ba9\u6a21\u578b\u8f93\u51fa\u4e00\u4e0b\u4e24\u4e2a\u6982\u7387, \u90a3\u4e48\u6709\u4e24\u79cd\u60c5\u51b5: </p> <ol> <li>y*\u7684\u6982\u7387\u66f4\u5927, \u90a3\u4e48\u8bf4\u660e\u660e\u660e\u662f<code>y*</code>\u5e94\u8be5\u88ab\u9009\u4e2d, \u4f46\u662fbeam search\u6ca1\u6709\u9009\u4e2d\u5b83, \u8bf4\u660e\u675f\u641c\u7d22\u7b97\u6cd5\u6709\u95ee\u9898 </li> <li>y*\u7684\u6982\u7387\u66f4\u5c0f, \u90a3\u4e48\u8bf4\u660e\u675f\u641c\u7d22\u7b97\u6cd5\u6ca1\u95ee\u9898, \u4f46\u662fRNN\u6a21\u578b\u9519\u8bef</li> </ol>"},{"location":"sequence%20model/sequence_model.html#bleu","title":"Bleu\u5f97\u5206","text":"<p>\u5728\u7ffb\u8bd1\u4efb\u52a1\u4e2d, \u7ffb\u8bd1\u8fc7\u6765\u7684\u53e5\u5b50\u8c8c\u4f3c\u662f\u6ca1\u6709ground truth\u7684, \u6bd5\u7adf\u5f88\u96be\u8bf4\u90a3\u4e2a\u7ffb\u8bd1\u662f\u6700\u597d\u7684. </p> <p>BLEU, \u5168\u79f0\u662f<code>bilingual evaluation understudy</code>(\u53cc\u8bed\u8bc4\u4f30\u66ff\u8865)</p> <p></p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762, MT, machine translation, \u660e\u663e\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u7ffb\u8bd1, \u90a3\u4e48\u5982\u4f55\u8861\u91cf\u7cbe\u786e\u5ea6\u5462? \u5982\u679c\u8bf4\u4ec5\u4ec5\u662f\u5224\u65ad\u6bcf\u4e2a\u5355\u8bcd\u662f\u5426\u5728\u63d0\u4f9b\u7684\u53c2\u8003\u7ffb\u8bd1\u91cc\u9762, \u90a3\u4e48\u7ed3\u679c\u4ee4\u4eba\u5341\u5206\u8be7\u5f02, \u7adf\u7136\u662f7/7, \u660e\u663e\u53cd\u76f4\u89c9; \u56e0\u6b64, \u5f15\u5165\u4e86\u5f97\u5206\u4e0a\u9650, the\u8fd9\u4e2a\u5355\u8bcd\u6700\u591a\u57281\u4e2d\u51fa\u73b0\u4e24\u6b21, \u6240\u4ee5\u8bf4the\u5355\u8bcd\u5f97\u5206\u4e0a\u9650\u4e3a2, \u6240\u4ee5\u8bf4\u7cbe\u786e\u5ea6\u662f2/7</p> <p>\u4f46\u662f\u8fd9\u4e9b\u662f\u5355\u72ec\u7684\u5355\u8bcd, \u6709\u7684\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u8003\u8651<code>pairs of words</code>. </p> <p></p> <p>\u4e24\u4e2a\u5355\u8bcd\u4e24\u4e2a\u5355\u8bcd\u4e00\u770b, \u4e00\u5171\u67096\u7ec4; \u7136\u540e\u770b\u6bcf\u4e2a\u79cd\u7c7b\u5728\u5f15\u7528\u4e2d\u51fa\u73b0\u7684\u6700\u9ad8\u6b21\u6570(\u6bd4\u5982\u8bf4on the\u5728\u4e24\u4e2a\u5f15\u7528\u91cc\u9762\u90fd\u6709, \u6240\u4ee5\u8bf4\u6700\u9ad8\u6b21\u6570\u662f1, \u56e0\u6b64on the\u5f97\u5206\u662f1)</p> <p></p> <p>\u4e0a\u9762\u4e24\u4e2a\u60c5\u51b5, \u5206\u522b\u662fPn \u4e2dn\u4e3a1, 2\u7684\u4f8b\u5b50. \u6700\u540e\u5c31\u53ef\u4ee5\u5f15\u51faBleu\u5f97\u5206\u4e86:</p> <p></p> <p>\u6c42\u51faP1,2,3,4, \u7136\u540e\u7b97\u5e73\u5747\u6570\u7136\u540e\u4f5c\u4e3a\u6307\u6570, \u6700\u540e\u524d\u9762\u4f1a\u52a0\u4e0aBp\u60e9\u7f5a\u56e0\u5b50(brevity penalty)\u6765\u4e58\u6cd5\u751f\u6210\u53e5\u5b50\u5f88\u77ed\u7684\u60c5\u51b5. Bp\u53d6\u503c\u5982\u4e0a\u56fe. </p> <p>\u6ce8\u610f! BP otherwise\u7684\u60c5\u51b5\u7684\u516c\u5f0f\u7ed9\u9519\u4e86, \u5e94\u8be5\u662f:</p> <p><code>exp(1-reference_output_length/MT_output_length)</code></p>"},{"location":"sequence%20model/sequence_model.html#attention","title":"Attention \u6ce8\u610f\u529b\u673a\u5236","text":""},{"location":"sequence%20model/sequence_model.html#_1","title":"\u76f4\u89c2\u7406\u89e3","text":"<p>\u4eba\u7c7b\u5728\u7ffb\u8bd1\u957f\u53e5\u5b50\u7684\u65f6\u5019, \u901a\u5e38\u6765\u8bf4\u662f\u770b\u4e00\u90e8\u5206\u7136\u540e\u7ffb\u8bd1\u4e00\u90e8\u5206, \u518d\u770b\u4e00\u90e8\u5206\u7136\u540e\u7ffb\u8bd1\u4e00\u90e8\u5206, \u901a\u5e38\u90e8\u5206\u7684\u5212\u5206\u662f\u6839\u636e\u8bcd\u7ec4, \u5e38\u89c1\u77ed\u8bed\u6216\u8005\u662f\u4ece\u53e5\u7b49\u7b49\u6765\u7684. \u90a3\u4e48\u673a\u5668\u4e5f\u662f\u4e00\u6837, RNN\u5e8f\u5217\u5f88\u96be\u5904\u7406\u975e\u5e38\u957f\u7684\u53e5\u5b50, \u5c31\u50cf\u4eba\u7c7b\u7ffb\u8bd1\u7684\u53e5\u5b50\u4e0d\u662f\u8bb0\u4f4f\u6574\u4e2a\u539f\u53e5\u7136\u540e\u518d\u5f00\u59cb\u7ffb\u8bd1\u7684. \u6240\u4ee5\u8bf4\u8fd9\u91cc\u5f15\u5165\u6ce8\u610f\u529b\u673a\u5236. </p> <p>\u4e3a\u4e86\u5f15\u5165\u6ce8\u610f\u529b, \u6211\u4eec\u5e0c\u671b\u8f93\u51fa\u7ffb\u8bd1\u7684RNN\u5728\u8f93\u51fa\u5355\u8bcd\u7684\u65f6\u5019\u80fd\u77e5\u9053, \u6211\u91cd\u70b9\u5e94\u8be5\u5173\u6ce8\u54ea\u4e00\u4e2a\u5355\u8bcd. \u56e0\u6b64, \u770b\u6765\u989d\u5916\u7684\u53c2\u6570\u662f\u6709\u5fc5\u8981\u5f15\u5165\u7684</p> <p></p> <p>\u5728\u53cc\u5411RNN\u7684\u65f6\u5019, \u6bcf\u4e00\u4e2a\u5355\u5143\u90fd\u4f1a\u989d\u5916\u8bad\u7ec3\u4e00\u7c7b\u53c2\u6570; \u5bf9\u4e8e\u7b2ci\u4e2a\u5355\u8bcd\u6765\u8bf4, \u8bad\u7ec3:</p> <p><code>\u03b1&lt;t, i&gt;</code>\u53c2\u6570, \u4ee3\u8868\u8f93\u51faRNN\u5728\u8f93\u51fa\u7684\u65f6\u5019\u7b2ct\u4e2a\u8f93\u51fa\u7684\u5355\u8bcd\u5e94\u8be5\u8003\u8651\u539f\u53e5\u7b2ci\u4e2a\u5355\u8bcd\u7684\u6743\u91cd. \u90a3\u4e48\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u5e0c\u671b\u7b2c\u4e00\u4e2a\u8f93\u51fa\u7684\u5355\u8bcd\u662fjane, \u90a3\u4e48\u5c31\u5e0c\u671b<code>\u03b1&lt;1, 1&gt;</code>\u5728\u4e2d\u975e\u5e38\u5927, \u4ee3\u8868\u9700\u8981\u5f88\u5927\u7a0b\u5ea6\u5730\u5c06jane\u5355\u8bcd\u7eb3\u5165\u8003\u91cf"},{"location":"sequence%20model/sequence_model.html#attention-model","title":"Attention Model","text":"<ul> <li> <p>\u8fd9\u4e2a\u6a21\u578b\u4e0b, \u5728\u53cc\u5411RNN\u4e2d, LSTM\u5355\u5143\u66f4\u4e3a\u5e38\u89c1 </p> </li> <li> <p>\u4e3a\u4e86notational convenience, \u7528<code>a&lt;t'&gt; = (a-&gt;&lt;t'&gt;, a&lt;-&lt;t'&gt;)</code>(\u62ec\u53f7\u4ee3\u8868concatenation)</p> </li> <li>\u6ce8\u610f\u529b\u6743\u91cd\u6bcf\u4e00\u4e2a\u90fd\u662f\u6574\u6570, \u4e14\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8f93\u51faRNN\u7684\u5355\u5143\u6765\u8bf4, \u6240\u6709\u7684\u6743\u91cd\u4e4b\u548c\u4e3a1(\u7406\u6240\u5f53\u7136)</li> <li>\u8ba1\u7b97\u8f93\u5165\u8fdb\u8f93\u51faRNN\u5355\u5143\u7684\u53c2\u6570<code>c&lt;t&gt;</code>\u7684\u65b9\u5f0f\u5728\u53f3\u8fb9, \u662f\u6240\u6709\u7684a\u548c\u6743\u91cd\u03b1\u7684\u4e58\u79ef\u4e4b\u548c</li> <li>\u8f93\u51faRNN\u7684\u6bcf\u4e00\u4e2a\u5355\u5143\u63a5\u53d7: \u9690\u85cf\u72b6\u6001, \u4e0a\u4e00\u4e2a\u5355\u5143\u7684\u8f93\u51fa\u5355\u8bcd(\u9664\u4e86\u7b2c\u4e00\u4e2a\u5355\u5143), \u548c<code>c&lt;t&gt;</code></li> </ul> <p>\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u8fd9\u4e9b\u6743\u91cd\u5462? </p> <p></p> <p>\u5f88\u660e\u663e, \u8fd9\u4e9b\u6743\u91cd\u9996\u5148\u5e94\u8be5\u548ct'\u65f6\u523b\u7684\u6fc0\u6d3b\u53c2\u6570<code>a&lt;t'&gt;</code>\u76f8\u5173, \u4f46\u662f\u4e5f\u540c\u6837\u4e5f\u5e94\u8be5\u548c\u8f93\u51faRNN\u4e0a\u4e00\u4e2a\u5355\u5143\u7684\u9690\u85cf\u72b6\u6001\u6709\u5173. \u90a3\u4e48\u5982\u4f55\u8ba1\u7b97? \u8fd8\u662f\u76f8\u4fe1\u7384\u5b66\u5427! \u8bbe\u8ba1\u4e00\u4e2aMLP, \u7528\u8fd9\u4e2a\u5c0f\u578b\u795e\u7ecf\u7f51\u7edc\u53bb\u8f93\u51fa<code>e&lt;t, t'&gt;</code></p> <p>\u5f97\u5230\u4e86\u8fd9\u4e9b\u53c2\u6570, \u5c31\u53ef\u4ee5\u4f7f\u7528softmax\u4e86, \u56e0\u4e3asoftmax\u65e2\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u53c2\u6570\u662f\u6574\u6570, \u800c\u4e14\u4fdd\u8bc1\u6240\u6709\u7684\u53c2\u6570\u7684\u548c\u4e3a1, \u6ee1\u8db3\u4e86\u6211\u4eec\u6240\u6709\u7684\u9700\u6c42; \u8fd9\u5c31\u662f\u6ce8\u610f\u529b\u673a\u5236\u4e86(transformer\u4e2d\u7684\u6ce8\u610f\u529b\u548c\u8fd9\u91cc\u7684\u6ce8\u610f\u529b\u6709\u4e00\u70b9\u5c0f\u5dee\u522b)</p>"},{"location":"transformer_note/transformer_note.html","title":"Transformer","text":""},{"location":"transformer_note/transformer_note.html#_1","title":"\u7f16\u7801\u548c\u89e3\u7801","text":"<p>\u5982\u4eca\u53c8\u4e09\u4e2a\u4e3b\u6d41\u7684\u5173\u4e8etransformer\u7684\u6a21\u578b\uff1a\u6700\u53f3\u8fb9\u7684\u662fdecoder-only\uff0c\u53ea\u4fdd\u7559\u4e86\u89e3\u7801\u5668\uff0c\u64c5\u957f\u6587\u672c\u8f93\u51fa\u521b\u9020\uff1b\u6700\u5de6\u8fb9\u7684\u662f\u53ea\u4fdd\u7559\u4e86\u7f16\u7801\u5668\u7684\u90e8\u5206\uff0c\u4f8b\u5982BERT\uff0c\u64c5\u957f\u5b66\u4e60\u548c\u7406\u89e3\u8bed\u8a00\u7684\u5185\u5bb9\uff1b\u4e2d\u95f4\u7684\u662f\u4e24\u8005\u90fd\u4fdd\u7559\uff0c\u7528\u4e8e\u8f85\u52a9\u5de6\u53f3\u4e24\u4e2a\u5206\u53c9\u3002</p> <p>\u90a3\u4e48\u7f16\u7801\u548c\u89e3\u7801\u7684\u7801\u662f\u4ec0\u4e48\u5462\uff1f  \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5404\u79cd\u8bed\u8a00\u91cc\u9762\u90a3\u4e9b\u7b26\u53f7\u53d1\u97f3\u7b49\u7b49\u5f62\u5f0f\u4e0a\u7684\u4e0d\u540c\u5265\u79bb\u6389\u4e4b\u540e\uff0c\u5269\u4e0b\u6765\u7684\u5355\u7eaf\u7684\u8bed\u4e49\u5173\u7cfb\u3002\u4e0d\u96be\u60f3\u5230\uff0c\u8fd9\u79cd\u8bed\u4e49\u5173\u7cfb\u5e94\u8be5\u8981\u6570\u5b57\u5316\u4f53\u7cfb\uff0c\u5e76\u4e14\uff0c\u6570\u503c\u4e0a\u5e94\u8be5\u80fd\u591f\u5448\u73b0\u8bed\u4e49\u5173\u7cfb\u3002\u89c1\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a\u5047\u5982\u8bf4\u7528\u9ad8\u7ef4\u5750\u6807\u6765\u4ee3\u8868\u5355\u8bcd\uff0c\u90a3\u4e48\uff1a </p> <p></p> <p>\u7334\u5b50\u548c\u9999\u8549\u5e94\u8be5\u8ddd\u79bb\u6a21\u5f88\u8fd1\uff0c\u4f46\u662f\u539f\u5b50\u80fd\u548c\u9999\u8549\u7684\u6a21\u5f88\u8fdc\uff0c\u8fd9\u4e2a\u9ad8\u7ef4\u5750\u6807\u5c31\u662f\u201c\u7801\u201d\u3002</p>"},{"location":"transformer_note/transformer_note.html#_2","title":"\u5347\u7ef4\u4e0e\u964d\u7ef4","text":"<p>\u90a3\u4e48\u76f4\u89c9\u4e0a\uff0c\u5e94\u8be5\u8981\u5bf9\u6700\u57fa\u7840\u7684\u8bed\u4e49\u5355\u5143\u8fdb\u884c\u6570\u5b57\u5316\uff0c\u90a3\u4e48\u5176\u5b9e\u8fd9\u79cd\u8bed\u4e49\u5355\u5143\u5176\u5b9e\u5c31\u662ftoken\uff0c\u6bd4\u5982\u8bf4\u82f1\u6587\u4e2d\u7684\u5b57\u6bcd\uff0c\u4e2d\u6587\u91cc\u9762\u7684\u5b57\u6216\u8bcd\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u82f1\u6587\u5355\u8bcd\u7684\u8bcd\u6839\u3002\u5e38\u89c1\u7684\u6570\u5b57\u5316token\u7684\u65b9\u6cd5\u662f\u6807\u8bb0\u5668\u548c\u72ec\u70ed\u7f16\u7801\u3002\u6807\u8bb0\u5668\u7684\u6570\u5b57\u5316\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u5728\u4e00\u7ef4\u6570\u8f74\u4e0a\u9762\u4e00\u4e00\u5bf9\u5e94\uff1b\u800c\u72ec\u70ed\u7f16\u7801\u5c31\u662f\u5355\u72ec\u4e3a\u6bcf\u4e00\u4e2atoken\u5f00\u8f9f\u4e00\u4e2a\u7ef4\u5ea6\u3002\u8fd9\u662f\u4e24\u79cd\u6570\u5b57\u5316\u7684\u6781\u7aef\uff0c\u89c6\u89c9\u5316\u4f8b\u5b50\u89c1\u4e0b\uff1a</p> <p></p> <p>\u76f4\u89c9\u4e0a\uff0c\u5206\u8bcd\u5668\u6ca1\u6709\u5229\u7528\u7ef4\u5ea6\u4fe1\u606f\uff0c\u96be\u4ee5\u8868\u8fbe\u590d\u6742\u7684\u8bed\u5883\uff0c\u4f8b\u5982\u82f9\u679c\u9999\u8549\u68a8\u90fd\u662f\u975e\u5e38\u63a5\u8fd1\u7684\u6570\u5b57\uff0c\u4f46\u662f\u82f9\u679c\u8fd8\u53ef\u4ee5\u662f\u624b\u673a\u7684\u540d\u5b57\uff0c\u800c\u534e\u4e3a\u53ef\u80fd\u90fd\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u5b57\u4e86\uff0c\u8ddd\u79bb\u975e\u5e38\u8fdc\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u201c\u82f9\u679c\u201d\u548c\u201c\u534e\u4e3a\u201d\u5728\u6570\u8f74\u4e0a\u5e94\u8be5\u79bb\u5f97\u975e\u5e38\u8fd1\u3002\u800c\u72ec\u70ed\u7f16\u7801\u7ef4\u5ea6\u8fc7\u9ad8\uff0c\u4fe1\u606f\u975e\u5e38\u7a00\u758f\uff0ctoken\u4e4b\u95f4\u7684\u5173\u7cfb\u5e76\u6ca1\u6709\u7528\u201c\u6a21\u957f\u201d\u53bb\u4f53\u73b0\uff0c\u4ec5\u4ec5\u4f7f\u7528\u7ef4\u5ea6\u6765\u533a\u5206\u5f00\u3002</p> <p>\u90a3\u4e48\u5217\u4e3e\u5b8c\u4e86\u4e24\u4e2a\u6781\u7aef\u60c5\u51b5\uff0c\u5c31\u80fd\u7406\u89e3\uff1a\u60f3\u627e\u5230\u4e00\u79cd\u7ef4\u5ea6\u4e0d\u662f\u7279\u522b\u9ad8\uff0c\u4e14\u80fd\u5229\u7528\u6a21\u957f\u4fe1\u606f\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u201c\u6f5c\u7a7a\u95f4\u201d\u3002\u90a3\u4e48\u5982\u4f55\u5bfb\u627e\u5462\uff1f\u8981\u4e48\u662f\u5206\u8bcd\u5668\u5347\u7ef4\uff0c\u8981\u4e48\u662f\u72ec\u70ed\u7f16\u7801\u964d\u7ef4\u3002\u90a3\u4e48\u76f4\u89c9\u4e0a\uff0c\u4e00\u822c\u8ba4\u4e3a\u964d\u7ef4\u4f1a\u66f4\u597d\u4e00\u70b9\uff0c\u6bd5\u7adf\u538b\u7f29\u6bd4\u6362\u5143\u662f\u4e00\u4ef6\u66f4\u5bb9\u6613\u7684\u4e8b\u60c5\u3002\u90a3\u4e48\u7ef4\u5ea6\u7684\u53d8\u6362\uff0c\u5c31\u4e0d\u5f97\u4e0d\u6d89\u53ca\u5230\u77e9\u9635\u4e58\u6cd5\u4e86\uff0c\u56e0\u4e3a\u77e9\u9635\u4e58\u6cd5\u5b9e\u9645\u4e0a\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u7a7a\u95f4\u53d8\u6362\u3002\u90a3\u4e48\u63d0\u5230\u7a7a\u95f4\u53d8\u6362\uff0c\u5c31\u4e0d\u7981\u60f3\u5230\u4e86\u795e\u7ecf\u7f51\u7edc\uff0c\u56e0\u4e3a\u6743\u91cd\u77e9\u9635\u5176\u5b9e\u5c31\u662f\u5b9e\u73b0\u7a7a\u95f4\u53d8\u6362\u3002</p>"},{"location":"transformer_note/transformer_note.html#embedding","title":"\u8bcd\u5d4c\u5165  \uff08embedding\uff09","text":"<p>\u7f16\u7801\u5c31\u662f\u5148\u628a\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u7684token\u90fd\u5148\u7f16\u5199\u6210\u72ec\u70ed\u7801\uff0c\u7136\u540e\u8fdb\u884c\u964d\u7ef4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u76f8\u5f53\u4e8e\u662f\u628a\u8f93\u5165\u7684\u4e00\u53e5\u8bdd\u6839\u636e\u8bed\u4e49\u6295\u5c04\u5230\u4e00\u4e2a\u6f5c\u7a7a\u95f4\u91cc\u9762\u3002\u5d4c\u5165\u7684\u6570\u636e\u4e0d\u4e00\u5b9a\u662f\u5355\u8bcd\uff0c\u4f46\u662f\u5728NLP\u91cc\u9762\u4e3b\u8981\u5c31\u662f\u9488\u5bf9\u5355\u8bcd\u3002\u56e0\u6b64\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u4e00\u5957\u6d41\u7a0b\u6765\u5b9e\u73b0\uff1a\u4e2d\u6587-\u4e2d\u6587\u6f5c\u7a7a\u95f4-\u5171\u540c\u6f5c\u7a7a\u95f4\uff08\u7b97\u6cd5\uff09-\u82f1\u6587\u6f5c\u7a7a\u95f4-\u82f1\u6587\uff0c\u56e0\u6b64\u7f16\u7801\u548c\u89e3\u7801\u5171\u540c\u4f7f\u7528\u3002\u6709\u4e00\u4e2a\u5c0f\u54f2\u5b66\u601d\u60f3\uff0c\u5c31\u662f\u201c\u4e00\u4e2a\u623f\u95f4\u91cc\u9762\u7406\u89e3\u4e2d\u6587\u7684AI\u201d\uff0c\u5b9e\u9645\u4e0aAI\u53ea\u77e5\u9053\u901a\u8fc7\u4e2d\u6587\u7136\u540e\u7ffb\u201c\u624b\u518c\u201d\u7136\u540e\u7ed9\u51fa\u56de\u590d\u3002\u5176\u5b9e\u8fd9\u79cd\u201c\u53ea\u5173\u6ce8\u8bed\u4e49\u7a7a\u95f4\u201d\u548c\u7f16\u7801\u89e3\u7801\u5f88\u7c7b\u4f3c\uff0c\u4f46\u662f\u4f9d\u7136\u6709\u533a\u522b\uff1a\u624b\u518c\u7ed9\u51fa\u7684\u4fe1\u606f\u662f\u79bb\u6563\u7684\uff0c\u80fd\u505a\u7684\u4ec5\u4ec5\u662f\u4e00\u4e00\u5bf9\u5e94\uff1b\u4f46\u662f\u6f5c\u7a7a\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u6709\u7684\u65f6\u5019\u673a\u5668\u9047\u5230\u6ca1\u6709\u5b66\u4e60\u8fc7\u7684\u60c5\u666f\uff0c\u4e5f\u4f9d\u7136\u80fd\u591f\u6839\u636e\u6f5c\u7a7a\u95f4\u8fdb\u884c\u5206\u6790\uff0c\u4f46\u662f\u624b\u518c\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\u3002</p> <p>\u56e0\u6b64\uff0c\u6f5c\u7a7a\u95f4\u662f\u4ec0\u4e48\uff1f\u5176\u5b9e\u5c31\u662f\u8bed\u4e49\u7ef4\u5ea6\u3002\u4e0b\u9762\u6709\u4e00\u4e2a\u975e\u5e38\u751f\u52a8\u7684\u4f8b\u5b50\uff1a</p> <p></p> <p>\u6bcf\u4e00\u4e2a\u7ef4\u5ea6\u5176\u5b9e\u662f\u4e00\u4e2a\u8bed\u4e49\u7a7a\u95f4\uff0c\u4f8b\u5982\u7b2c\u4e00\u4e2a\u662f\u6c34\u679c\u8bed\u4e49\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u4e2a\u662f\u7269\u7406\uff0c\u7b2c\u4e09\u4e2a\u662f\u624b\u673a\uff0c\u7b2c\u56db\u4e2a\u662f\u6c14\u5473\u3002\u5f53\u7136\u8fd9\u91cc\u662f\u4e3e\u4f8b\u5b50\uff0c\u5b9e\u9645\u4e0a\u673a\u5668\u6700\u540e\u7b97\u51fa\u6765\u7684\u8bed\u4e49\u7a7a\u95f4\uff0c\u53ef\u80fd\u6211\u4eec\u81ea\u5df1\u90fd\u65e0\u6cd5\u7406\u89e3\uff0c\u4f46\u662f\u6700\u540e\u6574\u4f53\u6548\u679c\u5c31\u662f\u6b63\u786e\u7684\u3002\u90a3\u4e48NLP\u91cc\u9762\uff0c\u8fd9\u79cdtoken\u5c31\u662f\u8bed\u4e49\uff0c\u800c\u5728\u56fe\u50cf\u5904\u7406\u4e2d\uff0ctoken\u5c31\u662fchannel\uff08RGB\uff09\u3002\u4e0d\u59a8\u8fc1\u79fb\u60f3\u60f3\uff0c\u5377\u79ef\u6838\u5176\u5b9e\u4e5f\u662f\u964d\u7ef4\u548c\u5347\u7ef4\u7684\u624b\u6bb5\uff01</p> <p>\u6240\u4ee5\u8bf4\u4e3a\u4ec0\u4e48\u624b\u518c\u65e0\u80fd\u4e3a\u529b\u5462\uff1f\u4e00\u79cd\u7406\u89e3\u662f\u8fd9\u79cdkey-value\u7684\u5bf9\u5e94\u65b9\u5f0f\u7684\u52bf\u662f\u963f\u5217\u592b\u96f6\uff0c\u548c\u81ea\u7136\u6570\u7b49\u52bf\uff0c\u662f\u53ef\u6570\u7684countable\uff1b\u4f46\u662f\u6211\u4eec\u6240\u671f\u671b\u7684\u6a21\u578b\u5e94\u8be5\u80fd\u5b9e\u73b0\u201c\u8d85\u8d8a\u7ecf\u9a8c\u53bb\u751f\u6210\u5408\u7406\u5185\u5bb9\u201d\uff0c\u5373uncountable\u3002</p>"},{"location":"transformer_note/transformer_note.html#word2vec","title":"Word2Vec","text":"<p>\u5982\u4f55\u5c06token\u964d\u7ef4\u6295\u5c04\u81f3\u6f5c\u7a7a\u95f4\u5462\uff1f\u8fd9\u80af\u5b9a\u9700\u8981\u673a\u5668\u5b66\u4e60\uff0c\u4f46\u662f\u5982\u4f55\u64cd\u4f5c\u5462\uff1f\u8c37\u6b4c2013\u5e74\u63d0\u51fa\u4e86Word2Vec\u5c31\u662f\u4e00\u4e2a\u529e\u6cd5\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u6a21\u578b\u6700\u540e\u5f97\u51fa\u7684\u7ed3\u679c\uff0c\u662f\u4e00\u4e2a\u53c2\u6570\u8bad\u7ec3\u597d\u7684\u5d4c\u5165\u77e9\u9635\uff0c\u66f4\u50cf\u662f\u7f16\u5199\u5b57\u5178\uff0c\u800c\u4e0d\u662f\u4e3a\u4e86\u5b9e\u73b0\u67d0\u4e00\u4e2a\u529f\u80fd\u3002\u56e0\u6b64\uff0cWord2Vec\u5e76\u6ca1\u6709\u4f7f\u7528\u6fc0\u6d3b\u51fd\u6570\uff0c\u8ba1\u7b97\u66f4\u52a0\u7b80\u5355\u3002</p> <p>\u90a3\u4e48\u5982\u4f55\u8bbe\u8ba1\u795e\u7ecf\u7f51\u7edc\uff1f\u6211\u4eec\u5e0c\u671btoken\u7ecf\u8fc7\u77e9\u9635\u548c\u9006\u77e9\u9635\uff0c\u5373\u7f16\u7801\u548c\u89e3\u7801\u7684\u8fc7\u7a0b\u4e4b\u540e\uff0c\u7ed3\u679c\u4f9d\u7136\u662ftoken\u672c\u8eab\uff0c\u90a3\u4e48\u5728\u8fd9\u79cd\u8bbe\u8ba1\u4e0a\u6839\u672c\u4e0d\u80fd\u8bad\u7ec3\uff0c\u56e0\u4e3a\u538b\u6839\u6ca1\u6709\u504f\u5dee\uff0c\u65e0\u6cd5\u8fdb\u884cbackward propogation\u3002\u90a3\u4e48\u8bba\u6587\u4e2d\u63d0\u51fa\u4e86\u4e24\u4e2a\u529e\u6cd5\uff1aCBOW &amp; skip-gram</p> <p></p> <p>\u9996\u5148\u662fCBOW,\u51c6\u5907\u5947\u6570\u4e2atoken\uff0c\u7136\u540e\u53bb\u6389\u4e00\u4e2a\uff0c\u5269\u4e0b\u7684\u5404\u81ea\u548c\u5d4c\u5165\u77e9\u9635\u76f8\u4e58\uff0c\u7136\u540e\u7b97\u51fa\u7684\u51e0\u4e2a\u5411\u91cf\u76f8\u52a0\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u548c\u5411\u91cf\u8fdb\u884c\u89e3\u7801\uff0c\u6bd4\u8f83\u8fd9\u4e2a\u89e3\u7801\u7ed3\u679c\u548ctoken\u662f\u5426\u4e00\u81f4\u3002\u4e3a\u4ec0\u4e48\u5f97\u5230\u7684\u548c\u5411\u91cf\u5e94\u8be5\u5c31\u662f\u90a3\u4e2a\u7f3a\u5931\u7684\u5411\u91cf\uff1f\u56e0\u4e3a\u7c7b\u4f3c\u4e8e\u53d7\u529b\u5206\u6790\uff0c\u4e00\u4e2a\u5b8c\u6574\u7684\u8bed\u4e49\u4e0b\uff0ctoken\u80fd\u4e14\u53ea\u80fd\u901a\u8fc7\u4e0a\u4e0b\u6587\u7406\u89e3\uff0c\u90a3\u4e48\u76f4\u89c9\u4e0a\uff0c\u8ba4\u4e3a\u8fd9\u4e2a\u7f3a\u5931\u7684\u529b\u662f\u53e6\u5916\u51e0\u4e2a\u529b\u7684\u5408\u529b\u662f\u80fd\u591f\u8ba4\u540c\u7684\u3002</p> <p></p> <p>skip-gram\u5176\u5b9e\u5c31\u662fCBOW\u53cd\u8fc7\u6765\u7528\uff0c\u5df2\u77e5\u4e00\u4e2atoken,\u6c42\u51fa\u4e0a\u4e0b\u6587\u7684token,\u770b\u548c\u8bad\u7ec3\u6570\u636e\u662f\u5426\u4e00\u81f4\u3002\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u81ea\u76d1\u7763\u5b66\u4e60\u3002</p> <p></p> <p>\u5728\u8bad\u7ec3\u4e2d\uff0c\u5176\u5b9e\u795e\u7ecf\u7f51\u7edc\u5c31\u662f\u770b\u6210\u53ea\u6709\u4e00\u4e2a\u9690\u85cf\u5c42\uff0c\u800c\u8ba1\u7b97\u6b65\u9aa4\u4e2d\u4e5f\u6ca1\u6709\u504f\u7f6e\u53c2\u6570b\uff0c\u4ee5\u53ca\u6fc0\u6d3b\u51fd\u6570\uff08\u7a7a\u95f4\u53d8\u6362\u662f\u7ebf\u6027\u7684\uff09\u3002\u90a3\u4e48\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662f\u770b\u4f3c\u6211\u4eec\u4e0d\u9700\u8981\u8ba1\u7b97decoder matrix, \u56e0\u4e3aencoder and decoder\u4e24\u4e2a\u77e9\u9635\u4e0d\u5e94\u8be5\u662f\u76f8\u4e58\u4e3a\u5355\u4f4d\u77e9\u9635\u5417\uff1f\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u4e24\u4e2a\u77e9\u9635\u90fd\u662f\u5404\u81ea\u8bad\u7ec3\u5404\u81ea\u7684\u3002</p>"},{"location":"transformer_note/transformer_note.html#_3","title":"\u6ce8\u610f\u529b","text":""},{"location":"transformer_note/transformer_note.html#_4","title":"\u81ea\u6ce8\u610f\u529b","text":"<p>\u6ce8\u610f\u5230\u8f93\u5165\u7684\u5176\u5b9e\u5df2\u7ecf\u8fdb\u884c\u8fc7\u7f16\u7801\u4e86\uff0c\u90a3\u4e48\u6d41\u7a0b\u4e2d\u6700\u91cd\u8981\u7684\u5176\u5b9e\u662f\u6a59\u8272\u7684\u6ce8\u610f\u529b\u6a21\u5757\u3002\u5982\u4f55\u5728\u4e00\u4e2a\u6587\u672c\u4e2d\u7406\u89e3\u4e00\u4e2atoken\u7684\u8bed\u4e49\uff1f\u4e0d\u540c\u8bed\u5883\u4e0b\uff0c\u4e00\u4e2atoken\u8bed\u4e49\u53ef\u80fd\u4e0d\u540c\uff0c\u9009\u62e9\u54ea\u4e2a\u4fbf\u662f\u95ee\u9898\u3002\u90a3\u4e48\u5982\u4f55\u5904\u7406\uff1f </p> <p></p> <p>\u5148\u4e0d\u7ba1QKV\u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u5148\u8c08A\u4e3a\u4ec0\u4e48\u9664\u4ee5\u6807\u51c6\u5dee\uff1a\u662f\u4e3a\u4e86\u6807\u51c6\u6b63\u6001\u5206\u5e03\u3002\u7136\u540e\u5bf9\u5f97\u5230\u7684A\u9010\u884csoftmax\uff0c\u7136\u540e\u518d\u548cV\u76f8\u4e58\u3002\u90a3\u4e48V\u5176\u5b9e\u5c31\u662f\u5b57\u5178\u91cc\u9762\u7684\u8bed\u4e49\uff0c\u800cQK\u662f\u5e72\u4ec0\u4e48\u7528\u7684\u5462\uff1fA'\u5176\u5b9e\u5c31\u662f\u76f8\u5f53\u4e8e\u8fd9\u6bb5\u8bdd\u56e0\u4e3a\u4e0a\u4e0b\u6587\u800c\u4ea7\u751f\u7684\u4fee\u6539\u7cfb\u6570\u3002\u4e3a\u4ec0\u4e48\u4ee3\u8868\u4fee\u6539\u7cfb\u6570\uff1f\u8981\u660e\u786e\u7684\u4e00\u70b9\u662f\uff0c\u5176\u5b9eQKV\u90fd\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u5f97\u5230\u7684A\u5176\u5b9e\u6bcf\u4e00\u9879\u90fd\u662f\u4e00\u4e2a\u8bcd\u5411\u91cf\u548c\u53e6\u5916\uff08\u6216\u8005\u672c\u8eab\uff09\u8bcd\u5411\u91cf\u7684\u5185\u79ef\uff0c\u8fd9\u79cd\u5185\u79ef\u5176\u5b9e\u5c31\u662f\u6295\u5f71\uff0c\u80fd\u591f\u4f53\u73b0\u5173\u7cfb\uff0c</p> <p></p> <p>\u8fd9\u79cd\u5173\u7cfb\u518d\u8fdb\u884c\u6807\u51c6\u6b63\u6001\u5206\u5e03\u5316\uff0c\u7528softmax\u5f97\u5230\u4fee\u6b63\u6743\u91cd\uff0c\u6700\u540e\u548c\u539f\u672c\u7684V\uff08\u7f16\u7801\u540e\u7684\uff09\u8fdb\u884c\u4e0a\u4e0b\u6587\u4fee\u6b63\u3002\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u4f7f\u5f97\u4e00\u6bb5\u6587\u672c\u589e\u52a0\u4e86\u4e3b\u89c2\u6027\u3002</p> <p>\u90a3\u4e48QK\u5b58\u5728\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff1f\u4e00\u79cd\u7406\u89e3\u662f\u4e8c\u6b21\u578b\u6709\u66f4\u5f3a\u7684\u975e\u7ebf\u6027\uff0c\u5373\u66f4\u5f3a\u7684\u6cdb\u5316\u80fd\u529b\uff1b\u53e6\u5916\u4e00\u79cd\u7406\u89e3\u662f\u201c\u8bbe\u5b9a\u8bed\u4e49\u201d\u4e0e\u201c\u8868\u8fbe\u8bed\u4e49\u201d\u4e4b\u5206\u3002</p> <p></p>"},{"location":"transformer_note/transformer_note.html#_5","title":"\u4ea4\u53c9\u6ce8\u610f\u529b","text":"<p>\u81ea\u6ce8\u610f\u529b\u5176\u5b9e\u5c31\u662f\u81ea\u5df1\u201d\u95f7\u5934\u82e6\u5b66\u201c\uff0c\u800c\u4ea4\u53c9\u6ce8\u610f\u529b\u5c31\u76f8\u5f53\u4e8e\u662f\u6709\u4e86\u4e00\u672c\u53c2\u8003\uff1a</p> <p></p> <p>\u4fee\u6b63\u53c2\u6570\u4e0d\u518d\u662f\u4ec5\u4ec5\u53d6\u51b3\u4e8e\u6587\u672c\u672c\u8eab\u4e86\uff0c\u8fd8\u5f15\u5165\u4e86\u5916\u754c\u8bed\u4e49Q\u3002</p> <p></p> <p>\u5728\u4e0a\u9762\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u201c\u597d\u4e45\u4e0d\u89c1\u201d\u5c31\u76f8\u5f53\u4e8e\u662f\u53c2\u8003\uff0c\u800c\u4e00\u5f00\u59cb\u89e3\u7801\u5668\u91cc\u9762\u8f93\u5165\u7684\u662f\u201c\u5f00\u59cb\u201d\uff0c\u7136\u540e\u9876\u4e0asoftmax\u5f97\u51fa\u4e0b\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u6bcf\u4e00\u4e2atoken\u7684\u6982\u7387\u5206\u5e03\uff0c\u9009\u53d6\u6700\u5927\u7684\u53ef\u80fd\u6027\u7684token, \u6bd4\u5982\u8bf4\u662flong, \u7136\u540e\u518d\u4e0d\u65ad\u91cd\u590d\uff0c\u76f4\u5230\u6700\u540esoftmax\u91cc\u9762\u6982\u7387\u6700\u5927\u7684\u662f\u201c\u7ec8\u6b62\u7b26\u201d\u3002\u8fd9\u6837\u5c31\u662f\u89e3\u51b3\u4e86seq2seq\u7684\u95ee\u9898\uff08\u4e2d\u82f1\u6587\u540c\u4e00\u8bed\u4e49\u7684token\u6570\u91cf\u53ef\u80fd\u4e0d\u4e00\u6837\uff09\u3002</p>"},{"location":"transformer_note/transformer_note.html#positional-encoding","title":"\u4f4d\u7f6e\u7f16\u7801\uff08Positional Encoding\uff09","text":"<p>token\u7684\u5e8f\u5217\u3001\u4f4d\u7f6e\u662f\u5341\u5206\u91cd\u8981\u7684\uff0c\u4e0d\u540c\u987a\u5e8f\u7684token\u643a\u5e26\u7684\u8bed\u4e49\u662f\u4e0d\u4e00\u6837\u7684\u3002\u8bba\u6587\u91cc\u9762\u4f7f\u7528\u7684\u662f\u201c\u52a0\u6cd5\u201d\u3002</p> <p></p> <p>\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u8fc7\u4e8e\u590d\u6742\uff0c\u8fd9\u91cc\u4e0d\u591a\u8bf4\u4e86QAQ\u3002</p>"},{"location":"transformer_note/transformer_note.html#_6","title":"\u591a\u5934\u6ce8\u610f\u529b","text":"<p>\u4e09\u4e2a\u72ec\u7acb\u7684\u8bad\u7ec3\u53c2\u6570\u5404\u81ea\u7b97\uff0c\u7136\u540e\u7b97\u51fa\u6765\u4e4b\u540e\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u518d\u4e58\u4ee5W\u5f97\u5230\u7ed3\u679c\u3002\u8fd9\u5c31\u662f\u591a\u5934\u8bed\u4e49\u7684\u7ed3\u5408\u3002\u7075\u611f\u6765\u6e90\u4e8e\u201c\u901a\u9053\u201d\uff0c\u4e0d\u540c\u8bed\u4e49\u4e5f\u662f\u4e00\u79cd\u901a\u9053\uff0c\u7c7b\u4f3c\u4e8eRGB\u3002\u90a3\u4e48\u7b97\u51fa\u6765\u4e86Z012\uff0c\u5176\u5b9e\u4e0d\u540c\u7684\u8bed\u4e49\uff0c\u7136\u540e\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u6700\u540e\u7528\u6743\u91cd\u51b3\u5b9a\u5e94\u8be5\u662f\u54ea\u4e00\u79cd\u8bed\u4e49\u3002</p>"},{"location":"transformer_note/transformer_note.html#_7","title":"\u63a9\u7801","text":"<p>\u5728Transformer\u6a21\u578b\u4e2d\uff0c\u63a9\u7801\uff08mask\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5c4f\u853d\u8f93\u5165\u5e8f\u5217\u4e2d\u67d0\u4e9b\u4f4d\u7f6e\u7684\u673a\u5236\u3002\u5728\u81ea\u6ce8\u610f\u529b\u673a\u5236\u4e2d\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u4e0e\u5176\u4ed6\u4f4d\u7f6e\u8fdb\u884c\u4ea4\u4e92\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u4e0d\u80fd\u8bbf\u95ee\u67d0\u4e9b\u4f4d\u7f6e\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5728\u8bed\u8a00\u6a21\u578b\u4e2d\uff0c\u4e3a\u4e86\u907f\u514d\u6a21\u578b\u5728\u751f\u6210\u67d0\u4e2a\u8bcd\u65f6\u770b\u5230\u672a\u6765\u7684\u8bcd\uff0c\u6211\u4eec\u9700\u8981\u5c4f\u853d\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\u7684\u4f4d\u7f6e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2a\u63a9\u7801\u77e9\u9635\uff0c\u5c06\u8981\u5c4f\u853d\u7684\u4f4d\u7f6e\u5bf9\u5e94\u7684\u5143\u7d20\u8bbe\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u8d1f\u6570\uff0c\u8fd9\u6837\u7ecf\u8fc7softmax\u540e\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u5bf9\u5e94\u7684\u6743\u91cd\u5c31\u4f1a\u63a5\u8fd1\u4e8e0\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u5bf9\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u5c4f\u853d\u3002\u63a9\u7801\u901a\u5e38\u662f\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u5176\u7ef4\u5ea6\u4e0e\u8f93\u5165\u5e8f\u5217\u7684\u957f\u5ea6\u76f8\u540c\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html","title":"\u611f\u77e5\u673a","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html#perceptron","title":"\u611f\u77e5\u673a\uff08Perceptron\uff09","text":"<p>\u5728\u6700\u65e9\u7684\u611f\u77e5\u673a\u4e2d\uff0c\u7ed3\u6784\u975e\u5e38\u7b80\u5355\uff0c\u7ed9\u53c2\u6570x\uff0c\u7136\u540e\u5e0c\u671b\u7528w, b\u4e24\u4e2a\u53c2\u6570\u53bb\u5224\u65ad\uff1a\u8f93\u5165x\u5bf9\u5e94\u7684y\u7a76\u7adf\u662f1\u8fd8\u662f-1\u3002\u90a3\u4e48\u53ef\u4ee5\u7528\u5982\u4e0b\u6765\u8868\u793a\uff1a  \u8bad\u7ec3\u8fd9\u4e2a\u611f\u77e5\u673a\u7684\u6d41\u7a0b\u4e5f\u5341\u5206\u7b80\u5355\uff1a\u8f93\u5165x\uff0c\u770b\u8f93\u51fa\u7684y\u662f\u5426\u548c\u771f\u5b9e\u7684y\u4e00\u6837\uff0c\u5982\u679c\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u4e0d\u66f4\u65b0\u53c2\u6570\uff1b\u53cd\u4e4b\uff0c\u5219\\(w\\leftarrow w+y_ix_i\\ and\\ b\\leftarrow b+y_i\\)\u3002\u5173\u4e8e\u66f4\u65b0\u53c2\u6570\u8fd9\u4e00\u70b9\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u4f7f\u7528\u6279\u91cf\u5927\u5c0f\u4e3a1\u7684\u68af\u5ea6\u4e0b\u964d\u3002</p> <p>\u7531\u4e8e\u8fd9\u4e2a\u611f\u77e5\u673a\u7ed3\u6784\u7b80\u5355\uff0c\u56e0\u6b64\u5b83\u6709\u5f88\u597d\u7684\u6536\u655b\u5b9a\u7406\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u5173\u4e8e\u8be5\u5b9a\u7406\u7684\u8be6\u7ec6\u8bf4\u660e\u548c\u8bc1\u660e\uff0cChatGPT\u89e3\u91ca\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p></p> <p>\u4f46\u662f\u611f\u77e5\u673a\u4e0d\u662f\u4e07\u80fd\u7684\uff0c\u6bd4\u5982\u8bf4\u611f\u77e5\u673a\u4e0d\u80fd\u62df\u5408XOR\uff08\u5f02\u6216\uff09\u51fd\u6570\uff0c\u5b83\u53ea\u80fd\u4ea7\u751f\u7ebf\u6027\u5206\u5272\u5e73\u9762\u3002\u5f53\u65f6\u7684\u4eba\u4eec\u53d1\u73b0\u611f\u77e5\u673a\u6709\u4e9b\u51fd\u6570\u65e0\u6cd5\u62df\u5408\uff0c\u611f\u5230\u975e\u5e38\u7684\u60b2\u4f24\uff0c\u4eba\u5de5\u667a\u80fd\u7684\u7b2c\u4e00\u6b21\u5bd2\u51ac\u6765\u4e34\u3002\u4f46\u662f\u5341\u4f59\u5e74\u4e4b\u540e\uff0c\u4eba\u4eec\u5c31\u6210\u529f\u53d1\u73b0\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\uff1a\u6df1\u5c42\u611f\u77e5\u673a\u3002</p> <p>\u603b\u800c\u8a00\u4e4b\uff1a\u611f\u77e5\u673a\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7b\u6a21\u578b\uff0c\u662f\u6700\u65e9\u7684AI\u6a21\u578b\u3002\u5b83\u7684\u6c42\u89e3\u7b97\u6cd5\u7b49\u4ef7\u4e8e\u4f7f\u7528\u6279\u91cf\u5927\u5c0f\u4e3a1\u7684\u68af\u5ea6\u4e0b\u964d\u3002\u5b83\u4e0d\u80fd\u62df\u5408XOR\u51fd\u6570\uff0c\u4ecd\u6709\u5f88\u5927\u7684\u56f0\u96be\u9700\u8981\u514b\u670d\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html#_2","title":"\u591a\u5c42\u611f\u77e5\u673a","text":"<p>\u6a21\u578b\u5982\u4f55\u5b66\u4e60XOR\u51fd\u6570\uff1f\u65e2\u7136\u4e4b\u524d\u7684\u4e00\u4e2a\u611f\u77e5\u673a\u4e0d\u80fd\u901a\u8fc7\u62df\u5408\u4e00\u4e2a\u51fd\u6570\u6765\u5212\u5206\uff0c\u90a3\u4e48\u80fd\u4e0d\u80fd\u7528\u591a\u4e2a\u51fd\u6570\u5462\uff1f\u5982\u4e0b\u56fe\u6240\u793a\u3002\u7528\u4e24\u4e2a\u611f\u77e5\u673a\u62df\u5408\u51fa\u4e24\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u518d\u7528\u4e00\u4e2a\u51fd\u6570\u53bb\u5229\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u7ed3\u679c\u3002\u90a3\u4e48\u6700\u540e\uff0c\u5c31\u53ef\u4ee5\u7528\u4e09\u4e2a\u51fd\u6570\u6765\u5212\u5206\u8fd9\u4e2a\u6570\u636e\u7a7a\u95f4\u4e86\u3002</p> <p></p> <p>\u8fd9\u79cd\u601d\u8def\u53ef\u4ee5\u7528\u4e0b\u9762\u8fd9\u4e2a\u56fe\u6765\u6f14\u793a\uff1a\u539f\u6765\u5355\u5c42\u611f\u77e5\u673a\u5c31\u662finput -&gt; output\uff0c\u4f46\u662f\u73b0\u5728\u7684\u89e3\u51b3\u65b9\u6848\u660e\u663e\u6709\u4e00\u4e2a\u4e2d\u95f4\u8fc7\u7a0b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e2d\u95f4\u8fc7\u7a0b\u5c31\u79f0\u4e3a\u9690\u85cf\u5c42\uff1b\u4e0a\u56fe\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u4e0b\u56fe\u4e2d\u7684input layer\u6709\u4e24\u4e2a\u5355\u5143\uff08x, y\u503c\uff09\uff0c\u4e2d\u95f4\u8fc7\u7a0b\u6709\u4e24\u4e2a\u5355\u5143\uff08\u4e00\u4e2a\u84dd\u8272\u5212\u5206\u7ebf\uff0c\u4e00\u4e2a\u9ec4\u8272\u5212\u5206\u7ebf\uff09\uff0coutput layer\u662f\u4e00\u4e2a\u5355\u5143\uff08(x,y)\u70b9\u662f\u7ea2\u8272\u8fd8\u662f\u7eff\u8272\uff09\u3002</p> <p></p> <p>\u6211\u4eec\u901a\u8fc7\u77e9\u9635\\(\\mathbf{X} \\in \\mathbb{R}^{n \\times d}\\)\u6765\u8868\u793a\\(n\\)\u4e2a\u6837\u672c\u7684\u5c0f\u6279\u91cf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6837\u672c\u5177\u6709\\(d\\)\u4e2a\u8f93\u5165\u7279\u5f81\u3002\u5bf9\u4e8e\u5177\u6709\\(h\\)\u4e2a\u9690\u85cf\u5355\u5143\u7684\u5355\u9690\u85cf\u5c42\u591a\u5c42\u611f\u77e5\u673a\uff0c\u7528\\(\\mathbf{H} \\in \\mathbb{R}^{n \\times h}\\)\u8868\u793a\u9690\u85cf\u5c42\u7684\u8f93\u51fa\uff0c\u79f0\u4e3a\u9690\u85cf\u8868\u793a\uff08hidden representations\uff09\u3002\u5728\u6570\u5b66\u6216\u4ee3\u7801\u4e2d\uff0c\\(\\mathbf{H}\\)\u4e5f\u88ab\u79f0\u4e3a\u9690\u85cf\u5c42\u53d8\u91cf\uff08hidden-layer variable\uff09\u6216\u9690\u85cf\u53d8\u91cf\uff08hidden variable\uff09\u3002\u56e0\u4e3a\u9690\u85cf\u5c42\u548c\u8f93\u51fa\u5c42\u90fd\u662f\u5168\u8fde\u63a5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u9690\u85cf\u5c42\u6743\u91cd\\(\\mathbf{W}^{(1)} \\in \\mathbb{R}^{d \\times h}\\)\u548c\u9690\u85cf\u5c42\u504f\u7f6e\\(\\mathbf{b}^{(1)} \\in \\mathbb{R}^{1 \\times h}\\)\u4ee5\u53ca\u8f93\u51fa\u5c42\u6743\u91cd\\(\\mathbf{W}^{(2)} \\in \\mathbb{R}^{h \\times q}\\)\u548c\u8f93\u51fa\u5c42\u504f\u7f6e\\(\\mathbf{b}^{(2)} \\in \\mathbb{R}^{1 \\times q}\\)\u3002</p> <p>\u5f62\u5f0f\u4e0a\uff0c\u6211\u4eec\u6309\u5982\u4e0b\u65b9\u5f0f\u8ba1\u7b97\u5355\u9690\u85cf\u5c42\u591a\u5c42\u611f\u77e5\u673a\u7684\u8f93\u51fa\\(\\mathbf{O} \\in \\mathbb{R}^{n \\times q}\\)\uff1a  \u6ce8\u610f\u5728\u6dfb\u52a0\u9690\u85cf\u5c42\u4e4b\u540e\uff0c\u6a21\u578b\u73b0\u5728\u9700\u8981\u8ddf\u8e2a\u548c\u66f4\u65b0\u989d\u5916\u7684\u53c2\u6570\u3002\u53ef\u6211\u4eec\u80fd\u4ece\u4e2d\u5f97\u5230\u4ec0\u4e48\u597d\u5904\u5462\uff1f\u5728\u4e0a\u9762\u5b9a\u4e49\u7684\u6a21\u578b\u91cc\uff0c\u6211\u4eec\u6ca1\u6709\u597d\u5904\uff01\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u4e0a\u9762\u7684\u9690\u85cf\u5355\u5143\u7531\u8f93\u5165\u7684\u4eff\u5c04\u51fd\u6570\u7ed9\u51fa\uff0c\u800c\u8f93\u51fa\uff08softmax\u64cd\u4f5c\u524d\uff09\u53ea\u662f\u9690\u85cf\u5355\u5143\u7684\u4eff\u5c04\u51fd\u6570\u3002\u4eff\u5c04\u51fd\u6570\u7684\u4eff\u5c04\u51fd\u6570\u672c\u8eab\u5c31\u662f\u4eff\u5c04\u51fd\u6570\uff0c\u4f46\u662f\u6211\u4eec\u4e4b\u524d\u7684\u7ebf\u6027\u6a21\u578b\u5df2\u7ecf\u80fd\u591f\u8868\u793a\u4efb\u4f55\u4eff\u5c04\u51fd\u6570\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e00\u7b49\u4ef7\u6027\uff0c\u5373\u5bf9\u4e8e\u4efb\u610f\u6743\u91cd\u503c\uff0c\u6211\u4eec\u53ea\u9700\u5408\u5e76\u9690\u85cf\u5c42\uff0c\u4fbf\u53ef\u4ea7\u751f\u5177\u6709\u53c2\u6570\\(\\mathbf{W} = \\mathbf{W}^{(1)}\\mathbf{W}^{(2)}\\)\u548c\\(\\mathbf{b} = \\mathbf{b}^{(1)} \\mathbf{W}^{(2)} + \\mathbf{b}^{(2)}\\)\u7684\u7b49\u4ef7\u5355\u5c42\u6a21\u578b\uff1a  \u4e3a\u4e86\u53d1\u6325\u591a\u5c42\u67b6\u6784\u7684\u6f5c\u529b\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u5173\u952e\u8981\u7d20\uff1a\u5728\u4eff\u5c04\u53d8\u6362\u4e4b\u540e\u5bf9\u6bcf\u4e2a\u9690\u85cf\u5355\u5143\u5e94\u7528\u975e\u7ebf\u6027\u7684\u6fc0\u6d3b\u51fd\u6570\uff08activation function\uff09\\(\\sigma\\)\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html#_3","title":"\u6fc0\u6d3b\u51fd\u6570","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html#sigmoid","title":"sigmoid","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u5b9a\u4e49\u57df\u5728\\(\\mathbb{R}\\)\u4e2d\u7684\u8f93\u5165\uff0csigmoid\u51fd\u6570\u5c06\u8f93\u5165\u53d8\u6362\u4e3a\u533a\u95f4(0, 1)\u4e0a\u7684\u8f93\u51fa\u3002\u56e0\u6b64\uff0csigmoid\u901a\u5e38\u79f0\u4e3a\u6324\u538b\u51fd\u6570\uff08squashing function\uff09\uff1a\u5b83\u5c06\u8303\u56f4\uff08-inf, inf\uff09\u4e2d\u7684\u4efb\u610f\u8f93\u5165\u538b\u7f29\u5230\u533a\u95f4\uff080, 1\uff09\u4e2d\u7684\u67d0\u4e2a\u503c\uff1a  sigmoid\u51fd\u6570\u662f\u4e00\u4e2a\u81ea\u7136\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5e73\u6ed1\u7684\u3001\u53ef\u5fae\u7684\u9608\u503c\u5355\u5143\u8fd1\u4f3c\u3002\u5f53\u6211\u4eec\u60f3\u8981\u5c06\u8f93\u51fa\u89c6\u4f5c\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\u7684\u6982\u7387\u65f6\uff0csigmoid\u4ecd\u7136\u88ab\u5e7f\u6cdb\u7528\u4f5c\u8f93\u51fa\u5355\u5143\u4e0a\u7684\u6fc0\u6d3b\u51fd\u6570\uff08sigmoid\u53ef\u4ee5\u89c6\u4e3asoftmax\u7684\u7279\u4f8b\uff09\u3002\u7136\u800c\uff0csigmoid\u5728\u9690\u85cf\u5c42\u4e2d\u5df2\u7ecf\u8f83\u5c11\u4f7f\u7528\uff0c\u5b83\u5728\u5927\u90e8\u5206\u65f6\u5019\u88ab\u66f4\u7b80\u5355\u3001\u66f4\u5bb9\u6613\u8bad\u7ec3\u7684ReLU\u6240\u53d6\u4ee3\u3002\u6ce8\u610f\uff0c\u5f53\u8f93\u5165\u63a5\u8fd10\u65f6\uff0csigmoid\u51fd\u6570\u63a5\u8fd1\u7ebf\u6027\u53d8\u6362\u3002</p> <p>sigmoid\u51fd\u6570\u7684\u5bfc\u6570\u4e3a\u4e0b\u9762\u7684\u516c\u5f0f\uff1a  </p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html#tanh","title":"tanh","text":"<p>\u4e0esigmoid\u51fd\u6570\u7c7b\u4f3c\uff0ctanh(\u53cc\u66f2\u6b63\u5207)\u51fd\u6570\u4e5f\u80fd\u5c06\u5176\u8f93\u5165\u538b\u7f29\u8f6c\u6362\u5230\u533a\u95f4(-1, 1)\u4e0a\u3002tanh\u51fd\u6570\u7684\u516c\u5f0f\u5982\u4e0b\uff1a  \u6ce8\u610f\uff0c\u5f53\u8f93\u5165\u57280\u9644\u8fd1\u65f6\uff0ctanh\u51fd\u6570\u63a5\u8fd1\u7ebf\u6027\u53d8\u6362\u3002\u51fd\u6570\u7684\u5f62\u72b6\u7c7b\u4f3c\u4e8esigmoid\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u662ftanh\u51fd\u6570\u5173\u4e8e\u5750\u6807\u7cfb\u539f\u70b9\u4e2d\u5fc3\u5bf9\u79f0\u3002tanh\u51fd\u6570\u7684\u5bfc\u6570\u662f\uff1a  </p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html#relu","title":"ReLU","text":"<p>\u6700\u53d7\u6b22\u8fce\u7684\u6fc0\u6d3b\u51fd\u6570\u662f\u4fee\u6b63\u7ebf\u6027\u5355\u5143\uff08Rectified linear unit\uff0cReLU\uff09\uff0c\u56e0\u4e3a\u5b83\u5b9e\u73b0\u7b80\u5355\uff0c\u540c\u65f6\u5728\u5404\u79cd\u9884\u6d4b\u4efb\u52a1\u4e2d\u8868\u73b0\u826f\u597d\u3002\u7ed9\u5b9a\u5143\u7d20\\(x\\)\uff0cReLU\u51fd\u6570\u88ab\u5b9a\u4e49\u4e3a\u8be5\u5143\u7d20\u4e0e\\(0\\)\u7684\u6700\u5927\u503c\uff1a  \u901a\u4fd7\u5730\u8bf4\uff0cReLU\u51fd\u6570\u901a\u8fc7\u5c06\u76f8\u5e94\u7684\u6d3b\u6027\u503c\u8bbe\u4e3a0\uff0c\u4ec5\u4fdd\u7559\u6b63\u5143\u7d20\u5e76\u4e22\u5f03\u6240\u6709\u8d1f\u5143\u7d20\u3002\u5f53\u8f93\u5165\u4e3a\u8d1f\u65f6\uff0cReLU\u51fd\u6570\u7684\u5bfc\u6570\u4e3a0\uff0c\u800c\u5f53\u8f93\u5165\u4e3a\u6b63\u65f6\uff0cReLU\u51fd\u6570\u7684\u5bfc\u6570\u4e3a1\u3002\u6ce8\u610f\uff0c\u5f53\u8f93\u5165\u503c\u7cbe\u786e\u7b49\u4e8e0\u65f6\uff0cReLU\u51fd\u6570\u4e0d\u53ef\u5bfc\u3002</p> <p>\u4f7f\u7528ReLU\u7684\u539f\u56e0\u662f\uff0c\u5b83\u6c42\u5bfc\u8868\u73b0\u5f97\u7279\u522b\u597d\uff1a\u8981\u4e48\u8ba9\u53c2\u6570\u6d88\u5931\uff0c\u8981\u4e48\u8ba9\u53c2\u6570\u901a\u8fc7\u3002\u8fd9\u4f7f\u5f97\u4f18\u5316\u8868\u73b0\u5f97\u66f4\u597d\uff0c\u5e76\u4e14ReLU\u51cf\u8f7b\u4e86\u56f0\u6270\u4ee5\u5f80\u795e\u7ecf\u7f51\u7edc\u7684\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u3002\u800c\u8ba1\u7b97\u4f8b\u5982sigmoid\u7684\u5bfc\u6570\u975e\u5e38\u7684\u8d35\uff0c\u56e0\u4e3ae\u4e3a\u5e95\u7684\u6307\u6570\u8fd0\u7b97\u76f8\u5f53\u4e8e\u5927\u91cf\u7684\u4e58\u6cd5\u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u5373\u4f7f\u662fGPU\u6709\u4e13\u95e8\u7684\u5355\u5143\u5904\u7406\u8fd9\u4e2a\uff0c\u4e5f\u662f\u975e\u5e38\u9ebb\u70e6\u7684\u4e00\u4ef6\u4e8b\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%84%9F%E7%9F%A5%E6%9C%BA.html#_4","title":"\u5b9e\u73b0\u591a\u5c42\u611f\u77e5\u673a","text":"<p>\u5982\u679c\u60f3\u8981\u624b\u5199\u591a\u5c42\u611f\u77e5\u673a\uff0c\u90a3\u4e48\u5176\u5b9e\u9700\u8981\u5173\u6ce8\u7684\u6709\u4ee5\u4e0b\uff1a</p> <ol> <li>\u591a\u5c11\u4e2a\u9690\u85cf\u5c42</li> <li>\u6bcf\u5c42\u6709\u591a\u5c11\u4e2a\u795e\u7ecf\u5143\uff1f\u65b9\u4fbf\u7406\u89e3\uff0c\u8fd9\u91cc\u591a\u5c11\u4e2a\u795e\u7ecf\u5143\u5c31\u662f\u5c06\u6570\u636e\u8f6c\u5316\u5230\u51e0\u7ef4</li> <li>\u6839\u636e\u4e0a\u8ff0\u7684\u4fe1\u606f\u8bbe\u7f6ew b\u53c2\u6570\u3002\u6ce8\u610f\u77e9\u9635\u7684\u7ef4\u5ea6</li> </ol> <pre><code>num_inputs, num_outputs, num_hiddens = 784, 10, 256\n\nW1 = nn.Parameter(torch.randn(\n    num_inputs, num_hiddens, requires_grad=True) * 0.01)\nb1 = nn.Parameter(torch.zeros(num_hiddens, requires_grad=True))\nW2 = nn.Parameter(torch.randn(\n    num_hiddens, num_outputs, requires_grad=True) * 0.01)\nb2 = nn.Parameter(torch.zeros(num_outputs, requires_grad=True))\nparams = [W1, b1, W2, b2]\n\ndef relu(X):\n    # torch.zeros_like \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4e0e\u7ed9\u5b9a\u5f20\u91cf\uff08Tensor\uff09\u5f62\u72b6\u76f8\u540c\u4e14\u6240\u6709\u5143\u7d20\u90fd\u4e3a0\u7684\u65b0\u5f20\u91cf\n    a = torch.zeros_like(X)\n    return torch.max(X, a)\n\ndef net(X):\n    X = X.reshape((-1, num_inputs))\n    H = relu(X@W1 + b1)  # \u8fd9\u91cc\u201c@\u201d\u4ee3\u8868\u77e9\u9635\u4e58\u6cd5\n    return (H@W2 + b2)\nloss = nn.CrossEntropyLoss(reduction='none')\nnum_epochs, lr = 10, 0.1\nupdater = torch.optim.SGD(params, lr=lr)\nd2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, updater)\n</code></pre> <p>\u540c\u6837\uff0cpytorch API\u63d0\u4f9b\u4e86\u96c6\u6210\u7684\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u3002\u5176\u4e2d\u6ce8\u610f\u7684\u70b9\u6709\uff1a</p> <ul> <li><code>nn.Flatten()</code> \u662f PyTorch \u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u7528\u4e8e\u5c06\u591a\u7ef4\u5f20\u91cf\u5c55\u5e73\u4e3a\u4e00\u7ef4\u5f20\u91cf\u3002\u4f8b\u5982\u4e00\u4e2a\u5f62\u72b6\u4e3a <code>[32, 1, 5, 5]</code> \u7684\u8f93\u5165\u5f20\u91cf\uff0c\u4f7f\u7528 <code>nn.Flatten()</code> \u540e\uff0c\u8f93\u51fa\u7684\u5f62\u72b6\u5c06\u662f <code>[32, 25]</code></li> <li>\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570 <code>init_weights</code>\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6a21\u5757 <code>m</code> \u4f5c\u4e3a\u53c2\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u4e2d\u7684\u6743\u91cd</li> <li><code>net.apply(init_weights)</code>\u5c06 <code>init_weights</code> \u51fd\u6570\u5e94\u7528\u5230\u6a21\u578b <code>net</code> \u7684\u6bcf\u4e2a\u6a21\u5757\u4e0a\u3002<code>apply</code> \u65b9\u6cd5\u4f1a\u9012\u5f52\u5730\u904d\u5386\u6a21\u578b\u4e2d\u7684\u6240\u6709\u5b50\u6a21\u5757\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u5b50\u6a21\u5757\u8c03\u7528 <code>init_weights</code> \u51fd\u6570\u3002\u8fd9\u6837\uff0c\u6a21\u578b\u4e2d\u6240\u6709\u7684\u7ebf\u6027\u5c42\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u3002</li> <li>\u539f\u5148\u7684params\u53c2\u6570\u5c31\u4f1a\u53d8\u6210\u901a\u8fc7<code>net.parameters()</code>\u83b7\u53d6\uff0c\u4ece\u800c\u653e\u8fdboptimizer\u91cc\u9762</li> </ul> <pre><code>import torch\nfrom torch import nn\n\nnet = nn.Sequential(nn.Flatten(),\n                    nn.Linear(784, 256),\n                    nn.ReLU(),\n                    nn.Linear(256, 10))\n\ndef init_weights(m):\n    if type(m) == nn.Linear:\n        nn.init.normal_(m.weight, std=0.01)\n\nnet.apply(init_weights)\nloss = nn.CrossEntropyLoss(reduction='none')\ntrainer = torch.optim.SGD(net.parameters(), lr=lr)\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%9D%83%E9%87%8D%E8%A1%B0%E9%80%80.html","title":"\u6743\u91cd\u8870\u9000","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%9D%83%E9%87%8D%E8%A1%B0%E9%80%80.html#_2","title":"\u4ec0\u4e48\u662f\u6743\u91cd\u8870\u9000","text":"<p>\u6211\u4eec\u77e5\u9053\u4e86\u8fc7\u62df\u5408\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u73b0\u5728\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u6b63\u5219\u5316\uff08regularization\uff09\u6a21\u578b\u7684\u6280\u672f\u3002\u9650\u5236\u7279\u5f81\u7684\u6570\u91cf\u662f\u7f13\u89e3\u8fc7\u62df\u5408\u7684\u4e00\u79cd\u5e38\u7528\u6280\u672f\uff0c\u5219\u4e00\u70b9\u5728\u76f4\u89c9\u4e0a\u53ef\u4ee5\u8ba4\u540c\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u7684\u7279\u5f81\u90fd\u8fc7\u5ea6\u63d0\u53d6\u4e86\uff0c\u5bfc\u81f4\u51fd\u6570\u7684\u62df\u5408\u90fd\u88ab\u8fd9\u4e9b\u88ab\u8fc7\u5ea6\u63d0\u53d6\u7684\u7279\u5f81\u4e3b\u5bfc\u4e86\u3002\u5982\u4e0b\u9762\u7684\u5c0f\u56fe\uff0c\u7531\u4e8eweight\u77e9\u9635\u8fc7\u5927\uff0c\u5bfc\u81f4\u51fd\u6570\u8fc7\u5ea6\u62df\u5408\uff0c\u90a3\u4e48\u5982\u679c\u8bbe\u60f3\u8ba9\u51fd\u6570\u7684\u53d8\u5316\u8d8b\u4e8e\u4fdd\u5b88\uff0c\u4e5f\u5c31\u662fw\u8303\u6570\u4e0b\u964d\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u80fd\u591f\u7f13\u89e3\u4e0b\u56fe\u7684\u8fc7\u62df\u5408\u73b0\u8c61\u5462\uff1f</p> <p></p> <p>\u4f46\u662f\u4ec5\u4ec5\u901a\u8fc7\u7b80\u5355\u7684\u9650\u5236\u7279\u5f81\u6570\u91cf\u53ef\u80fd\u4ecd\u7136\u4f7f\u6a21\u578b\u5728\u8fc7\u7b80\u5355\u548c\u8fc7\u590d\u6742\u4e2d\u5f98\u5f8a\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u7ec6\u7c92\u5ea6\u7684\u5de5\u5177\u6765\u8c03\u6574\u51fd\u6570\u7684\u590d\u6742\u6027\uff0c\u4f7f\u5176\u8fbe\u5230\u4e00\u4e2a\u5408\u9002\u7684\u5e73\u8861\u4f4d\u7f6e\u3002</p> <p>\u5728\u8bad\u7ec3\u53c2\u6570\u5316\u673a\u5668\u5b66\u4e60\u6a21\u578b\u65f6\uff0c\u6743\u91cd\u8870\u51cf\uff08weight decay\uff09\u662f\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u6b63\u5219\u5316\u7684\u6280\u672f\u4e4b\u4e00\uff0c\u5b83\u901a\u5e38\u4e5f\u88ab\u79f0\u4e3a\\(L_2\\)\u6b63\u5219\u5316\u3002\u8fd9\u9879\u6280\u672f\u901a\u8fc7\u51fd\u6570\u4e0e\u201c\u96f6\u201d\u7684\u8ddd\u79bb\u6765\u8861\u91cf\u51fd\u6570\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5728\u6240\u6709\u51fd\u6570\\(f\\)\u4e2d\uff0c\u51fd\u6570\\(f = 0\\)\uff08\u6240\u6709\u8f93\u5165\u90fd\u5f97\u5230\u503c\\(0\\)\uff09\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u662f\u6700\u7b80\u5355\u7684\u3002\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u7cbe\u786e\u5730\u6d4b\u91cf\u4e00\u4e2a\u51fd\u6570\u548c\u96f6\u4e4b\u95f4\u7684\u8ddd\u79bb\u5462\uff1f\u6ca1\u6709\u4e00\u4e2a\u6b63\u786e\u7684\u7b54\u6848\u3002</p> <p>\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u7ebf\u6027\u51fd\u6570\\(f(\\mathbf{x}) = \\mathbf{w}^\\top \\mathbf{x}\\)\u4e2d\u7684\u6743\u91cd\u5411\u91cf\u7684\u67d0\u4e2a\u8303\u6570\u6765\u5ea6\u91cf\u5176\u590d\u6742\u6027\uff0c\u4f8b\u5982\\(\\| \\mathbf{w} \\|^2\\)\u3002\u8981\u4fdd\u8bc1\u6743\u91cd\u5411\u91cf\u6bd4\u8f83\u5c0f\uff0c\u6700\u5e38\u7528\u65b9\u6cd5\u662f\u5c06\u5176\u8303\u6570\u4f5c\u4e3a\u60e9\u7f5a\u9879\u52a0\u5230\u6700\u5c0f\u5316\u635f\u5931\u7684\u95ee\u9898\u4e2d\u3002\u5c06\u539f\u6765\u7684\u8bad\u7ec3\u76ee\u6807\u6700\u5c0f\u5316\u8bad\u7ec3\u6807\u7b7e\u4e0a\u7684\u9884\u6d4b\u635f\u5931\uff0c\u8c03\u6574\u4e3a\u6700\u5c0f\u5316\u9884\u6d4b\u635f\u5931\u548c\u60e9\u7f5a\u9879\u4e4b\u548c\u3002\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u7684\u6743\u91cd\u5411\u91cf\u589e\u957f\u7684\u592a\u5927\uff0c\u6211\u4eec\u7684\u5b66\u4e60\u7b97\u6cd5\u53ef\u80fd\u4f1a\u66f4\u96c6\u4e2d\u4e8e\u6700\u5c0f\u5316\u6743\u91cd\u8303\u6570\\(\\| \\mathbf{w} \\|^2\\)\u3002</p> <p>\u901a\u8fc7\u9650\u5236\u53c2\u6570\u503c\u7684\u9009\u62e9\u8303\u56f4\u6765\u63a7\u5236\u6a21\u578b\u5bb9\u91cf\uff1a  \u5219\u5bf9\u4e8e\u6bcf\u4e2a\\(\\theta\\)\uff0c\u90fd\u53ef\u4ee5\u627e\u5230\\(\\lambda\\)\u4f7f\u5f97\u4e4b\u524d\u7684\u76ee\u6807\u51fd\u6570\u7b49\u4ef7\u4e8e\u4e0b\u9762\uff1a  \u8fd9\u4e00\u70b9\u53ef\u4ee5\u901a\u8fc7\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u8bc1\u660e\u3002\u8bc1\u660e\u5982\u4e0b\uff1a</p> <p>reference: kimi.moonshot.cn  \u8be5\u8bc1\u660e\u8fc7\u7a0b\u5df2\u88ab\u8bc1\u660e\u6b63\u786e\u65e0\u8bef</p> <p></p> <p></p> <p>\u56de\u5f52\u4e4b\u524d\u7684\u7ebf\u6027\u56de\u5f52\u4f8b\u5b50\u4e2d\uff0c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a  \\(\\mathbf{x}^{(i)}\\)\u662f\u6837\u672c\\(i\\)\u7684\u7279\u5f81\uff0c\\(y^{(i)}\\)\u662f\u6837\u672c\\(i\\)\u7684\u6807\u7b7e\uff0c\\((\\mathbf{w}, b)\\)\u662f\u6743\u91cd\u548c\u504f\u7f6e\u53c2\u6570\u3002\u4e3a\u4e86\u60e9\u7f5a\u6743\u91cd\u5411\u91cf\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u5fc5\u987b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0\\(\\| \\mathbf{w} \\|^2\\)\uff0c\u4f46\u662f\u6a21\u578b\u5e94\u8be5\u5982\u4f55\u5e73\u8861\u8fd9\u4e2a\u65b0\u7684\u989d\u5916\u60e9\u7f5a\u7684\u635f\u5931\uff1f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7\u6b63\u5219\u5316\u5e38\u6570\\(\\lambda\\)\u6765\u63cf\u8ff0\u8fd9\u79cd\u6743\u8861\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u8d1f\u8d85\u53c2\u6570\uff0c\u6211\u4eec\u4f7f\u7528\u9a8c\u8bc1\u6570\u636e\u62df\u5408\uff1a  \u5bf9\u4e8e\\(\\lambda = 0\\)\uff0c\u6211\u4eec\u6062\u590d\u4e86\u539f\u6765\u7684\u635f\u5931\u51fd\u6570\u3002\u5bf9\u4e8e\\(\\lambda &gt; 0\\)\uff0c\u6211\u4eec\u9650\u5236\\(\\| \\mathbf{w} \\|\\)\u7684\u5927\u5c0f\u3002\u8fd9\u91cc\u6211\u4eec\u4ecd\u7136\u9664\u4ee5\\(2\\)\uff1a\u5f53\u6211\u4eec\u53d6\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570\u7684\u5bfc\u6570\u65f6\uff0c\\(2\\)\u548c\\(1/2\\)\u4f1a\u62b5\u6d88\uff0c\u4ee5\u786e\u4fdd\u66f4\u65b0\u8868\u8fbe\u5f0f\u770b\u8d77\u6765\u65e2\u6f02\u4eae\u53c8\u7b80\u5355\u3002</p> <p>\u4e3a\u4ec0\u4e48\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5e73\u65b9\u8303\u6570\u800c\u4e0d\u662f\u6807\u51c6\u8303\u6570\uff08\u5373\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff09\uff1f\u6211\u4eec\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4fbf\u4e8e\u8ba1\u7b97\u3002\u901a\u8fc7\u5e73\u65b9\\(L_2\\)\u8303\u6570\uff0c\u6211\u4eec\u53bb\u6389\u5e73\u65b9\u6839\uff0c\u7559\u4e0b\u6743\u91cd\u5411\u91cf\u6bcf\u4e2a\u5206\u91cf\u7684\u5e73\u65b9\u548c\u3002\u8fd9\u4f7f\u5f97\u60e9\u7f5a\u7684\u5bfc\u6570\u5f88\u5bb9\u6613\u8ba1\u7b97\uff1a\u5bfc\u6570\u7684\u548c\u7b49\u4e8e\u548c\u7684\u5bfc\u6570\u3002</p> <p>\u6b64\u5916\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u9996\u5148\u4f7f\u7528\\(L_2\\)\u8303\u6570\uff0c\u800c\u4e0d\u662f\\(L_1\\)\u8303\u6570\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u9009\u62e9\u5728\u6574\u4e2a\u7edf\u8ba1\u9886\u57df\u4e2d\u90fd\u662f\u6709\u6548\u7684\u548c\u53d7\u6b22\u8fce\u7684\u3002\\(L_2\\)\u6b63\u5219\u5316\u7ebf\u6027\u6a21\u578b\u6784\u6210\u7ecf\u5178\u7684\u5cad\u56de\u5f52\uff08ridge regression\uff09\u7b97\u6cd5\uff0c\\(L_1\\)\u6b63\u5219\u5316\u7ebf\u6027\u56de\u5f52\u662f\u7edf\u8ba1\u5b66\u4e2d\u7c7b\u4f3c\u7684\u57fa\u672c\u6a21\u578b\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a\u5957\u7d22\u56de\u5f52\uff08lasso regression\uff09\u3002\u4f7f\u7528\\(L_2\\)\u8303\u6570\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u5b83\u5bf9\u6743\u91cd\u5411\u91cf\u7684\u5927\u5206\u91cf\u65bd\u52a0\u4e86\u5de8\u5927\u7684\u60e9\u7f5a\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u7684\u5b66\u4e60\u7b97\u6cd5\u504f\u5411\u4e8e\u5728\u5927\u91cf\u7279\u5f81\u4e0a\u5747\u5300\u5206\u5e03\u6743\u91cd\u7684\u6a21\u578b\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u53ef\u80fd\u4f7f\u5b83\u4eec\u5bf9\u5355\u4e2a\u53d8\u91cf\u4e2d\u7684\u89c2\u6d4b\u8bef\u5dee\u66f4\u4e3a\u7a33\u5b9a\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\\(L_1\\)\u60e9\u7f5a\u4f1a\u5bfc\u81f4\u6a21\u578b\u5c06\u6743\u91cd\u96c6\u4e2d\u5728\u4e00\u5c0f\u90e8\u5206\u7279\u5f81\u4e0a\uff0c\u800c\u5c06\u5176\u4ed6\u6743\u91cd\u6e05\u9664\u4e3a\u96f6\u3002\u8fd9\u79f0\u4e3a\u7279\u5f81\u9009\u62e9\uff08feature selection\uff09\uff0c\u8fd9\u53ef\u80fd\u662f\u5176\u4ed6\u573a\u666f\u4e0b\u9700\u8981\u7684\u3002</p> <p>\\(L_2\\)\u6b63\u5219\u5316\u56de\u5f52\u7684\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u66f4\u65b0\u5982\u4e0b\u5f0f\uff1a  \u53ef\u4ee5\u6ce8\u610f\u5230\uff1a\u76f8\u6bd4\u4e0e\u539f\u5148\u7684\u53c2\u6570\u66f4\u65b0\uff0c\u73b0\u5728\u552f\u4e00\u7684\u53d8\u5316\u5c31\u662f\\(\\left(1- \\eta\\lambda \\right) \\(\u4e2d\u7684\\)- \\eta\\lambda\\)\u7cfb\u6570\u3002</p> <p>\u6211\u4eec\u6839\u636e\u4f30\u8ba1\u503c\u4e0e\u89c2\u6d4b\u503c\u4e4b\u95f4\u7684\u5dee\u5f02\u6765\u66f4\u65b0\\(\\mathbf{w}\\)\u3002\u7136\u800c\uff0c\u6211\u4eec\u540c\u65f6\u4e5f\u5728\u8bd5\u56fe\u5c06\\(\\mathbf{w}\\)\u7684\u5927\u5c0f\u7f29\u5c0f\u5230\u96f6\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u65b9\u6cd5\u6709\u65f6\u88ab\u79f0\u4e3a\u6743\u91cd\u8870\u51cf\u3002\u6211\u4eec\u4ec5\u8003\u8651\u60e9\u7f5a\u9879\uff0c\u4f18\u5316\u7b97\u6cd5\u5728\u8bad\u7ec3\u7684\u6bcf\u4e00\u6b65\u8870\u51cf\u6743\u91cd\u3002\u4e0e\u7279\u5f81\u9009\u62e9\u76f8\u6bd4\uff0c\u6743\u91cd\u8870\u51cf\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u8fde\u7eed\u7684\u673a\u5236\u6765\u8c03\u6574\u51fd\u6570\u7684\u590d\u6742\u5ea6\u3002\u8f83\u5c0f\u7684\\(\\lambda\\)\u503c\u5bf9\u5e94\u8f83\u5c11\u7ea6\u675f\u7684\\(\\mathbf{w}\\)\uff0c\u800c\u8f83\u5927\u7684\\(\\lambda\\)\u503c\u5bf9\\(\\mathbf{w}\\)\u7684\u7ea6\u675f\u66f4\u5927\u3002\u662f\u5426\u5bf9\u76f8\u5e94\u7684\u504f\u7f6e\\(b^2\\)\u8fdb\u884c\u60e9\u7f5a\u5728\u4e0d\u540c\u7684\u5b9e\u8df5\u4e2d\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u4e0d\u540c\u5c42\u4e2d\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u901a\u5e38\uff0c\u7f51\u7edc\u8f93\u51fa\u5c42\u7684\u504f\u7f6e\u9879\u4e0d\u4f1a\u88ab\u6b63\u5219\u5316\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%9D%83%E9%87%8D%E8%A1%B0%E9%80%80.html#implementation","title":"Implementation","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%9D%83%E9%87%8D%E8%A1%B0%E9%80%80.html#_3","title":"\u4ece\u96f6\u5f00\u59cb","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u50cf\u4ee5\u524d\u4e00\u6837\u751f\u6210\u4e00\u4e9b\u6570\u636e\uff0c\u751f\u6210\u516c\u5f0f\u5982\u4e0b\uff1a  \u6211\u4eec\u9009\u62e9\u6807\u7b7e\u662f\u5173\u4e8e\u8f93\u5165\u7684\u7ebf\u6027\u51fd\u6570\u3002\u6807\u7b7e\u540c\u65f6\u88ab\u5747\u503c\u4e3a0\uff0c\u6807\u51c6\u5dee\u4e3a0.01\u9ad8\u65af\u566a\u58f0\u7834\u574f\u3002\u4e3a\u4e86\u4f7f\u8fc7\u62df\u5408\u7684\u6548\u679c\u66f4\u52a0\u660e\u663e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u95ee\u9898\u7684\u7ef4\u6570\u589e\u52a0\u5230\\(d = 200\\)\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u53ea\u5305\u542b20\u4e2a\u6837\u672c\u7684\u5c0f\u8bad\u7ec3\u96c6\u3002(\u4e3a\u4e86\u65b9\u4fbf\u8fc7\u62df\u5408\uff0c\u4ece\u800c\u6f14\u793a\u6743\u91cd\u8870\u9000\u7684\u5a01\u529b)</p> <pre><code>n_train, n_test, num_inputs, batch_size = 20, 100, 200, 5\ntrue_w, true_b = torch.ones((num_inputs, 1)) * 0.01, 0.05\ntrain_data = d2l.synthetic_data(true_w, true_b, n_train)\ntrain_iter = d2l.load_array(train_data, batch_size)\ntest_data = d2l.synthetic_data(true_w, true_b, n_test)\ntest_iter = d2l.load_array(test_data, batch_size, is_train=False)\ndef init_params():\n    w = torch.normal(0, 1, size=(num_inputs, 1), requires_grad=True)\n    b = torch.zeros(1, requires_grad=True)\n    return [w, b]\ndef l2_penalty(w):\n    return torch.sum(w.pow(2)) / 2\ndef train(lambd):\n    w, b = init_params()\n    net, loss = lambda X: d2l.linreg(X, w, b), d2l.squared_loss\n    num_epochs, lr = 100, 0.003\n    animator = d2l.Animator(xlabel='epochs', ylabel='loss', yscale='log',\n                            xlim=[5, num_epochs], legend=['train', 'test'])\n    for epoch in range(num_epochs):\n        for X, y in train_iter:\n            # \u589e\u52a0\u4e86L2\u8303\u6570\u60e9\u7f5a\u9879\uff0c\n            # \u5e7f\u64ad\u673a\u5236\u4f7fl2_penalty(w)\u6210\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3abatch_size\u7684\u5411\u91cf\n            l = loss(net(X), y) + lambd * l2_penalty(w)\n            l.sum().backward()\n            d2l.sgd([w, b], lr, batch_size)\n            # \u68af\u5ea6\u6e05\u96f6\u5728d2l.sgd\u51fd\u6570\u91cc\u9762\u6709\n        if (epoch + 1) % 5 == 0:\n            animator.add(epoch + 1, (d2l.evaluate_loss(net, train_iter, loss),\n                                     d2l.evaluate_loss(net, test_iter, loss)))\n    print('w\u7684L2\u8303\u6570\u662f\uff1a', torch.norm(w).item())\ntrain(lambd=0)\ntrain(lambd=3)\n</code></pre> <p>\u8fd9\u91cc\u7b2c\u4e00\u6b21\u5176\u5b9e\u662f\u7981\u7528\u4e86\u6743\u91cd\u8870\u9000\uff0c\u53ef\u4ee5\u53d1\u73b0loss\u5982\u4e0b\u56fe\uff1a\u53ef\u4ee5\u53d1\u73b0\uff0c\u8bad\u7ec3\u7684loss\u5728\u4e0b\u964d\uff0c\u4f46\u662f\u6d4b\u8bd5\u7684loss\u5374\u9ad8\u5c45\u4e0d\u4e0b\uff0c\u8bf4\u660e\u53d1\u751f\u4e86\u4e25\u91cd\u7684\u8fc7\u62df\u5408\u3002</p> <p></p> <p>\u7b2c\u4e8c\u6b21\u7684\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\uff0c\u5c31\u80fd\u76f4\u89c2\u53d1\u73b0\uff0c\u6743\u91cd\u8870\u9000\u5f88\u597d\u7684\u51cf\u5c11\u4e86\u8fc7\u62df\u5408\uff1a</p> <p></p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%9D%83%E9%87%8D%E8%A1%B0%E9%80%80.html#_4","title":"\u7b80\u6d01\u5b9e\u73b0","text":"<p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5728\u5b9e\u4f8b\u5316\u4f18\u5316\u5668\u65f6\u76f4\u63a5\u901a\u8fc7<code>weight_decay</code>\u6307\u5b9aweight decay\u8d85\u53c2\u6570\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPyTorch\u540c\u65f6\u8870\u51cf\u6743\u91cd\u548c\u504f\u79fb\u3002\u8fd9\u91cc\u6211\u4eec\u53ea\u4e3a\u6743\u91cd\u8bbe\u7f6e\u4e86<code>weight_decay</code>\uff0c\u6240\u4ee5\u504f\u7f6e\u53c2\u6570\\(b\\)\u4e0d\u4f1a\u8870\u51cf\u3002</p> <pre><code>def train_concise(wd):\n    net = nn.Sequential(nn.Linear(num_inputs, 1))\n    for param in net.parameters():\n        param.data.normal_()\n    loss = nn.MSELoss(reduction='none')\n    num_epochs, lr = 100, 0.003\n    # \u504f\u7f6e\u53c2\u6570\u6ca1\u6709\u8870\u51cf\n    trainer = torch.optim.SGD([\n        {\"params\":net[0].weight,'weight_decay': wd},\n        {\"params\":net[0].bias}], lr=lr)\n    animator = d2l.Animator(xlabel='epochs', ylabel='loss', yscale='log',\n                            xlim=[5, num_epochs], legend=['train', 'test'])\n    for epoch in range(num_epochs):\n        for X, y in train_iter:\n            trainer.zero_grad()\n            l = loss(net(X), y)\n            l.mean().backward()\n            trainer.step()\n        if (epoch + 1) % 5 == 0:\n            animator.add(epoch + 1,\n                         (d2l.evaluate_loss(net, train_iter, loss),\n                          d2l.evaluate_loss(net, test_iter, loss)))\n    print('w\u7684L2\u8303\u6570\uff1a', net[0].weight.norm().item())\n</code></pre> <p>\u9644\uff1a<code>net[0]</code>\u5c06\u8fd4\u56de<code>nn.Sequential</code>\u5bb9\u5668\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6a21\u5757\uff0c\u5373<code>nn.Linear(num_inputs, 1)</code>\u521b\u5efa\u7684\u7ebf\u6027\u5c42\u3002\u8fd9\u4e2a\u7ebf\u6027\u5c42\u662f\u4e00\u4e2a<code>nn.Module</code>\u5b9e\u4f8b\uff0c\u5b83\u5305\u542b\u4e86\u8be5\u5c42\u7684\u6743\u91cd\u3001\u504f\u7f6e\u4ee5\u53ca\u5176\u5b83\u53ef\u80fd\u7684\u53c2\u6570\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9_%E6%AC%A0%E6%8B%9F%E5%90%88_%E8%BF%87%E6%8B%9F%E5%90%88.html","title":"\u6a21\u578b\u9009\u62e9\u3001\u6b20\u62df\u5408\u548c\u8fc7\u62df\u5408","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9_%E6%AC%A0%E6%8B%9F%E5%90%88_%E8%BF%87%E6%8B%9F%E5%90%88.html#_2","title":"\u6a21\u578b\u9009\u62e9","text":"<p>\u8bad\u7ec3\u8bef\u5dee\uff08training error\uff09\u662f\u6307\uff0c\u6a21\u578b\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\u8ba1\u7b97\u5f97\u5230\u7684\u8bef\u5dee\u3002</p> <p>\u6cdb\u5316\u8bef\u5dee\uff08generalization error\uff09\u662f\u6307\uff0c\u6a21\u578b\u5e94\u7528\u5728\u540c\u6837\u4ece\u539f\u59cb\u6837\u672c\u7684\u5206\u5e03\u4e2d\u62bd\u53d6\u7684\u65e0\u9650\u591a\u6570\u636e\u6837\u672c\u65f6\uff0c\u6a21\u578b\u8bef\u5dee\u7684\u671f\u671b\u3002</p> <p>\u95ee\u9898\u662f\uff0c\u6211\u4eec\u6c38\u8fdc\u4e0d\u80fd\u51c6\u786e\u5730\u8ba1\u7b97\u51fa\u6cdb\u5316\u8bef\u5dee\u3002\u8fd9\u662f\u56e0\u4e3a\u65e0\u9650\u591a\u7684\u6570\u636e\u6837\u672c\u662f\u4e00\u4e2a\u865a\u6784\u7684\u5bf9\u8c61\u3002\u5728\u5b9e\u9645\u4e2d\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u5c06\u6a21\u578b\u5e94\u7528\u4e8e\u4e00\u4e2a\u72ec\u7acb\u7684\u6d4b\u8bd5\u96c6\u6765\u4f30\u8ba1\u6cdb\u5316\u8bef\u5dee\uff0c\u8be5\u6d4b\u8bd5\u96c6\u7531\u968f\u673a\u9009\u53d6\u7684\u3001\u672a\u66fe\u5728\u8bad\u7ec3\u96c6\u4e2d\u51fa\u73b0\u7684\u6570\u636e\u6837\u672c\u6784\u6210\u3002</p> <p>\u4e3a\u4e86\u66f4\u597d\u5730\u8861\u91cf\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u5728\u8bad\u7ec3\u7684\u65f6\u5019\uff0c\u4f1a\u989d\u5916\u8bbe\u7f6e\u4e00\u4e2a\u9a8c\u8bc1\u6570\u636e\u96c6\uff08validation\uff09\uff1a\u8fd9\u662f\u4e00\u4e2a\u7528\u6765\u8bc4\u4f30\u6a21\u578b\u597d\u574f\u7684\u6570\u636e\u96c6\uff0c\u4e0d\u80fd\u8ddf\u8bad\u7ec3\u6570\u636e\u6df7\u5728\u4e00\u8d77\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6d4b\u8bd5\u6570\u636e\u96c6\u662f\u53ea\u7528\u4e00\u6b21\u7684\u6570\u636e\u96c6\u3002\u4e3a\u4ec0\u4e48\u9700\u8981\u9a8c\u8bc1\uff1f \u56e0\u4e3a\u53ea\u6709\u901a\u8fc7\u8bad\u7ec3\u65f6\u5019\u6ca1\u89c1\u8fc7\u7684\u6570\u636e\u7684\u6cdb\u5316\u80fd\u529b\u624d\u80fd\u53cd\u6620\u53c2\u6570\u7684\u597d\u574f\uff01\u4f46\u73b0\u5b9e\u662f\u9a8c\u8bc1\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u4e4b\u95f4\u7684\u8fb9\u754c\u6a21\u7cca\u5f97\u4ee4\u4eba\u62c5\u5fe7\u3002</p> <p>\u5f53\u8bad\u7ec3\u6570\u636e\u7a00\u7f3a\u65f6\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u80fd\u65e0\u6cd5\u63d0\u4f9b\u8db3\u591f\u7684\u6570\u636e\u6765\u6784\u6210\u4e00\u4e2a\u5408\u9002\u7684\u9a8c\u8bc1\u96c6\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u6d41\u884c\u7684\u89e3\u51b3\u65b9\u6848\u662f\u91c7\u7528\\(K\\)\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002\u8fd9\u91cc\uff0c\u539f\u59cb\u8bad\u7ec3\u6570\u636e\u88ab\u5206\u6210\\(K\\)\u4e2a\u4e0d\u91cd\u53e0\u7684\u5b50\u96c6\u3002\u7136\u540e\u6267\u884c\\(K\\)\u6b21\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\uff0c\u6bcf\u6b21\u5728\\(K-1\\)\u4e2a\u5b50\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u5e76\u5728\u5269\u4f59\u7684\u4e00\u4e2a\u5b50\u96c6\uff08\u5728\u8be5\u8f6e\u4e2d\u6ca1\u6709\u7528\u4e8e\u8bad\u7ec3\u7684\u5b50\u96c6\uff09\u4e0a\u8fdb\u884c\u9a8c\u8bc1\u3002\u6700\u540e\uff0c\u901a\u8fc7\u5bf9\\(K\\)\u6b21\u5b9e\u9a8c\u7684\u7ed3\u679c\u53d6\u5e73\u5747\u6765\u4f30\u8ba1\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8bef\u5dee\u3002\u5e38\u7528K = 5 or 10\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9_%E6%AC%A0%E6%8B%9F%E5%90%88_%E8%BF%87%E6%8B%9F%E5%90%88.html#_3","title":"\u8fc7\u62df\u5408\u548c\u6b20\u62df\u5408","text":"<p>\u5f53\u6211\u4eec\u6bd4\u8f83\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8bef\u5dee\u65f6\uff0c\u6211\u4eec\u8981\u6ce8\u610f\u4e24\u79cd\u5e38\u89c1\u7684\u60c5\u51b5\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u8981\u6ce8\u610f\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u8bad\u7ec3\u8bef\u5dee\u548c\u9a8c\u8bc1\u8bef\u5dee\u90fd\u5f88\u4e25\u91cd\uff0c\u4f46\u5b83\u4eec\u4e4b\u95f4\u4ec5\u6709\u4e00\u70b9\u5dee\u8ddd\u3002\u5982\u679c\u6a21\u578b\u4e0d\u80fd\u964d\u4f4e\u8bad\u7ec3\u8bef\u5dee\uff0c\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u6a21\u578b\u8fc7\u4e8e\u7b80\u5355\uff08\u5373\u8868\u8fbe\u80fd\u529b\u4e0d\u8db3\uff09\uff0c\u65e0\u6cd5\u6355\u83b7\u8bd5\u56fe\u5b66\u4e60\u7684\u6a21\u5f0f\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8bef\u5dee\u4e4b\u95f4\u7684\u6cdb\u5316\u8bef\u5dee\u5f88\u5c0f\uff0c\u6211\u4eec\u6709\u7406\u7531\u76f8\u4fe1\u53ef\u4ee5\u7528\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u6a21\u578b\u964d\u4f4e\u8bad\u7ec3\u8bef\u5dee\u3002\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u6b20\u62df\u5408\uff08underfitting\uff09\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u5f53\u6211\u4eec\u7684\u8bad\u7ec3\u8bef\u5dee\u660e\u663e\u4f4e\u4e8e\u9a8c\u8bc1\u8bef\u5dee\u65f6\u8981\u5c0f\u5fc3\uff0c\u8fd9\u8868\u660e\u4e25\u91cd\u7684\u8fc7\u62df\u5408\uff08overfitting\uff09\u3002\u6ce8\u610f\uff0c\u8fc7\u62df\u5408\u5e76\u4e0d\u603b\u662f\u4e00\u4ef6\u574f\u4e8b\u3002\u7279\u522b\u662f\u5728\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u6700\u597d\u7684\u9884\u6d4b\u6a21\u578b\u5728\u8bad\u7ec3\u6570\u636e\u4e0a\u7684\u8868\u73b0\u5f80\u5f80\u6bd4\u5728\u4fdd\u7559\uff08\u9a8c\u8bc1\uff09\u6570\u636e\u4e0a\u597d\u5f97\u591a\u3002\u6700\u7ec8\uff0c\u6211\u4eec\u901a\u5e38\u66f4\u5173\u5fc3\u9a8c\u8bc1\u8bef\u5dee\uff0c\u800c\u4e0d\u662f\u8bad\u7ec3\u8bef\u5dee\u548c\u9a8c\u8bc1\u8bef\u5dee\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002</p> <p>\u662f\u5426\u8fc7\u62df\u5408\u6216\u6b20\u62df\u5408\u53ef\u80fd\u53d6\u51b3\u4e8e\u6a21\u578b\u590d\u6742\u6027\u548c\u53ef\u7528\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u5927\u5c0f\u3002</p> <p>\u5b9a\u4e49\u6a21\u578b\u5bb9\u91cf\u4e3a\uff1a \u62df\u5408\u5404\u79cd\u51fd\u6570\u7684\u80fd\u529b\u3002\u4f4e\u5bb9\u91cf\u7684\u6a21\u578b\u96be\u4ee5\u62df\u5408\u8bad\u7ec3\u6570\u636e\uff0c\u800c\u9ad8\u5bb9\u91cf\u7684\u6a21\u578b\u53ef\u4ee5\u8bb0\u4f4f\u6240\u6709\u7684\u8bad\u7ec3\u6570\u636e\u3002\u76f4\u89c2\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u6a21\u578b\u5bb9\u91cf\u8fc7\u5c0f\uff0c\u90a3\u4e48\u8bad\u7ec3\u8bef\u5dee\u90fd\u5f88\u5927\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u80fd\u529b\u53bb\u62df\u5408\u51fa\u6765\u4e00\u4e2a\u5f88\u597d\u7684\u51fd\u6570\uff1b\u800c\u6a21\u578b\u5bb9\u91cf\u8fc7\u5927\u7684\u8bdd\uff0c\u53cd\u800c\u53ef\u80fd\u4f1a\u8fc7\u5ea6\u6267\u7740\u4e8e\u6240\u6709\u6570\u636e\u90fd\u62df\u5408\u8fdb\u51fd\u6570\uff0c\u4f46\u662f\u5728\u6d4b\u8bd5\u96c6\u4e0a\uff0c\u6cdb\u5316\u8bef\u5dee\u5c31\u4f1a\u5f88\u5927\uff0c\u8fd9\u4e00\u70b9\u76f4\u89c9\u4e0a\u5f88\u8ba4\u540c\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E5%A4%9A%E5%A4%B4%E6%B3%A8%E6%84%8F%E5%8A%9B.html","title":"\u591a\u5934\u6ce8\u610f\u529b","text":"<p>\u5728\u5b9e\u8df5\u4e2d\uff0c\u5f53\u7ed9\u5b9a\u76f8\u540c\u7684\u67e5\u8be2\u3001\u952e\u548c\u503c\u7684\u96c6\u5408\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u53ef\u4ee5\u57fa\u4e8e\u76f8\u540c\u7684\u6ce8\u610f\u529b\u673a\u5236\u5b66\u4e60\u5230\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u7136\u540e\u5c06\u4e0d\u540c\u7684\u884c\u4e3a\u4f5c\u4e3a\u77e5\u8bc6\u7ec4\u5408\u8d77\u6765\uff0c\u6355\u83b7\u5e8f\u5217\u5185\u5404\u79cd\u8303\u56f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff08\u4f8b\u5982\uff0c\u77ed\u8ddd\u79bb\u4f9d\u8d56\u548c\u957f\u8ddd\u79bb\u4f9d\u8d56\u5173\u7cfb\uff09\u3002\u56e0\u6b64\uff0c\u5141\u8bb8\u6ce8\u610f\u529b\u673a\u5236\u7ec4\u5408\u4f7f\u7528\u67e5\u8be2\u3001\u952e\u548c\u503c\u7684\u4e0d\u540c\u5b50\u7a7a\u95f4\u8868\u793a\uff08representation subspaces\uff09\u53ef\u80fd\u662f\u6709\u76ca\u7684\u3002</p> <p>\u4e3a\u6b64\uff0c\u4e0e\u5176\u53ea\u4f7f\u7528\u5355\u72ec\u4e00\u4e2a\u6ce8\u610f\u529b\u6c47\u805a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u72ec\u7acb\u5b66\u4e60\u5f97\u5230\u7684\\(h\\)\u7ec4\u4e0d\u540c\u7684\u7ebf\u6027\u6295\u5f71\uff08linear projections\uff09\u6765\u53d8\u6362\u67e5\u8be2\u3001\u952e\u548c\u503c\u3002\u7136\u540e\uff0c\u8fd9\\(h\\)\u7ec4\u53d8\u6362\u540e\u7684\u67e5\u8be2\u3001\u952e\u548c\u503c\u5c06\u5e76\u884c\u5730\u9001\u5230\u6ce8\u610f\u529b\u6c47\u805a\u4e2d\u3002\u6700\u540e\uff0c\u5c06\u8fd9\\(h\\)\u4e2a\u6ce8\u610f\u529b\u6c47\u805a\u7684\u8f93\u51fa\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u901a\u8fc7\u53e6\u4e00\u4e2a\u53ef\u4ee5\u5b66\u4e60\u7684\u7ebf\u6027\u6295\u5f71\u8fdb\u884c\u53d8\u6362\uff0c\u4ee5\u4ea7\u751f\u6700\u7ec8\u8f93\u51fa\u3002\u8fd9\u79cd\u8bbe\u8ba1\u88ab\u79f0\u4e3a\u591a\u5934\u6ce8\u610f\u529b\uff08multihead attention\uff09\u3002\u5bf9\u4e8e\\(h\\)\u4e2a\u6ce8\u610f\u529b\u6c47\u805a\u8f93\u51fa\uff0c\u6bcf\u4e00\u4e2a\u6ce8\u610f\u529b\u6c47\u805a\u90fd\u88ab\u79f0\u4f5c\u4e00\u4e2a\u5934\uff08head\uff09\u3002</p> <p>\u4e0b\u9762\u7684\u56fe\u5f88\u597d\u7684\u5c55\u793a\u4e86\u591a\u5934\u6ce8\u610f\u529b\uff1a</p> <p></p> <p>\u5728\u5b9e\u73b0\u591a\u5934\u6ce8\u610f\u529b\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u7528\u6570\u5b66\u8bed\u8a00\u5c06\u8fd9\u4e2a\u6a21\u578b\u5f62\u5f0f\u5316\u5730\u63cf\u8ff0\u51fa\u6765\u3002\u7ed9\u5b9a\u67e5\u8be2\\(\\mathbf{q} \\in \\mathbb{R}^{d_q}\\)\u3001\u952e\\(\\mathbf{k} \\in \\mathbb{R}^{d_k}\\)\u548c\u503c\\(\\mathbf{v} \\in \\mathbb{R}^{d_v}\\)\uff0c\u6bcf\u4e2a\u6ce8\u610f\u529b\u5934\\(\\mathbf{h}_i\\)\uff08\\(i = 1, \\ldots, h\\)\uff09\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e3a\uff1a  \u5176\u4e2d\uff0c\u53ef\u5b66\u4e60\u7684\u53c2\u6570\u5305\u62ec\\(\\mathbf W_i^{(q)}\\in\\mathbb R^{p_q\\times d_q}\\)\u3001\\(\\mathbf W_i^{(k)}\\in\\mathbb R^{p_k\\times d_k}\\)\u548c\\(\\mathbf W_i^{(v)}\\in\\mathbb R^{p_v\\times d_v}\\)\uff0c\u4ee5\u53ca\u4ee3\u8868\u6ce8\u610f\u529b\u6c47\u805a\u7684\u51fd\u6570\\(f\\)\u3002\\(f\\)\u53ef\u4ee5\u662f\u52a0\u6027\u6ce8\u610f\u529b\u548c\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u3002\u591a\u5934\u6ce8\u610f\u529b\u7684\u8f93\u51fa\u9700\u8981\u7ecf\u8fc7\u53e6\u4e00\u4e2a\u7ebf\u6027\u8f6c\u6362\uff0c\u5b83\u5bf9\u5e94\u7740\\(h\\)\u4e2a\u5934\u8fde\u7ed3\u540e\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u5176\u53ef\u5b66\u4e60\u53c2\u6570\u662f\\(\\mathbf W_o\\in\\mathbb R^{p_o\\times h p_v}\\)\uff1a  \u57fa\u4e8e\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u6bcf\u4e2a\u5934\u90fd\u53ef\u80fd\u4f1a\u5173\u6ce8\u8f93\u5165\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u53ef\u4ee5\u8868\u793a\u6bd4\u7b80\u5355\u52a0\u6743\u5e73\u5747\u503c\u66f4\u590d\u6742\u7684\u51fd\u6570\u3002</p> <p>\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u901a\u5e38[\u9009\u62e9\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u4f5c\u4e3a\u6bcf\u4e00\u4e2a\u6ce8\u610f\u529b\u5934]\u3002\u4e3a\u4e86\u907f\u514d\u8ba1\u7b97\u4ee3\u4ef7\u548c\u53c2\u6570\u4ee3\u4ef7\u7684\u5927\u5e45\u589e\u957f\uff0c\u6211\u4eec\u8bbe\u5b9a\\(p_q = p_k = p_v = p_o / h\\)\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u5c06\u67e5\u8be2\u3001\u952e\u548c\u503c\u7684\u7ebf\u6027\u53d8\u6362\u7684\u8f93\u51fa\u6570\u91cf\u8bbe\u7f6e\u4e3a\\(p_q h = p_k h = p_v h = p_o\\)\uff0c\u5219\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\\(h\\)\u4e2a\u5934\u3002</p> <pre><code>def transpose_qkv(X, num_heads):\n    \"\"\"\u4e3a\u4e86\u591a\u6ce8\u610f\u529b\u5934\u7684\u5e76\u884c\u8ba1\u7b97\u800c\u53d8\u6362\u5f62\u72b6\"\"\"\n    # \u8f93\u5165X\u7684\u5f62\u72b6:(batch_size\uff0c\u67e5\u8be2\u6216\u8005\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0cnum_hiddens)\n    # \u8f93\u51faX\u7684\u5f62\u72b6:(batch_size\uff0c\u67e5\u8be2\u6216\u8005\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0cnum_heads\uff0c\n    # num_hiddens/num_heads)\n    X = X.reshape(X.shape[0], X.shape[1], num_heads, -1)\n\n    # \u8f93\u51faX\u7684\u5f62\u72b6:(batch_size\uff0cnum_heads\uff0c\u67e5\u8be2\u6216\u8005\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570,\n    # num_hiddens/num_heads)\n    X = X.permute(0, 2, 1, 3)\n\n    # \u6700\u7ec8\u8f93\u51fa\u7684\u5f62\u72b6:(batch_size*num_heads,\u67e5\u8be2\u6216\u8005\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570,\n    # num_hiddens/num_heads)\n    return X.reshape(-1, X.shape[2], X.shape[3])\n\ndef transpose_output(X, num_heads):\n    \"\"\"\u9006\u8f6ctranspose_qkv\u51fd\u6570\u7684\u64cd\u4f5c\"\"\"\n    X = X.reshape(-1, num_heads, X.shape[1], X.shape[2])\n    X = X.permute(0, 2, 1, 3)\n    return X.reshape(X.shape[0], X.shape[1], -1)\n\nclass MultiHeadAttention(nn.Module):\n    \"\"\"\u591a\u5934\u6ce8\u610f\u529b\"\"\"\n    def __init__(self, key_size, query_size, value_size, num_hiddens,\n                 num_heads, dropout, bias=False, **kwargs):\n        super(MultiHeadAttention, self).__init__(**kwargs)\n        self.num_heads = num_heads\n        self.attention = d2l.DotProductAttention(dropout)\n        self.W_q = nn.Linear(query_size, num_hiddens, bias=bias)\n        self.W_k = nn.Linear(key_size, num_hiddens, bias=bias)\n        self.W_v = nn.Linear(value_size, num_hiddens, bias=bias)\n        self.W_o = nn.Linear(num_hiddens, num_hiddens, bias=bias)\n\n    def forward(self, queries, keys, values, valid_lens):\n        # queries\uff0ckeys\uff0cvalues\u7684\u5f62\u72b6:\n        # (batch_size\uff0c\u67e5\u8be2\u6216\u8005\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0cnum_hiddens)\n        # valid_lens\u3000\u7684\u5f62\u72b6:\n        # (batch_size\uff0c)\u6216(batch_size\uff0c\u67e5\u8be2\u7684\u4e2a\u6570)\n        # \u7ecf\u8fc7\u53d8\u6362\u540e\uff0c\u8f93\u51fa\u7684queries\uff0ckeys\uff0cvalues\u3000\u7684\u5f62\u72b6:\n        # (batch_size*num_heads\uff0c\u67e5\u8be2\u6216\u8005\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0c\n        # num_hiddens/num_heads)\n        queries = transpose_qkv(self.W_q(queries), self.num_heads)\n        keys = transpose_qkv(self.W_k(keys), self.num_heads)\n        values = transpose_qkv(self.W_v(values), self.num_heads)\n\n        if valid_lens is not None:\n            # \u5728\u8f740\uff0c\u5c06\u7b2c\u4e00\u9879\uff08\u6807\u91cf\u6216\u8005\u77e2\u91cf\uff09\u590d\u5236num_heads\u6b21\uff0c\n            # \u7136\u540e\u5982\u6b64\u590d\u5236\u7b2c\u4e8c\u9879\uff0c\u7136\u540e\u8bf8\u5982\u6b64\u7c7b\u3002\n            valid_lens = torch.repeat_interleave(\n                valid_lens, repeats=self.num_heads, dim=0)\n\n        # output\u7684\u5f62\u72b6:(batch_size*num_heads\uff0c\u67e5\u8be2\u7684\u4e2a\u6570\uff0c\n        # num_hiddens/num_heads)\n        output = self.attention(queries, keys, values, valid_lens)\n\n        # output_concat\u7684\u5f62\u72b6:(batch_size\uff0c\u67e5\u8be2\u7684\u4e2a\u6570\uff0cnum_hiddens)\n        output_concat = transpose_output(output, self.num_heads)\n        return self.W_o(output_concat)\n</code></pre> <p>\u591a\u5934\u6ce8\u610f\u529b\uff08Multi-Head Attention\uff09\u662fTransformer\u6a21\u578b\u4e2d\u7684\u5173\u952e\u673a\u5236\u4e4b\u4e00\uff0c\u7531Vaswani\u7b49\u4eba\u57282017\u5e74\u63d0\u51fa\u3002\u5176\u4e3b\u8981\u4f5c\u7528\u662f\u901a\u8fc7\u591a\u4e2a\u6ce8\u610f\u529b\u5934\u7684\u5e76\u884c\u8ba1\u7b97\u6765\u589e\u5f3a\u6a21\u578b\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u4f7f\u6a21\u578b\u80fd\u591f\u66f4\u7075\u6d3b\u5730\u6355\u83b7\u5e8f\u5217\u4e2d\u4e0d\u540c\u4f4d\u7f6e\u7684\u591a\u79cd\u5173\u7cfb\u548c\u7279\u5f81\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u591a\u5934\u6ce8\u610f\u529b\u7684\u4f5c\u7528\u5982\u4e0b\uff1a</p> <ol> <li>\u6355\u83b7\u4e0d\u540c\u7684\u7279\u5f81\u8868\u793a\uff1a\u5728\u591a\u5934\u6ce8\u610f\u529b\u4e2d\uff0c\u6bcf\u4e2a\u6ce8\u610f\u529b\u5934\u4f1a\u6709\u4e00\u7ec4\u72ec\u7acb\u7684\u6743\u91cd\uff0c\u56e0\u6b64\u5b83\u4eec\u4f1a\u5728\u4e0d\u540c\u7684\u5b50\u7a7a\u95f4\u4e2d\u8ba1\u7b97\u6ce8\u610f\u529b\u3002\u8fd9\u6837\uff0c\u6bcf\u4e2a\u5934\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4e0d\u540c\u7684\u6a21\u5f0f\u548c\u7279\u5f81\uff0c\u6bd4\u5982\u53e5\u5b50\u4e2d\u7684\u957f\u8ddd\u79bb\u4f9d\u8d56\u3001\u77ed\u8ddd\u79bb\u4f9d\u8d56\u3001\u4e0d\u540c\u7684\u8bcd\u4e49\u5173\u7cfb\u7b49\uff0c\u5e2e\u52a9\u6a21\u578b\u66f4\u5168\u9762\u5730\u7406\u89e3\u8f93\u5165\u5e8f\u5217\u7684\u590d\u6742\u7ed3\u6784\u3002</li> <li>\u589e\u5f3a\u6ce8\u610f\u529b\u673a\u5236\u7684\u8868\u8fbe\u80fd\u529b\uff1a\u5355\u5934\u6ce8\u610f\u529b\u867d\u7136\u4e5f\u80fd\u6355\u83b7\u8f93\u5165\u5e8f\u5217\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u5176\u5173\u6ce8\u8303\u56f4\u6709\u9650\uff0c\u96be\u4ee5\u6355\u6349\u5230\u591a\u79cd\u7c7b\u578b\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u591a\u5934\u6ce8\u610f\u529b\u901a\u8fc7\u591a\u4e2a\u72ec\u7acb\u7684\u6ce8\u610f\u529b\u8ba1\u7b97\uff0c\u53ef\u4ee5\u66f4\u7075\u6d3b\u5730\u8868\u793a\u4e0d\u540c\u7684\u5173\u7cfb\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u578b\u7684\u8868\u8fbe\u80fd\u529b\u548c\u6cdb\u5316\u6027\u80fd\u3002</li> <li>\u7a33\u5b9a\u68af\u5ea6\u4e0e\u907f\u514d\u8fc7\u62df\u5408\uff1a\u901a\u8fc7\u591a\u4e2a\u6ce8\u610f\u529b\u5934\u7684\u5e76\u884c\u8ba1\u7b97\uff0c\u6bcf\u4e2a\u5934\u53ea\u9700\u5173\u6ce8\u5b50\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\u4fe1\u606f\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u8fc7\u5ea6\u4f9d\u8d56\u67d0\u4e00\u4e2a\u5934\u7684\u98ce\u9669\u3002\u8fd9\u79cd\u7ed3\u6784\u4e0d\u4ec5\u6709\u52a9\u4e8e\u907f\u514d\u6a21\u578b\u9677\u5165\u5c40\u90e8\u6700\u4f18\uff0c\u8fd8\u80fd\u4f7f\u5f97\u53cd\u5411\u4f20\u64ad\u4e2d\u7684\u68af\u5ea6\u66f4\u52a0\u7a33\u5b9a\uff0c\u63d0\u9ad8\u8bad\u7ec3\u6548\u679c\u3002</li> <li>\u5904\u7406\u4e0d\u540c\u7684\u53e5\u6cd5\u548c\u8bed\u4e49\u4fe1\u606f\uff1a\u81ea\u7136\u8bed\u8a00\u4e2d\u7684\u4fe1\u606f\u5177\u6709\u4e30\u5bcc\u7684\u591a\u5c42\u6b21\u7ed3\u6784\uff0c\u53ef\u80fd\u5305\u62ec\u8bcd\u6cd5\u3001\u53e5\u6cd5\u3001\u8bed\u4e49\u7b49\u4e0d\u540c\u5c42\u6b21\u7684\u5173\u7cfb\u3002\u591a\u5934\u6ce8\u610f\u529b\u4f7f\u6a21\u578b\u80fd\u591f\u5728\u4e0d\u540c\u7684\u5934\u4e2d\u5206\u79bb\u5e76\u5904\u7406\u8fd9\u4e9b\u5c42\u6b21\u7684\u4fe1\u606f\uff0c\u6709\u5229\u4e8e\u6355\u83b7\u590d\u6742\u7684\u4e0a\u4e0b\u6587\u4f9d\u8d56\uff0c\u4ece\u800c\u63d0\u5347\u5bf9\u6587\u672c\u542b\u4e49\u7684\u7406\u89e3\u3002</li> <li>\u9002\u5e94\u4e0d\u540c\u7684\u67e5\u8be2-\u952e\u503c\u5173\u7cfb\uff1a\u591a\u5934\u6ce8\u610f\u529b\u4f7f\u5f97\u6a21\u578b\u5728\u4e0d\u540c\u7684\u5934\u4e0a\u53ef\u4ee5\u5206\u522b\u5bf9\u4e0d\u540c\u7684\u67e5\u8be2\u3001\u952e\u548c\u503c\u8fdb\u884c\u4e0d\u540c\u7684\u7ebf\u6027\u53d8\u6362\uff0c\u8fd9\u610f\u5473\u7740\u5728\u6bcf\u4e2a\u5934\u4e2d\uff0c\u6ce8\u610f\u529b\u673a\u5236\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u805a\u7126\u4e8e\u8f93\u5165\u5e8f\u5217\u7684\u4e0d\u540c\u65b9\u9762\u3002\u8fd9\u6837\uff0c\u5728\u6bcf\u4e2a\u6ce8\u610f\u529b\u5934\u4e2d\uff0c\u6a21\u578b\u53ef\u4ee5\u5b66\u4e60\u5230\u4e0d\u540c\u7684\u6ce8\u610f\u529b\u6743\u91cd\u5206\u5e03\uff0c\u6355\u6349\u4e0d\u540c\u7684\u6a21\u5f0f\u548c\u4fe1\u606f\u3002</li> </ol>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B.html","title":"\u6ce8\u610f\u529b","text":"<p>\u4ece\u5fc3\u7406\u5b66\u4e0a\u6765\u8bb2\uff0c\u52a8\u7269\u9700\u8981\u5728\u590d\u6742\u73af\u5883\u4e0b\u6709\u6548\u5173\u6ce8\u503c\u5f97\u6ce8\u610f\u7684\u70b9\u3002\u5fc3\u7406\u5b66\u6846\u67b6\u4e2d\u63d0\u5230\uff1a\u4eba\u7c7b\u6839\u636e\u7ebf\u7d22\u548c\u4e0d\u968f\u610f\u7ebf\u7d22\u9009\u62e9\u6ce8\u610f\u70b9\u3002\u5377\u79ef\u3001\u5168\u8fde\u63a5\u3001\u6c60\u5316\u5c42\u5176\u5b9e\u90fd\u53ea\u8003\u8651\u4e86\u4e0d\u968f\u610f\u7ebf\u7d22\uff0c\u4f8b\u5982\u6c60\u5316\u5c42max pooling\uff0c\u6211\u53ea\u9009\u62e9\u51fa\u6700\u5927\u7684signal\uff0c\u4f46\u662f\u5176\u5b9e\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u6837\u505a\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u3002</p> <p>\u4f46\u662f\u6ce8\u610f\u529b\u673a\u5236\u5219\u663e\u793a\u7684\u8003\u8651\u968f\u610f\u7ebf\u7d22\u3002\u968f\u610f\u7ebf\u7d22\u88ab\u79f0\u4e3a\u67e5\u8be2query\uff0c\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u662f\u4e00\u4e2a\u503cvalue\u548c\u4e0d\u968f\u610f\u7ebf\u7d22key\u7684\u5bf9\u3002\u901a\u8fc7\u6ce8\u610f\u529b\u6c60\u5316\u5c42\u6765\u6709\u504f\u5411\u6027\u9009\u62e9\u67d0\u4e9b\u8f93\u5165\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B.html#_2","title":"\u6ce8\u610f\u529b\u63d0\u793a","text":"<p>\u6ce8\u610f\u529b\u662f\u7a00\u7f3a\u7684\uff0c\u800c\u73af\u5883\u4e2d\u7684\u5e72\u6270\u6ce8\u610f\u529b\u7684\u4fe1\u606f\u5374\u5e76\u4e0d\u5c11\u3002\u6bd4\u5982\u4eba\u7c7b\u7684\u89c6\u89c9\u795e\u7ecf\u7cfb\u7edf\u5927\u7ea6\u6bcf\u79d2\u6536\u5230\\(10^8\\)\u4f4d\u7684\u4fe1\u606f\uff0c\u8fd9\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u5927\u8111\u80fd\u591f\u5b8c\u5168\u5904\u7406\u7684\u6c34\u5e73\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4eba\u7c7b\u7684\u7956\u5148\u5df2\u7ecf\u4ece\u7ecf\u9a8c\uff08\u4e5f\u79f0\u4e3a\u6570\u636e\uff09\u4e2d\u8ba4\u8bc6\u5230\u201c\u5e76\u975e\u611f\u5b98\u7684\u6240\u6709\u8f93\u5165\u90fd\u662f\u4e00\u6837\u7684\u201d\u3002</p> <p>\u6ce8\u610f\u529b\u662f\u5982\u4f55\u5e94\u7528\u4e8e\u89c6\u89c9\u4e16\u754c\u4e2d\u7684\u5462\uff1f\u8fd9\u8981\u4ece\u5f53\u4eca\u5341\u5206\u666e\u53ca\u7684\u53cc\u7ec4\u4ef6\uff08two-component\uff09\u7684\u6846\u67b6\u5f00\u59cb\u8bb2\u8d77\uff1a\u8fd9\u4e2a\u6846\u67b6\u7684\u51fa\u73b0\u53ef\u4ee5\u8ffd\u6eaf\u523019\u4e16\u7eaa90\u5e74\u4ee3\u7684\u5a01\u5ec9\u00b7\u8a79\u59c6\u65af\uff0c\u4ed6\u88ab\u8ba4\u4e3a\u662f\u201c\u7f8e\u56fd\u5fc3\u7406\u5b66\u4e4b\u7236\u201d \u5728\u8fd9\u4e2a\u6846\u67b6\u4e2d\uff0c\u53d7\u8bd5\u8005\u57fa\u4e8e\u975e\u81ea\u4e3b\u6027\u63d0\u793a\u548c\u81ea\u4e3b\u6027\u63d0\u793a\u6709\u9009\u62e9\u5730\u5f15\u5bfc\u6ce8\u610f\u529b\u7684\u7126\u70b9\u3002</p> <p>\u975e\u81ea\u4e3b\u6027\u63d0\u793a\u662f\u57fa\u4e8e\u73af\u5883\u4e2d\u7269\u4f53\u7684\u7a81\u51fa\u6027\u548c\u6613\u89c1\u6027\u3002</p> <p>\u60f3\u8c61\u4e00\u4e0b\uff0c\u5047\u5982\u9762\u524d\u6709\u4e94\u4e2a\u7269\u54c1\uff1a\u4e00\u4efd\u62a5\u7eb8\u3001\u4e00\u7bc7\u7814\u7a76\u8bba\u6587\u3001\u4e00\u676f\u5496\u5561\u3001\u4e00\u672c\u7b14\u8bb0\u672c\u548c\u4e00\u672c\u4e66\u3002\u6240\u6709\u7eb8\u5236\u54c1\u90fd\u662f\u9ed1\u767d\u5370\u5237\u7684\uff0c\u4f46\u5496\u5561\u676f\u662f\u7ea2\u8272\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e2a\u5496\u5561\u676f\u5728\u8fd9\u79cd\u89c6\u89c9\u73af\u5883\u4e2d\u662f\u7a81\u51fa\u548c\u663e\u773c\u7684\uff0c\u4e0d\u7531\u81ea\u4e3b\u5730\u5f15\u8d77\u4eba\u4eec\u7684\u6ce8\u610f\u3002\u6240\u4ee5\u6211\u4eec\u4f1a\u628a\u89c6\u529b\u6700\u654f\u9510\u7684\u5730\u65b9\u653e\u5230\u5496\u5561\u4e0a\uff0c\u8fd9\u5c31\u662f\u56e0\u4e3a\u7531\u4e8e\u7a81\u51fa\u6027\u7684\u975e\u81ea\u4e3b\u6027\u63d0\u793a\uff08\u7ea2\u676f\u5b50\uff09\uff0c\u6240\u4ee5\u6ce8\u610f\u529b\u4e0d\u81ea\u4e3b\u5730\u6307\u5411\u4e86\u5496\u5561\u676f\u3002</p> <p>\u559d\u5496\u5561\u540e\uff0c\u4f1a\u53d8\u5f97\u5174\u594b\u5e76\u60f3\u8bfb\u4e66\uff0c\u6240\u4ee5\u8f6c\u8fc7\u5934\uff0c\u91cd\u65b0\u805a\u7126\u773c\u775b\uff0c\u7136\u540e\u770b\u770b\u4e66\uff0c\u7531\u4e8e\u7a81\u51fa\u6027\u5bfc\u81f4\u7684\u9009\u62e9\u4e0d\u540c\uff0c\u6b64\u65f6\u9009\u62e9\u4e66\u662f\u53d7\u5230\u4e86\u8ba4\u77e5\u548c\u610f\u8bc6\u7684\u63a7\u5236\uff0c\u56e0\u6b64\u6ce8\u610f\u529b\u5728\u57fa\u4e8e\u81ea\u4e3b\u6027\u63d0\u793a\u53bb\u8f85\u52a9\u9009\u62e9\u65f6\u5c06\u66f4\u4e3a\u8c28\u614e\u3002\u53d7\u8bd5\u8005\u7684\u4e3b\u89c2\u610f\u613f\u63a8\u52a8\uff0c\u9009\u62e9\u7684\u529b\u91cf\u4e5f\u5c31\u66f4\u5f3a\u5927\u3002</p> <p>\u81ea\u4e3b\u6027\u7684\u4e0e\u975e\u81ea\u4e3b\u6027\u7684\u6ce8\u610f\u529b\u63d0\u793a\u89e3\u91ca\u4e86\u4eba\u7c7b\u7684\u6ce8\u610f\u529b\u7684\u65b9\u5f0f\uff0c\u4e0b\u9762\u6765\u770b\u770b\u5982\u4f55\u901a\u8fc7\u8fd9\u4e24\u79cd\u6ce8\u610f\u529b\u63d0\u793a\uff0c\u7528\u795e\u7ecf\u7f51\u7edc\u6765\u8bbe\u8ba1\u6ce8\u610f\u529b\u673a\u5236\u7684\u6846\u67b6\u3002</p> <p>\u9996\u5148\uff0c\u8003\u8651\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u72b6\u51b5\uff0c\u5373\u53ea\u4f7f\u7528\u975e\u81ea\u4e3b\u6027\u63d0\u793a\u3002\u8981\u60f3\u5c06\u9009\u62e9\u504f\u5411\u4e8e\u611f\u5b98\u8f93\u5165\uff0c\u5219\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528\u53c2\u6570\u5316\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u751a\u81f3\u662f\u975e\u53c2\u6570\u5316\u7684\u6700\u5927\u6c47\u805a\u5c42\u6216\u5e73\u5747\u6c47\u805a\u5c42\u3002\u56e0\u6b64\uff0c\u201c\u662f\u5426\u5305\u542b\u81ea\u4e3b\u6027\u63d0\u793a\u201d\u5c06\u6ce8\u610f\u529b\u673a\u5236\u4e0e\u5168\u8fde\u63a5\u5c42\u6216\u6c47\u805a\u5c42\u533a\u522b\u5f00\u6765\u3002\u5728\u6ce8\u610f\u529b\u673a\u5236\u7684\u80cc\u666f\u4e0b\uff0c\u81ea\u4e3b\u6027\u63d0\u793a\u88ab\u79f0\u4e3a\u67e5\u8be2\uff08query\uff09\u3002\u7ed9\u5b9a\u4efb\u4f55\u67e5\u8be2\uff0c\u6ce8\u610f\u529b\u673a\u5236\u901a\u8fc7\u6ce8\u610f\u529b\u6c47\u805a\uff08attention pooling\uff09\u5c06\u9009\u62e9\u5f15\u5bfc\u81f3\u611f\u5b98\u8f93\u5165\uff08sensory inputs\uff0c\u4f8b\u5982\u4e2d\u95f4\u7279\u5f81\u8868\u793a\uff09\u3002\u5728\u6ce8\u610f\u529b\u673a\u5236\u4e2d\uff0c\u8fd9\u4e9b\u611f\u5b98\u8f93\u5165\u88ab\u79f0\u4e3a\u503c\uff08value\uff09\u3002\u66f4\u901a\u4fd7\u7684\u89e3\u91ca\uff0c\u6bcf\u4e2a\u503c\u90fd\u4e0e\u4e00\u4e2a\u952e\uff08key\uff09\u914d\u5bf9\uff0c\u8fd9\u53ef\u4ee5\u60f3\u8c61\u4e3a\u611f\u5b98\u8f93\u5165\u7684\u975e\u81ea\u4e3b\u63d0\u793a\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u8ba1\u6ce8\u610f\u529b\u6c47\u805a\u7684\u65b9\u5f0f\uff0c\u4fbf\u4e8e\u7ed9\u5b9a\u7684\u67e5\u8be2\uff08\u81ea\u4e3b\u6027\u63d0\u793a\uff09\u4e0e\u952e\uff08\u975e\u81ea\u4e3b\u6027\u63d0\u793a\uff09\u8fdb\u884c\u5339\u914d\uff0c\u8fd9\u5c06\u5f15\u5bfc\u5f97\u51fa\u6700\u5339\u914d\u7684\u503c\uff08\u611f\u5b98\u8f93\u5165\uff09\u3002</p> <p></p> <p>\u4e0b\u9762\u7684\u4f8b\u5b50Reference\uff1aChatGPT</p> <p>\u5047\u8bbe\u6211\u4eec\u8d70\u8fdb\u4e00\u5bb6\u5927\u578b\u56fe\u4e66\u9986\uff0c\u60f3\u8981\u627e\u5230\u5173\u4e8e\u201c\u673a\u5668\u5b66\u4e60\u201d\u7684\u4e66\u7c4d\u3002\u56fe\u4e66\u9986\u4e2d\u6709\u5f88\u591a\u4e66\u67b6\uff08\u8f93\u5165\u6570\u636e\u5e8f\u5217\uff09\uff0c\u6bcf\u672c\u4e66\uff08\u6570\u636e\u70b9\uff09\u90fd\u6709\u76f8\u5173\u7684\u6807\u7b7e\u63cf\u8ff0\uff0c\u5982\u4e66\u540d\u3001\u4f5c\u8005\u3001\u4e3b\u9898\u7b49\u3002\u56fe\u4e66\u9986\u7684\u7ba1\u7406\u5458\u4f1a\u5e2e\u6211\u4eec\u627e\u4e66\uff0c\u6211\u4eec\u7ed9\u7ba1\u7406\u5458\u4e00\u4e2a\u201c\u5173\u952e\u8bcd\u201d\u2014\u2014\u201c\u673a\u5668\u5b66\u4e60\u201d\u4f5c\u4e3a\u67e5\u8be2\uff0c\u5e0c\u671b\u627e\u5230\u4e0e\u6b64\u4e3b\u9898\u76f8\u5173\u7684\u4e66\u7c4d\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56fe\u4e66\u9986\u5c31\u662f\u6211\u4eec\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u7ba1\u7406\u5458\u662f\u6ce8\u610f\u529b\u673a\u5236\uff0c\u201c\u673a\u5668\u5b66\u4e60\u201d\u662f\u67e5\u8be2 (Query)\u3002\u5728\u8fd9\u4e2a\u573a\u666f\u4e0b\uff1a</p> <ol> <li>\u67e5\u8be2 (Query) \u662f\u6211\u4eec\u60f3\u627e\u7684\u4e3b\u9898\u201c\u673a\u5668\u5b66\u4e60\u201d\uff0c\u5b83\u4ee3\u8868\u4e86\u6211\u4eec\u5bf9\u7279\u5b9a\u4fe1\u606f\u7684\u9700\u6c42\u3002</li> <li>\u952e (Key) \u662f\u6bcf\u672c\u4e66\u7684\u201c\u4e3b\u9898\u6807\u7b7e\u201d\uff08\u4f8b\u5982\uff0c\u201c\u6570\u636e\u79d1\u5b66\u201d\u3001\u201c\u6df1\u5ea6\u5b66\u4e60\u201d\u3001\u201c\u673a\u5668\u5b66\u4e60\u201d\u3001\u201c\u7269\u8054\u7f51\u201d\u7b49\uff09\uff0c\u63cf\u8ff0\u4e86\u6bcf\u672c\u4e66\u7684\u5185\u5bb9\u4e3b\u9898\u3002</li> <li>\u503c (Value) \u662f\u6bcf\u672c\u4e66\u7684\u201c\u5185\u5bb9\u201d\uff0c\u5373\u4e66\u7684\u5b9e\u9645\u4fe1\u606f\uff08\u4f8b\u5982\u4e66\u4e2d\u7684\u77e5\u8bc6\u548c\u6587\u5b57\u5185\u5bb9\uff09\u3002</li> <li>\u952e\u503c\u5bf9\u662f\u6bcf\u672c\u4e66\u7684\u201c\u4e3b\u9898\u6807\u7b7e\u201d\uff08\u952e\uff09\u548c\u201c\u5185\u5bb9\u201d\uff08\u503c\uff09\u7ec4\u6210\u7684\u4e00\u5bf9\uff0c\u8868\u793a\u4e00\u672c\u4e66\u7684\u4e3b\u9898\u4e0e\u5b83\u7684\u5b9e\u9645\u5185\u5bb9\u4e4b\u95f4\u7684\u5173\u8054\u3002</li> </ol> <p>\u4f8b\u5b50\u4e2d\u7684\u6ce8\u610f\u529b\u673a\u5236</p> <p>\u7ba1\u7406\u5458\u4f1a\u6839\u636e\u6211\u4eec\u7684\u67e5\u8be2\u201c\u673a\u5668\u5b66\u4e60\u201d\uff0c\u626b\u63cf\u56fe\u4e66\u9986\u91cc\u6bcf\u672c\u4e66\u7684\u201c\u4e3b\u9898\u6807\u7b7e\u201d\uff08\u952e\uff09\u6765\u5bfb\u627e\u4e0e\u67e5\u8be2\u6700\u76f8\u5173\u7684\u4e66\u7c4d\u3002\u5177\u4f53\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u67e5\u8be2\u548c\u952e\u7684\u76f8\u4f3c\u5ea6\u5339\u914d\uff1a\u7ba1\u7406\u5458\u4f1a\u628a\u201c\u673a\u5668\u5b66\u4e60\u201d\u8fd9\u4e2a\u67e5\u8be2\u548c\u6bcf\u672c\u4e66\u7684\u4e3b\u9898\u6807\u7b7e\uff08\u952e\uff09\u9010\u4e00\u5bf9\u6bd4\uff0c\u76f8\u4f3c\u5ea6\u8d8a\u9ad8\uff08\u6bd4\u5982\u5305\u542b\u201c\u673a\u5668\u5b66\u4e60\u201d\u8fd9\u4e2a\u8bcd\u6216\u76f8\u5173\u8bcd\u6c47\u7684\u6807\u7b7e\uff09\uff0c\u8bf4\u660e\u8fd9\u672c\u4e66\u7684\u4e3b\u9898\u548c\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u8d8a\u5339\u914d\u3002</li> <li>\u9009\u62e9\u76f8\u5173\u7684\u503c\uff1a\u7ba1\u7406\u5458\u901a\u8fc7\u8fd9\u4e9b\u76f8\u4f3c\u5ea6\u5339\u914d\uff0c\u627e\u5230\u90a3\u4e9b\u4e3b\u9898\u6807\u7b7e\u4e0e\u201c\u673a\u5668\u5b66\u4e60\u201d\u6700\u63a5\u8fd1\u7684\u4e66\uff0c\u7136\u540e\u53d6\u51fa\u8fd9\u4e9b\u4e66\u7684\u5185\u5bb9\uff08\u503c\uff09\uff0c\u5c06\u5b83\u4eec\u63d0\u4f9b\u7ed9\u6211\u4eec\u3002</li> <li>\u52a0\u6743\u6c42\u548c\uff1a\u5982\u679c\u7ba1\u7406\u5458\u53d1\u73b0\u6709\u591a\u672c\u4e66\u7684\u4e3b\u9898\u6807\u7b7e\u548c\u201c\u673a\u5668\u5b66\u4e60\u201d\u9ad8\u5ea6\u76f8\u5173\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6743\u8861\u8fd9\u4e9b\u4e66\u7684\u91cd\u8981\u6027\uff0c\u7ed3\u5408\u591a\u4e2a\u503c\u4e2d\u7684\u5185\u5bb9\uff0c\u5e2e\u52a9\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u66f4\u5168\u9762\u7684\u77e5\u8bc6\u96c6\u5408\u3002</li> </ol> <p>\u4e4b\u540e\u4e3a\u4e86\u53ef\u89c6\u5316\u6ce8\u610f\u529b\u6743\u91cd\uff0c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u5e2e\u52a9\u53ef\u89c6\u5316\u6743\u91cd\u5206\u914d\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>def show_heatmaps(matrices, xlabel, ylabel, titles=None, figsize=(2.5, 2.5),\n                  cmap='Reds'):\n    \"\"\"\u663e\u793a\u77e9\u9635\u70ed\u56fe\"\"\"\n    d2l.use_svg_display()\n    num_rows, num_cols = matrices.shape[0], matrices.shape[1]\n    fig, axes = d2l.plt.subplots(num_rows, num_cols, figsize=figsize,\n                                 sharex=True, sharey=True, squeeze=False)\n    for i, (row_axes, row_matrices) in enumerate(zip(axes, matrices)):\n        for j, (ax, matrix) in enumerate(zip(row_axes, row_matrices)):\n            pcm = ax.imshow(matrix.detach().numpy(), cmap=cmap)\n            if i == num_rows - 1:\n                ax.set_xlabel(xlabel)\n            if j == 0:\n                ax.set_ylabel(ylabel)\n            if titles:\n                ax.set_title(titles[j])\n    fig.colorbar(pcm, ax=axes, shrink=0.6)\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B.html#nadaraya-warson","title":"Nadaraya-Warson\u6838\u56de\u5f52","text":"<p>\u7ed9\u5b9a\u7684\u6210\u5bf9\u7684\u201c\u8f93\u5165\uff0d\u8f93\u51fa\u201d\u6570\u636e\u96c6\\(\\{(x_1, y_1), \\ldots, (x_n, y_n)\\}\\)\uff0c\u5982\u4f55\u5b66\u4e60\\(f\\)\u6765\u9884\u6d4b\u4efb\u610f\u65b0\u8f93\u5165\\(x\\)\u7684\u8f93\u51fa\\(\\hat{y} = f(x)\\)\uff1f\u6839\u636e\u4e0b\u9762\u7684\u975e\u7ebf\u6027\u51fd\u6570\u751f\u6210\u4e00\u4e2a\u4eba\u5de5\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u52a0\u5165\u7684\u566a\u58f0\u9879\u4e3a\\(\\epsilon\\)\uff1a  \u5176\u4e2d\\(\\epsilon\\)\u670d\u4ece\u5747\u503c\u4e3a\\(0\\)\u548c\u6807\u51c6\u5dee\u4e3a\\(0.5\\)\u7684\u6b63\u6001\u5206\u5e03\u3002\u5728\u8fd9\u91cc\u751f\u6210\u4e86\\(50\\)\u4e2a\u8bad\u7ec3\u6837\u672c\u548c\\(50\\)\u4e2a\u6d4b\u8bd5\u6837\u672c\u3002</p> <p>Nadaraya\u548cWatson\u63d0\u51fa\u4e86\u597d\u7684\u60f3\u6cd5\uff1a\u6839\u636e\u8f93\u5165\u7684\u4f4d\u7f6e\u5bf9\\(y_i\\)\u8fdb\u884c\u52a0\u6743  \u5176\u4e2d\\(K\\)\u662f\u6838\uff08kernel\uff09\uff0c\u662f\u53ef\u4ee5\u81ea\u4e3b\u5b9a\u4e49\u7684\uff0c\u53ef\u4ee5\u662fx\u503c\u5dee\u503c\u7684L1\u8303\u6570\uff0c\u4e5f\u53ef\u4ee5\u662fL2\u8303\u6570\u3002\u90a3\u4e48\u53d7\u6b64\u542f\u53d1\uff0c\u5176\u5b9e\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u66f4\u4e3a\u901a\u7528\u7684\u6ce8\u610f\u529b\u6c47\u805a\u516c\u5f0f\uff1a  \u5176\u4e2d\\(x\\)\u662f\u67e5\u8be2\uff0c\\((x_i, y_i)\\)\u662f\u952e\u503c\u5bf9\u3002\u6ce8\u610f\u529b\u6c47\u805a\u662f\\(y_i\\)\u200b\u7684\u52a0\u6743\u5e73\u5747\uff0c\u5c06\u67e5\u8be2\\(x\\)\u548c\u952e\\(x_i\\)\u4e4b\u95f4\u7684\u5173\u7cfb\u5efa\u6a21\u4e3a\u6ce8\u610f\u529b\u6743\u91cd\uff08attention weight\uff09\\(\\alpha(x, x_i)\\)\u3002\u8fd9\u4e2a\u6743\u91cd\u5c06\u88ab\u5206\u914d\u7ed9\u6bcf\u4e00\u4e2a\u5bf9\u5e94\u503c\\(y_i\\)\u3002\u5bf9\u4e8e\u4efb\u4f55\u67e5\u8be2\uff0c\u6a21\u578b\u5728\u6240\u6709\u952e\u503c\u5bf9\u6ce8\u610f\u529b\u6743\u91cd\u90fd\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6982\u7387\u5206\u5e03\uff1a\u5b83\u4eec\u662f\u975e\u8d1f\u7684\uff0c\u5e76\u4e14\u603b\u548c\u4e3a1\u3002</p> <p>\u4e0b\u9762\u8003\u8651\u4e00\u4e2a\u9ad8\u65af\u6838\uff08Gaussian kernel\uff09\uff0c\u5176\u5b9a\u4e49\u4e3a\uff1a  \u4ee3\u5165\u53ef\u5f97\u5230\uff1a  \u5982\u679c\u4e00\u4e2a\u952e\\(x_i\\)\u8d8a\u662f\u63a5\u8fd1\u7ed9\u5b9a\u7684\u67e5\u8be2\\(x\\)\uff0c\u90a3\u4e48\u5206\u914d\u7ed9\u8fd9\u4e2a\u952e\u5bf9\u5e94\u503c\\(y_i\\)\u7684\u6ce8\u610f\u529b\u6743\u91cd\u5c31\u4f1a\u8d8a\u5927\uff0c\u4e5f\u5c31\u201c\u83b7\u5f97\u4e86\u66f4\u591a\u7684\u6ce8\u610f\u529b\u201d\u3002\u8fd9\u5c31\u597d\u50cf\u662f\uff1a\u6bcf\u4e00\u672c\u4e66\u90fd\u6709\u6807\u7b7e\uff0c\u5373\u4e3akey\uff0c\u7136\u540e\u8f93\u5165\u4e00\u4e2aquery\uff0c\u8fd9\u4e2aquery\u548cKey\u8d8a\u63a5\u8fd1\uff0c\u6bd4\u5982\u8bf4\uff0c\u201c\u673a\u5668\u5b66\u4e60\u201d\u6807\u7b7e\u548c\u6211\u4eec\u60f3\u8981\u5bfb\u627e\u7684\u201c\u673a\u5668\u5b66\u4e60\u5f15\u8bba\u201d\u76f8\u5173\u4e66\u7c4d\u6807\u7b7e\u8d8a\u63a5\u8fd1\uff0c\u8fd9\u672c\u4e66\u5c31\u66f4\u5e94\u8be5\u53d7\u5230\u6211\u7684\u6ce8\u610f\uff0c\u5b83\u7684\u503c\uff0c\u5373\u673a\u5668\u5b66\u4e60\u4e66\u4e2d\u7684\u5185\u5bb9\uff0c\u5c31\u662f\u6211\u60f3\u8981\u7684\u3002</p> <p>\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e2d\uff0c\u5982\u679cquery\u548ckey\u8d8a\u63a5\u8fd1\uff0c\u6ce8\u610f\u529b\u6743\u91cd\u8d8a\u9ad8\u3002</p> <p>\u867d\u7136\u4e0a\u8ff0\u7684\u6a21\u578b\u5f88\u4e0d\u9519\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u662f\u4e00\u4e2a\u975e\u53c2\u6570\u7684\u6a21\u578b\uff1a\u56e0\u4e3a\u6ca1\u6709\u4ec0\u4e48\u53c2\u6570\u9700\u8981\u5b66\u4e60\u7684\uff0c\u7ed9\u5b9a\u4e86\u6570\u636e\u96c6\uff0c\u90a3\u4e48f(x)\u5c31\u4f1a\u968f\u4e4b\u786e\u5b9a\u3002\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u52a0\u4e0a\u53c2\u6570\u90e8\u5206\uff1a  \u63a5\u4e0b\u6765\u4e0a\u4ee3\u7801\uff1a</p> <p>\u9996\u5148\u662f\u6838\u56de\u5f52class\u7684\u5b9a\u4e49\uff1aclass\u4e2d\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u5f62\u72b6\u4e3a<code>(1,)</code> \u7684\u6743\u91cd\u53c2\u6570\u77e9\u9635\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u4e00\u4e2a\u5143\u7d20\u7684\u5f20\u91cf\u3002\u5728forward\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8f93\u5165\u503c\u3001\u952e\u3001\u548c\u67e5\u8be2\uff0c\u7136\u540e\u6839\u636e\u6838\u56de\u5f52\u516c\u5f0f\u7ed9\u51faquery\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u591a\u5c11\uff0c\u8fd9\u6837\u624d\u80fd\u5f62\u6210loss\uff0c\u4ece\u800c\u66f4\u65b0w\u3002</p> <p>\u5176\u4e2d.repeat_interleave(repeats\uff0cdim=None)\u662f\u5bf9\u6307\u5b9a\u7684tensor\u6cbf\u7740\u7279\u5b9a\u7ef4\u5ea6\u91cd\u590d\u5f20\u91cf\u5143\u7d20\u7684\u51fd\u6570\u3002</p> <pre><code>class NWKernelRegression(nn.Module):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.w = nn.Parameter(torch.rand((1,), requires_grad=True))\n\n    def forward(self, queries, keys, values):\n        # queries\u548cattention_weights\u7684\u5f62\u72b6\u4e3a(\u67e5\u8be2\u4e2a\u6570\uff0c\u201c\u952e\uff0d\u503c\u201d\u5bf9\u4e2a\u6570)\n        queries = queries.repeat_interleave(keys.shape[1]).reshape((-1, keys.shape[1]))\n        self.attention_weights = nn.functional.softmax(\n            -((queries - keys) * self.w)**2 / 2, dim=1)\n        # values\u7684\u5f62\u72b6\u4e3a(\u67e5\u8be2\u4e2a\u6570\uff0c\u201c\u952e\uff0d\u503c\u201d\u5bf9\u4e2a\u6570)\n        return torch.bmm(self.attention_weights.unsqueeze(1),\n                         values.unsqueeze(-1)).reshape(-1)\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u53d8\u6362\u4e3a\u952e\u548c\u503c\u7528\u4e8e\u8bad\u7ec3\u6ce8\u610f\u529b\u6a21\u578b\u3002\u5728\u5e26\u53c2\u6570\u7684\u6ce8\u610f\u529b\u6c47\u805a\u6a21\u578b\u4e2d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8bad\u7ec3\u6837\u672c\u7684\u8f93\u5165\u90fd\u4f1a\u548c\u9664\u81ea\u5df1\u4ee5\u5916\u7684\u6240\u6709\u8bad\u7ec3\u6837\u672c\u7684\u201c\u952e\uff0d\u503c\u201d\u5bf9\u8fdb\u884c\u8ba1\u7b97\uff0c\u4ece\u800c\u5f97\u5230\u5176\u5bf9\u5e94\u7684\u9884\u6d4b\u8f93\u51fa\u3002</p> <pre><code># X_tile\u7684\u5f62\u72b6:(n_train\uff0cn_train)\uff0c\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u7740\u76f8\u540c\u7684\u8bad\u7ec3\u8f93\u5165\nX_tile = x_train.repeat((n_train, 1))\n# Y_tile\u7684\u5f62\u72b6:(n_train\uff0cn_train)\uff0c\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u7740\u76f8\u540c\u7684\u8bad\u7ec3\u8f93\u51fa\nY_tile = y_train.repeat((n_train, 1))\n# keys\u7684\u5f62\u72b6:('n_train'\uff0c'n_train'-1)\nkeys = X_tile[(1 - torch.eye(n_train)).type(torch.bool)].reshape((n_train, -1))\n# values\u7684\u5f62\u72b6:('n_train'\uff0c'n_train'-1)\nvalues = Y_tile[(1 - torch.eye(n_train)).type(torch.bool)].reshape((n_train, -1))\n</code></pre> <p>\u8bad\u7ec3\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u5e73\u65b9\u635f\u5931\u51fd\u6570\u548c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff1a</p> <pre><code>net = NWKernelRegression()\nloss = nn.MSELoss(reduction='none')\ntrainer = torch.optim.SGD(net.parameters(), lr=0.5)\n# trainer\u5c06\u4f1a\u63a5\u7ba1net\u4e2d\u7684self.w\u6743\u91cd\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u662fnn.Parameter\nanimator = d2l.Animator(xlabel='epoch', ylabel='loss', xlim=[1, 5])\n\nfor epoch in range(5):\n    trainer.zero_grad()\n    l = loss(net(x_train, keys, values), y_train)\n    # \u8fd9\u91cc\u5f97\u5230\u7684\u662f('n_train',1)\u5f62\u72b6\u7684\u5f20\u91cf\uff0c\u8bb0\u5f55\u4e86\u4e00\u4e2aloss\uff0c\u6b64\u5904\u6c42\u548c\u518d\u53cd\u5411\u4f20\u64ad\uff0c \u56e0\u4e3a\u8981\u6c42loss\u662f\u5f20\u91cf\u6807\u91cf\n    l.sum().backward()\n    trainer.step()\n    print(f'epoch {epoch + 1}, loss {float(l.sum()):.6f}')\n    animator.add(epoch + 1, float(l.sum()))\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B.html#_3","title":"\u6ce8\u610f\u529b\u8bc4\u5206\u51fd\u6570","text":"<p>\u5728nadaraya-watson\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u9ad8\u65af\u6838\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u90a3\u4e48\u8fd9\u4e2a\u9ad8\u65af\u6838\u6307\u6570\u90e8\u5206\u5176\u5b9e\u53ef\u4ee5\u89c6\u4e3a\u6ce8\u610f\u529b\u8bc4\u5206\u51fd\u6570\uff0c\u7b80\u79f0\u8bc4\u5206\u51fd\u6570\u3002\u5728\u6ce8\u610f\u529b\u673a\u5236\u4e2d\uff0c\u8bc4\u5206\u51fd\u6570\u7684\u4f5c\u7528\u662f\u901a\u8fc7\u6bd4\u8f83\u67e5\u8be2\u548c\u952e\u7684\u76f8\u4f3c\u6027\u6765\u786e\u5b9a\u6bcf\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u5728\u7ed3\u679c\u4e2d\u7684\u91cd\u8981\u6027\u6216\u6743\u91cd\u3002\u8fd9\u4e2a\u8bc4\u5206\u5e2e\u52a9\u6a21\u578b\u5728\u591a\u6761\u8f93\u5165\u4fe1\u606f\u4e2d\uff0c\u9009\u62e9\u6027\u5730\u805a\u7126\u4e8e\u4e0e\u5f53\u524d\u67e5\u8be2\u6700\u76f8\u5173\u7684\u4fe1\u606f\u3002\u8bc4\u5206\u51fd\u6570\u548c\u952e\u4e0e\u67e5\u8be2\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u8bc4\u5206\u51fd\u6570\u53ef\u4ee5\u5bf9\u952e\u4e0e\u67e5\u8be2\u7684\u5339\u914d\u7a0b\u5ea6\u6253\u5206\uff0c\u7136\u540e\u540e\u7eed\u518d\u5bf9\u6240\u6709\u7684\u6253\u5206\u8fdb\u884csoftmax\uff0c\u4ece\u800c\u4f7f\u5f97\u6253\u5206\u5206\u5e03\u53d8\u6210\u6982\u7387\u5206\u5e03\uff0c\u6982\u7387\u8d8a\u9ad8\uff0c\u8bf4\u660e\u5339\u914d\u7a0b\u5ea6\u8d8a\u9ad8\uff0c\u8bf4\u660e\u8fd9\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u5e94\u8be5\u5360\u66f4\u9ad8\u7684\u6bd4\u91cd\u3002</p> <p>\u7528\u6570\u5b66\u8bed\u8a00\u63cf\u8ff0\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u67e5\u8be2\\(\\mathbf{q} \\in \\mathbb{R}^q\\)\u548c\\(m\\)\u4e2a\u201c\u952e\uff0d\u503c\u201d\u5bf9\\((\\mathbf{k}_1, \\mathbf{v}_1), \\ldots, (\\mathbf{k}_m, \\mathbf{v}_m)\\)\uff0c\u5176\u4e2d\\(\\mathbf{k}_i \\in \\mathbb{R}^k\\)\uff0c\\(\\mathbf{v}_i \\in \\mathbb{R}^v\\)\u3002\u6ce8\u610f\u529b\u6c47\u805a\u51fd\u6570\\(f\\)\u5c31\u88ab\u8868\u793a\u6210\u503c\u7684\u52a0\u6743\u548c\uff1a  \u5176\u4e2d\u67e5\u8be2\\(\\mathbf{q}\\)\u548c\u952e\\(\\mathbf{k}_i\\)\u7684\u6ce8\u610f\u529b\u6743\u91cd\uff08\u6807\u91cf\uff09\u662f\u901a\u8fc7\u6ce8\u610f\u529b\u8bc4\u5206\u51fd\u6570\\(a\\)\u5c06\u4e24\u4e2a\u5411\u91cf\u6620\u5c04\u6210\u6807\u91cf\uff0c\u518d\u7ecf\u8fc7softmax\u8fd0\u7b97\u5f97\u5230\u7684\uff1a  </p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B.html#softmax","title":"\u63a9\u853dsoftmax","text":"<p>\u6709\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u4e00\u4e9b\u6570\u636e\u80fd\u591f\u88ab\u7eb3\u5165\u6ce8\u610f\u529b\u7684\u8303\u56f4\u4e4b\u4e2d\u3002\u56e0\u6b64\uff0c\u5b9e\u9645\u4e2d\u53ef\u4ee5\u8fdb\u884c\u63a9\u853dsoftmax\u64cd\u4f5c\uff0c\u5373\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u5e8f\u5217\u957f\u5ea6\uff0c\u4ee5\u65b9\u4fbf\u8ba1\u7b97softmax\u7684\u65f6\u5019\u6ee4\u6389\u8d85\u51fa\u8303\u56f4\u7684\u4f4d\u7f6e\u3002\u5982\u4e0b\u5217\u4ee3\u7801\u6240\u793a\uff1a</p> <pre><code>def masked_softmax(X, valid_lens):\n    \"\"\"\u901a\u8fc7\u5728\u6700\u540e\u4e00\u4e2a\u8f74\u4e0a\u63a9\u853d\u5143\u7d20\u6765\u6267\u884csoftmax\u64cd\u4f5c\"\"\"\n    # X:3D\u5f20\u91cf\uff0cvalid_lens:1D\u62162D\u5f20\u91cf\n    if valid_lens is None:\n        return nn.functional.softmax(X, dim=-1)\n    else:\n        shape = X.shape\n        if valid_lens.dim() == 1:\n            valid_lens = torch.repeat_interleave(valid_lens, shape[1])\n        else:\n            valid_lens = valid_lens.reshape(-1)\n        # \u6700\u540e\u4e00\u8f74\u4e0a\u88ab\u63a9\u853d\u7684\u5143\u7d20\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u8d1f\u503c\u66ff\u6362\uff0c\u4ece\u800c\u5176softmax\u8f93\u51fa\u4e3a0\n        X = d2l.sequence_mask(X.reshape(-1, shape[-1]), valid_lens,\n                              value=-1e6)\n        return nn.functional.softmax(X.reshape(shape), dim=-1)\nmasked_softmax(torch.rand(2, 2, 4), torch.tensor([2, 3]))\n'''\ntensor([[[0.4807, 0.5193, 0.0000, 0.0000],\n         [0.4595, 0.5405, 0.0000, 0.0000]],\n\n        [[0.4470, 0.2805, 0.2725, 0.0000],\n         [0.3001, 0.4655, 0.2344, 0.0000]]])\n'''\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B.html#_4","title":"\u52a0\u6027\u6ce8\u610f\u529b","text":"<p>\u6709\u7684\u65f6\u5019\uff0c\u952e\u548c\u67e5\u8be2\u7684\u7ef4\u5ea6\u5e76\u4e0d\u76f8\u540c\uff0c\u4f46\u662f\u6211\u4eec\u4f9d\u7136\u60f3\u8981\u627e\u5230\u5f88\u597d\u7684\u8861\u91cf\u952e\u548c\u67e5\u8be2\u76f8\u4f3c\u7a0b\u5ea6\u7684\u8bc4\u5206\u51fd\u6570\u3002\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u52a0\u6027\u6ce8\u610f\u529b\u4f5c\u4e3a\u8bc4\u5206\u51fd\u6570\uff1a  \u5176\u4e2d\u53ef\u5b66\u4e60\u7684\u53c2\u6570\u662f\\(\\mathbf W_q\\in\\mathbb R^{h\\times q}\\)\u3001\\(\\mathbf W_k\\in\\mathbb R^{h\\times k}\\)\u548c\\(\\mathbf w_v\\in\\mathbb R^{h}\\)\u3002\u5c06\u67e5\u8be2\u548c\u952e\u8fde\u7ed3\u8d77\u6765\u540e\u8f93\u5165\u5230\u4e00\u4e2a\u591a\u5c42\u611f\u77e5\u673a\uff08MLP\uff09\u4e2d\uff0c\u611f\u77e5\u673a\u5305\u542b\u4e00\u4e2a\u9690\u85cf\u5c42\uff0c\u5176\u9690\u85cf\u5355\u5143\u6570\u662f\u4e00\u4e2a\u8d85\u53c2\u6570\\(h\\)\u3002\u901a\u8fc7\u4f7f\u7528\\(\\tanh\\)\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff0c\u5e76\u4e14\u7981\u7528\u504f\u7f6e\u9879\u3002</p> <pre><code>#@save\nclass AdditiveAttention(nn.Module):\n    \"\"\"\u52a0\u6027\u6ce8\u610f\u529b\"\"\"\n    def __init__(self, key_size, query_size, num_hiddens, dropout, **kwargs):\n        super(AdditiveAttention, self).__init__(**kwargs)\n        self.W_k = nn.Linear(key_size, num_hiddens, bias=False)\n        self.W_q = nn.Linear(query_size, num_hiddens, bias=False)\n        self.w_v = nn.Linear(num_hiddens, 1, bias=False)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, queries, keys, values, valid_lens):\n        queries, keys = self.W_q(queries), self.W_k(keys)\n        # \u5728\u7ef4\u5ea6\u6269\u5c55\u540e\uff0c\n        # queries\u7684\u5f62\u72b6\uff1a(batch_size\uff0c\u67e5\u8be2\u7684\u4e2a\u6570\uff0c1\uff0cnum_hidden)\n        # key\u7684\u5f62\u72b6\uff1a(batch_size\uff0c1\uff0c\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0cnum_hiddens)\n        # \u4f7f\u7528\u5e7f\u64ad\u65b9\u5f0f\u8fdb\u884c\u6c42\u548c\n        features = queries.unsqueeze(2) + keys.unsqueeze(1)\n        features = torch.tanh(features)\n        # self.w_v\u4ec5\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u56e0\u6b64\u4ece\u5f62\u72b6\u4e2d\u79fb\u9664\u6700\u540e\u90a3\u4e2a\u7ef4\u5ea6\u3002\n        # scores\u7684\u5f62\u72b6\uff1a(batch_size\uff0c\u67e5\u8be2\u7684\u4e2a\u6570\uff0c\u201c\u952e-\u503c\u201d\u5bf9\u7684\u4e2a\u6570)\n        scores = self.w_v(features).squeeze(-1)\n        self.attention_weights = masked_softmax(scores, valid_lens)\n        # values\u7684\u5f62\u72b6\uff1a(batch_size\uff0c\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0c\u503c\u7684\u7ef4\u5ea6)\n        return torch.bmm(self.dropout(self.attention_weights), values)\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E6%B3%A8%E6%84%8F%E5%8A%9B.html#_5","title":"\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b","text":"<p>\u4f7f\u7528\u70b9\u79ef\u53ef\u4ee5\u5f97\u5230\u8ba1\u7b97\u6548\u7387\u66f4\u9ad8\u7684\u8bc4\u5206\u51fd\u6570\uff0c\u4f46\u662f\u70b9\u79ef\u64cd\u4f5c\u8981\u6c42\u67e5\u8be2\u548c\u952e\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\\(d\\)\u3002</p> <p>\u5047\u8bbe\u67e5\u8be2\u548c\u952e\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u72ec\u7acb\u7684\u968f\u673a\u53d8\u91cf\uff0c\u5e76\u4e14\u90fd\u6ee1\u8db3\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee\uff0c\u90a3\u4e48\u4e24\u4e2a\u5411\u91cf\u7684\u70b9\u79ef\u7684\u5747\u503c\u4e3a\\(0\\)\uff0c\u65b9\u5dee\u4e3a\\(d\\)\u3002\u4e3a\u786e\u4fdd\u65e0\u8bba\u5411\u91cf\u957f\u5ea6\u5982\u4f55\uff0c\u70b9\u79ef\u7684\u65b9\u5dee\u5728\u4e0d\u8003\u8651\u5411\u91cf\u957f\u5ea6\u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u662f\\(1\\)\uff0c\u6211\u4eec\u518d\u5c06\u70b9\u79ef\u9664\u4ee5\\(\\sqrt{d}\\)\uff0c\u5219\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\uff08scaled dot-product attention\uff09\u8bc4\u5206\u51fd\u6570\u4e3a\uff1a  \u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4ece\u5c0f\u6279\u91cf\u7684\u89d2\u5ea6\u6765\u8003\u8651\u63d0\u9ad8\u6548\u7387\uff0c\u4f8b\u5982\u57fa\u4e8e\\(n\\)\u4e2a\u67e5\u8be2\u548c\\(m\\)\u4e2a\u952e\uff0d\u503c\u5bf9\u8ba1\u7b97\u6ce8\u610f\u529b\uff0c\u5176\u4e2d\u67e5\u8be2\u548c\u952e\u7684\u957f\u5ea6\u4e3a\\(d\\)\uff0c\u503c\u7684\u957f\u5ea6\u4e3a\\(v\\)\u3002\u67e5\u8be2\\(\\mathbf Q\\in\\mathbb R^{n\\times d}\\)\u3001\u952e\\(\\mathbf K\\in\\mathbb R^{m\\times d}\\)\u548c\u503c\\(\\mathbf V\\in\\mathbb R^{m\\times v}\\)\u7684\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u662f\uff1a  \u4e0b\u9762\u7684\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u7684\u5b9e\u73b0\u4f7f\u7528\u4e86\u6682\u9000\u6cd5\u8fdb\u884c\u6a21\u578b\u6b63\u5219\u5316\u3002</p> <pre><code>class DotProductAttention(nn.Module):\n    \"\"\"\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\"\"\"\n    def __init__(self, dropout, **kwargs):\n        super(DotProductAttention, self).__init__(**kwargs)\n        self.dropout = nn.Dropout(dropout)\n    # queries\u7684\u5f62\u72b6\uff1a(batch_size\uff0c\u67e5\u8be2\u7684\u4e2a\u6570\uff0cd)\n    # keys\u7684\u5f62\u72b6\uff1a(batch_size\uff0c\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0cd)\n    # values\u7684\u5f62\u72b6\uff1a(batch_size\uff0c\u201c\u952e\uff0d\u503c\u201d\u5bf9\u7684\u4e2a\u6570\uff0c\u503c\u7684\u7ef4\u5ea6)\n    # valid_lens\u7684\u5f62\u72b6:(batch_size\uff0c)\u6216\u8005(batch_size\uff0c\u67e5\u8be2\u7684\u4e2a\u6570)\n    def forward(self, queries, keys, values, valid_lens=None):\n        d = queries.shape[-1]\n        # \u8bbe\u7f6etranspose_b=True\u4e3a\u4e86\u4ea4\u6362keys\u7684\u6700\u540e\u4e24\u4e2a\u7ef4\u5ea6\n        scores = torch.bmm(queries, keys.transpose(1,2)) / math.sqrt(d)\n        self.attention_weights = masked_softmax(scores, valid_lens)\n        return torch.bmm(self.dropout(self.attention_weights), values)\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E4%B8%8E%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81.html","title":"\u81ea\u6ce8\u610f\u529b\u548c\u4f4d\u7f6e\u7f16\u7801","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E4%B8%8E%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81.html#_2","title":"\u81ea\u6ce8\u610f\u529b","text":"<p>\u5982\u679c\u8bf4\u540c\u4e00\u7ec4\u8bcd\u5143\u540c\u65f6\u5145\u5f53\u4e86\u67e5\u8be2\u3001\u952e\u548c\u503c\uff0c\u90a3\u4e48\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u5bf9\u8bcd\u5143\u8fdb\u884c\u7f16\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u67e5\u8be2\u90fd\u4f1a\u5173\u6ce8\u6240\u6709\u7684\u952e\u503c\u5bf9\u5e76\u751f\u6210\u4e00\u4e2a\u6ce8\u610f\u529b\u8f93\u51fa\u3002\u7531\u4e8e\u67e5\u8be2\u3001\u952e\u548c\u503c\u90fd\u6765\u81ea\u540c\u4e00\u7ec4\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a\u81ea\u6ce8\u610f\u529b\u3002\u63a5\u4e0b\u6765\u5177\u4f53\u5b9a\u4e49\u81ea\u6ce8\u610f\u529b\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bcd\u5143\u7ec4\u6210\u7684\u8f93\u5165\u5e8f\u5217\\(\\mathbf{x}_1, \\ldots, \\mathbf{x}_n\\)\uff0c\u5176\u4e2d\u4efb\u610f\\(\\mathbf{x}_i \\in \\mathbb{R}^d\\)\uff08\\(1 \\leq i \\leq n\\)\uff09\u3002\u8be5\u5e8f\u5217\u7684\u81ea\u6ce8\u610f\u529b\u8f93\u51fa\u4e3a\u4e00\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u5e8f\u5217\\(\\mathbf{y}_1, \\ldots, \\mathbf{y}_n\\)\uff0c\u5176\u4e2d\uff1a  \u4ece\u4e0a\u9762\u7684\u5f0f\u5b50\u5c31\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u5f53\\(X_i\\)\u4f5c\u4e3a\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5728\u8f93\u51fa\u503c\u7684\u65f6\u5019\uff0c\u4f1a\u5173\u6ce8\u8fd9\u4e2a\u67e5\u8be2\\(X_i\\)\u548c\u5176\u4ed6\u6240\u6709\u952e\\(X_j\\)\u7684\u5173\u7cfb\uff0c\u4ece\u800c\u51b3\u5b9a\u8fd9\u4e2a\u8f93\u51fa\u503c\u6536\u5230\u5176\u4ed6\u503c\\(X_j\\)\u7684\u5f71\u54cd\u6743\u91cd\u3002\u53ef\u4ee5\u9884\u6599\u5230\u7684\u662f\uff0c\u8f93\u5165\u8bcd\u5143\u5e8f\u5217\u548c\u8f93\u51fa\u5e8f\u5217\u7684length\u5e94\u8be5\u90fd\u662f\u4e00\u6837\u7684\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E4%B8%8E%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81.html#cnnrnn","title":"CNN\uff0cRNN\uff0c\u81ea\u6ce8\u610f\u529b\u6bd4\u8f83","text":"<p>\u63a5\u4e0b\u6765\u6bd4\u8f83\u4e0b\u9762\u51e0\u4e2a\u67b6\u6784\uff0c\u76ee\u6807\u90fd\u662f\u5c06\u7531\\(n\\)\u4e2a\u8bcd\u5143\u7ec4\u6210\u7684\u5e8f\u5217\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u8f93\u5165\u8bcd\u5143\u6216\u8f93\u51fa\u8bcd\u5143\u90fd\u7531\\(d\\)\u7ef4\u5411\u91cf\u8868\u793a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c06\u6bd4\u8f83\u7684\u662f\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u3001\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u548c\u81ea\u6ce8\u610f\u529b\u8fd9\u51e0\u4e2a\u67b6\u6784\u7684\u8ba1\u7b97\u590d\u6742\u6027\u3001\u987a\u5e8f\u64cd\u4f5c\u548c\u6700\u5927\u8def\u5f84\u957f\u5ea6\u3002\u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u64cd\u4f5c\u4f1a\u59a8\u788d\u5e76\u884c\u8ba1\u7b97\uff0c\u800c\u4efb\u610f\u7684\u5e8f\u5217\u4f4d\u7f6e\u7ec4\u5408\u4e4b\u95f4\u7684\u8def\u5f84\u8d8a\u77ed\uff0c\u5219\u80fd\u66f4\u8f7b\u677e\u5730\u5b66\u4e60\u5e8f\u5217\u4e2d\u7684\u8fdc\u8ddd\u79bb\u4f9d\u8d56\u5173\u7cfb\uff1a</p> <p></p> <p>:label:\u8003\u8651\u4e00\u4e2a\u5377\u79ef\u6838\u5927\u5c0f\u4e3a\\(k\\)\u7684\u5377\u79ef\u5c42\u3002\u5728\u540e\u9762\u7684\u7ae0\u8282\u5c06\u63d0\u4f9b\u5173\u4e8e\u4f7f\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5904\u7406\u5e8f\u5217\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\u76ee\u524d\u53ea\u9700\u8981\u77e5\u9053\u7684\u662f\uff0c\u7531\u4e8e\u5e8f\u5217\u957f\u5ea6\u662f\\(n\\)\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u7684\u901a\u9053\u6570\u91cf\u90fd\u662f\\(d\\)\uff0c\u6240\u4ee5\u5377\u79ef\u5c42\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u4e3a\\(\\mathcal{O}(knd^2)\\)\u3002\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u662f\u5206\u5c42\u7684\uff0c\u56e0\u6b64\u4e3a\u6709\\(\\mathcal{O}(1)\\)\u4e2a\u987a\u5e8f\u64cd\u4f5c\uff0c\u6700\u5927\u8def\u5f84\u957f\u5ea6\u4e3a\\(\\mathcal{O}(n/k)\\)\u3002</p> <p>:label:\u5f53\u66f4\u65b0\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7684\u9690\u72b6\u6001\u65f6\uff0c\\(d \\times d\\)\u6743\u91cd\u77e9\u9635\u548c\\(d\\)\u7ef4\u9690\u72b6\u6001\u7684\u4e58\u6cd5\u8ba1\u7b97\u590d\u6742\u5ea6\u4e3a\\(\\mathcal{O}(d^2)\\)\u3002\u7531\u4e8e\u5e8f\u5217\u957f\u5ea6\u4e3a\\(n\\)\uff0c\u56e0\u6b64\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u5c42\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u4e3a\\(\\mathcal{O}(nd^2)\\)\u3002\u6709\\(\\mathcal{O}(n)\\)\u4e2a\u987a\u5e8f\u64cd\u4f5c\u65e0\u6cd5\u5e76\u884c\u5316\uff0c\u6700\u5927\u8def\u5f84\u957f\u5ea6\u4e5f\u662f\\(\\mathcal{O}(n)\\)\u3002</p> <p>:label:\u5728\u81ea\u6ce8\u610f\u529b\u4e2d\uff0c\u67e5\u8be2\u3001\u952e\u548c\u503c\u90fd\u662f\\(n \\times d\\)\u77e9\u9635\u3002\u8003\u8651\u70b9\uff0d\u79ef\u6ce8\u610f\u529b\uff0c\u5176\u4e2d\\(n \\times d\\)\u77e9\u9635\u4e58\u4ee5\\(d \\times n\\)\u77e9\u9635\u3002\u4e4b\u540e\u8f93\u51fa\u7684\\(n \\times n\\)\u77e9\u9635\u4e58\u4ee5\\(n \\times d\\)\u77e9\u9635\u3002\u56e0\u6b64\uff0c\u81ea\u6ce8\u610f\u529b\u5177\u6709\\(\\mathcal{O}(n^2d)\\)\u8ba1\u7b97\u590d\u6742\u6027\u3002\u6bcf\u4e2a\u8bcd\u5143\u90fd\u901a\u8fc7\u81ea\u6ce8\u610f\u529b\u76f4\u63a5\u8fde\u63a5\u5230\u4efb\u4f55\u5176\u4ed6\u8bcd\u5143\u3002\u56e0\u6b64\uff0c\u6709\\(\\mathcal{O}(1)\\)\u4e2a\u987a\u5e8f\u64cd\u4f5c\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u6700\u5927\u8def\u5f84\u957f\u5ea6\u4e5f\u662f\\(\\mathcal{O}(1)\\)\u3002</p> <p>\u603b\u800c\u8a00\u4e4b\uff0c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u548c\u81ea\u6ce8\u610f\u529b\u90fd\u62e5\u6709\u5e76\u884c\u8ba1\u7b97\u7684\u4f18\u52bf\uff0c\u800c\u4e14\u81ea\u6ce8\u610f\u529b\u7684\u6700\u5927\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u3002\u4f46\u662f\u56e0\u4e3a\u5176\u8ba1\u7b97\u590d\u6742\u5ea6\u662f\u5173\u4e8e\u5e8f\u5217\u957f\u5ea6\u7684\u4e8c\u6b21\u65b9\uff0c\u6240\u4ee5\u5728\u5f88\u957f\u7684\u5e8f\u5217\u4e2d\u8ba1\u7b97\u4f1a\u975e\u5e38\u6162\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E4%B8%8E%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81.html#_3","title":"\u4f4d\u7f6e\u7f16\u7801","text":"<p>\u81ea\u6ce8\u610f\u529b\u56e0\u4e3a\u5e76\u884c\u8ba1\u7b97\u800c\u653e\u5f03\u4e86\u987a\u5e8f\u64cd\u4f5c\u3002\u4e3a\u4e86\u4f7f\u7528\u5e8f\u5217\u7684\u987a\u5e8f\u4fe1\u606f\uff0c\u901a\u8fc7\u5728\u8f93\u5165\u8868\u793a\u4e2d\u6dfb\u52a0\u4f4d\u7f6e\u7f16\u7801\uff08positional encoding\uff09\u6765\u6ce8\u5165\u7edd\u5bf9\u7684\u6216\u76f8\u5bf9\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002\u4f4d\u7f6e\u7f16\u7801\u53ef\u4ee5\u901a\u8fc7\u5b66\u4e60\u5f97\u5230\u4e5f\u53ef\u4ee5\u76f4\u63a5\u56fa\u5b9a\u5f97\u5230\u3002\u63a5\u4e0b\u6765\u63cf\u8ff0\u7684\u662f\u57fa\u4e8e\u6b63\u5f26\u51fd\u6570\u548c\u4f59\u5f26\u51fd\u6570\u7684\u56fa\u5b9a\u4f4d\u7f6e\u7f16\u7801\u3002</p> <p>\u5047\u8bbe\u8f93\u5165\u8868\u793a\\(\\mathbf{X} \\in \\mathbb{R}^{n \\times d}\\)\u5305\u542b\u4e00\u4e2a\u5e8f\u5217\u4e2d\\(n\\)\u4e2a\u8bcd\u5143\u7684\\(d\\)\u7ef4\u5d4c\u5165\u8868\u793a\u3002\u4f4d\u7f6e\u7f16\u7801\u4f7f\u7528\u76f8\u540c\u5f62\u72b6\u7684\u4f4d\u7f6e\u5d4c\u5165\u77e9\u9635\\(\\mathbf{P} \\in \\mathbb{R}^{n \\times d}\\)\u8f93\u51fa\\(\\mathbf{X} + \\mathbf{P}\\)\uff0c\u77e9\u9635\u7b2c\\(i\\)\u884c\u3001\u7b2c\\(2j\\)\u5217\u548c\\(2j+1\\)\u5217\u4e0a\u7684\u5143\u7d20\u4e3a\uff1a  </p> <pre><code>#@save\nclass PositionalEncoding(nn.Module):\n    \"\"\"\u4f4d\u7f6e\u7f16\u7801\"\"\"\n    def __init__(self, num_hiddens, dropout, max_len=1000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(dropout)\n        # \u521b\u5efa\u4e00\u4e2a\u8db3\u591f\u957f\u7684P\n        self.P = torch.zeros((1, max_len, num_hiddens))\n        X = torch.arange(max_len, dtype=torch.float32).reshape(\n            -1, 1) / torch.pow(10000, torch.arange(\n            0, num_hiddens, 2, dtype=torch.float32) / num_hiddens)\n        self.P[:, :, 0::2] = torch.sin(X)\n        self.P[:, :, 1::2] = torch.cos(X)\n\n    def forward(self, X):\n        X = X + self.P[:, :X.shape[1], :].to(X.device)\n        return self.dropout(X)\n</code></pre> <p>\u5728\u4f4d\u7f6e\u5d4c\u5165\u77e9\u9635\\(\\mathbf{P}\\)\u4e2d\uff0c[\u884c\u4ee3\u8868\u8bcd\u5143\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5217\u4ee3\u8868\u4f4d\u7f6e\u7f16\u7801\u7684\u4e0d\u540c\u7ef4\u5ea6]\u3002</p> <p>\u4e3a\u4e86\u660e\u767d\u4e3a\u4ec0\u4e48\u4f4d\u7f6e\u7f16\u7801\u4e0d\u540c\u7ef4\u5ea6\u7684\u9891\u7387\u4e09\u89d2\u51fd\u6570\u9891\u7387\u4e0d\u540c\uff0c\u8fd9\u91cc\u505a\u4e00\u4e2a\u7c7b\u6bd4\uff1a\u4e8c\u8fdb\u5236\u4e2d\u8868\u793a1,2,3\u7b49\u6570\u5b57\uff0c\u4f4d\u6b21\u8d8a\u4f4e\u7684\u6bd4\u7279\u66f4\u65b0\u7684\u9891\u7387\u8d8a\u9ad8\u3002\u800c\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u7684\u4f4d\u7f6e\u7f16\u7801\u8fd8\u80fd\u6355\u83b7\u76f8\u5bf9\u4f4d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a</p> <p>\u5bf9\u4e8e\u4efb\u4f55\u786e\u5b9a\u7684\u4f4d\u7f6e\u504f\u79fb\\(\\delta\\)\uff0c\u4f4d\u7f6e\\(i + \\delta\\)\u5904\u7684\u4f4d\u7f6e\u7f16\u7801\u53ef\u4ee5\u7ebf\u6027\u6295\u5f71\u4f4d\u7f6e\\(i\\)\u5904\u7684\u4f4d\u7f6e\u7f16\u7801\u6765\u8868\u793a\u3002\u8fd9\u79cd\u6295\u5f71\u7684\u6570\u5b66\u89e3\u91ca\u662f\uff0c\u4ee4\\(\\omega_j = 1/10000^{2j/d}\\)\uff0c\u5bf9\u4e8e\u4efb\u4f55\u786e\u5b9a\u7684\u4f4d\u7f6e\u504f\u79fb\\(\\delta\\)\uff0c\\((p_{i, 2j}, p_{i, 2j+1})\\)\u90fd\u53ef\u4ee5\u7ebf\u6027\u6295\u5f71\u5230\\((p_{i+\\delta, 2j}, p_{i+\\delta, 2j+1})\\)\uff1a  \\(2\\times 2\\)\u6295\u5f71\u77e9\u9635\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u4f4d\u7f6e\u7684\u7d22\u5f15\\(i\\)\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/softmax.html","title":"softmax","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/softmax.html#softmax_1","title":"softmax\u56de\u5f52","text":"<p>\u56de\u5f52\u4e5f\u53ef\u4ee5\u7528\u4e8e\u9884\u6d4b\u591a\u5c11\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4\u623f\u5c4b\u88ab\u552e\u51fa\u7684\u4ef7\u683c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u4e5f\u5bf9\u5206\u7c7b\u95ee\u9898\u611f\u5174\u8da3\uff0c\u6bd4\u5982\u8bf4\u60f3\u95ee\u8fd9\u4e2a\u56fe\u50cf\u7ed8\u5236\u7684\u662f\u9a74\u3001\u732b\u3001\u72d7\u8fd8\u662f\u9e21\u3002\u56de\u5f52\u4f30\u8ba1\u4e00\u4e2a\u8fde\u7eed\u503c\uff0c\u800c\u5206\u7c7b\u9884\u6d4b\u4e00\u4e2a\u79bb\u6563\u7c7b\u522b\uff0c\u4f8b\u5982MNIST\u6570\u636e\u96c6\u662f\u624b\u5199\u6570\u5b57\u8bc6\u522b\uff0810\u7c7b\uff09\uff0cImageNet\u81ea\u7136\u7269\u4f53\u5206\u7c7b\uff081000\u7c7b\uff09\u3002\u56de\u5f52\u548c\u5206\u7c7b\u6709\u5f88\u591a\u7684\u76f8\u4f3c\u6027\uff0c\u4f46\u662f\u53c8\u6709\u533a\u522b\u3002\u56de\u5f52\u662f\u5355\u8fde\u7eed\u6570\u503c\u8f93\u51fa\uff0c\u8ddf\u771f\u5b9e\u503c\u7684\u533a\u522b\u4f5c\u4e3a\u635f\u5931\uff1b\u800c\u5206\u7c7b\u6709\u8fc7\u4e2a\u8f93\u51fa\uff0c\u8f93\u51fai\u662f\u9884\u6d4b\u4e3a\u7b2ci\u7c7b\u7684\u7f6e\u4fe1\u5ea6\u3002</p> <p>\u90a3\u4e48\u5206\u7c7b\u4e2d\u5982\u4f55\u5b9a\u4e49\u635f\u5931\u5462\uff1f\u6211\u4eec\u4f7f\u7528\u5747\u65b9\u635f\u5931\u3002\u5176\u4e2d\uff0c\u5047\u5982\u8bf4\u6709n\u7c7b\uff0c\u90a3\u4e48\u6570\u636e\u96c6\u91cc\u9762\u7684\u771f\u5b9e\u6570\u636e\u662f\u5bf9\u7c7b\u522b\u8fdb\u884c\u4e00\u4f4d\u6709\u6548\u7f16\u7801\u7684\u7ed3\u679c\uff0c\u4e0b\u9762\u77e9\u9635\u4e2d\\(y_i=1,if\\ i=y\\), \u800c\u5176\u4f59\u5143\u7d20\u90fd\u662f0\u3002\u8fd9\u79cd\u7f16\u7801\u65b9\u5f0f\u53c8\u79f0\u4e3a\u72ec\u70ed\u7f16\u7801\uff08one-hot\uff09:  \u5e0c\u671b\u6700\u540e\u8f93\u51fa\u7684\u503c\u662f\u4e00\u4e2a\u4e2a\u6982\u7387\uff0c\u7136\u540e\u5e0c\u671b\u8fd9\u4e9b\u6982\u7387\u90fd\u662f\u975e\u8d1f\uff0c\u7136\u540e\u548c\u4e3a1\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u64cd\u4f5c\u6ee1\u8db3\u8fd9\u4e9b\u9700\u6c42\u5462\uff1f softmax\u64cd\u4f5c\u5c31\u53ef\u4ee5\u3002  \u90a3\u4e48\u6709\u4e86\u8f93\u51fa\u503c\u548c\u771f\u5b9e\u503c\u4e24\u4e2a\u77e9\u9635\uff0c\u5982\u4f55\u8bbe\u8ba1\u635f\u5931\u51fd\u6570\u5462\uff1fsoftmax\u51fd\u6570\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5411\u91cf\\(\\hat{\\mathbf{y}}\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u201c\u5bf9\u7ed9\u5b9a\u4efb\u610f\u8f93\u5165\\(\\mathbf{x}\\)\u7684\u6bcf\u4e2a\u7c7b\u7684\u6761\u4ef6\u6982\u7387\u201d\u3002\u4f8b\u5982\uff0c\\(\\hat{y}_1\\)=\\(P(y=\\text{\u732b} \\mid \\mathbf{x})\\)\u3002\u5047\u8bbe\u6574\u4e2a\u6570\u636e\u96c6\\(\\{\\mathbf{X}, \\mathbf{Y}\\}\\)\u5177\u6709\\(n\\)\u4e2a\u6837\u672c\uff0c\u5176\u4e2d\u7d22\u5f15\\(i\\)\u7684\u6837\u672c\u7531\u7279\u5f81\u5411\u91cf\\(\\mathbf{x}^{(i)}\\)\u548c\u72ec\u70ed\u6807\u7b7e\u5411\u91cf\\(\\mathbf{y}^{(i)}\\)\u7ec4\u6210\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4f30\u8ba1\u503c\u4e0e\u5b9e\u9645\u503c\u8fdb\u884c\u6bd4\u8f83\uff1a  \u6839\u636e\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\uff0c\u6211\u4eec\u6700\u5927\u5316\\(P(\\mathbf{Y} \\mid \\mathbf{X})\\)\uff0c\u76f8\u5f53\u4e8e\u6700\u5c0f\u5316\u8d1f\u5bf9\u6570\u4f3c\u7136\uff1a  \u5176\u4e2d\uff0c\u5bf9\u4e8e\u4efb\u4f55\u6807\u7b7e\\(\\mathbf{y}\\)\u548c\u6a21\u578b\u9884\u6d4b\\(\\hat{\\mathbf{y}}\\)\uff0c\u635f\u5931\u51fd\u6570\u4e3a\uff1a  \u90a3\u4e48\u5047\u5982\u8bf4\\(\\hat{\\mathbf{y}}\\)\u662f\u7531\\(\\mathbf{o}\\)\u77e9\u9635\u7ecf\u8fc7softmax\u5f97\u6765\uff0c\u90a3\u4e48\u5982\u4f55\u6c42\u5173\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\\(o_j\\)\u7684\u5bfc\u6570\u5462\uff1f  </p> \\[ \\partial_{o_j} l(\\mathbf{y}, \\hat{\\mathbf{y}}) = \\frac{\\exp(o_j)}{\\sum_{k=1}^q \\exp(o_k)} - y_j = \\mathrm{softmax}(\\mathbf{o})_j - y_j \\] <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bfc\u6570\u662f\u6211\u4eecsoftmax\u6a21\u578b\u5206\u914d\u7684\u6982\u7387\u4e0e\u5b9e\u9645\u53d1\u751f\u7684\u60c5\u51b5\uff08\u7531\u72ec\u70ed\u6807\u7b7e\u5411\u91cf\u8868\u793a\uff09\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bb2\uff0c\u8fd9\u4e0e\u6211\u4eec\u5728\u56de\u5f52\u4e2d\u770b\u5230\u7684\u975e\u5e38\u76f8\u4f3c\uff0c\u5176\u4e2d\u68af\u5ea6\u662f\u89c2\u6d4b\u503c\\(y\\)\u548c\u4f30\u8ba1\u503c\\(\\hat{y}\\)\u4e4b\u95f4\u7684\u5dee\u5f02\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/softmax.html#_1","title":"\u4fe1\u606f\u8bba\u5ba1\u89c6\u89d2\u5ea6","text":"<p>\u4fe1\u606f\u8bba\uff08information theory\uff09\u6d89\u53ca\u7f16\u7801\u3001\u89e3\u7801\u3001\u53d1\u9001\u4ee5\u53ca\u5c3d\u53ef\u80fd\u7b80\u6d01\u5730\u5904\u7406\u4fe1\u606f\u6216\u6570\u636e\u3002\u4fe1\u606f\u8bba\u7684\u6838\u5fc3\u601d\u60f3\u662f\u91cf\u5316\u6570\u636e\u4e2d\u7684\u4fe1\u606f\u5185\u5bb9\u3002\u5728\u4fe1\u606f\u8bba\u4e2d\uff0c\u8be5\u6570\u503c\u88ab\u79f0\u4e3a\u5206\u5e03\\(P\\)\u7684\u71b5\uff08entropy\uff09\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u7a0b\u5f97\u5230\uff1a  \u4fe1\u606f\u8bba\u7684\u57fa\u672c\u5b9a\u7406\u4e4b\u4e00\u6307\u51fa\uff0c\u4e3a\u4e86\u5bf9\u4ece\u5206\u5e03\\(p\\)\u4e2d\u968f\u673a\u62bd\u53d6\u7684\u6570\u636e\u8fdb\u884c\u7f16\u7801\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981\\(H[P]\\)\u201c\u7eb3\u7279\uff08nat\uff09\u201d\u5bf9\u5176\u8fdb\u884c\u7f16\u7801\u3002\u201c\u7eb3\u7279\u201d\u76f8\u5f53\u4e8e\u6bd4\u7279\uff08bit\uff09\uff0c\u4f46\u662f\u5bf9\u6570\u5e95\u4e3a\\(e\\)\u800c\u4e0d\u662f2\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u7eb3\u7279\u662f\\(\\frac{1}{\\log(2)} \\approx 1.44\\)\u6bd4\u7279\u3002</p> <p>\u538b\u7f29\u4e0e\u9884\u6d4b\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u60f3\u8c61\u4e00\u4e0b\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8981\u538b\u7f29\u7684\u6570\u636e\u6d41\u3002\u5982\u679c\u6211\u4eec\u5f88\u5bb9\u6613\u9884\u6d4b\u4e0b\u4e00\u4e2a\u6570\u636e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u636e\u5c31\u5f88\u5bb9\u6613\u538b\u7f29\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u4e3e\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u5047\u5982\u6570\u636e\u6d41\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u4f1a\u662f\u4e00\u4e2a\u975e\u5e38\u65e0\u804a\u7684\u6570\u636e\u6d41\u3002\u7531\u4e8e\u5b83\u4eec\u603b\u662f\u76f8\u540c\u7684\uff0c\u6211\u4eec\u603b\u662f\u77e5\u9053\u4e0b\u4e00\u4e2a\u6570\u636e\u662f\u4ec0\u4e48\u3002\u6240\u4ee5\uff0c\u4e3a\u4e86\u4f20\u9012\u6570\u636e\u6d41\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e0d\u5fc5\u4f20\u8f93\u4efb\u4f55\u4fe1\u606f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u201c\u4e0b\u4e00\u4e2a\u6570\u636e\u662fxx\u201d\u8fd9\u4e2a\u4e8b\u4ef6\u6beb\u65e0\u4fe1\u606f\u91cf\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u5b8c\u5168\u9884\u6d4b\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u65f6\u53ef\u80fd\u4f1a\u611f\u5230\"\u60ca\u5f02\"\u3002\u514b\u52b3\u5fb7\u00b7\u9999\u519c\u51b3\u5b9a\u7528\u4fe1\u606f\u91cf\\(\\log \\frac{1}{P(j)} = -\\log P(j)\\)\u6765\u91cf\u5316\u8fd9\u79cd\u60ca\u5f02\u7a0b\u5ea6\u3002\u5728\u89c2\u5bdf\u4e00\u4e2a\u4e8b\u4ef6\\(j\\)\u65f6\uff0c\u5e76\u8d4b\u4e88\u5b83\uff08\u4e3b\u89c2\uff09\u6982\u7387\\(P(j)\\)\u3002\u5f53\u6211\u4eec\u8d4b\u4e88\u4e00\u4e2a\u4e8b\u4ef6\u8f83\u4f4e\u7684\u6982\u7387\u65f6\uff0c\u6211\u4eec\u7684\u60ca\u5f02\u4f1a\u66f4\u5927\uff0c\u8be5\u4e8b\u4ef6\u7684\u4fe1\u606f\u91cf\u4e5f\u5c31\u66f4\u5927\u3002</p> <p>\u5982\u679c\u628a\u71b5\\(H(P)\\)\u60f3\u8c61\u4e3a\u201c\u77e5\u9053\u771f\u5b9e\u6982\u7387\u7684\u4eba\u6240\u7ecf\u5386\u7684\u60ca\u5f02\u7a0b\u5ea6\u201d\uff0c\u90a3\u4e48\u4ec0\u4e48\u662f\u4ea4\u53c9\u71b5\uff1f\u4ea4\u53c9\u71b5\u4ece\\(P\\)\u5230\\(Q\\)\uff0c\u8bb0\u4e3a\\(H(P, Q)\\)\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u4ea4\u53c9\u71b5\u60f3\u8c61\u4e3a\u201c\u4e3b\u89c2\u6982\u7387\u4e3a\\(Q\\)\u7684\u89c2\u5bdf\u8005\u5728\u770b\u5230\u6839\u636e\u6982\u7387\\(P\\)\u751f\u6210\u7684\u6570\u636e\u65f6\u7684\u9884\u671f\u60ca\u5f02\u201d\u3002\u5f53\\(P=Q\\)\u65f6\uff0c\u4ea4\u53c9\u71b5\u8fbe\u5230\u6700\u4f4e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ece\\(P\\)\u5230\\(Q\\)\u7684\u4ea4\u53c9\u71b5\u662f\\(H(P, P)= H(P)\\)\u3002</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u65b9\u9762\u6765\u8003\u8651\u4ea4\u53c9\u71b5\u5206\u7c7b\u76ee\u6807\uff1a\uff08i\uff09\u6700\u5927\u5316\u89c2\u6d4b\u6570\u636e\u7684\u4f3c\u7136\uff1b\uff08ii\uff09\u6700\u5c0f\u5316\u4f20\u8fbe\u6807\u7b7e\u6240\u9700\u7684\u60ca\u5f02\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/softmax.html#_2","title":"\u56fe\u7247\u5206\u7c7b\u6570\u636e\u96c6","text":"<p>Fashion-MNIST\u4e2d\u5305\u542b\u768410\u4e2a\u7c7b\u522b\uff0c\u5206\u522b\u4e3at-shirt\uff08T\u6064\uff09\u3001trouser\uff08\u88e4\u5b50\uff09\u3001pullover\uff08\u5957\u886b\uff09\u3001dress\uff08\u8fde\u8863\u88d9\uff09\u3001coat\uff08\u5916\u5957\uff09\u3001sandal\uff08\u51c9\u978b\uff09\u3001shirt\uff08\u886c\u886b\uff09\u3001sneaker\uff08\u8fd0\u52a8\u978b\uff09\u3001bag\uff08\u5305\uff09\u548cankle boot\uff08\u77ed\u9774\uff09\u3002</p> <p>\u4ee5\u4e0b\u51fd\u6570\u7528\u4e8e\u5728\u6570\u5b57\u6807\u7b7e\u7d22\u5f15\u53ca\u5176\u6587\u672c\u540d\u79f0\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002</p> <pre><code>import torch\nimport torchvision\nfrom torch.utils import data\nfrom torchvision import transforms\n# \u7528svg\u9ad8\u6e05\u663e\u793a\u56fe\u7247\nfrom d2l import torch as d2l\nd2l.use_svg_display()\n\n# \u7b80\u5355\u7684\u9884\u5904\u7406\uff1a\u6240\u6709\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u5f20\u91cf; \u6ce8\u610f\u65b9\u6cd5\u662f\u4ecetorchvision\u4e2d\u7684transforms\u4e2d\u6765\u7684\ntrans = transforms.ToTensor()\nmnist_train = torchvision.datasets.FashionMNIST(\n    root=\"../data\", train=True, transform=trans, download=True)\nmnist_test = torchvision.datasets.FashionMNIST(\n    root=\"../data\", train=False, transform=trans, download=True)\n\nlen(mnist_train), len(mnist_test)\n# (60000, 10000)\nmnist_train[0][0].shape\n# torch.Size([1, 28, 28]) \u4ee3\u8868\u901a\u9053\u4e3a1\uff08\u7070\u5ea6\u56fe\u50cf\uff09\uff0c28*28\u4ee3\u8868\u957f28\u50cf\u7d20\u5bbd28\u50cf\u7d20\n\ndef get_fashion_mnist_labels(labels): \n    \"\"\"\u8fd4\u56deFashion-MNIST\u6570\u636e\u96c6\u7684\u6587\u672c\u6807\u7b7e\"\"\"\n    text_labels = ['t-shirt', 'trouser', 'pullover', 'dress', 'coat',\n                   'sandal', 'shirt', 'sneaker', 'bag', 'ankle boot']\n    return [text_labels[int(i)] for i in labels]\n\ndef show_images(imgs, num_rows, num_cols, titles=None, scale=1.5):  #@save\n    \"\"\"\u7ed8\u5236\u56fe\u50cf\u5217\u8868\"\"\"\n    figsize = (num_cols * scale, num_rows * scale)\n    _, axes = d2l.plt.subplots(num_rows, num_cols, figsize=figsize)\n    axes = axes.flatten()\n    for i, (ax, img) in enumerate(zip(axes, imgs)):\n        if torch.is_tensor(img):\n            # \u56fe\u7247\u5f20\u91cf\n            ax.imshow(img.numpy())\n        else:\n            # PIL\u56fe\u7247\n            ax.imshow(img)\n        ax.axes.get_xaxis().set_visible(False)\n        ax.axes.get_yaxis().set_visible(False)\n        if titles:\n            ax.set_title(titles[i])\n    return axes\n</code></pre> <p>\u4e3a\u4e86\u4f7f\u6211\u4eec\u5728\u8bfb\u53d6\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u65f6\u66f4\u5bb9\u6613\uff0c\u6211\u4eec\u4f7f\u7528\u5185\u7f6e\u7684\u6570\u636e\u8fed\u4ee3\u5668\uff0c\u800c\u4e0d\u662f\u4ece\u96f6\u5f00\u59cb\u521b\u5efa\u3002\u56de\u987e\u4e00\u4e0b\uff0c\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6570\u636e\u52a0\u8f7d\u5668\u6bcf\u6b21\u90fd\u4f1a[\u8bfb\u53d6\u4e00\u5c0f\u6279\u91cf\u6570\u636e\uff0c\u5927\u5c0f\u4e3a<code>batch_size</code>]\u3002\u901a\u8fc7\u5185\u7f6e\u6570\u636e\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u673a\u6253\u4e71\u4e86\u6240\u6709\u6837\u672c\uff0c\u4ece\u800c\u65e0\u504f\u89c1\u5730\u8bfb\u53d6\u5c0f\u6279\u91cf\u3002</p> <pre><code>batch_size = 256\n\ndef get_dataloader_workers():  #@save\n    \"\"\"\u4f7f\u75284\u4e2a\u8fdb\u7a0b\u6765\u8bfb\u53d6\u6570\u636e\"\"\"\n    return 4\n\ntrain_iter = data.DataLoader(mnist_train, batch_size, shuffle=True,\n                             num_workers=get_dataloader_workers())\n\ntimer = d2l.Timer()\nfor X, y in train_iter:\n    continue\nf'{timer.stop():.2f} sec'\n# 4.3 sec\n</code></pre> <p>\u8fd9\u91cc\u8fdb\u7a0b\u6570\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u6570\u636e\u8981\u4ece\u786c\u76d8\u8f6c\u79fb\u5230\u5185\u5b58\u91cc\u9762\uff0c\u8fd9\u662f\u4e00\u4ef6\u4e0d\u5bb9\u6613\u7684\u4e8b\u60c5\uff0c\u56e0\u6b64\u53ef\u80fd\u9700\u8981\u591a\u8fdb\u7a0b\u6765\u5e2e\u52a9\u6570\u636e\u66f4\u5feb\u5730\u8f6c\u79fb\u3002\u5b9e\u6218\u4e2d\uff0c\u5efa\u8bae\u5355\u72ec\u68c0\u67e5\u8bfb\u53d6\u4e00\u8f6e\u7684\u6570\u636e\u7684\u65f6\u95f4\u662f\u591a\u5c11\uff0c\u5e0c\u671b\u8bfb\u53d6\u7684\u65f6\u95f4\u81f3\u5c11\u8981\u6bd4\u8bad\u7ec3\u7684\u65f6\u95f4\u5c11\uff0c\u5f53\u7136\u5c11\u5f88\u591a\u662f\u6700\u597d\u7684\u3002</p> <p>\u73b0\u5728\u5c31\u80fd\u6574\u5408\u6240\u6709\u7684\u7ec4\u4ef6\u4e86\uff1a</p> <pre><code>def load_data_fashion_mnist(batch_size, resize=None):  #@save\n    \"\"\"\u4e0b\u8f7dFashion-MNIST\u6570\u636e\u96c6\uff0c\u7136\u540e\u5c06\u5176\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\"\"\"\n    trans = [transforms.ToTensor()]\n    if resize:\n        trans.insert(0, transforms.Resize(resize))\n        # \u4e0a\u4e00\u6b65\u662f\u4e3a\u4e86\u628a\u56fe\u7247\u653e\u5927\n    trans = transforms.Compose(trans)\n    mnist_train = torchvision.datasets.FashionMNIST(\n        root=\"../data\", train=True, transform=trans, download=True)\n    mnist_test = torchvision.datasets.FashionMNIST(\n        root=\"../data\", train=False, transform=trans, download=True)\n    return (data.DataLoader(mnist_train, batch_size, shuffle=True,\n                            num_workers=get_dataloader_workers()),\n            data.DataLoader(mnist_test, batch_size, shuffle=False,\n                            num_workers=get_dataloader_workers()))\n\ntrain_iter, test_iter = load_data_fashion_mnist(32, resize=64)\nfor X, y in train_iter:\n    print(X.shape, X.dtype, y.shape, y.dtype)\n    break\n# torch.Size([32, 1, 64, 64]) torch.float32 torch.Size([32]) torch.int64\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/softmax.html#softmax_2","title":"\u4ece\u96f6\u5f00\u59cb\u5b9e\u73b0\u7684softmax","text":"<pre><code>import torch\nfrom IPython import display\nfrom d2l import torch as d2l\n# \u52a0\u8f7d\u6570\u636e\u96c6\nbatch_size = 256\ntrain_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)\n\nnum_inputs = 784\nnum_outputs = 10\n# \u521d\u59cb\u5316\u6743\u91cd\u548c\u504f\u7f6e\nW = torch.normal(0, 0.01, size=(num_inputs, num_outputs), requires_grad=True)\nb = torch.zeros(num_outputs, requires_grad=True)\n\ndef softmax(X):\n    X_exp = torch.exp(X)\n    partition = X_exp.sum(1, keepdim=True)\n    return X_exp / partition\ndef net(X):\n    # torch.matmul\u662f\u77e9\u9635\u4e58\u6cd5\uff1bX.reshape\u662f\u5c06bs*28*28 =&gt; bs * 784\n    return softmax(torch.matmul(X.reshape((-1, W.shape[0])), W) + b)\ndef cross_entropy(y_hat, y):\n    return - torch.log(y_hat[range(len(y_hat)), y])\n</code></pre> <p>\u4e0a\u9762\u6211\u4eec\u8fdb\u884c\u4e86w b\u53c2\u6570\u7684\u521d\u59cb\u5316\uff0c\u5b9a\u4e49\u4e86\u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf\u7684softmax\u64cd\u4f5c\uff0c\u5b9a\u4e49\u4e86\u7f51\u7edc\u7684\u6d41\u7a0b\uff0c\u5b9a\u4e49\u4e86\u4ea4\u53c9\u71b5\u635f\u5931\u3002\u7ed9\u5b9a\u9884\u6d4b\u6982\u7387\u5206\u5e03<code>y_hat</code>\uff0c\u5f53\u6211\u4eec\u5fc5\u987b\u8f93\u51fa\u786c\u9884\u6d4b\uff08hard prediction\uff09\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u9009\u62e9\u9884\u6d4b\u6982\u7387\u6700\u9ad8\u7684\u7c7b\u3002\u5f53\u9884\u6d4b\u4e0e\u6807\u7b7e\u5206\u7c7b<code>y</code>\u4e00\u81f4\u65f6\uff0c\u5373\u662f\u6b63\u786e\u7684\u3002\u5206\u7c7b\u7cbe\u5ea6\u5373\u6b63\u786e\u9884\u6d4b\u6570\u91cf\u4e0e\u603b\u9884\u6d4b\u6570\u91cf\u4e4b\u6bd4\u3002\u4e3a\u4e86\u8ba1\u7b97\u7cbe\u5ea6\uff0c\u6211\u4eec\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u3002\u9996\u5148\uff0c\u5982\u679c<code>y_hat</code>\u662f\u77e9\u9635\uff0c\u90a3\u4e48\u5047\u5b9a\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u5b58\u50a8\u6bcf\u4e2a\u7c7b\u7684\u9884\u6d4b\u5206\u6570\u3002\u6211\u4eec\u4f7f\u7528<code>argmax</code>\u83b7\u5f97\u6bcf\u884c\u4e2d\u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15\u6765\u83b7\u5f97\u9884\u6d4b\u7c7b\u522b\u3002\u7136\u540e\u6211\u4eec[\u5c06\u9884\u6d4b\u7c7b\u522b\u4e0e\u771f\u5b9e<code>y</code>\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83]\u3002\u7531\u4e8e\u7b49\u5f0f\u8fd0\u7b97\u7b26\u201c<code>==</code>\u201d\u5bf9\u6570\u636e\u7c7b\u578b\u5f88\u654f\u611f\uff0c\u56e0\u6b64\u6211\u4eec\u5c06<code>y_hat</code>\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u4e0e<code>y</code>\u7684\u6570\u636e\u7c7b\u578b\u4e00\u81f4\u3002\u7ed3\u679c\u662f\u4e00\u4e2a\u5305\u542b0\uff08\u9519\uff09\u548c1\uff08\u5bf9\uff09\u7684\u5e03\u5c14\u5f20\u91cf\u3002\u6700\u540e\uff0c\u6211\u4eec\u6c42\u548c\u4f1a\u5f97\u5230\u6b63\u786e\u9884\u6d4b\u7684\u6570\u91cf\u3002</p> <pre><code>def accuracy(y_hat, y):  #@save\n    \"\"\"\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6570\u91cf\"\"\"\n    if len(y_hat.shape) &gt; 1 and y_hat.shape[1] &gt; 1:\n        y_hat = y_hat.argmax(axis=1)\n    cmp = y_hat.type(y.dtype) == y\n    return float(cmp.type(y.dtype).sum())\n</code></pre> <p>\u8fd9\u91cc\u518d\u5b9a\u4e49Accumulator\u7c7b\uff0c\u8bb0\u5f55\u4e24\u4e2a\u6570\u5b57\uff1a\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570\uff0c\u548c\u9884\u6d4b\u7684\u6b21\u6570\u3002\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u7cbe\u5ea6\u5c31\u662f\u7b2c\u4e00\u4e2a\u6570\u548c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u7684\u6bd4\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u4f7f\u7528\u4e860.0\uff1f\u56e0\u4e3a\u5982\u679c\u90fd\u662fint\uff0c\u90a3\u4e48\u4e24\u4e2a\u6574\u6570\u76f8\u9664\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662fint\uff0c\u51b5\u4e14accuracy\u8fd4\u56de\u7684\u503c\u4e5f\u662f\u89c4\u5b9a\u4e3a\u4e86float\u3002</p> <pre><code>class Accumulator:  #@save\n    \"\"\"\u5728n\u4e2a\u53d8\u91cf\u4e0a\u7d2f\u52a0\"\"\"\n    def __init__(self, n):\n        self.data = [0.0] * n\n\n    def add(self, *args):\n        self.data = [a + float(b) for a, b in zip(self.data, args)]\n\n    def reset(self):\n        self.data = [0.0] * len(self.data)\n\n    def __getitem__(self, idx):\n        return self.data[idx]\ndef evaluate_accuracy(net, data_iter):  #@save\n    \"\"\"\u8ba1\u7b97\u5728\u6307\u5b9a\u6570\u636e\u96c6\u4e0a\u6a21\u578b\u7684\u7cbe\u5ea6\"\"\"\n    if isinstance(net, torch.nn.Module):\n        net.eval()  # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bc4\u4f30\u6a21\u5f0f\n    metric = Accumulator(2)  # \u6b63\u786e\u9884\u6d4b\u6570\u3001\u9884\u6d4b\u603b\u6570\n    with torch.no_grad():\n        for X, y in data_iter:\n            metric.add(accuracy(net(X), y), y.numel())\n    return metric[0] / metric[1]\n</code></pre> <p>\u8bad\u7ec3\u4e00\u4e2aepoch\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>def train_epoch_ch3(net, train_iter, loss, updater):  #@save\n    \"\"\"\u8bad\u7ec3\u6a21\u578b\u4e00\u4e2a\u8fed\u4ee3\u5468\u671f\"\"\"\n    # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u6a21\u5f0f\n    if isinstance(net, torch.nn.Module):\n        net.train()\n    # \u8bad\u7ec3\u635f\u5931\u603b\u548c\u3001\u8bad\u7ec3\u51c6\u786e\u5ea6\u603b\u548c\u3001\u6837\u672c\u6570\n    metric = Accumulator(3)\n    for X, y in train_iter:\n        # \u8ba1\u7b97\u68af\u5ea6\u5e76\u66f4\u65b0\u53c2\u6570\n        y_hat = net(X)\n        l = loss(y_hat, y)\n        if isinstance(updater, torch.optim.Optimizer):\n            # \u4f7f\u7528PyTorch\u5185\u7f6e\u7684\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570\n            updater.zero_grad()\n            l.mean().backward()\n            updater.step()\n        else:\n            # \u4f7f\u7528\u5b9a\u5236\u7684\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570\n            l.sum().backward()\n            updater(X.shape[0])\n        metric.add(float(l.sum()), accuracy(y_hat, y), y.numel())\n    # \u8fd4\u56de\u8bad\u7ec3\u635f\u5931\u548c\u8bad\u7ec3\u7cbe\u5ea6\n    return metric[0] / metric[2], metric[1] / metric[2]\n</code></pre> <p>\u5728\u5c55\u793a\u8bad\u7ec3\u51fd\u6570\u7684\u5b9e\u73b0\u4e4b\u524d\uff0c\u6211\u4eec[\u5b9a\u4e49\u4e00\u4e2a\u5728\u52a8\u753b\u4e2d\u7ed8\u5236\u6570\u636e\u7684\u5b9e\u7528\u7a0b\u5e8f\u7c7b]<code>Animator</code>\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u51fa\u6765\u4e86\u3002\u90a3\u4e48\u8bad\u7ec3\u7684\u5b8c\u6574\u8fc7\u7a0b\u51fd\u6570\u5982\u4e0b\uff1a</p> <pre><code>def train_ch3(net, train_iter, test_iter, loss, num_epochs, updater):  #@save\n    \"\"\"\u8bad\u7ec3\u6a21\u578b\"\"\"\n    animator = Animator(xlabel='epoch', xlim=[1, num_epochs], ylim=[0.3, 0.9],\n                        legend=['train loss', 'train acc', 'test acc'])\n    for epoch in range(num_epochs):\n        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)\n        test_acc = evaluate_accuracy(net, test_iter)\n        animator.add(epoch + 1, train_metrics + (test_acc,))\n    train_loss, train_acc = train_metrics\n    assert train_loss &lt; 0.5, train_loss\n    assert train_acc &lt;= 1 and train_acc &gt; 0.7, train_acc\n    assert test_acc &lt;= 1 and test_acc &gt; 0.7, test_acc\n</code></pre> <p>\u4f5c\u4e3a\u4e00\u4e2a\u4ece\u96f6\u5f00\u59cb\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u4f7f\u7528[\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6765\u4f18\u5316\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570]\uff0c\u8bbe\u7f6e\u5b66\u4e60\u7387\u4e3a0.1\u3002\u90a3\u4e48\u4f7f\u7528\u5148\u524d\u5b9a\u4e49\u7684\u7f51\u7edc\u3001\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u8fed\u4ee3\u5668\u3001\u635f\u5931\u51fd\u6570\u3001\u89c4\u5b9a\u7684\u8bad\u7ec3\u8f6e\u6570\u548c\u53c2\u6570\u66f4\u65b0\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\u4e86\u3002</p> <pre><code>lr = 0.1\n\ndef updater(batch_size):\n    return d2l.sgd([W, b], lr, batch_size)\nnum_epochs = 10\ntrain_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, updater)\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/softmax.html#softmax_3","title":"softmax\u7b80\u6d01\u5b9e\u73b0","text":"<ol> <li>\u8fd9\u91cc\u7684net\u76f8\u5f53\u4e8e\u662f\u4e24\u5c42\u64cd\u4f5c\uff0c\u7b2c\u4e00\u5c42\u662f\u8c03\u6574tensor\u7684\u5f62\u72b6\u3002<code>nn.Flatten()</code> \u662f PyTorch \u4e2d\u7528\u4e8e\u5c06\u591a\u7ef4\u7684\u8f93\u5165\u5f20\u91cf\u5c55\u5e73\u6210\u4e00\u7ef4\u5f20\u91cf\u7684\u5c42\uff0c\u5f62\u72b6\u4e3a <code>(batch_size, 28, 28)</code>\uff0c<code>nn.Flatten()</code> \u4f1a\u5c06\u6bcf\u4e2a\u6837\u672c\u5c55\u5e73\u4e3a\u4e00\u7ef4\uff0c\u53d8\u6210 <code>(batch_size, 784)</code>\uff0828\u00d728 = 784\uff09\u3002\u8fd9\u6837\u5904\u7406\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u5c55\u5e73\u540e\u7684\u5f20\u91cf\u8f93\u5165\u5230\u7ebf\u6027\u5c42 <code>nn.Linear(784, 10)</code>\uff0c\u8fdb\u884c\u5206\u7c7b\u7b49\u64cd\u4f5c\u3002\u800c\u7b2c\u4e8c\u5c42\u5c31\u662f784\u7ef4\u8f93\u5165\uff0c\u8f93\u51fa10\u7ef4\u7684\u5f20\u91cf\u3002</li> <li>softmax\u51fd\u6570\\(\\hat y_j = \\frac{\\exp(o_j)}{\\sum_k \\exp(o_k)}\\)\uff0c\u5176\u4e2d\\(\\hat y_j\\)\u662f\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03\u3002\\(o_j\\)\u662f\u672a\u89c4\u8303\u5316\u7684\u9884\u6d4b\\(\\mathbf{o}\\)\u7684\u7b2c\\(j\\)\u4e2a\u5143\u7d20\u3002\u5982\u679c\\(o_k\\)\u4e2d\u7684\u4e00\u4e9b\u6570\u503c\u975e\u5e38\u5927\uff0c\u90a3\u4e48\\(\\exp(o_k)\\)\u53ef\u80fd\u5927\u4e8e\u6570\u636e\u7c7b\u578b\u5bb9\u8bb8\u7684\u6700\u5927\u6570\u5b57\uff0c\u5373\u4e0a\u6ea2\uff08overflow\uff09\u3002\u8fd9\u5c06\u4f7f\u5206\u6bcd\u6216\u5206\u5b50\u53d8\u4e3a<code>inf</code>\uff08\u65e0\u7a77\u5927\uff09\uff0c\u6700\u540e\u5f97\u5230\u7684\u662f0\u3001<code>inf</code>\u6216<code>nan</code>\uff08\u4e0d\u662f\u6570\u5b57\uff09\u7684\\(\\hat y_j\\)\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u6280\u5de7\u662f\uff1a\u5728\u7ee7\u7eedsoftmax\u8ba1\u7b97\u4e4b\u524d\uff0c\u5148\u4ece\u6240\u6709\\(o_k\\)\u4e2d\u51cf\u53bb\\(\\max(o_k)\\)\u3002\u8fd9\u770b\u8d77\u6765\u6ca1\u5565\u7279\u522b\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e00\u6b65\u4e0d\u4f1a\u6539\u53d8 softmax \u7684\u8f93\u51fa\uff01\u56e0\u4e3a\u6307\u6570\u51fd\u6570\u53ea\u662f\u76f8\u5bf9\u5927\u5c0f\u7684\u6bd4\u8f83\uff0c\u51cf\u53bb\u4e00\u4e2a\u5e38\u6570\u540e\uff0c\u6bd4\u4f8b\u4e0d\u53d8\u3002\u901a\u8fc7\u8fd9\u4e00\u6b65\uff0c\u4f60\u53ef\u4ee5\u907f\u514d exponentiation \u5bfc\u81f4\u7684\u6570\u503c\u8fc7\u5927\uff0c\u4ece\u800c\u907f\u514d\u4e0a\u6ea2\u95ee\u9898\u3002</li> </ol> \\[ \\begin{aligned} \\hat y_j &amp; =  \\frac{\\exp(o_j - \\max(o_k))\\exp(\\max(o_k))}{\\sum_k \\exp(o_k - \\max(o_k))\\exp(\\max(o_k))} \\\\ &amp; = \\frac{\\exp(o_j - \\max(o_k))}{\\sum_k \\exp(o_k - \\max(o_k))}. \\end{aligned} \\] <ol> <li>\u5728\u51cf\u6cd5\u548c\u89c4\u8303\u5316\u6b65\u9aa4\u4e4b\u540e\uff0c\u53ef\u80fd\u6709\u4e9b\\(o_j - \\max(o_k)\\)\u5177\u6709\u8f83\u5927\u7684\u8d1f\u503c\u3002\u7531\u4e8e\u7cbe\u5ea6\u53d7\u9650\uff0c\\(\\exp(o_j - \\max(o_k))\\)\u5c06\u6709\u63a5\u8fd1\u96f6\u7684\u503c\uff0c\u5373\u4e0b\u6ea2\uff08underflow\uff09\u3002\u8fd9\u4e9b\u503c\u53ef\u80fd\u4f1a\u56db\u820d\u4e94\u5165\u4e3a\u96f6\uff0c\u4f7f\\(\\hat y_j\\)\u4e3a\u96f6\uff0c\u5e76\u4e14\u4f7f\u5f97\\(\\log(\\hat y_j)\\)\u7684\u503c\u4e3a<code>-inf</code>\u3002\u53cd\u5411\u4f20\u64ad\u51e0\u6b65\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u53d1\u73b0\u81ea\u5df1\u9762\u5bf9\u4e00\u5c4f\u5e55\u53ef\u6015\u7684<code>nan</code>\u7ed3\u679c\u3002\u4e3a\u4e86\u907f\u514d\u4e0a\u6ea2\u548c\u4e0b\u6ea2\u5e26\u6765\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed3\u5408 softmax \u548c\u4ea4\u53c9\u71b5\uff0c\u76f4\u63a5\u5bf9\u672a\u89c4\u8303\u5316\u7684\u8f93\u51fa <code>o_j</code> \u8fdb\u884c\u5904\u7406\uff0c\u800c\u4e0d\u662f\u5148\u8ba1\u7b97 softmax \u518d\u53d6\u5bf9\u6570\u3002\u901a\u8fc7\u8fd9\u4e2a\u6280\u5de7\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8ba1\u7b97\u4ea4\u53c9\u71b5\u65f6\u8df3\u8fc7\u5bf9 <code>exp</code> \u51fd\u6570\u7684\u4f7f\u7528\uff0c\u907f\u514d\u6f5c\u5728\u7684\u6570\u503c\u7a33\u5b9a\u6027\u95ee\u9898\u3002\u516c\u5f0f\u5982\u4e0b\uff1a</li> </ol> \\[ \\begin{aligned} \\log{(\\hat y_j)} &amp; = \\log\\left( \\frac{\\exp(o_j - \\max(o_k))}{\\sum_k \\exp(o_k - \\max(o_k))}\\right) \\\\ &amp; = \\log{(\\exp(o_j - \\max(o_k)))}-\\log{\\left( \\sum_k \\exp(o_k - \\max(o_k)) \\right)} \\\\ &amp; = o_j - \\max(o_k) -\\log{\\left( \\sum_k \\exp(o_k - \\max(o_k)) \\right)}. \\end{aligned} \\] <ol> <li>CrossEntropyLoss\u516c\u5f0f\u5982\u4e0b\uff1a</li> </ol> \\[ L_i = -\\log\\left(\\frac{\\exp(o_{i, y_i})}{\\sum_{j=1}^{C} \\exp(o_{i, j})}\\right) = -o_{i, y_i} + \\log\\left(\\sum_{j=1}^{C} \\exp(o_{i, j})\\right) \\] <ol> <li><code>reduction = 'none'</code>\uff0c\u5219\u8fd4\u56de\u6bcf\u4e2a\u6837\u672c\u7684\u635f\u5931\uff1b<code>'mean'</code>\u8fd4\u56de\u7684\u662f\u6574\u4f53\u635f\u5931\u5e73\u5747\uff1b<code>'sum'</code>\u8fd4\u56de\u7684\u662f\u6574\u4f53\u635f\u5931\u3002\u6362\u800c\u8a00\u4e4b\uff0cnone\u8fd4\u56de\u7684\u5f20\u91cf\u7684\u5f62\u72b6\u662f<code>torch.Tensor(batch_size, )</code>\u56e0\u4e3a\u6709batch_size\u4e2a\u6837\u672c\uff0c\u6bcf\u4e00\u4e2a\u6837\u672c\u6709\u4e00\u4e2a\u635f\u5931\u503c\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u65b9\u4fbf\u6211\u4eec\u5bf9\u8fd9\u4e9bLoss\u505a\u4e00\u4e9btorch API\u4e2d\u6ca1\u6709\u8bbe\u8ba1\u7684\u64cd\u4f5c\u3002</li> </ol> <pre><code>import torch\nfrom torch import nn\nfrom d2l import torch as d2l\nbatch_size = 256\ntrain_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)\n\n# PyTorch\u4e0d\u4f1a\u9690\u5f0f\u5730\u8c03\u6574\u8f93\u5165\u7684\u5f62\u72b6\u3002\u56e0\u6b64\uff0c\n# \u6211\u4eec\u5728\u7ebf\u6027\u5c42\u524d\u5b9a\u4e49\u4e86\u5c55\u5e73\u5c42\uff08flatten\uff09\uff0c\u6765\u8c03\u6574\u7f51\u7edc\u8f93\u5165\u7684\u5f62\u72b6\nnet = nn.Sequential(nn.Flatten(), nn.Linear(784, 10))\n\ndef init_weights(m):\n    if type(m) == nn.Linear:\n        nn.init.normal_(m.weight, std=0.01)\n\nnet.apply(init_weights)\nloss = nn.CrossEntropyLoss(reduction='none')\n# \u53c2\u6570\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u90fd\u662ftorch.optim\u4e2d\u7684\u4e00\u4e9b\u7c7b\u6765\u8fdb\u884c\u7ba1\u7406\uff01\ntrainer = torch.optim.SGD(net.parameters(), lr=0.1)\nnum_epochs = 10\nd2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html","title":"\u7ebf\u6027\u56de\u5f52","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#_2","title":"\u7ebf\u6027\u56de\u5f52","text":"<p>\u56de\u5f52\uff08regression\uff09\u662f\u80fd\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\u4e4b\u95f4\u5173\u7cfb\u5efa\u6a21\u7684\u4e00\u7c7b\u65b9\u6cd5\u3002\u5728\u6211\u4eec\u5f00\u59cb\u8003\u8651\u5982\u4f55\u7528\u6a21\u578b\u62df\u5408\uff08fit\uff09\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u4e00\u4e2a\u62df\u5408\u7a0b\u5ea6\u7684\u5ea6\u91cf\u3002\u635f\u5931\u51fd\u6570\uff08loss function\uff09\u80fd\u591f\u91cf\u5316\u76ee\u6807\u7684\u5b9e\u9645\u503c\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002\u901a\u5e38\u6211\u4eec\u4f1a\u9009\u62e9\u975e\u8d1f\u6570\u4f5c\u4e3a\u635f\u5931\uff0c\u4e14\u6570\u503c\u8d8a\u5c0f\u8868\u793a\u635f\u5931\u8d8a\u5c0f\uff0c\u5b8c\u7f8e\u9884\u6d4b\u65f6\u7684\u635f\u5931\u4e3a0\u3002\u56de\u5f52\u95ee\u9898\u4e2d\u6700\u5e38\u7528\u7684\u635f\u5931\u51fd\u6570\u662f\u5e73\u65b9\u8bef\u5dee\u51fd\u6570\u3002</p> <p>\u5f53\u6837\u672c\\(i\\)\u7684\u9884\u6d4b\u503c\u4e3a\\(\\hat{y}^{(i)}\\)\uff0c\u5176\u76f8\u5e94\u7684\u771f\u5b9e\u6807\u7b7e\u4e3a\\(y^{(i)}\\)\u65f6\uff0c\u5e73\u65b9\u8bef\u5dee\u53ef\u4ee5\u5b9a\u4e49\uff1a\\(l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left(\\hat{y}^{(i)} - y^{(i)}\\right)^2.\\)</p> <p>\u7531\u4e8e\u5e73\u65b9\u8bef\u5dee\u51fd\u6570\u4e2d\u7684\u4e8c\u6b21\u65b9\u9879\uff0c\u4f30\u8ba1\u503c\\(\\hat{y}^{(i)}\\)\u548c\u89c2\u6d4b\u503c\\(y^{(i)}\\)\u4e4b\u95f4\u8f83\u5927\u7684\u5dee\u5f02\u5c06\u5bfc\u81f4\u66f4\u5927\u7684\u635f\u5931\u3002\u4e3a\u4e86\u5ea6\u91cf\u6a21\u578b\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e0a\u7684\u8d28\u91cf\uff0c\u6211\u4eec\u9700\u8ba1\u7b97\u5728\u8bad\u7ec3\u96c6\\(n\\)\u4e2a\u6837\u672c\u4e0a\u7684\u635f\u5931\u5747\u503c\uff08\u4e5f\u7b49\u4ef7\u4e8e\u6c42\u548c\uff09\u3002  \u5728\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5bfb\u627e\u4e00\u7ec4\u53c2\u6570\uff08\\(\\mathbf{w}^*, b^*\\)\uff09\uff0c\u8fd9\u7ec4\u53c2\u6570\u80fd\u6700\u5c0f\u5316\u5728\u6240\u6709\u8bad\u7ec3\u6837\u672c\u4e0a\u7684\u603b\u635f\u5931\u3002\u5982\u4e0b\u5f0f\uff1a  \u90a3\u4e48\\(L(\\mathbf{w}, b)\\)\u5c31\u662f\u4e00\u4e2a\u5173\u4e8e\\(\\mathbf{w}, b\\)\u8fd9\u4e24\u4e2a\u77e9\u9635\u7684\u51fd\u6570, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u6c42\u5bfc, \u6c42\u51fa\u7684\u5bfc\u6570\u5c06\u7528\u4e8e\u66f4\u884c\u4e24\u4e2a\u53c2\u6570. </p> <p>\u6211\u4eec\u7528\u5230\u4e00\u79cd\u540d\u4e3a\u68af\u5ea6\u4e0b\u964d\uff08gradient descent\uff09\u7684\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u51e0\u4e4e\u53ef\u4ee5\u4f18\u5316\u6240\u6709\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u3002\u5b83\u901a\u8fc7\u4e0d\u65ad\u5730\u5728\u635f\u5931\u51fd\u6570\u9012\u51cf\u7684\u65b9\u5411\u4e0a\u66f4\u65b0\u53c2\u6570\u6765\u964d\u4f4e\u8bef\u5dee\u3002\u4f46\u5b9e\u9645\u4e2d\u7684\u6267\u884c\u53ef\u80fd\u4f1a\u975e\u5e38\u6162\uff1a\u56e0\u4e3a\u5728\u6bcf\u4e00\u6b21\u66f4\u65b0\u53c2\u6570\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u5728\u6bcf\u6b21\u9700\u8981\u8ba1\u7b97\u66f4\u65b0\u7684\u65f6\u5019\u968f\u673a\u62bd\u53d6\u4e00\u5c0f\u6279\u6837\u672c\uff0c\u8fd9\u79cd\u53d8\u4f53\u53eb\u505a\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08minibatch stochastic gradient descent\uff09\u3002</p> <p>\u600e\u4e48\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u8bdd? \u6c42\u51fa\u5bfc\u6570\u5728\u67d0\u4e2a\u786e\u5207\u503c\u7684\u77e9\u9635\u5904\u7684\u6570\u503c\u77e9\u9635\u6bd5\u7adf\u8fd8\u662f\u9700\u8981\u4ee3\u5165\u6570\u636e\u96c6\u7684\u6570\u636e\u7684. \u4e0e\u5176\u66f4\u65b0\u4e00\u6b21w, b\u77e9\u9635\u9700\u8981\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6, \u4e0d\u5982\u76f4\u63a5\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d, \u4e00\u5c0f\u90e8\u5206\u6570\u636e\u5c31\u80fd\u66f4\u65b0\u4e00\u6b21\u53c2\u6570, \u6548\u7387\u5c31\u9ad8\u591a\u4e86! \u6548\u7387\u9ad8\u5c31\u662f\u8282\u7701\u8ba1\u7b97\u8d44\u6e90!</p> <p>\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u968f\u673a\u62bd\u6837\u4e00\u4e2a\u5c0f\u6279\u91cf\\(\\mathcal{B}\\)\uff0c\u5b83\u662f\u7531\u56fa\u5b9a\u6570\u91cf\u7684\u8bad\u7ec3\u6837\u672c\u7ec4\u6210\u7684\u3002\u7136\u540e\uff0c\u6211\u4eec\u8ba1\u7b97\u5c0f\u6279\u91cf\u7684\u5e73\u5747\u635f\u5931\u5173\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u5bfc\u6570\uff08\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u68af\u5ea6\uff09\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u68af\u5ea6\u4e58\u4ee5\u4e00\u4e2a\u9884\u5148\u786e\u5b9a\u7684\u6b63\u6570\\(\\eta\\)\uff0c\u5e76\u4ece\u5f53\u524d\u53c2\u6570\u7684\u503c\u4e2d\u51cf\u6389\u3002\u6211\u4eec\u7528\u4e0b\u9762\u7684\u6570\u5b66\u516c\u5f0f\u6765\u8868\u793a\u8fd9\u4e00\u66f4\u65b0\u8fc7\u7a0b\uff08\\(\\partial\\)\u8868\u793a\u504f\u5bfc\u6570\uff09\uff1a  \u603b\u7ed3\u4e00\u4e0b\uff0c\u7b97\u6cd5\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>\uff081\uff09\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570\u7684\u503c\uff0c\u5982\u968f\u673a\u521d\u59cb\u5316\uff1b</p> <p>\uff082\uff09\u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u62bd\u53d6\u5c0f\u6279\u91cf\u6837\u672c\u4e14\u5728\u8d1f\u68af\u5ea6\u7684\u65b9\u5411\u4e0a\u66f4\u65b0\u53c2\u6570\uff0c\u5e76\u4e0d\u65ad\u8fed\u4ee3\u8fd9\u4e00\u6b65\u9aa4\u3002</p> <p>\u5bf9\u4e8e\u5e73\u65b9\u635f\u5931\u548c\u4eff\u5c04\u53d8\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u660e\u786e\u5730\u5199\u6210\u5982\u4e0b\u5f62\u5f0f:  \u7ebf\u6027\u56de\u5f52\u6070\u597d\u662f\u4e00\u4e2a\u5728\u6574\u4e2a\u57df\u4e2d\u53ea\u6709\u4e00\u4e2a\u6700\u5c0f\u503c\u7684\u5b66\u4e60\u95ee\u9898\u3002\u4f46\u662f\u5bf9\u50cf\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u8fd9\u6837\u590d\u6742\u7684\u6a21\u578b\u6765\u8bf4\uff0c\u635f\u5931\u5e73\u9762\u4e0a\u901a\u5e38\u5305\u542b\u591a\u4e2a\u6700\u5c0f\u503c\u3002\u6df1\u5ea6\u5b66\u4e60\u5b9e\u8df5\u8005\u5f88\u5c11\u4f1a\u53bb\u82b1\u8d39\u5927\u529b\u6c14\u5bfb\u627e\u8fd9\u6837\u4e00\u7ec4\u53c2\u6570\uff0c\u4f7f\u5f97\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u635f\u5931\u8fbe\u5230\u6700\u5c0f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u66f4\u96be\u505a\u5230\u7684\u662f\u627e\u5230\u4e00\u7ec4\u53c2\u6570\uff0c\u8fd9\u7ec4\u53c2\u6570\u80fd\u591f\u5728\u6211\u4eec\u4ece\u672a\u89c1\u8fc7\u7684\u6570\u636e\u4e0a\u5b9e\u73b0\u8f83\u4f4e\u7684\u635f\u5931\uff0c\u8fd9\u4e00\u6311\u6218\u88ab\u79f0\u4e3a\u6cdb\u5316\uff08generalization\uff09\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#_3","title":"\u6b63\u592a\u5206\u5e03\u4e0e\u5e73\u65b9\u635f\u5931","text":"<p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u566a\u58f0\u5206\u5e03\u7684\u5047\u8bbe\u6765\u89e3\u8bfb\u5e73\u65b9\u635f\u5931\u76ee\u6807\u51fd\u6570\u3002\u6b63\u6001\u5206\u5e03\u548c\u7ebf\u6027\u56de\u5f52\u4e4b\u95f4\u7684\u5173\u7cfb\u5f88\u5bc6\u5207\u3002\u6b63\u6001\u5206\u5e03\uff08normal distribution\uff09\uff0c\u4e5f\u79f0\u4e3a\u9ad8\u65af\u5206\u5e03\uff08Gaussian distribution\uff09\uff0c\u7b80\u5355\u7684\u8bf4\uff0c\u82e5\u968f\u673a\u53d8\u91cf\\(x\\)\u5177\u6709\u5747\u503c\\(\\mu\\)\u548c\u65b9\u5dee\\(\\sigma^2\\)\uff08\u6807\u51c6\u5dee\\(\\sigma\\)\uff09\uff0c\u5176\u6b63\u6001\u5206\u5e03\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5982\u4e0b\uff1a  \u5747\u65b9\u8bef\u5dee\u635f\u5931\u51fd\u6570\uff08\u7b80\u79f0\u5747\u65b9\u635f\u5931\uff09\u53ef\u4ee5\u7528\u4e8e\u7ebf\u6027\u56de\u5f52\u7684\u4e00\u4e2a\u539f\u56e0\u662f\uff1a\u6211\u4eec\u5047\u8bbe\u4e86\u89c2\u6d4b\u4e2d\u5305\u542b\u566a\u58f0\uff0c\u5176\u4e2d\u566a\u58f0\u670d\u4ece\u6b63\u6001\u5206\u5e03\u3002\u566a\u58f0\u6b63\u6001\u5206\u5e03:\\(\\(y = \\mathbf{w}^\\top \\mathbf{x} + b + \\epsilon,\\)\\) \u5176\u4e2d\uff0c\\(\\epsilon \\sim \\mathcal{N}(0, \\sigma^2)\\)\u3002\u56e0\u6b64, y\u4e5f\u662f\u6b63\u6001\u5206\u5e03\u7684\u968f\u673a\u53d8\u91cf, \u5206\u5e03\u53ef\u4ee5\u5199\u6210\\(y\u223cN(w\u22a4x+b,\u03c3^2)\\)</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5199\u51fa\u901a\u8fc7\u7ed9\u5b9a\u7684\\(\\mathbf{x}\\)\u89c2\u6d4b\u5230\u7279\u5b9a\\(y\\)\u7684\u4f3c\u7136\uff08likelihood\uff09\uff1a  \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u63cf\u8ff0\u4e86\u5728\u7ed9\u5b9a\u8f93\u5165 \\(\\mathbf{x}\\)\u7684\u6761\u4ef6\u4e0b\uff0c\u89c2\u6d4b\u5230\u8f93\u51fay\u7684\u6982\u7387\u5206\u5e03\u3002</p> <p>\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u6cd5\uff08Maximum Likelihood Estimation, \u7b80\u79f0 MLE\uff09\u662f\u4e00\u79cd\u4f30\u8ba1\u6a21\u578b\u53c2\u6570\u7684\u7edf\u8ba1\u65b9\u6cd5\u3002\u5b83\u7684\u76ee\u6807\u662f\u627e\u5230\u4f7f\u89c2\u6d4b\u6570\u636e\u5728\u67d0\u4e00\u5047\u8bbe\u7684\u6982\u7387\u6a21\u578b\u4e0b\u51fa\u73b0\u7684\u6982\u7387\uff08\u5373\u4f3c\u7136\uff09\u6700\u5927\u7684\u53c2\u6570\u503c\u3002\u5728\u7ed9\u5b9a\u4e00\u7ec4\u89c2\u6d4b\u6570\u636e\u548c\u4e00\u4e2a\u53c2\u6570\u5316\u7684\u7edf\u8ba1\u6a21\u578b\u7684\u524d\u63d0\u4e0b\uff0c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u6cd5\u901a\u8fc7\u6700\u5927\u5316\u89c2\u6d4b\u6570\u636e\u5728\u8be5\u6a21\u578b\u4e2d\u7684\u4f3c\u7136\u51fd\u6570\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7b26\u5408\u6570\u636e\u7684\u6a21\u578b\u53c2\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u6cd5\u627e\u5230\u7684\u662f\u90a3\u4e9b\u4f7f\u5f97\u89c2\u6d4b\u6570\u636e\u6700\u6709\u53ef\u80fd\u53d1\u751f\u7684\u53c2\u6570\u503c\u3002</p> <p>\u73b0\u5728\uff0c\u6839\u636e\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u6cd5\uff0c\u53c2\u6570\\(\\mathbf{w}\\)\u548c\\(b\\)\u7684\u6700\u4f18\u503c\u662f\u4f7f\u6574\u4e2a\u6570\u636e\u96c6\u7684\u4f3c\u7136\u6700\u5927\u7684\u503c(\u7531\u4e8e\u6837\u672c\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\uff08\u72ec\u7acb\u540c\u5206\u5e03\u5047\u8bbe\uff0ci.i.d.\uff09\uff0c\u6574\u4e2a\u6570\u636e\u96c6 \\(\\mathbf{y}\\) \u5728\u7ed9\u5b9a\u8f93\u5165 \\(\\mathbf{X}\\) \u4e0b\u7684\u8054\u5408\u6982\u7387\u5c31\u662f\u6bcf\u4e2a\u6837\u672c\u6761\u4ef6\u6982\u7387\u7684\u4e58\u79ef)\uff1a  \u867d\u7136\u4f7f\u8bb8\u591a\u6307\u6570\u51fd\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u770b\u8d77\u6765\u5f88\u56f0\u96be\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u76ee\u6807\u7684\u524d\u63d0\u4e0b\uff0c\u901a\u8fc7\u6700\u5927\u5316\u4f3c\u7136\u5bf9\u6570\u6765\u7b80\u5316\u3002\u6211\u4eec\u53ef\u4ee5\u6539\u4e3a\u6700\u5c0f\u5316\u8d1f\u5bf9\u6570\u4f3c\u7136\\(-\\log P(\\mathbf y \\mid \\mathbf X)\\)\u3002\u7531\u6b64\u53ef\u4ee5\u5f97\u5230\u7684\u6570\u5b66\u516c\u5f0f\u662f\uff1a  \u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u5047\u8bbe\\(\\sigma\\)\u662f\u67d0\u4e2a\u56fa\u5b9a\u5e38\u6570\u5c31\u53ef\u4ee5\u5ffd\u7565\u7b2c\u4e00\u9879\uff0c\u56e0\u4e3a\u7b2c\u4e00\u9879\u4e0d\u4f9d\u8d56\u4e8e\\(\\mathbf{w}\\)\u548c\\(b\\)\u3002\u73b0\u5728\u7b2c\u4e8c\u9879\u9664\u4e86\u5e38\u6570\\(\\frac{1}{\\sigma^2}\\)\u5916\uff0c\u5176\u4f59\u90e8\u5206\u548c\u524d\u9762\u4ecb\u7ecd\u7684\u5747\u65b9\u8bef\u5dee\u662f\u4e00\u6837\u7684\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4e0a\u9762\u5f0f\u5b50\u7684\u89e3\u5e76\u4e0d\u4f9d\u8d56\u4e8e\\(\\sigma\\)\u3002\u56e0\u6b64\uff0c\u5728\u9ad8\u65af\u566a\u58f0\u7684\u5047\u8bbe\u4e0b\uff0c\u6700\u5c0f\u5316\u5747\u65b9\u8bef\u5dee\u7b49\u4ef7\u4e8e\u5bf9\u7ebf\u6027\u6a21\u578b\u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u3002</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#_4","title":"\u4ece\u96f6\u5f00\u59cb\u7684\u7ebf\u6027\u56de\u5f52","text":"<p>\u5728\u8fd9\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u53ea\u4f7f\u7528\u5f20\u91cf\u548c\u81ea\u52a8\u6c42\u5bfc\u3002\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06[\u6839\u636e\u5e26\u6709\u566a\u58f0\u7684\u7ebf\u6027\u6a21\u578b\u6784\u9020\u4e00\u4e2a\u4eba\u9020\u6570\u636e\u96c6\u3002]\u6211\u4eec\u7684\u4efb\u52a1\u662f\u4f7f\u7528\u8fd9\u4e2a\u6709\u9650\u6837\u672c\u7684\u6570\u636e\u96c6\u6765\u6062\u590d\u8fd9\u4e2a\u6a21\u578b\u7684\u53c2\u6570\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u4f4e\u7ef4\u6570\u636e\uff0c\u8fd9\u6837\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c06\u5176\u53ef\u89c6\u5316\u3002\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u5305\u542b1000\u4e2a\u6837\u672c\u7684\u6570\u636e\u96c6\uff0c\u6bcf\u4e2a\u6837\u672c\u5305\u542b\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\u4e2d\u91c7\u6837\u76842\u4e2a\u7279\u5f81\u3002\u6211\u4eec\u7684\u5408\u6210\u6570\u636e\u96c6\u662f\u4e00\u4e2a\u77e9\u9635\\(\\mathbf{X}\\in \\mathbb{R}^{1000 \\times 2}\\)\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u7ebf\u6027\u6a21\u578b\u53c2\u6570\\(\\mathbf{w} = [2, -3.4]^\\top\\)\u3001\\(b = 4.2\\)\u548c\u566a\u58f0\u9879\\(\\epsilon\\)\u751f\u6210\u6570\u636e\u96c6\u53ca\u5176\u6807\u7b7e:\\(\\mathbf{y}= \\mathbf{X} \\mathbf{w} + b + \\mathbf\\epsilon.\\)</p> <pre><code>def synthetic_data(w, b, num_examples): \n    X = torch.normal(0, 1, (num_examples, len(w)))\n    y = torch.matmul(X, w) + b\n    y += torch.normal(0, 0.01, y.shape)\n    return X, y.reshape((-1, 1))\ntrue_w = torch.tensor([2, -3.4])\ntrue_b = 4.2\nfeatures, labels = synthetic_data(true_w, true_b, 1000)\nprint(features.shape, labels.shape)\n# torch.Size([1000, 2]) torch.Size([1000, 1])\n</code></pre> <p>\u6ce8\u610f\uff0c[<code>features</code>\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u4e00\u4e2a\u4e8c\u7ef4\u6570\u636e\u6837\u672c\uff0clabels\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u4e00\u7ef4\u6807\u7b7e\u503c\uff08\u4e00\u4e2a\u6807\u91cf]\u3002\u6570\u636e\u5df2\u7ecf\u521b\u5efa\u597d\u4e86, \u63a5\u4e0b\u6765\u8bfb\u53d6\u7684\u5c31\u662f\u6570\u636e\u96c6\u4e86:</p> <p>\u8bad\u7ec3\u6a21\u578b\u65f6\u8981\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u904d\u5386\uff0c\u6bcf\u6b21\u62bd\u53d6\u4e00\u5c0f\u6279\u91cf\u6837\u672c\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u6765\u66f4\u65b0\u6211\u4eec\u7684\u6a21\u578b\u3002\u7531\u4e8e\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u8bad\u7ec3\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u57fa\u7840\uff0c\u6240\u4ee5\u6709\u5fc5\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u80fd\u6253\u4e71\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u5e76\u4ee5\u5c0f\u6279\u91cf\u65b9\u5f0f\u83b7\u53d6\u6570\u636e\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a<code>data_iter</code>\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u6279\u91cf\u5927\u5c0f\u3001\u7279\u5f81\u77e9\u9635\u548c\u6807\u7b7e\u5411\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u751f\u6210\u5927\u5c0f\u4e3a<code>batch_size</code>\u7684\u5c0f\u6279\u91cf\u3002\u6bcf\u4e2a\u5c0f\u6279\u91cf\u5305\u542b\u4e00\u7ec4\u7279\u5f81\u548c\u6807\u7b7e\u3002</p> <pre><code>def data_iter(batch_size, features, labels):\n    num_examples = len(features)\n    indices = list(range(num_examples))\n    # \u8fd9\u4e9b\u6837\u672c\u662f\u968f\u673a\u8bfb\u53d6\u7684\uff0c\u6ca1\u6709\u7279\u5b9a\u7684\u987a\u5e8f\n    random.shuffle(indices)\n    for i in range(0, num_examples, batch_size):\n        # \u5f20\u91cf\u7d22\u5f15\uff08tensor indexing\uff09\n        batch_indices = torch.tensor(\n            indices[i: min(i + batch_size, num_examples)])\n        yield features[batch_indices], labels[batch_indices]\n</code></pre> <p>\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c<code>yield</code> \u662f Python \u4e2d\u751f\u6210\u5668\u51fd\u6570\u7684\u5173\u952e\u5b57\u4e4b\u4e00\u3002\u4e0e\u666e\u901a\u7684 <code>return</code> \u4e0d\u540c\uff0c<code>yield</code> \u4e0d\u4f1a\u7acb\u5373\u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\uff0c\u800c\u662f\u4f1a\u6682\u505c\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u5f53\u518d\u6b21\u8c03\u7528\u8fd9\u4e2a\u751f\u6210\u5668\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u4f1a\u4ece\u4e0a\u6b21\u6682\u505c\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4ece\u5747\u503c\u4e3a0\u3001\u6807\u51c6\u5dee\u4e3a0.01\u7684\u6b63\u6001\u5206\u5e03\u4e2d\u91c7\u6837\u968f\u673a\u6570\u6765\u521d\u59cb\u5316\u6743\u91cd\uff0c\u5e76\u5c06\u504f\u7f6e\u521d\u59cb\u5316\u4e3a0\u3002</p> <pre><code>w = torch.normal(0, 0.01, size=(2,1), requires_grad=True)\nb = torch.zeros(1, requires_grad=True)\n</code></pre> <p>\u5728\u521d\u59cb\u5316\u53c2\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u662f\u66f4\u65b0\u8fd9\u4e9b\u53c2\u6570\uff0c\u76f4\u5230\u8fd9\u4e9b\u53c2\u6570\u8db3\u591f\u62df\u5408\u6211\u4eec\u7684\u6570\u636e\u3002\u6bcf\u6b21\u66f4\u65b0\u90fd\u9700\u8981\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\u3002\u6709\u4e86\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5411\u51cf\u5c0f\u635f\u5931\u7684\u65b9\u5411\u66f4\u65b0\u6bcf\u4e2a\u53c2\u6570\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5fc5\u987b[\u5b9a\u4e49\u6a21\u578b\uff0c\u5c06\u6a21\u578b\u7684\u8f93\u5165\u548c\u53c2\u6570\u540c\u6a21\u578b\u7684\u8f93\u51fa\u5173\u8054\u8d77\u6765\u3002]</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u8981\u8ba1\u7b97\u7ebf\u6027\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ea\u9700\u8ba1\u7b97\u8f93\u5165\u7279\u5f81\\(\\mathbf{X}\\)\u548c\u6a21\u578b\u6743\u91cd\\(\\mathbf{w}\\)\u7684\u77e9\u9635-\u5411\u91cf\u4e58\u6cd5\u540e\u52a0\u4e0a\u504f\u7f6e\\(b\\)\u3002\u6ce8\u610f\uff0c\u4e0a\u9762\u7684\\(\\mathbf{Xw}\\)\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u800c\\(b\\)\u662f\u4e00\u4e2a\u6807\u91cf\u3002\u800c\u5f53\u6211\u4eec\u7528\u4e00\u4e2a\u5411\u91cf\u52a0\u4e00\u4e2a\u6807\u91cf\u65f6\uff0c\u6807\u91cf\u4f1a\u88ab\u52a0\u5230\u5411\u91cf\u7684\u6bcf\u4e2a\u5206\u91cf\u4e0a\u3002\u56e0\u4e3a\u9700\u8981\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7684\u68af\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5148\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5e73\u65b9\u635f\u5931\u51fd\u6570(MSELoss)\u3002</p> <pre><code>def linreg(X, w, b): \n    \"\"\"\u7ebf\u6027\u56de\u5f52\u6a21\u578b\"\"\"\n    return torch.matmul(X, w) + b\ndef squared_loss(y_hat, y):  \n    \"\"\"\u5747\u65b9\u635f\u5931\"\"\"\n    return (y_hat - y.reshape(y_hat.shape)) ** 2 / 2\n</code></pre> <p>\u7ebf\u6027\u56de\u5f52\u6709\u89e3\u6790\u89e3\u3002\u5c3d\u7ba1\u7ebf\u6027\u56de\u5f52\u6709\u89e3\u6790\u89e3\uff0c\u4f46\u672c\u4e66\u4e2d\u7684\u5176\u4ed6\u6a21\u578b\u5374\u6ca1\u6709\u3002\u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u3002</p> <p>\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u4f7f\u7528\u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u62bd\u53d6\u7684\u4e00\u4e2a\u5c0f\u6279\u91cf\uff0c\u7136\u540e\u6839\u636e\u53c2\u6570\u8ba1\u7b97\u635f\u5931\u7684\u68af\u5ea6\u3002\u63a5\u4e0b\u6765\uff0c\u671d\u7740\u51cf\u5c11\u635f\u5931\u7684\u65b9\u5411\u66f4\u65b0\u6211\u4eec\u7684\u53c2\u6570\u3002\u4e0b\u9762\u7684\u51fd\u6570\u5b9e\u73b0\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u66f4\u65b0\u3002\u8be5\u51fd\u6570\u63a5\u53d7\u6a21\u578b\u53c2\u6570\u96c6\u5408\u3001\u5b66\u4e60\u901f\u7387\u548c\u6279\u91cf\u5927\u5c0f\u4f5c\u4e3a\u8f93\u5165\u3002\u6bcf\u4e00\u6b65\u66f4\u65b0\u7684\u5927\u5c0f\u7531\u5b66\u4e60\u901f\u7387<code>lr</code>\u51b3\u5b9a\u3002\u56e0\u4e3a\u6211\u4eec\u8ba1\u7b97\u7684\u635f\u5931\u662f\u4e00\u4e2a\u6279\u91cf\u6837\u672c\u7684\u603b\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u6279\u91cf\u5927\u5c0f\uff08<code>batch_size</code>\uff09\u6765\u89c4\u8303\u5316\u6b65\u957f\uff0c\u8fd9\u6837\u6b65\u957f\u5927\u5c0f\u5c31\u4e0d\u4f1a\u53d6\u51b3\u4e8e\u6211\u4eec\u5bf9\u6279\u91cf\u5927\u5c0f\u7684\u9009\u62e9\u3002</p> <pre><code>def sgd(params, lr, batch_size): \n    \"\"\"\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\"\"\"\n    # \u73b0\u5728\u60c5\u51b5\u662f\u5df2\u7ecfparams\u8ba1\u7b97\u8fc7\u4e00\u6b21\u68af\u5ea6\u4e86,\u7136\u540e\u9700\u8981\u66f4\u65b0\u5e76\u6e05\u7a7a\u50a8\u5b58\u7684\u68af\u5ea6\n    with torch.no_grad(): \n    # \u5728\u6a21\u578b\u63a8\u7406\uff08inference\uff09\u9636\u6bb5\u6216\u5728\u4e0d\u9700\u8981\u8ba1\u7b97\u68af\u5ea6\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    # \u4ee5\u8282\u7701\u5185\u5b58\u548c\u63d0\u9ad8\u8ba1\u7b97\u901f\u5ea6\n        for param in params: \n            param -= lr * param.grad / batch_size\n            param.grad.zero_() # \u6e05\u7a7a\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u6a21\u578b\u8bad\u7ec3\u6240\u6709\u9700\u8981\u7684\u8981\u7d20\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e3b\u8981\u7684[\u8bad\u7ec3\u8fc7\u7a0b]\u90e8\u5206\u4e86\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u4e00\u5c0f\u6279\u91cf\u8bad\u7ec3\u6837\u672c\uff0c\u5e76\u901a\u8fc7\u6211\u4eec\u7684\u6a21\u578b\u6765\u83b7\u5f97\u4e00\u7ec4\u9884\u6d4b\u3002\u8ba1\u7b97\u5b8c\u635f\u5931\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u53cd\u5411\u4f20\u64ad\uff0c\u5b58\u50a8\u6bcf\u4e2a\u53c2\u6570\u7684\u68af\u5ea6\u3002\u6700\u540e\uff0c\u6211\u4eec\u8c03\u7528\u4f18\u5316\u7b97\u6cd5<code>sgd</code>\u6765\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002</p> <p>\u5728\u6bcf\u4e2a\u8fed\u4ee3\u5468\u671f\uff08epoch\uff09\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528<code>data_iter</code>\u51fd\u6570\u904d\u5386\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u5e76\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u6240\u6709\u6837\u672c\u90fd\u4f7f\u7528\u4e00\u6b21\uff08\u5047\u8bbe\u6837\u672c\u6570\u80fd\u591f\u88ab\u6279\u91cf\u5927\u5c0f\u6574\u9664\uff09\u3002\u8fd9\u91cc\u7684\u8fed\u4ee3\u5468\u671f\u4e2a\u6570<code>num_epochs</code>\u548c\u5b66\u4e60\u7387<code>lr</code>\u90fd\u662f\u8d85\u53c2\u6570\uff0c\u5206\u522b\u8bbe\u4e3a3\u548c0.03\u3002\u8bbe\u7f6e\u8d85\u53c2\u6570\u5f88\u68d8\u624b\uff0c\u9700\u8981\u901a\u8fc7\u53cd\u590d\u8bd5\u9a8c\u8fdb\u884c\u8c03\u6574\u3002</p> <pre><code>lr = 0.03\nnum_epochs = 3\nnet = linreg\nloss = squared_loss\nfor epoch in range(num_epochs):\n    for X, y in data_iter(batch_size, features, labels):\n        l = loss(net(X, w, b), y)  # X\u548cy\u7684\u5c0f\u6279\u91cf\u635f\u5931\n        # \u56e0\u4e3al\u5f62\u72b6\u662f(batch_size,1)\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6807\u91cf\u3002l\u4e2d\u7684\u6240\u6709\u5143\u7d20\u88ab\u52a0\u5230\u4e00\u8d77\uff0c\n        # \u5e76\u4ee5\u6b64\u8ba1\u7b97\u5173\u4e8e[w,b]\u7684\u68af\u5ea6\n        l.sum().backward()\n        sgd([w, b], lr, batch_size)  # \u4f7f\u7528\u53c2\u6570\u7684\u68af\u5ea6\u66f4\u65b0\u53c2\u6570\n    with torch.no_grad():\n        train_l = loss(net(features, w, b), labels)\n        print(f'epoch {epoch + 1}, loss {float(train_l.mean()):f}')\nprint(f'w\u7684\u4f30\u8ba1\u8bef\u5dee: {true_w - w.reshape(true_w.shape)}')\nprint(f'b\u7684\u4f30\u8ba1\u8bef\u5dee: {true_b - b}')\n# w\u7684\u4f30\u8ba1\u8bef\u5dee: tensor([ 0.0004, -0.0011], grad_fn=&lt;SubBackward0&gt;)\n# b\u7684\u4f30\u8ba1\u8bef\u5dee: tensor([0.0013], grad_fn=&lt;RsubBackward1&gt;)\n</code></pre> <p>\u6211\u4eec\u53d1\u73b0\u62df\u5408\u51fa\u6765\u7684\u53c2\u6570\u548c\u539f\u6765\u7684\u5341\u5206\u63a5\u8fd1!</p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#_5","title":"\u7b80\u4ecb\u5b9e\u73b0","text":"<p>\u4f7f\u7528torch\u9ad8\u7ea7\u7684API\u5de5\u5177:</p> <ol> <li><code>*data_arrays</code> \u7684\u4f5c\u7528\u662f\u5c06 <code>data_arrays</code> \u4e2d\u7684\u6240\u6709\u5143\u7d20\u4f5c\u4e3a\u5355\u72ec\u7684\u53c2\u6570\u4f20\u9012\u7ed9 <code>data.TensorDataset</code> \u6784\u9020\u51fd\u6570. \u8fd9\u91cc\u4f7f\u7528*\u662f\u56e0\u4e3a\u6709\u4e24\u4e2a\u5bf9\u8c61: feature\u4e0elabels\u9700\u8981\u5236\u4f5citerator.</li> <li>\u5e03\u5c14\u503c<code>is_train</code>\u8868\u793a\u662f\u5426\u5e0c\u671b\u6570\u636e\u8fed\u4ee3\u5668\u5bf9\u8c61\u5728\u6bcf\u4e2a\u8fed\u4ee3\u5468\u671f\u5185\u6253\u4e71\u6570\u636e</li> <li>\u5728\u4f7f\u7528<code>net</code>\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570</li> <li>\u6b63\u5982\u6211\u4eec\u5728\u6784\u9020<code>nn.Linear</code>\u65f6\u6307\u5b9a\u8f93\u5165\u548c\u8f93\u51fa\u5c3a\u5bf8\u4e00\u6837\uff0c\u73b0\u5728\u6211\u4eec\u80fd\u76f4\u63a5\u8bbf\u95ee\u53c2\u6570\u4ee5\u8bbe\u5b9a\u5b83\u4eec\u7684\u521d\u59cb\u503c\u3002\u6211\u4eec\u901a\u8fc7<code>net[0]</code>\u9009\u62e9\u7f51\u7edc\u4e2d\u7684\u7b2c\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u4f7f\u7528<code>weight.data</code>\u548c<code>bias.data</code>\u65b9\u6cd5\u8bbf\u95ee\u53c2\u6570\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66ff\u6362\u65b9\u6cd5<code>normal_</code>\u548c<code>fill_</code>\u6765\u91cd\u5199\u53c2\u6570\u503c\u3002</li> <li>\u4e0d\u8bba\u8f93\u5165\u7684\u5f62\u72b6\u662f\u600e\u6837\uff0c<code>nn.MSELoss()</code> \u6700\u540e\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\uff0c\u56e0\u4e3a\u5b83\u5c06\u6240\u6709\u6837\u672c\u7684\u635f\u5931\u503c\u8fdb\u884c\u6c42\u5e73\u5747\uff08\u6216\u6c42\u548c\uff09\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u5355\u4e00\u7684\u635f\u5931\u503c\u3002\u8fd9\u79cd\u8bbe\u8ba1\u662f\u4e3a\u4e86\u4fbf\u4e8e\u4f18\u5316\u7b97\u6cd5\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u3002</li> </ol> <pre><code>import numpy as np\nimport torch\nfrom torch.utils import data\nfrom d2l import torch as d2l\nfrom torch import nn\n# \u624b\u6413\u6570\u636e\u96c6\ntrue_w = torch.tensor([2, -3.4])\ntrue_b = 4.2\nfeatures, labels = d2l.synthetic_data(true_w, true_b, 1000)\n\ndef load_array(data_arrays, batch_size, is_train=True): \n    \"\"\"\u6784\u9020\u4e00\u4e2aPyTorch\u6570\u636e\u8fed\u4ee3\u5668\"\"\"\n    dataset = data.TensorDataset(*data_arrays)\n    return data.DataLoader(dataset, batch_size, shuffle=is_train)\n\nbatch_size = 10\ndata_iter = load_array((features, labels), batch_size)\nnet = nn.Sequential(nn.Linear(2, 1))\nnet[0].weight.data.normal_(0, 0.01)\nnet[0].bias.data.fill_(0)\nloss = nn.MSELoss()\ntrainer = torch.optim.SGD(net.parameters(), lr=0.03)\nnum_epochs = 3\nfor epoch in range(num_epochs):\n    for X, y in data_iter:\n        l = loss(net(X) ,y)\n        # \u6ce8\u610f! \u7edf\u4e00\u5728\u5411\u524d\u4f20\u64ad\u4e4b\u524d\u6216\u4e4b\u540e\u4e4b\u540e, \u9700\u8981\u6e05\u7a7a\u68af\u5ea6!\n        trainer.zero_grad()\n        # \u53cd\u5411\u4f20\u64ad\n        l.backward()\n        # \u4f18\u5316\u5668\u66f4\u65b0\u53c2\u6570!\n        trainer.step()\n    l = loss(net(features), labels)\n    print(f'epoch {epoch + 1}, loss {l:f}')\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html","title":"\u6570\u636e\u64cd\u4f5c\u4e0e\u6570\u636e\u9884\u5904\u7406","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_2","title":"\u6570\u636e\u64cd\u4f5c","text":"<p>N\u7ef4\u6570\u7ec4\u662f\u673a\u5668\u5b66\u4e60\u548c\u795e\u7ecf\u7f51\u7edc\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784\uff1a0D\u662f\u6807\u91cf\uff1b1D\u662f\u5411\u91cf\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\uff1b2D\u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u6bd4\u5982\u8bf4\u6837\u672c-\u7279\u5f81\u77e9\u9635\uff1b3D\u53ef\u4ee5\u4ee3\u8868RGB\u56fe\u7247\uff0c\u5bbd\u00d7\u9ad8\u00d7\u901a\u9053\uff1b4D\u53ef\u4ee5\u662f\u4e00\u4e2aRGB\u7167\u7247\u6279\u91cf\u3002\u8bf8\u5982\u6b64\u7c7b\u3002</p> <p>\u521b\u5efa\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u9700\u8981\u4e09\u4e2a\u53c2\u6570\uff1a\u5f62\u72b6\uff0c\u4f8b\u59823\u00d74\u77e9\u9635\uff1b\u5143\u7d20\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\u8bf432\u4f4d\u6d6e\u70b9\u6570\uff1b\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u4f8b\u5982\u8bf4\u5168\u662f0\u6216\u8005\u968f\u673a\u5206\u5e03\u3002\u90a3\u4e48\u8bbf\u95ee\u5143\u7d20\u7528\u4e0b\u6807\u8fdb\u884c\u8bbf\u95ee\uff1a\u6b63\u89c4\u6765\u8bf4\uff0c\u4e00\u4e2a\u7ef4\u5ea6\u4e0a\uff0c\u6709\u4e09\u4e2a\u53c2\u6570\uff0c<code>a:b:c</code>\uff0ca\u4ee3\u8868\u8d77\u59cb\u4f4d\u7f6e\uff0cb\u4ee3\u8868\u7ec8\u6b62\u4f4d\u7f6e\u4f46\u662f\u4e0d\u5305\u542b\uff08\u5373\u8bbf\u95ee\u533a\u95f4\u4e3a\\([a,b)\\)\uff09\uff0cc\u4ee3\u8868\u8bbf\u95ee\u65f6\u7684\u6b65\u957f\u3002\u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u4e48\u9ed8\u8ba4\u586b\u5165a\uff0c\u4e24\u4e2a\u5c31\u662fab\uff0c\u4e09\u4e2a\u5c31\u662fabc\uff1b\u4e09\u4e2a\u53c2\u6570\u6ca1\u6709\u5fc5\u8981\u5168\u586b\u6ee1\uff0c\u6b65\u957f\u9ed8\u8ba4\u662f1\uff0c\u800ca b\u6ca1\u586b\u7684\u8bdd\u4ee3\u8868\u524d\u9762or\u540e\u9762\u7684\u5168\u53d6\u3002\u6bd4\u5982\u8bf4\uff1a<code>[1:3, 1:]</code>\u5728\u4e8c\u7ef4\u77e9\u9635\u4e2d\u5c31\u662f\u884c\u6570\u4e3a1 2\uff0c\u5217\u6570\u4e3a1\u53ca\u4ee5\u540e\u7684\u5168\u90e8\u5143\u7d20\uff1b<code>[::3, ::]</code>\u4ee3\u8868\u7684\u5c31\u662f\u884c\u6570\u4e0a\u4ece0\u5f00\u59cb\u6b65\u957f\u4e3a3\uff0c\u5217\u6570\u4e0a\u90fd\u53d6\u4e2d\u7684\u5143\u7d20\u3002</p> <p>\u540c\u65f6\u5173\u4e8e\u5f20\u91cf\u7684\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u5982\u4e0b\uff1a</p> <pre><code>import torch\nx = torch.arange(12)\n# tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\nx.shape\n# torch.Size([12])\nx.numel() # \u5f20\u91cf\u4e2d\u5143\u7d20\u7684\u603b\u6570\nX = x.reshape(3, 4) # \u6539\u53d8\u5f62\u72b6\u4f46\u662f\u4e0d\u6539\u53d8\u5143\u7d20\u6570\u91cf\u548c\u503c\nX = x.reshape(-1, 4) # -1\u7528\u6765\u81ea\u52a8\u8ba1\u7b97\u7ef4\u5ea6\nx1 = torch.zeros((2, 3, 4)) # \u4f20\u5165\u7684\u53c2\u6570\u4ee3\u8868\u4e86\u5f62\u72b6\u7ef4\u5ea6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u751f\u6210\u7684\u503c\u90fd\u662f0\nx2 = torch.ones((2, 3, 4)) # \u540c\u4e0a\uff0c\u751f\u6210\u7684\u5168\u662f1\uff1b\u6ce8\u610f\u4f20\u5165\u7684\u662f\u5143\u7ec4\nx3 = torch.randn(3, 4) # \u968f\u673a\u751f\u6210\u6d6e\u70b9\u6570\uff0c\u800c\u4e14\u662f\u5728\u5747\u503c\u4e3a0\uff0c\u6807\u51c6\u5dee\u4e3a1\u7684\u9ad8\u65af\u5206\u5e03\u4e2d\u968f\u673a\u91c7\u6837\n# \u5f53\u7136\u4e0a\u9762\u8fd9\u4e2a\u65b9\u6cd5\u4f20\u5165\u5143\u7ec4\u4e5f\u662f\u6b63\u786e\u7684\nx4 = torch.tensor([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])\n# \u5229\u7528\u5d4c\u5957\u5217\u8868\u6765\u4e3a\u6240\u9700\u5f20\u91cf\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\n\nx = torch.tensor([1.0, 2, 4, 8])\ny = torch.tensor([2, 2, 2, 2])\nx + y, x - y, x * y, x / y, x ** y  # **\u8fd0\u7b97\u7b26\u662f\u6c42\u5e42\u8fd0\u7b97\n'''\n(tensor([ 3.,  4.,  6., 10.]),\n tensor([-1.,  0.,  2.,  6.]),\n tensor([ 2.,  4.,  8., 16.]),\n tensor([0.5000, 1.0000, 2.0000, 4.0000]),\n tensor([ 1.,  4., 16., 64.]))\n'''\ntorch.exp(x)\n# tensor([2.7183e+00, 7.3891e+00, 5.4598e+01, 2.9810e+03])\n\nX = torch.arange(12, dtype=torch.float32).reshape((3,4)) # \u89c4\u5b9a\u6570\u636e\u7c7b\u578b\nY = torch.tensor([[2.0, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])\ntorch.cat((X, Y), dim=0), torch.cat((X, Y), dim=1)\n# \u6ce8\u610fdim\u53c2\u6570\u4ee3\u8868\u62fc\u63a5\u7684\u7ef4\u5ea6\n'''\n(tensor([[ 0.,  1.,  2.,  3.],\n         [ 4.,  5.,  6.,  7.],\n         [ 8.,  9., 10., 11.],\n         [ 2.,  1.,  4.,  3.],\n         [ 1.,  2.,  3.,  4.],\n         [ 4.,  3.,  2.,  1.]]),\n tensor([[ 0.,  1.,  2.,  3.,  2.,  1.,  4.,  3.],\n         [ 4.,  5.,  6.,  7.,  1.,  2.,  3.,  4.],\n         [ 8.,  9., 10., 11.,  4.,  3.,  2.,  1.]]))\n'''\ntorch.cat((X, Y), dim=0), torch.cat((X, Y), dim=0)\n'''\ntensor([[ 0.,  1.,  2.,  3.],\n         [ 4.,  5.,  6.,  7.],\n         [ 8.,  9., 10., 11.],\n         [ 2.,  1.,  4.,  3.],\n         [ 1.,  2.,  3.,  4.],\n         [ 4.,  3.,  2.,  1.]])\n'''\nx = X == Y # \u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679cX\u548cY\u76f8\u7b49\uff0c\u90a3\u4e48\u6784\u5efa\u7684\u65b0\u5f20\u91cf\u5bf9\u5e94\u4f4d\u7f6e\u662f1\nX.sum # \u6240\u6709\u5143\u7d20\u6c42\u548c\n</code></pre> <p>\u5176\u4e2d\uff0c\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u5e7f\u64ad\u673a\u5236\uff0c\u6765\u81ea\u4e8eNumpy\u7684\u4e60\u60ef\uff1a\u7531\u4e8e<code>a</code>\u548c<code>b</code>\u5206\u522b\u662f\\(3\\times1\\)\u548c\\(1\\times2\\)\u77e9\u9635\uff0c\u5982\u679c\u8ba9\u5b83\u4eec\u76f8\u52a0\uff0c\u5b83\u4eec\u7684\u5f62\u72b6\u4e0d\u5339\u914d\u3002\u6211\u4eec\u5c06\u4e24\u4e2a\u77e9\u9635\u5e7f\u64ad\u4e3a\u4e00\u4e2a\u66f4\u5927\u7684\\(3\\times2\\)\u77e9\u9635\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u77e9\u9635<code>a</code>\u5c06\u590d\u5236\u5217\uff0c \u77e9\u9635<code>b</code>\u5c06\u590d\u5236\u884c\uff0c\u7136\u540e\u518d\u6309\u5143\u7d20\u76f8\u52a0\u3002</p> <pre><code>a = torch.arange(3).reshape((3, 1))\nb = torch.arange(2).reshape((1, 2))\na+b\n'''\ntensor([[0, 1],\n        [1, 2],\n        [2, 3]])\n'''\n</code></pre> <p>\u540c\u65f6\u5982\u679c\u5e0c\u671b\u53cd\u8fc7\u6765\u5207\u7247\uff0c\u9700\u8981\u5229\u7528<code>torch.flip(tensor, dims=[])</code>\u65b9\u6cd5\uff08dims\u91cc\u9762\u4f20\u5165\u7684\u53c2\u6570\u53ef\u4ee5\u6709\u591a\u4e2a\uff09</p> <pre><code>X = torch.arrange(12).reshape(3, 4)\ntorch.flip(X, dims=[1])\n'''\ntensor([[ 3.,  2.,  1.,  0.],\n         [ 7.,  6.,  5.,  4.],\n         [11., 10.,  9.,  8.]])\n'''\ntorch.flip(X, dims=[0, 1])\n'''\n tensor([[11., 10.,  9.,  8.],\n         [ 7.,  6.,  5.,  4.],\n         [ 3.,  2.,  1.,  0.]]))\n'''\n</code></pre> <p>\u540c\u65f6\uff1a\u8fd0\u884c\u4e00\u4e9b\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e3a\u65b0\u7ed3\u679c\u5206\u914d\u5185\u5b58\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7528<code>Y = X + Y</code>\uff0c\u6211\u4eec\u5c06\u53d6\u6d88\u5f15\u7528<code>Y</code>\u6307\u5411\u7684\u5f20\u91cf\uff0c\u800c\u662f\u6307\u5411\u65b0\u5206\u914d\u7684\u5185\u5b58\u5904\u7684\u5f20\u91cf\u3002</p> <pre><code>before = id(Y)\nY = Y + X\nid(Y) == before # False\n</code></pre> <p>\u8fd9\u53ef\u80fd\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u539f\u56e0\u6709\u4e24\u4e2a\uff1a</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u4e0d\u60f3\u603b\u662f\u4e0d\u5fc5\u8981\u5730\u5206\u914d\u5185\u5b58\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u6709\u6570\u767e\u5146\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5728\u4e00\u79d2\u5185\u591a\u6b21\u66f4\u65b0\u6240\u6709\u53c2\u6570\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u539f\u5730\u6267\u884c\u8fd9\u4e9b\u66f4\u65b0\uff1b</p> <p>\u5176\u6b21\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u539f\u5730\u66f4\u65b0\uff0c\u5176\u4ed6\u5f15\u7528\u4ecd\u7136\u4f1a\u6307\u5411\u65e7\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u67d0\u4e9b\u4ee3\u7801\u53ef\u80fd\u4f1a\u65e0\u610f\u4e2d\u5f15\u7528\u65e7\u7684\u53c2\u6570\u3002</p> <p>\u4f46\u540c\u65f6\u5e78\u8fd0\u7684\u662f\uff0c\u539f\u5730\u6267\u884c\u64cd\u4f5c\u8fd8\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u8868\u793a\u6cd5\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u5206\u914d\u7ed9\u5148\u524d\u5206\u914d\u7684\u6570\u7ec4\uff0c\u4f8b\u5982<code>Y[:] = &lt;expression&gt;</code>\u3002</p> <pre><code>Z = torch.zeros_like(Y)\nprint('id(Z):', id(Z))\nZ[:] = X + Y\nprint('id(Z):', id(Z))\n# \u4e24\u6b21\u6253\u5370\u7684\u7ed3\u679c\u76f8\u540c\n</code></pre> <p>\u5982\u679c\u5728\u540e\u7eed\u8ba1\u7b97\u4e2d\u6ca1\u6709\u91cd\u590d\u4f7f\u7528<code>X</code>\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>X[:] = X + Y</code>\u6216<code>X += Y</code>\u6765\u51cf\u5c11\u64cd\u4f5c\u7684\u5185\u5b58\u5f00\u9500\u3002</p> <pre><code>before = id(X)\nX += Y\nid(X) == before # True\n</code></pre> <p>\u5c06\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u5b9a\u4e49\u7684\u5f20\u91cf\u8f6c\u6362\u4e3aNumPy\u5f20\u91cf\uff08<code>ndarray</code>\uff09\u5f88\u5bb9\u6613\uff0c\u53cd\u4e4b\u4e5f\u540c\u6837\u5bb9\u6613\u3002torch\u5f20\u91cf\u548cnumpy\u6570\u7ec4\u5c06\u5171\u4eab\u5b83\u4eec\u7684\u5e95\u5c42\u5185\u5b58\uff0c\u5c31\u5730\u64cd\u4f5c\u66f4\u6539\u4e00\u4e2a\u5f20\u91cf\u4e5f\u4f1a\u540c\u65f6\u66f4\u6539\u53e6\u4e00\u4e2a\u5f20\u91cf\u3002</p> <pre><code>A = X.numpy()\nB = torch.tensor(A)\ntype(A), type(B)\n# (numpy.ndarray, torch.Tensor)\na = torch.tensor([3.5])\ntype(a[0:]), a.item(), type(a.item()), type(float(a)), int(a)\n# (torch.Tensor, 3.5, float, float, 3)\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_3","title":"\u6570\u636e\u9884\u5904\u7406","text":"<p>\u4e3a\u4e86\u80fd\u7528\u6df1\u5ea6\u5b66\u4e60\u6765\u89e3\u51b3\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\uff0c\u6211\u4eec\u7ecf\u5e38\u4ece\u9884\u5904\u7406\u539f\u59cb\u6570\u636e\u5f00\u59cb\uff0c\u800c\u4e0d\u662f\u4ece\u90a3\u4e9b\u51c6\u5907\u597d\u7684\u5f20\u91cf\u683c\u5f0f\u6570\u636e\u5f00\u59cb\u3002\u5728Python\u4e2d\u5e38\u7528\u7684\u6570\u636e\u5206\u6790\u5de5\u5177\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528<code>pandas</code>\u8f6f\u4ef6\u5305\u3002\u50cf\u5e9e\u5927\u7684Python\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u8bb8\u591a\u5176\u4ed6\u6269\u5c55\u5305\u4e00\u6837\uff0c<code>pandas</code>\u53ef\u4ee5\u4e0e\u5f20\u91cf\u517c\u5bb9\u3002</p> <pre><code>import os\n\nos.makedirs(os.path.join('..', 'data'), exist_ok=True)\ndata_file = os.path.join('..', 'data', 'house_tiny.csv')\nwith open(data_file, 'w') as f:\n    f.write('NumRooms,Alley,Price\\n')  # \u5217\u540d\n    f.write('NA,Pave,127500\\n')  # \u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\n    f.write('2,NA,106000\\n')\n    f.write('4,NA,178100\\n')\n    f.write('NA,NA,140000\\n')\n\nimport pandas as pd\ndata = pd.read_csv(data_file)\nprint(data)\n'''\n   NumRooms Alley   Price\n0       NaN  Pave  127500\n1       2.0   NaN  106000\n2       4.0   NaN  178100\n3       NaN   NaN  140000\n'''\n</code></pre> <p>\u6ce8\u610f\uff0c\u201cNaN\u201d\u9879\u4ee3\u8868\u7f3a\u5931\u503c\u3002\u4e3a\u4e86\u5904\u7406\u7f3a\u5931\u7684\u6570\u636e\uff0c\u5178\u578b\u7684\u65b9\u6cd5\u5305\u62ec\u63d2\u503c\u6cd5\u548c\u5220\u9664\u6cd5\uff0c*\u5176\u4e2d\u63d2\u503c\u6cd5\u7528\u4e00\u4e2a\u66ff\u4ee3\u503c\u5f25\u8865\u7f3a\u5931\u503c\uff0c\u800c\u5220\u9664\u6cd5\u5219\u76f4\u63a5\u5ffd\u7565\u7f3a\u5931\u503c\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u8003\u8651\u63d2\u503c\u6cd5***\u3002</p> <p>\u901a\u8fc7\u4f4d\u7f6e\u7d22\u5f15<code>iloc</code>\uff0c\u6211\u4eec\u5c06<code>data</code>\u5206\u6210<code>inputs</code>\u548c<code>outputs</code>\uff0c\u5176\u4e2d\u524d\u8005\u4e3a<code>data</code>\u7684\u524d\u4e24\u5217\uff0c\u800c\u540e\u8005\u4e3a<code>data</code>\u7684\u6700\u540e\u4e00\u5217\u3002\u5bf9\u4e8e<code>inputs</code>\u4e2d\u7f3a\u5c11\u7684\u6570\u503c\uff0c\u6211\u4eec\u7528\u540c\u4e00\u5217\u7684\u5747\u503c\u66ff\u6362\u201cNaN\u201d\u9879\u3002</p> <pre><code>inputs, outputs = data.iloc[:, 0:2], data.iloc[:, 2]\ninputs = inputs.fillna(inputs.mean())\nprint(inputs)\n'''\n   NumRooms Alley\n0       3.0  Pave\n1       2.0   NaN\n2       4.0   NaN\n3       3.0   NaN\n'''\n</code></pre> <p>\u5bf9\u4e8e<code>inputs</code>\u4e2d\u7684\u7c7b\u522b\u503c\u6216\u79bb\u6563\u503c\uff0c\u6211\u4eec\u5c06\u201cNaN\u201d\u89c6\u4e3a\u4e00\u4e2a\u7c7b\u522b\u3002\u7531\u4e8e\u201c\u5df7\u5b50\u7c7b\u578b\u201d\uff08\u201cAlley\u201d\uff09\u5217\u53ea\u63a5\u53d7\u4e24\u79cd\u7c7b\u578b\u7684\u7c7b\u522b\u503c\u201cPave\u201d\u548c\u201cNaN\u201d\uff0c<code>pandas</code>\u53ef\u4ee5\u81ea\u52a8\u5c06\u6b64\u5217\u8f6c\u6362\u4e3a\u4e24\u5217\u201cAlley_Pave\u201d\u548c\u201cAlley_nan\u201d\u3002\u5df7\u5b50\u7c7b\u578b\u4e3a\u201cPave\u201d\u7684\u884c\u4f1a\u5c06\u201cAlley_Pave\u201d\u7684\u503c\u8bbe\u7f6e\u4e3a1\uff0c\u201cAlley_nan\u201d\u7684\u503c\u8bbe\u7f6e\u4e3a0\u3002\u7f3a\u5c11\u5df7\u5b50\u7c7b\u578b\u7684\u884c\u4f1a\u5c06\u201cAlley_Pave\u201d\u548c\u201cAlley_nan\u201d\u5206\u522b\u8bbe\u7f6e\u4e3a0\u548c1\u3002</p> <pre><code>inputs = pd.get_dummies(inputs, dummy_na=True)\nprint(inputs)\n'''\n   NumRooms  Alley_Pave  Alley_nan\n0       3.0           1          0\n1       2.0           0          1\n2       4.0           0          1\n3       3.0           0          1\n'''\n</code></pre> <p>\u73b0\u5728<code>inputs</code>\u548c<code>outputs</code>\u4e2d\u7684\u6240\u6709\u6761\u76ee\u90fd\u662f\u6570\u503c\u7c7b\u578b\uff0c\u5b83\u4eec\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5f20\u91cf\u683c\u5f0f\u3002\u5f53\u6570\u636e\u91c7\u7528\u5f20\u91cf\u683c\u5f0f\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728 :numref:<code>sec_ndarray</code>\u4e2d\u5f15\u5165\u7684\u90a3\u4e9b\u5f20\u91cf\u51fd\u6570\u6765\u8fdb\u4e00\u6b65\u64cd\u4f5c\u3002</p> <pre><code>import torch\nX, y = torch.tensor(inputs.values), torch.tensor(outputs.values)\nX, y\n'''\nimport torch\n\nX, y = torch.tensor(inputs.values), torch.tensor(outputs.values)\nX, y\n'''\n</code></pre> <p>\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684get_dummies\u65b9\u6cd5\u53ea\u5bf9\u4e00\u5217\u6570\u636e\u4e2d\u8981\u4e48\u662f\u5b57\u7b26\u4e32\u8981\u4e48\u662fNaN\u8fd9\u79cd\u60c5\u51b5\u8d77\u4f5c\u7528\u3002\u800c\u4e14\u5b57\u7b26\u4e32\u4e00\u5171\u51e0\u7c7b\uff0c\u90a3\u4e48\u5c31\u4f1a\u81ea\u52a8\u5206\u51fa\u591a\u5c11\u5217\u3002\u4f8b\u5982\uff1a\u5047\u5982\u8bf4NumRooms\u91cc\u9762\u4fee\u6539\u6210\uff1aNaN yes no\u4e09\u79cd\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u4f1a\u5982\u4e0b\uff1a</p> <pre><code>'''\n   NumRooms_no  NumRooms_yes  NumRooms_nan  Alley_Pave  Alley_nan\n0            0             0             1           1          0\n1            0             1             0           0          1\n2            1             0             0           0          1\n3            0             0             1           0          1\n'''\n</code></pre>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC.html","title":"\u77e9\u9635\u8ba1\u7b97\u4e0e\u81ea\u52a8\u6c42\u5bfc","text":""},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC.html#_2","title":"\u77e9\u9635\u8ba1\u7b97\u2014\u2014\u77e9\u9635\u600e\u4e48\u6c42\u5bfc\uff1f","text":"<p>\u51fd\u6570\u77e5\u9053\u5982\u4f55\u6c42\u5bfc\uff0c\u800c\u4e14\u8fd8\u77e5\u9053\u94fe\u5f0f\u6cd5\u5219\u3002\u4f46\u662f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u90fd\u662f\u77e9\u9635\u64cd\u4f5c\uff0c\u800c\u4e14\u540c\u6837\u9700\u8981\u4f7f\u7528\u68af\u5ea6\u8fdb\u884c\u53c2\u6570\u4f18\u5316\u3002\u90a3\u4e48\u5982\u4f55\u5bf9\u53c2\u6570\u6c42\u5bfc\u5462\uff1f\u5373\uff1a\u5982\u4f55\u5c06\u5bfc\u6570\u62d3\u5c55\u5230\u5411\u91cf\uff1f</p> <p>\u539f\u6765\u90fd\u662f\\(\\frac{\\partial y}{\\partial x}\\)\uff0c\u4f46\u662f\u73b0\u5728x y\u8fd9\u4e24\u4e2a\u53c2\u6570\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5\u662f\u53d8\u6210\u5411\u91cf\uff1a  \u7b2c\u4e00\u79cd\uff1a\\(\\frac{\\partial y}{\\partial \\vec x}\\)\u3002\u5982\u679cx\u5411\u91cf\u662f\u5217\u5411\u91cf\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u7ed3\u679c\u4f1a\u662f\u6a2a\u5411\u91cf\u3002\u4e0b\u9762\u56fe\u7247\u662f\u4e00\u4e2a\u4f8b\u5b50(\\(y=x_1^2+2x_2^2\\))\uff1a</p> <p></p> <p>\u8fd9\u79cd\u60c5\u51b5\u8fd8\u8f83\u597d\u7406\u89e3\uff0c\u4e3b\u8981\u662f\u5217\u5411\u91cf\u53d8\u4e3a\u884c\u5411\u91cf\u7684\u53d8\u5316\u4e00\u5f00\u59cb\u53ef\u80fd\u4e0d\u597d\u7406\u89e3\u3002\u6211\u662f\u8fd9\u4e48\u7406\u89e3\u7684\uff1a\u8fd9\u4e2a\u51fd\u6570y\u53ef\u4ee5\u6cf0\u52d2\u5c55\u5f00\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u5bfc\u6570\u00d7\uff08\u81ea\u53d8\u91cf-\u521d\u59cb\u503c\uff09\u8fd9\u4e00\u9879\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e58\u6cd5\u4e2d\u540e\u8005\u662f\u5217\u5411\u91cf\uff0c\u90a3\u4e48\u524d\u8005\u662f\u884c\u5411\u91cf\u7684\u8bdd\u5c31\u80fd\u6210\u529f\u5f97\u5230\u6807\u91cf\u7684\u7ed3\u679c\uff1b\u5f53\u7136\uff0c\u8fd9\u79cd\u7406\u89e3\u662f\u4e2a\u4eba\u4e14\u7c97\u7cd9\u7684\u3002\u540c\u6837\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u5bfc\u6570\u6709\u4e00\u4e9b\u7ecf\u5178\u7684\u516c\u5f0f\u5982\u4e0b\uff1a</p> <p></p> <p>\u7b2c\u4e8c\u79cd\uff1a\\(\\frac{\\partial \\vec y}{\\partial x}\\)\u3002\u8fd9\u4e2d\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\uff0c\u56e0\u4e3a\u53ef\u4ee5\u628ay\u5411\u91cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u662f\u4e3a\u4e00\u4e2ax\u76f8\u5173\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u8ba4\u540c\u7684\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5217\u5411\u91cf\uff08\u5982\u679cy\u662f\u5217\u5411\u91cf\u7684\u8bdd\uff09\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u6700\u540e\u662f\\(\\frac{\\partial \\vec y}{\\partial \\vec x}\\)\u3002\u5728\u524d\u9762\u4e24\u79cd\u7684\u4ecb\u7ecd\u4e4b\u540e\uff0c\u5c31\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u8ba4\u540c\u4e86\u3002y\u5411\u91cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u548cx\u5411\u91cf\u6709\u5173\uff0c\u56e0\u6b64\u6bcf\u4e00\u4e2a\u5143\u7d20\u5f97\u5230\u7684\u5bfc\u6570\u662f\u4e00\u4e2a\u884c\u5411\u91cf\uff0c\u90a3\u4e48\u6574\u4e2ay\u5411\u91cf\u7684\u5bfc\u6570\u5c31\u662f\u4e00\u4e2a\u65b9\u5f62\u77e9\u9635\u4e86\u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u4e00\u4e0b\u662f\u4e00\u4e9b\u8fd9\u7c7b\u5bfc\u6570\u7684\u6837\u4f8b\uff1a</p> <p> </p>"},{"location":"%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC.html#_3","title":"\u81ea\u52a8\u6c42\u5bfc","text":"<p>x y\u90fd\u662f\u6807\u91cf\u7684\u60c5\u51b5\u4e2d\u7684\u94fe\u5f0f\u6cd5\u5219\u5df2\u7ecf\u5f88\u719f\u6089\u4e86\uff0c\u90a3\u4e48\u5411\u91cf\u4e2d\u4f9d\u7136\u6709\u8fd9\u79cd\u94fe\u5f0f\u6cd5\u5219\uff0c\u4f46\u662f\u5173\u952e\u5728\u4e8e\u8981\u628a\u5f62\u72b6\u7406\u6e05\u695a\u3002\u77e9\u9635\u6c42\u5bfc\u7684\u94fe\u5f0f\u6cd5\u5219\u7684\u51e0\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p>\u5927\u81f4\u4e86\u89e3\u4e86\u77e9\u9635\u7684\u94fe\u5f0f\u6cd5\u5219\u4e4b\u540e\uff0cpytorch\u4e2d\u662f\u5982\u4f55\u5b9e\u73b0\u81ea\u52a8\u6c42\u5bfc\u7684\u5462\uff1fpytorch\u4f1a\u628a\u4ee3\u7801\u5206\u89e3\u6210\u64cd\u4f5c\u5b50\uff0c\u5e76\u4e14\u628a\u8ba1\u7b97\u8fc7\u7a0b\u8868\u793a\u6210\u4e00\u4e2a\u65e0\u73af\u56fe\uff0c\u90a3\u4e48\u94fe\u5f0f\u6cd5\u5219\u5bf9\u76ee\u6807\u6c42\u5bfc\u7684\u65f6\u5019\u5c31\u80fd\u6309\u56fe\u7d22\u9aa5\u4e86\u3002\u94fe\u5f0f\u6cd5\u5219\u53ef\u4ee5\u5206\u4e3a\u6b63\u5411\u548c\u53cd\u5411\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5728\u53cd\u5411\u62ff\u5230\u8868\u8fbe\u5f0f\u4e4b\u540e\uff0c\u4ecd\u9700\u8981\u4ee3\u5165\u503c\u8fdb\u5165\uff0c\u8fd9\u4e2a\u503c\u54ea\u91cc\u6765\u5462\uff1f\u90a3\u4e48\u5c31\u662f\u4e00\u5f00\u59cb\u5728\u6784\u5efa\u5b8c\u56fe\u4e4b\u540e\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u904d\u56fe\uff0c\u628a\u4e2d\u95f4\u53c2\u6570\u7684\u7ed3\u679c\u90fd\u7b97\u51fa\u6765\u5e76\u4fdd\u5b58\uff0c\u7136\u540e\u53cd\u5411\u8ba1\u7b97\u5bfc\u6570\u7684\u8868\u8fbe\u5f0f\uff0c\u628a\u4e4b\u524d\u6b63\u5411\u6267\u884c\u5f97\u5230\u7684\u7ed3\u679c\u4ee3\u5165\u3002\u90a3\u4e48\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e2a\u5f88\u5927\u7684GPU\u5185\u5b58\u5f00\u9500\u5c31\u662f\u7528\u6765\u50a8\u5b58\u8fd9\u4e9b\u4e2d\u95f4\u7ed3\u679c\uff0c\u56e0\u4e3a\u5982\u679cn\u662f\u64cd\u4f5c\u5b50\u4e2a\u6570\uff0c\u90a3\u4e48\u8ba1\u7b97\u590d\u6742\u5ea6\u5c31\u662f<code>O(n)</code>\u3002</p> <p></p> <p>\u90a3\u4e48pytorch\u4e2d\u662f\u5982\u4f55\u901a\u8fc7\u4ee3\u7801\u8fdb\u884c\u81ea\u52a8\u6c42\u5bfc\u7684\u5462\uff1f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1aPytorch\u4e2d\u64cd\u4f5c\u65e0\u73af\u56fe\u7684\u6784\u9020\u662f\u9690\u5f0f\u7684\u3002\u5b9e\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a(\u5047\u8bbe\u6211\u4eec\u60f3\u5bf9\u51fd\u6570\\(y=2\\mathbf{x}^{\\top}\\mathbf{x}\\)\u5173\u4e8e\u5217\u5411\u91cf\\(\\mathbf{x}\\)\u6c42\u5bfc)</p> <pre><code>import torch\nx = torch.arange(4.0)\nx.requires_grad_(True)  # \u7b49\u4ef7\u4e8ex=torch.arange(4.0,requires_grad=True)\n# require\u4e86grad\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 x.grad\u6765\u8bbf\u95ee\u5b83\u7684\u68af\u5ea6\u503c\u4e86\ny = 2 * torch.dot(x, x)\ny.backward()\nx.grad\n# \u4e3a\u4ec0\u4e48\u662fx\u8fd9\u91cc\u83b7\u53d6\u68af\u5ea6\u503c\u5462\uff1f\u56e0\u4e3ax\u5f52\u6839\u5230\u5e95\u662f\u81ea\u53d8\u91cf\uff0c\u800c\u4e14\u6df1\u5ea6\u5b66\u4e60\u4e2d\u66f4\u65b0\u7684\u53c2\u6570\u662fx\n# tensor([ 0.,  4.,  8., 12.])\nx.grad == 4 * x\n# tensor([True, True, True, True])\n# \u73b0\u5728\u8ba1\u7b97\u53e6\u4e00\u4e2a\u51fd\u6570\n# \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPyTorch\u4f1a\u7d2f\u79ef\u68af\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u6e05\u9664\u4e4b\u524d\u7684\u503c\nx.grad.zero_()\ny = x.sum()\ny.backward()\nx.grad # tensor([1., 1., 1., 1.])\n</code></pre> <p>\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPyTorch\u4f1a\u7d2f\u79ef\u68af\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u6e05\u9664\u4e4b\u524d\u7684\u503c</p> <p>\u540c\u6837\uff0cpytorch\u53ef\u4ee5\u624b\u52a8\u63a7\u5236\u54ea\u4e9b\u53c2\u52a0\u94fe\u5f0f\u6cd5\u5219\uff1a\u8fd9\u91cc\u53ef\u4ee5\u5206\u79bb<code>y</code>\u6765\u8fd4\u56de\u4e00\u4e2a\u65b0\u53d8\u91cf<code>u</code>\uff0c\u8be5\u53d8\u91cf\u4e0e<code>y</code>\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u4f46\u4e22\u5f03\u8ba1\u7b97\u56fe\u4e2d\u5982\u4f55\u8ba1\u7b97<code>y</code>\u7684\u4efb\u4f55\u4fe1\u606f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u68af\u5ea6\u4e0d\u4f1a\u5411\u540e\u6d41\u7ecf<code>u</code>\u5230<code>x</code>\u3002\u56e0\u6b64\uff0c\u4e0b\u9762\u7684\u53cd\u5411\u4f20\u64ad\u51fd\u6570\u8ba1\u7b97<code>z=u*x</code>\u5173\u4e8e<code>x</code>\u7684\u504f\u5bfc\u6570\uff0c\u540c\u65f6\u5c06<code>u</code>\u4f5c\u4e3a\u5e38\u6570\u5904\u7406\uff0c\u800c\u4e0d\u662f<code>z=x*x*x</code>\u5173\u4e8e<code>x</code>\u7684\u504f\u5bfc\u6570\u3002</p> <pre><code>x.grad.zero_()\ny = x * x\nu = y.detach()\nz = u * x\nz.sum().backward()\nx.grad == u # tensor([True, True, True, True])\n</code></pre> <p>\u4f7f\u7528\u81ea\u52a8\u5fae\u5206\u7684\u4e00\u4e2a\u597d\u5904\u662f\uff1a\u5373\u4f7f\u6784\u5efa\u51fd\u6570\u7684\u8ba1\u7b97\u56fe\u9700\u8981\u901a\u8fc7Python\u63a7\u5236\u6d41\uff08\u4f8b\u5982\uff0c\u6761\u4ef6\u3001\u5faa\u73af\u6216\u4efb\u610f\u51fd\u6570\u8c03\u7528\uff09\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u7684\u53d8\u91cf\u7684\u68af\u5ea6\u3002</p>"},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2.html","title":"Discrete Mathemetics","text":"<p>\u9996\u5148, \u5982\u679c\u4f60\u60f3\u9884\u4e60\u79bb\u6563\u6570\u5b66\u7684\u76f8\u5173\u5185\u5bb9, \u53ef\u4ee5\u8bbf\u95ee\u8bfe\u7a0b\u8bfe\u4ef6: https://github.com/bearthesilly/csrookie/tree/main/Discrete%20Mathematics/%E8%AF%BE%E4%BB%B6</p> <p>\u5176\u6b21, \u6709\u5173\u8bfe\u7a0b\u5185\u5bb9: \u4e0a\u534a\u5b66\u671f\u5b66\u4e60\u6570\u8bba\u76f8\u5173\u5185\u5bb9, \u4e0b\u534a\u5b66\u671f\u5b66\u4e60\u903b\u8f91\u4e0e\u56fe\u8bba. \u96be\u5ea6\u4e0a, \u6570\u8bba &gt; \u903b\u8f91 &gt; \u56fe\u8bba. \u8bfe\u7a0b\u5185\u5bb9\u4e0e\u79bb\u6563\u6570\u5b66\u5c0f\u9ed1\u4e66\u7684\u5185\u5bb9\u8bbe\u8ba1\u4e0d\u540c.</p> <p>\u6700\u540e, \u5982\u679c\u5e0c\u671b\u83b7\u5f97\u66f4\u591a\u5173\u4e8e\u5f80\u5e74\u4f5c\u4e1a, \u4e60\u9898\u8bfe\u8bb2\u4e49\u6216\u8005\u8bd5\u5377\u7684\u8d44\u6e90, \u53ef\u4ee5\u5728github\u4e0a\u9762\u641c\u7d22\u5173\u952e\u8bcd: <code>SI120</code> <code>shanghaitech</code></p> <p>\u5173\u4e8e\u8003\u8bd5: \u8003\u8bd5\u5f62\u5f0f\u5e76\u4e0d\u56fa\u5b9a, \u5185\u5bb9\u5e76\u4e0d\u56fa\u5b9a, 23\u5c4a\u671f\u4e2d\u8003\u8bd5\u5185\u5bb9\u4e3a\u6570\u8bba(\u4e0a\u534a\u5b66\u671f), \u671f\u672b\u8003\u8bd5\u4e3a\u903b\u8f91\u4e0e\u56fe\u8bba(\u4e0b\u534a\u5b66\u671f, \u4e14\u4e0d\u5305\u542b\u4e0a\u534a\u5b66\u671f\u5185\u5bb9). </p> <p>\u5173\u4e8echeatsheet: \u8c8c\u4f3ccheatsheet\u7684\u8981\u6c42\u4e0d\u662f\u56fa\u5b9a\u7684. 23\u5c4acheatsheet\u683c\u5f0f\u4e3a: \u4e00\u5f20A4\u7eb8\u7684\u6b63\u53cd\u4e24\u9762. </p>"},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec1/note.html","title":"Lec1","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec10/note.html","title":"Lec10","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec11/note.html","title":"Lec11","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec12/note.html","title":"Lec12","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec13%2614/note.html","title":"Lec13&14","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec15/note.html","title":"Lec15","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec2%263/note.html","title":"Lec2&3","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec4/note.html","title":"Lec4","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec5/note.html","title":"Lec5","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec6/note.html","title":"Lec6","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec7/note.html","title":"Lec7","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec8/note.html","title":"Lec8","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/Lec9/note.html","title":"Lec9","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/%E9%9A%8F%E7%AC%94%26%E5%A5%BD%E9%A2%98/note.html","title":"\u968f\u7b14&\u597d\u9898","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec1/note.html","title":"Lec1","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec10/note.html","title":"Lec10","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec11/note.html","title":"Lec11","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec12/note.html","title":"Lec12","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec13/note.html","title":"Lec13","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec14/note.html","title":"Lec14","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec2/note.html","title":"Lec2","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec3/note.html","title":"Lec3","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec4/note.html","title":"Lec4","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec5/note.html","title":"Lec5","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec6/note.html","title":"Lec6","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec7/note.html","title":"Lec7","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec8/note.html","title":"Lec8","text":""},{"location":"%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/Lec9/note.html","title":"Lec9","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2.html","title":"Linear Algebra","text":"<p>\u7ebf\u6027\u4ee3\u6570\u662fCS\u4e13\u4e1a\u6700\u91cd\u8981\u7684\u6570\u5b66\u57fa\u7840\u4e4b\u4e00. \u7ebf\u6027\u4ee3\u6570\u4e2d\u6709\u5f88\u591a\u7684\u6982\u5ff5, \u5982\u679c\u628a\u5b83\u4eec\u5f53\u4f5c\u5355\u72ec\u7684\u800c\u4e4b\u95f4\u6beb\u65e0\u5173\u8054\u7684\u677f\u5757, \u90a3\u4e48\u7406\u89e3\u8d77\u6765\u4f1a\u975e\u5e38\u75db\u82e6; \u800c\u4e8b\u5b9e\u4e0a, \u7ebf\u6027\u4ee3\u6570\u4e2d\u5f88\u591a\u7684\u6982\u5ff5\u4e0e\u5b9a\u7406\u7b49\u90fd\u662f\u878d\u4f1a\u8d2f\u901a\u7684. </p> <p>\u63a8\u8350\u7684\u8bfe\u672c\u6709\u5f88\u591a, \u65e0\u8bba\u662f\u56fd\u5185\u5916\u7684(\u53ef\u4ee5\u770b\u9009\u8bfe\u4fe1\u606f\u4e2d\u63a8\u8350\u7684\u4e66, \u6216\u8005\u662f\u95ee\u5b66\u957f\u5b66\u59d0), \u4f46\u662f\u591a\u7ffb\u4e66\u5de9\u56fa\u6982\u5ff5, \u6216\u8005\u8bf4\u591a\u590d\u4e60ppt\u5e76\u7406\u89e3\u77e5\u8bc6\u70b9, \u662f\u975e\u5e38\u6709\u5fc5\u8981\u7684. </p> <p>\u4e0d\u540c\u8001\u5e08\u7684\u8bb2\u4e49, ppt, \u4f5c\u4e1a\u7b49\u90fd\u662f\u4e0d\u4e00\u6837\u7684. \u6211\u7684\u7ebf\u4ee3\u8bfe\u8001\u5e08\u662f\u859b\u535a\u537f\u6559\u6388, \u4f53\u9a8c\u975e\u5e38\u597d(\u4e0d\u6784\u6210\u9009\u62e9\u4efb\u8bfe\u8001\u5e08\u7684\u610f\u89c1, \u4ec5\u4e3a\u5ba2\u89c2\u8bc4\u4ef7), \u800c\u5bf9\u5e94\u5206\u4eab\u7684\u8bfe\u7a0bppt\u4e0e\u8bb2\u4e49\u8bf7\u8bbf\u95ee: </p> <p>csrookie/Linear Algebra at main \u00b7 bearthesilly/csrookie (github.com)</p> <p>\u5173\u4e8e\u9898\u76ee\u7ec3\u4e60: \u7ebf\u6027\u4ee3\u6570\u5237\u9898\u6ca1\u5fc5\u8981\u90a3\u4e48\u5938\u5f20, \u56e0\u4e3a\u5de9\u56fa\u5e76\u771f\u6b63\u7406\u89e3\u77e5\u8bc6\u70b9\u662f\u6700\u91cd\u8981\u7684. \u5173\u4e8e\u5237\u9898\u7684\u9009\u62e9, \u5409\u7c73\u591a\u7ef4\u5947\u7684\u7ebf\u6027\u4ee3\u6570\u66f4\u504f\u5411\u8003\u7814\u7684\u7ebf\u4ee3, \u5e76\u4e14\u77e5\u8bc6\u70b9\u7f3a\u5931\u8f83\u591a; \u4f46\u662f\u540c\u65f6, \u5409\u7c73\u591a\u7ef4\u5947\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5de9\u56fa\u57fa\u7840\u7684\u89e3\u9898\u6280\u80fd, \u5e76\u4e14\u53ef\u4ee5\u8865\u5145\u8bfe\u4e0a\u4e0d\u4f1a\u6d89\u53ca\u5230\u7684\u7ed3\u8bba\u4e0e\u77e5\u8bc6\u70b9(\u6709\u65f6\u751a\u81f3\u5bf9\u8003\u8bd5\u4e2d\u7684\u96be\u9898\u6709\u5947\u6548). \u4f46\u662fall in all, \u4f5c\u4e1a\u8981\u8ba4\u771f\u505a, \u4e60\u9898\u8bfe\u8981\u8ba4\u771f\u542c, \u5b83\u4eec\u7684\u4f5c\u7528\u5f88\u5927. </p>"},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E6%80%BB%E5%A4%8D%E4%B9%A0/note.html","title":"\u603b\u590d\u4e60","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E6%89%8B%E6%B3%95%E4%B8%8E%E5%A5%BD%E9%A2%98/note.html","title":"\u624b\u6cd5\u4e0e\u597d\u9898","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html","title":"\u603b\u590d\u4e60","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html#_2","title":"\u7b2c\u4e00\u7ae0","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html#_3","title":"\u7b2c\u4e8c&amp;\u4e09\u7ae0","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html#_4","title":"\u7b2c\u56db\u7ae0","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html#_5","title":"\u7b2c\u4e94\u7ae0","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html#_6","title":"\u7b2c\u516d\u7ae0","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html#_7","title":"\u7b2c\u4e03\u7ae0","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%AB%A0%E8%8A%82%E5%9B%9E%E9%A1%BE/note.html#_8","title":"\u7b2c\u516b\u7ae0","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E8%A1%8C%E5%88%97%E5%BC%8F%E4%B8%8E%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5/note.html","title":"\u884c\u5217\u5f0f\u4e0e\u4f34\u968f\u77e9\u9635","text":""},{"location":"%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/note.html","title":"\u8bfe\u5802\u7b14\u8bb0","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%27%E8%AF%81%E6%98%8E%27%E6%80%BB%E7%BB%93/note.html","title":"\u7b2c\u4e00\u7ae0\u8bc1\u660e\u603b\u7ed3","text":"<p>\u8fd9\u4e00\u90e8\u5206\u5728\u9ad8\u7b49\u6570\u5b66\u4e2d\u5176\u5b9e\u5e76\u4e0d\u662f\u7279\u522b\u91cd\u8981, \u8003\u8bd5\u4e2d\u4e5f\u4e0d\u4f1a\u6d89\u53ca\u5230\u8fd9\u4e00\u90e8\u5206\u504f\u6570\u5b66\u5206\u6790\u7684\u6570\u5b66\u8bc1\u660e. \u4f46\u662f\u4f9d\u7136, ''\u5355\u8c03\u6709\u754c\u63a8\u51fa\u6709\u786e\u754c''\u8fd9\u4e00\u6761\u7ed3\u8bba\u5f88\u91cd\u8981. </p> <p></p> <p></p>"},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E4%B8%80%E5%85%83%E7%A7%AF%E5%88%86%E5%AD%A6%E5%A5%BD%E9%A2%98/note.html","title":"\u4e00\u5143\u79ef\u5206\u5b66\u597d\u9898","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%AE%9A%E7%A7%AF%E5%88%86%E6%A6%82%E5%BF%B5/note.html","title":"\u4e0d\u5b9a\u79ef\u5206\u4e0e\u5b9a\u79ef\u5206\u6982\u5ff5","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%93%E9%A2%98/note.html","title":"\u4e0d\u5b9a\u79ef\u5206\u4e13\u9898","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/note.html","title":"\u5199\u5728\u6700\u524d\u9762","text":"<p>\u5173\u4e8e\u9ad8\u7b49\u6570\u5b66\u7684\u5b66\u4e60\u5386\u7a0b:</p> <p>\u8bfe\u672c\u662f\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u7248\u672c\u7684\u5fae\u79ef\u5206: </p> <p></p> <p>\u8fd9\u672c\u8bfe\u672c\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e: \u4e0a\u518c\u7b2c\u4e00\u7ae0\u4e2d, \u52a0\u4e0a\u4e86\u4e00\u5b9a\u7684\u6570\u5b66\u5206\u6790\u7b2c\u4e00\u7ae0\u4e2d\u7684\u77e5\u8bc6\u70b9(\u4f46\u662f\u8003\u8bd5\u51e0\u4e4e\u4e0d\u6d89\u53ca(\u4f46\u662f\u4e0d\u6392\u9664quiz\u4f1a\u6d89\u53ca)); \u4e0b\u518c\u6709\u66f2\u7ebf\u79ef\u5206\u548c\u66f2\u9762\u79ef\u5206\u8fd9\u4e00\u7ae0\u8282, \u4ee5\u53ca\u7ea7\u6570\u91cc\u9762\u4ecb\u7ecd\u4e86Fourier\u7ea7\u6570(\u4f46\u662f\u5185\u5bb9\u5e76\u4e0d\u5982\u6570\u5206\u6df1\u5165). \u5982\u679c\u60f3\u5728\u5047\u671f\u95f4\u8fdb\u884c\u4e00\u5b9a\u7a0b\u5ea6\u7684\u9884\u4e60, \u53ef\u4ee5\u4e70\u5165or\u5728\u4e0a\u79d1\u5927\u56fe\u4e66\u9986\u91cc\u9762\u501f\u8fd9\u672c\u4e66(\u60f3\u501f\u7684\u8bdd, \u8981\u63d0\u65e9\u5165\u624b, \u56e0\u4e3a\u5f88\u591a\u4eba\u90fd\u4f1a\u5f88\u60f3\u501f). \u8fd9\u672c\u8bfe\u672c\u7684\u8bb2\u89e3\u8fd8\u662f\u8f83\u4e3a\u8be6\u7ec6\u7684. \u975e\u5e38\u96be\u53d7\u7684\u662f, \u8fd9\u672c\u4e66\u4f5c\u4e1a\u7b54\u6848\u6ca1\u6709\u8fc7\u7a0b, \u56e0\u6b64\u5c0f\u733f\u641c\u9898\u548c\u5927\u5b66\u641c\u9898\u9171\u53ef\u80fd\u662f\u4f60\u7684\u597d\u5e2e\u624b(\u81f3\u5c11\u5bf9\u6211\u6765\u8bf4\u662f\u5f88\u597d\u7684\u5e2e\u624b). </p> <p>(tip: \u5bf9\u4e8e\u6709\u5f88\u591a\u9053\u5c0f\u9898\u7684\u5927\u9898, \u4e0d\u8981\u62cd\u4e00\u6574\u4e2a\u5927\u9898, \u8bd5\u7740\u4e00\u9053\u4e00\u9053\u641c; \u641c\u9898\u6210\u529f\u7387: \u5c0f\u733f\u641c\u9898&gt;\u5927\u5b66\u641c\u9898\u9171)</p> <p>\u8003\u8bd5\u548c\u4f5c\u4e1a\u4e4b\u95f4\u8fd8\u662f\u6709\u4e00\u5c0f\u70b9\u5dee\u8ddd\u7684, \u5e73\u5747\u5206\u5927\u7ea6\u572860-75\u8303\u56f4\u5185, \u4e3b\u8981\u53d6\u51b3\u4e8e\u96be\u5ea6. \u5982\u679c\u4f5c\u4e1a\u8ba4\u771f\u5b8c\u6210, \u5e76\u4e14\u771f\u6b63\u7406\u89e3\u77e5\u8bc6\u70b9\u7684\u8bdd, \u53ef\u4ee5\u62ff\u5230\u6253\u5e95B, B+\u7684\u6210\u7ee9. \u4f46\u662f\u5982\u679c\u4f60\u60f3\u4eab\u53d7\u98de\u4e00\u6837\u5730\u611f\u89c9, \u5237\u9898\u5e76\u4e14\u603b\u7ed3\u662f\u6709\u5fc5\u8981\u7684.</p> <p>\u9996\u5148\u662f\u5927\u6982\u7387\u5e2e\u52a9\u4f60\u53d6\u5f97A-\u7684\u6559\u8f85: \u5409\u7c73\u591a\u7ef4\u5947\u7684\u5fae\u79ef\u5206. \u867d\u7136\u5409\u7c73\u591a\u7ef4\u5947\u7cfb\u5217\u91cc\u9762\u6709\u9ad8\u7b49\u6570\u5b66, \u4f46\u662f\u6211\u89c9\u5f97\u4e24\u672c\u53ef\u80fd\u5dee\u8ddd\u5e76\u4e0d\u4f1a\u5f88\u5927, \u867d\u7136\u9ad8\u7b49\u6570\u5b66\u90a3\u672c\u4e66\u6bd4\u5fae\u79ef\u5206\u539a. \u56e0\u6b64\u6211\u4f7f\u7528\u7684\u662f\u5409\u7c73\u591a\u7ef4\u5947\u5fae\u79ef\u5206</p> <p></p> <p></p> <p>\u7136\u540e\u5c31\u662f\u975e\u5e38\u5177\u6709\u6311\u6218\u6027, \u80fd\u591f\u5e2e\u52a9\u4f60\u62ff\u5230A\u4e43\u81f3A+\u7684\u6559\u8f85: \u5927\u5b66\u751f\u6570\u5b66\u7ade\u8d5b\u6559\u7a0b. \u8fd9\u672c\u4e66\u6839\u636e\u5927\u5b66\u751f\u6570\u5b66\u7ade\u8d5b(\u975e\u6570\u5b66\u7c7b)\u5927\u7eb2\u7f16\u5199, \u96be\u5ea6\u5341\u5206\u7ba1\u9971. \u4f46\u662f\u4f7f\u7528\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u6ce8\u610f\u53d6\u820d: \u8d85\u7eb2\u7684, \u8fc7\u7a0b\u5f88\u96be\u770b\u61c2\u7684(\u6ca1\u9519, \u4e66\u4e0a\u6709\u4e00\u4e9b\u6b65\u9aa4\u770b\u90fd\u770b\u4e0d\u61c2), \u5343\u4e07\u4e0d\u80fd\u8fc7\u5206\u7ea0\u7ed3, \u4e00\u5b9a\u8981\u6ce8\u610f\u9ad8\u6548\u5730\u6c72\u53d6\u7cbe\u534e. \u53e6\u5916\u8fd9\u672c\u4e66\u7b54\u6848\u6ca1\u6709\u8fc7\u7a0b, \u56e0\u6b64\u63a8\u8350B\u7ad9\u5927\u5b66\u4e0a\u7684\u89c6\u9891:</p> <p>https://www.bilibili.com/video/BV1ui4y127W4</p> <p></p> <p>\u5728\u8003\u8bd5\u524d, \u5982\u679c\u60f3\u505a\u51e0\u5957\u5377\u5b50\u8003\u5bdf\u4e0b\u81ea\u5df1\u7684\u719f\u7ec3\u7a0b\u5ea6, \u6216\u8005\u8bf4\u7ec3\u624b, \u90a3\u4e48\u5efa\u8bae\u53ef\u4ee5\u5230\u5938\u514b\u5b66\u4e60\u4e0a\u9762\u5927\u4f19\u5408\u8d44\u51d1\u4e2a\u4f1a\u5458, \u9009\u62e9\u81ea\u5df1\u7684\u5b66\u6821\u4e3a\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66(\u868c)\u5e76\u641c\u7d22\u9ad8\u6570\u8003\u8bd5\u8bd5\u5377. \u5f53\u7136, \u5f88\u591a\u7684\u65f6\u5019\u662f\u6ca1\u6709\u7b54\u6848\u7684, \u6240\u4ee5\u8bf4\u540c\u5b66\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u8ba8\u8bba.</p> <p>\u6700\u540e, \u603b\u7ed3\u975e\u5e38\u91cd\u8981. \u5237\u4e86\u5f88\u591a\u7684\u9898, \u89c1\u4e86\u5f88\u591a\u7684\u63d0\u9192, \u81ea\u5df1\u4e5f\u6216\u591a\u6216\u5c11\u79ef\u7d2f\u4e86\u4e00\u4e9b\"\u8d77\u624b\u5f0f\"\u6216\u8005\u662f\u7ecf\u9a8c, \u90a3\u4e48\u4e00\u5b9a\u8981\u603b\u7ed3\u6210\u7b14\u8bb0. </p>"},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86%E6%95%9B%E6%95%A3%E6%80%A7/note.html","title":"\u53cd\u5e38\u79ef\u5206\u655b\u6563\u6027","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E5%A4%B9%E9%80%BC%E5%87%86%E5%88%99%E6%B1%82%E6%9E%81%E9%99%90/note.html","title":"\u5939\u903c\u51c6\u5219\u6c42\u6781\u9650","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E5%AE%9A%E7%A7%AF%E5%88%86%E5%AE%9A%E4%B9%89%E6%B1%82%E6%9E%81%E9%99%90/note.html","title":"\u5b9a\u79ef\u5206\u5b9a\u4e49\u6c42\u6781\u9650","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E5%AF%BC%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E6%A6%82%E5%BF%B5%E4%B8%93%E9%A2%98/note.html","title":"\u5bfc\u6570\u5b9a\u4e49\u4e0e\u6982\u5ff5\u4e13\u9898","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/note.html","title":"\u5fae\u5206\u65b9\u7a0b","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E6%89%8B%E6%B3%95%26painpoint/note.html","title":"\u624b\u6cd5&painpoint","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AF%87/note.html","title":"\u671f\u672b\u590d\u4e60\u7bc7","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E6%9E%81%E9%99%90%E4%B8%8E%E8%BF%9E%E7%BB%AD%E9%9A%8F%E7%AC%94/note.html","title":"\u6781\u9650\u4e0e\u8fde\u7eed\u968f\u7b14","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E6%9E%81%E9%99%90%E4%B8%AD%E7%9A%84%E6%A6%82%E5%BF%B5%E9%A2%98/note.html","title":"\u6781\u9650\u4e2d\u7684\u6982\u5ff5\u9898","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E6%B1%82%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90/note.html","title":"\u6c42\u51fd\u6570\u6781\u9650","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E7%A7%AF%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F/note.html","title":"\u79ef\u5206\u4e0d\u7b49\u5f0f","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E7%A7%AF%E5%88%86%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/note.html","title":"\u79ef\u5206\u53ca\u5176\u5e94\u7528","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8%26%E5%87%BD%E6%95%B0%E5%BD%A2%E6%80%81/note.html","title":"\u79ef\u5206\u7684\u5e94\u7528&\u51fd\u6570\u5f62\u6001","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E7%A7%AF%E5%88%86%E9%80%92%E6%8E%A8%E5%85%AC%E5%BC%8F/note.html","title":"\u79ef\u5206\u9012\u63a8\u516c\u5f0f","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E7%AC%AC%E4%BA%8C%E4%B8%89%E5%9B%9B%E7%AB%A0%E5%A5%BD%E9%A2%98/note.html","title":"\u7b2c\u4e8c&\u4e09&\u56db\u7ae0\u597d\u9898","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E8%BF%9E%E7%BB%AD%E6%80%A7%20%E9%97%B4%E6%96%AD%E7%82%B9%20%E6%B8%90%E8%BF%91%E7%BA%BF/note.html","title":"\u8fde\u7eed\u6027 \u95f4\u65ad\u70b9 \u6e10\u8fd1\u7ebf","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A/%E9%80%92%E6%8E%A8%E6%95%B0%E5%88%97%E7%9A%84%E6%9E%81%E9%99%90/note.html","title":"\u9012\u63a8\u6570\u5217\u7684\u6781\u9650","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86/note.html","title":"\u4e8c\u91cd\u79ef\u5206","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86/note.html","title":"\u4e8c\u91cd\u79ef\u5206\u4e2d\u503c\u5b9a\u7406","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E5%A5%BD%E9%A2%98/note.html","title":"\u4e8c\u91cd\u79ef\u5206\u597d\u9898","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%81%8F%E5%AF%BC%E6%95%B0%E8%AE%A1%E7%AE%97/note.html","title":"\u504f\u5bfc\u6570\u8ba1\u7b97","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0/note.html","title":"\u5085\u91cc\u53f6\u7ea7\u6570","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%85%A8%E5%BE%AE%E5%88%86%E7%9A%84%E5%88%A4%E5%AE%9A%E4%B8%8E%E8%AE%A1%E7%AE%97/note.html","title":"\u5168\u5fae\u5206\u7684\u5224\u5b9a\u4e0e\u8ba1\u7b97","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E6%80%BB%E7%BB%93/note.html","title":"\u7b2c\u4e03\u7ae0 \u5411\u91cf\u7a7a\u95f4\u4e0e\u7a7a\u95f4\u89e3\u6790\u51e0\u4f55","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0/note.html","title":"\u591a\u5143\u51fd\u6570","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9E%81%E5%80%BC/note.html","title":"\u591a\u5143\u51fd\u6570\u6781\u503c","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%B7%B2%E7%9F%A5%E5%81%8F%E5%AF%BC%E5%8F%8D%E6%B1%82%E5%87%BD%E6%95%B0/note.html","title":"\u5df2\u77e5\u504f\u5bfc\u53cd\u6c42\u51fd\u6570","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E5%B9%82%E5%87%BD%E6%95%B0/note.html","title":"\u5e42\u51fd\u6570","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0%E5%92%8C%E5%88%A4%E5%88%AB%E6%B3%95/note.html","title":"\u65e0\u7a77\u7ea7\u6570\u548c\u5224\u522b\u6cd5","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0%E9%80%89%E6%8B%A9%E9%A2%98%E4%B8%8E%E5%8F%8D%E4%BE%8B/note.html","title":"\u65e0\u7a77\u7ea7\u6570\u9009\u62e9\u9898\u4e0e\u53cd\u4f8b","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E6%9B%B2%E7%BA%BF%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/note.html","title":"\u66f2\u7ebf\u4e0e\u66f2\u9762\u79ef\u5206","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E6%9B%B2%E7%BA%BF%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86%E6%80%BB%E7%BB%93/note.html","title":"\u66f2\u7ebf\u4e0e\u66f2\u9762\u79ef\u5206\u603b\u7ed3","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E6%9B%B2%E7%BA%BF%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86%E8%8D%9F%E8%90%83/note.html","title":"\u66f2\u7ebf\u4e0e\u66f2\u9762\u79ef\u5206\u835f\u8403","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/note.html","title":"\u671f\u4e2d\u603b\u7ed3","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E9%9A%90%E5%87%BD%E6%95%B0%E5%AD%98%E5%9C%A8%E5%AE%9A%E7%90%86/note.html","title":"\u9690\u51fd\u6570\u5b58\u5728\u5b9a\u7406","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E9%AB%98%E6%95%B0%E5%A5%BD%E9%A2%98%E4%B8%8A/note.html","title":"\u9ad8\u6570\u597d\u9898\u4e0a","text":""},{"location":"%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B/%E9%AB%98%E6%95%B0%E5%A5%BD%E9%A2%98%E4%B8%8B/note.html","title":"\u9ad8\u6570\u597d\u9898\u4e0b","text":""}]}